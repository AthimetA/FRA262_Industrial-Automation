
FRAM3re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae64  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800affc  0800affc  0001affc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b01c  0800b01c  000203c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b01c  0800b01c  0001b01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b024  0800b024  000203c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b024  0800b024  0001b024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b028  0800b028  0001b028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c4  20000000  0800b02c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  200003c8  0800b3f0  000203c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000aa4  0800b3f0  00020aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001788b  00000000  00000000  000203f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003081  00000000  00000000  00037c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  0003ad00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  0003be48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001788e  00000000  00000000  0003ce70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015892  00000000  00000000  000546fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092fd5  00000000  00000000  00069f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000fcf65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004974  00000000  00000000  000fd02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  001019a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200003c8 	.word	0x200003c8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800afe4 	.word	0x0800afe4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200003cc 	.word	0x200003cc
 80001d4:	0800afe4 	.word	0x0800afe4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	f00a f892 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	f00a f889 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 1, 3, KalmanVar ->MatC_Data);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	2101      	movs	r1, #1
 8000d90:	f00a f880 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f503 7027 	add.w	r0, r3, #668	; 0x29c
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	333c      	adds	r3, #60	; 0x3c
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2101      	movs	r1, #1
 8000da2:	f00a f877 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f503 7029 	add.w	r0, r3, #676	; 0x2a4
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3340      	adds	r3, #64	; 0x40
 8000db0:	2203      	movs	r2, #3
 8000db2:	2103      	movs	r1, #3
 8000db4:	f00a f86e 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 1, 1, KalmanVar ->MatR_Data);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3364      	adds	r3, #100	; 0x64
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	f00a f865 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3368      	adds	r3, #104	; 0x68
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	f00a f85c 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	338c      	adds	r3, #140	; 0x8c
 8000de6:	2201      	movs	r2, #1
 8000de8:	2103      	movs	r1, #3
 8000dea:	f00a f853 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3398      	adds	r3, #152	; 0x98
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	f00a f84a 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	33a4      	adds	r3, #164	; 0xa4
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	f00a f841 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f503 7035 	add.w	r0, r3, #724	; 0x2d4
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	33c8      	adds	r3, #200	; 0xc8
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	2103      	movs	r1, #3
 8000e20:	f00a f838 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 1, 1, KalmanVar ->MatY_Data);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f503 7037 	add.w	r0, r3, #732	; 0x2dc
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	33ec      	adds	r3, #236	; 0xec
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2101      	movs	r1, #1
 8000e32:	f00a f82f 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 1, 1, KalmanVar ->MatZ_Data);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	33f0      	adds	r3, #240	; 0xf0
 8000e40:	2201      	movs	r2, #1
 8000e42:	2101      	movs	r1, #1
 8000e44:	f00a f826 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 1, 1, KalmanVar ->MatS_Data);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f503 703b 	add.w	r0, r3, #748	; 0x2ec
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	33f4      	adds	r3, #244	; 0xf4
 8000e52:	2201      	movs	r2, #1
 8000e54:	2101      	movs	r1, #1
 8000e56:	f00a f81d 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 1, KalmanVar ->MatK_Data);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	33f8      	adds	r3, #248	; 0xf8
 8000e64:	2201      	movs	r2, #1
 8000e66:	2103      	movs	r1, #3
 8000e68:	f00a f814 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e78:	2203      	movs	r2, #3
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	f00a f80a 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	2103      	movs	r1, #3
 8000e90:	f00a f800 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	f009 fff6 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQ), 3, 3, KalmanVar ->MatGQ_Data);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	f009 ffec 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 1, KalmanVar ->MatCt_Data);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f503 7047 	add.w	r0, r3, #796	; 0x31c
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2103      	movs	r1, #3
 8000ecc:	f009 ffe2 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8000edc:	2203      	movs	r2, #3
 8000ede:	2103      	movs	r1, #3
 8000ee0:	f009 ffd8 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 1, 1, KalmanVar ->MatSinv_Data);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	f009 ffce 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 1, 3, KalmanVar ->MatCPk_Data);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f503 704d 	add.w	r0, r3, #820	; 0x334
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8000f04:	2203      	movs	r2, #3
 8000f06:	2101      	movs	r1, #1
 8000f08:	f009 ffc4 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000f18:	2203      	movs	r2, #3
 8000f1a:	2103      	movs	r1, #3
 8000f1c:	f009 ffba 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	2103      	movs	r1, #3
 8000f30:	f009 ffb0 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 1, 1, KalmanVar ->MatCXk_Data);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 7053 	add.w	r0, r3, #844	; 0x34c
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8000f40:	2201      	movs	r2, #1
 8000f42:	2101      	movs	r1, #1
 8000f44:	f009 ffa6 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 1, 1, KalmanVar ->MatCPkCt_Data);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f503 7055 	add.w	r0, r3, #852	; 0x354
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000f54:	2201      	movs	r2, #1
 8000f56:	2101      	movs	r1, #1
 8000f58:	f009 ff9c 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 1, KalmanVar ->MatPkCt_Data);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	f009 ff92 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2103      	movs	r1, #3
 8000f80:	f009 ff88 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000f90:	2203      	movs	r2, #3
 8000f92:	2103      	movs	r1, #3
 8000f94:	f009 ff7e 	bl	800ae94 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f503 705d 	add.w	r0, r3, #884	; 0x374
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	f009 ff74 	bl	800ae94 <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f009 fcfe 	bl	800a9bc <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4610      	mov	r0, r2
 8000fd0:	f009 fcf4 	bl	800a9bc <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f503 7225 	add.w	r2, r3, #660	; 0x294
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	f009 fcea 	bl	800a9bc <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQ));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f503 7129 	add.w	r1, r3, #676	; 0x2a4
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f009 fda4 	bl	800ab48 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQ), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 7143 	add.w	r1, r3, #780	; 0x30c
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8001012:	461a      	mov	r2, r3
 8001014:	f009 fd98 	bl	800ab48 <arm_mat_mult_f32>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <KalmanMatrixReset>:

void KalmanMatrixReset(KalmanFilterVar *KalmanVar , float Pvar)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	ed87 0a00 	vstr	s0, [r7]
	for (int index = 0; index < 3; ++index)
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e013      	b.n	800105a <KalmanMatrixReset+0x3a>
	{
		KalmanVar ->MatStateLast_Data[index] = 0.0;
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3326      	adds	r3, #38	; 0x26
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
		KalmanVar ->MatState_Data[index] = 0.0;
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3322      	adds	r3, #34	; 0x22
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	3304      	adds	r3, #4
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
	for (int index = 0; index < 3; ++index)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b02      	cmp	r3, #2
 800105e:	dde8      	ble.n	8001032 <KalmanMatrixReset+0x12>
	}

	KalmanVar ->MatPredict_Data[0] = Pvar;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	KalmanVar ->MatPredictLast_Data[0] = Pvar;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	KalmanVar ->MatPredict_Data[1] = 0.0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	KalmanVar ->MatPredictLast_Data[1] = 0.0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	KalmanVar ->MatPredict_Data[2] = 0.0;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	KalmanVar ->MatPredictLast_Data[2] = 0.0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	KalmanVar ->MatPredict_Data[3] = 0.0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	KalmanVar ->MatPredictLast_Data[3] = 0.0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	KalmanVar ->MatPredict_Data[4] = Pvar;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	KalmanVar ->MatPredictLast_Data[4] = Pvar;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	KalmanVar ->MatPredict_Data[5] = 0.0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	KalmanVar ->MatPredictLast_Data[5] = 0.0;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	KalmanVar ->MatPredict_Data[6] = 0.0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	KalmanVar ->MatPredictLast_Data[6] = 0.0;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	KalmanVar ->MatPredict_Data[7] = 0.0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	KalmanVar ->MatPredictLast_Data[7] = 0.0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	KalmanVar ->MatPredict_Data[8] = Pvar;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	KalmanVar ->MatPredictLast_Data[8] = Pvar;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	ed87 0a00 	vstr	s0, [r7]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001132:	461a      	mov	r2, r3
 8001134:	f009 fd08 	bl	800ab48 <arm_mat_mult_f32>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8001154:	461a      	mov	r2, r3
 8001156:	f009 fcf7 	bl	800ab48 <arm_mat_mult_f32>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f503 7141 	add.w	r1, r3, #772	; 0x304
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8001176:	461a      	mov	r2, r3
 8001178:	f009 fce6 	bl	800ab48 <arm_mat_mult_f32>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f503 7051 	add.w	r0, r3, #836	; 0x344
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8001198:	461a      	mov	r2, r3
 800119a:	f009 fe7f 	bl	800ae9c <arm_mat_add_f32>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80011c2:	461a      	mov	r2, r3
 80011c4:	f009 fcc0 	bl	800ab48 <arm_mat_mult_f32>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f503 7153 	add.w	r1, r3, #844	; 0x34c
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 80011e4:	461a      	mov	r2, r3
 80011e6:	f009 fc45 	bl	800aa74 <arm_mat_sub_f32>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8001206:	461a      	mov	r2, r3
 8001208:	f009 fc9e 	bl	800ab48 <arm_mat_mult_f32>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f503 704d 	add.w	r0, r3, #820	; 0x334
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8001228:	461a      	mov	r2, r3
 800122a:	f009 fc8d 	bl	800ab48 <arm_mat_mult_f32>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f503 7055 	add.w	r0, r3, #852	; 0x354
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f503 712b 	add.w	r1, r3, #684	; 0x2ac
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 800124a:	461a      	mov	r2, r3
 800124c:	f009 fe26 	bl	800ae9c <arm_mat_add_f32>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f503 723b 	add.w	r2, r3, #748	; 0x2ec
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001266:	4619      	mov	r1, r3
 8001268:	4610      	mov	r0, r2
 800126a:	f009 fd0d 	bl	800ac88 <arm_mat_inverse_f32>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 800128a:	461a      	mov	r2, r3
 800128c:	f009 fc5c 	bl	800ab48 <arm_mat_mult_f32>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f503 7149 	add.w	r1, r3, #804	; 0x324
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80012ac:	461a      	mov	r2, r3
 80012ae:	f009 fc4b 	bl	800ab48 <arm_mat_mult_f32>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f503 7137 	add.w	r1, r3, #732	; 0x2dc
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80012ce:	461a      	mov	r2, r3
 80012d0:	f009 fc3a 	bl	800ab48 <arm_mat_mult_f32>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f503 7059 	add.w	r0, r3, #868	; 0x364
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80012f0:	461a      	mov	r2, r3
 80012f2:	f009 fdd3 	bl	800ae9c <arm_mat_add_f32>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f503 7125 	add.w	r1, r3, #660	; 0x294
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8001312:	461a      	mov	r2, r3
 8001314:	f009 fc18 	bl	800ab48 <arm_mat_mult_f32>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f503 715b 	add.w	r1, r3, #876	; 0x36c
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8001334:	461a      	mov	r2, r3
 8001336:	f009 fb9d 	bl	800aa74 <arm_mat_sub_f32>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f503 705d 	add.w	r0, r3, #884	; 0x374
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 8001356:	461a      	mov	r2, r3
 8001358:	f009 fbf6 	bl	800ab48 <arm_mat_mult_f32>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <PIDAController_Init>:

#define PID_LIM_MIN_INT -10000.0f
#define PID_LIM_MAX_INT  10000.0f

void PIDAController_Init(PIDAController *pid)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	pid->Last1Error = 0.0f;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
	pid->Last2Error = 0.0f;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	; 0x24

	pid->differentiatorOutput = 0.0f;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
	pid->integratorOutput = 0.0f;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
	pid->proportionalOutput = 0.0f;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	61da      	str	r2, [r3, #28]

	pid->ControllerOut = 0.0f;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
	pid->ControllerLastOut = 0.0f;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c

	pid->OutputMax = PID_LIM_MAX_INT;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <PIDAController_Init+0x58>)
 80013b4:	611a      	str	r2, [r3, #16]
	pid->OutputMin = PID_LIM_MIN_INT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <PIDAController_Init+0x5c>)
 80013ba:	60da      	str	r2, [r3, #12]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	461c4000 	.word	0x461c4000
 80013cc:	c61c4000 	.word	0xc61c4000

080013d0 <PIDAPositonController_Update>:

float PIDAPositonController_Update(PIDAController *pid, float setpoint, float measurement)
{
 80013d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	ed87 0a02 	vstr	s0, [r7, #8]
 80013de:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = setpoint - measurement;
 80013e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80013e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ee:	edc7 7a05 	vstr	s15, [r7, #20]
    float errorDZ = error;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	613b      	str	r3, [r7, #16]
//    {
//    	pid->Kp  = 14.0;
//    	pid->Ki  = 0.000;
//    	pid->Kd  = 0.0;
//    }
	pid->Kp  = 3.5;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4a54      	ldr	r2, [pc, #336]	; (800154c <PIDAPositonController_Update+0x17c>)
 80013fa:	601a      	str	r2, [r3, #0]
	pid->Ki  = 0.0001;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4a54      	ldr	r2, [pc, #336]	; (8001550 <PIDAPositonController_Update+0x180>)
 8001400:	605a      	str	r2, [r3, #4]
	pid->Kd  = 0.0;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	609a      	str	r2, [r3, #8]

	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	ed93 7a00 	vldr	s14, [r3]
 8001410:	edd7 7a04 	vldr	s15, [r7, #16]
 8001414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	edd3 6a00 	vldr	s13, [r3]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	edd3 7a08 	vldr	s15, [r3, #32]
 8001424:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	ed93 7a01 	vldr	s14, [r3, #4]
 8001438:	edd7 7a04 	vldr	s15, [r7, #16]
 800143c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f828 	bl	80004a0 <__aeabi_f2d>
 8001450:	4604      	mov	r4, r0
 8001452:	460d      	mov	r5, r1
 8001454:	6938      	ldr	r0, [r7, #16]
 8001456:	f7ff f823 	bl	80004a0 <__aeabi_f2d>
 800145a:	4680      	mov	r8, r0
 800145c:	4689      	mov	r9, r1
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f81c 	bl	80004a0 <__aeabi_f2d>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	f7fe feba 	bl	80001e4 <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4640      	mov	r0, r8
 8001476:	4649      	mov	r1, r9
 8001478:	f7fe feb2 	bl	80001e0 <__aeabi_dsub>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4690      	mov	r8, r2
 8001482:	4699      	mov	r9, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f809 	bl	80004a0 <__aeabi_f2d>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4640      	mov	r0, r8
 8001494:	4649      	mov	r1, r9
 8001496:	f7fe fea5 	bl	80001e4 <__adddf3>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4620      	mov	r0, r4
 80014a0:	4629      	mov	r1, r5
 80014a2:	f7ff f855 	bl	8000550 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff fa81 	bl	80009b4 <__aeabi_d2f>
 80014b2:	4602      	mov	r2, r0
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	ed93 7a07 	vldr	s14, [r3, #28]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80014c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ce:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80014d8:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80014ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	dd04      	ble.n	8001502 <PIDAPositonController_Update+0x132>

    	pid->ControllerOut = pid->OutputMax;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
 8001500:	e00e      	b.n	8001520 <PIDAPositonController_Update+0x150>

    } else if (pid->ControllerOut < pid->OutputMin) {
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	edd3 7a03 	vldr	s15, [r3, #12]
 800150e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	d503      	bpl.n	8001520 <PIDAPositonController_Update+0x150>

    	pid->ControllerOut = pid->OutputMin;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a1a      	ldr	r2, [r3, #32]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	ee07 3a90 	vmov	s15, r3
}
 800153e:	eeb0 0a67 	vmov.f32	s0, s15
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800154a:	bf00      	nop
 800154c:	40600000 	.word	0x40600000
 8001550:	38d1b717 	.word	0x38d1b717

08001554 <PIDAVelocityController_Update>:



float PIDAVelocityController_Update(PIDAController *pid, float setpoint, float measurement){
 8001554:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001562:	edc7 0a01 	vstr	s1, [r7, #4]

    float error = setpoint - measurement;
 8001566:	ed97 7a02 	vldr	s14, [r7, #8]
 800156a:	edd7 7a01 	vldr	s15, [r7, #4]
 800156e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001572:	edc7 7a05 	vstr	s15, [r7, #20]
    float errorDZ = error;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	613b      	str	r3, [r7, #16]
//		pid->Kd  = 0.2;
//    }
//		pid->Kp  = 0.00687365813814001;
//		pid->Ki  = 0.687365813814002;
//		pid->Kd  = 0.00001718414534535;
		pid->Kp  = 2.4;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4a53      	ldr	r2, [pc, #332]	; (80016cc <PIDAVelocityController_Update+0x178>)
 800157e:	601a      	str	r2, [r3, #0]
		pid->Ki  = 1.2;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4a53      	ldr	r2, [pc, #332]	; (80016d0 <PIDAVelocityController_Update+0x17c>)
 8001584:	605a      	str	r2, [r3, #4]
		pid->Kd  = 0.2;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4a52      	ldr	r2, [pc, #328]	; (80016d4 <PIDAVelocityController_Update+0x180>)
 800158a:	609a      	str	r2, [r3, #8]

	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	ed93 7a00 	vldr	s14, [r3]
 8001592:	edd7 7a04 	vldr	s15, [r7, #16]
 8001596:	ee27 7a27 	vmul.f32	s14, s14, s15
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	edd3 6a00 	vldr	s13, [r3]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80015a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80015ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80015be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ff67 	bl	80004a0 <__aeabi_f2d>
 80015d2:	4604      	mov	r4, r0
 80015d4:	460d      	mov	r5, r1
 80015d6:	6938      	ldr	r0, [r7, #16]
 80015d8:	f7fe ff62 	bl	80004a0 <__aeabi_f2d>
 80015dc:	4680      	mov	r8, r0
 80015de:	4689      	mov	r9, r1
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff5b 	bl	80004a0 <__aeabi_f2d>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	f7fe fdf9 	bl	80001e4 <__adddf3>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4640      	mov	r0, r8
 80015f8:	4649      	mov	r1, r9
 80015fa:	f7fe fdf1 	bl	80001e0 <__aeabi_dsub>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4690      	mov	r8, r2
 8001604:	4699      	mov	r9, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff48 	bl	80004a0 <__aeabi_f2d>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4640      	mov	r0, r8
 8001616:	4649      	mov	r1, r9
 8001618:	f7fe fde4 	bl	80001e4 <__adddf3>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4620      	mov	r0, r4
 8001622:	4629      	mov	r1, r5
 8001624:	f7fe ff94 	bl	8000550 <__aeabi_dmul>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff f9c0 	bl	80009b4 <__aeabi_d2f>
 8001634:	4602      	mov	r2, r0
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	edd3 7a05 	vldr	s15, [r3, #20]
 8001646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001650:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800165a:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001670:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	dd04      	ble.n	8001684 <PIDAVelocityController_Update+0x130>

    	pid->ControllerOut = pid->OutputMax;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	691a      	ldr	r2, [r3, #16]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
 8001682:	e00e      	b.n	80016a2 <PIDAVelocityController_Update+0x14e>

    } else if (pid->ControllerOut < pid->OutputMin) {
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001698:	d503      	bpl.n	80016a2 <PIDAVelocityController_Update+0x14e>

    	pid->ControllerOut = pid->OutputMin;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6a1a      	ldr	r2, [r3, #32]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	ee07 3a90 	vmov	s15, r3
}
 80016c0:	eeb0 0a67 	vmov.f32	s0, s15
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016cc:	4019999a 	.word	0x4019999a
 80016d0:	3f99999a 	.word	0x3f99999a
 80016d4:	3e4ccccd 	.word	0x3e4ccccd

080016d8 <Robotinit>:


#include "Trajectory.h"

void Robotinit(RobotManagement *Robot)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	  Robot -> Position = 0.0;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
	  Robot -> Velocity = 0.0;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
	  Robot -> CurrentStation = 0;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	811a      	strh	r2, [r3, #8]
	  Robot -> GoalPositon = 0.0;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
	  Robot -> HomePositon = 0.0;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	615a      	str	r2, [r3, #20]
	  Robot -> QX = 0.0;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
	  Robot -> QV = 0.0;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
	  Robot -> QVMax = 0.0;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	621a      	str	r2, [r3, #32]

	  Robot -> flagSethome = 0;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  Robot -> flagStartTime = 0;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  Robot -> RunningFlag = 0;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	  Robot -> MotorIsOn = 0;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <TrajectorInit>:

void TrajectorInit(TrajectoryG *traject)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
	arm_mat_init_f32(&(traject ->MatTime), 6, 6, traject ->MatTime_Data);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f503 7004 	add.w	r0, r3, #528	; 0x210
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2206      	movs	r2, #6
 800175c:	2106      	movs	r1, #6
 800175e:	f009 fb99 	bl	800ae94 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatTimeINV), 6, 6, traject ->MatTimeINV_Data);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f503 7006 	add.w	r0, r3, #536	; 0x218
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3390      	adds	r3, #144	; 0x90
 800176c:	2206      	movs	r2, #6
 800176e:	2106      	movs	r1, #6
 8001770:	f009 fb90 	bl	800ae94 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatCondition), 6, 1, traject ->MatCondition_Data);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f503 7008 	add.w	r0, r3, #544	; 0x220
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001780:	2201      	movs	r2, #1
 8001782:	2106      	movs	r1, #6
 8001784:	f009 fb86 	bl	800ae94 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatA), 6, 1, traject ->MatTA_Data);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f503 700a 	add.w	r0, r3, #552	; 0x228
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001794:	2201      	movs	r2, #1
 8001796:	2106      	movs	r1, #6
 8001798:	f009 fb7c 	bl	800ae94 <arm_mat_init_f32>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <AbsVal>:
{
	Robot -> HomePositon = homePoint;
}

float AbsVal(float number)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 80017ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ba:	d50e      	bpl.n	80017da <AbsVal+0x36>
  {
    return number*-1.0;
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7fe fe6f 	bl	80004a0 <__aeabi_f2d>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f8f3 	bl	80009b4 <__aeabi_d2f>
 80017ce:	4603      	mov	r3, r0
 80017d0:	ee07 3a90 	vmov	s15, r3
 80017d4:	eef1 7a67 	vneg.f32	s15, s15
 80017d8:	e001      	b.n	80017de <AbsVal+0x3a>
  }
  else
  {
    return number;
 80017da:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 80017de:	eeb0 0a67 	vmov.f32	s0, s15
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal, float Veloinput){
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80017f4:	edc7 0a01 	vstr	s1, [r7, #4]
 80017f8:	ed87 1a00 	vstr	s2, [r7]

	traject -> Qin = Qinitial;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	traject -> Qfinal = Qfinal;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	// Set initial = 0;
	traject -> QRelative = traject -> Qfinal - traject -> Qin;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	ed93 7a7c 	vldr	s14, [r3, #496]	; 0x1f0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	edd3 7a7a 	vldr	s15, [r3, #488]	; 0x1e8
 8001818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	edc3 7a7b 	vstr	s15, [r3, #492]	; 0x1ec

	// Set Vmax Amax Jmax
	traject -> Vmax = 0.0;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	traject -> Amax = 21.77;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4a17      	ldr	r2, [pc, #92]	; (800188c <CoefficientAndTimeCalculation+0xa4>)
 8001830:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	traject -> Jmax = 114.59 ;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4a16      	ldr	r2, [pc, #88]	; (8001890 <CoefficientAndTimeCalculation+0xa8>)
 8001838:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	float gain = 0.0;
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
	if(traject -> QRelative < 0.0)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8001848:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	d502      	bpl.n	8001858 <CoefficientAndTimeCalculation+0x70>
	{
		gain = -1.0;
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <CoefficientAndTimeCalculation+0xac>)
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e002      	b.n	800185e <CoefficientAndTimeCalculation+0x76>
	}
	else
	{
		gain = 1.0;
 8001858:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800185c:	617b      	str	r3, [r7, #20]
	}
	// Find Speed limit
	float DistanceABS = AbsVal(traject -> QRelative);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8001864:	eeb0 0a67 	vmov.f32	s0, s15
 8001868:	f7ff ff9c 	bl	80017a4 <AbsVal>
 800186c:	ed87 0a04 	vstr	s0, [r7, #16]

	if(DistanceABS >= 130)
 8001870:	edd7 7a04 	vldr	s15, [r7, #16]
 8001874:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001898 <CoefficientAndTimeCalculation+0xb0>
 8001878:	eef4 7ac7 	vcmpe.f32	s15, s14
 800187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001880:	db0e      	blt.n	80018a0 <CoefficientAndTimeCalculation+0xb8>
	{
//		traject -> Vmax = 60;
		traject -> Vmax = 51;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4a05      	ldr	r2, [pc, #20]	; (800189c <CoefficientAndTimeCalculation+0xb4>)
 8001886:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800188a:	e07a      	b.n	8001982 <CoefficientAndTimeCalculation+0x19a>
 800188c:	41ae28f6 	.word	0x41ae28f6
 8001890:	42e52e14 	.word	0x42e52e14
 8001894:	bf800000 	.word	0xbf800000
 8001898:	43020000 	.word	0x43020000
 800189c:	424c0000 	.word	0x424c0000
	}
	else
	{
//		traject -> Vmax = (-0.0000003*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00009*(DistanceABS*DistanceABS*DistanceABS))-(0.0115*(DistanceABS*DistanceABS))+(0.995*DistanceABS)+7.1259;
		traject -> Vmax = (-0.0000002*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00007*(DistanceABS*DistanceABS*DistanceABS))-(0.0092*(DistanceABS*DistanceABS))+(0.8419*DistanceABS)+4.8492;
 80018a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80018a4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b8:	ee17 0a90 	vmov	r0, s15
 80018bc:	f7fe fdf0 	bl	80004a0 <__aeabi_f2d>
 80018c0:	f20f 5380 	addw	r3, pc, #1408	; 0x580
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	f7fe fe42 	bl	8000550 <__aeabi_dmul>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4614      	mov	r4, r2
 80018d2:	461d      	mov	r5, r3
 80018d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80018e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e4:	ee17 0a90 	vmov	r0, s15
 80018e8:	f7fe fdda 	bl	80004a0 <__aeabi_f2d>
 80018ec:	f20f 535c 	addw	r3, pc, #1372	; 0x55c
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7fe fe2c 	bl	8000550 <__aeabi_dmul>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4620      	mov	r0, r4
 80018fe:	4629      	mov	r1, r5
 8001900:	f7fe fc70 	bl	80001e4 <__adddf3>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4614      	mov	r4, r2
 800190a:	461d      	mov	r5, r3
 800190c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001910:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001914:	ee17 0a90 	vmov	r0, s15
 8001918:	f7fe fdc2 	bl	80004a0 <__aeabi_f2d>
 800191c:	f20f 5334 	addw	r3, pc, #1332	; 0x534
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe fe14 	bl	8000550 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4620      	mov	r0, r4
 800192e:	4629      	mov	r1, r5
 8001930:	f7fe fc56 	bl	80001e0 <__aeabi_dsub>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	6938      	ldr	r0, [r7, #16]
 800193e:	f7fe fdaf 	bl	80004a0 <__aeabi_f2d>
 8001942:	f20f 5318 	addw	r3, pc, #1304	; 0x518
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe fe01 	bl	8000550 <__aeabi_dmul>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4620      	mov	r0, r4
 8001954:	4629      	mov	r1, r5
 8001956:	f7fe fc45 	bl	80001e4 <__adddf3>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f20f 5300 	addw	r3, pc, #1280	; 0x500
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe fc3b 	bl	80001e4 <__adddf3>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f81d 	bl	80009b4 <__aeabi_d2f>
 800197a:	4602      	mov	r2, r0
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}

	if(traject -> Vmax > Veloinput)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8001988:	ed97 7a00 	vldr	s14, [r7]
 800198c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001994:	d503      	bpl.n	800199e <CoefficientAndTimeCalculation+0x1b6>
	{
		traject -> Vmax = Veloinput;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  traject -> Vmax *gain;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	ed93 7a56 	vldr	s14, [r3, #344]	; 0x158
 80019a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80019a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
	traject -> Amax =  traject -> Amax *gain;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 80019b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
	traject -> Jmax =  traject -> Jmax *gain;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 80019cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80019d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154

	// Calculate time
	traject -> TimeInit = 0.0;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	traject -> TimeFinal = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 80019f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001a00:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	ed93 6a7b 	vldr	s12, [r3, #492]	; 0x1ec
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	edd3 6a56 	vldr	s13, [r3, #344]	; 0x158
 8001a14:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	edc3 7a83 	vstr	s15, [r3, #524]	; 0x20c

	traject -> MatTime_Data[0] = 1.0;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a28:	601a      	str	r2, [r3, #0]
	traject -> MatTime_Data[1] = traject -> TimeInit;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	605a      	str	r2, [r3, #4]
	traject -> MatTime_Data[2] = traject -> TimeInit*traject -> TimeInit;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	edc3 7a02 	vstr	s15, [r3, #8]
	traject -> MatTime_Data[3] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	edc3 7a03 	vstr	s15, [r3, #12]
	traject -> MatTime_Data[4] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001a76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001a80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	edc3 7a04 	vstr	s15, [r3, #16]
	traject -> MatTime_Data[5] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001aaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	edc3 7a05 	vstr	s15, [r3, #20]
	traject -> MatTime_Data[6] = 0.0;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
	traject -> MatTime_Data[7] = 1.0;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ad6:	61da      	str	r2, [r3, #28]
	traject -> MatTime_Data[8] = 2.0*traject -> TimeInit;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001ade:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	edc3 7a08 	vstr	s15, [r3, #32]
	traject -> MatTime_Data[9] = 3.0*traject -> TimeInit*traject -> TimeInit;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fcd6 	bl	80004a0 <__aeabi_f2d>
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	4bcd      	ldr	r3, [pc, #820]	; (8001e30 <CoefficientAndTimeCalculation+0x648>)
 8001afa:	f7fe fd29 	bl	8000550 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4614      	mov	r4, r2
 8001b04:	461d      	mov	r5, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fcc7 	bl	80004a0 <__aeabi_f2d>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4620      	mov	r0, r4
 8001b18:	4629      	mov	r1, r5
 8001b1a:	f7fe fd19 	bl	8000550 <__aeabi_dmul>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4610      	mov	r0, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	f7fe ff45 	bl	80009b4 <__aeabi_d2f>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	625a      	str	r2, [r3, #36]	; 0x24
	traject -> MatTime_Data[10] = 4.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fcb2 	bl	80004a0 <__aeabi_f2d>
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	4bbc      	ldr	r3, [pc, #752]	; (8001e34 <CoefficientAndTimeCalculation+0x64c>)
 8001b42:	f7fe fd05 	bl	8000550 <__aeabi_dmul>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4614      	mov	r4, r2
 8001b4c:	461d      	mov	r5, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fca3 	bl	80004a0 <__aeabi_f2d>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4620      	mov	r0, r4
 8001b60:	4629      	mov	r1, r5
 8001b62:	f7fe fcf5 	bl	8000550 <__aeabi_dmul>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4614      	mov	r4, r2
 8001b6c:	461d      	mov	r5, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fc93 	bl	80004a0 <__aeabi_f2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4620      	mov	r0, r4
 8001b80:	4629      	mov	r1, r5
 8001b82:	f7fe fce5 	bl	8000550 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7fe ff11 	bl	80009b4 <__aeabi_d2f>
 8001b92:	4602      	mov	r2, r0
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
	traject -> MatTime_Data[11] = 5.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fc7e 	bl	80004a0 <__aeabi_f2d>
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	4ba3      	ldr	r3, [pc, #652]	; (8001e38 <CoefficientAndTimeCalculation+0x650>)
 8001baa:	f7fe fcd1 	bl	8000550 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4614      	mov	r4, r2
 8001bb4:	461d      	mov	r5, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fc6f 	bl	80004a0 <__aeabi_f2d>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	4629      	mov	r1, r5
 8001bca:	f7fe fcc1 	bl	8000550 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4614      	mov	r4, r2
 8001bd4:	461d      	mov	r5, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fc5f 	bl	80004a0 <__aeabi_f2d>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4620      	mov	r0, r4
 8001be8:	4629      	mov	r1, r5
 8001bea:	f7fe fcb1 	bl	8000550 <__aeabi_dmul>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4614      	mov	r4, r2
 8001bf4:	461d      	mov	r5, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fc4f 	bl	80004a0 <__aeabi_f2d>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4620      	mov	r0, r4
 8001c08:	4629      	mov	r1, r5
 8001c0a:	f7fe fca1 	bl	8000550 <__aeabi_dmul>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	f7fe fecd 	bl	80009b4 <__aeabi_d2f>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	62da      	str	r2, [r3, #44]	; 0x2c
	traject -> MatTime_Data[12] = 0.0;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	631a      	str	r2, [r3, #48]	; 0x30
	traject -> MatTime_Data[13] = 0.0;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	635a      	str	r2, [r3, #52]	; 0x34
	traject -> MatTime_Data[14] = 2.0;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c36:	639a      	str	r2, [r3, #56]	; 0x38
	traject -> MatTime_Data[15] = 6.0*traject -> TimeInit;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001c3e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	traject -> MatTime_Data[16] = 12.0*traject -> TimeInit*traject -> TimeInit;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc24 	bl	80004a0 <__aeabi_f2d>
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b77      	ldr	r3, [pc, #476]	; (8001e3c <CoefficientAndTimeCalculation+0x654>)
 8001c5e:	f7fe fc77 	bl	8000550 <__aeabi_dmul>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4614      	mov	r4, r2
 8001c68:	461d      	mov	r5, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc15 	bl	80004a0 <__aeabi_f2d>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	4629      	mov	r1, r5
 8001c7e:	f7fe fc67 	bl	8000550 <__aeabi_dmul>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe fe93 	bl	80009b4 <__aeabi_d2f>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40
	traject -> MatTime_Data[17] = 20.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc00 	bl	80004a0 <__aeabi_f2d>
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	4b66      	ldr	r3, [pc, #408]	; (8001e40 <CoefficientAndTimeCalculation+0x658>)
 8001ca6:	f7fe fc53 	bl	8000550 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4614      	mov	r4, r2
 8001cb0:	461d      	mov	r5, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fbf1 	bl	80004a0 <__aeabi_f2d>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	f7fe fc43 	bl	8000550 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4614      	mov	r4, r2
 8001cd0:	461d      	mov	r5, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fbe1 	bl	80004a0 <__aeabi_f2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	f7fe fc33 	bl	8000550 <__aeabi_dmul>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f7fe fe5f 	bl	80009b4 <__aeabi_d2f>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44
	traject -> MatTime_Data[18] = 1.0;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d02:	649a      	str	r2, [r3, #72]	; 0x48
	traject -> MatTime_Data[19] = traject -> TimeFinal;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	64da      	str	r2, [r3, #76]	; 0x4c
	traject -> MatTime_Data[20] = traject -> TimeFinal*traject -> TimeFinal;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	traject -> MatTime_Data[21] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001d30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	traject -> MatTime_Data[22] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001d50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	traject -> MatTime_Data[23] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001d7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001d84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001d8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	traject -> MatTime_Data[24] = 0.0;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	661a      	str	r2, [r3, #96]	; 0x60
	traject -> MatTime_Data[25] = 1.0;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001db0:	665a      	str	r2, [r3, #100]	; 0x64
	traject -> MatTime_Data[26] = 2.0*traject -> TimeFinal;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001db8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	traject -> MatTime_Data[27] = 3.0*traject -> TimeFinal*traject -> TimeFinal;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fb69 	bl	80004a0 <__aeabi_f2d>
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <CoefficientAndTimeCalculation+0x648>)
 8001dd4:	f7fe fbbc 	bl	8000550 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4614      	mov	r4, r2
 8001dde:	461d      	mov	r5, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fb5a 	bl	80004a0 <__aeabi_f2d>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4620      	mov	r0, r4
 8001df2:	4629      	mov	r1, r5
 8001df4:	f7fe fbac 	bl	8000550 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f7fe fdd8 	bl	80009b4 <__aeabi_d2f>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	66da      	str	r2, [r3, #108]	; 0x6c
	traject -> MatTime_Data[28] = 4.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fb45 	bl	80004a0 <__aeabi_f2d>
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <CoefficientAndTimeCalculation+0x64c>)
 8001e1c:	f7fe fb98 	bl	8000550 <__aeabi_dmul>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4614      	mov	r4, r2
 8001e26:	461d      	mov	r5, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001e2e:	e01d      	b.n	8001e6c <CoefficientAndTimeCalculation+0x684>
 8001e30:	40080000 	.word	0x40080000
 8001e34:	40100000 	.word	0x40100000
 8001e38:	40140000 	.word	0x40140000
 8001e3c:	40280000 	.word	0x40280000
 8001e40:	40340000 	.word	0x40340000
 8001e44:	9abcaf48 	.word	0x9abcaf48
 8001e48:	be8ad7f2 	.word	0xbe8ad7f2
 8001e4c:	d7c6fbd2 	.word	0xd7c6fbd2
 8001e50:	3f12599e 	.word	0x3f12599e
 8001e54:	18fc5048 	.word	0x18fc5048
 8001e58:	3f82d773 	.word	0x3f82d773
 8001e5c:	44d013a9 	.word	0x44d013a9
 8001e60:	3feaf0d8 	.word	0x3feaf0d8
 8001e64:	af4f0d84 	.word	0xaf4f0d84
 8001e68:	40136594 	.word	0x40136594
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb17 	bl	80004a0 <__aeabi_f2d>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4620      	mov	r0, r4
 8001e78:	4629      	mov	r1, r5
 8001e7a:	f7fe fb69 	bl	8000550 <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4614      	mov	r4, r2
 8001e84:	461d      	mov	r5, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fb07 	bl	80004a0 <__aeabi_f2d>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4620      	mov	r0, r4
 8001e98:	4629      	mov	r1, r5
 8001e9a:	f7fe fb59 	bl	8000550 <__aeabi_dmul>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f7fe fd85 	bl	80009b4 <__aeabi_d2f>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	671a      	str	r2, [r3, #112]	; 0x70
	traject -> MatTime_Data[29] = 5.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe faf2 	bl	80004a0 <__aeabi_f2d>
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4b78      	ldr	r3, [pc, #480]	; (80020a4 <CoefficientAndTimeCalculation+0x8bc>)
 8001ec2:	f7fe fb45 	bl	8000550 <__aeabi_dmul>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4614      	mov	r4, r2
 8001ecc:	461d      	mov	r5, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fae3 	bl	80004a0 <__aeabi_f2d>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4620      	mov	r0, r4
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	f7fe fb35 	bl	8000550 <__aeabi_dmul>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4614      	mov	r4, r2
 8001eec:	461d      	mov	r5, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fad3 	bl	80004a0 <__aeabi_f2d>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4620      	mov	r0, r4
 8001f00:	4629      	mov	r1, r5
 8001f02:	f7fe fb25 	bl	8000550 <__aeabi_dmul>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4614      	mov	r4, r2
 8001f0c:	461d      	mov	r5, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fac3 	bl	80004a0 <__aeabi_f2d>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4620      	mov	r0, r4
 8001f20:	4629      	mov	r1, r5
 8001f22:	f7fe fb15 	bl	8000550 <__aeabi_dmul>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7fe fd41 	bl	80009b4 <__aeabi_d2f>
 8001f32:	4602      	mov	r2, r0
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	675a      	str	r2, [r3, #116]	; 0x74
	traject -> MatTime_Data[30] = 0.0;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	679a      	str	r2, [r3, #120]	; 0x78
	traject -> MatTime_Data[31] = 0.0;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	67da      	str	r2, [r3, #124]	; 0x7c
	traject -> MatTime_Data[32] = 2.0;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	traject -> MatTime_Data[33] = 6.0*traject -> TimeFinal;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001f58:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	traject -> MatTime_Data[34] = 12.0*traject -> TimeFinal*traject -> TimeFinal;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fa97 	bl	80004a0 <__aeabi_f2d>
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	4b4c      	ldr	r3, [pc, #304]	; (80020a8 <CoefficientAndTimeCalculation+0x8c0>)
 8001f78:	f7fe faea 	bl	8000550 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4614      	mov	r4, r2
 8001f82:	461d      	mov	r5, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fa88 	bl	80004a0 <__aeabi_f2d>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4620      	mov	r0, r4
 8001f96:	4629      	mov	r1, r5
 8001f98:	f7fe fada 	bl	8000550 <__aeabi_dmul>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f7fe fd06 	bl	80009b4 <__aeabi_d2f>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	traject -> MatTime_Data[35] = 20.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fa72 	bl	80004a0 <__aeabi_f2d>
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	4b3a      	ldr	r3, [pc, #232]	; (80020ac <CoefficientAndTimeCalculation+0x8c4>)
 8001fc2:	f7fe fac5 	bl	8000550 <__aeabi_dmul>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4614      	mov	r4, r2
 8001fcc:	461d      	mov	r5, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fa63 	bl	80004a0 <__aeabi_f2d>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4620      	mov	r0, r4
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	f7fe fab5 	bl	8000550 <__aeabi_dmul>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4614      	mov	r4, r2
 8001fec:	461d      	mov	r5, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fa53 	bl	80004a0 <__aeabi_f2d>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4620      	mov	r0, r4
 8002000:	4629      	mov	r1, r5
 8002002:	f7fe faa5 	bl	8000550 <__aeabi_dmul>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	f7fe fcd1 	bl	80009b4 <__aeabi_d2f>
 8002012:	4602      	mov	r2, r0
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	traject -> MatCondition_Data[0] = traject -> Qin;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	traject -> MatCondition_Data[1] = 0;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	traject -> MatCondition_Data[2] = 0;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	traject -> MatCondition_Data[3] = traject -> Qfinal;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	traject -> MatCondition_Data[4] = 0;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	traject -> MatCondition_Data[5] = 0;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

	traject -> Trajectorystatus = arm_mat_inverse_f32(&(traject ->MatTime), &(traject ->MatTimeINV));
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002066:	4619      	mov	r1, r3
 8002068:	4610      	mov	r0, r2
 800206a:	f008 fe0d 	bl	800ac88 <arm_mat_inverse_f32>
 800206e:	4603      	mov	r3, r0
 8002070:	461a      	mov	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
	traject -> Trajectorystatus = arm_mat_mult_f32(&(traject ->MatTimeINV), &(traject ->MatCondition), &(traject ->MatA));
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f503 7006 	add.w	r0, r3, #536	; 0x218
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f503 7108 	add.w	r1, r3, #544	; 0x220
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800208a:	461a      	mov	r2, r3
 800208c:	f008 fd5c 	bl	800ab48 <arm_mat_mult_f32>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bdb0      	pop	{r4, r5, r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40140000 	.word	0x40140000
 80020a8:	40280000 	.word	0x40280000
 80020ac:	40340000 	.word	0x40340000

080020b0 <TrajectoryEvaluation>:


void TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime, uint64_t PredictTime){
 80020b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	e9c7 2300 	strd	r2, r3, [r7]
	// Microsec to sec
	static float t = 0;
	static float tP = 0;
	t  = (CurrentTime - StartTime)/1000000.0;
 80020be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020c6:	ebb0 0802 	subs.w	r8, r0, r2
 80020ca:	eb61 0903 	sbc.w	r9, r1, r3
 80020ce:	4640      	mov	r0, r8
 80020d0:	4649      	mov	r1, r9
 80020d2:	f7fe fa07 	bl	80004e4 <__aeabi_ul2d>
 80020d6:	a3ce      	add	r3, pc, #824	; (adr r3, 8002410 <TrajectoryEvaluation+0x360>)
 80020d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020dc:	f7fe fb62 	bl	80007a4 <__aeabi_ddiv>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7fe fc64 	bl	80009b4 <__aeabi_d2f>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4aca      	ldr	r2, [pc, #808]	; (8002418 <TrajectoryEvaluation+0x368>)
 80020f0:	6013      	str	r3, [r2, #0]
	tP = (PredictTime - StartTime)/1000000.0;
 80020f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80020f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020fa:	1a84      	subs	r4, r0, r2
 80020fc:	eb61 0503 	sbc.w	r5, r1, r3
 8002100:	4620      	mov	r0, r4
 8002102:	4629      	mov	r1, r5
 8002104:	f7fe f9ee 	bl	80004e4 <__aeabi_ul2d>
 8002108:	a3c1      	add	r3, pc, #772	; (adr r3, 8002410 <TrajectoryEvaluation+0x360>)
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	f7fe fb49 	bl	80007a4 <__aeabi_ddiv>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f7fe fc4b 	bl	80009b4 <__aeabi_d2f>
 800211e:	4603      	mov	r3, r0
 8002120:	4abe      	ldr	r2, [pc, #760]	; (800241c <TrajectoryEvaluation+0x36c>)
 8002122:	6013      	str	r3, [r2, #0]

	if(t >= 0 && t < traject -> TimeFinal)
 8002124:	4bbc      	ldr	r3, [pc, #752]	; (8002418 <TrajectoryEvaluation+0x368>)
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800212e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002132:	f2c0 8175 	blt.w	8002420 <TrajectoryEvaluation+0x370>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 800213c:	4bb6      	ldr	r3, [pc, #728]	; (8002418 <TrajectoryEvaluation+0x368>)
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214a:	f340 8169 	ble.w	8002420 <TrajectoryEvaluation+0x370>
	{
	      traject -> QA = (2*traject -> MatTA_Data[2]) + (6*traject -> MatTA_Data[3]*t) + (12*traject -> MatTA_Data[4]*(t*t)) + (20*traject -> MatTA_Data[5]*(t*t*t));
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8002154:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 800215e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002162:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002166:	4bac      	ldr	r3, [pc, #688]	; (8002418 <TrajectoryEvaluation+0x368>)
 8002168:	edd3 7a00 	vldr	s15, [r3]
 800216c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002170:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800217a:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800217e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002182:	4ba5      	ldr	r3, [pc, #660]	; (8002418 <TrajectoryEvaluation+0x368>)
 8002184:	ed93 6a00 	vldr	s12, [r3]
 8002188:	4ba3      	ldr	r3, [pc, #652]	; (8002418 <TrajectoryEvaluation+0x368>)
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002192:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002196:	ee37 7a27 	vadd.f32	s14, s14, s15
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 80021a0:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80021a4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80021a8:	4b9b      	ldr	r3, [pc, #620]	; (8002418 <TrajectoryEvaluation+0x368>)
 80021aa:	ed93 6a00 	vldr	s12, [r3]
 80021ae:	4b9a      	ldr	r3, [pc, #616]	; (8002418 <TrajectoryEvaluation+0x368>)
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021b8:	4b97      	ldr	r3, [pc, #604]	; (8002418 <TrajectoryEvaluation+0x368>)
 80021ba:	edd3 7a00 	vldr	s15, [r3]
 80021be:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8

	      traject -> QV = (traject -> MatTA_Data[1]) + (2*traject -> MatTA_Data[2]*t) + (3*traject -> MatTA_Data[3]*(t*t)) + (4*traject -> MatTA_Data[4]*(t*t*t)) + (5*traject -> MatTA_Data[5]*(t*t*t*t));
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 80021dc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80021e0:	4b8d      	ldr	r3, [pc, #564]	; (8002418 <TrajectoryEvaluation+0x368>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 80021f4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80021f8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80021fc:	4b86      	ldr	r3, [pc, #536]	; (8002418 <TrajectoryEvaluation+0x368>)
 80021fe:	ed93 6a00 	vldr	s12, [r3]
 8002202:	4b85      	ldr	r3, [pc, #532]	; (8002418 <TrajectoryEvaluation+0x368>)
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	ee66 7a27 	vmul.f32	s15, s12, s15
 800220c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002210:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800221a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800221e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002222:	4b7d      	ldr	r3, [pc, #500]	; (8002418 <TrajectoryEvaluation+0x368>)
 8002224:	ed93 6a00 	vldr	s12, [r3]
 8002228:	4b7b      	ldr	r3, [pc, #492]	; (8002418 <TrajectoryEvaluation+0x368>)
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002232:	4b79      	ldr	r3, [pc, #484]	; (8002418 <TrajectoryEvaluation+0x368>)
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	ee66 7a27 	vmul.f32	s15, s12, s15
 800223c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002240:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 800224a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800224e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002252:	4b71      	ldr	r3, [pc, #452]	; (8002418 <TrajectoryEvaluation+0x368>)
 8002254:	ed93 6a00 	vldr	s12, [r3]
 8002258:	4b6f      	ldr	r3, [pc, #444]	; (8002418 <TrajectoryEvaluation+0x368>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002262:	4b6d      	ldr	r3, [pc, #436]	; (8002418 <TrajectoryEvaluation+0x368>)
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	ee26 6a27 	vmul.f32	s12, s12, s15
 800226c:	4b6a      	ldr	r3, [pc, #424]	; (8002418 <TrajectoryEvaluation+0x368>)
 800226e:	edd3 7a00 	vldr	s15, [r3]
 8002272:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800227a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc

	      traject -> QVP = (traject -> MatTA_Data[1]) + (2*traject -> MatTA_Data[2]*tP) + (3*traject -> MatTA_Data[3]*(tP*tP)) + (4*traject -> MatTA_Data[4]*(tP*tP*tP)) + (5*traject -> MatTA_Data[5]*(tP*tP*tP*tP));
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8002290:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002294:	4b61      	ldr	r3, [pc, #388]	; (800241c <TrajectoryEvaluation+0x36c>)
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800229e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 80022a8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80022ac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80022b0:	4b5a      	ldr	r3, [pc, #360]	; (800241c <TrajectoryEvaluation+0x36c>)
 80022b2:	ed93 6a00 	vldr	s12, [r3]
 80022b6:	4b59      	ldr	r3, [pc, #356]	; (800241c <TrajectoryEvaluation+0x36c>)
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 80022ce:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80022d2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80022d6:	4b51      	ldr	r3, [pc, #324]	; (800241c <TrajectoryEvaluation+0x36c>)
 80022d8:	ed93 6a00 	vldr	s12, [r3]
 80022dc:	4b4f      	ldr	r3, [pc, #316]	; (800241c <TrajectoryEvaluation+0x36c>)
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022e6:	4b4d      	ldr	r3, [pc, #308]	; (800241c <TrajectoryEvaluation+0x36c>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 80022fe:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002302:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002306:	4b45      	ldr	r3, [pc, #276]	; (800241c <TrajectoryEvaluation+0x36c>)
 8002308:	ed93 6a00 	vldr	s12, [r3]
 800230c:	4b43      	ldr	r3, [pc, #268]	; (800241c <TrajectoryEvaluation+0x36c>)
 800230e:	edd3 7a00 	vldr	s15, [r3]
 8002312:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002316:	4b41      	ldr	r3, [pc, #260]	; (800241c <TrajectoryEvaluation+0x36c>)
 8002318:	edd3 7a00 	vldr	s15, [r3]
 800231c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002320:	4b3e      	ldr	r3, [pc, #248]	; (800241c <TrajectoryEvaluation+0x36c>)
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	ee66 7a27 	vmul.f32	s15, s12, s15
 800232a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800232e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200

	      traject -> QX = (traject -> MatTA_Data[0]) + (traject -> MatTA_Data[1]*t) + (traject -> MatTA_Data[2]*(t*t)) + (traject -> MatTA_Data[3]*(t*t*t)) + (traject -> MatTA_Data[4]*(t*t*t*t))+ (traject -> MatTA_Data[5]*(t*t*t*t*t));
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	ed93 7a4e 	vldr	s14, [r3, #312]	; 0x138
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	edd3 6a4f 	vldr	s13, [r3, #316]	; 0x13c
 8002344:	4b34      	ldr	r3, [pc, #208]	; (8002418 <TrajectoryEvaluation+0x368>)
 8002346:	edd3 7a00 	vldr	s15, [r3]
 800234a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800234e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	edd3 6a50 	vldr	s13, [r3, #320]	; 0x140
 8002358:	4b2f      	ldr	r3, [pc, #188]	; (8002418 <TrajectoryEvaluation+0x368>)
 800235a:	ed93 6a00 	vldr	s12, [r3]
 800235e:	4b2e      	ldr	r3, [pc, #184]	; (8002418 <TrajectoryEvaluation+0x368>)
 8002360:	edd3 7a00 	vldr	s15, [r3]
 8002364:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	edd3 6a51 	vldr	s13, [r3, #324]	; 0x144
 8002376:	4b28      	ldr	r3, [pc, #160]	; (8002418 <TrajectoryEvaluation+0x368>)
 8002378:	ed93 6a00 	vldr	s12, [r3]
 800237c:	4b26      	ldr	r3, [pc, #152]	; (8002418 <TrajectoryEvaluation+0x368>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002386:	4b24      	ldr	r3, [pc, #144]	; (8002418 <TrajectoryEvaluation+0x368>)
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002390:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002394:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	edd3 6a52 	vldr	s13, [r3, #328]	; 0x148
 800239e:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <TrajectoryEvaluation+0x368>)
 80023a0:	ed93 6a00 	vldr	s12, [r3]
 80023a4:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <TrajectoryEvaluation+0x368>)
 80023a6:	edd3 7a00 	vldr	s15, [r3]
 80023aa:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023ae:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <TrajectoryEvaluation+0x368>)
 80023b0:	edd3 7a00 	vldr	s15, [r3]
 80023b4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023b8:	4b17      	ldr	r3, [pc, #92]	; (8002418 <TrajectoryEvaluation+0x368>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	edd3 6a53 	vldr	s13, [r3, #332]	; 0x14c
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <TrajectoryEvaluation+0x368>)
 80023d2:	ed93 6a00 	vldr	s12, [r3]
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <TrajectoryEvaluation+0x368>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023e0:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <TrajectoryEvaluation+0x368>)
 80023e2:	edd3 7a00 	vldr	s15, [r3]
 80023e6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <TrajectoryEvaluation+0x368>)
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <TrajectoryEvaluation+0x368>)
 80023f6:	edd3 7a00 	vldr	s15, [r3]
 80023fa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 800240c:	e023      	b.n	8002456 <TrajectoryEvaluation+0x3a6>
 800240e:	bf00      	nop
 8002410:	00000000 	.word	0x00000000
 8002414:	412e8480 	.word	0x412e8480
 8002418:	200003e4 	.word	0x200003e4
 800241c:	200003e8 	.word	0x200003e8
	}
	else
	{
		traject -> QJ = 0;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		traject -> QA = 0;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
		traject -> QV = 0;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		traject -> QVP = 0;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		traject -> QX = traject -> Qfinal;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	}

}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002460 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002464:	f3bf 8f4f 	dsb	sy
}
 8002468:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <__NVIC_SystemReset+0x24>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002472:	4904      	ldr	r1, [pc, #16]	; (8002484 <__NVIC_SystemReset+0x24>)
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <__NVIC_SystemReset+0x28>)
 8002476:	4313      	orrs	r3, r2
 8002478:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800247a:	f3bf 8f4f 	dsb	sy
}
 800247e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002480:	bf00      	nop
 8002482:	e7fd      	b.n	8002480 <__NVIC_SystemReset+0x20>
 8002484:	e000ed00 	.word	0xe000ed00
 8002488:	05fa0004 	.word	0x05fa0004

0800248c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800248c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002494:	f002 fb82 	bl	8004b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002498:	f000 f8e6 	bl	8002668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800249c:	f000 fb18 	bl	8002ad0 <MX_GPIO_Init>
  MX_DMA_Init();
 80024a0:	f000 faee 	bl	8002a80 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80024a4:	f000 fac0 	bl	8002a28 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80024a8:	f000 f946 	bl	8002738 <MX_I2C1_Init>
  MX_TIM11_Init();
 80024ac:	f000 fa98 	bl	80029e0 <MX_TIM11_Init>
  MX_TIM1_Init();
 80024b0:	f000 f970 	bl	8002794 <MX_TIM1_Init>
  MX_TIM2_Init();
 80024b4:	f000 f9f2 	bl	800289c <MX_TIM2_Init>
  MX_TIM5_Init();
 80024b8:	f000 fa44 	bl	8002944 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_Init();
 80024bc:	f000 fe6a 	bl	8003194 <Ringbuf_Init>
  KalmanMatrixInit(&KalmanVar);
 80024c0:	4853      	ldr	r0, [pc, #332]	; (8002610 <main+0x184>)
 80024c2:	f7fe fc49 	bl	8000d58 <KalmanMatrixInit>
  TrajectorInit(&traject);
 80024c6:	4853      	ldr	r0, [pc, #332]	; (8002614 <main+0x188>)
 80024c8:	f7ff f93f 	bl	800174a <TrajectorInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80024cc:	2100      	movs	r1, #0
 80024ce:	4852      	ldr	r0, [pc, #328]	; (8002618 <main+0x18c>)
 80024d0:	f006 f81c 	bl	800850c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 80024d4:	4851      	ldr	r0, [pc, #324]	; (800261c <main+0x190>)
 80024d6:	f005 ff39 	bl	800834c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80024da:	213c      	movs	r1, #60	; 0x3c
 80024dc:	4850      	ldr	r0, [pc, #320]	; (8002620 <main+0x194>)
 80024de:	f006 f96b 	bl	80087b8 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 80024e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b4e      	ldr	r3, [pc, #312]	; (8002624 <main+0x198>)
 80024ec:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 80024ee:	4b4d      	ldr	r3, [pc, #308]	; (8002624 <main+0x198>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a4c      	ldr	r2, [pc, #304]	; (8002624 <main+0x198>)
 80024f4:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 80024f6:	4b4b      	ldr	r3, [pc, #300]	; (8002624 <main+0x198>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a4b      	ldr	r2, [pc, #300]	; (8002628 <main+0x19c>)
 80024fc:	6013      	str	r3, [r2, #0]
  PIDAController_Init(&PidVelo);
 80024fe:	484b      	ldr	r0, [pc, #300]	; (800262c <main+0x1a0>)
 8002500:	f7fe ff36 	bl	8001370 <PIDAController_Init>
  PIDAController_Init(&PidPos);
 8002504:	484a      	ldr	r0, [pc, #296]	; (8002630 <main+0x1a4>)
 8002506:	f7fe ff33 	bl	8001370 <PIDAController_Init>
  // Reset all Parameter
  Robotinit(&Robot);
 800250a:	484a      	ldr	r0, [pc, #296]	; (8002634 <main+0x1a8>)
 800250c:	f7ff f8e4 	bl	80016d8 <Robotinit>
  RobotRunToPositon(360.0,51.0);
 8002510:	eddf 0a49 	vldr	s1, [pc, #292]	; 8002638 <main+0x1ac>
 8002514:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800263c <main+0x1b0>
 8002518:	f001 fedc 	bl	80042d4 <RobotRunToPositon>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timeElapsed[0] = Micros();
 800251c:	f002 f83a 	bl	8004594 <Micros>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4946      	ldr	r1, [pc, #280]	; (8002640 <main+0x1b4>)
 8002526:	e9c1 2300 	strd	r2, r3, [r1]
	  timeElapsed[1] = HAL_GetTick();
 800252a:	f002 fb9d 	bl	8004c68 <HAL_GetTick>
 800252e:	4603      	mov	r3, r0
 8002530:	2200      	movs	r2, #0
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	4b42      	ldr	r3, [pc, #264]	; (8002640 <main+0x1b4>)
 8002538:	e9d7 1200 	ldrd	r1, r2, [r7]
 800253c:	e9c3 1202 	strd	r1, r2, [r3, #8]
	  RobotstateManagement();
 8002540:	f001 fb2e 	bl	8003ba0 <RobotstateManagement>
	  if(Micros() - EndEffLoopTime > 100000)
 8002544:	f002 f826 	bl	8004594 <Micros>
 8002548:	4b3e      	ldr	r3, [pc, #248]	; (8002644 <main+0x1b8>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	1a84      	subs	r4, r0, r2
 8002550:	eb61 0503 	sbc.w	r5, r1, r3
 8002554:	4b3c      	ldr	r3, [pc, #240]	; (8002648 <main+0x1bc>)
 8002556:	429c      	cmp	r4, r3
 8002558:	f175 0300 	sbcs.w	r3, r5, #0
 800255c:	d308      	bcc.n	8002570 <main+0xe4>
	  {
		  EndEffLoopTime = Micros();
 800255e:	f002 f819 	bl	8004594 <Micros>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4937      	ldr	r1, [pc, #220]	; (8002644 <main+0x1b8>)
 8002568:	e9c1 2300 	strd	r2, r3, [r1]
		  EndEffstateManagement();
 800256c:	f001 fc58 	bl	8003e20 <EndEffstateManagement>
	  }
	  if(Micros() - ControlLoopTime >= 10000)
 8002570:	f002 f810 	bl	8004594 <Micros>
 8002574:	4b35      	ldr	r3, [pc, #212]	; (800264c <main+0x1c0>)
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	ebb0 0802 	subs.w	r8, r0, r2
 800257e:	eb61 0903 	sbc.w	r9, r1, r3
 8002582:	f242 7310 	movw	r3, #10000	; 0x2710
 8002586:	4598      	cmp	r8, r3
 8002588:	f179 0300 	sbcs.w	r3, r9, #0
 800258c:	d336      	bcc.n	80025fc <main+0x170>
	  {
		ControlLoopTime  = Micros();
 800258e:	f002 f801 	bl	8004594 <Micros>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	492d      	ldr	r1, [pc, #180]	; (800264c <main+0x1c0>)
 8002598:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStartTime = Micros();
 800259c:	f001 fffa 	bl	8004594 <Micros>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	492a      	ldr	r1, [pc, #168]	; (8002650 <main+0x1c4>)
 80025a6:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 80025aa:	f000 fb55 	bl	8002c58 <EncoderRead>
//		KalmanFilterFunction(&KalmanVar,PositionDeg[0]);
		KalmanFilterFunction(&KalmanVar,VelocityDeg);
 80025ae:	4b29      	ldr	r3, [pc, #164]	; (8002654 <main+0x1c8>)
 80025b0:	edd3 7a00 	vldr	s15, [r3]
 80025b4:	eeb0 0a67 	vmov.f32	s0, s15
 80025b8:	4815      	ldr	r0, [pc, #84]	; (8002610 <main+0x184>)
 80025ba:	f7fe fdab 	bl	8001114 <KalmanFilterFunction>
		Robot.Position = PositionDeg[0];
 80025be:	4b26      	ldr	r3, [pc, #152]	; (8002658 <main+0x1cc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <main+0x1a8>)
 80025c4:	6013      	str	r3, [r2, #0]
		Robot.Velocity = KalmanVar.MatState_Data[1];
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <main+0x184>)
 80025c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025cc:	4a19      	ldr	r2, [pc, #100]	; (8002634 <main+0x1a8>)
 80025ce:	6053      	str	r3, [r2, #4]
		ControllLoopAndErrorHandler();
 80025d0:	f000 fcb8 	bl	8002f44 <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 80025d4:	f001 ffde 	bl	8004594 <Micros>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	491f      	ldr	r1, [pc, #124]	; (800265c <main+0x1d0>)
 80025de:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 80025e2:	4b1e      	ldr	r3, [pc, #120]	; (800265c <main+0x1d0>)
 80025e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <main+0x1c4>)
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	ebb0 0a02 	subs.w	sl, r0, r2
 80025f2:	eb61 0b03 	sbc.w	fp, r1, r3
 80025f6:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <main+0x1d4>)
 80025f8:	e9c3 ab00 	strd	sl, fp, [r3]
	  }
	  if(timeElapsed[0] > 12000000){
 80025fc:	4b10      	ldr	r3, [pc, #64]	; (8002640 <main+0x1b4>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	4918      	ldr	r1, [pc, #96]	; (8002664 <main+0x1d8>)
 8002604:	428a      	cmp	r2, r1
 8002606:	f173 0300 	sbcs.w	r3, r3, #0
 800260a:	d387      	bcc.n	800251c <main+0x90>
		  NVIC_SystemReset();
 800260c:	f7ff ff28 	bl	8002460 <__NVIC_SystemReset>
 8002610:	20000034 	.word	0x20000034
 8002614:	200007fc 	.word	0x200007fc
 8002618:	20000440 	.word	0x20000440
 800261c:	20000518 	.word	0x20000518
 8002620:	20000488 	.word	0x20000488
 8002624:	20000770 	.word	0x20000770
 8002628:	2000077c 	.word	0x2000077c
 800262c:	20000790 	.word	0x20000790
 8002630:	200007c4 	.word	0x200007c4
 8002634:	20000664 	.word	0x20000664
 8002638:	424c0000 	.word	0x424c0000
 800263c:	43b40000 	.word	0x43b40000
 8002640:	20000708 	.word	0x20000708
 8002644:	20000718 	.word	0x20000718
 8002648:	000186a1 	.word	0x000186a1
 800264c:	20000a78 	.word	0x20000a78
 8002650:	20000a48 	.word	0x20000a48
 8002654:	20000788 	.word	0x20000788
 8002658:	20000780 	.word	0x20000780
 800265c:	20000a50 	.word	0x20000a50
 8002660:	20000a58 	.word	0x20000a58
 8002664:	00b71b01 	.word	0x00b71b01

08002668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b094      	sub	sp, #80	; 0x50
 800266c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800266e:	f107 0320 	add.w	r3, r7, #32
 8002672:	2230      	movs	r2, #48	; 0x30
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f008 fcac 	bl	800afd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800267c:	f107 030c 	add.w	r3, r7, #12
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	4b27      	ldr	r3, [pc, #156]	; (8002730 <SystemClock_Config+0xc8>)
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	4a26      	ldr	r2, [pc, #152]	; (8002730 <SystemClock_Config+0xc8>)
 8002696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269a:	6413      	str	r3, [r2, #64]	; 0x40
 800269c:	4b24      	ldr	r3, [pc, #144]	; (8002730 <SystemClock_Config+0xc8>)
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026a8:	2300      	movs	r3, #0
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	4b21      	ldr	r3, [pc, #132]	; (8002734 <SystemClock_Config+0xcc>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a20      	ldr	r2, [pc, #128]	; (8002734 <SystemClock_Config+0xcc>)
 80026b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <SystemClock_Config+0xcc>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026c4:	2302      	movs	r3, #2
 80026c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026c8:	2301      	movs	r3, #1
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026cc:	2310      	movs	r3, #16
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026d0:	2302      	movs	r3, #2
 80026d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026d4:	2300      	movs	r3, #0
 80026d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026d8:	2308      	movs	r3, #8
 80026da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80026dc:	2364      	movs	r3, #100	; 0x64
 80026de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026e0:	2302      	movs	r3, #2
 80026e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026e4:	2304      	movs	r3, #4
 80026e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026e8:	f107 0320 	add.w	r3, r7, #32
 80026ec:	4618      	mov	r0, r3
 80026ee:	f005 f945 	bl	800797c <HAL_RCC_OscConfig>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80026f8:	f001 ff64 	bl	80045c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026fc:	230f      	movs	r3, #15
 80026fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002700:	2302      	movs	r3, #2
 8002702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800270c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002712:	f107 030c 	add.w	r3, r7, #12
 8002716:	2103      	movs	r1, #3
 8002718:	4618      	mov	r0, r3
 800271a:	f005 fba7 	bl	8007e6c <HAL_RCC_ClockConfig>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002724:	f001 ff4e 	bl	80045c4 <Error_Handler>
  }
}
 8002728:	bf00      	nop
 800272a:	3750      	adds	r7, #80	; 0x50
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40023800 	.word	0x40023800
 8002734:	40007000 	.word	0x40007000

08002738 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <MX_I2C1_Init+0x50>)
 800273e:	4a13      	ldr	r2, [pc, #76]	; (800278c <MX_I2C1_Init+0x54>)
 8002740:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <MX_I2C1_Init+0x50>)
 8002744:	4a12      	ldr	r2, [pc, #72]	; (8002790 <MX_I2C1_Init+0x58>)
 8002746:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <MX_I2C1_Init+0x50>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <MX_I2C1_Init+0x50>)
 8002750:	2200      	movs	r2, #0
 8002752:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <MX_I2C1_Init+0x50>)
 8002756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800275a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <MX_I2C1_Init+0x50>)
 800275e:	2200      	movs	r2, #0
 8002760:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <MX_I2C1_Init+0x50>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002768:	4b07      	ldr	r3, [pc, #28]	; (8002788 <MX_I2C1_Init+0x50>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <MX_I2C1_Init+0x50>)
 8002770:	2200      	movs	r2, #0
 8002772:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002774:	4804      	ldr	r0, [pc, #16]	; (8002788 <MX_I2C1_Init+0x50>)
 8002776:	f003 f98d 	bl	8005a94 <HAL_I2C_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002780:	f001 ff20 	bl	80045c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	200003ec 	.word	0x200003ec
 800278c:	40005400 	.word	0x40005400
 8002790:	00061a80 	.word	0x00061a80

08002794 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b092      	sub	sp, #72	; 0x48
 8002798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800279a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
 80027b4:	615a      	str	r2, [r3, #20]
 80027b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	2220      	movs	r2, #32
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f008 fc08 	bl	800afd4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027c4:	4b33      	ldr	r3, [pc, #204]	; (8002894 <MX_TIM1_Init+0x100>)
 80027c6:	4a34      	ldr	r2, [pc, #208]	; (8002898 <MX_TIM1_Init+0x104>)
 80027c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80027ca:	4b32      	ldr	r3, [pc, #200]	; (8002894 <MX_TIM1_Init+0x100>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d0:	4b30      	ldr	r3, [pc, #192]	; (8002894 <MX_TIM1_Init+0x100>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80027d6:	4b2f      	ldr	r3, [pc, #188]	; (8002894 <MX_TIM1_Init+0x100>)
 80027d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80027dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027de:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <MX_TIM1_Init+0x100>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027e4:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <MX_TIM1_Init+0x100>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ea:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <MX_TIM1_Init+0x100>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027f0:	4828      	ldr	r0, [pc, #160]	; (8002894 <MX_TIM1_Init+0x100>)
 80027f2:	f005 fe3c 	bl	800846e <HAL_TIM_PWM_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80027fc:	f001 fee2 	bl	80045c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002800:	2300      	movs	r3, #0
 8002802:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002808:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800280c:	4619      	mov	r1, r3
 800280e:	4821      	ldr	r0, [pc, #132]	; (8002894 <MX_TIM1_Init+0x100>)
 8002810:	f006 fde6 	bl	80093e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800281a:	f001 fed3 	bl	80045c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800281e:	2360      	movs	r3, #96	; 0x60
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002826:	2300      	movs	r3, #0
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800282a:	2300      	movs	r3, #0
 800282c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800282e:	2300      	movs	r3, #0
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002836:	2300      	movs	r3, #0
 8002838:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800283a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283e:	2200      	movs	r2, #0
 8002840:	4619      	mov	r1, r3
 8002842:	4814      	ldr	r0, [pc, #80]	; (8002894 <MX_TIM1_Init+0x100>)
 8002844:	f006 f94e 	bl	8008ae4 <HAL_TIM_PWM_ConfigChannel>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800284e:	f001 feb9 	bl	80045c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002852:	2300      	movs	r3, #0
 8002854:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800286a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	4619      	mov	r1, r3
 8002874:	4807      	ldr	r0, [pc, #28]	; (8002894 <MX_TIM1_Init+0x100>)
 8002876:	f006 fe21 	bl	80094bc <HAL_TIMEx_ConfigBreakDeadTime>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002880:	f001 fea0 	bl	80045c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002884:	4803      	ldr	r0, [pc, #12]	; (8002894 <MX_TIM1_Init+0x100>)
 8002886:	f001 ffd7 	bl	8004838 <HAL_TIM_MspPostInit>

}
 800288a:	bf00      	nop
 800288c:	3748      	adds	r7, #72	; 0x48
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000440 	.word	0x20000440
 8002898:	40010000 	.word	0x40010000

0800289c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08c      	sub	sp, #48	; 0x30
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028a2:	f107 030c 	add.w	r3, r7, #12
 80028a6:	2224      	movs	r2, #36	; 0x24
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f008 fb92 	bl	800afd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <MX_TIM2_Init+0xa4>)
 80028ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80028c0:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <MX_TIM2_Init+0xa4>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c6:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <MX_TIM2_Init+0xa4>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 80028cc:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <MX_TIM2_Init+0xa4>)
 80028ce:	f642 62df 	movw	r2, #11999	; 0x2edf
 80028d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <MX_TIM2_Init+0xa4>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028da:	4b19      	ldr	r3, [pc, #100]	; (8002940 <MX_TIM2_Init+0xa4>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028e0:	2303      	movs	r3, #3
 80028e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028e8:	2301      	movs	r3, #1
 80028ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028f4:	2300      	movs	r3, #0
 80028f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028f8:	2301      	movs	r3, #1
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028fc:	2300      	movs	r3, #0
 80028fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002904:	f107 030c 	add.w	r3, r7, #12
 8002908:	4619      	mov	r1, r3
 800290a:	480d      	ldr	r0, [pc, #52]	; (8002940 <MX_TIM2_Init+0xa4>)
 800290c:	f005 feae 	bl	800866c <HAL_TIM_Encoder_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002916:	f001 fe55 	bl	80045c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	4619      	mov	r1, r3
 8002926:	4806      	ldr	r0, [pc, #24]	; (8002940 <MX_TIM2_Init+0xa4>)
 8002928:	f006 fd5a 	bl	80093e0 <HAL_TIMEx_MasterConfigSynchronization>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002932:	f001 fe47 	bl	80045c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002936:	bf00      	nop
 8002938:	3730      	adds	r7, #48	; 0x30
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000488 	.word	0x20000488

08002944 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800294a:	f107 0308 	add.w	r3, r7, #8
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002958:	463b      	mov	r3, r7
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002960:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <MX_TIM5_Init+0x90>)
 8002962:	4a1d      	ldr	r2, [pc, #116]	; (80029d8 <MX_TIM5_Init+0x94>)
 8002964:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <MX_TIM5_Init+0x90>)
 8002968:	2263      	movs	r2, #99	; 0x63
 800296a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <MX_TIM5_Init+0x90>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 8002972:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <MX_TIM5_Init+0x90>)
 8002974:	4a19      	ldr	r2, [pc, #100]	; (80029dc <MX_TIM5_Init+0x98>)
 8002976:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002978:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <MX_TIM5_Init+0x90>)
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <MX_TIM5_Init+0x90>)
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002984:	4813      	ldr	r0, [pc, #76]	; (80029d4 <MX_TIM5_Init+0x90>)
 8002986:	f005 fc91 	bl	80082ac <HAL_TIM_Base_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8002990:	f001 fe18 	bl	80045c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002998:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800299a:	f107 0308 	add.w	r3, r7, #8
 800299e:	4619      	mov	r1, r3
 80029a0:	480c      	ldr	r0, [pc, #48]	; (80029d4 <MX_TIM5_Init+0x90>)
 80029a2:	f006 f961 	bl	8008c68 <HAL_TIM_ConfigClockSource>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 80029ac:	f001 fe0a 	bl	80045c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029b0:	2320      	movs	r3, #32
 80029b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80029b8:	463b      	mov	r3, r7
 80029ba:	4619      	mov	r1, r3
 80029bc:	4805      	ldr	r0, [pc, #20]	; (80029d4 <MX_TIM5_Init+0x90>)
 80029be:	f006 fd0f 	bl	80093e0 <HAL_TIMEx_MasterConfigSynchronization>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 80029c8:	f001 fdfc 	bl	80045c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80029cc:	bf00      	nop
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	200004d0 	.word	0x200004d0
 80029d8:	40000c00 	.word	0x40000c00
 80029dc:	0001869f 	.word	0x0001869f

080029e0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <MX_TIM11_Init+0x40>)
 80029e6:	4a0f      	ldr	r2, [pc, #60]	; (8002a24 <MX_TIM11_Init+0x44>)
 80029e8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80029ea:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <MX_TIM11_Init+0x40>)
 80029ec:	2263      	movs	r2, #99	; 0x63
 80029ee:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <MX_TIM11_Init+0x40>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80029f6:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <MX_TIM11_Init+0x40>)
 80029f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029fc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <MX_TIM11_Init+0x40>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a04:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <MX_TIM11_Init+0x40>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002a0a:	4805      	ldr	r0, [pc, #20]	; (8002a20 <MX_TIM11_Init+0x40>)
 8002a0c:	f005 fc4e 	bl	80082ac <HAL_TIM_Base_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002a16:	f001 fdd5 	bl	80045c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000518 	.word	0x20000518
 8002a24:	40014800 	.word	0x40014800

08002a28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a2c:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <MX_USART2_UART_Init+0x50>)
 8002a2e:	4a13      	ldr	r2, [pc, #76]	; (8002a7c <MX_USART2_UART_Init+0x54>)
 8002a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <MX_USART2_UART_Init+0x50>)
 8002a34:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8002a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002a3a:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <MX_USART2_UART_Init+0x50>)
 8002a3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a40:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a42:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <MX_USART2_UART_Init+0x50>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <MX_USART2_UART_Init+0x50>)
 8002a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <MX_USART2_UART_Init+0x50>)
 8002a52:	220c      	movs	r2, #12
 8002a54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a56:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <MX_USART2_UART_Init+0x50>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <MX_USART2_UART_Init+0x50>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a62:	4805      	ldr	r0, [pc, #20]	; (8002a78 <MX_USART2_UART_Init+0x50>)
 8002a64:	f006 fd90 	bl	8009588 <HAL_UART_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8002a6e:	f001 fda9 	bl	80045c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000560 	.word	0x20000560
 8002a7c:	40004400 	.word	0x40004400

08002a80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <MX_DMA_Init+0x4c>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <MX_DMA_Init+0x4c>)
 8002a90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <MX_DMA_Init+0x4c>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	2010      	movs	r0, #16
 8002aa8:	f002 f9c5 	bl	8004e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002aac:	2010      	movs	r0, #16
 8002aae:	f002 f9de 	bl	8004e6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	2011      	movs	r0, #17
 8002ab8:	f002 f9bd 	bl	8004e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002abc:	2011      	movs	r0, #17
 8002abe:	f002 f9d6 	bl	8004e6e <HAL_NVIC_EnableIRQ>

}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800

08002ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	; 0x28
 8002ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad6:	f107 0314 	add.w	r3, r7, #20
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	609a      	str	r2, [r3, #8]
 8002ae2:	60da      	str	r2, [r3, #12]
 8002ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	4b4e      	ldr	r3, [pc, #312]	; (8002c24 <MX_GPIO_Init+0x154>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a4d      	ldr	r2, [pc, #308]	; (8002c24 <MX_GPIO_Init+0x154>)
 8002af0:	f043 0304 	orr.w	r3, r3, #4
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b4b      	ldr	r3, [pc, #300]	; (8002c24 <MX_GPIO_Init+0x154>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	4b47      	ldr	r3, [pc, #284]	; (8002c24 <MX_GPIO_Init+0x154>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a46      	ldr	r2, [pc, #280]	; (8002c24 <MX_GPIO_Init+0x154>)
 8002b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b44      	ldr	r3, [pc, #272]	; (8002c24 <MX_GPIO_Init+0x154>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	4b40      	ldr	r3, [pc, #256]	; (8002c24 <MX_GPIO_Init+0x154>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a3f      	ldr	r2, [pc, #252]	; (8002c24 <MX_GPIO_Init+0x154>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <MX_GPIO_Init+0x154>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <MX_GPIO_Init+0x154>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a38      	ldr	r2, [pc, #224]	; (8002c24 <MX_GPIO_Init+0x154>)
 8002b44:	f043 0302 	orr.w	r3, r3, #2
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <MX_GPIO_Init+0x154>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	607b      	str	r3, [r7, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 8002b56:	2200      	movs	r2, #0
 8002b58:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002b5c:	4832      	ldr	r0, [pc, #200]	; (8002c28 <MX_GPIO_Init+0x158>)
 8002b5e:	f002 ff4d 	bl	80059fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin, GPIO_PIN_RESET);
 8002b62:	2200      	movs	r2, #0
 8002b64:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8002b68:	4830      	ldr	r0, [pc, #192]	; (8002c2c <MX_GPIO_Init+0x15c>)
 8002b6a:	f002 ff47 	bl	80059fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4619      	mov	r1, r3
 8002b84:	482a      	ldr	r0, [pc, #168]	; (8002c30 <MX_GPIO_Init+0x160>)
 8002b86:	f002 fd9d 	bl	80056c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 8002b8a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b90:	2301      	movs	r3, #1
 8002b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4821      	ldr	r0, [pc, #132]	; (8002c28 <MX_GPIO_Init+0x158>)
 8002ba4:	f002 fd8e 	bl	80056c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_RedLamp_Pin Pin_YelLamp_Pin Pin_BlueLamp_Pin */
  GPIO_InitStruct.Pin = Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin;
 8002ba8:	f44f 6383 	mov.w	r3, #1048	; 0x418
 8002bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bba:	f107 0314 	add.w	r3, r7, #20
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	481a      	ldr	r0, [pc, #104]	; (8002c2c <MX_GPIO_Init+0x15c>)
 8002bc2:	f002 fd7f 	bl	80056c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Proxi_Pin */
  GPIO_InitStruct.Pin = Pin_Proxi_Pin;
 8002bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002bcc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Proxi_GPIO_Port, &GPIO_InitStruct);
 8002bd6:	f107 0314 	add.w	r3, r7, #20
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4812      	ldr	r0, [pc, #72]	; (8002c28 <MX_GPIO_Init+0x158>)
 8002bde:	f002 fd71 	bl	80056c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Emer_Pin */
  GPIO_InitStruct.Pin = Pin_Emer_Pin;
 8002be2:	2320      	movs	r3, #32
 8002be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002be6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Emer_GPIO_Port, &GPIO_InitStruct);
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	480d      	ldr	r0, [pc, #52]	; (8002c2c <MX_GPIO_Init+0x15c>)
 8002bf8:	f002 fd64 	bl	80056c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2100      	movs	r1, #0
 8002c00:	2017      	movs	r0, #23
 8002c02:	f002 f918 	bl	8004e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c06:	2017      	movs	r0, #23
 8002c08:	f002 f931 	bl	8004e6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2100      	movs	r1, #0
 8002c10:	2028      	movs	r0, #40	; 0x28
 8002c12:	f002 f910 	bl	8004e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c16:	2028      	movs	r0, #40	; 0x28
 8002c18:	f002 f929 	bl	8004e6e <HAL_NVIC_EnableIRQ>

}
 8002c1c:	bf00      	nop
 8002c1e:	3728      	adds	r7, #40	; 0x28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	40020400 	.word	0x40020400
 8002c30:	40020800 	.word	0x40020800

08002c34 <Int32Abs>:

/* USER CODE BEGIN 4 */
uint32_t Int32Abs(int32_t number)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	if(number<0){
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	da02      	bge.n	8002c48 <Int32Abs+0x14>
		return number*-1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	425b      	negs	r3, r3
 8002c46:	e000      	b.n	8002c4a <Int32Abs+0x16>
	}else{
		return number;
 8002c48:	687b      	ldr	r3, [r7, #4]
	}
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <EncoderRead>:

void EncoderRead()
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 8002c5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	461a      	mov	r2, r3
 8002c64:	4b32      	ldr	r3, [pc, #200]	; (8002d30 <EncoderRead+0xd8>)
 8002c66:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 8002c68:	4b31      	ldr	r3, [pc, #196]	; (8002d30 <EncoderRead+0xd8>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b30      	ldr	r3, [pc, #192]	; (8002d30 <EncoderRead+0xd8>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	1ad2      	subs	r2, r2, r3
 8002c72:	4b30      	ldr	r3, [pc, #192]	; (8002d34 <EncoderRead+0xdc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	425b      	negs	r3, r3
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	da07      	bge.n	8002c8c <EncoderRead+0x34>
		WrappingStep+=12000;
 8002c7c:	4b2e      	ldr	r3, [pc, #184]	; (8002d38 <EncoderRead+0xe0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8002c84:	3320      	adds	r3, #32
 8002c86:	4a2c      	ldr	r2, [pc, #176]	; (8002d38 <EncoderRead+0xe0>)
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e00f      	b.n	8002cac <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 8002c8c:	4b28      	ldr	r3, [pc, #160]	; (8002d30 <EncoderRead+0xd8>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <EncoderRead+0xd8>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	1ad2      	subs	r2, r2, r3
 8002c96:	4b27      	ldr	r3, [pc, #156]	; (8002d34 <EncoderRead+0xdc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	db06      	blt.n	8002cac <EncoderRead+0x54>
		WrappingStep-=12000;
 8002c9e:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <EncoderRead+0xe0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 8002ca6:	3b20      	subs	r3, #32
 8002ca8:	4a23      	ldr	r2, [pc, #140]	; (8002d38 <EncoderRead+0xe0>)
 8002caa:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 8002cac:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <EncoderRead+0xd8>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <EncoderRead+0xe0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	4a21      	ldr	r2, [pc, #132]	; (8002d3c <EncoderRead+0xe4>)
 8002cb8:	6013      	str	r3, [r2, #0]
	PositionDeg[0] = (PositionRaw/12000.0)*360.0;
 8002cba:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <EncoderRead+0xe4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fbdc 	bl	800047c <__aeabi_i2d>
 8002cc4:	a318      	add	r3, pc, #96	; (adr r3, 8002d28 <EncoderRead+0xd0>)
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	f7fd fd6b 	bl	80007a4 <__aeabi_ddiv>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <EncoderRead+0xe8>)
 8002cdc:	f7fd fc38 	bl	8000550 <__aeabi_dmul>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f7fd fe64 	bl	80009b4 <__aeabi_d2f>
 8002cec:	4603      	mov	r3, r0
 8002cee:	4a15      	ldr	r2, [pc, #84]	; (8002d44 <EncoderRead+0xec>)
 8002cf0:	6013      	str	r3, [r2, #0]
	VelocityDeg = ((PositionDeg[0] - PositionDeg[1])/dt);
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <EncoderRead+0xec>)
 8002cf4:	ed93 7a00 	vldr	s14, [r3]
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <EncoderRead+0xec>)
 8002cfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d02:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002d48 <EncoderRead+0xf0>
 8002d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <EncoderRead+0xf4>)
 8002d0c:	edc3 7a00 	vstr	s15, [r3]
	EncoderRawData[1] = EncoderRawData[0];
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <EncoderRead+0xd8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a06      	ldr	r2, [pc, #24]	; (8002d30 <EncoderRead+0xd8>)
 8002d16:	6053      	str	r3, [r2, #4]
	PositionDeg[1] = PositionDeg[0];
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <EncoderRead+0xec>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a09      	ldr	r2, [pc, #36]	; (8002d44 <EncoderRead+0xec>)
 8002d1e:	6053      	str	r3, [r2, #4]
}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	f3af 8000 	nop.w
 8002d28:	00000000 	.word	0x00000000
 8002d2c:	40c77000 	.word	0x40c77000
 8002d30:	20000770 	.word	0x20000770
 8002d34:	200003b4 	.word	0x200003b4
 8002d38:	20000778 	.word	0x20000778
 8002d3c:	2000077c 	.word	0x2000077c
 8002d40:	40768000 	.word	0x40768000
 8002d44:	20000780 	.word	0x20000780
 8002d48:	3c23d70a 	.word	0x3c23d70a
 8002d4c:	20000788 	.word	0x20000788

08002d50 <Drivemotor>:

void Drivemotor(int32_t PWM){
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
		if(PWM<=0 && PWM>=-PWM_MAX){
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	dc11      	bgt.n	8002d82 <Drivemotor+0x32>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <Drivemotor+0xa8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	db0d      	blt.n	8002d82 <Drivemotor+0x32>
			htim1.Instance->CCR1=Int32Abs(PWM);
 8002d66:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <Drivemotor+0xac>)
 8002d68:	681c      	ldr	r4, [r3, #0]
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff ff62 	bl	8002c34 <Int32Abs>
 8002d70:	4603      	mov	r3, r0
 8002d72:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8002d74:	2200      	movs	r2, #0
 8002d76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d7a:	4821      	ldr	r0, [pc, #132]	; (8002e00 <Drivemotor+0xb0>)
 8002d7c:	f002 fe3e 	bl	80059fc <HAL_GPIO_WritePin>
 8002d80:	e036      	b.n	8002df0 <Drivemotor+0xa0>
		}else if (PWM<-PWM_MAX){
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a1c      	ldr	r2, [pc, #112]	; (8002df8 <Drivemotor+0xa8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	da0b      	bge.n	8002da2 <Drivemotor+0x52>
			htim1.Instance->CCR1=PWM_MAX;
 8002d8a:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <Drivemotor+0xac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d92:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8002d94:	2200      	movs	r2, #0
 8002d96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d9a:	4819      	ldr	r0, [pc, #100]	; (8002e00 <Drivemotor+0xb0>)
 8002d9c:	f002 fe2e 	bl	80059fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}else if(PWM>PWM_MAX){
			htim1.Instance->CCR1=PWM_MAX;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}
}
 8002da0:	e026      	b.n	8002df0 <Drivemotor+0xa0>
		}else if(PWM>=0 && PWM<=PWM_MAX){
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	db12      	blt.n	8002dce <Drivemotor+0x7e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f242 7210 	movw	r2, #10000	; 0x2710
 8002dae:	4293      	cmp	r3, r2
 8002db0:	dc0d      	bgt.n	8002dce <Drivemotor+0x7e>
			htim1.Instance->CCR1=Int32Abs(PWM);
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <Drivemotor+0xac>)
 8002db4:	681c      	ldr	r4, [r3, #0]
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ff3c 	bl	8002c34 <Int32Abs>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dc6:	480e      	ldr	r0, [pc, #56]	; (8002e00 <Drivemotor+0xb0>)
 8002dc8:	f002 fe18 	bl	80059fc <HAL_GPIO_WritePin>
 8002dcc:	e010      	b.n	8002df0 <Drivemotor+0xa0>
		}else if(PWM>PWM_MAX){
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f242 7210 	movw	r2, #10000	; 0x2710
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	dd0b      	ble.n	8002df0 <Drivemotor+0xa0>
			htim1.Instance->CCR1=PWM_MAX;
 8002dd8:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <Drivemotor+0xac>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f242 7210 	movw	r2, #10000	; 0x2710
 8002de0:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8002de2:	2201      	movs	r2, #1
 8002de4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002de8:	4805      	ldr	r0, [pc, #20]	; (8002e00 <Drivemotor+0xb0>)
 8002dea:	f002 fe07 	bl	80059fc <HAL_GPIO_WritePin>
}
 8002dee:	e7ff      	b.n	8002df0 <Drivemotor+0xa0>
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd90      	pop	{r4, r7, pc}
 8002df8:	ffffd8f0 	.word	0xffffd8f0
 8002dfc:	20000440 	.word	0x20000440
 8002e00:	40020000 	.word	0x40020000
 8002e04:	00000000 	.word	0x00000000

08002e08 <InverseTFofMotor>:

float InverseTFofMotor(float Velo, float PredictVelo)
{
 8002e08:	b5b0      	push	{r4, r5, r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e12:	edc7 0a00 	vstr	s1, [r7]
	static float VeloLast = 0;
	static float Voltage = 0;
	static float VoltageLast = 0;
	static float Pwm = 0;
	Voltage = (PredictVelo - (1.298649403776808*Velo) + (0.413830007244888*VeloLast) - (0.492093238713741*VoltageLast))/0.660367603263632;
 8002e16:	6838      	ldr	r0, [r7, #0]
 8002e18:	f7fd fb42 	bl	80004a0 <__aeabi_f2d>
 8002e1c:	4604      	mov	r4, r0
 8002e1e:	460d      	mov	r5, r1
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7fd fb3d 	bl	80004a0 <__aeabi_f2d>
 8002e26:	a345      	add	r3, pc, #276	; (adr r3, 8002f3c <InverseTFofMotor+0x134>)
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	f7fd fb90 	bl	8000550 <__aeabi_dmul>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4620      	mov	r0, r4
 8002e36:	4629      	mov	r1, r5
 8002e38:	f7fd f9d2 	bl	80001e0 <__aeabi_dsub>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4614      	mov	r4, r2
 8002e42:	461d      	mov	r5, r3
 8002e44:	4b38      	ldr	r3, [pc, #224]	; (8002f28 <InverseTFofMotor+0x120>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd fb29 	bl	80004a0 <__aeabi_f2d>
 8002e4e:	a32e      	add	r3, pc, #184	; (adr r3, 8002f08 <InverseTFofMotor+0x100>)
 8002e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e54:	f7fd fb7c 	bl	8000550 <__aeabi_dmul>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	4629      	mov	r1, r5
 8002e60:	f7fd f9c0 	bl	80001e4 <__adddf3>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4614      	mov	r4, r2
 8002e6a:	461d      	mov	r5, r3
 8002e6c:	4b2f      	ldr	r3, [pc, #188]	; (8002f2c <InverseTFofMotor+0x124>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd fb15 	bl	80004a0 <__aeabi_f2d>
 8002e76:	a326      	add	r3, pc, #152	; (adr r3, 8002f10 <InverseTFofMotor+0x108>)
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f7fd fb68 	bl	8000550 <__aeabi_dmul>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4620      	mov	r0, r4
 8002e86:	4629      	mov	r1, r5
 8002e88:	f7fd f9aa 	bl	80001e0 <__aeabi_dsub>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4610      	mov	r0, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	a320      	add	r3, pc, #128	; (adr r3, 8002f18 <InverseTFofMotor+0x110>)
 8002e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9a:	f7fd fc83 	bl	80007a4 <__aeabi_ddiv>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f7fd fd85 	bl	80009b4 <__aeabi_d2f>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4a20      	ldr	r2, [pc, #128]	; (8002f30 <InverseTFofMotor+0x128>)
 8002eae:	6013      	str	r3, [r2, #0]
	Pwm = (Voltage * 10000.0)/12.0;
 8002eb0:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <InverseTFofMotor+0x128>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd faf3 	bl	80004a0 <__aeabi_f2d>
 8002eba:	a319      	add	r3, pc, #100	; (adr r3, 8002f20 <InverseTFofMotor+0x118>)
 8002ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec0:	f7fd fb46 	bl	8000550 <__aeabi_dmul>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <InverseTFofMotor+0x12c>)
 8002ed2:	f7fd fc67 	bl	80007a4 <__aeabi_ddiv>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4610      	mov	r0, r2
 8002edc:	4619      	mov	r1, r3
 8002ede:	f7fd fd69 	bl	80009b4 <__aeabi_d2f>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <InverseTFofMotor+0x130>)
 8002ee6:	6013      	str	r3, [r2, #0]
	VoltageLast = Voltage;
 8002ee8:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <InverseTFofMotor+0x128>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0f      	ldr	r2, [pc, #60]	; (8002f2c <InverseTFofMotor+0x124>)
 8002eee:	6013      	str	r3, [r2, #0]
	VeloLast = Velo;
 8002ef0:	4a0d      	ldr	r2, [pc, #52]	; (8002f28 <InverseTFofMotor+0x120>)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6013      	str	r3, [r2, #0]
	return Pwm;
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <InverseTFofMotor+0x130>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	ee07 3a90 	vmov	s15, r3
}
 8002efe:	eeb0 0a67 	vmov.f32	s0, s15
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bdb0      	pop	{r4, r5, r7, pc}
 8002f08:	dace185d 	.word	0xdace185d
 8002f0c:	3fda7c30 	.word	0x3fda7c30
 8002f10:	a3b6ed62 	.word	0xa3b6ed62
 8002f14:	3fdf7e74 	.word	0x3fdf7e74
 8002f18:	3d6b5dd1 	.word	0x3d6b5dd1
 8002f1c:	3fe521bb 	.word	0x3fe521bb
 8002f20:	00000000 	.word	0x00000000
 8002f24:	40c38800 	.word	0x40c38800
 8002f28:	20000a8c 	.word	0x20000a8c
 8002f2c:	20000a90 	.word	0x20000a90
 8002f30:	20000a94 	.word	0x20000a94
 8002f34:	40280000 	.word	0x40280000
 8002f38:	20000a98 	.word	0x20000a98
 8002f3c:	98e30f85 	.word	0x98e30f85
 8002f40:	3ff4c744 	.word	0x3ff4c744

08002f44 <ControllLoopAndErrorHandler>:


void ControllLoopAndErrorHandler()
{
 8002f44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af04      	add	r7, sp, #16
//	}
//	PIDAVelocityController_Update(&PidVelo, setpoint, KalmanVar.MatState_Data[1]);
//	invTFOutput = InverseTFofMotor(setpointLast,setpoint);
//	PWMCHECKER = PidVelo.ControllerOut + invTFOutput;
//	Drivemotor(PWMCHECKER);
	if (Robot.flagStartTime == 1)
 8002f4c:	4b87      	ldr	r3, [pc, #540]	; (800316c <ControllLoopAndErrorHandler+0x228>)
 8002f4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d10a      	bne.n	8002f6c <ControllLoopAndErrorHandler+0x28>
	{
		StartTime = Micros();
 8002f56:	f001 fb1d 	bl	8004594 <Micros>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4984      	ldr	r1, [pc, #528]	; (8003170 <ControllLoopAndErrorHandler+0x22c>)
 8002f60:	e9c1 2300 	strd	r2, r3, [r1]
		Robot.flagStartTime = 0;
 8002f64:	4b81      	ldr	r3, [pc, #516]	; (800316c <ControllLoopAndErrorHandler+0x228>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	}
	CurrentTime = Micros();
 8002f6c:	f001 fb12 	bl	8004594 <Micros>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	497f      	ldr	r1, [pc, #508]	; (8003174 <ControllLoopAndErrorHandler+0x230>)
 8002f76:	e9c1 2300 	strd	r2, r3, [r1]
	PredictTime = CurrentTime + 10000;
 8002f7a:	4b7e      	ldr	r3, [pc, #504]	; (8003174 <ControllLoopAndErrorHandler+0x230>)
 8002f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f80:	f242 7110 	movw	r1, #10000	; 0x2710
 8002f84:	eb12 0801 	adds.w	r8, r2, r1
 8002f88:	f143 0900 	adc.w	r9, r3, #0
 8002f8c:	4b7a      	ldr	r3, [pc, #488]	; (8003178 <ControllLoopAndErrorHandler+0x234>)
 8002f8e:	e9c3 8900 	strd	r8, r9, [r3]
	TrajectoryEvaluation(&traject,StartTime,CurrentTime,PredictTime);
 8002f92:	4b77      	ldr	r3, [pc, #476]	; (8003170 <ControllLoopAndErrorHandler+0x22c>)
 8002f94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f98:	4b76      	ldr	r3, [pc, #472]	; (8003174 <ControllLoopAndErrorHandler+0x230>)
 8002f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9e:	4976      	ldr	r1, [pc, #472]	; (8003178 <ControllLoopAndErrorHandler+0x234>)
 8002fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002fa8:	e9cd 2300 	strd	r2, r3, [sp]
 8002fac:	4642      	mov	r2, r8
 8002fae:	464b      	mov	r3, r9
 8002fb0:	4872      	ldr	r0, [pc, #456]	; (800317c <ControllLoopAndErrorHandler+0x238>)
 8002fb2:	f7ff f87d 	bl	80020b0 <TrajectoryEvaluation>
	if(Robot.MotorIsOn == 1)
 8002fb6:	4b6d      	ldr	r3, [pc, #436]	; (800316c <ControllLoopAndErrorHandler+0x228>)
 8002fb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	f040 80c3 	bne.w	8003148 <ControllLoopAndErrorHandler+0x204>
	{
		if (Robot.flagStartTime == 1)
 8002fc2:	4b6a      	ldr	r3, [pc, #424]	; (800316c <ControllLoopAndErrorHandler+0x228>)
 8002fc4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d10a      	bne.n	8002fe2 <ControllLoopAndErrorHandler+0x9e>
		{
			StartTime = Micros();
 8002fcc:	f001 fae2 	bl	8004594 <Micros>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4966      	ldr	r1, [pc, #408]	; (8003170 <ControllLoopAndErrorHandler+0x22c>)
 8002fd6:	e9c1 2300 	strd	r2, r3, [r1]
			Robot.flagStartTime = 0;
 8002fda:	4b64      	ldr	r3, [pc, #400]	; (800316c <ControllLoopAndErrorHandler+0x228>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}
		CurrentTime = Micros();
 8002fe2:	f001 fad7 	bl	8004594 <Micros>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4962      	ldr	r1, [pc, #392]	; (8003174 <ControllLoopAndErrorHandler+0x230>)
 8002fec:	e9c1 2300 	strd	r2, r3, [r1]
		PredictTime = CurrentTime + 10000;
 8002ff0:	4b60      	ldr	r3, [pc, #384]	; (8003174 <ControllLoopAndErrorHandler+0x230>)
 8002ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff6:	f242 7110 	movw	r1, #10000	; 0x2710
 8002ffa:	1854      	adds	r4, r2, r1
 8002ffc:	f143 0500 	adc.w	r5, r3, #0
 8003000:	4b5d      	ldr	r3, [pc, #372]	; (8003178 <ControllLoopAndErrorHandler+0x234>)
 8003002:	e9c3 4500 	strd	r4, r5, [r3]
		TrajectoryEvaluation(&traject,StartTime,CurrentTime,PredictTime);
 8003006:	4b5a      	ldr	r3, [pc, #360]	; (8003170 <ControllLoopAndErrorHandler+0x22c>)
 8003008:	e9d3 4500 	ldrd	r4, r5, [r3]
 800300c:	4b59      	ldr	r3, [pc, #356]	; (8003174 <ControllLoopAndErrorHandler+0x230>)
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	4959      	ldr	r1, [pc, #356]	; (8003178 <ControllLoopAndErrorHandler+0x234>)
 8003014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800301c:	e9cd 2300 	strd	r2, r3, [sp]
 8003020:	4622      	mov	r2, r4
 8003022:	462b      	mov	r3, r5
 8003024:	4855      	ldr	r0, [pc, #340]	; (800317c <ControllLoopAndErrorHandler+0x238>)
 8003026:	f7ff f843 	bl	80020b0 <TrajectoryEvaluation>
		Robot.QX = traject.QX;
 800302a:	4b54      	ldr	r3, [pc, #336]	; (800317c <ControllLoopAndErrorHandler+0x238>)
 800302c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003030:	4a4e      	ldr	r2, [pc, #312]	; (800316c <ControllLoopAndErrorHandler+0x228>)
 8003032:	6193      	str	r3, [r2, #24]
		Robot.QV = traject.QV;
 8003034:	4b51      	ldr	r3, [pc, #324]	; (800317c <ControllLoopAndErrorHandler+0x238>)
 8003036:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800303a:	4a4c      	ldr	r2, [pc, #304]	; (800316c <ControllLoopAndErrorHandler+0x228>)
 800303c:	61d3      	str	r3, [r2, #28]
		if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0)
 800303e:	4b4b      	ldr	r3, [pc, #300]	; (800316c <ControllLoopAndErrorHandler+0x228>)
 8003040:	ed93 7a03 	vldr	s14, [r3, #12]
 8003044:	4b49      	ldr	r3, [pc, #292]	; (800316c <ControllLoopAndErrorHandler+0x228>)
 8003046:	edd3 7a00 	vldr	s15, [r3]
 800304a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800304e:	eeb0 0a67 	vmov.f32	s0, s15
 8003052:	f7fe fba7 	bl	80017a4 <AbsVal>
 8003056:	eef0 7a40 	vmov.f32	s15, s0
 800305a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800305e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003066:	d52a      	bpl.n	80030be <ControllLoopAndErrorHandler+0x17a>
 8003068:	4b40      	ldr	r3, [pc, #256]	; (800316c <ControllLoopAndErrorHandler+0x228>)
 800306a:	edd3 7a01 	vldr	s15, [r3, #4]
 800306e:	eeb0 0a67 	vmov.f32	s0, s15
 8003072:	f7fe fb97 	bl	80017a4 <AbsVal>
 8003076:	eef0 7a40 	vmov.f32	s15, s0
 800307a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800307e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003086:	d51a      	bpl.n	80030be <ControllLoopAndErrorHandler+0x17a>
		{
			PWMCHECKER = 0.0;
 8003088:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <ControllLoopAndErrorHandler+0x23c>)
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
			Drivemotor(PWMCHECKER);
 8003090:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <ControllLoopAndErrorHandler+0x23c>)
 8003092:	edd3 7a00 	vldr	s15, [r3]
 8003096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800309a:	ee17 0a90 	vmov	r0, s15
 800309e:	f7ff fe57 	bl	8002d50 <Drivemotor>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2108      	movs	r1, #8
 80030a6:	4837      	ldr	r0, [pc, #220]	; (8003184 <ControllLoopAndErrorHandler+0x240>)
 80030a8:	f002 fca8 	bl	80059fc <HAL_GPIO_WritePin>
			Robot.RunningFlag = 0;
 80030ac:	4b2f      	ldr	r3, [pc, #188]	; (800316c <ControllLoopAndErrorHandler+0x228>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			Robot.MotorIsOn = 0;
 80030b4:	4b2d      	ldr	r3, [pc, #180]	; (800316c <ControllLoopAndErrorHandler+0x228>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	else
	{
		PWMCHECKER = 0.0;
		Drivemotor(PWMCHECKER);
	}
}
 80030bc:	e051      	b.n	8003162 <ControllLoopAndErrorHandler+0x21e>
			PIDAPositonController_Update(&PidPos, Robot.QX , Robot.Position);
 80030be:	4b2b      	ldr	r3, [pc, #172]	; (800316c <ControllLoopAndErrorHandler+0x228>)
 80030c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80030c4:	4b29      	ldr	r3, [pc, #164]	; (800316c <ControllLoopAndErrorHandler+0x228>)
 80030c6:	ed93 7a00 	vldr	s14, [r3]
 80030ca:	eef0 0a47 	vmov.f32	s1, s14
 80030ce:	eeb0 0a67 	vmov.f32	s0, s15
 80030d2:	482d      	ldr	r0, [pc, #180]	; (8003188 <ControllLoopAndErrorHandler+0x244>)
 80030d4:	f7fe f97c 	bl	80013d0 <PIDAPositonController_Update>
			PIDAVelocityController_Update(&PidVelo, Robot.QV + PidPos.ControllerOut , Robot.Velocity);
 80030d8:	4b24      	ldr	r3, [pc, #144]	; (800316c <ControllLoopAndErrorHandler+0x228>)
 80030da:	ed93 7a07 	vldr	s14, [r3, #28]
 80030de:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <ControllLoopAndErrorHandler+0x244>)
 80030e0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80030e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e8:	4b20      	ldr	r3, [pc, #128]	; (800316c <ControllLoopAndErrorHandler+0x228>)
 80030ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80030ee:	eef0 0a47 	vmov.f32	s1, s14
 80030f2:	eeb0 0a67 	vmov.f32	s0, s15
 80030f6:	4825      	ldr	r0, [pc, #148]	; (800318c <ControllLoopAndErrorHandler+0x248>)
 80030f8:	f7fe fa2c 	bl	8001554 <PIDAVelocityController_Update>
			invTFOutput = InverseTFofMotor(traject.QV,traject.QVP);
 80030fc:	4b1f      	ldr	r3, [pc, #124]	; (800317c <ControllLoopAndErrorHandler+0x238>)
 80030fe:	edd3 7a7f 	vldr	s15, [r3, #508]	; 0x1fc
 8003102:	4b1e      	ldr	r3, [pc, #120]	; (800317c <ControllLoopAndErrorHandler+0x238>)
 8003104:	ed93 7a80 	vldr	s14, [r3, #512]	; 0x200
 8003108:	eef0 0a47 	vmov.f32	s1, s14
 800310c:	eeb0 0a67 	vmov.f32	s0, s15
 8003110:	f7ff fe7a 	bl	8002e08 <InverseTFofMotor>
 8003114:	eef0 7a40 	vmov.f32	s15, s0
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <ControllLoopAndErrorHandler+0x24c>)
 800311a:	edc3 7a00 	vstr	s15, [r3]
			PWMCHECKER = PidVelo.ControllerOut + invTFOutput;
 800311e:	4b1b      	ldr	r3, [pc, #108]	; (800318c <ControllLoopAndErrorHandler+0x248>)
 8003120:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003124:	4b1a      	ldr	r3, [pc, #104]	; (8003190 <ControllLoopAndErrorHandler+0x24c>)
 8003126:	edd3 7a00 	vldr	s15, [r3]
 800312a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312e:	4b14      	ldr	r3, [pc, #80]	; (8003180 <ControllLoopAndErrorHandler+0x23c>)
 8003130:	edc3 7a00 	vstr	s15, [r3]
			Drivemotor(PWMCHECKER);
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <ControllLoopAndErrorHandler+0x23c>)
 8003136:	edd3 7a00 	vldr	s15, [r3]
 800313a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800313e:	ee17 0a90 	vmov	r0, s15
 8003142:	f7ff fe05 	bl	8002d50 <Drivemotor>
}
 8003146:	e00c      	b.n	8003162 <ControllLoopAndErrorHandler+0x21e>
		PWMCHECKER = 0.0;
 8003148:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <ControllLoopAndErrorHandler+0x23c>)
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
		Drivemotor(PWMCHECKER);
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <ControllLoopAndErrorHandler+0x23c>)
 8003152:	edd3 7a00 	vldr	s15, [r3]
 8003156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800315a:	ee17 0a90 	vmov	r0, s15
 800315e:	f7ff fdf7 	bl	8002d50 <Drivemotor>
}
 8003162:	bf00      	nop
 8003164:	46bd      	mov	sp, r7
 8003166:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800316a:	bf00      	nop
 800316c:	20000664 	.word	0x20000664
 8003170:	20000a30 	.word	0x20000a30
 8003174:	20000a38 	.word	0x20000a38
 8003178:	20000a40 	.word	0x20000a40
 800317c:	200007fc 	.word	0x200007fc
 8003180:	200007f8 	.word	0x200007f8
 8003184:	40020400 	.word	0x40020400
 8003188:	200007c4 	.word	0x200007c4
 800318c:	20000790 	.word	0x20000790
 8003190:	2000078c 	.word	0x2000078c

08003194 <Ringbuf_Init>:

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 8003198:	2214      	movs	r2, #20
 800319a:	2100      	movs	r1, #0
 800319c:	480e      	ldr	r0, [pc, #56]	; (80031d8 <Ringbuf_Init+0x44>)
 800319e:	f007 ff19 	bl	800afd4 <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 80031a2:	2214      	movs	r2, #20
 80031a4:	2100      	movs	r1, #0
 80031a6:	480d      	ldr	r0, [pc, #52]	; (80031dc <Ringbuf_Init+0x48>)
 80031a8:	f007 ff14 	bl	800afd4 <memset>

	oldPos = 0;
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <Ringbuf_Init+0x4c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <Ringbuf_Init+0x50>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 80031b8:	2214      	movs	r2, #20
 80031ba:	4907      	ldr	r1, [pc, #28]	; (80031d8 <Ringbuf_Init+0x44>)
 80031bc:	480a      	ldr	r0, [pc, #40]	; (80031e8 <Ringbuf_Init+0x54>)
 80031be:	f006 faaf 	bl	8009720 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <Ringbuf_Init+0x58>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <Ringbuf_Init+0x58>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0208 	bic.w	r2, r2, #8
 80031d0:	601a      	str	r2, [r3, #0]
}
 80031d2:	bf00      	nop
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	2000069c 	.word	0x2000069c
 80031dc:	200006b0 	.word	0x200006b0
 80031e0:	200006ce 	.word	0x200006ce
 80031e4:	200006d0 	.word	0x200006d0
 80031e8:	20000560 	.word	0x20000560
 80031ec:	200005a4 	.word	0x200005a4

080031f0 <checkSum>:
	oldPos = 0;
	newPos = 0;
}

void checkSum (uint8_t *buffertoCheckSum, uint16_t Size)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
	uint8_t sum = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	73fb      	strb	r3, [r7, #15]
	modeByte = 0;
 8003200:	4b52      	ldr	r3, [pc, #328]	; (800334c <checkSum+0x15c>)
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
	switch(Size){
 8003206:	887b      	ldrh	r3, [r7, #2]
 8003208:	3b01      	subs	r3, #1
 800320a:	2b03      	cmp	r3, #3
 800320c:	d84f      	bhi.n	80032ae <checkSum+0xbe>
 800320e:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <checkSum+0x24>)
 8003210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003214:	08003305 	.word	0x08003305
 8003218:	08003225 	.word	0x08003225
 800321c:	08003305 	.word	0x08003305
 8003220:	0800324b 	.word	0x0800324b
	case 1:
	case 3:
		break;
	case 2:
		if(!(checkAck(buffertoCheckSum, Size))) modeByte = sum = buffertoCheckSum[oldPos];
 8003224:	887b      	ldrh	r3, [r7, #2]
 8003226:	4619      	mov	r1, r3
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f897 	bl	800335c <checkAck>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d169      	bne.n	8003308 <checkSum+0x118>
 8003234:	4b46      	ldr	r3, [pc, #280]	; (8003350 <checkSum+0x160>)
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	73fb      	strb	r3, [r7, #15]
 8003242:	4a42      	ldr	r2, [pc, #264]	; (800334c <checkSum+0x15c>)
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	7013      	strb	r3, [r2, #0]
		break;
 8003248:	e05e      	b.n	8003308 <checkSum+0x118>
	case 4:
		if(checkAck(buffertoCheckSum, Size)) modeByte = sum = buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 800324a:	887b      	ldrh	r3, [r7, #2]
 800324c:	4619      	mov	r1, r3
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f884 	bl	800335c <checkAck>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <checkSum+0x80>
 800325a:	4b3d      	ldr	r3, [pc, #244]	; (8003350 <checkSum+0x160>)
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	3302      	adds	r3, #2
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	4413      	add	r3, r2
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	73fb      	strb	r3, [r7, #15]
 8003268:	4a38      	ldr	r2, [pc, #224]	; (800334c <checkSum+0x15c>)
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	7013      	strb	r3, [r2, #0]
		else{
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
			modeByte = buffertoCheckSum[oldPos];
		}
		break;
 800326e:	e04c      	b.n	800330a <checkSum+0x11a>
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8003270:	4b37      	ldr	r3, [pc, #220]	; (8003350 <checkSum+0x160>)
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4413      	add	r3, r2
 800327a:	781a      	ldrb	r2, [r3, #0]
 800327c:	4b34      	ldr	r3, [pc, #208]	; (8003350 <checkSum+0x160>)
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	3301      	adds	r3, #1
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	440b      	add	r3, r1
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4413      	add	r3, r2
 800328a:	b2da      	uxtb	r2, r3
 800328c:	4b30      	ldr	r3, [pc, #192]	; (8003350 <checkSum+0x160>)
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	3302      	adds	r3, #2
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	440b      	add	r3, r1
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	4413      	add	r3, r2
 800329a:	73fb      	strb	r3, [r7, #15]
			modeByte = buffertoCheckSum[oldPos];
 800329c:	4b2c      	ldr	r3, [pc, #176]	; (8003350 <checkSum+0x160>)
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4413      	add	r3, r2
 80032a6:	781a      	ldrb	r2, [r3, #0]
 80032a8:	4b28      	ldr	r3, [pc, #160]	; (800334c <checkSum+0x15c>)
 80032aa:	701a      	strb	r2, [r3, #0]
		break;
 80032ac:	e02d      	b.n	800330a <checkSum+0x11a>
	default:
		modeByte = buffertoCheckSum[oldPos];
 80032ae:	4b28      	ldr	r3, [pc, #160]	; (8003350 <checkSum+0x160>)
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4413      	add	r3, r2
 80032b8:	781a      	ldrb	r2, [r3, #0]
 80032ba:	4b24      	ldr	r3, [pc, #144]	; (800334c <checkSum+0x15c>)
 80032bc:	701a      	strb	r2, [r3, #0]
		for (int index = 0; index < Size-1; ++index)
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	e019      	b.n	80032f8 <checkSum+0x108>
		{
			sum = sum + buffertoCheckSum[oldPos+index % MainBuf_SIZE];
 80032c4:	4b22      	ldr	r3, [pc, #136]	; (8003350 <checkSum+0x160>)
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	4b21      	ldr	r3, [pc, #132]	; (8003354 <checkSum+0x164>)
 80032ce:	fb83 2301 	smull	r2, r3, r3, r1
 80032d2:	10da      	asrs	r2, r3, #3
 80032d4:	17cb      	asrs	r3, r1, #31
 80032d6:	1ad2      	subs	r2, r2, r3
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	1aca      	subs	r2, r1, r3
 80032e2:	1883      	adds	r3, r0, r2
 80032e4:	461a      	mov	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	781a      	ldrb	r2, [r3, #0]
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	4413      	add	r3, r2
 80032f0:	73fb      	strb	r3, [r7, #15]
		for (int index = 0; index < Size-1; ++index)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	3301      	adds	r3, #1
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	887b      	ldrh	r3, [r7, #2]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	429a      	cmp	r2, r3
 8003300:	dbe0      	blt.n	80032c4 <checkSum+0xd4>
 8003302:	e002      	b.n	800330a <checkSum+0x11a>
		break;
 8003304:	bf00      	nop
 8003306:	e000      	b.n	800330a <checkSum+0x11a>
		break;
 8003308:	bf00      	nop
		}
	}

	if((uint8_t)buffertoCheckSum[oldPos+(Size-1) % MainBuf_SIZE] == (uint8_t)(~sum)) UARTstateManagement(MainBuf);
 800330a:	4b11      	ldr	r3, [pc, #68]	; (8003350 <checkSum+0x160>)
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	887b      	ldrh	r3, [r7, #2]
 8003312:	1e59      	subs	r1, r3, #1
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <checkSum+0x164>)
 8003316:	fb83 2301 	smull	r2, r3, r3, r1
 800331a:	10da      	asrs	r2, r3, #3
 800331c:	17cb      	asrs	r3, r1, #31
 800331e:	1ad2      	subs	r2, r2, r3
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	1aca      	subs	r2, r1, r3
 800332a:	1883      	adds	r3, r0, r2
 800332c:	461a      	mov	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	43db      	mvns	r3, r3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	429a      	cmp	r2, r3
 800333c:	d102      	bne.n	8003344 <checkSum+0x154>
 800333e:	4806      	ldr	r0, [pc, #24]	; (8003358 <checkSum+0x168>)
 8003340:	f000 f89a 	bl	8003478 <UARTstateManagement>
}
 8003344:	bf00      	nop
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	200006f9 	.word	0x200006f9
 8003350:	200006ce 	.word	0x200006ce
 8003354:	66666667 	.word	0x66666667
 8003358:	200006b0 	.word	0x200006b0

0800335c <checkAck>:

uint8_t checkAck (uint8_t *buffertoCheckAck, uint16_t Size)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
	if((buffertoCheckAck[oldPos] == 0b01011000) && (buffertoCheckAck[oldPos+1 % MainBuf_SIZE] == 0b01110101)) return 1;
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <checkAck+0x40>)
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4413      	add	r3, r2
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b58      	cmp	r3, #88	; 0x58
 8003376:	d109      	bne.n	800338c <checkAck+0x30>
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <checkAck+0x40>)
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b75      	cmp	r3, #117	; 0x75
 8003386:	d101      	bne.n	800338c <checkAck+0x30>
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <checkAck+0x32>
	else return 0;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	200006ce 	.word	0x200006ce

080033a0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	807b      	strh	r3, [r7, #2]
        if (huart->Instance == USART2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a28      	ldr	r2, [pc, #160]	; (8003454 <HAL_UARTEx_RxEventCallback+0xb4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d14a      	bne.n	800344c <HAL_UARTEx_RxEventCallback+0xac>
        {
                oldPos = newPos;
 80033b6:	4b28      	ldr	r3, [pc, #160]	; (8003458 <HAL_UARTEx_RxEventCallback+0xb8>)
 80033b8:	881a      	ldrh	r2, [r3, #0]
 80033ba:	4b28      	ldr	r3, [pc, #160]	; (800345c <HAL_UARTEx_RxEventCallback+0xbc>)
 80033bc:	801a      	strh	r2, [r3, #0]
                dataSize = Size;
 80033be:	4a28      	ldr	r2, [pc, #160]	; (8003460 <HAL_UARTEx_RxEventCallback+0xc0>)
 80033c0:	887b      	ldrh	r3, [r7, #2]
 80033c2:	8013      	strh	r3, [r2, #0]
                if (oldPos+dataSize > MainBuf_SIZE)
 80033c4:	4b25      	ldr	r3, [pc, #148]	; (800345c <HAL_UARTEx_RxEventCallback+0xbc>)
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	4b25      	ldr	r3, [pc, #148]	; (8003460 <HAL_UARTEx_RxEventCallback+0xc0>)
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	4413      	add	r3, r2
 80033d0:	2b14      	cmp	r3, #20
 80033d2:	dd16      	ble.n	8003402 <HAL_UARTEx_RxEventCallback+0x62>
                {
                        oldPos = 0;
 80033d4:	4b21      	ldr	r3, [pc, #132]	; (800345c <HAL_UARTEx_RxEventCallback+0xbc>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	801a      	strh	r2, [r3, #0]
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 80033da:	4b20      	ldr	r3, [pc, #128]	; (800345c <HAL_UARTEx_RxEventCallback+0xbc>)
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_UARTEx_RxEventCallback+0xc4>)
 80033e2:	4413      	add	r3, r2
 80033e4:	4a1e      	ldr	r2, [pc, #120]	; (8003460 <HAL_UARTEx_RxEventCallback+0xc0>)
 80033e6:	8812      	ldrh	r2, [r2, #0]
 80033e8:	491f      	ldr	r1, [pc, #124]	; (8003468 <HAL_UARTEx_RxEventCallback+0xc8>)
 80033ea:	4618      	mov	r0, r3
 80033ec:	f007 fde4 	bl	800afb8 <memcpy>
                        newPos = dataSize+oldPos;
 80033f0:	4b1b      	ldr	r3, [pc, #108]	; (8003460 <HAL_UARTEx_RxEventCallback+0xc0>)
 80033f2:	881a      	ldrh	r2, [r3, #0]
 80033f4:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_UARTEx_RxEventCallback+0xbc>)
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	4413      	add	r3, r2
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	4b16      	ldr	r3, [pc, #88]	; (8003458 <HAL_UARTEx_RxEventCallback+0xb8>)
 80033fe:	801a      	strh	r2, [r3, #0]
 8003400:	e012      	b.n	8003428 <HAL_UARTEx_RxEventCallback+0x88>
                }
                else
                {
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8003402:	4b16      	ldr	r3, [pc, #88]	; (800345c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	4b16      	ldr	r3, [pc, #88]	; (8003464 <HAL_UARTEx_RxEventCallback+0xc4>)
 800340a:	4413      	add	r3, r2
 800340c:	4a14      	ldr	r2, [pc, #80]	; (8003460 <HAL_UARTEx_RxEventCallback+0xc0>)
 800340e:	8812      	ldrh	r2, [r2, #0]
 8003410:	4915      	ldr	r1, [pc, #84]	; (8003468 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003412:	4618      	mov	r0, r3
 8003414:	f007 fdd0 	bl	800afb8 <memcpy>
                        newPos = dataSize+oldPos;
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <HAL_UARTEx_RxEventCallback+0xc0>)
 800341a:	881a      	ldrh	r2, [r3, #0]
 800341c:	4b0f      	ldr	r3, [pc, #60]	; (800345c <HAL_UARTEx_RxEventCallback+0xbc>)
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	4413      	add	r3, r2
 8003422:	b29a      	uxth	r2, r3
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <HAL_UARTEx_RxEventCallback+0xb8>)
 8003426:	801a      	strh	r2, [r3, #0]
                }

                checkSum(MainBuf, Size);
 8003428:	887b      	ldrh	r3, [r7, #2]
 800342a:	4619      	mov	r1, r3
 800342c:	480d      	ldr	r0, [pc, #52]	; (8003464 <HAL_UARTEx_RxEventCallback+0xc4>)
 800342e:	f7ff fedf 	bl	80031f0 <checkSum>
                HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 8003432:	2214      	movs	r2, #20
 8003434:	490c      	ldr	r1, [pc, #48]	; (8003468 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003436:	480d      	ldr	r0, [pc, #52]	; (800346c <HAL_UARTEx_RxEventCallback+0xcc>)
 8003438:	f006 f972 	bl	8009720 <HAL_UARTEx_ReceiveToIdle_DMA>
                __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <HAL_UARTEx_RxEventCallback+0xd0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0208 	bic.w	r2, r2, #8
 800344a:	601a      	str	r2, [r3, #0]
        }
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40004400 	.word	0x40004400
 8003458:	200006d0 	.word	0x200006d0
 800345c:	200006ce 	.word	0x200006ce
 8003460:	200006d2 	.word	0x200006d2
 8003464:	200006b0 	.word	0x200006b0
 8003468:	2000069c 	.word	0x2000069c
 800346c:	20000560 	.word	0x20000560
 8003470:	200005a4 	.word	0x200005a4
 8003474:	00000000 	.word	0x00000000

08003478 <UARTstateManagement>:

void UARTstateManagement(uint8_t *Mainbuffer)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	switch (UARTState)
 8003480:	4bad      	ldr	r3, [pc, #692]	; (8003738 <UARTstateManagement+0x2c0>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d01d      	beq.n	80034c4 <UARTstateManagement+0x4c>
 8003488:	2b02      	cmp	r3, #2
 800348a:	f300 835a 	bgt.w	8003b42 <UARTstateManagement+0x6ca>
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8354 	beq.w	8003b3c <UARTstateManagement+0x6c4>
 8003494:	2b01      	cmp	r3, #1
 8003496:	d000      	beq.n	800349a <UARTstateManagement+0x22>
					homingFlag = 1;
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
					break;
				}
	}
}
 8003498:	e353      	b.n	8003b42 <UARTstateManagement+0x6ca>
			if(Mainbuffer[oldPos] == 0b10010010)
 800349a:	4ba8      	ldr	r3, [pc, #672]	; (800373c <UARTstateManagement+0x2c4>)
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b92      	cmp	r3, #146	; 0x92
 80034a8:	f040 834a 	bne.w	8003b40 <UARTstateManagement+0x6c8>
				modeNo = 2;
 80034ac:	4ba4      	ldr	r3, [pc, #656]	; (8003740 <UARTstateManagement+0x2c8>)
 80034ae:	2202      	movs	r2, #2
 80034b0:	701a      	strb	r2, [r3, #0]
				UARTState = MCUConnect;
 80034b2:	4ba1      	ldr	r3, [pc, #644]	; (8003738 <UARTstateManagement+0x2c0>)
 80034b4:	2202      	movs	r2, #2
 80034b6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80034b8:	2202      	movs	r2, #2
 80034ba:	49a2      	ldr	r1, [pc, #648]	; (8003744 <UARTstateManagement+0x2cc>)
 80034bc:	48a2      	ldr	r0, [pc, #648]	; (8003748 <UARTstateManagement+0x2d0>)
 80034be:	f006 f8b1 	bl	8009624 <HAL_UART_Transmit_DMA>
			break;
 80034c2:	e33d      	b.n	8003b40 <UARTstateManagement+0x6c8>
			stateSwitch = modeByte;
 80034c4:	4ba1      	ldr	r3, [pc, #644]	; (800374c <UARTstateManagement+0x2d4>)
 80034c6:	781a      	ldrb	r2, [r3, #0]
 80034c8:	4ba1      	ldr	r3, [pc, #644]	; (8003750 <UARTstateManagement+0x2d8>)
 80034ca:	701a      	strb	r2, [r3, #0]
			switch (stateSwitch)
 80034cc:	4ba0      	ldr	r3, [pc, #640]	; (8003750 <UARTstateManagement+0x2d8>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	3b91      	subs	r3, #145	; 0x91
 80034d2:	2b0d      	cmp	r3, #13
 80034d4:	f200 8335 	bhi.w	8003b42 <UARTstateManagement+0x6ca>
 80034d8:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <UARTstateManagement+0x68>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	08003519 	.word	0x08003519
 80034e4:	0800352b 	.word	0x0800352b
 80034e8:	08003543 	.word	0x08003543
 80034ec:	0800355b 	.word	0x0800355b
 80034f0:	080035bb 	.word	0x080035bb
 80034f4:	08003629 	.word	0x08003629
 80034f8:	08003661 	.word	0x08003661
 80034fc:	08003775 	.word	0x08003775
 8003500:	080037b9 	.word	0x080037b9
 8003504:	0800385f 	.word	0x0800385f
 8003508:	080039d5 	.word	0x080039d5
 800350c:	08003acb 	.word	0x08003acb
 8003510:	08003afb 	.word	0x08003afb
 8003514:	08003b13 	.word	0x08003b13
					modeNo = 1;
 8003518:	4b89      	ldr	r3, [pc, #548]	; (8003740 <UARTstateManagement+0x2c8>)
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800351e:	2202      	movs	r2, #2
 8003520:	4988      	ldr	r1, [pc, #544]	; (8003744 <UARTstateManagement+0x2cc>)
 8003522:	4889      	ldr	r0, [pc, #548]	; (8003748 <UARTstateManagement+0x2d0>)
 8003524:	f006 f87e 	bl	8009624 <HAL_UART_Transmit_DMA>
					break;
 8003528:	e30b      	b.n	8003b42 <UARTstateManagement+0x6ca>
					modeNo = 2;
 800352a:	4b85      	ldr	r3, [pc, #532]	; (8003740 <UARTstateManagement+0x2c8>)
 800352c:	2202      	movs	r2, #2
 800352e:	701a      	strb	r2, [r3, #0]
					UARTState = MCUConnect;
 8003530:	4b81      	ldr	r3, [pc, #516]	; (8003738 <UARTstateManagement+0x2c0>)
 8003532:	2202      	movs	r2, #2
 8003534:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003536:	2202      	movs	r2, #2
 8003538:	4982      	ldr	r1, [pc, #520]	; (8003744 <UARTstateManagement+0x2cc>)
 800353a:	4883      	ldr	r0, [pc, #524]	; (8003748 <UARTstateManagement+0x2d0>)
 800353c:	f006 f872 	bl	8009624 <HAL_UART_Transmit_DMA>
					break;
 8003540:	e2ff      	b.n	8003b42 <UARTstateManagement+0x6ca>
					modeNo = 3;
 8003542:	4b7f      	ldr	r3, [pc, #508]	; (8003740 <UARTstateManagement+0x2c8>)
 8003544:	2203      	movs	r2, #3
 8003546:	701a      	strb	r2, [r3, #0]
					UARTState = MCUDisconnect;
 8003548:	4b7b      	ldr	r3, [pc, #492]	; (8003738 <UARTstateManagement+0x2c0>)
 800354a:	2201      	movs	r2, #1
 800354c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800354e:	2202      	movs	r2, #2
 8003550:	497c      	ldr	r1, [pc, #496]	; (8003744 <UARTstateManagement+0x2cc>)
 8003552:	487d      	ldr	r0, [pc, #500]	; (8003748 <UARTstateManagement+0x2d0>)
 8003554:	f006 f866 	bl	8009624 <HAL_UART_Transmit_DMA>
					break;
 8003558:	e2f3      	b.n	8003b42 <UARTstateManagement+0x6ca>
					modeNo = 4;
 800355a:	4b79      	ldr	r3, [pc, #484]	; (8003740 <UARTstateManagement+0x2c8>)
 800355c:	2204      	movs	r2, #4
 800355e:	701a      	strb	r2, [r3, #0]
					uartVelo = (float)((Mainbuffer[oldPos + 2 % MainBuf_SIZE])/255.0)*10.0;
 8003560:	4b76      	ldr	r3, [pc, #472]	; (800373c <UARTstateManagement+0x2c4>)
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	3302      	adds	r3, #2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7fc ff85 	bl	800047c <__aeabi_i2d>
 8003572:	a36d      	add	r3, pc, #436	; (adr r3, 8003728 <UARTstateManagement+0x2b0>)
 8003574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003578:	f7fd f914 	bl	80007a4 <__aeabi_ddiv>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	f7fd fa16 	bl	80009b4 <__aeabi_d2f>
 8003588:	ee07 0a10 	vmov	s14, r0
 800358c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8003590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003594:	4b6f      	ldr	r3, [pc, #444]	; (8003754 <UARTstateManagement+0x2dc>)
 8003596:	edc3 7a00 	vstr	s15, [r3]
					Robot.QVMax = uartVelo*6.0;
 800359a:	4b6e      	ldr	r3, [pc, #440]	; (8003754 <UARTstateManagement+0x2dc>)
 800359c:	edd3 7a00 	vldr	s15, [r3]
 80035a0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80035a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035a8:	4b6b      	ldr	r3, [pc, #428]	; (8003758 <UARTstateManagement+0x2e0>)
 80035aa:	edc3 7a08 	vstr	s15, [r3, #32]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80035ae:	2202      	movs	r2, #2
 80035b0:	4964      	ldr	r1, [pc, #400]	; (8003744 <UARTstateManagement+0x2cc>)
 80035b2:	4865      	ldr	r0, [pc, #404]	; (8003748 <UARTstateManagement+0x2d0>)
 80035b4:	f006 f836 	bl	8009624 <HAL_UART_Transmit_DMA>
					break;
 80035b8:	e2c3      	b.n	8003b42 <UARTstateManagement+0x6ca>
					modeNo = 5;
 80035ba:	4b61      	ldr	r3, [pc, #388]	; (8003740 <UARTstateManagement+0x2c8>)
 80035bc:	2205      	movs	r2, #5
 80035be:	701a      	strb	r2, [r3, #0]
					goalFlag = 1;
 80035c0:	4b66      	ldr	r3, [pc, #408]	; (800375c <UARTstateManagement+0x2e4>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	701a      	strb	r2, [r3, #0]
					goalAmount = 1;
 80035c6:	4b66      	ldr	r3, [pc, #408]	; (8003760 <UARTstateManagement+0x2e8>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	701a      	strb	r2, [r3, #0]
					uartPos = (float)((((Mainbuffer[oldPos + 1 % MainBuf_SIZE] << 8) | Mainbuffer[oldPos + 2 % MainBuf_SIZE])*360.0)/62800);
 80035cc:	4b5b      	ldr	r3, [pc, #364]	; (800373c <UARTstateManagement+0x2c4>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	3301      	adds	r3, #1
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	4413      	add	r3, r2
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	021b      	lsls	r3, r3, #8
 80035da:	4a58      	ldr	r2, [pc, #352]	; (800373c <UARTstateManagement+0x2c4>)
 80035dc:	8812      	ldrh	r2, [r2, #0]
 80035de:	3202      	adds	r2, #2
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	440a      	add	r2, r1
 80035e4:	7812      	ldrb	r2, [r2, #0]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fc ff47 	bl	800047c <__aeabi_i2d>
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	4b5c      	ldr	r3, [pc, #368]	; (8003764 <UARTstateManagement+0x2ec>)
 80035f4:	f7fc ffac 	bl	8000550 <__aeabi_dmul>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	a34b      	add	r3, pc, #300	; (adr r3, 8003730 <UARTstateManagement+0x2b8>)
 8003602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003606:	f7fd f8cd 	bl	80007a4 <__aeabi_ddiv>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4610      	mov	r0, r2
 8003610:	4619      	mov	r1, r3
 8003612:	f7fd f9cf 	bl	80009b4 <__aeabi_d2f>
 8003616:	4603      	mov	r3, r0
 8003618:	4a53      	ldr	r2, [pc, #332]	; (8003768 <UARTstateManagement+0x2f0>)
 800361a:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800361c:	2202      	movs	r2, #2
 800361e:	4949      	ldr	r1, [pc, #292]	; (8003744 <UARTstateManagement+0x2cc>)
 8003620:	4849      	ldr	r0, [pc, #292]	; (8003748 <UARTstateManagement+0x2d0>)
 8003622:	f005 ffff 	bl	8009624 <HAL_UART_Transmit_DMA>
					break;
 8003626:	e28c      	b.n	8003b42 <UARTstateManagement+0x6ca>
					modeNo = 6;
 8003628:	4b45      	ldr	r3, [pc, #276]	; (8003740 <UARTstateManagement+0x2c8>)
 800362a:	2206      	movs	r2, #6
 800362c:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 800362e:	4b4b      	ldr	r3, [pc, #300]	; (800375c <UARTstateManagement+0x2e4>)
 8003630:	2202      	movs	r2, #2
 8003632:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8003634:	220f      	movs	r2, #15
 8003636:	2100      	movs	r1, #0
 8003638:	484c      	ldr	r0, [pc, #304]	; (800376c <UARTstateManagement+0x2f4>)
 800363a:	f007 fccb 	bl	800afd4 <memset>
					goalAmount = 1;
 800363e:	4b48      	ldr	r3, [pc, #288]	; (8003760 <UARTstateManagement+0x2e8>)
 8003640:	2201      	movs	r2, #1
 8003642:	701a      	strb	r2, [r3, #0]
					uartGoal[0] = Mainbuffer[oldPos + 2 % MainBuf_SIZE];
 8003644:	4b3d      	ldr	r3, [pc, #244]	; (800373c <UARTstateManagement+0x2c4>)
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	3302      	adds	r3, #2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	4413      	add	r3, r2
 800364e:	781a      	ldrb	r2, [r3, #0]
 8003650:	4b46      	ldr	r3, [pc, #280]	; (800376c <UARTstateManagement+0x2f4>)
 8003652:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003654:	2202      	movs	r2, #2
 8003656:	493b      	ldr	r1, [pc, #236]	; (8003744 <UARTstateManagement+0x2cc>)
 8003658:	483b      	ldr	r0, [pc, #236]	; (8003748 <UARTstateManagement+0x2d0>)
 800365a:	f005 ffe3 	bl	8009624 <HAL_UART_Transmit_DMA>
					break;
 800365e:	e270      	b.n	8003b42 <UARTstateManagement+0x6ca>
					modeNo = 7;
 8003660:	4b37      	ldr	r3, [pc, #220]	; (8003740 <UARTstateManagement+0x2c8>)
 8003662:	2207      	movs	r2, #7
 8003664:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8003666:	4b3d      	ldr	r3, [pc, #244]	; (800375c <UARTstateManagement+0x2e4>)
 8003668:	2202      	movs	r2, #2
 800366a:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 800366c:	220f      	movs	r2, #15
 800366e:	2100      	movs	r1, #0
 8003670:	483e      	ldr	r0, [pc, #248]	; (800376c <UARTstateManagement+0x2f4>)
 8003672:	f007 fcaf 	bl	800afd4 <memset>
					goalAmount = Mainbuffer[oldPos + 1 % MainBuf_SIZE];
 8003676:	4b31      	ldr	r3, [pc, #196]	; (800373c <UARTstateManagement+0x2c4>)
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	3301      	adds	r3, #1
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4413      	add	r3, r2
 8003680:	781a      	ldrb	r2, [r3, #0]
 8003682:	4b37      	ldr	r3, [pc, #220]	; (8003760 <UARTstateManagement+0x2e8>)
 8003684:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	e03a      	b.n	8003702 <UARTstateManagement+0x28a>
						uartGoal[0+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] & 15; // low 8 bit (last 4 bit)
 800368c:	4b2b      	ldr	r3, [pc, #172]	; (800373c <UARTstateManagement+0x2c4>)
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1c99      	adds	r1, r3, #2
 8003696:	4b36      	ldr	r3, [pc, #216]	; (8003770 <UARTstateManagement+0x2f8>)
 8003698:	fb83 2301 	smull	r2, r3, r3, r1
 800369c:	10da      	asrs	r2, r3, #3
 800369e:	17cb      	asrs	r3, r1, #31
 80036a0:	1ad2      	subs	r2, r2, r3
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	1aca      	subs	r2, r1, r3
 80036ac:	1883      	adds	r3, r0, r2
 80036ae:	461a      	mov	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4413      	add	r3, r2
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	f002 020f 	and.w	r2, r2, #15
 80036be:	b2d1      	uxtb	r1, r2
 80036c0:	4a2a      	ldr	r2, [pc, #168]	; (800376c <UARTstateManagement+0x2f4>)
 80036c2:	54d1      	strb	r1, [r2, r3]
						uartGoal[1+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] >> 4; // high 8 bit (first 4 bit)
 80036c4:	4b1d      	ldr	r3, [pc, #116]	; (800373c <UARTstateManagement+0x2c4>)
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1c99      	adds	r1, r3, #2
 80036ce:	4b28      	ldr	r3, [pc, #160]	; (8003770 <UARTstateManagement+0x2f8>)
 80036d0:	fb83 2301 	smull	r2, r3, r3, r1
 80036d4:	10da      	asrs	r2, r3, #3
 80036d6:	17cb      	asrs	r3, r1, #31
 80036d8:	1ad2      	subs	r2, r2, r3
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	1aca      	subs	r2, r1, r3
 80036e4:	1883      	adds	r3, r0, r2
 80036e6:	461a      	mov	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4413      	add	r3, r2
 80036ec:	781a      	ldrb	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	3301      	adds	r3, #1
 80036f4:	0912      	lsrs	r2, r2, #4
 80036f6:	b2d1      	uxtb	r1, r2
 80036f8:	4a1c      	ldr	r2, [pc, #112]	; (800376c <UARTstateManagement+0x2f4>)
 80036fa:	54d1      	strb	r1, [r2, r3]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	3301      	adds	r3, #1
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	4b17      	ldr	r3, [pc, #92]	; (8003760 <UARTstateManagement+0x2e8>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	3301      	adds	r3, #1
 8003708:	0fda      	lsrs	r2, r3, #31
 800370a:	4413      	add	r3, r2
 800370c:	105b      	asrs	r3, r3, #1
 800370e:	461a      	mov	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4293      	cmp	r3, r2
 8003714:	dbba      	blt.n	800368c <UARTstateManagement+0x214>
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003716:	2202      	movs	r2, #2
 8003718:	490a      	ldr	r1, [pc, #40]	; (8003744 <UARTstateManagement+0x2cc>)
 800371a:	480b      	ldr	r0, [pc, #44]	; (8003748 <UARTstateManagement+0x2d0>)
 800371c:	f005 ff82 	bl	8009624 <HAL_UART_Transmit_DMA>
					break;
 8003720:	e20f      	b.n	8003b42 <UARTstateManagement+0x6ca>
 8003722:	bf00      	nop
 8003724:	f3af 8000 	nop.w
 8003728:	00000000 	.word	0x00000000
 800372c:	406fe000 	.word	0x406fe000
 8003730:	00000000 	.word	0x00000000
 8003734:	40eeaa00 	.word	0x40eeaa00
 8003738:	20000698 	.word	0x20000698
 800373c:	200006ce 	.word	0x200006ce
 8003740:	200006f8 	.word	0x200006f8
 8003744:	2000002c 	.word	0x2000002c
 8003748:	20000560 	.word	0x20000560
 800374c:	200006f9 	.word	0x200006f9
 8003750:	200006cc 	.word	0x200006cc
 8003754:	200006d8 	.word	0x200006d8
 8003758:	20000664 	.word	0x20000664
 800375c:	200006f1 	.word	0x200006f1
 8003760:	200006ef 	.word	0x200006ef
 8003764:	40768000 	.word	0x40768000
 8003768:	200006dc 	.word	0x200006dc
 800376c:	200006e0 	.word	0x200006e0
 8003770:	66666667 	.word	0x66666667
					modeNo = 8;
 8003774:	4b8a      	ldr	r3, [pc, #552]	; (80039a0 <UARTstateManagement+0x528>)
 8003776:	2208      	movs	r2, #8
 8003778:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 0){
 800377a:	4b8a      	ldr	r3, [pc, #552]	; (80039a4 <UARTstateManagement+0x52c>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d114      	bne.n	80037ac <UARTstateManagement+0x334>
					goingToGoalFlag = 0;
 8003782:	4b89      	ldr	r3, [pc, #548]	; (80039a8 <UARTstateManagement+0x530>)
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
					Robot.MotorIsOn = 1;
 8003788:	4b88      	ldr	r3, [pc, #544]	; (80039ac <UARTstateManagement+0x534>)
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					Robot.flagStartTime = 1;
 8003790:	4b86      	ldr	r3, [pc, #536]	; (80039ac <UARTstateManagement+0x534>)
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					Robot.RunningFlag = 1;
 8003798:	4b84      	ldr	r3, [pc, #528]	; (80039ac <UARTstateManagement+0x534>)
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					doingTaskFlag = 1;
 80037a0:	4b80      	ldr	r3, [pc, #512]	; (80039a4 <UARTstateManagement+0x52c>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	701a      	strb	r2, [r3, #0]
					goalIDX = 0;
 80037a6:	4b82      	ldr	r3, [pc, #520]	; (80039b0 <UARTstateManagement+0x538>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80037ac:	2202      	movs	r2, #2
 80037ae:	4981      	ldr	r1, [pc, #516]	; (80039b4 <UARTstateManagement+0x53c>)
 80037b0:	4881      	ldr	r0, [pc, #516]	; (80039b8 <UARTstateManagement+0x540>)
 80037b2:	f005 ff37 	bl	8009624 <HAL_UART_Transmit_DMA>
					break;
 80037b6:	e1c4      	b.n	8003b42 <UARTstateManagement+0x6ca>
					modeNo = 9;
 80037b8:	4b79      	ldr	r3, [pc, #484]	; (80039a0 <UARTstateManagement+0x528>)
 80037ba:	2209      	movs	r2, #9
 80037bc:	701a      	strb	r2, [r3, #0]
					Robot.CurrentStation = 0;
 80037be:	4b7b      	ldr	r3, [pc, #492]	; (80039ac <UARTstateManagement+0x534>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	811a      	strh	r2, [r3, #8]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 80037c4:	4b77      	ldr	r3, [pc, #476]	; (80039a4 <UARTstateManagement+0x52c>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d004      	beq.n	80037d6 <UARTstateManagement+0x35e>
 80037cc:	4b77      	ldr	r3, [pc, #476]	; (80039ac <UARTstateManagement+0x534>)
 80037ce:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d11f      	bne.n	8003816 <UARTstateManagement+0x39e>
 80037d6:	4b77      	ldr	r3, [pc, #476]	; (80039b4 <UARTstateManagement+0x53c>)
 80037d8:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 80037da:	4b78      	ldr	r3, [pc, #480]	; (80039bc <UARTstateManagement+0x544>)
 80037dc:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 153; // start-mode
 80037de:	4b77      	ldr	r3, [pc, #476]	; (80039bc <UARTstateManagement+0x544>)
 80037e0:	2299      	movs	r2, #153	; 0x99
 80037e2:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = Robot.CurrentStation; // set current goal
 80037e4:	4b71      	ldr	r3, [pc, #452]	; (80039ac <UARTstateManagement+0x534>)
 80037e6:	891b      	ldrh	r3, [r3, #8]
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	4b74      	ldr	r3, [pc, #464]	; (80039bc <UARTstateManagement+0x544>)
 80037ec:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 80037ee:	4b73      	ldr	r3, [pc, #460]	; (80039bc <UARTstateManagement+0x544>)
 80037f0:	789a      	ldrb	r2, [r3, #2]
 80037f2:	4b72      	ldr	r3, [pc, #456]	; (80039bc <UARTstateManagement+0x544>)
 80037f4:	78db      	ldrb	r3, [r3, #3]
 80037f6:	4413      	add	r3, r2
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	4b70      	ldr	r3, [pc, #448]	; (80039bc <UARTstateManagement+0x544>)
 80037fc:	791b      	ldrb	r3, [r3, #4]
 80037fe:	4413      	add	r3, r2
 8003800:	b2db      	uxtb	r3, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	b2da      	uxtb	r2, r3
 8003806:	4b6d      	ldr	r3, [pc, #436]	; (80039bc <UARTstateManagement+0x544>)
 8003808:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 800380a:	2206      	movs	r2, #6
 800380c:	496b      	ldr	r1, [pc, #428]	; (80039bc <UARTstateManagement+0x544>)
 800380e:	486a      	ldr	r0, [pc, #424]	; (80039b8 <UARTstateManagement+0x540>)
 8003810:	f005 ff08 	bl	8009624 <HAL_UART_Transmit_DMA>
					break;
 8003814:	e195      	b.n	8003b42 <UARTstateManagement+0x6ca>
 8003816:	4b6a      	ldr	r3, [pc, #424]	; (80039c0 <UARTstateManagement+0x548>)
 8003818:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 800381a:	4b68      	ldr	r3, [pc, #416]	; (80039bc <UARTstateManagement+0x544>)
 800381c:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 800381e:	4a69      	ldr	r2, [pc, #420]	; (80039c4 <UARTstateManagement+0x54c>)
 8003820:	4b64      	ldr	r3, [pc, #400]	; (80039b4 <UARTstateManagement+0x53c>)
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 153; // start-mode
 8003826:	4b65      	ldr	r3, [pc, #404]	; (80039bc <UARTstateManagement+0x544>)
 8003828:	2299      	movs	r2, #153	; 0x99
 800382a:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = Robot.CurrentStation; // set currentStation
 800382c:	4b5f      	ldr	r3, [pc, #380]	; (80039ac <UARTstateManagement+0x534>)
 800382e:	891b      	ldrh	r3, [r3, #8]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4b62      	ldr	r3, [pc, #392]	; (80039bc <UARTstateManagement+0x544>)
 8003834:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8003836:	4b61      	ldr	r3, [pc, #388]	; (80039bc <UARTstateManagement+0x544>)
 8003838:	791a      	ldrb	r2, [r3, #4]
 800383a:	4b60      	ldr	r3, [pc, #384]	; (80039bc <UARTstateManagement+0x544>)
 800383c:	795b      	ldrb	r3, [r3, #5]
 800383e:	4413      	add	r3, r2
 8003840:	b2da      	uxtb	r2, r3
 8003842:	4b5e      	ldr	r3, [pc, #376]	; (80039bc <UARTstateManagement+0x544>)
 8003844:	799b      	ldrb	r3, [r3, #6]
 8003846:	4413      	add	r3, r2
 8003848:	b2db      	uxtb	r3, r3
 800384a:	43db      	mvns	r3, r3
 800384c:	b2da      	uxtb	r2, r3
 800384e:	4b5b      	ldr	r3, [pc, #364]	; (80039bc <UARTstateManagement+0x544>)
 8003850:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 8003852:	2208      	movs	r2, #8
 8003854:	4959      	ldr	r1, [pc, #356]	; (80039bc <UARTstateManagement+0x544>)
 8003856:	4858      	ldr	r0, [pc, #352]	; (80039b8 <UARTstateManagement+0x540>)
 8003858:	f005 fee4 	bl	8009624 <HAL_UART_Transmit_DMA>
					break;
 800385c:	e171      	b.n	8003b42 <UARTstateManagement+0x6ca>
					modeNo = 10;
 800385e:	4b50      	ldr	r3, [pc, #320]	; (80039a0 <UARTstateManagement+0x528>)
 8003860:	220a      	movs	r2, #10
 8003862:	701a      	strb	r2, [r3, #0]
					posData = (uint16_t)(((((Robot.Position)*10000.0)*M_PI)/180.0));
 8003864:	4b51      	ldr	r3, [pc, #324]	; (80039ac <UARTstateManagement+0x534>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f7fc fe19 	bl	80004a0 <__aeabi_f2d>
 800386e:	a348      	add	r3, pc, #288	; (adr r3, 8003990 <UARTstateManagement+0x518>)
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f7fc fe6c 	bl	8000550 <__aeabi_dmul>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4610      	mov	r0, r2
 800387e:	4619      	mov	r1, r3
 8003880:	a345      	add	r3, pc, #276	; (adr r3, 8003998 <UARTstateManagement+0x520>)
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	f7fc fe63 	bl	8000550 <__aeabi_dmul>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4610      	mov	r0, r2
 8003890:	4619      	mov	r1, r3
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	4b4c      	ldr	r3, [pc, #304]	; (80039c8 <UARTstateManagement+0x550>)
 8003898:	f7fc ff84 	bl	80007a4 <__aeabi_ddiv>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4610      	mov	r0, r2
 80038a2:	4619      	mov	r1, r3
 80038a4:	f7fd f866 	bl	8000974 <__aeabi_d2uiz>
 80038a8:	4603      	mov	r3, r0
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	4b47      	ldr	r3, [pc, #284]	; (80039cc <UARTstateManagement+0x554>)
 80038ae:	801a      	strh	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 80038b0:	4b3c      	ldr	r3, [pc, #240]	; (80039a4 <UARTstateManagement+0x52c>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d004      	beq.n	80038c2 <UARTstateManagement+0x44a>
 80038b8:	4b3c      	ldr	r3, [pc, #240]	; (80039ac <UARTstateManagement+0x534>)
 80038ba:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d126      	bne.n	8003910 <UARTstateManagement+0x498>
 80038c2:	4b3c      	ldr	r3, [pc, #240]	; (80039b4 <UARTstateManagement+0x53c>)
 80038c4:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 80038c6:	4b3d      	ldr	r3, [pc, #244]	; (80039bc <UARTstateManagement+0x544>)
 80038c8:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 154; // start-mode
 80038ca:	4b3c      	ldr	r3, [pc, #240]	; (80039bc <UARTstateManagement+0x544>)
 80038cc:	229a      	movs	r2, #154	; 0x9a
 80038ce:	709a      	strb	r2, [r3, #2]
						TxBuf[3] = (posData) >> 8 ; // set high byte posData
 80038d0:	4b3e      	ldr	r3, [pc, #248]	; (80039cc <UARTstateManagement+0x554>)
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	0a1b      	lsrs	r3, r3, #8
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	4b38      	ldr	r3, [pc, #224]	; (80039bc <UARTstateManagement+0x544>)
 80038dc:	70da      	strb	r2, [r3, #3]
						TxBuf[4] = (posData) & 0xff; // set low byte posData
 80038de:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <UARTstateManagement+0x554>)
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	4b35      	ldr	r3, [pc, #212]	; (80039bc <UARTstateManagement+0x544>)
 80038e6:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 80038e8:	4b34      	ldr	r3, [pc, #208]	; (80039bc <UARTstateManagement+0x544>)
 80038ea:	789a      	ldrb	r2, [r3, #2]
 80038ec:	4b33      	ldr	r3, [pc, #204]	; (80039bc <UARTstateManagement+0x544>)
 80038ee:	78db      	ldrb	r3, [r3, #3]
 80038f0:	4413      	add	r3, r2
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	4b31      	ldr	r3, [pc, #196]	; (80039bc <UARTstateManagement+0x544>)
 80038f6:	791b      	ldrb	r3, [r3, #4]
 80038f8:	4413      	add	r3, r2
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	4b2e      	ldr	r3, [pc, #184]	; (80039bc <UARTstateManagement+0x544>)
 8003902:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8003904:	2206      	movs	r2, #6
 8003906:	492d      	ldr	r1, [pc, #180]	; (80039bc <UARTstateManagement+0x544>)
 8003908:	482b      	ldr	r0, [pc, #172]	; (80039b8 <UARTstateManagement+0x540>)
 800390a:	f005 fe8b 	bl	8009624 <HAL_UART_Transmit_DMA>
					break;
 800390e:	e118      	b.n	8003b42 <UARTstateManagement+0x6ca>
 8003910:	4b2b      	ldr	r3, [pc, #172]	; (80039c0 <UARTstateManagement+0x548>)
 8003912:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8003914:	4b29      	ldr	r3, [pc, #164]	; (80039bc <UARTstateManagement+0x544>)
 8003916:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 8003918:	4a2a      	ldr	r2, [pc, #168]	; (80039c4 <UARTstateManagement+0x54c>)
 800391a:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <UARTstateManagement+0x53c>)
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 154; // start-mode
 8003920:	4b26      	ldr	r3, [pc, #152]	; (80039bc <UARTstateManagement+0x544>)
 8003922:	229a      	movs	r2, #154	; 0x9a
 8003924:	711a      	strb	r2, [r3, #4]
						if(homingFlag == 1 && Robot.Position <= 0.5){
 8003926:	4b2a      	ldr	r3, [pc, #168]	; (80039d0 <UARTstateManagement+0x558>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d110      	bne.n	8003950 <UARTstateManagement+0x4d8>
 800392e:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <UARTstateManagement+0x534>)
 8003930:	edd3 7a00 	vldr	s15, [r3]
 8003934:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800393c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003940:	d806      	bhi.n	8003950 <UARTstateManagement+0x4d8>
							TxBuf[5] = 0; // set high byte posData
 8003942:	4b1e      	ldr	r3, [pc, #120]	; (80039bc <UARTstateManagement+0x544>)
 8003944:	2200      	movs	r2, #0
 8003946:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = 0; // set low byte posData
 8003948:	4b1c      	ldr	r3, [pc, #112]	; (80039bc <UARTstateManagement+0x544>)
 800394a:	2200      	movs	r2, #0
 800394c:	719a      	strb	r2, [r3, #6]
 800394e:	e00b      	b.n	8003968 <UARTstateManagement+0x4f0>
							TxBuf[5] = (posData) >> 8 ; // set high byte posData
 8003950:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <UARTstateManagement+0x554>)
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	0a1b      	lsrs	r3, r3, #8
 8003956:	b29b      	uxth	r3, r3
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4b18      	ldr	r3, [pc, #96]	; (80039bc <UARTstateManagement+0x544>)
 800395c:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = (posData) & 0xff; // set low byte posData
 800395e:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <UARTstateManagement+0x554>)
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	b2da      	uxtb	r2, r3
 8003964:	4b15      	ldr	r3, [pc, #84]	; (80039bc <UARTstateManagement+0x544>)
 8003966:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <UARTstateManagement+0x544>)
 800396a:	791a      	ldrb	r2, [r3, #4]
 800396c:	4b13      	ldr	r3, [pc, #76]	; (80039bc <UARTstateManagement+0x544>)
 800396e:	795b      	ldrb	r3, [r3, #5]
 8003970:	4413      	add	r3, r2
 8003972:	b2da      	uxtb	r2, r3
 8003974:	4b11      	ldr	r3, [pc, #68]	; (80039bc <UARTstateManagement+0x544>)
 8003976:	799b      	ldrb	r3, [r3, #6]
 8003978:	4413      	add	r3, r2
 800397a:	b2db      	uxtb	r3, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	b2da      	uxtb	r2, r3
 8003980:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <UARTstateManagement+0x544>)
 8003982:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 8003984:	2208      	movs	r2, #8
 8003986:	490d      	ldr	r1, [pc, #52]	; (80039bc <UARTstateManagement+0x544>)
 8003988:	480b      	ldr	r0, [pc, #44]	; (80039b8 <UARTstateManagement+0x540>)
 800398a:	f005 fe4b 	bl	8009624 <HAL_UART_Transmit_DMA>
					break;
 800398e:	e0d8      	b.n	8003b42 <UARTstateManagement+0x6ca>
 8003990:	00000000 	.word	0x00000000
 8003994:	40c38800 	.word	0x40c38800
 8003998:	54442d18 	.word	0x54442d18
 800399c:	400921fb 	.word	0x400921fb
 80039a0:	200006f8 	.word	0x200006f8
 80039a4:	200006f4 	.word	0x200006f4
 80039a8:	200006f5 	.word	0x200006f5
 80039ac:	20000664 	.word	0x20000664
 80039b0:	200006f0 	.word	0x200006f0
 80039b4:	2000002c 	.word	0x2000002c
 80039b8:	20000560 	.word	0x20000560
 80039bc:	200006c4 	.word	0x200006c4
 80039c0:	20000030 	.word	0x20000030
 80039c4:	200006c6 	.word	0x200006c6
 80039c8:	40668000 	.word	0x40668000
 80039cc:	200006d4 	.word	0x200006d4
 80039d0:	200006f3 	.word	0x200006f3
					modeNo = 11;
 80039d4:	4b60      	ldr	r3, [pc, #384]	; (8003b58 <UARTstateManagement+0x6e0>)
 80039d6:	220b      	movs	r2, #11
 80039d8:	701a      	strb	r2, [r3, #0]
					veloData = (((AbsVal(Robot.Velocity)/6.0)*255.0)/10.0);
 80039da:	4b60      	ldr	r3, [pc, #384]	; (8003b5c <UARTstateManagement+0x6e4>)
 80039dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80039e0:	eeb0 0a67 	vmov.f32	s0, s15
 80039e4:	f7fd fede 	bl	80017a4 <AbsVal>
 80039e8:	ee10 3a10 	vmov	r3, s0
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fc fd57 	bl	80004a0 <__aeabi_f2d>
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	4b5a      	ldr	r3, [pc, #360]	; (8003b60 <UARTstateManagement+0x6e8>)
 80039f8:	f7fc fed4 	bl	80007a4 <__aeabi_ddiv>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4610      	mov	r0, r2
 8003a02:	4619      	mov	r1, r3
 8003a04:	a352      	add	r3, pc, #328	; (adr r3, 8003b50 <UARTstateManagement+0x6d8>)
 8003a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0a:	f7fc fda1 	bl	8000550 <__aeabi_dmul>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4610      	mov	r0, r2
 8003a14:	4619      	mov	r1, r3
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	4b52      	ldr	r3, [pc, #328]	; (8003b64 <UARTstateManagement+0x6ec>)
 8003a1c:	f7fc fec2 	bl	80007a4 <__aeabi_ddiv>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	f7fc ffa4 	bl	8000974 <__aeabi_d2uiz>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	4b4d      	ldr	r3, [pc, #308]	; (8003b68 <UARTstateManagement+0x6f0>)
 8003a32:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8003a34:	4b4d      	ldr	r3, [pc, #308]	; (8003b6c <UARTstateManagement+0x6f4>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d004      	beq.n	8003a46 <UARTstateManagement+0x5ce>
 8003a3c:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <UARTstateManagement+0x6e4>)
 8003a3e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d11e      	bne.n	8003a84 <UARTstateManagement+0x60c>
 8003a46:	4b4a      	ldr	r3, [pc, #296]	; (8003b70 <UARTstateManagement+0x6f8>)
 8003a48:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 8003a4a:	4b4a      	ldr	r3, [pc, #296]	; (8003b74 <UARTstateManagement+0x6fc>)
 8003a4c:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 155;
 8003a4e:	4b49      	ldr	r3, [pc, #292]	; (8003b74 <UARTstateManagement+0x6fc>)
 8003a50:	229b      	movs	r2, #155	; 0x9b
 8003a52:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = veloData; // set low byte posData
 8003a54:	4b44      	ldr	r3, [pc, #272]	; (8003b68 <UARTstateManagement+0x6f0>)
 8003a56:	781a      	ldrb	r2, [r3, #0]
 8003a58:	4b46      	ldr	r3, [pc, #280]	; (8003b74 <UARTstateManagement+0x6fc>)
 8003a5a:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 8003a5c:	4b45      	ldr	r3, [pc, #276]	; (8003b74 <UARTstateManagement+0x6fc>)
 8003a5e:	789a      	ldrb	r2, [r3, #2]
 8003a60:	4b44      	ldr	r3, [pc, #272]	; (8003b74 <UARTstateManagement+0x6fc>)
 8003a62:	78db      	ldrb	r3, [r3, #3]
 8003a64:	4413      	add	r3, r2
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	4b42      	ldr	r3, [pc, #264]	; (8003b74 <UARTstateManagement+0x6fc>)
 8003a6a:	791b      	ldrb	r3, [r3, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	4b3f      	ldr	r3, [pc, #252]	; (8003b74 <UARTstateManagement+0x6fc>)
 8003a76:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8003a78:	2206      	movs	r2, #6
 8003a7a:	493e      	ldr	r1, [pc, #248]	; (8003b74 <UARTstateManagement+0x6fc>)
 8003a7c:	483e      	ldr	r0, [pc, #248]	; (8003b78 <UARTstateManagement+0x700>)
 8003a7e:	f005 fdd1 	bl	8009624 <HAL_UART_Transmit_DMA>
					break;
 8003a82:	e05e      	b.n	8003b42 <UARTstateManagement+0x6ca>
 8003a84:	4b3d      	ldr	r3, [pc, #244]	; (8003b7c <UARTstateManagement+0x704>)
 8003a86:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8003a88:	4b3a      	ldr	r3, [pc, #232]	; (8003b74 <UARTstateManagement+0x6fc>)
 8003a8a:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 8003a8c:	4a3c      	ldr	r2, [pc, #240]	; (8003b80 <UARTstateManagement+0x708>)
 8003a8e:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <UARTstateManagement+0x6f8>)
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 155; // start-mode
 8003a94:	4b37      	ldr	r3, [pc, #220]	; (8003b74 <UARTstateManagement+0x6fc>)
 8003a96:	229b      	movs	r2, #155	; 0x9b
 8003a98:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = veloData; // set low byte posData
 8003a9a:	4b33      	ldr	r3, [pc, #204]	; (8003b68 <UARTstateManagement+0x6f0>)
 8003a9c:	781a      	ldrb	r2, [r3, #0]
 8003a9e:	4b35      	ldr	r3, [pc, #212]	; (8003b74 <UARTstateManagement+0x6fc>)
 8003aa0:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8003aa2:	4b34      	ldr	r3, [pc, #208]	; (8003b74 <UARTstateManagement+0x6fc>)
 8003aa4:	791a      	ldrb	r2, [r3, #4]
 8003aa6:	4b33      	ldr	r3, [pc, #204]	; (8003b74 <UARTstateManagement+0x6fc>)
 8003aa8:	795b      	ldrb	r3, [r3, #5]
 8003aaa:	4413      	add	r3, r2
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <UARTstateManagement+0x6fc>)
 8003ab0:	799b      	ldrb	r3, [r3, #6]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	4b2e      	ldr	r3, [pc, #184]	; (8003b74 <UARTstateManagement+0x6fc>)
 8003abc:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 8003abe:	2208      	movs	r2, #8
 8003ac0:	492c      	ldr	r1, [pc, #176]	; (8003b74 <UARTstateManagement+0x6fc>)
 8003ac2:	482d      	ldr	r0, [pc, #180]	; (8003b78 <UARTstateManagement+0x700>)
 8003ac4:	f005 fdae 	bl	8009624 <HAL_UART_Transmit_DMA>
					break;
 8003ac8:	e03b      	b.n	8003b42 <UARTstateManagement+0x6ca>
					modeNo = 12;
 8003aca:	4b23      	ldr	r3, [pc, #140]	; (8003b58 <UARTstateManagement+0x6e0>)
 8003acc:	220c      	movs	r2, #12
 8003ace:	701a      	strb	r2, [r3, #0]
					RobotState = EndEff;
 8003ad0:	4b2c      	ldr	r3, [pc, #176]	; (8003b84 <UARTstateManagement+0x70c>)
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8003ad6:	4b2c      	ldr	r3, [pc, #176]	; (8003b88 <UARTstateManagement+0x710>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorReadFlag =  1;
 8003adc:	4b2b      	ldr	r3, [pc, #172]	; (8003b8c <UARTstateManagement+0x714>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]
					EndEffState = CheckBeforRun;
 8003ae2:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <UARTstateManagement+0x718>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	701a      	strb	r2, [r3, #0]
					endEffFlag = 1;
 8003ae8:	4b2a      	ldr	r3, [pc, #168]	; (8003b94 <UARTstateManagement+0x71c>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003aee:	2202      	movs	r2, #2
 8003af0:	491f      	ldr	r1, [pc, #124]	; (8003b70 <UARTstateManagement+0x6f8>)
 8003af2:	4821      	ldr	r0, [pc, #132]	; (8003b78 <UARTstateManagement+0x700>)
 8003af4:	f005 fd96 	bl	8009624 <HAL_UART_Transmit_DMA>
					break;
 8003af8:	e023      	b.n	8003b42 <UARTstateManagement+0x6ca>
					modeNo = 13;
 8003afa:	4b17      	ldr	r3, [pc, #92]	; (8003b58 <UARTstateManagement+0x6e0>)
 8003afc:	220d      	movs	r2, #13
 8003afe:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 8003b00:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <UARTstateManagement+0x71c>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003b06:	2202      	movs	r2, #2
 8003b08:	4919      	ldr	r1, [pc, #100]	; (8003b70 <UARTstateManagement+0x6f8>)
 8003b0a:	481b      	ldr	r0, [pc, #108]	; (8003b78 <UARTstateManagement+0x700>)
 8003b0c:	f005 fd8a 	bl	8009624 <HAL_UART_Transmit_DMA>
					break;
 8003b10:	e017      	b.n	8003b42 <UARTstateManagement+0x6ca>
					modeNo = 14;
 8003b12:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <UARTstateManagement+0x6e0>)
 8003b14:	220e      	movs	r2, #14
 8003b16:	701a      	strb	r2, [r3, #0]
					RobotRunToPositon(Robot.HomePositon,51.0);
 8003b18:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <UARTstateManagement+0x6e4>)
 8003b1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003b1e:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8003b98 <UARTstateManagement+0x720>
 8003b22:	eeb0 0a67 	vmov.f32	s0, s15
 8003b26:	f000 fbd5 	bl	80042d4 <RobotRunToPositon>
					homingFlag = 1;
 8003b2a:	4b1c      	ldr	r3, [pc, #112]	; (8003b9c <UARTstateManagement+0x724>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003b30:	2202      	movs	r2, #2
 8003b32:	490f      	ldr	r1, [pc, #60]	; (8003b70 <UARTstateManagement+0x6f8>)
 8003b34:	4810      	ldr	r0, [pc, #64]	; (8003b78 <UARTstateManagement+0x700>)
 8003b36:	f005 fd75 	bl	8009624 <HAL_UART_Transmit_DMA>
					break;
 8003b3a:	e002      	b.n	8003b42 <UARTstateManagement+0x6ca>
			break;
 8003b3c:	bf00      	nop
 8003b3e:	e000      	b.n	8003b42 <UARTstateManagement+0x6ca>
			break;
 8003b40:	bf00      	nop
}
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	f3af 8000 	nop.w
 8003b50:	00000000 	.word	0x00000000
 8003b54:	406fe000 	.word	0x406fe000
 8003b58:	200006f8 	.word	0x200006f8
 8003b5c:	20000664 	.word	0x20000664
 8003b60:	40180000 	.word	0x40180000
 8003b64:	40240000 	.word	0x40240000
 8003b68:	200006d6 	.word	0x200006d6
 8003b6c:	200006f4 	.word	0x200006f4
 8003b70:	2000002c 	.word	0x2000002c
 8003b74:	200006c4 	.word	0x200006c4
 8003b78:	20000560 	.word	0x20000560
 8003b7c:	20000030 	.word	0x20000030
 8003b80:	200006c6 	.word	0x200006c6
 8003b84:	20000699 	.word	0x20000699
 8003b88:	20000a81 	.word	0x20000a81
 8003b8c:	20000a80 	.word	0x20000a80
 8003b90:	20000000 	.word	0x20000000
 8003b94:	200006f2 	.word	0x200006f2
 8003b98:	424c0000 	.word	0x424c0000
 8003b9c:	200006f3 	.word	0x200006f3

08003ba0 <RobotstateManagement>:

void RobotstateManagement()
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
	switch (RobotState)
 8003ba4:	4b8a      	ldr	r3, [pc, #552]	; (8003dd0 <RobotstateManagement+0x230>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	f200 810f 	bhi.w	8003dcc <RobotstateManagement+0x22c>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <RobotstateManagement+0x14>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003dc3 	.word	0x08003dc3
 8003bb8:	08003bc9 	.word	0x08003bc9
 8003bbc:	08003c21 	.word	0x08003c21
 8003bc0:	08003dc3 	.word	0x08003dc3
 8003bc4:	08003dad 	.word	0x08003dad
//			RobotRunToPositon(360.0,51.0);
//			// Goto next State
//			RobotState = FindHome;
			break;
		case FindHome:
			if(Robot.RunningFlag == 0)
 8003bc8:	4b82      	ldr	r3, [pc, #520]	; (8003dd4 <RobotstateManagement+0x234>)
 8003bca:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f040 80f9 	bne.w	8003dc6 <RobotstateManagement+0x226>
			{
				if(Robot.flagSethome == 2)
 8003bd4:	4b7f      	ldr	r3, [pc, #508]	; (8003dd4 <RobotstateManagement+0x234>)
 8003bd6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d111      	bne.n	8003c02 <RobotstateManagement+0x62>
				{
					RobotRunToPositon(Robot.HomePositon,51.0);
 8003bde:	4b7d      	ldr	r3, [pc, #500]	; (8003dd4 <RobotstateManagement+0x234>)
 8003be0:	edd3 7a05 	vldr	s15, [r3, #20]
 8003be4:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8003dd8 <RobotstateManagement+0x238>
 8003be8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bec:	f000 fb72 	bl	80042d4 <RobotRunToPositon>
					Robot.RunningFlag = 1;
 8003bf0:	4b78      	ldr	r3, [pc, #480]	; (8003dd4 <RobotstateManagement+0x234>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					Robot.flagSethome = 3;
 8003bf8:	4b76      	ldr	r3, [pc, #472]	; (8003dd4 <RobotstateManagement+0x234>)
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					RobotResetAll();
					UARTState = MCUConnect;
					RobotState = NormalOperation;
				}
			}
			break;
 8003c00:	e0e1      	b.n	8003dc6 <RobotstateManagement+0x226>
				else if(Robot.flagSethome == 3)
 8003c02:	4b74      	ldr	r3, [pc, #464]	; (8003dd4 <RobotstateManagement+0x234>)
 8003c04:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	f040 80dc 	bne.w	8003dc6 <RobotstateManagement+0x226>
					RobotResetAll();
 8003c0e:	f000 fb9b 	bl	8004348 <RobotResetAll>
					UARTState = MCUConnect;
 8003c12:	4b72      	ldr	r3, [pc, #456]	; (8003ddc <RobotstateManagement+0x23c>)
 8003c14:	2202      	movs	r2, #2
 8003c16:	701a      	strb	r2, [r3, #0]
					RobotState = NormalOperation;
 8003c18:	4b6d      	ldr	r3, [pc, #436]	; (8003dd0 <RobotstateManagement+0x230>)
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	701a      	strb	r2, [r3, #0]
			break;
 8003c1e:	e0d2      	b.n	8003dc6 <RobotstateManagement+0x226>
		case NormalOperation:
			if(notContinueFlag == 1){
 8003c20:	4b6f      	ldr	r3, [pc, #444]	; (8003de0 <RobotstateManagement+0x240>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d10e      	bne.n	8003c46 <RobotstateManagement+0xa6>
				Robot.MotorIsOn = 1;
 8003c28:	4b6a      	ldr	r3, [pc, #424]	; (8003dd4 <RobotstateManagement+0x234>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				Robot.RunningFlag = 1;
 8003c30:	4b68      	ldr	r3, [pc, #416]	; (8003dd4 <RobotstateManagement+0x234>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				Robot.flagStartTime = 1;
 8003c38:	4b66      	ldr	r3, [pc, #408]	; (8003dd4 <RobotstateManagement+0x234>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				notContinueFlag = 0;
 8003c40:	4b67      	ldr	r3, [pc, #412]	; (8003de0 <RobotstateManagement+0x240>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	701a      	strb	r2, [r3, #0]
			}
			if(doingTaskFlag == 1 && Robot.RunningFlag == 1 && endEffFlag == 0){
 8003c46:	4b67      	ldr	r3, [pc, #412]	; (8003de4 <RobotstateManagement+0x244>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d159      	bne.n	8003d02 <RobotstateManagement+0x162>
 8003c4e:	4b61      	ldr	r3, [pc, #388]	; (8003dd4 <RobotstateManagement+0x234>)
 8003c50:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d154      	bne.n	8003d02 <RobotstateManagement+0x162>
 8003c58:	4b63      	ldr	r3, [pc, #396]	; (8003de8 <RobotstateManagement+0x248>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d150      	bne.n	8003d02 <RobotstateManagement+0x162>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8003c60:	2201      	movs	r2, #1
 8003c62:	2108      	movs	r1, #8
 8003c64:	4861      	ldr	r0, [pc, #388]	; (8003dec <RobotstateManagement+0x24c>)
 8003c66:	f001 fec9 	bl	80059fc <HAL_GPIO_WritePin>
				if(goalFlag == 1 && goingToGoalFlag == 0){
 8003c6a:	4b61      	ldr	r3, [pc, #388]	; (8003df0 <RobotstateManagement+0x250>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d11d      	bne.n	8003cae <RobotstateManagement+0x10e>
 8003c72:	4b60      	ldr	r3, [pc, #384]	; (8003df4 <RobotstateManagement+0x254>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d119      	bne.n	8003cae <RobotstateManagement+0x10e>
					goingToGoalFlag = 1;
 8003c7a:	4b5e      	ldr	r3, [pc, #376]	; (8003df4 <RobotstateManagement+0x254>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = uartPos;
 8003c80:	4b5d      	ldr	r3, [pc, #372]	; (8003df8 <RobotstateManagement+0x258>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a53      	ldr	r2, [pc, #332]	; (8003dd4 <RobotstateManagement+0x234>)
 8003c86:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 8003c88:	4b52      	ldr	r3, [pc, #328]	; (8003dd4 <RobotstateManagement+0x234>)
 8003c8a:	edd3 7a00 	vldr	s15, [r3]
 8003c8e:	4b51      	ldr	r3, [pc, #324]	; (8003dd4 <RobotstateManagement+0x234>)
 8003c90:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c94:	4b4f      	ldr	r3, [pc, #316]	; (8003dd4 <RobotstateManagement+0x234>)
 8003c96:	edd3 6a08 	vldr	s13, [r3, #32]
 8003c9a:	eeb0 1a66 	vmov.f32	s2, s13
 8003c9e:	eef0 0a47 	vmov.f32	s1, s14
 8003ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca6:	4855      	ldr	r0, [pc, #340]	; (8003dfc <RobotstateManagement+0x25c>)
 8003ca8:	f7fd fd9e 	bl	80017e8 <CoefficientAndTimeCalculation>
 8003cac:	e029      	b.n	8003d02 <RobotstateManagement+0x162>
				}
				else if(goalFlag == 2 && goingToGoalFlag == 0){
 8003cae:	4b50      	ldr	r3, [pc, #320]	; (8003df0 <RobotstateManagement+0x250>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d125      	bne.n	8003d02 <RobotstateManagement+0x162>
 8003cb6:	4b4f      	ldr	r3, [pc, #316]	; (8003df4 <RobotstateManagement+0x254>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d121      	bne.n	8003d02 <RobotstateManagement+0x162>
					goingToGoalFlag = 1;
 8003cbe:	4b4d      	ldr	r3, [pc, #308]	; (8003df4 <RobotstateManagement+0x254>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = goalDeg[uartGoal[goalIDX]-1];
 8003cc4:	4b4e      	ldr	r3, [pc, #312]	; (8003e00 <RobotstateManagement+0x260>)
 8003cc6:	f993 3000 	ldrsb.w	r3, [r3]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4b4d      	ldr	r3, [pc, #308]	; (8003e04 <RobotstateManagement+0x264>)
 8003cce:	5c9b      	ldrb	r3, [r3, r2]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	4a4d      	ldr	r2, [pc, #308]	; (8003e08 <RobotstateManagement+0x268>)
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a3e      	ldr	r2, [pc, #248]	; (8003dd4 <RobotstateManagement+0x234>)
 8003cdc:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 8003cde:	4b3d      	ldr	r3, [pc, #244]	; (8003dd4 <RobotstateManagement+0x234>)
 8003ce0:	edd3 7a00 	vldr	s15, [r3]
 8003ce4:	4b3b      	ldr	r3, [pc, #236]	; (8003dd4 <RobotstateManagement+0x234>)
 8003ce6:	ed93 7a03 	vldr	s14, [r3, #12]
 8003cea:	4b3a      	ldr	r3, [pc, #232]	; (8003dd4 <RobotstateManagement+0x234>)
 8003cec:	edd3 6a08 	vldr	s13, [r3, #32]
 8003cf0:	eeb0 1a66 	vmov.f32	s2, s13
 8003cf4:	eef0 0a47 	vmov.f32	s1, s14
 8003cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cfc:	483f      	ldr	r0, [pc, #252]	; (8003dfc <RobotstateManagement+0x25c>)
 8003cfe:	f7fd fd73 	bl	80017e8 <CoefficientAndTimeCalculation>
				}
			}

			if(endEffFlag == 0 && goingToGoalFlag == 1 && doingTaskFlag == 1){
 8003d02:	4b39      	ldr	r3, [pc, #228]	; (8003de8 <RobotstateManagement+0x248>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d132      	bne.n	8003d70 <RobotstateManagement+0x1d0>
 8003d0a:	4b3a      	ldr	r3, [pc, #232]	; (8003df4 <RobotstateManagement+0x254>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d12e      	bne.n	8003d70 <RobotstateManagement+0x1d0>
 8003d12:	4b34      	ldr	r3, [pc, #208]	; (8003de4 <RobotstateManagement+0x244>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d12a      	bne.n	8003d70 <RobotstateManagement+0x1d0>
				if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0){
 8003d1a:	4b2e      	ldr	r3, [pc, #184]	; (8003dd4 <RobotstateManagement+0x234>)
 8003d1c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d20:	4b2c      	ldr	r3, [pc, #176]	; (8003dd4 <RobotstateManagement+0x234>)
 8003d22:	edd3 7a00 	vldr	s15, [r3]
 8003d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d2e:	f7fd fd39 	bl	80017a4 <AbsVal>
 8003d32:	eef0 7a40 	vmov.f32	s15, s0
 8003d36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d42:	d515      	bpl.n	8003d70 <RobotstateManagement+0x1d0>
 8003d44:	4b23      	ldr	r3, [pc, #140]	; (8003dd4 <RobotstateManagement+0x234>)
 8003d46:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d4e:	f7fd fd29 	bl	80017a4 <AbsVal>
 8003d52:	eef0 7a40 	vmov.f32	s15, s0
 8003d56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d62:	d505      	bpl.n	8003d70 <RobotstateManagement+0x1d0>
					endEffFlag = 1;
 8003d64:	4b20      	ldr	r3, [pc, #128]	; (8003de8 <RobotstateManagement+0x248>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	701a      	strb	r2, [r3, #0]
					goingToGoalFlag = 0;
 8003d6a:	4b22      	ldr	r3, [pc, #136]	; (8003df4 <RobotstateManagement+0x254>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
				}
			}

			if(goingToGoalFlag == 0 && doingTaskFlag == 1 && Robot.RunningFlag == 0 && endEffFlag == 1){
 8003d70:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <RobotstateManagement+0x254>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d128      	bne.n	8003dca <RobotstateManagement+0x22a>
 8003d78:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <RobotstateManagement+0x244>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d124      	bne.n	8003dca <RobotstateManagement+0x22a>
 8003d80:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <RobotstateManagement+0x234>)
 8003d82:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d11f      	bne.n	8003dca <RobotstateManagement+0x22a>
 8003d8a:	4b17      	ldr	r3, [pc, #92]	; (8003de8 <RobotstateManagement+0x248>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d11b      	bne.n	8003dca <RobotstateManagement+0x22a>
				RobotState = EndEff;
 8003d92:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <RobotstateManagement+0x230>)
 8003d94:	2203      	movs	r2, #3
 8003d96:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 8003d98:	4b1c      	ldr	r3, [pc, #112]	; (8003e0c <RobotstateManagement+0x26c>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 8003d9e:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <RobotstateManagement+0x270>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	701a      	strb	r2, [r3, #0]
				EndEffState = CheckBeforRun;
 8003da4:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <RobotstateManagement+0x274>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003daa:	e00e      	b.n	8003dca <RobotstateManagement+0x22a>
		case EndEff:
			break;
		case Emergency:
			Robot.MotorIsOn = 0;
 8003dac:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <RobotstateManagement+0x234>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PIDAController_Init(&PidVelo);
 8003db4:	4818      	ldr	r0, [pc, #96]	; (8003e18 <RobotstateManagement+0x278>)
 8003db6:	f7fd fadb 	bl	8001370 <PIDAController_Init>
			PIDAController_Init(&PidPos);
 8003dba:	4818      	ldr	r0, [pc, #96]	; (8003e1c <RobotstateManagement+0x27c>)
 8003dbc:	f7fd fad8 	bl	8001370 <PIDAController_Init>
			// Luv u pls pass
			break;
 8003dc0:	e004      	b.n	8003dcc <RobotstateManagement+0x22c>
			break;
 8003dc2:	bf00      	nop
 8003dc4:	e002      	b.n	8003dcc <RobotstateManagement+0x22c>
			break;
 8003dc6:	bf00      	nop
 8003dc8:	e000      	b.n	8003dcc <RobotstateManagement+0x22c>
			break;
 8003dca:	bf00      	nop
	}
}
 8003dcc:	bf00      	nop
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000699 	.word	0x20000699
 8003dd4:	20000664 	.word	0x20000664
 8003dd8:	424c0000 	.word	0x424c0000
 8003ddc:	20000698 	.word	0x20000698
 8003de0:	200006f7 	.word	0x200006f7
 8003de4:	200006f4 	.word	0x200006f4
 8003de8:	200006f2 	.word	0x200006f2
 8003dec:	40020400 	.word	0x40020400
 8003df0:	200006f1 	.word	0x200006f1
 8003df4:	200006f5 	.word	0x200006f5
 8003df8:	200006dc 	.word	0x200006dc
 8003dfc:	200007fc 	.word	0x200007fc
 8003e00:	200006f0 	.word	0x200006f0
 8003e04:	200006e0 	.word	0x200006e0
 8003e08:	20000004 	.word	0x20000004
 8003e0c:	20000a81 	.word	0x20000a81
 8003e10:	20000a80 	.word	0x20000a80
 8003e14:	20000000 	.word	0x20000000
 8003e18:	20000790 	.word	0x20000790
 8003e1c:	200007c4 	.word	0x200007c4

08003e20 <EndEffstateManagement>:

void EndEffstateManagement()
{
 8003e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e24:	b086      	sub	sp, #24
 8003e26:	af00      	add	r7, sp, #0
	switch (EndEffState)
 8003e28:	4ba6      	ldr	r3, [pc, #664]	; (80040c4 <EndEffstateManagement+0x2a4>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	f200 8144 	bhi.w	80040ba <EndEffstateManagement+0x29a>
 8003e32:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <EndEffstateManagement+0x18>)
 8003e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e38:	08003e4d 	.word	0x08003e4d
 8003e3c:	08003e55 	.word	0x08003e55
 8003e40:	08003f0f 	.word	0x08003f0f
 8003e44:	08003f8d 	.word	0x08003f8d
 8003e48:	08003fb5 	.word	0x08003fb5
	{
		case idle:
			// Do not thing wait for command
			EndEffStatus = AwaitCommand;
 8003e4c:	4b9e      	ldr	r3, [pc, #632]	; (80040c8 <EndEffstateManagement+0x2a8>)
 8003e4e:	2203      	movs	r2, #3
 8003e50:	701a      	strb	r2, [r3, #0]
//			I2CEndEffectorWriteFlag = 1;
			break;
 8003e52:	e132      	b.n	80040ba <EndEffstateManagement+0x29a>
		case CheckBeforRun:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 8003e54:	4b9d      	ldr	r3, [pc, #628]	; (80040cc <EndEffstateManagement+0x2ac>)
 8003e56:	2223      	movs	r2, #35	; 0x23
 8003e58:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 8003e5a:	489c      	ldr	r0, [pc, #624]	; (80040cc <EndEffstateManagement+0x2ac>)
 8003e5c:	f000 f956 	bl	800410c <I2CWriteFcn>
			check[0]++;
 8003e60:	4b9b      	ldr	r3, [pc, #620]	; (80040d0 <EndEffstateManagement+0x2b0>)
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	1c51      	adds	r1, r2, #1
 8003e68:	6139      	str	r1, [r7, #16]
 8003e6a:	f143 0300 	adc.w	r3, r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	4b97      	ldr	r3, [pc, #604]	; (80040d0 <EndEffstateManagement+0x2b0>)
 8003e72:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e76:	e9c3 1200 	strd	r1, r2, [r3]
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8003e7a:	4b96      	ldr	r3, [pc, #600]	; (80040d4 <EndEffstateManagement+0x2b4>)
 8003e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	f040 8112 	bne.w	80040ac <EndEffstateManagement+0x28c>
			{
				I2CReadFcn(I2CRxDataBuffer);
 8003e88:	4893      	ldr	r0, [pc, #588]	; (80040d8 <EndEffstateManagement+0x2b8>)
 8003e8a:	f000 f965 	bl	8004158 <I2CReadFcn>
				check[1]++;
 8003e8e:	4b90      	ldr	r3, [pc, #576]	; (80040d0 <EndEffstateManagement+0x2b0>)
 8003e90:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003e94:	1c51      	adds	r1, r2, #1
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	f143 0300 	adc.w	r3, r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	4b8c      	ldr	r3, [pc, #560]	; (80040d0 <EndEffstateManagement+0x2b0>)
 8003ea0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ea4:	e9c3 1202 	strd	r1, r2, [r3, #8]
				if(hi2c1.State == HAL_I2C_STATE_READY)
 8003ea8:	4b8a      	ldr	r3, [pc, #552]	; (80040d4 <EndEffstateManagement+0x2b4>)
 8003eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	f040 80fb 	bne.w	80040ac <EndEffstateManagement+0x28c>
				{
					if(I2CRxDataBuffer[0] == 0x78)
 8003eb6:	4b88      	ldr	r3, [pc, #544]	; (80040d8 <EndEffstateManagement+0x2b8>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b78      	cmp	r3, #120	; 0x78
 8003ebc:	d119      	bne.n	8003ef2 <EndEffstateManagement+0xd2>
					{
						check[2]++;
 8003ebe:	4b84      	ldr	r3, [pc, #528]	; (80040d0 <EndEffstateManagement+0x2b0>)
 8003ec0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003ec4:	1c51      	adds	r1, r2, #1
 8003ec6:	6039      	str	r1, [r7, #0]
 8003ec8:	f143 0300 	adc.w	r3, r3, #0
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	4b80      	ldr	r3, [pc, #512]	; (80040d0 <EndEffstateManagement+0x2b0>)
 8003ed0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ed4:	e9c3 1204 	strd	r1, r2, [r3, #16]
						EndEffState = OpenLaser;
 8003ed8:	4b7a      	ldr	r3, [pc, #488]	; (80040c4 <EndEffstateManagement+0x2a4>)
 8003eda:	2202      	movs	r2, #2
 8003edc:	701a      	strb	r2, [r3, #0]
						openLaserWriteFlag = 1;
 8003ede:	4b7f      	ldr	r3, [pc, #508]	; (80040dc <EndEffstateManagement+0x2bc>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorWriteFlag = 1;
 8003ee4:	4b7e      	ldr	r3, [pc, #504]	; (80040e0 <EndEffstateManagement+0x2c0>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorReadFlag =  0;
 8003eea:	4b7e      	ldr	r3, [pc, #504]	; (80040e4 <EndEffstateManagement+0x2c4>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	701a      	strb	r2, [r3, #0]
						EndEffState = idle;
					}
				}
			}

		break;
 8003ef0:	e0dc      	b.n	80040ac <EndEffstateManagement+0x28c>
						check[3]++;
 8003ef2:	4b77      	ldr	r3, [pc, #476]	; (80040d0 <EndEffstateManagement+0x2b0>)
 8003ef4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003ef8:	f112 0a01 	adds.w	sl, r2, #1
 8003efc:	f143 0b00 	adc.w	fp, r3, #0
 8003f00:	4b73      	ldr	r3, [pc, #460]	; (80040d0 <EndEffstateManagement+0x2b0>)
 8003f02:	e9c3 ab06 	strd	sl, fp, [r3, #24]
						EndEffState = idle;
 8003f06:	4b6f      	ldr	r3, [pc, #444]	; (80040c4 <EndEffstateManagement+0x2a4>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
		break;
 8003f0c:	e0ce      	b.n	80040ac <EndEffstateManagement+0x28c>
		case OpenLaser:
			// Open Laser
			if(openLaserWriteFlag == 1){
 8003f0e:	4b73      	ldr	r3, [pc, #460]	; (80040dc <EndEffstateManagement+0x2bc>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d11d      	bne.n	8003f52 <EndEffstateManagement+0x132>
				check[4]++;
 8003f16:	4b6e      	ldr	r3, [pc, #440]	; (80040d0 <EndEffstateManagement+0x2b0>)
 8003f18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f1c:	1c50      	adds	r0, r2, #1
 8003f1e:	f143 0100 	adc.w	r1, r3, #0
 8003f22:	4b6b      	ldr	r3, [pc, #428]	; (80040d0 <EndEffstateManagement+0x2b0>)
 8003f24:	e9c3 0108 	strd	r0, r1, [r3, #32]
				I2CTxDataBuffer[0] = 0x45;
 8003f28:	4b68      	ldr	r3, [pc, #416]	; (80040cc <EndEffstateManagement+0x2ac>)
 8003f2a:	2245      	movs	r2, #69	; 0x45
 8003f2c:	701a      	strb	r2, [r3, #0]
				I2CWriteFcn(I2CTxDataBuffer);
 8003f2e:	4867      	ldr	r0, [pc, #412]	; (80040cc <EndEffstateManagement+0x2ac>)
 8003f30:	f000 f8ec 	bl	800410c <I2CWriteFcn>
				openLaserWriteFlag = 0;
 8003f34:	4b69      	ldr	r3, [pc, #420]	; (80040dc <EndEffstateManagement+0x2bc>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	701a      	strb	r2, [r3, #0]
				endEffLoopTime = Micros();
 8003f3a:	f000 fb2b 	bl	8004594 <Micros>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4969      	ldr	r1, [pc, #420]	; (80040e8 <EndEffstateManagement+0x2c8>)
 8003f44:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003f48:	2201      	movs	r2, #1
 8003f4a:	2110      	movs	r1, #16
 8003f4c:	4867      	ldr	r0, [pc, #412]	; (80040ec <EndEffstateManagement+0x2cc>)
 8003f4e:	f001 fd55 	bl	80059fc <HAL_GPIO_WritePin>
			}
			if(hi2c1.State == HAL_I2C_STATE_READY && Micros() - endEffLoopTime > 50000)
 8003f52:	4b60      	ldr	r3, [pc, #384]	; (80040d4 <EndEffstateManagement+0x2b4>)
 8003f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	f040 80a8 	bne.w	80040b0 <EndEffstateManagement+0x290>
 8003f60:	f000 fb18 	bl	8004594 <Micros>
 8003f64:	4b60      	ldr	r3, [pc, #384]	; (80040e8 <EndEffstateManagement+0x2c8>)
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	1a84      	subs	r4, r0, r2
 8003f6c:	eb61 0503 	sbc.w	r5, r1, r3
 8003f70:	f24c 3351 	movw	r3, #50001	; 0xc351
 8003f74:	429c      	cmp	r4, r3
 8003f76:	f175 0300 	sbcs.w	r3, r5, #0
 8003f7a:	f0c0 8099 	bcc.w	80040b0 <EndEffstateManagement+0x290>
			{
				EndEffState = SetupReadStatus;
 8003f7e:	4b51      	ldr	r3, [pc, #324]	; (80040c4 <EndEffstateManagement+0x2a4>)
 8003f80:	2203      	movs	r2, #3
 8003f82:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 8003f84:	4b56      	ldr	r3, [pc, #344]	; (80040e0 <EndEffstateManagement+0x2c0>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003f8a:	e091      	b.n	80040b0 <EndEffstateManagement+0x290>
		case SetupReadStatus:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 8003f8c:	4b4f      	ldr	r3, [pc, #316]	; (80040cc <EndEffstateManagement+0x2ac>)
 8003f8e:	2223      	movs	r2, #35	; 0x23
 8003f90:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 8003f92:	484e      	ldr	r0, [pc, #312]	; (80040cc <EndEffstateManagement+0x2ac>)
 8003f94:	f000 f8ba 	bl	800410c <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8003f98:	4b4e      	ldr	r3, [pc, #312]	; (80040d4 <EndEffstateManagement+0x2b4>)
 8003f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	f040 8087 	bne.w	80040b4 <EndEffstateManagement+0x294>
			{
				EndEffState = ReadStatus;
 8003fa6:	4b47      	ldr	r3, [pc, #284]	; (80040c4 <EndEffstateManagement+0x2a4>)
 8003fa8:	2204      	movs	r2, #4
 8003faa:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 8003fac:	4b4d      	ldr	r3, [pc, #308]	; (80040e4 <EndEffstateManagement+0x2c4>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003fb2:	e07f      	b.n	80040b4 <EndEffstateManagement+0x294>
		case ReadStatus:
			I2CReadFcn(I2CRxDataBuffer);
 8003fb4:	4848      	ldr	r0, [pc, #288]	; (80040d8 <EndEffstateManagement+0x2b8>)
 8003fb6:	f000 f8cf 	bl	8004158 <I2CReadFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8003fba:	4b46      	ldr	r3, [pc, #280]	; (80040d4 <EndEffstateManagement+0x2b4>)
 8003fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d178      	bne.n	80040b8 <EndEffstateManagement+0x298>
			{
				I2CEndEffectorReadFlag =  1;
 8003fc6:	4b47      	ldr	r3, [pc, #284]	; (80040e4 <EndEffstateManagement+0x2c4>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
				if(I2CRxDataBuffer[0] == 0x78)
 8003fcc:	4b42      	ldr	r3, [pc, #264]	; (80040d8 <EndEffstateManagement+0x2b8>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b78      	cmp	r3, #120	; 0x78
 8003fd2:	d141      	bne.n	8004058 <EndEffstateManagement+0x238>
				{
					check[5]++;
 8003fd4:	4b3e      	ldr	r3, [pc, #248]	; (80040d0 <EndEffstateManagement+0x2b0>)
 8003fd6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003fda:	f112 0801 	adds.w	r8, r2, #1
 8003fde:	f143 0900 	adc.w	r9, r3, #0
 8003fe2:	4b3b      	ldr	r3, [pc, #236]	; (80040d0 <EndEffstateManagement+0x2b0>)
 8003fe4:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2110      	movs	r1, #16
 8003fec:	483f      	ldr	r0, [pc, #252]	; (80040ec <EndEffstateManagement+0x2cc>)
 8003fee:	f001 fd05 	bl	80059fc <HAL_GPIO_WritePin>
					EndEffState = idle;
 8003ff2:	4b34      	ldr	r3, [pc, #208]	; (80040c4 <EndEffstateManagement+0x2a4>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	701a      	strb	r2, [r3, #0]
					EndEffStatus = AwaitCommand;
 8003ff8:	4b33      	ldr	r3, [pc, #204]	; (80040c8 <EndEffstateManagement+0x2a8>)
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 8003ffe:	4b3c      	ldr	r3, [pc, #240]	; (80040f0 <EndEffstateManagement+0x2d0>)
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
					if(RobotState != Emergency){
 8004004:	4b3b      	ldr	r3, [pc, #236]	; (80040f4 <EndEffstateManagement+0x2d4>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b04      	cmp	r3, #4
 800400a:	d002      	beq.n	8004012 <EndEffstateManagement+0x1f2>
						RobotState = NormalOperation;
 800400c:	4b39      	ldr	r3, [pc, #228]	; (80040f4 <EndEffstateManagement+0x2d4>)
 800400e:	2202      	movs	r2, #2
 8004010:	701a      	strb	r2, [r3, #0]
					}
					if(doingTaskFlag == 1){
 8004012:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <EndEffstateManagement+0x2d8>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d14e      	bne.n	80040b8 <EndEffstateManagement+0x298>
						goalIDX++;
 800401a:	4b38      	ldr	r3, [pc, #224]	; (80040fc <EndEffstateManagement+0x2dc>)
 800401c:	f993 3000 	ldrsb.w	r3, [r3]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	3301      	adds	r3, #1
 8004024:	b2db      	uxtb	r3, r3
 8004026:	b25a      	sxtb	r2, r3
 8004028:	4b34      	ldr	r3, [pc, #208]	; (80040fc <EndEffstateManagement+0x2dc>)
 800402a:	701a      	strb	r2, [r3, #0]
						if(goalIDX > goalAmount-1){
 800402c:	4b34      	ldr	r3, [pc, #208]	; (8004100 <EndEffstateManagement+0x2e0>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	4b32      	ldr	r3, [pc, #200]	; (80040fc <EndEffstateManagement+0x2dc>)
 8004034:	f993 3000 	ldrsb.w	r3, [r3]
 8004038:	429a      	cmp	r2, r3
 800403a:	dc09      	bgt.n	8004050 <EndEffstateManagement+0x230>
							goalIDX = 0;
 800403c:	4b2f      	ldr	r3, [pc, #188]	; (80040fc <EndEffstateManagement+0x2dc>)
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]
							goalFlag = 0;
 8004042:	4b30      	ldr	r3, [pc, #192]	; (8004104 <EndEffstateManagement+0x2e4>)
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
							doingTaskFlag = 0;
 8004048:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <EndEffstateManagement+0x2d8>)
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]
					EndEffStatus = Closing;
					EndEffState = SetupReadStatus;
					I2CEndEffectorWriteFlag = 1;
				}
			}
			break;
 800404e:	e033      	b.n	80040b8 <EndEffstateManagement+0x298>
							notContinueFlag = 1;
 8004050:	4b2d      	ldr	r3, [pc, #180]	; (8004108 <EndEffstateManagement+0x2e8>)
 8004052:	2201      	movs	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
			break;
 8004056:	e02f      	b.n	80040b8 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x12)
 8004058:	4b1f      	ldr	r3, [pc, #124]	; (80040d8 <EndEffstateManagement+0x2b8>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b12      	cmp	r3, #18
 800405e:	d109      	bne.n	8004074 <EndEffstateManagement+0x254>
					EndEffStatus = Opening;
 8004060:	4b19      	ldr	r3, [pc, #100]	; (80040c8 <EndEffstateManagement+0x2a8>)
 8004062:	2200      	movs	r2, #0
 8004064:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004066:	4b17      	ldr	r3, [pc, #92]	; (80040c4 <EndEffstateManagement+0x2a4>)
 8004068:	2203      	movs	r2, #3
 800406a:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 800406c:	4b1c      	ldr	r3, [pc, #112]	; (80040e0 <EndEffstateManagement+0x2c0>)
 800406e:	2201      	movs	r2, #1
 8004070:	701a      	strb	r2, [r3, #0]
			break;
 8004072:	e021      	b.n	80040b8 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x34)
 8004074:	4b18      	ldr	r3, [pc, #96]	; (80040d8 <EndEffstateManagement+0x2b8>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b34      	cmp	r3, #52	; 0x34
 800407a:	d109      	bne.n	8004090 <EndEffstateManagement+0x270>
					EndEffStatus = Working;
 800407c:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <EndEffstateManagement+0x2a8>)
 800407e:	2202      	movs	r2, #2
 8004080:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004082:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <EndEffstateManagement+0x2a4>)
 8004084:	2203      	movs	r2, #3
 8004086:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <EndEffstateManagement+0x2c0>)
 800408a:	2201      	movs	r2, #1
 800408c:	701a      	strb	r2, [r3, #0]
			break;
 800408e:	e013      	b.n	80040b8 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x56)
 8004090:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <EndEffstateManagement+0x2b8>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b56      	cmp	r3, #86	; 0x56
 8004096:	d10f      	bne.n	80040b8 <EndEffstateManagement+0x298>
					EndEffStatus = Closing;
 8004098:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <EndEffstateManagement+0x2a8>)
 800409a:	2201      	movs	r2, #1
 800409c:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 800409e:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <EndEffstateManagement+0x2a4>)
 80040a0:	2203      	movs	r2, #3
 80040a2:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 80040a4:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <EndEffstateManagement+0x2c0>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	701a      	strb	r2, [r3, #0]
			break;
 80040aa:	e005      	b.n	80040b8 <EndEffstateManagement+0x298>
		break;
 80040ac:	bf00      	nop
 80040ae:	e004      	b.n	80040ba <EndEffstateManagement+0x29a>
			break;
 80040b0:	bf00      	nop
 80040b2:	e002      	b.n	80040ba <EndEffstateManagement+0x29a>
			break;
 80040b4:	bf00      	nop
 80040b6:	e000      	b.n	80040ba <EndEffstateManagement+0x29a>
			break;
 80040b8:	bf00      	nop
	}
}
 80040ba:	bf00      	nop
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040c4:	20000000 	.word	0x20000000
 80040c8:	20000001 	.word	0x20000001
 80040cc:	20000a88 	.word	0x20000a88
 80040d0:	20000720 	.word	0x20000720
 80040d4:	200003ec 	.word	0x200003ec
 80040d8:	20000a84 	.word	0x20000a84
 80040dc:	200006f6 	.word	0x200006f6
 80040e0:	20000a81 	.word	0x20000a81
 80040e4:	20000a80 	.word	0x20000a80
 80040e8:	20000a70 	.word	0x20000a70
 80040ec:	40020400 	.word	0x40020400
 80040f0:	200006f2 	.word	0x200006f2
 80040f4:	20000699 	.word	0x20000699
 80040f8:	200006f4 	.word	0x200006f4
 80040fc:	200006f0 	.word	0x200006f0
 8004100:	200006ef 	.word	0x200006ef
 8004104:	200006f1 	.word	0x200006f1
 8004108:	200006f7 	.word	0x200006f7

0800410c <I2CWriteFcn>:

void I2CWriteFcn(uint8_t *Wdata) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorWriteFlag == 1  && hi2c1.State == HAL_I2C_STATE_READY) {
 8004114:	4b0d      	ldr	r3, [pc, #52]	; (800414c <I2CWriteFcn+0x40>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d112      	bne.n	8004142 <I2CWriteFcn+0x36>
 800411c:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <I2CWriteFcn+0x44>)
 800411e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b20      	cmp	r3, #32
 8004126:	d10c      	bne.n	8004142 <I2CWriteFcn+0x36>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	781a      	ldrb	r2, [r3, #0]
		static uint8_t data[EndEffRxBuf_SIZE];
		memcpy ((uint8_t *)data, (uint8_t *)Wdata, EndEffRxBuf_SIZE);
 800412c:	4b09      	ldr	r3, [pc, #36]	; (8004154 <I2CWriteFcn+0x48>)
 800412e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, Endeff_ADDR, data, I2CTxDataLen);
 8004130:	2301      	movs	r3, #1
 8004132:	4a08      	ldr	r2, [pc, #32]	; (8004154 <I2CWriteFcn+0x48>)
 8004134:	2146      	movs	r1, #70	; 0x46
 8004136:	4806      	ldr	r0, [pc, #24]	; (8004150 <I2CWriteFcn+0x44>)
 8004138:	f001 fdf0 	bl	8005d1c <HAL_I2C_Master_Transmit_IT>
		I2CEndEffectorWriteFlag = 0;
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <I2CWriteFcn+0x40>)
 800413e:	2200      	movs	r2, #0
 8004140:	701a      	strb	r2, [r3, #0]
	}
}
 8004142:	bf00      	nop
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000a81 	.word	0x20000a81
 8004150:	200003ec 	.word	0x200003ec
 8004154:	20000a9c 	.word	0x20000a9c

08004158 <I2CReadFcn>:
void I2CReadFcn(uint8_t *Rdata) {
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY) {
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <I2CReadFcn+0x38>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d10e      	bne.n	8004186 <I2CReadFcn+0x2e>
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <I2CReadFcn+0x3c>)
 800416a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b20      	cmp	r3, #32
 8004172:	d108      	bne.n	8004186 <I2CReadFcn+0x2e>
		HAL_I2C_Master_Receive_IT(&hi2c1, Endeff_ADDR, Rdata, I2CRxDataLen);
 8004174:	2301      	movs	r3, #1
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	2146      	movs	r1, #70	; 0x46
 800417a:	4806      	ldr	r0, [pc, #24]	; (8004194 <I2CReadFcn+0x3c>)
 800417c:	f001 fe74 	bl	8005e68 <HAL_I2C_Master_Receive_IT>
		I2CEndEffectorReadFlag =  0;
 8004180:	4b03      	ldr	r3, [pc, #12]	; (8004190 <I2CReadFcn+0x38>)
 8004182:	2200      	movs	r2, #0
 8004184:	701a      	strb	r2, [r3, #0]
	}
}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000a80 	.word	0x20000a80
 8004194:	200003ec 	.word	0x200003ec

08004198 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004198:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	4603      	mov	r3, r0
 80041a2:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041aa:	d103      	bne.n	80041b4 <HAL_GPIO_EXTI_Callback+0x1c>
	{
//		I2CEndEffectorWriteFlag = 1;
//		I2CEndEffectorReadFlag =  1;
//		EndEffState = CheckBeforRun;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80041ac:	2108      	movs	r1, #8
 80041ae:	483e      	ldr	r0, [pc, #248]	; (80042a8 <HAL_GPIO_EXTI_Callback+0x110>)
 80041b0:	f001 fc3d 	bl	8005a2e <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_10)
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ba:	d13e      	bne.n	800423a <HAL_GPIO_EXTI_Callback+0xa2>
	{
		// Proxi Sensor
		if(Robot.flagSethome == 1)
 80041bc:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <HAL_GPIO_EXTI_Callback+0x114>)
 80041be:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d139      	bne.n	800423a <HAL_GPIO_EXTI_Callback+0xa2>
		{
			homePoint[homeFF] = PositionDeg[0];
 80041c6:	4b3a      	ldr	r3, [pc, #232]	; (80042b0 <HAL_GPIO_EXTI_Callback+0x118>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	4b39      	ldr	r3, [pc, #228]	; (80042b4 <HAL_GPIO_EXTI_Callback+0x11c>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	4939      	ldr	r1, [pc, #228]	; (80042b8 <HAL_GPIO_EXTI_Callback+0x120>)
 80041d2:	0083      	lsls	r3, r0, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	601a      	str	r2, [r3, #0]
			homeFF++;
 80041d8:	4b35      	ldr	r3, [pc, #212]	; (80042b0 <HAL_GPIO_EXTI_Callback+0x118>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	3301      	adds	r3, #1
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	4b33      	ldr	r3, [pc, #204]	; (80042b0 <HAL_GPIO_EXTI_Callback+0x118>)
 80041e2:	701a      	strb	r2, [r3, #0]
			if(homeFF == 2)
 80041e4:	4b32      	ldr	r3, [pc, #200]	; (80042b0 <HAL_GPIO_EXTI_Callback+0x118>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d126      	bne.n	800423a <HAL_GPIO_EXTI_Callback+0xa2>
			{
				if(homePoint[1]-homePoint[0] > 180.0)
 80041ec:	4b32      	ldr	r3, [pc, #200]	; (80042b8 <HAL_GPIO_EXTI_Callback+0x120>)
 80041ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80041f2:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <HAL_GPIO_EXTI_Callback+0x120>)
 80041f4:	edd3 7a00 	vldr	s15, [r3]
 80041f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80042bc <HAL_GPIO_EXTI_Callback+0x124>
 8004200:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004208:	dd04      	ble.n	8004214 <HAL_GPIO_EXTI_Callback+0x7c>
				{
					Robot.HomePositon =  0;
 800420a:	4b28      	ldr	r3, [pc, #160]	; (80042ac <HAL_GPIO_EXTI_Callback+0x114>)
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	615a      	str	r2, [r3, #20]
 8004212:	e00e      	b.n	8004232 <HAL_GPIO_EXTI_Callback+0x9a>
				}
				else
				{
					Robot.HomePositon = (homePoint[0]+homePoint[1])/2.0;
 8004214:	4b28      	ldr	r3, [pc, #160]	; (80042b8 <HAL_GPIO_EXTI_Callback+0x120>)
 8004216:	ed93 7a00 	vldr	s14, [r3]
 800421a:	4b27      	ldr	r3, [pc, #156]	; (80042b8 <HAL_GPIO_EXTI_Callback+0x120>)
 800421c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004220:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004224:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004228:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800422c:	4b1f      	ldr	r3, [pc, #124]	; (80042ac <HAL_GPIO_EXTI_Callback+0x114>)
 800422e:	edc3 7a05 	vstr	s15, [r3, #20]
				}
				Robot.flagSethome = 2;
 8004232:	4b1e      	ldr	r3, [pc, #120]	; (80042ac <HAL_GPIO_EXTI_Callback+0x114>)
 8004234:	2202      	movs	r2, #2
 8004236:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			}
		}
	}
	if(GPIO_Pin == GPIO_PIN_5)
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	2b20      	cmp	r3, #32
 800423e:	d12e      	bne.n	800429e <HAL_GPIO_EXTI_Callback+0x106>
	{
		if(EmertimeoutFlag == 0)
 8004240:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <HAL_GPIO_EXTI_Callback+0x128>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d102      	bne.n	800424e <HAL_GPIO_EXTI_Callback+0xb6>
		{
			EmertimeoutFlag = 1;
 8004248:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <HAL_GPIO_EXTI_Callback+0x128>)
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]
		}

		if(Micros() - EmergencycalloutTime > 100000 && EmertimeoutFlag == 1)
 800424e:	f000 f9a1 	bl	8004594 <Micros>
 8004252:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	1a84      	subs	r4, r0, r2
 800425a:	eb61 0503 	sbc.w	r5, r1, r3
 800425e:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <HAL_GPIO_EXTI_Callback+0x130>)
 8004260:	429c      	cmp	r4, r3
 8004262:	f175 0300 	sbcs.w	r3, r5, #0
 8004266:	d31a      	bcc.n	800429e <HAL_GPIO_EXTI_Callback+0x106>
 8004268:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <HAL_GPIO_EXTI_Callback+0x128>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d116      	bne.n	800429e <HAL_GPIO_EXTI_Callback+0x106>
		{
			check[6]++;
 8004270:	4b16      	ldr	r3, [pc, #88]	; (80042cc <HAL_GPIO_EXTI_Callback+0x134>)
 8004272:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004276:	f112 0801 	adds.w	r8, r2, #1
 800427a:	f143 0900 	adc.w	r9, r3, #0
 800427e:	4b13      	ldr	r3, [pc, #76]	; (80042cc <HAL_GPIO_EXTI_Callback+0x134>)
 8004280:	e9c3 890c 	strd	r8, r9, [r3, #48]	; 0x30
			EmergencycalloutTime = Micros();
 8004284:	f000 f986 	bl	8004594 <Micros>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	490d      	ldr	r1, [pc, #52]	; (80042c4 <HAL_GPIO_EXTI_Callback+0x12c>)
 800428e:	e9c1 2300 	strd	r2, r3, [r1]
			EmertimeoutFlag = 0;
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_GPIO_EXTI_Callback+0x128>)
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
			//Docode
			HAL_TIM_Base_Start_IT(&htim5);
 8004298:	480d      	ldr	r0, [pc, #52]	; (80042d0 <HAL_GPIO_EXTI_Callback+0x138>)
 800429a:	f004 f857 	bl	800834c <HAL_TIM_Base_Start_IT>
		}
	}
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042a8:	40020400 	.word	0x40020400
 80042ac:	20000664 	.word	0x20000664
 80042b0:	2000068c 	.word	0x2000068c
 80042b4:	20000780 	.word	0x20000780
 80042b8:	20000690 	.word	0x20000690
 80042bc:	43340000 	.word	0x43340000
 80042c0:	20000a68 	.word	0x20000a68
 80042c4:	20000a60 	.word	0x20000a60
 80042c8:	000186a1 	.word	0x000186a1
 80042cc:	20000720 	.word	0x20000720
 80042d0:	200004d0 	.word	0x200004d0

080042d4 <RobotRunToPositon>:
void RobotRunToPositon(float Destination , float VeloInput)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	ed87 0a01 	vstr	s0, [r7, #4]
 80042de:	edc7 0a00 	vstr	s1, [r7]
	Robot.GoalPositon = Destination;
 80042e2:	4a16      	ldr	r2, [pc, #88]	; (800433c <RobotRunToPositon+0x68>)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	60d3      	str	r3, [r2, #12]
	Robot.QVMax = VeloInput;
 80042e8:	4a14      	ldr	r2, [pc, #80]	; (800433c <RobotRunToPositon+0x68>)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6213      	str	r3, [r2, #32]
	CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 80042ee:	4b13      	ldr	r3, [pc, #76]	; (800433c <RobotRunToPositon+0x68>)
 80042f0:	edd3 7a00 	vldr	s15, [r3]
 80042f4:	4b11      	ldr	r3, [pc, #68]	; (800433c <RobotRunToPositon+0x68>)
 80042f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80042fa:	4b10      	ldr	r3, [pc, #64]	; (800433c <RobotRunToPositon+0x68>)
 80042fc:	edd3 6a08 	vldr	s13, [r3, #32]
 8004300:	eeb0 1a66 	vmov.f32	s2, s13
 8004304:	eef0 0a47 	vmov.f32	s1, s14
 8004308:	eeb0 0a67 	vmov.f32	s0, s15
 800430c:	480c      	ldr	r0, [pc, #48]	; (8004340 <RobotRunToPositon+0x6c>)
 800430e:	f7fd fa6b 	bl	80017e8 <CoefficientAndTimeCalculation>
	// Start Trajectory Evaluator
	Robot.MotorIsOn = 1;
 8004312:	4b0a      	ldr	r3, [pc, #40]	; (800433c <RobotRunToPositon+0x68>)
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Robot.flagStartTime = 1;
 800431a:	4b08      	ldr	r3, [pc, #32]	; (800433c <RobotRunToPositon+0x68>)
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Robot.RunningFlag = 1;
 8004322:	4b06      	ldr	r3, [pc, #24]	; (800433c <RobotRunToPositon+0x68>)
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800432a:	2201      	movs	r2, #1
 800432c:	2108      	movs	r1, #8
 800432e:	4805      	ldr	r0, [pc, #20]	; (8004344 <RobotRunToPositon+0x70>)
 8004330:	f001 fb64 	bl	80059fc <HAL_GPIO_WritePin>
}
 8004334:	bf00      	nop
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20000664 	.word	0x20000664
 8004340:	200007fc 	.word	0x200007fc
 8004344:	40020400 	.word	0x40020400

08004348 <RobotResetAll>:

void RobotResetAll()
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
	// Reset Encoder
	TIM_ResetCounter(TIM2);
 800434c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004350:	f000 f866 	bl	8004420 <TIM_ResetCounter>
	EncoderRawData[0] = 0;
 8004354:	4b23      	ldr	r3, [pc, #140]	; (80043e4 <RobotResetAll+0x9c>)
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
	EncoderRawData[1] = 0;
 800435a:	4b22      	ldr	r3, [pc, #136]	; (80043e4 <RobotResetAll+0x9c>)
 800435c:	2200      	movs	r2, #0
 800435e:	605a      	str	r2, [r3, #4]
	WrappingStep = 0;
 8004360:	4b21      	ldr	r3, [pc, #132]	; (80043e8 <RobotResetAll+0xa0>)
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
	// Reset Trajectory
	CoefficientAndTimeCalculation(&traject,0.0,0.0,60);
 8004366:	ed9f 1a21 	vldr	s2, [pc, #132]	; 80043ec <RobotResetAll+0xa4>
 800436a:	eddf 0a21 	vldr	s1, [pc, #132]	; 80043f0 <RobotResetAll+0xa8>
 800436e:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80043f0 <RobotResetAll+0xa8>
 8004372:	4820      	ldr	r0, [pc, #128]	; (80043f4 <RobotResetAll+0xac>)
 8004374:	f7fd fa38 	bl	80017e8 <CoefficientAndTimeCalculation>
	Robot.flagStartTime = 1;
 8004378:	4b1f      	ldr	r3, [pc, #124]	; (80043f8 <RobotResetAll+0xb0>)
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	StartTime = 0;
 8004380:	491e      	ldr	r1, [pc, #120]	; (80043fc <RobotResetAll+0xb4>)
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	e9c1 2300 	strd	r2, r3, [r1]
	CurrentTime = 0;
 800438e:	491c      	ldr	r1, [pc, #112]	; (8004400 <RobotResetAll+0xb8>)
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	e9c1 2300 	strd	r2, r3, [r1]
	// Reset Position
	PositionDeg[0] = 0;
 800439c:	4b19      	ldr	r3, [pc, #100]	; (8004404 <RobotResetAll+0xbc>)
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
	PositionDeg[1] = 0;
 80043a4:	4b17      	ldr	r3, [pc, #92]	; (8004404 <RobotResetAll+0xbc>)
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	605a      	str	r2, [r3, #4]
	KalmanMatrixReset(&KalmanVar, Pvar);
 80043ac:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8004408 <RobotResetAll+0xc0>
 80043b0:	4816      	ldr	r0, [pc, #88]	; (800440c <RobotResetAll+0xc4>)
 80043b2:	f7fc fe35 	bl	8001020 <KalmanMatrixReset>
	Robotinit(&Robot);
 80043b6:	4810      	ldr	r0, [pc, #64]	; (80043f8 <RobotResetAll+0xb0>)
 80043b8:	f7fd f98e 	bl	80016d8 <Robotinit>
	// Reset Pid
	PIDAController_Init(&PidVelo);
 80043bc:	4814      	ldr	r0, [pc, #80]	; (8004410 <RobotResetAll+0xc8>)
 80043be:	f7fc ffd7 	bl	8001370 <PIDAController_Init>
	PIDAController_Init(&PidPos);
 80043c2:	4814      	ldr	r0, [pc, #80]	; (8004414 <RobotResetAll+0xcc>)
 80043c4:	f7fc ffd4 	bl	8001370 <PIDAController_Init>
	// Reset Home Buffer
	homePoint[0] = 0;
 80043c8:	4b13      	ldr	r3, [pc, #76]	; (8004418 <RobotResetAll+0xd0>)
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
	homePoint[1] = 0;
 80043d0:	4b11      	ldr	r3, [pc, #68]	; (8004418 <RobotResetAll+0xd0>)
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	605a      	str	r2, [r3, #4]
	homeFF = 0;
 80043d8:	4b10      	ldr	r3, [pc, #64]	; (800441c <RobotResetAll+0xd4>)
 80043da:	2200      	movs	r2, #0
 80043dc:	701a      	strb	r2, [r3, #0]
}
 80043de:	bf00      	nop
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000770 	.word	0x20000770
 80043e8:	20000778 	.word	0x20000778
 80043ec:	42700000 	.word	0x42700000
 80043f0:	00000000 	.word	0x00000000
 80043f4:	200007fc 	.word	0x200007fc
 80043f8:	20000664 	.word	0x20000664
 80043fc:	20000a30 	.word	0x20000a30
 8004400:	20000a38 	.word	0x20000a38
 8004404:	20000780 	.word	0x20000780
 8004408:	447a0000 	.word	0x447a0000
 800440c:	20000034 	.word	0x20000034
 8004410:	20000790 	.word	0x20000790
 8004414:	200007c4 	.word	0x200007c4
 8004418:	20000690 	.word	0x20000690
 800441c:	2000068c 	.word	0x2000068c

08004420 <TIM_ResetCounter>:

void TIM_ResetCounter(TIM_TypeDef* TIMx)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Reset the Counter Register value */
  TIMx->CNT = 0;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
	...

0800443c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800443c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004440:	b082      	sub	sp, #8
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a47      	ldr	r2, [pc, #284]	; (8004568 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d10b      	bne.n	8004466 <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micro += 65535;
 800444e:	4b47      	ldr	r3, [pc, #284]	; (800456c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004458:	eb12 0a01 	adds.w	sl, r2, r1
 800445c:	f143 0b00 	adc.w	fp, r3, #0
 8004460:	4b42      	ldr	r3, [pc, #264]	; (800456c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004462:	e9c3 ab00 	strd	sl, fp, [r3]
	}
	if (htim == &htim5){
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a41      	ldr	r2, [pc, #260]	; (8004570 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d177      	bne.n	800455e <HAL_TIM_PeriodElapsedCallback+0x122>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET)
 800446e:	2120      	movs	r1, #32
 8004470:	4840      	ldr	r0, [pc, #256]	; (8004574 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004472:	f001 faab 	bl	80059cc <HAL_GPIO_ReadPin>
 8004476:	4603      	mov	r3, r0
 8004478:	2b01      	cmp	r3, #1
 800447a:	d15b      	bne.n	8004534 <HAL_TIM_PeriodElapsedCallback+0xf8>
		{
			check[7]++;
 800447c:	4b3e      	ldr	r3, [pc, #248]	; (8004578 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800447e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004482:	f112 0801 	adds.w	r8, r2, #1
 8004486:	f143 0900 	adc.w	r9, r3, #0
 800448a:	4b3b      	ldr	r3, [pc, #236]	; (8004578 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800448c:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
			if(EndEffState != idle)
 8004490:	4b3a      	ldr	r3, [pc, #232]	; (800457c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_TIM_PeriodElapsedCallback+0x64>
			{
				RobotState = EndEff;
 8004498:	4b39      	ldr	r3, [pc, #228]	; (8004580 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800449a:	2203      	movs	r2, #3
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	e002      	b.n	80044a6 <HAL_TIM_PeriodElapsedCallback+0x6a>
			}
			else
			{
				RobotState = NormalOperation;
 80044a0:	4b37      	ldr	r3, [pc, #220]	; (8004580 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80044a2:	2202      	movs	r2, #2
 80044a4:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80044a6:	2200      	movs	r2, #0
 80044a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80044ac:	4831      	ldr	r0, [pc, #196]	; (8004574 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80044ae:	f001 faa5 	bl	80059fc <HAL_GPIO_WritePin>
			if((doingTaskFlag == 1 && goingToGoalFlag == 1) || homingFlag == 1)
 80044b2:	4b34      	ldr	r3, [pc, #208]	; (8004584 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d103      	bne.n	80044c2 <HAL_TIM_PeriodElapsedCallback+0x86>
 80044ba:	4b33      	ldr	r3, [pc, #204]	; (8004588 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d003      	beq.n	80044ca <HAL_TIM_PeriodElapsedCallback+0x8e>
 80044c2:	4b32      	ldr	r3, [pc, #200]	; (800458c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d10b      	bne.n	80044e2 <HAL_TIM_PeriodElapsedCallback+0xa6>
			{
				RobotRunToPositon(Robot.GoalPositon,Robot.QVMax);
 80044ca:	4b31      	ldr	r3, [pc, #196]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80044cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80044d0:	4b2f      	ldr	r3, [pc, #188]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80044d2:	ed93 7a08 	vldr	s14, [r3, #32]
 80044d6:	eef0 0a47 	vmov.f32	s1, s14
 80044da:	eeb0 0a67 	vmov.f32	s0, s15
 80044de:	f7ff fef9 	bl	80042d4 <RobotRunToPositon>
			}
			if(Robot.flagSethome == 1){
 80044e2:	4b2b      	ldr	r3, [pc, #172]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80044e4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d105      	bne.n	80044f8 <HAL_TIM_PeriodElapsedCallback+0xbc>
				RobotResetAll();
 80044ec:	f7ff ff2c 	bl	8004348 <RobotResetAll>
				RobotState = init;
 80044f0:	4b23      	ldr	r3, [pc, #140]	; (8004580 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	e02f      	b.n	8004558 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
			else if(Robot.flagSethome == 2 || Robot.flagSethome == 3)
 80044f8:	4b25      	ldr	r3, [pc, #148]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80044fa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d004      	beq.n	800450c <HAL_TIM_PeriodElapsedCallback+0xd0>
 8004502:	4b23      	ldr	r3, [pc, #140]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004504:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004508:	2b03      	cmp	r3, #3
 800450a:	d125      	bne.n	8004558 <HAL_TIM_PeriodElapsedCallback+0x11c>
			{
				Robot.flagSethome = 3;
 800450c:	4b20      	ldr	r3, [pc, #128]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800450e:	2203      	movs	r2, #3
 8004510:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				RobotRunToPositon(Robot.HomePositon,Robot.QVMax);
 8004514:	4b1e      	ldr	r3, [pc, #120]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004516:	edd3 7a05 	vldr	s15, [r3, #20]
 800451a:	4b1d      	ldr	r3, [pc, #116]	; (8004590 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800451c:	ed93 7a08 	vldr	s14, [r3, #32]
 8004520:	eef0 0a47 	vmov.f32	s1, s14
 8004524:	eeb0 0a67 	vmov.f32	s0, s15
 8004528:	f7ff fed4 	bl	80042d4 <RobotRunToPositon>
				RobotState = FindHome;
 800452c:	4b14      	ldr	r3, [pc, #80]	; (8004580 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800452e:	2201      	movs	r2, #1
 8004530:	701a      	strb	r2, [r3, #0]
 8004532:	e011      	b.n	8004558 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
		}
		else
		{
			check[8]++;
 8004534:	4b10      	ldr	r3, [pc, #64]	; (8004578 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004536:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800453a:	1c54      	adds	r4, r2, #1
 800453c:	f143 0500 	adc.w	r5, r3, #0
 8004540:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004542:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
			RobotState = Emergency;
 8004546:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004548:	2204      	movs	r2, #4
 800454a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800454c:	2201      	movs	r2, #1
 800454e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004552:	4808      	ldr	r0, [pc, #32]	; (8004574 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004554:	f001 fa52 	bl	80059fc <HAL_GPIO_WritePin>
		}
		HAL_TIM_Base_Stop_IT(&htim5);
 8004558:	4805      	ldr	r0, [pc, #20]	; (8004570 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800455a:	f003 ff59 	bl	8008410 <HAL_TIM_Base_Stop_IT>
	}
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004568:	20000518 	.word	0x20000518
 800456c:	20000700 	.word	0x20000700
 8004570:	200004d0 	.word	0x200004d0
 8004574:	40020400 	.word	0x40020400
 8004578:	20000720 	.word	0x20000720
 800457c:	20000000 	.word	0x20000000
 8004580:	20000699 	.word	0x20000699
 8004584:	200006f4 	.word	0x200006f4
 8004588:	200006f5 	.word	0x200006f5
 800458c:	200006f3 	.word	0x200006f3
 8004590:	20000664 	.word	0x20000664

08004594 <Micros>:

uint64_t Micros(){
 8004594:	b4b0      	push	{r4, r5, r7}
 8004596:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8004598:	4b08      	ldr	r3, [pc, #32]	; (80045bc <Micros+0x28>)
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	2200      	movs	r2, #0
 800459e:	4618      	mov	r0, r3
 80045a0:	4611      	mov	r1, r2
 80045a2:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <Micros+0x2c>)
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	1884      	adds	r4, r0, r2
 80045aa:	eb41 0503 	adc.w	r5, r1, r3
 80045ae:	4622      	mov	r2, r4
 80045b0:	462b      	mov	r3, r5
}
 80045b2:	4610      	mov	r0, r2
 80045b4:	4619      	mov	r1, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bcb0      	pop	{r4, r5, r7}
 80045ba:	4770      	bx	lr
 80045bc:	40014800 	.word	0x40014800
 80045c0:	20000700 	.word	0x20000700

080045c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80045c8:	b672      	cpsid	i
}
 80045ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80045cc:	e7fe      	b.n	80045cc <Error_Handler+0x8>
	...

080045d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	607b      	str	r3, [r7, #4]
 80045da:	4b10      	ldr	r3, [pc, #64]	; (800461c <HAL_MspInit+0x4c>)
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	4a0f      	ldr	r2, [pc, #60]	; (800461c <HAL_MspInit+0x4c>)
 80045e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045e4:	6453      	str	r3, [r2, #68]	; 0x44
 80045e6:	4b0d      	ldr	r3, [pc, #52]	; (800461c <HAL_MspInit+0x4c>)
 80045e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ee:	607b      	str	r3, [r7, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045f2:	2300      	movs	r3, #0
 80045f4:	603b      	str	r3, [r7, #0]
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_MspInit+0x4c>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	4a08      	ldr	r2, [pc, #32]	; (800461c <HAL_MspInit+0x4c>)
 80045fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004600:	6413      	str	r3, [r2, #64]	; 0x40
 8004602:	4b06      	ldr	r3, [pc, #24]	; (800461c <HAL_MspInit+0x4c>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460a:	603b      	str	r3, [r7, #0]
 800460c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800460e:	2007      	movs	r0, #7
 8004610:	f000 fc06 	bl	8004e20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40023800 	.word	0x40023800

08004620 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08a      	sub	sp, #40	; 0x28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004628:	f107 0314 	add.w	r3, r7, #20
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	609a      	str	r2, [r3, #8]
 8004634:	60da      	str	r2, [r3, #12]
 8004636:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a21      	ldr	r2, [pc, #132]	; (80046c4 <HAL_I2C_MspInit+0xa4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d13c      	bne.n	80046bc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <HAL_I2C_MspInit+0xa8>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	4a1f      	ldr	r2, [pc, #124]	; (80046c8 <HAL_I2C_MspInit+0xa8>)
 800464c:	f043 0302 	orr.w	r3, r3, #2
 8004650:	6313      	str	r3, [r2, #48]	; 0x30
 8004652:	4b1d      	ldr	r3, [pc, #116]	; (80046c8 <HAL_I2C_MspInit+0xa8>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800465e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004664:	2312      	movs	r3, #18
 8004666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004668:	2300      	movs	r3, #0
 800466a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800466c:	2303      	movs	r3, #3
 800466e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004670:	2304      	movs	r3, #4
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004674:	f107 0314 	add.w	r3, r7, #20
 8004678:	4619      	mov	r1, r3
 800467a:	4814      	ldr	r0, [pc, #80]	; (80046cc <HAL_I2C_MspInit+0xac>)
 800467c:	f001 f822 	bl	80056c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <HAL_I2C_MspInit+0xa8>)
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	4a0f      	ldr	r2, [pc, #60]	; (80046c8 <HAL_I2C_MspInit+0xa8>)
 800468a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800468e:	6413      	str	r3, [r2, #64]	; 0x40
 8004690:	4b0d      	ldr	r3, [pc, #52]	; (80046c8 <HAL_I2C_MspInit+0xa8>)
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800469c:	2200      	movs	r2, #0
 800469e:	2100      	movs	r1, #0
 80046a0:	201f      	movs	r0, #31
 80046a2:	f000 fbc8 	bl	8004e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80046a6:	201f      	movs	r0, #31
 80046a8:	f000 fbe1 	bl	8004e6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80046ac:	2200      	movs	r2, #0
 80046ae:	2100      	movs	r1, #0
 80046b0:	2020      	movs	r0, #32
 80046b2:	f000 fbc0 	bl	8004e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80046b6:	2020      	movs	r0, #32
 80046b8:	f000 fbd9 	bl	8004e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80046bc:	bf00      	nop
 80046be:	3728      	adds	r7, #40	; 0x28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40005400 	.word	0x40005400
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40020400 	.word	0x40020400

080046d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a0e      	ldr	r2, [pc, #56]	; (8004718 <HAL_TIM_PWM_MspInit+0x48>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d115      	bne.n	800470e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <HAL_TIM_PWM_MspInit+0x4c>)
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	4a0c      	ldr	r2, [pc, #48]	; (800471c <HAL_TIM_PWM_MspInit+0x4c>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6453      	str	r3, [r2, #68]	; 0x44
 80046f2:	4b0a      	ldr	r3, [pc, #40]	; (800471c <HAL_TIM_PWM_MspInit+0x4c>)
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80046fe:	2200      	movs	r2, #0
 8004700:	2100      	movs	r1, #0
 8004702:	201a      	movs	r0, #26
 8004704:	f000 fb97 	bl	8004e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004708:	201a      	movs	r0, #26
 800470a:	f000 fbb0 	bl	8004e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40010000 	.word	0x40010000
 800471c:	40023800 	.word	0x40023800

08004720 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08a      	sub	sp, #40	; 0x28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004728:	f107 0314 	add.w	r3, r7, #20
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	605a      	str	r2, [r3, #4]
 8004732:	609a      	str	r2, [r3, #8]
 8004734:	60da      	str	r2, [r3, #12]
 8004736:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004740:	d12b      	bne.n	800479a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	4b17      	ldr	r3, [pc, #92]	; (80047a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	4a16      	ldr	r2, [pc, #88]	; (80047a4 <HAL_TIM_Encoder_MspInit+0x84>)
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	6413      	str	r3, [r2, #64]	; 0x40
 8004752:	4b14      	ldr	r3, [pc, #80]	; (80047a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	4a0f      	ldr	r2, [pc, #60]	; (80047a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	6313      	str	r3, [r2, #48]	; 0x30
 800476e:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <HAL_TIM_Encoder_MspInit+0x84>)
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800477a:	2303      	movs	r3, #3
 800477c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477e:	2302      	movs	r3, #2
 8004780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004786:	2300      	movs	r3, #0
 8004788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800478a:	2301      	movs	r3, #1
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800478e:	f107 0314 	add.w	r3, r7, #20
 8004792:	4619      	mov	r1, r3
 8004794:	4804      	ldr	r0, [pc, #16]	; (80047a8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004796:	f000 ff95 	bl	80056c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800479a:	bf00      	nop
 800479c:	3728      	adds	r7, #40	; 0x28
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40020000 	.word	0x40020000

080047ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1c      	ldr	r2, [pc, #112]	; (800482c <HAL_TIM_Base_MspInit+0x80>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d116      	bne.n	80047ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <HAL_TIM_Base_MspInit+0x84>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	4a1a      	ldr	r2, [pc, #104]	; (8004830 <HAL_TIM_Base_MspInit+0x84>)
 80047c8:	f043 0308 	orr.w	r3, r3, #8
 80047cc:	6413      	str	r3, [r2, #64]	; 0x40
 80047ce:	4b18      	ldr	r3, [pc, #96]	; (8004830 <HAL_TIM_Base_MspInit+0x84>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80047da:	2200      	movs	r2, #0
 80047dc:	2100      	movs	r1, #0
 80047de:	2032      	movs	r0, #50	; 0x32
 80047e0:	f000 fb29 	bl	8004e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80047e4:	2032      	movs	r0, #50	; 0x32
 80047e6:	f000 fb42 	bl	8004e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80047ea:	e01a      	b.n	8004822 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a10      	ldr	r2, [pc, #64]	; (8004834 <HAL_TIM_Base_MspInit+0x88>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d115      	bne.n	8004822 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <HAL_TIM_Base_MspInit+0x84>)
 80047fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fe:	4a0c      	ldr	r2, [pc, #48]	; (8004830 <HAL_TIM_Base_MspInit+0x84>)
 8004800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004804:	6453      	str	r3, [r2, #68]	; 0x44
 8004806:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <HAL_TIM_Base_MspInit+0x84>)
 8004808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004812:	2200      	movs	r2, #0
 8004814:	2100      	movs	r1, #0
 8004816:	201a      	movs	r0, #26
 8004818:	f000 fb0d 	bl	8004e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800481c:	201a      	movs	r0, #26
 800481e:	f000 fb26 	bl	8004e6e <HAL_NVIC_EnableIRQ>
}
 8004822:	bf00      	nop
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40000c00 	.word	0x40000c00
 8004830:	40023800 	.word	0x40023800
 8004834:	40014800 	.word	0x40014800

08004838 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004840:	f107 030c 	add.w	r3, r7, #12
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	60da      	str	r2, [r3, #12]
 800484e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a12      	ldr	r2, [pc, #72]	; (80048a0 <HAL_TIM_MspPostInit+0x68>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d11e      	bne.n	8004898 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <HAL_TIM_MspPostInit+0x6c>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	4a10      	ldr	r2, [pc, #64]	; (80048a4 <HAL_TIM_MspPostInit+0x6c>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	6313      	str	r3, [r2, #48]	; 0x30
 800486a:	4b0e      	ldr	r3, [pc, #56]	; (80048a4 <HAL_TIM_MspPostInit+0x6c>)
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004876:	f44f 7380 	mov.w	r3, #256	; 0x100
 800487a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487c:	2302      	movs	r3, #2
 800487e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004884:	2300      	movs	r3, #0
 8004886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004888:	2301      	movs	r3, #1
 800488a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800488c:	f107 030c 	add.w	r3, r7, #12
 8004890:	4619      	mov	r1, r3
 8004892:	4805      	ldr	r0, [pc, #20]	; (80048a8 <HAL_TIM_MspPostInit+0x70>)
 8004894:	f000 ff16 	bl	80056c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004898:	bf00      	nop
 800489a:	3720      	adds	r7, #32
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40023800 	.word	0x40023800
 80048a8:	40020000 	.word	0x40020000

080048ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	; 0x28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b4:	f107 0314 	add.w	r3, r7, #20
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a4b      	ldr	r2, [pc, #300]	; (80049f8 <HAL_UART_MspInit+0x14c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	f040 8090 	bne.w	80049f0 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80048d0:	2300      	movs	r3, #0
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	4b49      	ldr	r3, [pc, #292]	; (80049fc <HAL_UART_MspInit+0x150>)
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	4a48      	ldr	r2, [pc, #288]	; (80049fc <HAL_UART_MspInit+0x150>)
 80048da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048de:	6413      	str	r3, [r2, #64]	; 0x40
 80048e0:	4b46      	ldr	r3, [pc, #280]	; (80049fc <HAL_UART_MspInit+0x150>)
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	4b42      	ldr	r3, [pc, #264]	; (80049fc <HAL_UART_MspInit+0x150>)
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	4a41      	ldr	r2, [pc, #260]	; (80049fc <HAL_UART_MspInit+0x150>)
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	6313      	str	r3, [r2, #48]	; 0x30
 80048fc:	4b3f      	ldr	r3, [pc, #252]	; (80049fc <HAL_UART_MspInit+0x150>)
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004908:	230c      	movs	r3, #12
 800490a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800490c:	2302      	movs	r3, #2
 800490e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004910:	2300      	movs	r3, #0
 8004912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004914:	2303      	movs	r3, #3
 8004916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004918:	2307      	movs	r3, #7
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800491c:	f107 0314 	add.w	r3, r7, #20
 8004920:	4619      	mov	r1, r3
 8004922:	4837      	ldr	r0, [pc, #220]	; (8004a00 <HAL_UART_MspInit+0x154>)
 8004924:	f000 fece 	bl	80056c4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004928:	4b36      	ldr	r3, [pc, #216]	; (8004a04 <HAL_UART_MspInit+0x158>)
 800492a:	4a37      	ldr	r2, [pc, #220]	; (8004a08 <HAL_UART_MspInit+0x15c>)
 800492c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800492e:	4b35      	ldr	r3, [pc, #212]	; (8004a04 <HAL_UART_MspInit+0x158>)
 8004930:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004934:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004936:	4b33      	ldr	r3, [pc, #204]	; (8004a04 <HAL_UART_MspInit+0x158>)
 8004938:	2200      	movs	r2, #0
 800493a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800493c:	4b31      	ldr	r3, [pc, #196]	; (8004a04 <HAL_UART_MspInit+0x158>)
 800493e:	2200      	movs	r2, #0
 8004940:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004942:	4b30      	ldr	r3, [pc, #192]	; (8004a04 <HAL_UART_MspInit+0x158>)
 8004944:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004948:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800494a:	4b2e      	ldr	r3, [pc, #184]	; (8004a04 <HAL_UART_MspInit+0x158>)
 800494c:	2200      	movs	r2, #0
 800494e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004950:	4b2c      	ldr	r3, [pc, #176]	; (8004a04 <HAL_UART_MspInit+0x158>)
 8004952:	2200      	movs	r2, #0
 8004954:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004956:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <HAL_UART_MspInit+0x158>)
 8004958:	2200      	movs	r2, #0
 800495a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800495c:	4b29      	ldr	r3, [pc, #164]	; (8004a04 <HAL_UART_MspInit+0x158>)
 800495e:	2200      	movs	r2, #0
 8004960:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004962:	4b28      	ldr	r3, [pc, #160]	; (8004a04 <HAL_UART_MspInit+0x158>)
 8004964:	2200      	movs	r2, #0
 8004966:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004968:	4826      	ldr	r0, [pc, #152]	; (8004a04 <HAL_UART_MspInit+0x158>)
 800496a:	f000 fa9b 	bl	8004ea4 <HAL_DMA_Init>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004974:	f7ff fe26 	bl	80045c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a22      	ldr	r2, [pc, #136]	; (8004a04 <HAL_UART_MspInit+0x158>)
 800497c:	639a      	str	r2, [r3, #56]	; 0x38
 800497e:	4a21      	ldr	r2, [pc, #132]	; (8004a04 <HAL_UART_MspInit+0x158>)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004984:	4b21      	ldr	r3, [pc, #132]	; (8004a0c <HAL_UART_MspInit+0x160>)
 8004986:	4a22      	ldr	r2, [pc, #136]	; (8004a10 <HAL_UART_MspInit+0x164>)
 8004988:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800498a:	4b20      	ldr	r3, [pc, #128]	; (8004a0c <HAL_UART_MspInit+0x160>)
 800498c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004990:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004992:	4b1e      	ldr	r3, [pc, #120]	; (8004a0c <HAL_UART_MspInit+0x160>)
 8004994:	2240      	movs	r2, #64	; 0x40
 8004996:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004998:	4b1c      	ldr	r3, [pc, #112]	; (8004a0c <HAL_UART_MspInit+0x160>)
 800499a:	2200      	movs	r2, #0
 800499c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800499e:	4b1b      	ldr	r3, [pc, #108]	; (8004a0c <HAL_UART_MspInit+0x160>)
 80049a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049a6:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <HAL_UART_MspInit+0x160>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049ac:	4b17      	ldr	r3, [pc, #92]	; (8004a0c <HAL_UART_MspInit+0x160>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80049b2:	4b16      	ldr	r3, [pc, #88]	; (8004a0c <HAL_UART_MspInit+0x160>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80049b8:	4b14      	ldr	r3, [pc, #80]	; (8004a0c <HAL_UART_MspInit+0x160>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049be:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <HAL_UART_MspInit+0x160>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80049c4:	4811      	ldr	r0, [pc, #68]	; (8004a0c <HAL_UART_MspInit+0x160>)
 80049c6:	f000 fa6d 	bl	8004ea4 <HAL_DMA_Init>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80049d0:	f7ff fdf8 	bl	80045c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a0d      	ldr	r2, [pc, #52]	; (8004a0c <HAL_UART_MspInit+0x160>)
 80049d8:	635a      	str	r2, [r3, #52]	; 0x34
 80049da:	4a0c      	ldr	r2, [pc, #48]	; (8004a0c <HAL_UART_MspInit+0x160>)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80049e0:	2200      	movs	r2, #0
 80049e2:	2100      	movs	r1, #0
 80049e4:	2026      	movs	r0, #38	; 0x26
 80049e6:	f000 fa26 	bl	8004e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80049ea:	2026      	movs	r0, #38	; 0x26
 80049ec:	f000 fa3f 	bl	8004e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80049f0:	bf00      	nop
 80049f2:	3728      	adds	r7, #40	; 0x28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40004400 	.word	0x40004400
 80049fc:	40023800 	.word	0x40023800
 8004a00:	40020000 	.word	0x40020000
 8004a04:	200005a4 	.word	0x200005a4
 8004a08:	40026088 	.word	0x40026088
 8004a0c:	20000604 	.word	0x20000604
 8004a10:	400260a0 	.word	0x400260a0

08004a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a18:	e7fe      	b.n	8004a18 <NMI_Handler+0x4>

08004a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a1e:	e7fe      	b.n	8004a1e <HardFault_Handler+0x4>

08004a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a24:	e7fe      	b.n	8004a24 <MemManage_Handler+0x4>

08004a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a26:	b480      	push	{r7}
 8004a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a2a:	e7fe      	b.n	8004a2a <BusFault_Handler+0x4>

08004a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a30:	e7fe      	b.n	8004a30 <UsageFault_Handler+0x4>

08004a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a32:	b480      	push	{r7}
 8004a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a36:	bf00      	nop
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a44:	bf00      	nop
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a52:	bf00      	nop
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a60:	f000 f8ee 	bl	8004c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a64:	bf00      	nop
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004a6c:	4802      	ldr	r0, [pc, #8]	; (8004a78 <DMA1_Stream5_IRQHandler+0x10>)
 8004a6e:	f000 fbb1 	bl	80051d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004a72:	bf00      	nop
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	200005a4 	.word	0x200005a4

08004a7c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004a80:	4802      	ldr	r0, [pc, #8]	; (8004a8c <DMA1_Stream6_IRQHandler+0x10>)
 8004a82:	f000 fba7 	bl	80051d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000604 	.word	0x20000604

08004a90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Emer_Pin);
 8004a94:	2020      	movs	r0, #32
 8004a96:	f000 ffe5 	bl	8005a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004aa4:	4803      	ldr	r0, [pc, #12]	; (8004ab4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004aa6:	f003 ff15 	bl	80088d4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004aaa:	4803      	ldr	r0, [pc, #12]	; (8004ab8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004aac:	f003 ff12 	bl	80088d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004ab0:	bf00      	nop
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000440 	.word	0x20000440
 8004ab8:	20000518 	.word	0x20000518

08004abc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004ac0:	4802      	ldr	r0, [pc, #8]	; (8004acc <I2C1_EV_IRQHandler+0x10>)
 8004ac2:	f001 fa7f 	bl	8005fc4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004ac6:	bf00      	nop
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	200003ec 	.word	0x200003ec

08004ad0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004ad4:	4802      	ldr	r0, [pc, #8]	; (8004ae0 <I2C1_ER_IRQHandler+0x10>)
 8004ad6:	f001 fbe6 	bl	80062a6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004ada:	bf00      	nop
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	200003ec 	.word	0x200003ec

08004ae4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ae8:	4802      	ldr	r0, [pc, #8]	; (8004af4 <USART2_IRQHandler+0x10>)
 8004aea:	f004 fe7f 	bl	80097ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004aee:	bf00      	nop
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000560 	.word	0x20000560

08004af8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Proxi_Pin);
 8004afc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004b00:	f000 ffb0 	bl	8005a64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004b04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004b08:	f000 ffac 	bl	8005a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004b0c:	bf00      	nop
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004b14:	4802      	ldr	r0, [pc, #8]	; (8004b20 <TIM5_IRQHandler+0x10>)
 8004b16:	f003 fedd 	bl	80088d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004b1a:	bf00      	nop
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	200004d0 	.word	0x200004d0

08004b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <SystemInit+0x20>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2e:	4a05      	ldr	r2, [pc, #20]	; (8004b44 <SystemInit+0x20>)
 8004b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b38:	bf00      	nop
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	e000ed00 	.word	0xe000ed00

08004b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b4c:	480d      	ldr	r0, [pc, #52]	; (8004b84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004b4e:	490e      	ldr	r1, [pc, #56]	; (8004b88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004b50:	4a0e      	ldr	r2, [pc, #56]	; (8004b8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b54:	e002      	b.n	8004b5c <LoopCopyDataInit>

08004b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b5a:	3304      	adds	r3, #4

08004b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b60:	d3f9      	bcc.n	8004b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b62:	4a0b      	ldr	r2, [pc, #44]	; (8004b90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004b64:	4c0b      	ldr	r4, [pc, #44]	; (8004b94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b68:	e001      	b.n	8004b6e <LoopFillZerobss>

08004b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b6c:	3204      	adds	r2, #4

08004b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b70:	d3fb      	bcc.n	8004b6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b72:	f7ff ffd7 	bl	8004b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b76:	f006 f9fb 	bl	800af70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b7a:	f7fd fc87 	bl	800248c <main>
  bx  lr    
 8004b7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004b80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b88:	200003c4 	.word	0x200003c4
  ldr r2, =_sidata
 8004b8c:	0800b02c 	.word	0x0800b02c
  ldr r2, =_sbss
 8004b90:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 8004b94:	20000aa4 	.word	0x20000aa4

08004b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b98:	e7fe      	b.n	8004b98 <ADC_IRQHandler>
	...

08004b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ba0:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <HAL_Init+0x40>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a0d      	ldr	r2, [pc, #52]	; (8004bdc <HAL_Init+0x40>)
 8004ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004baa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004bac:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <HAL_Init+0x40>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <HAL_Init+0x40>)
 8004bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bb8:	4b08      	ldr	r3, [pc, #32]	; (8004bdc <HAL_Init+0x40>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a07      	ldr	r2, [pc, #28]	; (8004bdc <HAL_Init+0x40>)
 8004bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bc4:	2003      	movs	r0, #3
 8004bc6:	f000 f92b 	bl	8004e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bca:	2000      	movs	r0, #0
 8004bcc:	f000 f808 	bl	8004be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bd0:	f7ff fcfe 	bl	80045d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40023c00 	.word	0x40023c00

08004be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004be8:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <HAL_InitTick+0x54>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <HAL_InitTick+0x58>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 f943 	bl	8004e8a <HAL_SYSTICK_Config>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e00e      	b.n	8004c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b0f      	cmp	r3, #15
 8004c12:	d80a      	bhi.n	8004c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c14:	2200      	movs	r2, #0
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	f000 f90b 	bl	8004e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c20:	4a06      	ldr	r2, [pc, #24]	; (8004c3c <HAL_InitTick+0x5c>)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e000      	b.n	8004c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	200003b8 	.word	0x200003b8
 8004c38:	200003c0 	.word	0x200003c0
 8004c3c:	200003bc 	.word	0x200003bc

08004c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <HAL_IncTick+0x20>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <HAL_IncTick+0x24>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4413      	add	r3, r2
 8004c50:	4a04      	ldr	r2, [pc, #16]	; (8004c64 <HAL_IncTick+0x24>)
 8004c52:	6013      	str	r3, [r2, #0]
}
 8004c54:	bf00      	nop
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	200003c0 	.word	0x200003c0
 8004c64:	20000aa0 	.word	0x20000aa0

08004c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c6c:	4b03      	ldr	r3, [pc, #12]	; (8004c7c <HAL_GetTick+0x14>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	20000aa0 	.word	0x20000aa0

08004c80 <__NVIC_SetPriorityGrouping>:
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c90:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cb2:	4a04      	ldr	r2, [pc, #16]	; (8004cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	60d3      	str	r3, [r2, #12]
}
 8004cb8:	bf00      	nop
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	e000ed00 	.word	0xe000ed00

08004cc8 <__NVIC_GetPriorityGrouping>:
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ccc:	4b04      	ldr	r3, [pc, #16]	; (8004ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	0a1b      	lsrs	r3, r3, #8
 8004cd2:	f003 0307 	and.w	r3, r3, #7
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	e000ed00 	.word	0xe000ed00

08004ce4 <__NVIC_EnableIRQ>:
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	4603      	mov	r3, r0
 8004cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	db0b      	blt.n	8004d0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	f003 021f 	and.w	r2, r3, #31
 8004cfc:	4907      	ldr	r1, [pc, #28]	; (8004d1c <__NVIC_EnableIRQ+0x38>)
 8004cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	2001      	movs	r0, #1
 8004d06:	fa00 f202 	lsl.w	r2, r0, r2
 8004d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	e000e100 	.word	0xe000e100

08004d20 <__NVIC_SetPriority>:
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	6039      	str	r1, [r7, #0]
 8004d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	db0a      	blt.n	8004d4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	490c      	ldr	r1, [pc, #48]	; (8004d6c <__NVIC_SetPriority+0x4c>)
 8004d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3e:	0112      	lsls	r2, r2, #4
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	440b      	add	r3, r1
 8004d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d48:	e00a      	b.n	8004d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	4908      	ldr	r1, [pc, #32]	; (8004d70 <__NVIC_SetPriority+0x50>)
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	3b04      	subs	r3, #4
 8004d58:	0112      	lsls	r2, r2, #4
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	761a      	strb	r2, [r3, #24]
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	e000e100 	.word	0xe000e100
 8004d70:	e000ed00 	.word	0xe000ed00

08004d74 <NVIC_EncodePriority>:
{
 8004d74:	b480      	push	{r7}
 8004d76:	b089      	sub	sp, #36	; 0x24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f1c3 0307 	rsb	r3, r3, #7
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	bf28      	it	cs
 8004d92:	2304      	movcs	r3, #4
 8004d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	2b06      	cmp	r3, #6
 8004d9c:	d902      	bls.n	8004da4 <NVIC_EncodePriority+0x30>
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	3b03      	subs	r3, #3
 8004da2:	e000      	b.n	8004da6 <NVIC_EncodePriority+0x32>
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004da8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43da      	mvns	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	401a      	ands	r2, r3
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc6:	43d9      	mvns	r1, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dcc:	4313      	orrs	r3, r2
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3724      	adds	r7, #36	; 0x24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dec:	d301      	bcc.n	8004df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004dee:	2301      	movs	r3, #1
 8004df0:	e00f      	b.n	8004e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004df2:	4a0a      	ldr	r2, [pc, #40]	; (8004e1c <SysTick_Config+0x40>)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004dfa:	210f      	movs	r1, #15
 8004dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004e00:	f7ff ff8e 	bl	8004d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e04:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <SysTick_Config+0x40>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e0a:	4b04      	ldr	r3, [pc, #16]	; (8004e1c <SysTick_Config+0x40>)
 8004e0c:	2207      	movs	r2, #7
 8004e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	e000e010 	.word	0xe000e010

08004e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7ff ff29 	bl	8004c80 <__NVIC_SetPriorityGrouping>
}
 8004e2e:	bf00      	nop
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b086      	sub	sp, #24
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e48:	f7ff ff3e 	bl	8004cc8 <__NVIC_GetPriorityGrouping>
 8004e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68b9      	ldr	r1, [r7, #8]
 8004e52:	6978      	ldr	r0, [r7, #20]
 8004e54:	f7ff ff8e 	bl	8004d74 <NVIC_EncodePriority>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e5e:	4611      	mov	r1, r2
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff ff5d 	bl	8004d20 <__NVIC_SetPriority>
}
 8004e66:	bf00      	nop
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b082      	sub	sp, #8
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	4603      	mov	r3, r0
 8004e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff ff31 	bl	8004ce4 <__NVIC_EnableIRQ>
}
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff ffa2 	bl	8004ddc <SysTick_Config>
 8004e98:	4603      	mov	r3, r0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004eb0:	f7ff feda 	bl	8004c68 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e099      	b.n	8004ff4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0201 	bic.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ee0:	e00f      	b.n	8004f02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ee2:	f7ff fec1 	bl	8004c68 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b05      	cmp	r3, #5
 8004eee:	d908      	bls.n	8004f02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2203      	movs	r2, #3
 8004efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e078      	b.n	8004ff4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e8      	bne.n	8004ee2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4b38      	ldr	r3, [pc, #224]	; (8004ffc <HAL_DMA_Init+0x158>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d107      	bne.n	8004f6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f64:	4313      	orrs	r3, r2
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f023 0307 	bic.w	r3, r3, #7
 8004f82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d117      	bne.n	8004fc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00e      	beq.n	8004fc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fb0f 	bl	80055cc <DMA_CheckFifoParam>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2240      	movs	r2, #64	; 0x40
 8004fb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e016      	b.n	8004ff4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fac6 	bl	8005560 <DMA_CalcBaseAndBitshift>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fdc:	223f      	movs	r2, #63	; 0x3f
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	f010803f 	.word	0xf010803f

08005000 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005016:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_DMA_Start_IT+0x26>
 8005022:	2302      	movs	r3, #2
 8005024:	e040      	b.n	80050a8 <HAL_DMA_Start_IT+0xa8>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b01      	cmp	r3, #1
 8005038:	d12f      	bne.n	800509a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2202      	movs	r2, #2
 800503e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 fa58 	bl	8005504 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005058:	223f      	movs	r2, #63	; 0x3f
 800505a:	409a      	lsls	r2, r3
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0216 	orr.w	r2, r2, #22
 800506e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	d007      	beq.n	8005088 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0208 	orr.w	r2, r2, #8
 8005086:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	e005      	b.n	80050a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80050a2:	2302      	movs	r3, #2
 80050a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80050a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80050be:	f7ff fdd3 	bl	8004c68 <HAL_GetTick>
 80050c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d008      	beq.n	80050e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2280      	movs	r2, #128	; 0x80
 80050d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e052      	b.n	8005188 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0216 	bic.w	r2, r2, #22
 80050f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	695a      	ldr	r2, [r3, #20]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005100:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <HAL_DMA_Abort+0x62>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0208 	bic.w	r2, r2, #8
 8005120:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0201 	bic.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005132:	e013      	b.n	800515c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005134:	f7ff fd98 	bl	8004c68 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b05      	cmp	r3, #5
 8005140:	d90c      	bls.n	800515c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2220      	movs	r2, #32
 8005146:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2203      	movs	r2, #3
 800514c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e015      	b.n	8005188 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e4      	bne.n	8005134 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516e:	223f      	movs	r2, #63	; 0x3f
 8005170:	409a      	lsls	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d004      	beq.n	80051ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2280      	movs	r2, #128	; 0x80
 80051a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e00c      	b.n	80051c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2205      	movs	r2, #5
 80051b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0201 	bic.w	r2, r2, #1
 80051c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80051e0:	4b8e      	ldr	r3, [pc, #568]	; (800541c <HAL_DMA_IRQHandler+0x248>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a8e      	ldr	r2, [pc, #568]	; (8005420 <HAL_DMA_IRQHandler+0x24c>)
 80051e6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ea:	0a9b      	lsrs	r3, r3, #10
 80051ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fe:	2208      	movs	r2, #8
 8005200:	409a      	lsls	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4013      	ands	r3, r2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01a      	beq.n	8005240 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d013      	beq.n	8005240 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0204 	bic.w	r2, r2, #4
 8005226:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522c:	2208      	movs	r2, #8
 800522e:	409a      	lsls	r2, r3
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005238:	f043 0201 	orr.w	r2, r3, #1
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005244:	2201      	movs	r2, #1
 8005246:	409a      	lsls	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4013      	ands	r3, r2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d012      	beq.n	8005276 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00b      	beq.n	8005276 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005262:	2201      	movs	r2, #1
 8005264:	409a      	lsls	r2, r3
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526e:	f043 0202 	orr.w	r2, r3, #2
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800527a:	2204      	movs	r2, #4
 800527c:	409a      	lsls	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4013      	ands	r3, r2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d012      	beq.n	80052ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00b      	beq.n	80052ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005298:	2204      	movs	r2, #4
 800529a:	409a      	lsls	r2, r3
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a4:	f043 0204 	orr.w	r2, r3, #4
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b0:	2210      	movs	r2, #16
 80052b2:	409a      	lsls	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4013      	ands	r3, r2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d043      	beq.n	8005344 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d03c      	beq.n	8005344 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ce:	2210      	movs	r2, #16
 80052d0:	409a      	lsls	r2, r3
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d018      	beq.n	8005316 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d108      	bne.n	8005304 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d024      	beq.n	8005344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	4798      	blx	r3
 8005302:	e01f      	b.n	8005344 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01b      	beq.n	8005344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	4798      	blx	r3
 8005314:	e016      	b.n	8005344 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d107      	bne.n	8005334 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0208 	bic.w	r2, r2, #8
 8005332:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005348:	2220      	movs	r2, #32
 800534a:	409a      	lsls	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4013      	ands	r3, r2
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 808f 	beq.w	8005474 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0310 	and.w	r3, r3, #16
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 8087 	beq.w	8005474 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536a:	2220      	movs	r2, #32
 800536c:	409a      	lsls	r2, r3
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b05      	cmp	r3, #5
 800537c:	d136      	bne.n	80053ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0216 	bic.w	r2, r2, #22
 800538c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695a      	ldr	r2, [r3, #20]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800539c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d103      	bne.n	80053ae <HAL_DMA_IRQHandler+0x1da>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d007      	beq.n	80053be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0208 	bic.w	r2, r2, #8
 80053bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c2:	223f      	movs	r2, #63	; 0x3f
 80053c4:	409a      	lsls	r2, r3
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d07e      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	4798      	blx	r3
        }
        return;
 80053ea:	e079      	b.n	80054e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01d      	beq.n	8005436 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10d      	bne.n	8005424 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540c:	2b00      	cmp	r3, #0
 800540e:	d031      	beq.n	8005474 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	4798      	blx	r3
 8005418:	e02c      	b.n	8005474 <HAL_DMA_IRQHandler+0x2a0>
 800541a:	bf00      	nop
 800541c:	200003b8 	.word	0x200003b8
 8005420:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005428:	2b00      	cmp	r3, #0
 800542a:	d023      	beq.n	8005474 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	4798      	blx	r3
 8005434:	e01e      	b.n	8005474 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10f      	bne.n	8005464 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0210 	bic.w	r2, r2, #16
 8005452:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005478:	2b00      	cmp	r3, #0
 800547a:	d032      	beq.n	80054e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	d022      	beq.n	80054ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2205      	movs	r2, #5
 800548c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0201 	bic.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	3301      	adds	r3, #1
 80054a4:	60bb      	str	r3, [r7, #8]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d307      	bcc.n	80054bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f2      	bne.n	80054a0 <HAL_DMA_IRQHandler+0x2cc>
 80054ba:	e000      	b.n	80054be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80054bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	4798      	blx	r3
 80054de:	e000      	b.n	80054e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80054e0:	bf00      	nop
    }
  }
}
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054f6:	b2db      	uxtb	r3, r3
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005520:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	d108      	bne.n	8005544 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005542:	e007      	b.n	8005554 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	60da      	str	r2, [r3, #12]
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	b2db      	uxtb	r3, r3
 800556e:	3b10      	subs	r3, #16
 8005570:	4a14      	ldr	r2, [pc, #80]	; (80055c4 <DMA_CalcBaseAndBitshift+0x64>)
 8005572:	fba2 2303 	umull	r2, r3, r2, r3
 8005576:	091b      	lsrs	r3, r3, #4
 8005578:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800557a:	4a13      	ldr	r2, [pc, #76]	; (80055c8 <DMA_CalcBaseAndBitshift+0x68>)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b03      	cmp	r3, #3
 800558c:	d909      	bls.n	80055a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005596:	f023 0303 	bic.w	r3, r3, #3
 800559a:	1d1a      	adds	r2, r3, #4
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	659a      	str	r2, [r3, #88]	; 0x58
 80055a0:	e007      	b.n	80055b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80055aa:	f023 0303 	bic.w	r3, r3, #3
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	aaaaaaab 	.word	0xaaaaaaab
 80055c8:	0800b014 	.word	0x0800b014

080055cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d11f      	bne.n	8005626 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d856      	bhi.n	800569a <DMA_CheckFifoParam+0xce>
 80055ec:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <DMA_CheckFifoParam+0x28>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	08005605 	.word	0x08005605
 80055f8:	08005617 	.word	0x08005617
 80055fc:	08005605 	.word	0x08005605
 8005600:	0800569b 	.word	0x0800569b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d046      	beq.n	800569e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005614:	e043      	b.n	800569e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800561e:	d140      	bne.n	80056a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005624:	e03d      	b.n	80056a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800562e:	d121      	bne.n	8005674 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b03      	cmp	r3, #3
 8005634:	d837      	bhi.n	80056a6 <DMA_CheckFifoParam+0xda>
 8005636:	a201      	add	r2, pc, #4	; (adr r2, 800563c <DMA_CheckFifoParam+0x70>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	0800564d 	.word	0x0800564d
 8005640:	08005653 	.word	0x08005653
 8005644:	0800564d 	.word	0x0800564d
 8005648:	08005665 	.word	0x08005665
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]
      break;
 8005650:	e030      	b.n	80056b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d025      	beq.n	80056aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005662:	e022      	b.n	80056aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800566c:	d11f      	bne.n	80056ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005672:	e01c      	b.n	80056ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d903      	bls.n	8005682 <DMA_CheckFifoParam+0xb6>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d003      	beq.n	8005688 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005680:	e018      	b.n	80056b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	73fb      	strb	r3, [r7, #15]
      break;
 8005686:	e015      	b.n	80056b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00e      	beq.n	80056b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	73fb      	strb	r3, [r7, #15]
      break;
 8005698:	e00b      	b.n	80056b2 <DMA_CheckFifoParam+0xe6>
      break;
 800569a:	bf00      	nop
 800569c:	e00a      	b.n	80056b4 <DMA_CheckFifoParam+0xe8>
      break;
 800569e:	bf00      	nop
 80056a0:	e008      	b.n	80056b4 <DMA_CheckFifoParam+0xe8>
      break;
 80056a2:	bf00      	nop
 80056a4:	e006      	b.n	80056b4 <DMA_CheckFifoParam+0xe8>
      break;
 80056a6:	bf00      	nop
 80056a8:	e004      	b.n	80056b4 <DMA_CheckFifoParam+0xe8>
      break;
 80056aa:	bf00      	nop
 80056ac:	e002      	b.n	80056b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80056ae:	bf00      	nop
 80056b0:	e000      	b.n	80056b4 <DMA_CheckFifoParam+0xe8>
      break;
 80056b2:	bf00      	nop
    }
  } 
  
  return status; 
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop

080056c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b089      	sub	sp, #36	; 0x24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
 80056de:	e159      	b.n	8005994 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056e0:	2201      	movs	r2, #1
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4013      	ands	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	f040 8148 	bne.w	800598e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	2b01      	cmp	r3, #1
 8005708:	d005      	beq.n	8005716 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005712:	2b02      	cmp	r3, #2
 8005714:	d130      	bne.n	8005778 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	2203      	movs	r2, #3
 8005722:	fa02 f303 	lsl.w	r3, r2, r3
 8005726:	43db      	mvns	r3, r3
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	4013      	ands	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	4313      	orrs	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800574c:	2201      	movs	r2, #1
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	43db      	mvns	r3, r3
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	4013      	ands	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	091b      	lsrs	r3, r3, #4
 8005762:	f003 0201 	and.w	r2, r3, #1
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	4313      	orrs	r3, r2
 8005770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f003 0303 	and.w	r3, r3, #3
 8005780:	2b03      	cmp	r3, #3
 8005782:	d017      	beq.n	80057b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	2203      	movs	r2, #3
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	43db      	mvns	r3, r3
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	4013      	ands	r3, r2
 800579a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f003 0303 	and.w	r3, r3, #3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d123      	bne.n	8005808 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	08da      	lsrs	r2, r3, #3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3208      	adds	r2, #8
 80057c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	220f      	movs	r2, #15
 80057d8:	fa02 f303 	lsl.w	r3, r2, r3
 80057dc:	43db      	mvns	r3, r3
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	4013      	ands	r3, r2
 80057e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	fa02 f303 	lsl.w	r3, r2, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	08da      	lsrs	r2, r3, #3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3208      	adds	r2, #8
 8005802:	69b9      	ldr	r1, [r7, #24]
 8005804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	2203      	movs	r2, #3
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f003 0203 	and.w	r2, r3, #3
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	4313      	orrs	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 80a2 	beq.w	800598e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	4b57      	ldr	r3, [pc, #348]	; (80059ac <HAL_GPIO_Init+0x2e8>)
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	4a56      	ldr	r2, [pc, #344]	; (80059ac <HAL_GPIO_Init+0x2e8>)
 8005854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005858:	6453      	str	r3, [r2, #68]	; 0x44
 800585a:	4b54      	ldr	r3, [pc, #336]	; (80059ac <HAL_GPIO_Init+0x2e8>)
 800585c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005866:	4a52      	ldr	r2, [pc, #328]	; (80059b0 <HAL_GPIO_Init+0x2ec>)
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	089b      	lsrs	r3, r3, #2
 800586c:	3302      	adds	r3, #2
 800586e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	220f      	movs	r2, #15
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	43db      	mvns	r3, r3
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	4013      	ands	r3, r2
 8005888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a49      	ldr	r2, [pc, #292]	; (80059b4 <HAL_GPIO_Init+0x2f0>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d019      	beq.n	80058c6 <HAL_GPIO_Init+0x202>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a48      	ldr	r2, [pc, #288]	; (80059b8 <HAL_GPIO_Init+0x2f4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d013      	beq.n	80058c2 <HAL_GPIO_Init+0x1fe>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a47      	ldr	r2, [pc, #284]	; (80059bc <HAL_GPIO_Init+0x2f8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00d      	beq.n	80058be <HAL_GPIO_Init+0x1fa>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a46      	ldr	r2, [pc, #280]	; (80059c0 <HAL_GPIO_Init+0x2fc>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d007      	beq.n	80058ba <HAL_GPIO_Init+0x1f6>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a45      	ldr	r2, [pc, #276]	; (80059c4 <HAL_GPIO_Init+0x300>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d101      	bne.n	80058b6 <HAL_GPIO_Init+0x1f2>
 80058b2:	2304      	movs	r3, #4
 80058b4:	e008      	b.n	80058c8 <HAL_GPIO_Init+0x204>
 80058b6:	2307      	movs	r3, #7
 80058b8:	e006      	b.n	80058c8 <HAL_GPIO_Init+0x204>
 80058ba:	2303      	movs	r3, #3
 80058bc:	e004      	b.n	80058c8 <HAL_GPIO_Init+0x204>
 80058be:	2302      	movs	r3, #2
 80058c0:	e002      	b.n	80058c8 <HAL_GPIO_Init+0x204>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <HAL_GPIO_Init+0x204>
 80058c6:	2300      	movs	r3, #0
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	f002 0203 	and.w	r2, r2, #3
 80058ce:	0092      	lsls	r2, r2, #2
 80058d0:	4093      	lsls	r3, r2
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058d8:	4935      	ldr	r1, [pc, #212]	; (80059b0 <HAL_GPIO_Init+0x2ec>)
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	089b      	lsrs	r3, r3, #2
 80058de:	3302      	adds	r3, #2
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058e6:	4b38      	ldr	r3, [pc, #224]	; (80059c8 <HAL_GPIO_Init+0x304>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	43db      	mvns	r3, r3
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	4013      	ands	r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800590a:	4a2f      	ldr	r2, [pc, #188]	; (80059c8 <HAL_GPIO_Init+0x304>)
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005910:	4b2d      	ldr	r3, [pc, #180]	; (80059c8 <HAL_GPIO_Init+0x304>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	43db      	mvns	r3, r3
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4013      	ands	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	4313      	orrs	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005934:	4a24      	ldr	r2, [pc, #144]	; (80059c8 <HAL_GPIO_Init+0x304>)
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800593a:	4b23      	ldr	r3, [pc, #140]	; (80059c8 <HAL_GPIO_Init+0x304>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	43db      	mvns	r3, r3
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	4013      	ands	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800595e:	4a1a      	ldr	r2, [pc, #104]	; (80059c8 <HAL_GPIO_Init+0x304>)
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005964:	4b18      	ldr	r3, [pc, #96]	; (80059c8 <HAL_GPIO_Init+0x304>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	43db      	mvns	r3, r3
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	4013      	ands	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005988:	4a0f      	ldr	r2, [pc, #60]	; (80059c8 <HAL_GPIO_Init+0x304>)
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	3301      	adds	r3, #1
 8005992:	61fb      	str	r3, [r7, #28]
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	2b0f      	cmp	r3, #15
 8005998:	f67f aea2 	bls.w	80056e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800599c:	bf00      	nop
 800599e:	bf00      	nop
 80059a0:	3724      	adds	r7, #36	; 0x24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	40023800 	.word	0x40023800
 80059b0:	40013800 	.word	0x40013800
 80059b4:	40020000 	.word	0x40020000
 80059b8:	40020400 	.word	0x40020400
 80059bc:	40020800 	.word	0x40020800
 80059c0:	40020c00 	.word	0x40020c00
 80059c4:	40021000 	.word	0x40021000
 80059c8:	40013c00 	.word	0x40013c00

080059cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	887b      	ldrh	r3, [r7, #2]
 80059de:	4013      	ands	r3, r2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059e4:	2301      	movs	r3, #1
 80059e6:	73fb      	strb	r3, [r7, #15]
 80059e8:	e001      	b.n	80059ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059ea:	2300      	movs	r3, #0
 80059ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	807b      	strh	r3, [r7, #2]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a0c:	787b      	ldrb	r3, [r7, #1]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a12:	887a      	ldrh	r2, [r7, #2]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a18:	e003      	b.n	8005a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a1a:	887b      	ldrh	r3, [r7, #2]
 8005a1c:	041a      	lsls	r2, r3, #16
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	619a      	str	r2, [r3, #24]
}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	460b      	mov	r3, r1
 8005a38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a40:	887a      	ldrh	r2, [r7, #2]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4013      	ands	r3, r2
 8005a46:	041a      	lsls	r2, r3, #16
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	43d9      	mvns	r1, r3
 8005a4c:	887b      	ldrh	r3, [r7, #2]
 8005a4e:	400b      	ands	r3, r1
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	619a      	str	r2, [r3, #24]
}
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
	...

08005a64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005a6e:	4b08      	ldr	r3, [pc, #32]	; (8005a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a70:	695a      	ldr	r2, [r3, #20]
 8005a72:	88fb      	ldrh	r3, [r7, #6]
 8005a74:	4013      	ands	r3, r2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d006      	beq.n	8005a88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a7a:	4a05      	ldr	r2, [pc, #20]	; (8005a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a7c:	88fb      	ldrh	r3, [r7, #6]
 8005a7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a80:	88fb      	ldrh	r3, [r7, #6]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe fb88 	bl	8004198 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a88:	bf00      	nop
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40013c00 	.word	0x40013c00

08005a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e12b      	b.n	8005cfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fe fdb0 	bl	8004620 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2224      	movs	r2, #36	; 0x24
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0201 	bic.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ae6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005af6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005af8:	f002 fbb0 	bl	800825c <HAL_RCC_GetPCLK1Freq>
 8005afc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	4a81      	ldr	r2, [pc, #516]	; (8005d08 <HAL_I2C_Init+0x274>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d807      	bhi.n	8005b18 <HAL_I2C_Init+0x84>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4a80      	ldr	r2, [pc, #512]	; (8005d0c <HAL_I2C_Init+0x278>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	bf94      	ite	ls
 8005b10:	2301      	movls	r3, #1
 8005b12:	2300      	movhi	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	e006      	b.n	8005b26 <HAL_I2C_Init+0x92>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4a7d      	ldr	r2, [pc, #500]	; (8005d10 <HAL_I2C_Init+0x27c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	bf94      	ite	ls
 8005b20:	2301      	movls	r3, #1
 8005b22:	2300      	movhi	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e0e7      	b.n	8005cfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4a78      	ldr	r2, [pc, #480]	; (8005d14 <HAL_I2C_Init+0x280>)
 8005b32:	fba2 2303 	umull	r2, r3, r2, r3
 8005b36:	0c9b      	lsrs	r3, r3, #18
 8005b38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	4a6a      	ldr	r2, [pc, #424]	; (8005d08 <HAL_I2C_Init+0x274>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d802      	bhi.n	8005b68 <HAL_I2C_Init+0xd4>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	3301      	adds	r3, #1
 8005b66:	e009      	b.n	8005b7c <HAL_I2C_Init+0xe8>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b6e:	fb02 f303 	mul.w	r3, r2, r3
 8005b72:	4a69      	ldr	r2, [pc, #420]	; (8005d18 <HAL_I2C_Init+0x284>)
 8005b74:	fba2 2303 	umull	r2, r3, r2, r3
 8005b78:	099b      	lsrs	r3, r3, #6
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6812      	ldr	r2, [r2, #0]
 8005b80:	430b      	orrs	r3, r1
 8005b82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	495c      	ldr	r1, [pc, #368]	; (8005d08 <HAL_I2C_Init+0x274>)
 8005b98:	428b      	cmp	r3, r1
 8005b9a:	d819      	bhi.n	8005bd0 <HAL_I2C_Init+0x13c>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	1e59      	subs	r1, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005baa:	1c59      	adds	r1, r3, #1
 8005bac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bb0:	400b      	ands	r3, r1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <HAL_I2C_Init+0x138>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	1e59      	subs	r1, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bca:	e051      	b.n	8005c70 <HAL_I2C_Init+0x1dc>
 8005bcc:	2304      	movs	r3, #4
 8005bce:	e04f      	b.n	8005c70 <HAL_I2C_Init+0x1dc>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d111      	bne.n	8005bfc <HAL_I2C_Init+0x168>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	1e58      	subs	r0, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6859      	ldr	r1, [r3, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	440b      	add	r3, r1
 8005be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bea:	3301      	adds	r3, #1
 8005bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	bf0c      	ite	eq
 8005bf4:	2301      	moveq	r3, #1
 8005bf6:	2300      	movne	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	e012      	b.n	8005c22 <HAL_I2C_Init+0x18e>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	1e58      	subs	r0, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6859      	ldr	r1, [r3, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	0099      	lsls	r1, r3, #2
 8005c0c:	440b      	add	r3, r1
 8005c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c12:	3301      	adds	r3, #1
 8005c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	bf0c      	ite	eq
 8005c1c:	2301      	moveq	r3, #1
 8005c1e:	2300      	movne	r3, #0
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_I2C_Init+0x196>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e022      	b.n	8005c70 <HAL_I2C_Init+0x1dc>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10e      	bne.n	8005c50 <HAL_I2C_Init+0x1bc>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	1e58      	subs	r0, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6859      	ldr	r1, [r3, #4]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	440b      	add	r3, r1
 8005c40:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c44:	3301      	adds	r3, #1
 8005c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4e:	e00f      	b.n	8005c70 <HAL_I2C_Init+0x1dc>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	1e58      	subs	r0, r3, #1
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6859      	ldr	r1, [r3, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	0099      	lsls	r1, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c66:	3301      	adds	r3, #1
 8005c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	6809      	ldr	r1, [r1, #0]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69da      	ldr	r2, [r3, #28]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	6911      	ldr	r1, [r2, #16]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	68d2      	ldr	r2, [r2, #12]
 8005caa:	4311      	orrs	r1, r2
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6812      	ldr	r2, [r2, #0]
 8005cb0:	430b      	orrs	r3, r1
 8005cb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695a      	ldr	r2, [r3, #20]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0201 	orr.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	000186a0 	.word	0x000186a0
 8005d0c:	001e847f 	.word	0x001e847f
 8005d10:	003d08ff 	.word	0x003d08ff
 8005d14:	431bde83 	.word	0x431bde83
 8005d18:	10624dd3 	.word	0x10624dd3

08005d1c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	607a      	str	r2, [r7, #4]
 8005d26:	461a      	mov	r2, r3
 8005d28:	460b      	mov	r3, r1
 8005d2a:	817b      	strh	r3, [r7, #10]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	f040 8085 	bne.w	8005e4c <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d42:	4b46      	ldr	r3, [pc, #280]	; (8005e5c <HAL_I2C_Master_Transmit_IT+0x140>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	08db      	lsrs	r3, r3, #3
 8005d48:	4a45      	ldr	r2, [pc, #276]	; (8005e60 <HAL_I2C_Master_Transmit_IT+0x144>)
 8005d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4e:	0a1a      	lsrs	r2, r3, #8
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	009a      	lsls	r2, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d116      	bne.n	8005d96 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	f043 0220 	orr.w	r2, r3, #32
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e05b      	b.n	8005e4e <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d0db      	beq.n	8005d5c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_I2C_Master_Transmit_IT+0x96>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e04d      	b.n	8005e4e <HAL_I2C_Master_Transmit_IT+0x132>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d007      	beq.n	8005dd8 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005de6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2221      	movs	r2, #33	; 0x21
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2210      	movs	r2, #16
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	893a      	ldrh	r2, [r7, #8]
 8005e08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4a13      	ldr	r2, [pc, #76]	; (8005e64 <HAL_I2C_Master_Transmit_IT+0x148>)
 8005e18:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005e1a:	897a      	ldrh	r2, [r7, #10]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005e36:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e46:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	e000      	b.n	8005e4e <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005e4c:	2302      	movs	r3, #2
  }
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	200003b8 	.word	0x200003b8
 8005e60:	14f8b589 	.word	0x14f8b589
 8005e64:	ffff0000 	.word	0xffff0000

08005e68 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	607a      	str	r2, [r7, #4]
 8005e72:	461a      	mov	r2, r3
 8005e74:	460b      	mov	r3, r1
 8005e76:	817b      	strh	r3, [r7, #10]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	f040 808d 	bne.w	8005fa8 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e8e:	4b4a      	ldr	r3, [pc, #296]	; (8005fb8 <HAL_I2C_Master_Receive_IT+0x150>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	08db      	lsrs	r3, r3, #3
 8005e94:	4a49      	ldr	r2, [pc, #292]	; (8005fbc <HAL_I2C_Master_Receive_IT+0x154>)
 8005e96:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9a:	0a1a      	lsrs	r2, r3, #8
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009a      	lsls	r2, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d116      	bne.n	8005ee2 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	f043 0220 	orr.w	r2, r3, #32
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e063      	b.n	8005faa <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d0db      	beq.n	8005ea8 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d101      	bne.n	8005efe <HAL_I2C_Master_Receive_IT+0x96>
 8005efa:	2302      	movs	r3, #2
 8005efc:	e055      	b.n	8005faa <HAL_I2C_Master_Receive_IT+0x142>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d007      	beq.n	8005f24 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2222      	movs	r2, #34	; 0x22
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2210      	movs	r2, #16
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	893a      	ldrh	r2, [r7, #8]
 8005f54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4a17      	ldr	r2, [pc, #92]	; (8005fc0 <HAL_I2C_Master_Receive_IT+0x158>)
 8005f64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005f66:	897a      	ldrh	r2, [r7, #10]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005f82:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f92:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fa2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e000      	b.n	8005faa <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8005fa8:	2302      	movs	r3, #2
  }
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	200003b8 	.word	0x200003b8
 8005fbc:	14f8b589 	.word	0x14f8b589
 8005fc0:	ffff0000 	.word	0xffff0000

08005fc4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fe4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	d003      	beq.n	8005ffc <HAL_I2C_EV_IRQHandler+0x38>
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	2b40      	cmp	r3, #64	; 0x40
 8005ff8:	f040 80c1 	bne.w	800617e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10d      	bne.n	8006032 <HAL_I2C_EV_IRQHandler+0x6e>
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800601c:	d003      	beq.n	8006026 <HAL_I2C_EV_IRQHandler+0x62>
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006024:	d101      	bne.n	800602a <HAL_I2C_EV_IRQHandler+0x66>
 8006026:	2301      	movs	r3, #1
 8006028:	e000      	b.n	800602c <HAL_I2C_EV_IRQHandler+0x68>
 800602a:	2300      	movs	r3, #0
 800602c:	2b01      	cmp	r3, #1
 800602e:	f000 8132 	beq.w	8006296 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00c      	beq.n	8006056 <HAL_I2C_EV_IRQHandler+0x92>
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	0a5b      	lsrs	r3, r3, #9
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d006      	beq.n	8006056 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 fc7b 	bl	8007944 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fd83 	bl	8006b5a <I2C_Master_SB>
 8006054:	e092      	b.n	800617c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	08db      	lsrs	r3, r3, #3
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d009      	beq.n	8006076 <HAL_I2C_EV_IRQHandler+0xb2>
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	0a5b      	lsrs	r3, r3, #9
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fdf9 	bl	8006c66 <I2C_Master_ADD10>
 8006074:	e082      	b.n	800617c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	085b      	lsrs	r3, r3, #1
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d009      	beq.n	8006096 <HAL_I2C_EV_IRQHandler+0xd2>
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	0a5b      	lsrs	r3, r3, #9
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fe13 	bl	8006cba <I2C_Master_ADDR>
 8006094:	e072      	b.n	800617c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	089b      	lsrs	r3, r3, #2
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d03b      	beq.n	800611a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060b0:	f000 80f3 	beq.w	800629a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	09db      	lsrs	r3, r3, #7
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00f      	beq.n	80060e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	0a9b      	lsrs	r3, r3, #10
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d009      	beq.n	80060e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	089b      	lsrs	r3, r3, #2
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d103      	bne.n	80060e0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f9f3 	bl	80064c4 <I2C_MasterTransmit_TXE>
 80060de:	e04d      	b.n	800617c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	089b      	lsrs	r3, r3, #2
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 80d6 	beq.w	800629a <HAL_I2C_EV_IRQHandler+0x2d6>
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	0a5b      	lsrs	r3, r3, #9
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 80cf 	beq.w	800629a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80060fc:	7bbb      	ldrb	r3, [r7, #14]
 80060fe:	2b21      	cmp	r3, #33	; 0x21
 8006100:	d103      	bne.n	800610a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fa7a 	bl	80065fc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006108:	e0c7      	b.n	800629a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	2b40      	cmp	r3, #64	; 0x40
 800610e:	f040 80c4 	bne.w	800629a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fae8 	bl	80066e8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006118:	e0bf      	b.n	800629a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006128:	f000 80b7 	beq.w	800629a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	099b      	lsrs	r3, r3, #6
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00f      	beq.n	8006158 <HAL_I2C_EV_IRQHandler+0x194>
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	0a9b      	lsrs	r3, r3, #10
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d009      	beq.n	8006158 <HAL_I2C_EV_IRQHandler+0x194>
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	089b      	lsrs	r3, r3, #2
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d103      	bne.n	8006158 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fb5d 	bl	8006810 <I2C_MasterReceive_RXNE>
 8006156:	e011      	b.n	800617c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	089b      	lsrs	r3, r3, #2
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 809a 	beq.w	800629a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	0a5b      	lsrs	r3, r3, #9
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 8093 	beq.w	800629a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fc06 	bl	8006986 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800617a:	e08e      	b.n	800629a <HAL_I2C_EV_IRQHandler+0x2d6>
 800617c:	e08d      	b.n	800629a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d004      	beq.n	8006190 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	e007      	b.n	80061a0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	085b      	lsrs	r3, r3, #1
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d012      	beq.n	80061d2 <HAL_I2C_EV_IRQHandler+0x20e>
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	0a5b      	lsrs	r3, r3, #9
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00c      	beq.n	80061d2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80061c8:	69b9      	ldr	r1, [r7, #24]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 ffc4 	bl	8007158 <I2C_Slave_ADDR>
 80061d0:	e066      	b.n	80062a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	091b      	lsrs	r3, r3, #4
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d009      	beq.n	80061f2 <HAL_I2C_EV_IRQHandler+0x22e>
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	0a5b      	lsrs	r3, r3, #9
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fffe 	bl	80071ec <I2C_Slave_STOPF>
 80061f0:	e056      	b.n	80062a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80061f2:	7bbb      	ldrb	r3, [r7, #14]
 80061f4:	2b21      	cmp	r3, #33	; 0x21
 80061f6:	d002      	beq.n	80061fe <HAL_I2C_EV_IRQHandler+0x23a>
 80061f8:	7bbb      	ldrb	r3, [r7, #14]
 80061fa:	2b29      	cmp	r3, #41	; 0x29
 80061fc:	d125      	bne.n	800624a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	09db      	lsrs	r3, r3, #7
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00f      	beq.n	800622a <HAL_I2C_EV_IRQHandler+0x266>
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	0a9b      	lsrs	r3, r3, #10
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d009      	beq.n	800622a <HAL_I2C_EV_IRQHandler+0x266>
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	089b      	lsrs	r3, r3, #2
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d103      	bne.n	800622a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 feda 	bl	8006fdc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006228:	e039      	b.n	800629e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	089b      	lsrs	r3, r3, #2
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d033      	beq.n	800629e <HAL_I2C_EV_IRQHandler+0x2da>
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	0a5b      	lsrs	r3, r3, #9
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d02d      	beq.n	800629e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 ff07 	bl	8007056 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006248:	e029      	b.n	800629e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	099b      	lsrs	r3, r3, #6
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00f      	beq.n	8006276 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	0a9b      	lsrs	r3, r3, #10
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	089b      	lsrs	r3, r3, #2
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d103      	bne.n	8006276 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 ff12 	bl	8007098 <I2C_SlaveReceive_RXNE>
 8006274:	e014      	b.n	80062a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	089b      	lsrs	r3, r3, #2
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00e      	beq.n	80062a0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	0a5b      	lsrs	r3, r3, #9
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d008      	beq.n	80062a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 ff40 	bl	8007114 <I2C_SlaveReceive_BTF>
 8006294:	e004      	b.n	80062a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006296:	bf00      	nop
 8006298:	e002      	b.n	80062a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800629a:	bf00      	nop
 800629c:	e000      	b.n	80062a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800629e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b08a      	sub	sp, #40	; 0x28
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80062be:	2300      	movs	r3, #0
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062c8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	0a1b      	lsrs	r3, r3, #8
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00e      	beq.n	80062f4 <HAL_I2C_ER_IRQHandler+0x4e>
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	0a1b      	lsrs	r3, r3, #8
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d008      	beq.n	80062f4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	f043 0301 	orr.w	r3, r3, #1
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062f2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	0a5b      	lsrs	r3, r3, #9
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00e      	beq.n	800631e <HAL_I2C_ER_IRQHandler+0x78>
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	f043 0302 	orr.w	r3, r3, #2
 8006312:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800631c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	0a9b      	lsrs	r3, r3, #10
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d03f      	beq.n	80063aa <HAL_I2C_ER_IRQHandler+0x104>
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	0a1b      	lsrs	r3, r3, #8
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d039      	beq.n	80063aa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006336:	7efb      	ldrb	r3, [r7, #27]
 8006338:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633e:	b29b      	uxth	r3, r3
 8006340:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006348:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006350:	7ebb      	ldrb	r3, [r7, #26]
 8006352:	2b20      	cmp	r3, #32
 8006354:	d112      	bne.n	800637c <HAL_I2C_ER_IRQHandler+0xd6>
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10f      	bne.n	800637c <HAL_I2C_ER_IRQHandler+0xd6>
 800635c:	7cfb      	ldrb	r3, [r7, #19]
 800635e:	2b21      	cmp	r3, #33	; 0x21
 8006360:	d008      	beq.n	8006374 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006362:	7cfb      	ldrb	r3, [r7, #19]
 8006364:	2b29      	cmp	r3, #41	; 0x29
 8006366:	d005      	beq.n	8006374 <HAL_I2C_ER_IRQHandler+0xce>
 8006368:	7cfb      	ldrb	r3, [r7, #19]
 800636a:	2b28      	cmp	r3, #40	; 0x28
 800636c:	d106      	bne.n	800637c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b21      	cmp	r3, #33	; 0x21
 8006372:	d103      	bne.n	800637c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 f869 	bl	800744c <I2C_Slave_AF>
 800637a:	e016      	b.n	80063aa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006384:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	f043 0304 	orr.w	r3, r3, #4
 800638c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800638e:	7efb      	ldrb	r3, [r7, #27]
 8006390:	2b10      	cmp	r3, #16
 8006392:	d002      	beq.n	800639a <HAL_I2C_ER_IRQHandler+0xf4>
 8006394:	7efb      	ldrb	r3, [r7, #27]
 8006396:	2b40      	cmp	r3, #64	; 0x40
 8006398:	d107      	bne.n	80063aa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063a8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	0adb      	lsrs	r3, r3, #11
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00e      	beq.n	80063d4 <HAL_I2C_ER_IRQHandler+0x12e>
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	0a1b      	lsrs	r3, r3, #8
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d008      	beq.n	80063d4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	f043 0308 	orr.w	r3, r3, #8
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80063d2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d008      	beq.n	80063ec <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f001 f8a0 	bl	800752c <I2C_ITError>
  }
}
 80063ec:	bf00      	nop
 80063ee:	3728      	adds	r7, #40	; 0x28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	70fb      	strb	r3, [r7, #3]
 8006450:	4613      	mov	r3, r2
 8006452:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d150      	bne.n	800658c <I2C_MasterTransmit_TXE+0xc8>
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	2b21      	cmp	r3, #33	; 0x21
 80064ee:	d14d      	bne.n	800658c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2b08      	cmp	r3, #8
 80064f4:	d01d      	beq.n	8006532 <I2C_MasterTransmit_TXE+0x6e>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	d01a      	beq.n	8006532 <I2C_MasterTransmit_TXE+0x6e>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006502:	d016      	beq.n	8006532 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006512:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2211      	movs	r2, #17
 8006518:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2220      	movs	r2, #32
 8006526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff ff62 	bl	80063f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006530:	e060      	b.n	80065f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006540:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006550:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2220      	movs	r2, #32
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b40      	cmp	r3, #64	; 0x40
 800656a:	d107      	bne.n	800657c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff ff7d 	bl	8006474 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800657a:	e03b      	b.n	80065f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7ff ff35 	bl	80063f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800658a:	e033      	b.n	80065f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	2b21      	cmp	r3, #33	; 0x21
 8006590:	d005      	beq.n	800659e <I2C_MasterTransmit_TXE+0xda>
 8006592:	7bbb      	ldrb	r3, [r7, #14]
 8006594:	2b40      	cmp	r3, #64	; 0x40
 8006596:	d12d      	bne.n	80065f4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006598:	7bfb      	ldrb	r3, [r7, #15]
 800659a:	2b22      	cmp	r3, #34	; 0x22
 800659c:	d12a      	bne.n	80065f4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d108      	bne.n	80065ba <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80065b8:	e01c      	b.n	80065f4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b40      	cmp	r3, #64	; 0x40
 80065c4:	d103      	bne.n	80065ce <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f88e 	bl	80066e8 <I2C_MemoryTransmit_TXE_BTF>
}
 80065cc:	e012      	b.n	80065f4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	781a      	ldrb	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	3b01      	subs	r3, #1
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80065f2:	e7ff      	b.n	80065f4 <I2C_MasterTransmit_TXE+0x130>
 80065f4:	bf00      	nop
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b21      	cmp	r3, #33	; 0x21
 8006614:	d164      	bne.n	80066e0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661a:	b29b      	uxth	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d012      	beq.n	8006646 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	781a      	ldrb	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006644:	e04c      	b.n	80066e0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b08      	cmp	r3, #8
 800664a:	d01d      	beq.n	8006688 <I2C_MasterTransmit_BTF+0x8c>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2b20      	cmp	r3, #32
 8006650:	d01a      	beq.n	8006688 <I2C_MasterTransmit_BTF+0x8c>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006658:	d016      	beq.n	8006688 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006668:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2211      	movs	r2, #17
 800666e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2220      	movs	r2, #32
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7ff feb7 	bl	80063f4 <HAL_I2C_MasterTxCpltCallback>
}
 8006686:	e02b      	b.n	80066e0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006696:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066a6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b40      	cmp	r3, #64	; 0x40
 80066c0:	d107      	bne.n	80066d2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff fed2 	bl	8006474 <HAL_I2C_MemTxCpltCallback>
}
 80066d0:	e006      	b.n	80066e0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff fe8a 	bl	80063f4 <HAL_I2C_MasterTxCpltCallback>
}
 80066e0:	bf00      	nop
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d11d      	bne.n	800673c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d10b      	bne.n	8006720 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800670c:	b2da      	uxtb	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006718:	1c9a      	adds	r2, r3, #2
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800671e:	e073      	b.n	8006808 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006724:	b29b      	uxth	r3, r3
 8006726:	121b      	asrs	r3, r3, #8
 8006728:	b2da      	uxtb	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	651a      	str	r2, [r3, #80]	; 0x50
}
 800673a:	e065      	b.n	8006808 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006740:	2b01      	cmp	r3, #1
 8006742:	d10b      	bne.n	800675c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006748:	b2da      	uxtb	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	651a      	str	r2, [r3, #80]	; 0x50
}
 800675a:	e055      	b.n	8006808 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006760:	2b02      	cmp	r3, #2
 8006762:	d151      	bne.n	8006808 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	2b22      	cmp	r3, #34	; 0x22
 8006768:	d10d      	bne.n	8006786 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006778:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006784:	e040      	b.n	8006808 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800678a:	b29b      	uxth	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d015      	beq.n	80067bc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	2b21      	cmp	r3, #33	; 0x21
 8006794:	d112      	bne.n	80067bc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	781a      	ldrb	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	3b01      	subs	r3, #1
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80067ba:	e025      	b.n	8006808 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d120      	bne.n	8006808 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	2b21      	cmp	r3, #33	; 0x21
 80067ca:	d11d      	bne.n	8006808 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067da:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7ff fe36 	bl	8006474 <HAL_I2C_MemTxCpltCallback>
}
 8006808:	bf00      	nop
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b22      	cmp	r3, #34	; 0x22
 8006822:	f040 80ac 	bne.w	800697e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682a:	b29b      	uxth	r3, r3
 800682c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b03      	cmp	r3, #3
 8006832:	d921      	bls.n	8006878 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	691a      	ldr	r2, [r3, #16]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006850:	b29b      	uxth	r3, r3
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685e:	b29b      	uxth	r3, r3
 8006860:	2b03      	cmp	r3, #3
 8006862:	f040 808c 	bne.w	800697e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006874:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006876:	e082      	b.n	800697e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	2b02      	cmp	r3, #2
 800687e:	d075      	beq.n	800696c <I2C_MasterReceive_RXNE+0x15c>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d002      	beq.n	800688c <I2C_MasterReceive_RXNE+0x7c>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d16f      	bne.n	800696c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 f827 	bl	80078e0 <I2C_WaitOnSTOPRequestThroughIT>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d142      	bne.n	800691e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068a6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068b6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691a      	ldr	r2, [r3, #16]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b29a      	uxth	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b40      	cmp	r3, #64	; 0x40
 80068f0:	d10a      	bne.n	8006908 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7ff fdc1 	bl	8006488 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006906:	e03a      	b.n	800697e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2212      	movs	r2, #18
 8006914:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7ff fd76 	bl	8006408 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800691c:	e02f      	b.n	800697e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800692c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	691a      	ldr	r2, [r3, #16]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694a:	b29b      	uxth	r3, r3
 800694c:	3b01      	subs	r3, #1
 800694e:	b29a      	uxth	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7ff fd99 	bl	800649c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800696a:	e008      	b.n	800697e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800697a:	605a      	str	r2, [r3, #4]
}
 800697c:	e7ff      	b.n	800697e <I2C_MasterReceive_RXNE+0x16e>
 800697e:	bf00      	nop
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006992:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b04      	cmp	r3, #4
 800699c:	d11b      	bne.n	80069d6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ac:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	691a      	ldr	r2, [r3, #16]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	b2d2      	uxtb	r2, r2
 80069ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80069d4:	e0bd      	b.n	8006b52 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069da:	b29b      	uxth	r3, r3
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d129      	bne.n	8006a34 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ee:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d00a      	beq.n	8006a0c <I2C_MasterReceive_BTF+0x86>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d007      	beq.n	8006a0c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a0a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	691a      	ldr	r2, [r3, #16]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	1c5a      	adds	r2, r3, #1
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a32:	e08e      	b.n	8006b52 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d176      	bne.n	8006b2c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d002      	beq.n	8006a4a <I2C_MasterReceive_BTF+0xc4>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b10      	cmp	r3, #16
 8006a48:	d108      	bne.n	8006a5c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e019      	b.n	8006a90 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d002      	beq.n	8006a68 <I2C_MasterReceive_BTF+0xe2>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d108      	bne.n	8006a7a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	e00a      	b.n	8006a90 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b10      	cmp	r3, #16
 8006a7e:	d007      	beq.n	8006a90 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a8e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691a      	ldr	r2, [r3, #16]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	b2d2      	uxtb	r2, r2
 8006ac2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006aea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b40      	cmp	r3, #64	; 0x40
 8006afe:	d10a      	bne.n	8006b16 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff fcba 	bl	8006488 <HAL_I2C_MemRxCpltCallback>
}
 8006b14:	e01d      	b.n	8006b52 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2212      	movs	r2, #18
 8006b22:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff fc6f 	bl	8006408 <HAL_I2C_MasterRxCpltCallback>
}
 8006b2a:	e012      	b.n	8006b52 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691a      	ldr	r2, [r3, #16]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b52:	bf00      	nop
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b40      	cmp	r3, #64	; 0x40
 8006b6c:	d117      	bne.n	8006b9e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d109      	bne.n	8006b8a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b86:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006b88:	e067      	b.n	8006c5a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	f043 0301 	orr.w	r3, r3, #1
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	611a      	str	r2, [r3, #16]
}
 8006b9c:	e05d      	b.n	8006c5a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ba6:	d133      	bne.n	8006c10 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b21      	cmp	r3, #33	; 0x21
 8006bb2:	d109      	bne.n	8006bc8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bc4:	611a      	str	r2, [r3, #16]
 8006bc6:	e008      	b.n	8006bda <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	f043 0301 	orr.w	r3, r3, #1
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d004      	beq.n	8006bec <I2C_Master_SB+0x92>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d108      	bne.n	8006bfe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d032      	beq.n	8006c5a <I2C_Master_SB+0x100>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d02d      	beq.n	8006c5a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c0c:	605a      	str	r2, [r3, #4]
}
 8006c0e:	e024      	b.n	8006c5a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10e      	bne.n	8006c36 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	11db      	asrs	r3, r3, #7
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	f003 0306 	and.w	r3, r3, #6
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	f063 030f 	orn	r3, r3, #15
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	611a      	str	r2, [r3, #16]
}
 8006c34:	e011      	b.n	8006c5a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d10d      	bne.n	8006c5a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	11db      	asrs	r3, r3, #7
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	f003 0306 	and.w	r3, r3, #6
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	f063 030e 	orn	r3, r3, #14
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	611a      	str	r2, [r3, #16]
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b083      	sub	sp, #12
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d004      	beq.n	8006c8c <I2C_Master_ADD10+0x26>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d108      	bne.n	8006c9e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00c      	beq.n	8006cae <I2C_Master_ADD10+0x48>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d007      	beq.n	8006cae <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cac:	605a      	str	r2, [r3, #4]
  }
}
 8006cae:	bf00      	nop
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b091      	sub	sp, #68	; 0x44
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b22      	cmp	r3, #34	; 0x22
 8006ce2:	f040 8169 	bne.w	8006fb8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10f      	bne.n	8006d0e <I2C_Master_ADDR+0x54>
 8006cee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006cf2:	2b40      	cmp	r3, #64	; 0x40
 8006cf4:	d10b      	bne.n	8006d0e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	633b      	str	r3, [r7, #48]	; 0x30
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	633b      	str	r3, [r7, #48]	; 0x30
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	633b      	str	r3, [r7, #48]	; 0x30
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	e160      	b.n	8006fd0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d11d      	bne.n	8006d52 <I2C_Master_ADDR+0x98>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d1e:	d118      	bne.n	8006d52 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d20:	2300      	movs	r3, #0
 8006d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d44:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	651a      	str	r2, [r3, #80]	; 0x50
 8006d50:	e13e      	b.n	8006fd0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d113      	bne.n	8006d84 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	e115      	b.n	8006fb0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	f040 808a 	bne.w	8006ea4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d96:	d137      	bne.n	8006e08 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006da6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006db6:	d113      	bne.n	8006de0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dc8:	2300      	movs	r3, #0
 8006dca:	627b      	str	r3, [r7, #36]	; 0x24
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	e0e7      	b.n	8006fb0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006de0:	2300      	movs	r3, #0
 8006de2:	623b      	str	r3, [r7, #32]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	623b      	str	r3, [r7, #32]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	623b      	str	r3, [r7, #32]
 8006df4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	e0d3      	b.n	8006fb0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0a:	2b08      	cmp	r3, #8
 8006e0c:	d02e      	beq.n	8006e6c <I2C_Master_ADDR+0x1b2>
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d02b      	beq.n	8006e6c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e16:	2b12      	cmp	r3, #18
 8006e18:	d102      	bne.n	8006e20 <I2C_Master_ADDR+0x166>
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d125      	bne.n	8006e6c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d00e      	beq.n	8006e44 <I2C_Master_ADDR+0x18a>
 8006e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d00b      	beq.n	8006e44 <I2C_Master_ADDR+0x18a>
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	2b10      	cmp	r3, #16
 8006e30:	d008      	beq.n	8006e44 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	e007      	b.n	8006e54 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e52:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e54:	2300      	movs	r3, #0
 8006e56:	61fb      	str	r3, [r7, #28]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	61fb      	str	r3, [r7, #28]
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	e0a1      	b.n	8006fb0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e7a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	61bb      	str	r3, [r7, #24]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	61bb      	str	r3, [r7, #24]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	61bb      	str	r3, [r7, #24]
 8006e90:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	e085      	b.n	8006fb0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d14d      	bne.n	8006f4a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d016      	beq.n	8006ee2 <I2C_Master_ADDR+0x228>
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d013      	beq.n	8006ee2 <I2C_Master_ADDR+0x228>
 8006eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebc:	2b10      	cmp	r3, #16
 8006ebe:	d010      	beq.n	8006ee2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ece:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	e007      	b.n	8006ef2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ef0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f00:	d117      	bne.n	8006f32 <I2C_Master_ADDR+0x278>
 8006f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f08:	d00b      	beq.n	8006f22 <I2C_Master_ADDR+0x268>
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d008      	beq.n	8006f22 <I2C_Master_ADDR+0x268>
 8006f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f12:	2b08      	cmp	r3, #8
 8006f14:	d005      	beq.n	8006f22 <I2C_Master_ADDR+0x268>
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	2b10      	cmp	r3, #16
 8006f1a:	d002      	beq.n	8006f22 <I2C_Master_ADDR+0x268>
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	d107      	bne.n	8006f32 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f30:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f32:	2300      	movs	r3, #0
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	617b      	str	r3, [r7, #20]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	e032      	b.n	8006fb0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f58:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f68:	d117      	bne.n	8006f9a <I2C_Master_ADDR+0x2e0>
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f70:	d00b      	beq.n	8006f8a <I2C_Master_ADDR+0x2d0>
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d008      	beq.n	8006f8a <I2C_Master_ADDR+0x2d0>
 8006f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7a:	2b08      	cmp	r3, #8
 8006f7c:	d005      	beq.n	8006f8a <I2C_Master_ADDR+0x2d0>
 8006f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f80:	2b10      	cmp	r3, #16
 8006f82:	d002      	beq.n	8006f8a <I2C_Master_ADDR+0x2d0>
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	2b20      	cmp	r3, #32
 8006f88:	d107      	bne.n	8006f9a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f98:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	613b      	str	r3, [r7, #16]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	613b      	str	r3, [r7, #16]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	613b      	str	r3, [r7, #16]
 8006fae:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006fb6:	e00b      	b.n	8006fd0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fb8:	2300      	movs	r3, #0
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
}
 8006fce:	e7ff      	b.n	8006fd0 <I2C_Master_ADDR+0x316>
 8006fd0:	bf00      	nop
 8006fd2:	3744      	adds	r7, #68	; 0x44
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d02b      	beq.n	800704e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	781a      	ldrb	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007010:	b29b      	uxth	r3, r3
 8007012:	3b01      	subs	r3, #1
 8007014:	b29a      	uxth	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701e:	b29b      	uxth	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	d114      	bne.n	800704e <I2C_SlaveTransmit_TXE+0x72>
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	2b29      	cmp	r3, #41	; 0x29
 8007028:	d111      	bne.n	800704e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007038:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2221      	movs	r2, #33	; 0x21
 800703e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2228      	movs	r2, #40	; 0x28
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7ff f9e7 	bl	800641c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800704e:	bf00      	nop
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007062:	b29b      	uxth	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d011      	beq.n	800708c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	781a      	ldrb	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007082:	b29b      	uxth	r3, r3
 8007084:	3b01      	subs	r3, #1
 8007086:	b29a      	uxth	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d02c      	beq.n	800710c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	691a      	ldr	r2, [r3, #16]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	b2d2      	uxtb	r2, r2
 80070be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	3b01      	subs	r3, #1
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d114      	bne.n	800710c <I2C_SlaveReceive_RXNE+0x74>
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	2b2a      	cmp	r3, #42	; 0x2a
 80070e6:	d111      	bne.n	800710c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070f6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2222      	movs	r2, #34	; 0x22
 80070fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2228      	movs	r2, #40	; 0x28
 8007102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff f992 	bl	8006430 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800710c:	bf00      	nop
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007120:	b29b      	uxth	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d012      	beq.n	800714c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	b2d2      	uxtb	r2, r2
 8007132:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007142:	b29b      	uxth	r3, r3
 8007144:	3b01      	subs	r3, #1
 8007146:	b29a      	uxth	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007162:	2300      	movs	r3, #0
 8007164:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800716c:	b2db      	uxtb	r3, r3
 800716e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007172:	2b28      	cmp	r3, #40	; 0x28
 8007174:	d127      	bne.n	80071c6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007184:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	089b      	lsrs	r3, r3, #2
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007192:	2301      	movs	r3, #1
 8007194:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	09db      	lsrs	r3, r3, #7
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d103      	bne.n	80071aa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	81bb      	strh	r3, [r7, #12]
 80071a8:	e002      	b.n	80071b0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80071b8:	89ba      	ldrh	r2, [r7, #12]
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7ff f940 	bl	8006444 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80071c4:	e00e      	b.n	80071e4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071c6:	2300      	movs	r3, #0
 80071c8:	60bb      	str	r3, [r7, #8]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	60bb      	str	r3, [r7, #8]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	60bb      	str	r3, [r7, #8]
 80071da:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80071e4:	bf00      	nop
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800720a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800720c:	2300      	movs	r3, #0
 800720e:	60bb      	str	r3, [r7, #8]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	60bb      	str	r3, [r7, #8]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f042 0201 	orr.w	r2, r2, #1
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007238:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007248:	d172      	bne.n	8007330 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	2b22      	cmp	r3, #34	; 0x22
 800724e:	d002      	beq.n	8007256 <I2C_Slave_STOPF+0x6a>
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	2b2a      	cmp	r3, #42	; 0x2a
 8007254:	d135      	bne.n	80072c2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	b29a      	uxth	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d005      	beq.n	800727a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f043 0204 	orr.w	r2, r3, #4
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007288:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe f92a 	bl	80054e8 <HAL_DMA_GetState>
 8007294:	4603      	mov	r3, r0
 8007296:	2b01      	cmp	r3, #1
 8007298:	d049      	beq.n	800732e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	4a69      	ldr	r2, [pc, #420]	; (8007444 <I2C_Slave_STOPF+0x258>)
 80072a0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fd ff72 	bl	8005190 <HAL_DMA_Abort_IT>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d03d      	beq.n	800732e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072bc:	4610      	mov	r0, r2
 80072be:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072c0:	e035      	b.n	800732e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d005      	beq.n	80072e6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	f043 0204 	orr.w	r2, r3, #4
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fe f8f4 	bl	80054e8 <HAL_DMA_GetState>
 8007300:	4603      	mov	r3, r0
 8007302:	2b01      	cmp	r3, #1
 8007304:	d014      	beq.n	8007330 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730a:	4a4e      	ldr	r2, [pc, #312]	; (8007444 <I2C_Slave_STOPF+0x258>)
 800730c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007312:	4618      	mov	r0, r3
 8007314:	f7fd ff3c 	bl	8005190 <HAL_DMA_Abort_IT>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d008      	beq.n	8007330 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007328:	4610      	mov	r0, r2
 800732a:	4798      	blx	r3
 800732c:	e000      	b.n	8007330 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800732e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007334:	b29b      	uxth	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d03e      	beq.n	80073b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b04      	cmp	r3, #4
 8007346:	d112      	bne.n	800736e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	691a      	ldr	r2, [r3, #16]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	b2d2      	uxtb	r2, r2
 8007354:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007364:	b29b      	uxth	r3, r3
 8007366:	3b01      	subs	r3, #1
 8007368:	b29a      	uxth	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007378:	2b40      	cmp	r3, #64	; 0x40
 800737a:	d112      	bne.n	80073a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691a      	ldr	r2, [r3, #16]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	b2d2      	uxtb	r2, r2
 8007388:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d005      	beq.n	80073b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b0:	f043 0204 	orr.w	r2, r3, #4
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f8b3 	bl	800752c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80073c6:	e039      	b.n	800743c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	2b2a      	cmp	r3, #42	; 0x2a
 80073cc:	d109      	bne.n	80073e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2228      	movs	r2, #40	; 0x28
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7ff f827 	bl	8006430 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b28      	cmp	r3, #40	; 0x28
 80073ec:	d111      	bne.n	8007412 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a15      	ldr	r2, [pc, #84]	; (8007448 <I2C_Slave_STOPF+0x25c>)
 80073f2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2220      	movs	r2, #32
 80073fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7ff f828 	bl	8006460 <HAL_I2C_ListenCpltCallback>
}
 8007410:	e014      	b.n	800743c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	2b22      	cmp	r3, #34	; 0x22
 8007418:	d002      	beq.n	8007420 <I2C_Slave_STOPF+0x234>
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	2b22      	cmp	r3, #34	; 0x22
 800741e:	d10d      	bne.n	800743c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2220      	movs	r2, #32
 800742a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7fe fffa 	bl	8006430 <HAL_I2C_SlaveRxCpltCallback>
}
 800743c:	bf00      	nop
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	08007791 	.word	0x08007791
 8007448:	ffff0000 	.word	0xffff0000

0800744c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2b08      	cmp	r3, #8
 8007466:	d002      	beq.n	800746e <I2C_Slave_AF+0x22>
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2b20      	cmp	r3, #32
 800746c:	d129      	bne.n	80074c2 <I2C_Slave_AF+0x76>
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	2b28      	cmp	r3, #40	; 0x28
 8007472:	d126      	bne.n	80074c2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a2c      	ldr	r2, [pc, #176]	; (8007528 <I2C_Slave_AF+0xdc>)
 8007478:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007488:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007492:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7fe ffd0 	bl	8006460 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80074c0:	e02e      	b.n	8007520 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	2b21      	cmp	r3, #33	; 0x21
 80074c6:	d126      	bne.n	8007516 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a17      	ldr	r2, [pc, #92]	; (8007528 <I2C_Slave_AF+0xdc>)
 80074cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2221      	movs	r2, #33	; 0x21
 80074d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2220      	movs	r2, #32
 80074d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074f2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074fc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800750c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fe ff84 	bl	800641c <HAL_I2C_SlaveTxCpltCallback>
}
 8007514:	e004      	b.n	8007520 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800751e:	615a      	str	r2, [r3, #20]
}
 8007520:	bf00      	nop
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	ffff0000 	.word	0xffff0000

0800752c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007542:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	2b10      	cmp	r3, #16
 8007548:	d002      	beq.n	8007550 <I2C_ITError+0x24>
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	2b40      	cmp	r3, #64	; 0x40
 800754e:	d10a      	bne.n	8007566 <I2C_ITError+0x3a>
 8007550:	7bfb      	ldrb	r3, [r7, #15]
 8007552:	2b22      	cmp	r3, #34	; 0x22
 8007554:	d107      	bne.n	8007566 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007564:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007566:	7bfb      	ldrb	r3, [r7, #15]
 8007568:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800756c:	2b28      	cmp	r3, #40	; 0x28
 800756e:	d107      	bne.n	8007580 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2228      	movs	r2, #40	; 0x28
 800757a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800757e:	e015      	b.n	80075ac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800758a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800758e:	d00a      	beq.n	80075a6 <I2C_ITError+0x7a>
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	2b60      	cmp	r3, #96	; 0x60
 8007594:	d007      	beq.n	80075a6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2220      	movs	r2, #32
 800759a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ba:	d162      	bne.n	8007682 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075ca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d020      	beq.n	800761c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075de:	4a6a      	ldr	r2, [pc, #424]	; (8007788 <I2C_ITError+0x25c>)
 80075e0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fd fdd2 	bl	8005190 <HAL_DMA_Abort_IT>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 8089 	beq.w	8007706 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f022 0201 	bic.w	r2, r2, #1
 8007602:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007616:	4610      	mov	r0, r2
 8007618:	4798      	blx	r3
 800761a:	e074      	b.n	8007706 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007620:	4a59      	ldr	r2, [pc, #356]	; (8007788 <I2C_ITError+0x25c>)
 8007622:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007628:	4618      	mov	r0, r3
 800762a:	f7fd fdb1 	bl	8005190 <HAL_DMA_Abort_IT>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d068      	beq.n	8007706 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800763e:	2b40      	cmp	r3, #64	; 0x40
 8007640:	d10b      	bne.n	800765a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	691a      	ldr	r2, [r3, #16]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	b2d2      	uxtb	r2, r2
 800764e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	1c5a      	adds	r2, r3, #1
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0201 	bic.w	r2, r2, #1
 8007668:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2220      	movs	r2, #32
 800766e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800767c:	4610      	mov	r0, r2
 800767e:	4798      	blx	r3
 8007680:	e041      	b.n	8007706 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b60      	cmp	r3, #96	; 0x60
 800768c:	d125      	bne.n	80076da <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a6:	2b40      	cmp	r3, #64	; 0x40
 80076a8:	d10b      	bne.n	80076c2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	691a      	ldr	r2, [r3, #16]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	b2d2      	uxtb	r2, r2
 80076b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0201 	bic.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7fe feec 	bl	80064b0 <HAL_I2C_AbortCpltCallback>
 80076d8:	e015      	b.n	8007706 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e4:	2b40      	cmp	r3, #64	; 0x40
 80076e6:	d10b      	bne.n	8007700 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691a      	ldr	r2, [r3, #16]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	b2d2      	uxtb	r2, r2
 80076f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	1c5a      	adds	r2, r3, #1
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7fe fecb 	bl	800649c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10e      	bne.n	8007734 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800771c:	2b00      	cmp	r3, #0
 800771e:	d109      	bne.n	8007734 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007726:	2b00      	cmp	r3, #0
 8007728:	d104      	bne.n	8007734 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007730:	2b00      	cmp	r3, #0
 8007732:	d007      	beq.n	8007744 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007742:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800774a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007750:	f003 0304 	and.w	r3, r3, #4
 8007754:	2b04      	cmp	r3, #4
 8007756:	d113      	bne.n	8007780 <I2C_ITError+0x254>
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	2b28      	cmp	r3, #40	; 0x28
 800775c:	d110      	bne.n	8007780 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a0a      	ldr	r2, [pc, #40]	; (800778c <I2C_ITError+0x260>)
 8007762:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2220      	movs	r2, #32
 800776e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7fe fe70 	bl	8006460 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007780:	bf00      	nop
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	08007791 	.word	0x08007791
 800778c:	ffff0000 	.word	0xffff0000

08007790 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80077aa:	4b4b      	ldr	r3, [pc, #300]	; (80078d8 <I2C_DMAAbort+0x148>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	08db      	lsrs	r3, r3, #3
 80077b0:	4a4a      	ldr	r2, [pc, #296]	; (80078dc <I2C_DMAAbort+0x14c>)
 80077b2:	fba2 2303 	umull	r2, r3, r2, r3
 80077b6:	0a1a      	lsrs	r2, r3, #8
 80077b8:	4613      	mov	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	00da      	lsls	r2, r3, #3
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d106      	bne.n	80077d8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	f043 0220 	orr.w	r2, r3, #32
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80077d6:	e00a      	b.n	80077ee <I2C_DMAAbort+0x5e>
    }
    count--;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3b01      	subs	r3, #1
 80077dc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ec:	d0ea      	beq.n	80077c4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fa:	2200      	movs	r2, #0
 80077fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780a:	2200      	movs	r2, #0
 800780c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800781c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2200      	movs	r2, #0
 8007822:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007830:	2200      	movs	r2, #0
 8007832:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007840:	2200      	movs	r2, #0
 8007842:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0201 	bic.w	r2, r2, #1
 8007852:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b60      	cmp	r3, #96	; 0x60
 800785e:	d10e      	bne.n	800787e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2220      	movs	r2, #32
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	2200      	movs	r2, #0
 8007874:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007876:	6978      	ldr	r0, [r7, #20]
 8007878:	f7fe fe1a 	bl	80064b0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800787c:	e027      	b.n	80078ce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800787e:	7cfb      	ldrb	r3, [r7, #19]
 8007880:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007884:	2b28      	cmp	r3, #40	; 0x28
 8007886:	d117      	bne.n	80078b8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f042 0201 	orr.w	r2, r2, #1
 8007896:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	2200      	movs	r2, #0
 80078ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2228      	movs	r2, #40	; 0x28
 80078b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80078b6:	e007      	b.n	80078c8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	2220      	movs	r2, #32
 80078bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80078c8:	6978      	ldr	r0, [r7, #20]
 80078ca:	f7fe fde7 	bl	800649c <HAL_I2C_ErrorCallback>
}
 80078ce:	bf00      	nop
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	200003b8 	.word	0x200003b8
 80078dc:	14f8b589 	.word	0x14f8b589

080078e0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80078ec:	4b13      	ldr	r3, [pc, #76]	; (800793c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	08db      	lsrs	r3, r3, #3
 80078f2:	4a13      	ldr	r2, [pc, #76]	; (8007940 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80078f4:	fba2 2303 	umull	r2, r3, r2, r3
 80078f8:	0a1a      	lsrs	r2, r3, #8
 80078fa:	4613      	mov	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3b01      	subs	r3, #1
 8007906:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d107      	bne.n	800791e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007912:	f043 0220 	orr.w	r2, r3, #32
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e008      	b.n	8007930 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800792c:	d0e9      	beq.n	8007902 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	200003b8 	.word	0x200003b8
 8007940:	14f8b589 	.word	0x14f8b589

08007944 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007954:	d103      	bne.n	800795e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800795c:	e007      	b.n	800796e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007966:	d102      	bne.n	800796e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2208      	movs	r2, #8
 800796c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800796e:	bf00      	nop
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
	...

0800797c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e267      	b.n	8007e5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d075      	beq.n	8007a86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800799a:	4b88      	ldr	r3, [pc, #544]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f003 030c 	and.w	r3, r3, #12
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d00c      	beq.n	80079c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079a6:	4b85      	ldr	r3, [pc, #532]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079ae:	2b08      	cmp	r3, #8
 80079b0:	d112      	bne.n	80079d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079b2:	4b82      	ldr	r3, [pc, #520]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079be:	d10b      	bne.n	80079d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079c0:	4b7e      	ldr	r3, [pc, #504]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d05b      	beq.n	8007a84 <HAL_RCC_OscConfig+0x108>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d157      	bne.n	8007a84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e242      	b.n	8007e5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079e0:	d106      	bne.n	80079f0 <HAL_RCC_OscConfig+0x74>
 80079e2:	4b76      	ldr	r3, [pc, #472]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a75      	ldr	r2, [pc, #468]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 80079e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	e01d      	b.n	8007a2c <HAL_RCC_OscConfig+0xb0>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079f8:	d10c      	bne.n	8007a14 <HAL_RCC_OscConfig+0x98>
 80079fa:	4b70      	ldr	r3, [pc, #448]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a6f      	ldr	r2, [pc, #444]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a04:	6013      	str	r3, [r2, #0]
 8007a06:	4b6d      	ldr	r3, [pc, #436]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a6c      	ldr	r2, [pc, #432]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a10:	6013      	str	r3, [r2, #0]
 8007a12:	e00b      	b.n	8007a2c <HAL_RCC_OscConfig+0xb0>
 8007a14:	4b69      	ldr	r3, [pc, #420]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a68      	ldr	r2, [pc, #416]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a1e:	6013      	str	r3, [r2, #0]
 8007a20:	4b66      	ldr	r3, [pc, #408]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a65      	ldr	r2, [pc, #404]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d013      	beq.n	8007a5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a34:	f7fd f918 	bl	8004c68 <HAL_GetTick>
 8007a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a3a:	e008      	b.n	8007a4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a3c:	f7fd f914 	bl	8004c68 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b64      	cmp	r3, #100	; 0x64
 8007a48:	d901      	bls.n	8007a4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e207      	b.n	8007e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a4e:	4b5b      	ldr	r3, [pc, #364]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d0f0      	beq.n	8007a3c <HAL_RCC_OscConfig+0xc0>
 8007a5a:	e014      	b.n	8007a86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a5c:	f7fd f904 	bl	8004c68 <HAL_GetTick>
 8007a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a62:	e008      	b.n	8007a76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a64:	f7fd f900 	bl	8004c68 <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	2b64      	cmp	r3, #100	; 0x64
 8007a70:	d901      	bls.n	8007a76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e1f3      	b.n	8007e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a76:	4b51      	ldr	r3, [pc, #324]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1f0      	bne.n	8007a64 <HAL_RCC_OscConfig+0xe8>
 8007a82:	e000      	b.n	8007a86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0302 	and.w	r3, r3, #2
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d063      	beq.n	8007b5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a92:	4b4a      	ldr	r3, [pc, #296]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f003 030c 	and.w	r3, r3, #12
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00b      	beq.n	8007ab6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a9e:	4b47      	ldr	r3, [pc, #284]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007aa6:	2b08      	cmp	r3, #8
 8007aa8:	d11c      	bne.n	8007ae4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007aaa:	4b44      	ldr	r3, [pc, #272]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d116      	bne.n	8007ae4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ab6:	4b41      	ldr	r3, [pc, #260]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d005      	beq.n	8007ace <HAL_RCC_OscConfig+0x152>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d001      	beq.n	8007ace <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e1c7      	b.n	8007e5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ace:	4b3b      	ldr	r3, [pc, #236]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	00db      	lsls	r3, r3, #3
 8007adc:	4937      	ldr	r1, [pc, #220]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ae2:	e03a      	b.n	8007b5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d020      	beq.n	8007b2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007aec:	4b34      	ldr	r3, [pc, #208]	; (8007bc0 <HAL_RCC_OscConfig+0x244>)
 8007aee:	2201      	movs	r2, #1
 8007af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af2:	f7fd f8b9 	bl	8004c68 <HAL_GetTick>
 8007af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007af8:	e008      	b.n	8007b0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007afa:	f7fd f8b5 	bl	8004c68 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e1a8      	b.n	8007e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b0c:	4b2b      	ldr	r3, [pc, #172]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0f0      	beq.n	8007afa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b18:	4b28      	ldr	r3, [pc, #160]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	00db      	lsls	r3, r3, #3
 8007b26:	4925      	ldr	r1, [pc, #148]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	600b      	str	r3, [r1, #0]
 8007b2c:	e015      	b.n	8007b5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b2e:	4b24      	ldr	r3, [pc, #144]	; (8007bc0 <HAL_RCC_OscConfig+0x244>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b34:	f7fd f898 	bl	8004c68 <HAL_GetTick>
 8007b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b3a:	e008      	b.n	8007b4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b3c:	f7fd f894 	bl	8004c68 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d901      	bls.n	8007b4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e187      	b.n	8007e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b4e:	4b1b      	ldr	r3, [pc, #108]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1f0      	bne.n	8007b3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0308 	and.w	r3, r3, #8
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d036      	beq.n	8007bd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d016      	beq.n	8007b9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b6e:	4b15      	ldr	r3, [pc, #84]	; (8007bc4 <HAL_RCC_OscConfig+0x248>)
 8007b70:	2201      	movs	r2, #1
 8007b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b74:	f7fd f878 	bl	8004c68 <HAL_GetTick>
 8007b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b7a:	e008      	b.n	8007b8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b7c:	f7fd f874 	bl	8004c68 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d901      	bls.n	8007b8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e167      	b.n	8007e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b8e:	4b0b      	ldr	r3, [pc, #44]	; (8007bbc <HAL_RCC_OscConfig+0x240>)
 8007b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b92:	f003 0302 	and.w	r3, r3, #2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0f0      	beq.n	8007b7c <HAL_RCC_OscConfig+0x200>
 8007b9a:	e01b      	b.n	8007bd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b9c:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <HAL_RCC_OscConfig+0x248>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ba2:	f7fd f861 	bl	8004c68 <HAL_GetTick>
 8007ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ba8:	e00e      	b.n	8007bc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007baa:	f7fd f85d 	bl	8004c68 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d907      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e150      	b.n	8007e5e <HAL_RCC_OscConfig+0x4e2>
 8007bbc:	40023800 	.word	0x40023800
 8007bc0:	42470000 	.word	0x42470000
 8007bc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bc8:	4b88      	ldr	r3, [pc, #544]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bcc:	f003 0302 	and.w	r3, r3, #2
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1ea      	bne.n	8007baa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0304 	and.w	r3, r3, #4
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 8097 	beq.w	8007d10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007be2:	2300      	movs	r3, #0
 8007be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007be6:	4b81      	ldr	r3, [pc, #516]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10f      	bne.n	8007c12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60bb      	str	r3, [r7, #8]
 8007bf6:	4b7d      	ldr	r3, [pc, #500]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfa:	4a7c      	ldr	r2, [pc, #496]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c00:	6413      	str	r3, [r2, #64]	; 0x40
 8007c02:	4b7a      	ldr	r3, [pc, #488]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c0a:	60bb      	str	r3, [r7, #8]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c12:	4b77      	ldr	r3, [pc, #476]	; (8007df0 <HAL_RCC_OscConfig+0x474>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d118      	bne.n	8007c50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c1e:	4b74      	ldr	r3, [pc, #464]	; (8007df0 <HAL_RCC_OscConfig+0x474>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a73      	ldr	r2, [pc, #460]	; (8007df0 <HAL_RCC_OscConfig+0x474>)
 8007c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c2a:	f7fd f81d 	bl	8004c68 <HAL_GetTick>
 8007c2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c30:	e008      	b.n	8007c44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c32:	f7fd f819 	bl	8004c68 <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d901      	bls.n	8007c44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e10c      	b.n	8007e5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c44:	4b6a      	ldr	r3, [pc, #424]	; (8007df0 <HAL_RCC_OscConfig+0x474>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d0f0      	beq.n	8007c32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d106      	bne.n	8007c66 <HAL_RCC_OscConfig+0x2ea>
 8007c58:	4b64      	ldr	r3, [pc, #400]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5c:	4a63      	ldr	r2, [pc, #396]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007c5e:	f043 0301 	orr.w	r3, r3, #1
 8007c62:	6713      	str	r3, [r2, #112]	; 0x70
 8007c64:	e01c      	b.n	8007ca0 <HAL_RCC_OscConfig+0x324>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	2b05      	cmp	r3, #5
 8007c6c:	d10c      	bne.n	8007c88 <HAL_RCC_OscConfig+0x30c>
 8007c6e:	4b5f      	ldr	r3, [pc, #380]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c72:	4a5e      	ldr	r2, [pc, #376]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007c74:	f043 0304 	orr.w	r3, r3, #4
 8007c78:	6713      	str	r3, [r2, #112]	; 0x70
 8007c7a:	4b5c      	ldr	r3, [pc, #368]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7e:	4a5b      	ldr	r2, [pc, #364]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007c80:	f043 0301 	orr.w	r3, r3, #1
 8007c84:	6713      	str	r3, [r2, #112]	; 0x70
 8007c86:	e00b      	b.n	8007ca0 <HAL_RCC_OscConfig+0x324>
 8007c88:	4b58      	ldr	r3, [pc, #352]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c8c:	4a57      	ldr	r2, [pc, #348]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007c8e:	f023 0301 	bic.w	r3, r3, #1
 8007c92:	6713      	str	r3, [r2, #112]	; 0x70
 8007c94:	4b55      	ldr	r3, [pc, #340]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c98:	4a54      	ldr	r2, [pc, #336]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007c9a:	f023 0304 	bic.w	r3, r3, #4
 8007c9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d015      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ca8:	f7fc ffde 	bl	8004c68 <HAL_GetTick>
 8007cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cae:	e00a      	b.n	8007cc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cb0:	f7fc ffda 	bl	8004c68 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d901      	bls.n	8007cc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e0cb      	b.n	8007e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cc6:	4b49      	ldr	r3, [pc, #292]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0ee      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x334>
 8007cd2:	e014      	b.n	8007cfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cd4:	f7fc ffc8 	bl	8004c68 <HAL_GetTick>
 8007cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cda:	e00a      	b.n	8007cf2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cdc:	f7fc ffc4 	bl	8004c68 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d901      	bls.n	8007cf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e0b5      	b.n	8007e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cf2:	4b3e      	ldr	r3, [pc, #248]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1ee      	bne.n	8007cdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d105      	bne.n	8007d10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d04:	4b39      	ldr	r3, [pc, #228]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	4a38      	ldr	r2, [pc, #224]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 80a1 	beq.w	8007e5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d1a:	4b34      	ldr	r3, [pc, #208]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f003 030c 	and.w	r3, r3, #12
 8007d22:	2b08      	cmp	r3, #8
 8007d24:	d05c      	beq.n	8007de0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d141      	bne.n	8007db2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d2e:	4b31      	ldr	r3, [pc, #196]	; (8007df4 <HAL_RCC_OscConfig+0x478>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d34:	f7fc ff98 	bl	8004c68 <HAL_GetTick>
 8007d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d3a:	e008      	b.n	8007d4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d3c:	f7fc ff94 	bl	8004c68 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d901      	bls.n	8007d4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e087      	b.n	8007e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d4e:	4b27      	ldr	r3, [pc, #156]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1f0      	bne.n	8007d3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	69da      	ldr	r2, [r3, #28]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d68:	019b      	lsls	r3, r3, #6
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d70:	085b      	lsrs	r3, r3, #1
 8007d72:	3b01      	subs	r3, #1
 8007d74:	041b      	lsls	r3, r3, #16
 8007d76:	431a      	orrs	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	061b      	lsls	r3, r3, #24
 8007d7e:	491b      	ldr	r1, [pc, #108]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d84:	4b1b      	ldr	r3, [pc, #108]	; (8007df4 <HAL_RCC_OscConfig+0x478>)
 8007d86:	2201      	movs	r2, #1
 8007d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d8a:	f7fc ff6d 	bl	8004c68 <HAL_GetTick>
 8007d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d90:	e008      	b.n	8007da4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d92:	f7fc ff69 	bl	8004c68 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d901      	bls.n	8007da4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e05c      	b.n	8007e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007da4:	4b11      	ldr	r3, [pc, #68]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d0f0      	beq.n	8007d92 <HAL_RCC_OscConfig+0x416>
 8007db0:	e054      	b.n	8007e5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007db2:	4b10      	ldr	r3, [pc, #64]	; (8007df4 <HAL_RCC_OscConfig+0x478>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007db8:	f7fc ff56 	bl	8004c68 <HAL_GetTick>
 8007dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dbe:	e008      	b.n	8007dd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dc0:	f7fc ff52 	bl	8004c68 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e045      	b.n	8007e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dd2:	4b06      	ldr	r3, [pc, #24]	; (8007dec <HAL_RCC_OscConfig+0x470>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1f0      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x444>
 8007dde:	e03d      	b.n	8007e5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d107      	bne.n	8007df8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e038      	b.n	8007e5e <HAL_RCC_OscConfig+0x4e2>
 8007dec:	40023800 	.word	0x40023800
 8007df0:	40007000 	.word	0x40007000
 8007df4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007df8:	4b1b      	ldr	r3, [pc, #108]	; (8007e68 <HAL_RCC_OscConfig+0x4ec>)
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d028      	beq.n	8007e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d121      	bne.n	8007e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d11a      	bne.n	8007e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e28:	4013      	ands	r3, r2
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d111      	bne.n	8007e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3e:	085b      	lsrs	r3, r3, #1
 8007e40:	3b01      	subs	r3, #1
 8007e42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d107      	bne.n	8007e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d001      	beq.n	8007e5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e000      	b.n	8007e5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	40023800 	.word	0x40023800

08007e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e0cc      	b.n	800801a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e80:	4b68      	ldr	r3, [pc, #416]	; (8008024 <HAL_RCC_ClockConfig+0x1b8>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0307 	and.w	r3, r3, #7
 8007e88:	683a      	ldr	r2, [r7, #0]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d90c      	bls.n	8007ea8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e8e:	4b65      	ldr	r3, [pc, #404]	; (8008024 <HAL_RCC_ClockConfig+0x1b8>)
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	b2d2      	uxtb	r2, r2
 8007e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e96:	4b63      	ldr	r3, [pc, #396]	; (8008024 <HAL_RCC_ClockConfig+0x1b8>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0307 	and.w	r3, r3, #7
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d001      	beq.n	8007ea8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e0b8      	b.n	800801a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0302 	and.w	r3, r3, #2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d020      	beq.n	8007ef6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0304 	and.w	r3, r3, #4
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d005      	beq.n	8007ecc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ec0:	4b59      	ldr	r3, [pc, #356]	; (8008028 <HAL_RCC_ClockConfig+0x1bc>)
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	4a58      	ldr	r2, [pc, #352]	; (8008028 <HAL_RCC_ClockConfig+0x1bc>)
 8007ec6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007eca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0308 	and.w	r3, r3, #8
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d005      	beq.n	8007ee4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ed8:	4b53      	ldr	r3, [pc, #332]	; (8008028 <HAL_RCC_ClockConfig+0x1bc>)
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	4a52      	ldr	r2, [pc, #328]	; (8008028 <HAL_RCC_ClockConfig+0x1bc>)
 8007ede:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ee2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ee4:	4b50      	ldr	r3, [pc, #320]	; (8008028 <HAL_RCC_ClockConfig+0x1bc>)
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	494d      	ldr	r1, [pc, #308]	; (8008028 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d044      	beq.n	8007f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d107      	bne.n	8007f1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f0a:	4b47      	ldr	r3, [pc, #284]	; (8008028 <HAL_RCC_ClockConfig+0x1bc>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d119      	bne.n	8007f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e07f      	b.n	800801a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d003      	beq.n	8007f2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	d107      	bne.n	8007f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f2a:	4b3f      	ldr	r3, [pc, #252]	; (8008028 <HAL_RCC_ClockConfig+0x1bc>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d109      	bne.n	8007f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e06f      	b.n	800801a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f3a:	4b3b      	ldr	r3, [pc, #236]	; (8008028 <HAL_RCC_ClockConfig+0x1bc>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e067      	b.n	800801a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f4a:	4b37      	ldr	r3, [pc, #220]	; (8008028 <HAL_RCC_ClockConfig+0x1bc>)
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f023 0203 	bic.w	r2, r3, #3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	4934      	ldr	r1, [pc, #208]	; (8008028 <HAL_RCC_ClockConfig+0x1bc>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f5c:	f7fc fe84 	bl	8004c68 <HAL_GetTick>
 8007f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f62:	e00a      	b.n	8007f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f64:	f7fc fe80 	bl	8004c68 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d901      	bls.n	8007f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e04f      	b.n	800801a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f7a:	4b2b      	ldr	r3, [pc, #172]	; (8008028 <HAL_RCC_ClockConfig+0x1bc>)
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f003 020c 	and.w	r2, r3, #12
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d1eb      	bne.n	8007f64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f8c:	4b25      	ldr	r3, [pc, #148]	; (8008024 <HAL_RCC_ClockConfig+0x1b8>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0307 	and.w	r3, r3, #7
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d20c      	bcs.n	8007fb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f9a:	4b22      	ldr	r3, [pc, #136]	; (8008024 <HAL_RCC_ClockConfig+0x1b8>)
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	b2d2      	uxtb	r2, r2
 8007fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fa2:	4b20      	ldr	r3, [pc, #128]	; (8008024 <HAL_RCC_ClockConfig+0x1b8>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0307 	and.w	r3, r3, #7
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d001      	beq.n	8007fb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e032      	b.n	800801a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d008      	beq.n	8007fd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fc0:	4b19      	ldr	r3, [pc, #100]	; (8008028 <HAL_RCC_ClockConfig+0x1bc>)
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	4916      	ldr	r1, [pc, #88]	; (8008028 <HAL_RCC_ClockConfig+0x1bc>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0308 	and.w	r3, r3, #8
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d009      	beq.n	8007ff2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007fde:	4b12      	ldr	r3, [pc, #72]	; (8008028 <HAL_RCC_ClockConfig+0x1bc>)
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	490e      	ldr	r1, [pc, #56]	; (8008028 <HAL_RCC_ClockConfig+0x1bc>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ff2:	f000 f821 	bl	8008038 <HAL_RCC_GetSysClockFreq>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	4b0b      	ldr	r3, [pc, #44]	; (8008028 <HAL_RCC_ClockConfig+0x1bc>)
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	091b      	lsrs	r3, r3, #4
 8007ffe:	f003 030f 	and.w	r3, r3, #15
 8008002:	490a      	ldr	r1, [pc, #40]	; (800802c <HAL_RCC_ClockConfig+0x1c0>)
 8008004:	5ccb      	ldrb	r3, [r1, r3]
 8008006:	fa22 f303 	lsr.w	r3, r2, r3
 800800a:	4a09      	ldr	r2, [pc, #36]	; (8008030 <HAL_RCC_ClockConfig+0x1c4>)
 800800c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800800e:	4b09      	ldr	r3, [pc, #36]	; (8008034 <HAL_RCC_ClockConfig+0x1c8>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f7fc fde4 	bl	8004be0 <HAL_InitTick>

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	40023c00 	.word	0x40023c00
 8008028:	40023800 	.word	0x40023800
 800802c:	0800affc 	.word	0x0800affc
 8008030:	200003b8 	.word	0x200003b8
 8008034:	200003bc 	.word	0x200003bc

08008038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800803c:	b094      	sub	sp, #80	; 0x50
 800803e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008040:	2300      	movs	r3, #0
 8008042:	647b      	str	r3, [r7, #68]	; 0x44
 8008044:	2300      	movs	r3, #0
 8008046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008048:	2300      	movs	r3, #0
 800804a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008050:	4b79      	ldr	r3, [pc, #484]	; (8008238 <HAL_RCC_GetSysClockFreq+0x200>)
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f003 030c 	and.w	r3, r3, #12
 8008058:	2b08      	cmp	r3, #8
 800805a:	d00d      	beq.n	8008078 <HAL_RCC_GetSysClockFreq+0x40>
 800805c:	2b08      	cmp	r3, #8
 800805e:	f200 80e1 	bhi.w	8008224 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008062:	2b00      	cmp	r3, #0
 8008064:	d002      	beq.n	800806c <HAL_RCC_GetSysClockFreq+0x34>
 8008066:	2b04      	cmp	r3, #4
 8008068:	d003      	beq.n	8008072 <HAL_RCC_GetSysClockFreq+0x3a>
 800806a:	e0db      	b.n	8008224 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800806c:	4b73      	ldr	r3, [pc, #460]	; (800823c <HAL_RCC_GetSysClockFreq+0x204>)
 800806e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008070:	e0db      	b.n	800822a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008072:	4b73      	ldr	r3, [pc, #460]	; (8008240 <HAL_RCC_GetSysClockFreq+0x208>)
 8008074:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008076:	e0d8      	b.n	800822a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008078:	4b6f      	ldr	r3, [pc, #444]	; (8008238 <HAL_RCC_GetSysClockFreq+0x200>)
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008080:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008082:	4b6d      	ldr	r3, [pc, #436]	; (8008238 <HAL_RCC_GetSysClockFreq+0x200>)
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d063      	beq.n	8008156 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800808e:	4b6a      	ldr	r3, [pc, #424]	; (8008238 <HAL_RCC_GetSysClockFreq+0x200>)
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	099b      	lsrs	r3, r3, #6
 8008094:	2200      	movs	r2, #0
 8008096:	63bb      	str	r3, [r7, #56]	; 0x38
 8008098:	63fa      	str	r2, [r7, #60]	; 0x3c
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a0:	633b      	str	r3, [r7, #48]	; 0x30
 80080a2:	2300      	movs	r3, #0
 80080a4:	637b      	str	r3, [r7, #52]	; 0x34
 80080a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80080aa:	4622      	mov	r2, r4
 80080ac:	462b      	mov	r3, r5
 80080ae:	f04f 0000 	mov.w	r0, #0
 80080b2:	f04f 0100 	mov.w	r1, #0
 80080b6:	0159      	lsls	r1, r3, #5
 80080b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080bc:	0150      	lsls	r0, r2, #5
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	4621      	mov	r1, r4
 80080c4:	1a51      	subs	r1, r2, r1
 80080c6:	6139      	str	r1, [r7, #16]
 80080c8:	4629      	mov	r1, r5
 80080ca:	eb63 0301 	sbc.w	r3, r3, r1
 80080ce:	617b      	str	r3, [r7, #20]
 80080d0:	f04f 0200 	mov.w	r2, #0
 80080d4:	f04f 0300 	mov.w	r3, #0
 80080d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080dc:	4659      	mov	r1, fp
 80080de:	018b      	lsls	r3, r1, #6
 80080e0:	4651      	mov	r1, sl
 80080e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80080e6:	4651      	mov	r1, sl
 80080e8:	018a      	lsls	r2, r1, #6
 80080ea:	4651      	mov	r1, sl
 80080ec:	ebb2 0801 	subs.w	r8, r2, r1
 80080f0:	4659      	mov	r1, fp
 80080f2:	eb63 0901 	sbc.w	r9, r3, r1
 80080f6:	f04f 0200 	mov.w	r2, #0
 80080fa:	f04f 0300 	mov.w	r3, #0
 80080fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800810a:	4690      	mov	r8, r2
 800810c:	4699      	mov	r9, r3
 800810e:	4623      	mov	r3, r4
 8008110:	eb18 0303 	adds.w	r3, r8, r3
 8008114:	60bb      	str	r3, [r7, #8]
 8008116:	462b      	mov	r3, r5
 8008118:	eb49 0303 	adc.w	r3, r9, r3
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	f04f 0200 	mov.w	r2, #0
 8008122:	f04f 0300 	mov.w	r3, #0
 8008126:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800812a:	4629      	mov	r1, r5
 800812c:	024b      	lsls	r3, r1, #9
 800812e:	4621      	mov	r1, r4
 8008130:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008134:	4621      	mov	r1, r4
 8008136:	024a      	lsls	r2, r1, #9
 8008138:	4610      	mov	r0, r2
 800813a:	4619      	mov	r1, r3
 800813c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800813e:	2200      	movs	r2, #0
 8008140:	62bb      	str	r3, [r7, #40]	; 0x28
 8008142:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008144:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008148:	f7f8 fc84 	bl	8000a54 <__aeabi_uldivmod>
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	4613      	mov	r3, r2
 8008152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008154:	e058      	b.n	8008208 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008156:	4b38      	ldr	r3, [pc, #224]	; (8008238 <HAL_RCC_GetSysClockFreq+0x200>)
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	099b      	lsrs	r3, r3, #6
 800815c:	2200      	movs	r2, #0
 800815e:	4618      	mov	r0, r3
 8008160:	4611      	mov	r1, r2
 8008162:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008166:	623b      	str	r3, [r7, #32]
 8008168:	2300      	movs	r3, #0
 800816a:	627b      	str	r3, [r7, #36]	; 0x24
 800816c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008170:	4642      	mov	r2, r8
 8008172:	464b      	mov	r3, r9
 8008174:	f04f 0000 	mov.w	r0, #0
 8008178:	f04f 0100 	mov.w	r1, #0
 800817c:	0159      	lsls	r1, r3, #5
 800817e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008182:	0150      	lsls	r0, r2, #5
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4641      	mov	r1, r8
 800818a:	ebb2 0a01 	subs.w	sl, r2, r1
 800818e:	4649      	mov	r1, r9
 8008190:	eb63 0b01 	sbc.w	fp, r3, r1
 8008194:	f04f 0200 	mov.w	r2, #0
 8008198:	f04f 0300 	mov.w	r3, #0
 800819c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80081a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80081a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80081a8:	ebb2 040a 	subs.w	r4, r2, sl
 80081ac:	eb63 050b 	sbc.w	r5, r3, fp
 80081b0:	f04f 0200 	mov.w	r2, #0
 80081b4:	f04f 0300 	mov.w	r3, #0
 80081b8:	00eb      	lsls	r3, r5, #3
 80081ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081be:	00e2      	lsls	r2, r4, #3
 80081c0:	4614      	mov	r4, r2
 80081c2:	461d      	mov	r5, r3
 80081c4:	4643      	mov	r3, r8
 80081c6:	18e3      	adds	r3, r4, r3
 80081c8:	603b      	str	r3, [r7, #0]
 80081ca:	464b      	mov	r3, r9
 80081cc:	eb45 0303 	adc.w	r3, r5, r3
 80081d0:	607b      	str	r3, [r7, #4]
 80081d2:	f04f 0200 	mov.w	r2, #0
 80081d6:	f04f 0300 	mov.w	r3, #0
 80081da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80081de:	4629      	mov	r1, r5
 80081e0:	028b      	lsls	r3, r1, #10
 80081e2:	4621      	mov	r1, r4
 80081e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80081e8:	4621      	mov	r1, r4
 80081ea:	028a      	lsls	r2, r1, #10
 80081ec:	4610      	mov	r0, r2
 80081ee:	4619      	mov	r1, r3
 80081f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f2:	2200      	movs	r2, #0
 80081f4:	61bb      	str	r3, [r7, #24]
 80081f6:	61fa      	str	r2, [r7, #28]
 80081f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081fc:	f7f8 fc2a 	bl	8000a54 <__aeabi_uldivmod>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	4613      	mov	r3, r2
 8008206:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008208:	4b0b      	ldr	r3, [pc, #44]	; (8008238 <HAL_RCC_GetSysClockFreq+0x200>)
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	0c1b      	lsrs	r3, r3, #16
 800820e:	f003 0303 	and.w	r3, r3, #3
 8008212:	3301      	adds	r3, #1
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008218:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800821a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800821c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008220:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008222:	e002      	b.n	800822a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008224:	4b05      	ldr	r3, [pc, #20]	; (800823c <HAL_RCC_GetSysClockFreq+0x204>)
 8008226:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800822a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800822c:	4618      	mov	r0, r3
 800822e:	3750      	adds	r7, #80	; 0x50
 8008230:	46bd      	mov	sp, r7
 8008232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008236:	bf00      	nop
 8008238:	40023800 	.word	0x40023800
 800823c:	00f42400 	.word	0x00f42400
 8008240:	007a1200 	.word	0x007a1200

08008244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008244:	b480      	push	{r7}
 8008246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008248:	4b03      	ldr	r3, [pc, #12]	; (8008258 <HAL_RCC_GetHCLKFreq+0x14>)
 800824a:	681b      	ldr	r3, [r3, #0]
}
 800824c:	4618      	mov	r0, r3
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	200003b8 	.word	0x200003b8

0800825c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008260:	f7ff fff0 	bl	8008244 <HAL_RCC_GetHCLKFreq>
 8008264:	4602      	mov	r2, r0
 8008266:	4b05      	ldr	r3, [pc, #20]	; (800827c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	0a9b      	lsrs	r3, r3, #10
 800826c:	f003 0307 	and.w	r3, r3, #7
 8008270:	4903      	ldr	r1, [pc, #12]	; (8008280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008272:	5ccb      	ldrb	r3, [r1, r3]
 8008274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008278:	4618      	mov	r0, r3
 800827a:	bd80      	pop	{r7, pc}
 800827c:	40023800 	.word	0x40023800
 8008280:	0800b00c 	.word	0x0800b00c

08008284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008288:	f7ff ffdc 	bl	8008244 <HAL_RCC_GetHCLKFreq>
 800828c:	4602      	mov	r2, r0
 800828e:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	0b5b      	lsrs	r3, r3, #13
 8008294:	f003 0307 	and.w	r3, r3, #7
 8008298:	4903      	ldr	r1, [pc, #12]	; (80082a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800829a:	5ccb      	ldrb	r3, [r1, r3]
 800829c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	40023800 	.word	0x40023800
 80082a8:	0800b00c 	.word	0x0800b00c

080082ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e041      	b.n	8008342 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d106      	bne.n	80082d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7fc fa6a 	bl	80047ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2202      	movs	r2, #2
 80082dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	3304      	adds	r3, #4
 80082e8:	4619      	mov	r1, r3
 80082ea:	4610      	mov	r0, r2
 80082ec:	f000 fdac 	bl	8008e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
	...

0800834c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b01      	cmp	r3, #1
 800835e:	d001      	beq.n	8008364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e044      	b.n	80083ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68da      	ldr	r2, [r3, #12]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0201 	orr.w	r2, r2, #1
 800837a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a1e      	ldr	r2, [pc, #120]	; (80083fc <HAL_TIM_Base_Start_IT+0xb0>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d018      	beq.n	80083b8 <HAL_TIM_Base_Start_IT+0x6c>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800838e:	d013      	beq.n	80083b8 <HAL_TIM_Base_Start_IT+0x6c>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a1a      	ldr	r2, [pc, #104]	; (8008400 <HAL_TIM_Base_Start_IT+0xb4>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d00e      	beq.n	80083b8 <HAL_TIM_Base_Start_IT+0x6c>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a19      	ldr	r2, [pc, #100]	; (8008404 <HAL_TIM_Base_Start_IT+0xb8>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d009      	beq.n	80083b8 <HAL_TIM_Base_Start_IT+0x6c>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a17      	ldr	r2, [pc, #92]	; (8008408 <HAL_TIM_Base_Start_IT+0xbc>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d004      	beq.n	80083b8 <HAL_TIM_Base_Start_IT+0x6c>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a16      	ldr	r2, [pc, #88]	; (800840c <HAL_TIM_Base_Start_IT+0xc0>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d111      	bne.n	80083dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f003 0307 	and.w	r3, r3, #7
 80083c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2b06      	cmp	r3, #6
 80083c8:	d010      	beq.n	80083ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f042 0201 	orr.w	r2, r2, #1
 80083d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083da:	e007      	b.n	80083ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f042 0201 	orr.w	r2, r2, #1
 80083ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	40010000 	.word	0x40010000
 8008400:	40000400 	.word	0x40000400
 8008404:	40000800 	.word	0x40000800
 8008408:	40000c00 	.word	0x40000c00
 800840c:	40014000 	.word	0x40014000

08008410 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68da      	ldr	r2, [r3, #12]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 0201 	bic.w	r2, r2, #1
 8008426:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6a1a      	ldr	r2, [r3, #32]
 800842e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008432:	4013      	ands	r3, r2
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10f      	bne.n	8008458 <HAL_TIM_Base_Stop_IT+0x48>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6a1a      	ldr	r2, [r3, #32]
 800843e:	f240 4344 	movw	r3, #1092	; 0x444
 8008442:	4013      	ands	r3, r2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d107      	bne.n	8008458 <HAL_TIM_Base_Stop_IT+0x48>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f022 0201 	bic.w	r2, r2, #1
 8008456:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b082      	sub	sp, #8
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e041      	b.n	8008504 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	d106      	bne.n	800849a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7fc f91b 	bl	80046d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2202      	movs	r2, #2
 800849e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	3304      	adds	r3, #4
 80084aa:	4619      	mov	r1, r3
 80084ac:	4610      	mov	r0, r2
 80084ae:	f000 fccb 	bl	8008e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d109      	bne.n	8008530 <HAL_TIM_PWM_Start+0x24>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b01      	cmp	r3, #1
 8008526:	bf14      	ite	ne
 8008528:	2301      	movne	r3, #1
 800852a:	2300      	moveq	r3, #0
 800852c:	b2db      	uxtb	r3, r3
 800852e:	e022      	b.n	8008576 <HAL_TIM_PWM_Start+0x6a>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b04      	cmp	r3, #4
 8008534:	d109      	bne.n	800854a <HAL_TIM_PWM_Start+0x3e>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b01      	cmp	r3, #1
 8008540:	bf14      	ite	ne
 8008542:	2301      	movne	r3, #1
 8008544:	2300      	moveq	r3, #0
 8008546:	b2db      	uxtb	r3, r3
 8008548:	e015      	b.n	8008576 <HAL_TIM_PWM_Start+0x6a>
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2b08      	cmp	r3, #8
 800854e:	d109      	bne.n	8008564 <HAL_TIM_PWM_Start+0x58>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b01      	cmp	r3, #1
 800855a:	bf14      	ite	ne
 800855c:	2301      	movne	r3, #1
 800855e:	2300      	moveq	r3, #0
 8008560:	b2db      	uxtb	r3, r3
 8008562:	e008      	b.n	8008576 <HAL_TIM_PWM_Start+0x6a>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b01      	cmp	r3, #1
 800856e:	bf14      	ite	ne
 8008570:	2301      	movne	r3, #1
 8008572:	2300      	moveq	r3, #0
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e068      	b.n	8008650 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d104      	bne.n	800858e <HAL_TIM_PWM_Start+0x82>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2202      	movs	r2, #2
 8008588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800858c:	e013      	b.n	80085b6 <HAL_TIM_PWM_Start+0xaa>
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2b04      	cmp	r3, #4
 8008592:	d104      	bne.n	800859e <HAL_TIM_PWM_Start+0x92>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2202      	movs	r2, #2
 8008598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800859c:	e00b      	b.n	80085b6 <HAL_TIM_PWM_Start+0xaa>
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2b08      	cmp	r3, #8
 80085a2:	d104      	bne.n	80085ae <HAL_TIM_PWM_Start+0xa2>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085ac:	e003      	b.n	80085b6 <HAL_TIM_PWM_Start+0xaa>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2202      	movs	r2, #2
 80085b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2201      	movs	r2, #1
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fee8 	bl	8009394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a23      	ldr	r2, [pc, #140]	; (8008658 <HAL_TIM_PWM_Start+0x14c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d107      	bne.n	80085de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a1d      	ldr	r2, [pc, #116]	; (8008658 <HAL_TIM_PWM_Start+0x14c>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d018      	beq.n	800861a <HAL_TIM_PWM_Start+0x10e>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085f0:	d013      	beq.n	800861a <HAL_TIM_PWM_Start+0x10e>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a19      	ldr	r2, [pc, #100]	; (800865c <HAL_TIM_PWM_Start+0x150>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d00e      	beq.n	800861a <HAL_TIM_PWM_Start+0x10e>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a17      	ldr	r2, [pc, #92]	; (8008660 <HAL_TIM_PWM_Start+0x154>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d009      	beq.n	800861a <HAL_TIM_PWM_Start+0x10e>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a16      	ldr	r2, [pc, #88]	; (8008664 <HAL_TIM_PWM_Start+0x158>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d004      	beq.n	800861a <HAL_TIM_PWM_Start+0x10e>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a14      	ldr	r2, [pc, #80]	; (8008668 <HAL_TIM_PWM_Start+0x15c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d111      	bne.n	800863e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f003 0307 	and.w	r3, r3, #7
 8008624:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b06      	cmp	r3, #6
 800862a:	d010      	beq.n	800864e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f042 0201 	orr.w	r2, r2, #1
 800863a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800863c:	e007      	b.n	800864e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f042 0201 	orr.w	r2, r2, #1
 800864c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	40010000 	.word	0x40010000
 800865c:	40000400 	.word	0x40000400
 8008660:	40000800 	.word	0x40000800
 8008664:	40000c00 	.word	0x40000c00
 8008668:	40014000 	.word	0x40014000

0800866c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e097      	b.n	80087b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008686:	b2db      	uxtb	r3, r3
 8008688:	2b00      	cmp	r3, #0
 800868a:	d106      	bne.n	800869a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7fc f843 	bl	8004720 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2202      	movs	r2, #2
 800869e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	6812      	ldr	r2, [r2, #0]
 80086ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086b0:	f023 0307 	bic.w	r3, r3, #7
 80086b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	3304      	adds	r3, #4
 80086be:	4619      	mov	r1, r3
 80086c0:	4610      	mov	r0, r2
 80086c2:	f000 fbc1 	bl	8008e48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086ee:	f023 0303 	bic.w	r3, r3, #3
 80086f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	689a      	ldr	r2, [r3, #8]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	021b      	lsls	r3, r3, #8
 80086fe:	4313      	orrs	r3, r2
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	4313      	orrs	r3, r2
 8008704:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800870c:	f023 030c 	bic.w	r3, r3, #12
 8008710:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008718:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800871c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	021b      	lsls	r3, r3, #8
 8008728:	4313      	orrs	r3, r2
 800872a:	693a      	ldr	r2, [r7, #16]
 800872c:	4313      	orrs	r3, r2
 800872e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	011a      	lsls	r2, r3, #4
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	031b      	lsls	r3, r3, #12
 800873c:	4313      	orrs	r3, r2
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	4313      	orrs	r3, r2
 8008742:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800874a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008752:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	011b      	lsls	r3, r3, #4
 800875e:	4313      	orrs	r3, r2
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	4313      	orrs	r3, r2
 8008764:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3718      	adds	r7, #24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80087e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d110      	bne.n	800880a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d102      	bne.n	80087f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80087ee:	7b7b      	ldrb	r3, [r7, #13]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d001      	beq.n	80087f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e069      	b.n	80088cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2202      	movs	r2, #2
 80087fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2202      	movs	r2, #2
 8008804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008808:	e031      	b.n	800886e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b04      	cmp	r3, #4
 800880e:	d110      	bne.n	8008832 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008810:	7bbb      	ldrb	r3, [r7, #14]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d102      	bne.n	800881c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008816:	7b3b      	ldrb	r3, [r7, #12]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d001      	beq.n	8008820 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e055      	b.n	80088cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2202      	movs	r2, #2
 8008824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008830:	e01d      	b.n	800886e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d108      	bne.n	800884a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008838:	7bbb      	ldrb	r3, [r7, #14]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d105      	bne.n	800884a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800883e:	7b7b      	ldrb	r3, [r7, #13]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d102      	bne.n	800884a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008844:	7b3b      	ldrb	r3, [r7, #12]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d001      	beq.n	800884e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e03e      	b.n	80088cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2202      	movs	r2, #2
 8008852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2202      	movs	r2, #2
 800885a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2202      	movs	r2, #2
 8008862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2202      	movs	r2, #2
 800886a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <HAL_TIM_Encoder_Start+0xc4>
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	2b04      	cmp	r3, #4
 8008878:	d008      	beq.n	800888c <HAL_TIM_Encoder_Start+0xd4>
 800887a:	e00f      	b.n	800889c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2201      	movs	r2, #1
 8008882:	2100      	movs	r1, #0
 8008884:	4618      	mov	r0, r3
 8008886:	f000 fd85 	bl	8009394 <TIM_CCxChannelCmd>
      break;
 800888a:	e016      	b.n	80088ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2201      	movs	r2, #1
 8008892:	2104      	movs	r1, #4
 8008894:	4618      	mov	r0, r3
 8008896:	f000 fd7d 	bl	8009394 <TIM_CCxChannelCmd>
      break;
 800889a:	e00e      	b.n	80088ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2201      	movs	r2, #1
 80088a2:	2100      	movs	r1, #0
 80088a4:	4618      	mov	r0, r3
 80088a6:	f000 fd75 	bl	8009394 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2201      	movs	r2, #1
 80088b0:	2104      	movs	r1, #4
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 fd6e 	bl	8009394 <TIM_CCxChannelCmd>
      break;
 80088b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f042 0201 	orr.w	r2, r2, #1
 80088c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d122      	bne.n	8008930 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	f003 0302 	and.w	r3, r3, #2
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d11b      	bne.n	8008930 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f06f 0202 	mvn.w	r2, #2
 8008900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	f003 0303 	and.w	r3, r3, #3
 8008912:	2b00      	cmp	r3, #0
 8008914:	d003      	beq.n	800891e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fa77 	bl	8008e0a <HAL_TIM_IC_CaptureCallback>
 800891c:	e005      	b.n	800892a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fa69 	bl	8008df6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 fa7a 	bl	8008e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	f003 0304 	and.w	r3, r3, #4
 800893a:	2b04      	cmp	r3, #4
 800893c:	d122      	bne.n	8008984 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	f003 0304 	and.w	r3, r3, #4
 8008948:	2b04      	cmp	r3, #4
 800894a:	d11b      	bne.n	8008984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f06f 0204 	mvn.w	r2, #4
 8008954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2202      	movs	r2, #2
 800895a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fa4d 	bl	8008e0a <HAL_TIM_IC_CaptureCallback>
 8008970:	e005      	b.n	800897e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fa3f 	bl	8008df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fa50 	bl	8008e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	f003 0308 	and.w	r3, r3, #8
 800898e:	2b08      	cmp	r3, #8
 8008990:	d122      	bne.n	80089d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f003 0308 	and.w	r3, r3, #8
 800899c:	2b08      	cmp	r3, #8
 800899e:	d11b      	bne.n	80089d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f06f 0208 	mvn.w	r2, #8
 80089a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2204      	movs	r2, #4
 80089ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	f003 0303 	and.w	r3, r3, #3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fa23 	bl	8008e0a <HAL_TIM_IC_CaptureCallback>
 80089c4:	e005      	b.n	80089d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fa15 	bl	8008df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fa26 	bl	8008e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	f003 0310 	and.w	r3, r3, #16
 80089e2:	2b10      	cmp	r3, #16
 80089e4:	d122      	bne.n	8008a2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f003 0310 	and.w	r3, r3, #16
 80089f0:	2b10      	cmp	r3, #16
 80089f2:	d11b      	bne.n	8008a2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f06f 0210 	mvn.w	r2, #16
 80089fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2208      	movs	r2, #8
 8008a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	69db      	ldr	r3, [r3, #28]
 8008a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f9f9 	bl	8008e0a <HAL_TIM_IC_CaptureCallback>
 8008a18:	e005      	b.n	8008a26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f9eb 	bl	8008df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f9fc 	bl	8008e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d10e      	bne.n	8008a58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d107      	bne.n	8008a58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f06f 0201 	mvn.w	r2, #1
 8008a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7fb fcf2 	bl	800443c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a62:	2b80      	cmp	r3, #128	; 0x80
 8008a64:	d10e      	bne.n	8008a84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a70:	2b80      	cmp	r3, #128	; 0x80
 8008a72:	d107      	bne.n	8008a84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fd78 	bl	8009574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8e:	2b40      	cmp	r3, #64	; 0x40
 8008a90:	d10e      	bne.n	8008ab0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9c:	2b40      	cmp	r3, #64	; 0x40
 8008a9e:	d107      	bne.n	8008ab0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f9c1 	bl	8008e32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	f003 0320 	and.w	r3, r3, #32
 8008aba:	2b20      	cmp	r3, #32
 8008abc:	d10e      	bne.n	8008adc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f003 0320 	and.w	r3, r3, #32
 8008ac8:	2b20      	cmp	r3, #32
 8008aca:	d107      	bne.n	8008adc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f06f 0220 	mvn.w	r2, #32
 8008ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fd42 	bl	8009560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008adc:	bf00      	nop
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d101      	bne.n	8008b02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008afe:	2302      	movs	r3, #2
 8008b00:	e0ae      	b.n	8008c60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2b0c      	cmp	r3, #12
 8008b0e:	f200 809f 	bhi.w	8008c50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008b12:	a201      	add	r2, pc, #4	; (adr r2, 8008b18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b18:	08008b4d 	.word	0x08008b4d
 8008b1c:	08008c51 	.word	0x08008c51
 8008b20:	08008c51 	.word	0x08008c51
 8008b24:	08008c51 	.word	0x08008c51
 8008b28:	08008b8d 	.word	0x08008b8d
 8008b2c:	08008c51 	.word	0x08008c51
 8008b30:	08008c51 	.word	0x08008c51
 8008b34:	08008c51 	.word	0x08008c51
 8008b38:	08008bcf 	.word	0x08008bcf
 8008b3c:	08008c51 	.word	0x08008c51
 8008b40:	08008c51 	.word	0x08008c51
 8008b44:	08008c51 	.word	0x08008c51
 8008b48:	08008c0f 	.word	0x08008c0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68b9      	ldr	r1, [r7, #8]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 f9f8 	bl	8008f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	699a      	ldr	r2, [r3, #24]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0208 	orr.w	r2, r2, #8
 8008b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	699a      	ldr	r2, [r3, #24]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 0204 	bic.w	r2, r2, #4
 8008b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6999      	ldr	r1, [r3, #24]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	691a      	ldr	r2, [r3, #16]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	430a      	orrs	r2, r1
 8008b88:	619a      	str	r2, [r3, #24]
      break;
 8008b8a:	e064      	b.n	8008c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68b9      	ldr	r1, [r7, #8]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 fa3e 	bl	8009014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	699a      	ldr	r2, [r3, #24]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	699a      	ldr	r2, [r3, #24]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6999      	ldr	r1, [r3, #24]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	021a      	lsls	r2, r3, #8
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	619a      	str	r2, [r3, #24]
      break;
 8008bcc:	e043      	b.n	8008c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68b9      	ldr	r1, [r7, #8]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f000 fa89 	bl	80090ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	69da      	ldr	r2, [r3, #28]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f042 0208 	orr.w	r2, r2, #8
 8008be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	69da      	ldr	r2, [r3, #28]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f022 0204 	bic.w	r2, r2, #4
 8008bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	69d9      	ldr	r1, [r3, #28]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	691a      	ldr	r2, [r3, #16]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	61da      	str	r2, [r3, #28]
      break;
 8008c0c:	e023      	b.n	8008c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68b9      	ldr	r1, [r7, #8]
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 fad3 	bl	80091c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	69da      	ldr	r2, [r3, #28]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	69da      	ldr	r2, [r3, #28]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	69d9      	ldr	r1, [r3, #28]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	021a      	lsls	r2, r3, #8
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	61da      	str	r2, [r3, #28]
      break;
 8008c4e:	e002      	b.n	8008c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	75fb      	strb	r3, [r7, #23]
      break;
 8008c54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d101      	bne.n	8008c84 <HAL_TIM_ConfigClockSource+0x1c>
 8008c80:	2302      	movs	r3, #2
 8008c82:	e0b4      	b.n	8008dee <HAL_TIM_ConfigClockSource+0x186>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2202      	movs	r2, #2
 8008c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008caa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cbc:	d03e      	beq.n	8008d3c <HAL_TIM_ConfigClockSource+0xd4>
 8008cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cc2:	f200 8087 	bhi.w	8008dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8008cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cca:	f000 8086 	beq.w	8008dda <HAL_TIM_ConfigClockSource+0x172>
 8008cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cd2:	d87f      	bhi.n	8008dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8008cd4:	2b70      	cmp	r3, #112	; 0x70
 8008cd6:	d01a      	beq.n	8008d0e <HAL_TIM_ConfigClockSource+0xa6>
 8008cd8:	2b70      	cmp	r3, #112	; 0x70
 8008cda:	d87b      	bhi.n	8008dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8008cdc:	2b60      	cmp	r3, #96	; 0x60
 8008cde:	d050      	beq.n	8008d82 <HAL_TIM_ConfigClockSource+0x11a>
 8008ce0:	2b60      	cmp	r3, #96	; 0x60
 8008ce2:	d877      	bhi.n	8008dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ce4:	2b50      	cmp	r3, #80	; 0x50
 8008ce6:	d03c      	beq.n	8008d62 <HAL_TIM_ConfigClockSource+0xfa>
 8008ce8:	2b50      	cmp	r3, #80	; 0x50
 8008cea:	d873      	bhi.n	8008dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8008cec:	2b40      	cmp	r3, #64	; 0x40
 8008cee:	d058      	beq.n	8008da2 <HAL_TIM_ConfigClockSource+0x13a>
 8008cf0:	2b40      	cmp	r3, #64	; 0x40
 8008cf2:	d86f      	bhi.n	8008dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8008cf4:	2b30      	cmp	r3, #48	; 0x30
 8008cf6:	d064      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8008cf8:	2b30      	cmp	r3, #48	; 0x30
 8008cfa:	d86b      	bhi.n	8008dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8008cfc:	2b20      	cmp	r3, #32
 8008cfe:	d060      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8008d00:	2b20      	cmp	r3, #32
 8008d02:	d867      	bhi.n	8008dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d05c      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8008d08:	2b10      	cmp	r3, #16
 8008d0a:	d05a      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8008d0c:	e062      	b.n	8008dd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6818      	ldr	r0, [r3, #0]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	6899      	ldr	r1, [r3, #8]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	f000 fb19 	bl	8009354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	609a      	str	r2, [r3, #8]
      break;
 8008d3a:	e04f      	b.n	8008ddc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6818      	ldr	r0, [r3, #0]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	6899      	ldr	r1, [r3, #8]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	f000 fb02 	bl	8009354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	689a      	ldr	r2, [r3, #8]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d5e:	609a      	str	r2, [r3, #8]
      break;
 8008d60:	e03c      	b.n	8008ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6818      	ldr	r0, [r3, #0]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	6859      	ldr	r1, [r3, #4]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	f000 fa76 	bl	8009260 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2150      	movs	r1, #80	; 0x50
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 facf 	bl	800931e <TIM_ITRx_SetConfig>
      break;
 8008d80:	e02c      	b.n	8008ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6818      	ldr	r0, [r3, #0]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	6859      	ldr	r1, [r3, #4]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	f000 fa95 	bl	80092be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2160      	movs	r1, #96	; 0x60
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 fabf 	bl	800931e <TIM_ITRx_SetConfig>
      break;
 8008da0:	e01c      	b.n	8008ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6818      	ldr	r0, [r3, #0]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	6859      	ldr	r1, [r3, #4]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	461a      	mov	r2, r3
 8008db0:	f000 fa56 	bl	8009260 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2140      	movs	r1, #64	; 0x40
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 faaf 	bl	800931e <TIM_ITRx_SetConfig>
      break;
 8008dc0:	e00c      	b.n	8008ddc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	4610      	mov	r0, r2
 8008dce:	f000 faa6 	bl	800931e <TIM_ITRx_SetConfig>
      break;
 8008dd2:	e003      	b.n	8008ddc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd8:	e000      	b.n	8008ddc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008dda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b083      	sub	sp, #12
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008dfe:	bf00      	nop
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b083      	sub	sp, #12
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e12:	bf00      	nop
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b083      	sub	sp, #12
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e26:	bf00      	nop
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b083      	sub	sp, #12
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e3a:	bf00      	nop
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
	...

08008e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a34      	ldr	r2, [pc, #208]	; (8008f2c <TIM_Base_SetConfig+0xe4>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d00f      	beq.n	8008e80 <TIM_Base_SetConfig+0x38>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e66:	d00b      	beq.n	8008e80 <TIM_Base_SetConfig+0x38>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a31      	ldr	r2, [pc, #196]	; (8008f30 <TIM_Base_SetConfig+0xe8>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d007      	beq.n	8008e80 <TIM_Base_SetConfig+0x38>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a30      	ldr	r2, [pc, #192]	; (8008f34 <TIM_Base_SetConfig+0xec>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d003      	beq.n	8008e80 <TIM_Base_SetConfig+0x38>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a2f      	ldr	r2, [pc, #188]	; (8008f38 <TIM_Base_SetConfig+0xf0>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d108      	bne.n	8008e92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a25      	ldr	r2, [pc, #148]	; (8008f2c <TIM_Base_SetConfig+0xe4>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d01b      	beq.n	8008ed2 <TIM_Base_SetConfig+0x8a>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea0:	d017      	beq.n	8008ed2 <TIM_Base_SetConfig+0x8a>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a22      	ldr	r2, [pc, #136]	; (8008f30 <TIM_Base_SetConfig+0xe8>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d013      	beq.n	8008ed2 <TIM_Base_SetConfig+0x8a>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a21      	ldr	r2, [pc, #132]	; (8008f34 <TIM_Base_SetConfig+0xec>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d00f      	beq.n	8008ed2 <TIM_Base_SetConfig+0x8a>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a20      	ldr	r2, [pc, #128]	; (8008f38 <TIM_Base_SetConfig+0xf0>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d00b      	beq.n	8008ed2 <TIM_Base_SetConfig+0x8a>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a1f      	ldr	r2, [pc, #124]	; (8008f3c <TIM_Base_SetConfig+0xf4>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d007      	beq.n	8008ed2 <TIM_Base_SetConfig+0x8a>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a1e      	ldr	r2, [pc, #120]	; (8008f40 <TIM_Base_SetConfig+0xf8>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d003      	beq.n	8008ed2 <TIM_Base_SetConfig+0x8a>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a1d      	ldr	r2, [pc, #116]	; (8008f44 <TIM_Base_SetConfig+0xfc>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d108      	bne.n	8008ee4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	689a      	ldr	r2, [r3, #8]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a08      	ldr	r2, [pc, #32]	; (8008f2c <TIM_Base_SetConfig+0xe4>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d103      	bne.n	8008f18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	691a      	ldr	r2, [r3, #16]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	615a      	str	r2, [r3, #20]
}
 8008f1e:	bf00      	nop
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	40010000 	.word	0x40010000
 8008f30:	40000400 	.word	0x40000400
 8008f34:	40000800 	.word	0x40000800
 8008f38:	40000c00 	.word	0x40000c00
 8008f3c:	40014000 	.word	0x40014000
 8008f40:	40014400 	.word	0x40014400
 8008f44:	40014800 	.word	0x40014800

08008f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b087      	sub	sp, #28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	f023 0201 	bic.w	r2, r3, #1
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a1b      	ldr	r3, [r3, #32]
 8008f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f023 0303 	bic.w	r3, r3, #3
 8008f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f023 0302 	bic.w	r3, r3, #2
 8008f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a1c      	ldr	r2, [pc, #112]	; (8009010 <TIM_OC1_SetConfig+0xc8>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d10c      	bne.n	8008fbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	f023 0308 	bic.w	r3, r3, #8
 8008faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	697a      	ldr	r2, [r7, #20]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f023 0304 	bic.w	r3, r3, #4
 8008fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a13      	ldr	r2, [pc, #76]	; (8009010 <TIM_OC1_SetConfig+0xc8>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d111      	bne.n	8008fea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	693a      	ldr	r2, [r7, #16]
 8008fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	685a      	ldr	r2, [r3, #4]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	621a      	str	r2, [r3, #32]
}
 8009004:	bf00      	nop
 8009006:	371c      	adds	r7, #28
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	40010000 	.word	0x40010000

08009014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009014:	b480      	push	{r7}
 8009016:	b087      	sub	sp, #28
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	f023 0210 	bic.w	r2, r3, #16
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800904a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	021b      	lsls	r3, r3, #8
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	4313      	orrs	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f023 0320 	bic.w	r3, r3, #32
 800905e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	4313      	orrs	r3, r2
 800906a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a1e      	ldr	r2, [pc, #120]	; (80090e8 <TIM_OC2_SetConfig+0xd4>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d10d      	bne.n	8009090 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800907a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	011b      	lsls	r3, r3, #4
 8009082:	697a      	ldr	r2, [r7, #20]
 8009084:	4313      	orrs	r3, r2
 8009086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800908e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a15      	ldr	r2, [pc, #84]	; (80090e8 <TIM_OC2_SetConfig+0xd4>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d113      	bne.n	80090c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800909e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	695b      	ldr	r3, [r3, #20]
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	693a      	ldr	r2, [r7, #16]
 80090bc:	4313      	orrs	r3, r2
 80090be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	621a      	str	r2, [r3, #32]
}
 80090da:	bf00      	nop
 80090dc:	371c      	adds	r7, #28
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	40010000 	.word	0x40010000

080090ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	69db      	ldr	r3, [r3, #28]
 8009112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800911a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f023 0303 	bic.w	r3, r3, #3
 8009122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	4313      	orrs	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	021b      	lsls	r3, r3, #8
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	4313      	orrs	r3, r2
 8009140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a1d      	ldr	r2, [pc, #116]	; (80091bc <TIM_OC3_SetConfig+0xd0>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d10d      	bne.n	8009166 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	021b      	lsls	r3, r3, #8
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	4313      	orrs	r3, r2
 800915c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a14      	ldr	r2, [pc, #80]	; (80091bc <TIM_OC3_SetConfig+0xd0>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d113      	bne.n	8009196 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800917c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	4313      	orrs	r3, r2
 8009188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	011b      	lsls	r3, r3, #4
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	4313      	orrs	r3, r2
 8009194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	621a      	str	r2, [r3, #32]
}
 80091b0:	bf00      	nop
 80091b2:	371c      	adds	r7, #28
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	40010000 	.word	0x40010000

080091c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	021b      	lsls	r3, r3, #8
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	4313      	orrs	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800920a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	031b      	lsls	r3, r3, #12
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	4313      	orrs	r3, r2
 8009216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a10      	ldr	r2, [pc, #64]	; (800925c <TIM_OC4_SetConfig+0x9c>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d109      	bne.n	8009234 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	019b      	lsls	r3, r3, #6
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	4313      	orrs	r3, r2
 8009232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	621a      	str	r2, [r3, #32]
}
 800924e:	bf00      	nop
 8009250:	371c      	adds	r7, #28
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	40010000 	.word	0x40010000

08009260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009260:	b480      	push	{r7}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6a1b      	ldr	r3, [r3, #32]
 8009270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	f023 0201 	bic.w	r2, r3, #1
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800928a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	011b      	lsls	r3, r3, #4
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	4313      	orrs	r3, r2
 8009294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f023 030a 	bic.w	r3, r3, #10
 800929c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	621a      	str	r2, [r3, #32]
}
 80092b2:	bf00      	nop
 80092b4:	371c      	adds	r7, #28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092be:	b480      	push	{r7}
 80092c0:	b087      	sub	sp, #28
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	f023 0210 	bic.w	r2, r3, #16
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6a1b      	ldr	r3, [r3, #32]
 80092e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	031b      	lsls	r3, r3, #12
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	011b      	lsls	r3, r3, #4
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	4313      	orrs	r3, r2
 8009304:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	697a      	ldr	r2, [r7, #20]
 800930a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	621a      	str	r2, [r3, #32]
}
 8009312:	bf00      	nop
 8009314:	371c      	adds	r7, #28
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr

0800931e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800931e:	b480      	push	{r7}
 8009320:	b085      	sub	sp, #20
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4313      	orrs	r3, r2
 800933c:	f043 0307 	orr.w	r3, r3, #7
 8009340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	609a      	str	r2, [r3, #8]
}
 8009348:	bf00      	nop
 800934a:	3714      	adds	r7, #20
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009354:	b480      	push	{r7}
 8009356:	b087      	sub	sp, #28
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
 8009360:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800936e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	021a      	lsls	r2, r3, #8
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	431a      	orrs	r2, r3
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	4313      	orrs	r3, r2
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	4313      	orrs	r3, r2
 8009380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	609a      	str	r2, [r3, #8]
}
 8009388:	bf00      	nop
 800938a:	371c      	adds	r7, #28
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009394:	b480      	push	{r7}
 8009396:	b087      	sub	sp, #28
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	f003 031f 	and.w	r3, r3, #31
 80093a6:	2201      	movs	r2, #1
 80093a8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6a1a      	ldr	r2, [r3, #32]
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	43db      	mvns	r3, r3
 80093b6:	401a      	ands	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6a1a      	ldr	r2, [r3, #32]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	f003 031f 	and.w	r3, r3, #31
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	fa01 f303 	lsl.w	r3, r1, r3
 80093cc:	431a      	orrs	r2, r3
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	621a      	str	r2, [r3, #32]
}
 80093d2:	bf00      	nop
 80093d4:	371c      	adds	r7, #28
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
	...

080093e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d101      	bne.n	80093f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093f4:	2302      	movs	r3, #2
 80093f6:	e050      	b.n	800949a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2202      	movs	r2, #2
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800941e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	4313      	orrs	r3, r2
 8009428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a1c      	ldr	r2, [pc, #112]	; (80094a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d018      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009444:	d013      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a18      	ldr	r2, [pc, #96]	; (80094ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d00e      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a16      	ldr	r2, [pc, #88]	; (80094b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d009      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a15      	ldr	r2, [pc, #84]	; (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d004      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a13      	ldr	r2, [pc, #76]	; (80094b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d10c      	bne.n	8009488 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	4313      	orrs	r3, r2
 800947e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	40010000 	.word	0x40010000
 80094ac:	40000400 	.word	0x40000400
 80094b0:	40000800 	.word	0x40000800
 80094b4:	40000c00 	.word	0x40000c00
 80094b8:	40014000 	.word	0x40014000

080094bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d101      	bne.n	80094d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80094d4:	2302      	movs	r3, #2
 80094d6:	e03d      	b.n	8009554 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	4313      	orrs	r3, r2
 8009508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4313      	orrs	r3, r2
 8009516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	4313      	orrs	r3, r2
 8009524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	695b      	ldr	r3, [r3, #20]
 8009530:	4313      	orrs	r3, r2
 8009532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	4313      	orrs	r3, r2
 8009540:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e03f      	b.n	800961a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d106      	bne.n	80095b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7fb f97c 	bl	80048ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2224      	movs	r2, #36	; 0x24
 80095b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68da      	ldr	r2, [r3, #12]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 ff81 	bl	800a4d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	691a      	ldr	r2, [r3, #16]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	695a      	ldr	r2, [r3, #20]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68da      	ldr	r2, [r3, #12]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2220      	movs	r2, #32
 800960c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2220      	movs	r2, #32
 8009614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
	...

08009624 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b08c      	sub	sp, #48	; 0x30
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	4613      	mov	r3, r2
 8009630:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b20      	cmp	r3, #32
 800963c:	d165      	bne.n	800970a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <HAL_UART_Transmit_DMA+0x26>
 8009644:	88fb      	ldrh	r3, [r7, #6]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e05e      	b.n	800970c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009654:	2b01      	cmp	r3, #1
 8009656:	d101      	bne.n	800965c <HAL_UART_Transmit_DMA+0x38>
 8009658:	2302      	movs	r3, #2
 800965a:	e057      	b.n	800970c <HAL_UART_Transmit_DMA+0xe8>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	88fa      	ldrh	r2, [r7, #6]
 800966e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	88fa      	ldrh	r2, [r7, #6]
 8009674:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2221      	movs	r2, #33	; 0x21
 8009680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009688:	4a22      	ldr	r2, [pc, #136]	; (8009714 <HAL_UART_Transmit_DMA+0xf0>)
 800968a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009690:	4a21      	ldr	r2, [pc, #132]	; (8009718 <HAL_UART_Transmit_DMA+0xf4>)
 8009692:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009698:	4a20      	ldr	r2, [pc, #128]	; (800971c <HAL_UART_Transmit_DMA+0xf8>)
 800969a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a0:	2200      	movs	r2, #0
 80096a2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80096a4:	f107 0308 	add.w	r3, r7, #8
 80096a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80096ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b0:	6819      	ldr	r1, [r3, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3304      	adds	r3, #4
 80096b8:	461a      	mov	r2, r3
 80096ba:	88fb      	ldrh	r3, [r7, #6]
 80096bc:	f7fb fca0 	bl	8005000 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80096c8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	3314      	adds	r3, #20
 80096d8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	e853 3f00 	ldrex	r3, [r3]
 80096e0:	617b      	str	r3, [r7, #20]
   return(result);
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3314      	adds	r3, #20
 80096f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096f2:	627a      	str	r2, [r7, #36]	; 0x24
 80096f4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f6:	6a39      	ldr	r1, [r7, #32]
 80096f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096fa:	e841 2300 	strex	r3, r2, [r1]
 80096fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1e5      	bne.n	80096d2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	e000      	b.n	800970c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800970a:	2302      	movs	r3, #2
  }
}
 800970c:	4618      	mov	r0, r3
 800970e:	3730      	adds	r7, #48	; 0x30
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	08009d6d 	.word	0x08009d6d
 8009718:	08009e07 	.word	0x08009e07
 800971c:	08009f7f 	.word	0x08009f7f

08009720 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08c      	sub	sp, #48	; 0x30
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	4613      	mov	r3, r2
 800972c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009734:	b2db      	uxtb	r3, r3
 8009736:	2b20      	cmp	r3, #32
 8009738:	d152      	bne.n	80097e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009740:	88fb      	ldrh	r3, [r7, #6]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e04b      	b.n	80097e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009754:	2302      	movs	r3, #2
 8009756:	e044      	b.n	80097e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2201      	movs	r2, #1
 8009764:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009766:	88fb      	ldrh	r3, [r7, #6]
 8009768:	461a      	mov	r2, r3
 800976a:	68b9      	ldr	r1, [r7, #8]
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f000 fc51 	bl	800a014 <UART_Start_Receive_DMA>
 8009772:	4603      	mov	r3, r0
 8009774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009778:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800977c:	2b00      	cmp	r3, #0
 800977e:	d12c      	bne.n	80097da <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009784:	2b01      	cmp	r3, #1
 8009786:	d125      	bne.n	80097d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009788:	2300      	movs	r3, #0
 800978a:	613b      	str	r3, [r7, #16]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	613b      	str	r3, [r7, #16]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	613b      	str	r3, [r7, #16]
 800979c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	330c      	adds	r3, #12
 80097a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	e853 3f00 	ldrex	r3, [r3]
 80097ac:	617b      	str	r3, [r7, #20]
   return(result);
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f043 0310 	orr.w	r3, r3, #16
 80097b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	330c      	adds	r3, #12
 80097bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097be:	627a      	str	r2, [r7, #36]	; 0x24
 80097c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c2:	6a39      	ldr	r1, [r7, #32]
 80097c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097c6:	e841 2300 	strex	r3, r2, [r1]
 80097ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1e5      	bne.n	800979e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80097d2:	e002      	b.n	80097da <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80097da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097de:	e000      	b.n	80097e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80097e0:	2302      	movs	r3, #2
  }
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3730      	adds	r7, #48	; 0x30
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
	...

080097ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b0ba      	sub	sp, #232	; 0xe8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009812:	2300      	movs	r3, #0
 8009814:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009818:	2300      	movs	r3, #0
 800981a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800981e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009822:	f003 030f 	and.w	r3, r3, #15
 8009826:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800982a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10f      	bne.n	8009852 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009836:	f003 0320 	and.w	r3, r3, #32
 800983a:	2b00      	cmp	r3, #0
 800983c:	d009      	beq.n	8009852 <HAL_UART_IRQHandler+0x66>
 800983e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009842:	f003 0320 	and.w	r3, r3, #32
 8009846:	2b00      	cmp	r3, #0
 8009848:	d003      	beq.n	8009852 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fd87 	bl	800a35e <UART_Receive_IT>
      return;
 8009850:	e256      	b.n	8009d00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009856:	2b00      	cmp	r3, #0
 8009858:	f000 80de 	beq.w	8009a18 <HAL_UART_IRQHandler+0x22c>
 800985c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009860:	f003 0301 	and.w	r3, r3, #1
 8009864:	2b00      	cmp	r3, #0
 8009866:	d106      	bne.n	8009876 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800986c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009870:	2b00      	cmp	r3, #0
 8009872:	f000 80d1 	beq.w	8009a18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00b      	beq.n	800989a <HAL_UART_IRQHandler+0xae>
 8009882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800988a:	2b00      	cmp	r3, #0
 800988c:	d005      	beq.n	800989a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009892:	f043 0201 	orr.w	r2, r3, #1
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800989a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800989e:	f003 0304 	and.w	r3, r3, #4
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00b      	beq.n	80098be <HAL_UART_IRQHandler+0xd2>
 80098a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d005      	beq.n	80098be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b6:	f043 0202 	orr.w	r2, r3, #2
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098c2:	f003 0302 	and.w	r3, r3, #2
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00b      	beq.n	80098e2 <HAL_UART_IRQHandler+0xf6>
 80098ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d005      	beq.n	80098e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098da:	f043 0204 	orr.w	r2, r3, #4
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80098e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098e6:	f003 0308 	and.w	r3, r3, #8
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d011      	beq.n	8009912 <HAL_UART_IRQHandler+0x126>
 80098ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098f2:	f003 0320 	and.w	r3, r3, #32
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d105      	bne.n	8009906 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80098fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098fe:	f003 0301 	and.w	r3, r3, #1
 8009902:	2b00      	cmp	r3, #0
 8009904:	d005      	beq.n	8009912 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990a:	f043 0208 	orr.w	r2, r3, #8
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 81ed 	beq.w	8009cf6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800991c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009920:	f003 0320 	and.w	r3, r3, #32
 8009924:	2b00      	cmp	r3, #0
 8009926:	d008      	beq.n	800993a <HAL_UART_IRQHandler+0x14e>
 8009928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800992c:	f003 0320 	and.w	r3, r3, #32
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fd12 	bl	800a35e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009944:	2b40      	cmp	r3, #64	; 0x40
 8009946:	bf0c      	ite	eq
 8009948:	2301      	moveq	r3, #1
 800994a:	2300      	movne	r3, #0
 800994c:	b2db      	uxtb	r3, r3
 800994e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009956:	f003 0308 	and.w	r3, r3, #8
 800995a:	2b00      	cmp	r3, #0
 800995c:	d103      	bne.n	8009966 <HAL_UART_IRQHandler+0x17a>
 800995e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009962:	2b00      	cmp	r3, #0
 8009964:	d04f      	beq.n	8009a06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fc1a 	bl	800a1a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009976:	2b40      	cmp	r3, #64	; 0x40
 8009978:	d141      	bne.n	80099fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3314      	adds	r3, #20
 8009980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009988:	e853 3f00 	ldrex	r3, [r3]
 800998c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	3314      	adds	r3, #20
 80099a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80099a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80099aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80099b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80099b6:	e841 2300 	strex	r3, r2, [r1]
 80099ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80099be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1d9      	bne.n	800997a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d013      	beq.n	80099f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d2:	4a7d      	ldr	r2, [pc, #500]	; (8009bc8 <HAL_UART_IRQHandler+0x3dc>)
 80099d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fb fbd8 	bl	8005190 <HAL_DMA_Abort_IT>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d016      	beq.n	8009a14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80099f0:	4610      	mov	r0, r2
 80099f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099f4:	e00e      	b.n	8009a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f9ae 	bl	8009d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099fc:	e00a      	b.n	8009a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f9aa 	bl	8009d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a04:	e006      	b.n	8009a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f9a6 	bl	8009d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009a12:	e170      	b.n	8009cf6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a14:	bf00      	nop
    return;
 8009a16:	e16e      	b.n	8009cf6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	f040 814a 	bne.w	8009cb6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a26:	f003 0310 	and.w	r3, r3, #16
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 8143 	beq.w	8009cb6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a34:	f003 0310 	and.w	r3, r3, #16
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f000 813c 	beq.w	8009cb6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a3e:	2300      	movs	r3, #0
 8009a40:	60bb      	str	r3, [r7, #8]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	60bb      	str	r3, [r7, #8]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	60bb      	str	r3, [r7, #8]
 8009a52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a5e:	2b40      	cmp	r3, #64	; 0x40
 8009a60:	f040 80b4 	bne.w	8009bcc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f000 8140 	beq.w	8009cfa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a82:	429a      	cmp	r2, r3
 8009a84:	f080 8139 	bcs.w	8009cfa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a94:	69db      	ldr	r3, [r3, #28]
 8009a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a9a:	f000 8088 	beq.w	8009bae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	330c      	adds	r3, #12
 8009aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009aac:	e853 3f00 	ldrex	r3, [r3]
 8009ab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009abc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	330c      	adds	r3, #12
 8009ac6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009aca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009ad6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009ada:	e841 2300 	strex	r3, r2, [r1]
 8009ade:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1d9      	bne.n	8009a9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	3314      	adds	r3, #20
 8009af0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009af4:	e853 3f00 	ldrex	r3, [r3]
 8009af8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009afa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009afc:	f023 0301 	bic.w	r3, r3, #1
 8009b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	3314      	adds	r3, #20
 8009b0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009b0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009b12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009b16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b1a:	e841 2300 	strex	r3, r2, [r1]
 8009b1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1e1      	bne.n	8009aea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	3314      	adds	r3, #20
 8009b2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b30:	e853 3f00 	ldrex	r3, [r3]
 8009b34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	3314      	adds	r3, #20
 8009b46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009b4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b52:	e841 2300 	strex	r3, r2, [r1]
 8009b56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1e3      	bne.n	8009b26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2220      	movs	r2, #32
 8009b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	330c      	adds	r3, #12
 8009b72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b76:	e853 3f00 	ldrex	r3, [r3]
 8009b7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b7e:	f023 0310 	bic.w	r3, r3, #16
 8009b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	330c      	adds	r3, #12
 8009b8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009b90:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b98:	e841 2300 	strex	r3, r2, [r1]
 8009b9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1e3      	bne.n	8009b6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7fb fa81 	bl	80050b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7f9 fbee 	bl	80033a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009bc4:	e099      	b.n	8009cfa <HAL_UART_IRQHandler+0x50e>
 8009bc6:	bf00      	nop
 8009bc8:	0800a267 	.word	0x0800a267
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f000 808b 	beq.w	8009cfe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009be8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 8086 	beq.w	8009cfe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	330c      	adds	r3, #12
 8009bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfc:	e853 3f00 	ldrex	r3, [r3]
 8009c00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	330c      	adds	r3, #12
 8009c12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009c16:	647a      	str	r2, [r7, #68]	; 0x44
 8009c18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c1e:	e841 2300 	strex	r3, r2, [r1]
 8009c22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1e3      	bne.n	8009bf2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	3314      	adds	r3, #20
 8009c30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c34:	e853 3f00 	ldrex	r3, [r3]
 8009c38:	623b      	str	r3, [r7, #32]
   return(result);
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	f023 0301 	bic.w	r3, r3, #1
 8009c40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	3314      	adds	r3, #20
 8009c4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009c4e:	633a      	str	r2, [r7, #48]	; 0x30
 8009c50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c56:	e841 2300 	strex	r3, r2, [r1]
 8009c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1e3      	bne.n	8009c2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2220      	movs	r2, #32
 8009c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	330c      	adds	r3, #12
 8009c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	e853 3f00 	ldrex	r3, [r3]
 8009c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f023 0310 	bic.w	r3, r3, #16
 8009c86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	330c      	adds	r3, #12
 8009c90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009c94:	61fa      	str	r2, [r7, #28]
 8009c96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c98:	69b9      	ldr	r1, [r7, #24]
 8009c9a:	69fa      	ldr	r2, [r7, #28]
 8009c9c:	e841 2300 	strex	r3, r2, [r1]
 8009ca0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d1e3      	bne.n	8009c70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ca8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009cac:	4619      	mov	r1, r3
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f7f9 fb76 	bl	80033a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009cb4:	e023      	b.n	8009cfe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d009      	beq.n	8009cd6 <HAL_UART_IRQHandler+0x4ea>
 8009cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d003      	beq.n	8009cd6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fadd 	bl	800a28e <UART_Transmit_IT>
    return;
 8009cd4:	e014      	b.n	8009d00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00e      	beq.n	8009d00 <HAL_UART_IRQHandler+0x514>
 8009ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d008      	beq.n	8009d00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fb1d 	bl	800a32e <UART_EndTransmit_IT>
    return;
 8009cf4:	e004      	b.n	8009d00 <HAL_UART_IRQHandler+0x514>
    return;
 8009cf6:	bf00      	nop
 8009cf8:	e002      	b.n	8009d00 <HAL_UART_IRQHandler+0x514>
      return;
 8009cfa:	bf00      	nop
 8009cfc:	e000      	b.n	8009d00 <HAL_UART_IRQHandler+0x514>
      return;
 8009cfe:	bf00      	nop
  }
}
 8009d00:	37e8      	adds	r7, #232	; 0xe8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop

08009d08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009d10:	bf00      	nop
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b090      	sub	sp, #64	; 0x40
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d78:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d137      	bne.n	8009df8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3314      	adds	r3, #20
 8009d94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	e853 3f00 	ldrex	r3, [r3]
 8009d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009da4:	63bb      	str	r3, [r7, #56]	; 0x38
 8009da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	3314      	adds	r3, #20
 8009dac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dae:	633a      	str	r2, [r7, #48]	; 0x30
 8009db0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009db6:	e841 2300 	strex	r3, r2, [r1]
 8009dba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1e5      	bne.n	8009d8e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	330c      	adds	r3, #12
 8009dc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	e853 3f00 	ldrex	r3, [r3]
 8009dd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8009dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	330c      	adds	r3, #12
 8009de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009de2:	61fa      	str	r2, [r7, #28]
 8009de4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de6:	69b9      	ldr	r1, [r7, #24]
 8009de8:	69fa      	ldr	r2, [r7, #28]
 8009dea:	e841 2300 	strex	r3, r2, [r1]
 8009dee:	617b      	str	r3, [r7, #20]
   return(result);
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1e5      	bne.n	8009dc2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009df6:	e002      	b.n	8009dfe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009df8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009dfa:	f7ff ff85 	bl	8009d08 <HAL_UART_TxCpltCallback>
}
 8009dfe:	bf00      	nop
 8009e00:	3740      	adds	r7, #64	; 0x40
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b084      	sub	sp, #16
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e12:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f7ff ff81 	bl	8009d1c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e1a:	bf00      	nop
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b09c      	sub	sp, #112	; 0x70
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d172      	bne.n	8009f24 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e40:	2200      	movs	r2, #0
 8009e42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	330c      	adds	r3, #12
 8009e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e4e:	e853 3f00 	ldrex	r3, [r3]
 8009e52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	330c      	adds	r3, #12
 8009e62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e64:	65ba      	str	r2, [r7, #88]	; 0x58
 8009e66:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e6c:	e841 2300 	strex	r3, r2, [r1]
 8009e70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1e5      	bne.n	8009e44 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3314      	adds	r3, #20
 8009e7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e82:	e853 3f00 	ldrex	r3, [r3]
 8009e86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e8a:	f023 0301 	bic.w	r3, r3, #1
 8009e8e:	667b      	str	r3, [r7, #100]	; 0x64
 8009e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3314      	adds	r3, #20
 8009e96:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009e98:	647a      	str	r2, [r7, #68]	; 0x44
 8009e9a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ea0:	e841 2300 	strex	r3, r2, [r1]
 8009ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1e5      	bne.n	8009e78 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	3314      	adds	r3, #20
 8009eb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	e853 3f00 	ldrex	r3, [r3]
 8009eba:	623b      	str	r3, [r7, #32]
   return(result);
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ec2:	663b      	str	r3, [r7, #96]	; 0x60
 8009ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	3314      	adds	r3, #20
 8009eca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ecc:	633a      	str	r2, [r7, #48]	; 0x30
 8009ece:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ed4:	e841 2300 	strex	r3, r2, [r1]
 8009ed8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e5      	bne.n	8009eac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ee2:	2220      	movs	r2, #32
 8009ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d119      	bne.n	8009f24 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	330c      	adds	r3, #12
 8009ef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	e853 3f00 	ldrex	r3, [r3]
 8009efe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f023 0310 	bic.w	r3, r3, #16
 8009f06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	330c      	adds	r3, #12
 8009f0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f10:	61fa      	str	r2, [r7, #28]
 8009f12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f14:	69b9      	ldr	r1, [r7, #24]
 8009f16:	69fa      	ldr	r2, [r7, #28]
 8009f18:	e841 2300 	strex	r3, r2, [r1]
 8009f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1e5      	bne.n	8009ef0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d106      	bne.n	8009f3a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f30:	4619      	mov	r1, r3
 8009f32:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009f34:	f7f9 fa34 	bl	80033a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f38:	e002      	b.n	8009f40 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009f3a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009f3c:	f7ff fef8 	bl	8009d30 <HAL_UART_RxCpltCallback>
}
 8009f40:	bf00      	nop
 8009f42:	3770      	adds	r7, #112	; 0x70
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f54:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d108      	bne.n	8009f70 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f62:	085b      	lsrs	r3, r3, #1
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	4619      	mov	r1, r3
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f7f9 fa19 	bl	80033a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f6e:	e002      	b.n	8009f76 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f7ff fee7 	bl	8009d44 <HAL_UART_RxHalfCpltCallback>
}
 8009f76:	bf00      	nop
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b084      	sub	sp, #16
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009f86:	2300      	movs	r3, #0
 8009f88:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f9a:	2b80      	cmp	r3, #128	; 0x80
 8009f9c:	bf0c      	ite	eq
 8009f9e:	2301      	moveq	r3, #1
 8009fa0:	2300      	movne	r3, #0
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	2b21      	cmp	r3, #33	; 0x21
 8009fb0:	d108      	bne.n	8009fc4 <UART_DMAError+0x46>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d005      	beq.n	8009fc4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009fbe:	68b8      	ldr	r0, [r7, #8]
 8009fc0:	f000 f8c6 	bl	800a150 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fce:	2b40      	cmp	r3, #64	; 0x40
 8009fd0:	bf0c      	ite	eq
 8009fd2:	2301      	moveq	r3, #1
 8009fd4:	2300      	movne	r3, #0
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b22      	cmp	r3, #34	; 0x22
 8009fe4:	d108      	bne.n	8009ff8 <UART_DMAError+0x7a>
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d005      	beq.n	8009ff8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009ff2:	68b8      	ldr	r0, [r7, #8]
 8009ff4:	f000 f8d4 	bl	800a1a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffc:	f043 0210 	orr.w	r2, r3, #16
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a004:	68b8      	ldr	r0, [r7, #8]
 800a006:	f7ff fea7 	bl	8009d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a00a:	bf00      	nop
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
	...

0800a014 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b098      	sub	sp, #96	; 0x60
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	4613      	mov	r3, r2
 800a020:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	88fa      	ldrh	r2, [r7, #6]
 800a02c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2222      	movs	r2, #34	; 0x22
 800a038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a040:	4a40      	ldr	r2, [pc, #256]	; (800a144 <UART_Start_Receive_DMA+0x130>)
 800a042:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a048:	4a3f      	ldr	r2, [pc, #252]	; (800a148 <UART_Start_Receive_DMA+0x134>)
 800a04a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a050:	4a3e      	ldr	r2, [pc, #248]	; (800a14c <UART_Start_Receive_DMA+0x138>)
 800a052:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a058:	2200      	movs	r2, #0
 800a05a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a05c:	f107 0308 	add.w	r3, r7, #8
 800a060:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3304      	adds	r3, #4
 800a06c:	4619      	mov	r1, r3
 800a06e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	88fb      	ldrh	r3, [r7, #6]
 800a074:	f7fa ffc4 	bl	8005000 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a078:	2300      	movs	r3, #0
 800a07a:	613b      	str	r3, [r7, #16]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	613b      	str	r3, [r7, #16]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	613b      	str	r3, [r7, #16]
 800a08c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d019      	beq.n	800a0d2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	330c      	adds	r3, #12
 800a0a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0a8:	e853 3f00 	ldrex	r3, [r3]
 800a0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	330c      	adds	r3, #12
 800a0bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0be:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a0c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a0c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0c6:	e841 2300 	strex	r3, r2, [r1]
 800a0ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1e5      	bne.n	800a09e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	3314      	adds	r3, #20
 800a0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0dc:	e853 3f00 	ldrex	r3, [r3]
 800a0e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e4:	f043 0301 	orr.w	r3, r3, #1
 800a0e8:	657b      	str	r3, [r7, #84]	; 0x54
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	3314      	adds	r3, #20
 800a0f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a0f2:	63ba      	str	r2, [r7, #56]	; 0x38
 800a0f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a0f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0fa:	e841 2300 	strex	r3, r2, [r1]
 800a0fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1e5      	bne.n	800a0d2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3314      	adds	r3, #20
 800a10c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	e853 3f00 	ldrex	r3, [r3]
 800a114:	617b      	str	r3, [r7, #20]
   return(result);
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a11c:	653b      	str	r3, [r7, #80]	; 0x50
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3314      	adds	r3, #20
 800a124:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a126:	627a      	str	r2, [r7, #36]	; 0x24
 800a128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12a:	6a39      	ldr	r1, [r7, #32]
 800a12c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a12e:	e841 2300 	strex	r3, r2, [r1]
 800a132:	61fb      	str	r3, [r7, #28]
   return(result);
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1e5      	bne.n	800a106 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3760      	adds	r7, #96	; 0x60
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	08009e23 	.word	0x08009e23
 800a148:	08009f49 	.word	0x08009f49
 800a14c:	08009f7f 	.word	0x08009f7f

0800a150 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a150:	b480      	push	{r7}
 800a152:	b089      	sub	sp, #36	; 0x24
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	330c      	adds	r3, #12
 800a15e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	e853 3f00 	ldrex	r3, [r3]
 800a166:	60bb      	str	r3, [r7, #8]
   return(result);
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a16e:	61fb      	str	r3, [r7, #28]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	330c      	adds	r3, #12
 800a176:	69fa      	ldr	r2, [r7, #28]
 800a178:	61ba      	str	r2, [r7, #24]
 800a17a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17c:	6979      	ldr	r1, [r7, #20]
 800a17e:	69ba      	ldr	r2, [r7, #24]
 800a180:	e841 2300 	strex	r3, r2, [r1]
 800a184:	613b      	str	r3, [r7, #16]
   return(result);
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1e5      	bne.n	800a158 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2220      	movs	r2, #32
 800a190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a194:	bf00      	nop
 800a196:	3724      	adds	r7, #36	; 0x24
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b095      	sub	sp, #84	; 0x54
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	330c      	adds	r3, #12
 800a1ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b2:	e853 3f00 	ldrex	r3, [r3]
 800a1b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	330c      	adds	r3, #12
 800a1c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1c8:	643a      	str	r2, [r7, #64]	; 0x40
 800a1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1d0:	e841 2300 	strex	r3, r2, [r1]
 800a1d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1e5      	bne.n	800a1a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3314      	adds	r3, #20
 800a1e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e4:	6a3b      	ldr	r3, [r7, #32]
 800a1e6:	e853 3f00 	ldrex	r3, [r3]
 800a1ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	f023 0301 	bic.w	r3, r3, #1
 800a1f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	3314      	adds	r3, #20
 800a1fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a204:	e841 2300 	strex	r3, r2, [r1]
 800a208:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1e5      	bne.n	800a1dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a214:	2b01      	cmp	r3, #1
 800a216:	d119      	bne.n	800a24c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	330c      	adds	r3, #12
 800a21e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	e853 3f00 	ldrex	r3, [r3]
 800a226:	60bb      	str	r3, [r7, #8]
   return(result);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	f023 0310 	bic.w	r3, r3, #16
 800a22e:	647b      	str	r3, [r7, #68]	; 0x44
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	330c      	adds	r3, #12
 800a236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a238:	61ba      	str	r2, [r7, #24]
 800a23a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23c:	6979      	ldr	r1, [r7, #20]
 800a23e:	69ba      	ldr	r2, [r7, #24]
 800a240:	e841 2300 	strex	r3, r2, [r1]
 800a244:	613b      	str	r3, [r7, #16]
   return(result);
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1e5      	bne.n	800a218 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2220      	movs	r2, #32
 800a250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a25a:	bf00      	nop
 800a25c:	3754      	adds	r7, #84	; 0x54
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a272:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f7ff fd69 	bl	8009d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a286:	bf00      	nop
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a28e:	b480      	push	{r7}
 800a290:	b085      	sub	sp, #20
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b21      	cmp	r3, #33	; 0x21
 800a2a0:	d13e      	bne.n	800a320 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2aa:	d114      	bne.n	800a2d6 <UART_Transmit_IT+0x48>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d110      	bne.n	800a2d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	1c9a      	adds	r2, r3, #2
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	621a      	str	r2, [r3, #32]
 800a2d4:	e008      	b.n	800a2e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	1c59      	adds	r1, r3, #1
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	6211      	str	r1, [r2, #32]
 800a2e0:	781a      	ldrb	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d10f      	bne.n	800a31c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68da      	ldr	r2, [r3, #12]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a30a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68da      	ldr	r2, [r3, #12]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a31a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	e000      	b.n	800a322 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a320:	2302      	movs	r3, #2
  }
}
 800a322:	4618      	mov	r0, r3
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68da      	ldr	r2, [r3, #12]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a344:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2220      	movs	r2, #32
 800a34a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7ff fcda 	bl	8009d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3708      	adds	r7, #8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b08c      	sub	sp, #48	; 0x30
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b22      	cmp	r3, #34	; 0x22
 800a370:	f040 80ab 	bne.w	800a4ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a37c:	d117      	bne.n	800a3ae <UART_Receive_IT+0x50>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d113      	bne.n	800a3ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a386:	2300      	movs	r3, #0
 800a388:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a38e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	b29b      	uxth	r3, r3
 800a398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a6:	1c9a      	adds	r2, r3, #2
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	629a      	str	r2, [r3, #40]	; 0x28
 800a3ac:	e026      	b.n	800a3fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3c0:	d007      	beq.n	800a3d2 <UART_Receive_IT+0x74>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10a      	bne.n	800a3e0 <UART_Receive_IT+0x82>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d106      	bne.n	800a3e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3dc:	701a      	strb	r2, [r3, #0]
 800a3de:	e008      	b.n	800a3f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a400:	b29b      	uxth	r3, r3
 800a402:	3b01      	subs	r3, #1
 800a404:	b29b      	uxth	r3, r3
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	4619      	mov	r1, r3
 800a40a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d15a      	bne.n	800a4c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68da      	ldr	r2, [r3, #12]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f022 0220 	bic.w	r2, r2, #32
 800a41e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68da      	ldr	r2, [r3, #12]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a42e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	695a      	ldr	r2, [r3, #20]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f022 0201 	bic.w	r2, r2, #1
 800a43e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2220      	movs	r2, #32
 800a444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d135      	bne.n	800a4bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	330c      	adds	r3, #12
 800a45c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	e853 3f00 	ldrex	r3, [r3]
 800a464:	613b      	str	r3, [r7, #16]
   return(result);
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	f023 0310 	bic.w	r3, r3, #16
 800a46c:	627b      	str	r3, [r7, #36]	; 0x24
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	330c      	adds	r3, #12
 800a474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a476:	623a      	str	r2, [r7, #32]
 800a478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47a:	69f9      	ldr	r1, [r7, #28]
 800a47c:	6a3a      	ldr	r2, [r7, #32]
 800a47e:	e841 2300 	strex	r3, r2, [r1]
 800a482:	61bb      	str	r3, [r7, #24]
   return(result);
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1e5      	bne.n	800a456 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0310 	and.w	r3, r3, #16
 800a494:	2b10      	cmp	r3, #16
 800a496:	d10a      	bne.n	800a4ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a498:	2300      	movs	r3, #0
 800a49a:	60fb      	str	r3, [r7, #12]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60fb      	str	r3, [r7, #12]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7f8 ff73 	bl	80033a0 <HAL_UARTEx_RxEventCallback>
 800a4ba:	e002      	b.n	800a4c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7ff fc37 	bl	8009d30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	e002      	b.n	800a4cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	e000      	b.n	800a4cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a4ca:	2302      	movs	r3, #2
  }
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3730      	adds	r7, #48	; 0x30
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4d8:	b0c0      	sub	sp, #256	; 0x100
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a4ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4f0:	68d9      	ldr	r1, [r3, #12]
 800a4f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	ea40 0301 	orr.w	r3, r0, r1
 800a4fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a4fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a502:	689a      	ldr	r2, [r3, #8]
 800a504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	431a      	orrs	r2, r3
 800a50c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a510:	695b      	ldr	r3, [r3, #20]
 800a512:	431a      	orrs	r2, r3
 800a514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a518:	69db      	ldr	r3, [r3, #28]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a52c:	f021 010c 	bic.w	r1, r1, #12
 800a530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a53a:	430b      	orrs	r3, r1
 800a53c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a53e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a54a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a54e:	6999      	ldr	r1, [r3, #24]
 800a550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	ea40 0301 	orr.w	r3, r0, r1
 800a55a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a55c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	4b8f      	ldr	r3, [pc, #572]	; (800a7a0 <UART_SetConfig+0x2cc>)
 800a564:	429a      	cmp	r2, r3
 800a566:	d005      	beq.n	800a574 <UART_SetConfig+0xa0>
 800a568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	4b8d      	ldr	r3, [pc, #564]	; (800a7a4 <UART_SetConfig+0x2d0>)
 800a570:	429a      	cmp	r2, r3
 800a572:	d104      	bne.n	800a57e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a574:	f7fd fe86 	bl	8008284 <HAL_RCC_GetPCLK2Freq>
 800a578:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a57c:	e003      	b.n	800a586 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a57e:	f7fd fe6d 	bl	800825c <HAL_RCC_GetPCLK1Freq>
 800a582:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a58a:	69db      	ldr	r3, [r3, #28]
 800a58c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a590:	f040 810c 	bne.w	800a7ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a598:	2200      	movs	r2, #0
 800a59a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a59e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a5a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a5a6:	4622      	mov	r2, r4
 800a5a8:	462b      	mov	r3, r5
 800a5aa:	1891      	adds	r1, r2, r2
 800a5ac:	65b9      	str	r1, [r7, #88]	; 0x58
 800a5ae:	415b      	adcs	r3, r3
 800a5b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	eb12 0801 	adds.w	r8, r2, r1
 800a5bc:	4629      	mov	r1, r5
 800a5be:	eb43 0901 	adc.w	r9, r3, r1
 800a5c2:	f04f 0200 	mov.w	r2, #0
 800a5c6:	f04f 0300 	mov.w	r3, #0
 800a5ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a5ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a5d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a5d6:	4690      	mov	r8, r2
 800a5d8:	4699      	mov	r9, r3
 800a5da:	4623      	mov	r3, r4
 800a5dc:	eb18 0303 	adds.w	r3, r8, r3
 800a5e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a5e4:	462b      	mov	r3, r5
 800a5e6:	eb49 0303 	adc.w	r3, r9, r3
 800a5ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a5ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a5fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a5fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a602:	460b      	mov	r3, r1
 800a604:	18db      	adds	r3, r3, r3
 800a606:	653b      	str	r3, [r7, #80]	; 0x50
 800a608:	4613      	mov	r3, r2
 800a60a:	eb42 0303 	adc.w	r3, r2, r3
 800a60e:	657b      	str	r3, [r7, #84]	; 0x54
 800a610:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a614:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a618:	f7f6 fa1c 	bl	8000a54 <__aeabi_uldivmod>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	4b61      	ldr	r3, [pc, #388]	; (800a7a8 <UART_SetConfig+0x2d4>)
 800a622:	fba3 2302 	umull	r2, r3, r3, r2
 800a626:	095b      	lsrs	r3, r3, #5
 800a628:	011c      	lsls	r4, r3, #4
 800a62a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a62e:	2200      	movs	r2, #0
 800a630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a634:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a638:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a63c:	4642      	mov	r2, r8
 800a63e:	464b      	mov	r3, r9
 800a640:	1891      	adds	r1, r2, r2
 800a642:	64b9      	str	r1, [r7, #72]	; 0x48
 800a644:	415b      	adcs	r3, r3
 800a646:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a648:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a64c:	4641      	mov	r1, r8
 800a64e:	eb12 0a01 	adds.w	sl, r2, r1
 800a652:	4649      	mov	r1, r9
 800a654:	eb43 0b01 	adc.w	fp, r3, r1
 800a658:	f04f 0200 	mov.w	r2, #0
 800a65c:	f04f 0300 	mov.w	r3, #0
 800a660:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a664:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a66c:	4692      	mov	sl, r2
 800a66e:	469b      	mov	fp, r3
 800a670:	4643      	mov	r3, r8
 800a672:	eb1a 0303 	adds.w	r3, sl, r3
 800a676:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a67a:	464b      	mov	r3, r9
 800a67c:	eb4b 0303 	adc.w	r3, fp, r3
 800a680:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a690:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a694:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a698:	460b      	mov	r3, r1
 800a69a:	18db      	adds	r3, r3, r3
 800a69c:	643b      	str	r3, [r7, #64]	; 0x40
 800a69e:	4613      	mov	r3, r2
 800a6a0:	eb42 0303 	adc.w	r3, r2, r3
 800a6a4:	647b      	str	r3, [r7, #68]	; 0x44
 800a6a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a6aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a6ae:	f7f6 f9d1 	bl	8000a54 <__aeabi_uldivmod>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	4b3b      	ldr	r3, [pc, #236]	; (800a7a8 <UART_SetConfig+0x2d4>)
 800a6ba:	fba3 2301 	umull	r2, r3, r3, r1
 800a6be:	095b      	lsrs	r3, r3, #5
 800a6c0:	2264      	movs	r2, #100	; 0x64
 800a6c2:	fb02 f303 	mul.w	r3, r2, r3
 800a6c6:	1acb      	subs	r3, r1, r3
 800a6c8:	00db      	lsls	r3, r3, #3
 800a6ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a6ce:	4b36      	ldr	r3, [pc, #216]	; (800a7a8 <UART_SetConfig+0x2d4>)
 800a6d0:	fba3 2302 	umull	r2, r3, r3, r2
 800a6d4:	095b      	lsrs	r3, r3, #5
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a6dc:	441c      	add	r4, r3
 800a6de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a6e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a6ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a6f0:	4642      	mov	r2, r8
 800a6f2:	464b      	mov	r3, r9
 800a6f4:	1891      	adds	r1, r2, r2
 800a6f6:	63b9      	str	r1, [r7, #56]	; 0x38
 800a6f8:	415b      	adcs	r3, r3
 800a6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a700:	4641      	mov	r1, r8
 800a702:	1851      	adds	r1, r2, r1
 800a704:	6339      	str	r1, [r7, #48]	; 0x30
 800a706:	4649      	mov	r1, r9
 800a708:	414b      	adcs	r3, r1
 800a70a:	637b      	str	r3, [r7, #52]	; 0x34
 800a70c:	f04f 0200 	mov.w	r2, #0
 800a710:	f04f 0300 	mov.w	r3, #0
 800a714:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a718:	4659      	mov	r1, fp
 800a71a:	00cb      	lsls	r3, r1, #3
 800a71c:	4651      	mov	r1, sl
 800a71e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a722:	4651      	mov	r1, sl
 800a724:	00ca      	lsls	r2, r1, #3
 800a726:	4610      	mov	r0, r2
 800a728:	4619      	mov	r1, r3
 800a72a:	4603      	mov	r3, r0
 800a72c:	4642      	mov	r2, r8
 800a72e:	189b      	adds	r3, r3, r2
 800a730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a734:	464b      	mov	r3, r9
 800a736:	460a      	mov	r2, r1
 800a738:	eb42 0303 	adc.w	r3, r2, r3
 800a73c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a74c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a750:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a754:	460b      	mov	r3, r1
 800a756:	18db      	adds	r3, r3, r3
 800a758:	62bb      	str	r3, [r7, #40]	; 0x28
 800a75a:	4613      	mov	r3, r2
 800a75c:	eb42 0303 	adc.w	r3, r2, r3
 800a760:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a762:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a766:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a76a:	f7f6 f973 	bl	8000a54 <__aeabi_uldivmod>
 800a76e:	4602      	mov	r2, r0
 800a770:	460b      	mov	r3, r1
 800a772:	4b0d      	ldr	r3, [pc, #52]	; (800a7a8 <UART_SetConfig+0x2d4>)
 800a774:	fba3 1302 	umull	r1, r3, r3, r2
 800a778:	095b      	lsrs	r3, r3, #5
 800a77a:	2164      	movs	r1, #100	; 0x64
 800a77c:	fb01 f303 	mul.w	r3, r1, r3
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	00db      	lsls	r3, r3, #3
 800a784:	3332      	adds	r3, #50	; 0x32
 800a786:	4a08      	ldr	r2, [pc, #32]	; (800a7a8 <UART_SetConfig+0x2d4>)
 800a788:	fba2 2303 	umull	r2, r3, r2, r3
 800a78c:	095b      	lsrs	r3, r3, #5
 800a78e:	f003 0207 	and.w	r2, r3, #7
 800a792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4422      	add	r2, r4
 800a79a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a79c:	e105      	b.n	800a9aa <UART_SetConfig+0x4d6>
 800a79e:	bf00      	nop
 800a7a0:	40011000 	.word	0x40011000
 800a7a4:	40011400 	.word	0x40011400
 800a7a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a7ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a7b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a7ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a7be:	4642      	mov	r2, r8
 800a7c0:	464b      	mov	r3, r9
 800a7c2:	1891      	adds	r1, r2, r2
 800a7c4:	6239      	str	r1, [r7, #32]
 800a7c6:	415b      	adcs	r3, r3
 800a7c8:	627b      	str	r3, [r7, #36]	; 0x24
 800a7ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a7ce:	4641      	mov	r1, r8
 800a7d0:	1854      	adds	r4, r2, r1
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	eb43 0501 	adc.w	r5, r3, r1
 800a7d8:	f04f 0200 	mov.w	r2, #0
 800a7dc:	f04f 0300 	mov.w	r3, #0
 800a7e0:	00eb      	lsls	r3, r5, #3
 800a7e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a7e6:	00e2      	lsls	r2, r4, #3
 800a7e8:	4614      	mov	r4, r2
 800a7ea:	461d      	mov	r5, r3
 800a7ec:	4643      	mov	r3, r8
 800a7ee:	18e3      	adds	r3, r4, r3
 800a7f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a7f4:	464b      	mov	r3, r9
 800a7f6:	eb45 0303 	adc.w	r3, r5, r3
 800a7fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a7fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a80a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a80e:	f04f 0200 	mov.w	r2, #0
 800a812:	f04f 0300 	mov.w	r3, #0
 800a816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a81a:	4629      	mov	r1, r5
 800a81c:	008b      	lsls	r3, r1, #2
 800a81e:	4621      	mov	r1, r4
 800a820:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a824:	4621      	mov	r1, r4
 800a826:	008a      	lsls	r2, r1, #2
 800a828:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a82c:	f7f6 f912 	bl	8000a54 <__aeabi_uldivmod>
 800a830:	4602      	mov	r2, r0
 800a832:	460b      	mov	r3, r1
 800a834:	4b60      	ldr	r3, [pc, #384]	; (800a9b8 <UART_SetConfig+0x4e4>)
 800a836:	fba3 2302 	umull	r2, r3, r3, r2
 800a83a:	095b      	lsrs	r3, r3, #5
 800a83c:	011c      	lsls	r4, r3, #4
 800a83e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a842:	2200      	movs	r2, #0
 800a844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a848:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a84c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a850:	4642      	mov	r2, r8
 800a852:	464b      	mov	r3, r9
 800a854:	1891      	adds	r1, r2, r2
 800a856:	61b9      	str	r1, [r7, #24]
 800a858:	415b      	adcs	r3, r3
 800a85a:	61fb      	str	r3, [r7, #28]
 800a85c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a860:	4641      	mov	r1, r8
 800a862:	1851      	adds	r1, r2, r1
 800a864:	6139      	str	r1, [r7, #16]
 800a866:	4649      	mov	r1, r9
 800a868:	414b      	adcs	r3, r1
 800a86a:	617b      	str	r3, [r7, #20]
 800a86c:	f04f 0200 	mov.w	r2, #0
 800a870:	f04f 0300 	mov.w	r3, #0
 800a874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a878:	4659      	mov	r1, fp
 800a87a:	00cb      	lsls	r3, r1, #3
 800a87c:	4651      	mov	r1, sl
 800a87e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a882:	4651      	mov	r1, sl
 800a884:	00ca      	lsls	r2, r1, #3
 800a886:	4610      	mov	r0, r2
 800a888:	4619      	mov	r1, r3
 800a88a:	4603      	mov	r3, r0
 800a88c:	4642      	mov	r2, r8
 800a88e:	189b      	adds	r3, r3, r2
 800a890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a894:	464b      	mov	r3, r9
 800a896:	460a      	mov	r2, r1
 800a898:	eb42 0303 	adc.w	r3, r2, r3
 800a89c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a8a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a8aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a8ac:	f04f 0200 	mov.w	r2, #0
 800a8b0:	f04f 0300 	mov.w	r3, #0
 800a8b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a8b8:	4649      	mov	r1, r9
 800a8ba:	008b      	lsls	r3, r1, #2
 800a8bc:	4641      	mov	r1, r8
 800a8be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8c2:	4641      	mov	r1, r8
 800a8c4:	008a      	lsls	r2, r1, #2
 800a8c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a8ca:	f7f6 f8c3 	bl	8000a54 <__aeabi_uldivmod>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	4b39      	ldr	r3, [pc, #228]	; (800a9b8 <UART_SetConfig+0x4e4>)
 800a8d4:	fba3 1302 	umull	r1, r3, r3, r2
 800a8d8:	095b      	lsrs	r3, r3, #5
 800a8da:	2164      	movs	r1, #100	; 0x64
 800a8dc:	fb01 f303 	mul.w	r3, r1, r3
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	011b      	lsls	r3, r3, #4
 800a8e4:	3332      	adds	r3, #50	; 0x32
 800a8e6:	4a34      	ldr	r2, [pc, #208]	; (800a9b8 <UART_SetConfig+0x4e4>)
 800a8e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ec:	095b      	lsrs	r3, r3, #5
 800a8ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8f2:	441c      	add	r4, r3
 800a8f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	673b      	str	r3, [r7, #112]	; 0x70
 800a8fc:	677a      	str	r2, [r7, #116]	; 0x74
 800a8fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a902:	4642      	mov	r2, r8
 800a904:	464b      	mov	r3, r9
 800a906:	1891      	adds	r1, r2, r2
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	415b      	adcs	r3, r3
 800a90c:	60fb      	str	r3, [r7, #12]
 800a90e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a912:	4641      	mov	r1, r8
 800a914:	1851      	adds	r1, r2, r1
 800a916:	6039      	str	r1, [r7, #0]
 800a918:	4649      	mov	r1, r9
 800a91a:	414b      	adcs	r3, r1
 800a91c:	607b      	str	r3, [r7, #4]
 800a91e:	f04f 0200 	mov.w	r2, #0
 800a922:	f04f 0300 	mov.w	r3, #0
 800a926:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a92a:	4659      	mov	r1, fp
 800a92c:	00cb      	lsls	r3, r1, #3
 800a92e:	4651      	mov	r1, sl
 800a930:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a934:	4651      	mov	r1, sl
 800a936:	00ca      	lsls	r2, r1, #3
 800a938:	4610      	mov	r0, r2
 800a93a:	4619      	mov	r1, r3
 800a93c:	4603      	mov	r3, r0
 800a93e:	4642      	mov	r2, r8
 800a940:	189b      	adds	r3, r3, r2
 800a942:	66bb      	str	r3, [r7, #104]	; 0x68
 800a944:	464b      	mov	r3, r9
 800a946:	460a      	mov	r2, r1
 800a948:	eb42 0303 	adc.w	r3, r2, r3
 800a94c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a94e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	663b      	str	r3, [r7, #96]	; 0x60
 800a958:	667a      	str	r2, [r7, #100]	; 0x64
 800a95a:	f04f 0200 	mov.w	r2, #0
 800a95e:	f04f 0300 	mov.w	r3, #0
 800a962:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a966:	4649      	mov	r1, r9
 800a968:	008b      	lsls	r3, r1, #2
 800a96a:	4641      	mov	r1, r8
 800a96c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a970:	4641      	mov	r1, r8
 800a972:	008a      	lsls	r2, r1, #2
 800a974:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a978:	f7f6 f86c 	bl	8000a54 <__aeabi_uldivmod>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	4b0d      	ldr	r3, [pc, #52]	; (800a9b8 <UART_SetConfig+0x4e4>)
 800a982:	fba3 1302 	umull	r1, r3, r3, r2
 800a986:	095b      	lsrs	r3, r3, #5
 800a988:	2164      	movs	r1, #100	; 0x64
 800a98a:	fb01 f303 	mul.w	r3, r1, r3
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	011b      	lsls	r3, r3, #4
 800a992:	3332      	adds	r3, #50	; 0x32
 800a994:	4a08      	ldr	r2, [pc, #32]	; (800a9b8 <UART_SetConfig+0x4e4>)
 800a996:	fba2 2303 	umull	r2, r3, r2, r3
 800a99a:	095b      	lsrs	r3, r3, #5
 800a99c:	f003 020f 	and.w	r2, r3, #15
 800a9a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4422      	add	r2, r4
 800a9a8:	609a      	str	r2, [r3, #8]
}
 800a9aa:	bf00      	nop
 800a9ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9b6:	bf00      	nop
 800a9b8:	51eb851f 	.word	0x51eb851f

0800a9bc <arm_mat_trans_f32>:
 800a9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c0:	8802      	ldrh	r2, [r0, #0]
 800a9c2:	884b      	ldrh	r3, [r1, #2]
 800a9c4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800a9c8:	684f      	ldr	r7, [r1, #4]
 800a9ca:	8840      	ldrh	r0, [r0, #2]
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	d14c      	bne.n	800aa6c <arm_mat_trans_f32+0xb0>
 800a9d2:	f8b1 e000 	ldrh.w	lr, [r1]
 800a9d6:	4586      	cmp	lr, r0
 800a9d8:	d148      	bne.n	800aa6c <arm_mat_trans_f32+0xb0>
 800a9da:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800a9de:	009c      	lsls	r4, r3, #2
 800a9e0:	f00e 0e03 	and.w	lr, lr, #3
 800a9e4:	fb08 f904 	mul.w	r9, r8, r4
 800a9e8:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800a9ec:	011d      	lsls	r5, r3, #4
 800a9ee:	00db      	lsls	r3, r3, #3
 800a9f0:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800a9f4:	eb07 0a04 	add.w	sl, r7, r4
 800a9f8:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800a9fc:	9201      	str	r2, [sp, #4]
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	463b      	mov	r3, r7
 800aa02:	f1b8 0f00 	cmp.w	r8, #0
 800aa06:	d01d      	beq.n	800aa44 <arm_mat_trans_f32+0x88>
 800aa08:	9900      	ldr	r1, [sp, #0]
 800aa0a:	f10c 0210 	add.w	r2, ip, #16
 800aa0e:	4439      	add	r1, r7
 800aa10:	4640      	mov	r0, r8
 800aa12:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800aa16:	601e      	str	r6, [r3, #0]
 800aa18:	ed52 7a03 	vldr	s15, [r2, #-12]
 800aa1c:	191e      	adds	r6, r3, r4
 800aa1e:	edc6 7a00 	vstr	s15, [r6]
 800aa22:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800aa26:	600e      	str	r6, [r1, #0]
 800aa28:	ed52 7a01 	vldr	s15, [r2, #-4]
 800aa2c:	190e      	adds	r6, r1, r4
 800aa2e:	3801      	subs	r0, #1
 800aa30:	442b      	add	r3, r5
 800aa32:	f102 0210 	add.w	r2, r2, #16
 800aa36:	edc6 7a00 	vstr	s15, [r6]
 800aa3a:	4429      	add	r1, r5
 800aa3c:	d1e9      	bne.n	800aa12 <arm_mat_trans_f32+0x56>
 800aa3e:	44dc      	add	ip, fp
 800aa40:	eb09 0307 	add.w	r3, r9, r7
 800aa44:	f1be 0f00 	cmp.w	lr, #0
 800aa48:	d009      	beq.n	800aa5e <arm_mat_trans_f32+0xa2>
 800aa4a:	4672      	mov	r2, lr
 800aa4c:	4661      	mov	r1, ip
 800aa4e:	f851 0b04 	ldr.w	r0, [r1], #4
 800aa52:	6018      	str	r0, [r3, #0]
 800aa54:	3a01      	subs	r2, #1
 800aa56:	4423      	add	r3, r4
 800aa58:	d1f9      	bne.n	800aa4e <arm_mat_trans_f32+0x92>
 800aa5a:	9b01      	ldr	r3, [sp, #4]
 800aa5c:	449c      	add	ip, r3
 800aa5e:	3704      	adds	r7, #4
 800aa60:	4557      	cmp	r7, sl
 800aa62:	d1cd      	bne.n	800aa00 <arm_mat_trans_f32+0x44>
 800aa64:	2000      	movs	r0, #0
 800aa66:	b003      	add	sp, #12
 800aa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6c:	f06f 0002 	mvn.w	r0, #2
 800aa70:	e7f9      	b.n	800aa66 <arm_mat_trans_f32+0xaa>
 800aa72:	bf00      	nop

0800aa74 <arm_mat_sub_f32>:
 800aa74:	b4f0      	push	{r4, r5, r6, r7}
 800aa76:	e9d1 4700 	ldrd	r4, r7, [r1]
 800aa7a:	6803      	ldr	r3, [r0, #0]
 800aa7c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800aa80:	6856      	ldr	r6, [r2, #4]
 800aa82:	42a3      	cmp	r3, r4
 800aa84:	d15d      	bne.n	800ab42 <arm_mat_sub_f32+0xce>
 800aa86:	6812      	ldr	r2, [r2, #0]
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d15a      	bne.n	800ab42 <arm_mat_sub_f32+0xce>
 800aa8c:	8803      	ldrh	r3, [r0, #0]
 800aa8e:	8844      	ldrh	r4, [r0, #2]
 800aa90:	fb04 f403 	mul.w	r4, r4, r3
 800aa94:	08a5      	lsrs	r5, r4, #2
 800aa96:	d032      	beq.n	800aafe <arm_mat_sub_f32+0x8a>
 800aa98:	f10c 0110 	add.w	r1, ip, #16
 800aa9c:	f107 0210 	add.w	r2, r7, #16
 800aaa0:	f106 0310 	add.w	r3, r6, #16
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	ed12 7a04 	vldr	s14, [r2, #-16]
 800aaaa:	ed51 7a04 	vldr	s15, [r1, #-16]
 800aaae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aab2:	3801      	subs	r0, #1
 800aab4:	ed43 7a04 	vstr	s15, [r3, #-16]
 800aab8:	ed12 7a03 	vldr	s14, [r2, #-12]
 800aabc:	ed51 7a03 	vldr	s15, [r1, #-12]
 800aac0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aac4:	f101 0110 	add.w	r1, r1, #16
 800aac8:	ed43 7a03 	vstr	s15, [r3, #-12]
 800aacc:	ed12 7a02 	vldr	s14, [r2, #-8]
 800aad0:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800aad4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aad8:	f102 0210 	add.w	r2, r2, #16
 800aadc:	ed43 7a02 	vstr	s15, [r3, #-8]
 800aae0:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800aae4:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800aae8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aaec:	f103 0310 	add.w	r3, r3, #16
 800aaf0:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800aaf4:	d1d7      	bne.n	800aaa6 <arm_mat_sub_f32+0x32>
 800aaf6:	012b      	lsls	r3, r5, #4
 800aaf8:	449c      	add	ip, r3
 800aafa:	441f      	add	r7, r3
 800aafc:	441e      	add	r6, r3
 800aafe:	f014 0403 	ands.w	r4, r4, #3
 800ab02:	d01b      	beq.n	800ab3c <arm_mat_sub_f32+0xc8>
 800ab04:	eddc 7a00 	vldr	s15, [ip]
 800ab08:	ed97 7a00 	vldr	s14, [r7]
 800ab0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab10:	3c01      	subs	r4, #1
 800ab12:	edc6 7a00 	vstr	s15, [r6]
 800ab16:	d011      	beq.n	800ab3c <arm_mat_sub_f32+0xc8>
 800ab18:	eddc 7a01 	vldr	s15, [ip, #4]
 800ab1c:	ed97 7a01 	vldr	s14, [r7, #4]
 800ab20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab24:	2c01      	cmp	r4, #1
 800ab26:	edc6 7a01 	vstr	s15, [r6, #4]
 800ab2a:	d007      	beq.n	800ab3c <arm_mat_sub_f32+0xc8>
 800ab2c:	eddc 7a02 	vldr	s15, [ip, #8]
 800ab30:	ed97 7a02 	vldr	s14, [r7, #8]
 800ab34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab38:	edc6 7a02 	vstr	s15, [r6, #8]
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	bcf0      	pop	{r4, r5, r6, r7}
 800ab40:	4770      	bx	lr
 800ab42:	f06f 0002 	mvn.w	r0, #2
 800ab46:	e7fa      	b.n	800ab3e <arm_mat_sub_f32+0xca>

0800ab48 <arm_mat_mult_f32>:
 800ab48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab4c:	8845      	ldrh	r5, [r0, #2]
 800ab4e:	880b      	ldrh	r3, [r1, #0]
 800ab50:	8806      	ldrh	r6, [r0, #0]
 800ab52:	6847      	ldr	r7, [r0, #4]
 800ab54:	6854      	ldr	r4, [r2, #4]
 800ab56:	6848      	ldr	r0, [r1, #4]
 800ab58:	b08b      	sub	sp, #44	; 0x2c
 800ab5a:	42ab      	cmp	r3, r5
 800ab5c:	9109      	str	r1, [sp, #36]	; 0x24
 800ab5e:	9604      	str	r6, [sp, #16]
 800ab60:	8849      	ldrh	r1, [r1, #2]
 800ab62:	f040 808a 	bne.w	800ac7a <arm_mat_mult_f32+0x132>
 800ab66:	8815      	ldrh	r5, [r2, #0]
 800ab68:	42b5      	cmp	r5, r6
 800ab6a:	f040 8086 	bne.w	800ac7a <arm_mat_mult_f32+0x132>
 800ab6e:	8852      	ldrh	r2, [r2, #2]
 800ab70:	428a      	cmp	r2, r1
 800ab72:	f040 8082 	bne.w	800ac7a <arm_mat_mult_f32+0x132>
 800ab76:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800ab7a:	1d01      	adds	r1, r0, #4
 800ab7c:	0116      	lsls	r6, r2, #4
 800ab7e:	9108      	str	r1, [sp, #32]
 800ab80:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800ab84:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800ab88:	9101      	str	r1, [sp, #4]
 800ab8a:	fb06 f108 	mul.w	r1, r6, r8
 800ab8e:	0095      	lsls	r5, r2, #2
 800ab90:	9103      	str	r1, [sp, #12]
 800ab92:	00d2      	lsls	r2, r2, #3
 800ab94:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800ab98:	f003 0903 	and.w	r9, r3, #3
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	f107 0b10 	add.w	fp, r7, #16
 800aba2:	eb04 0a05 	add.w	sl, r4, r5
 800aba6:	9107      	str	r1, [sp, #28]
 800aba8:	9202      	str	r2, [sp, #8]
 800abaa:	9306      	str	r3, [sp, #24]
 800abac:	f1ab 0310 	sub.w	r3, fp, #16
 800abb0:	9305      	str	r3, [sp, #20]
 800abb2:	9b07      	ldr	r3, [sp, #28]
 800abb4:	f8dd e020 	ldr.w	lr, [sp, #32]
 800abb8:	eb03 0c0a 	add.w	ip, r3, sl
 800abbc:	eddf 7a31 	vldr	s15, [pc, #196]	; 800ac84 <arm_mat_mult_f32+0x13c>
 800abc0:	f1b8 0f00 	cmp.w	r8, #0
 800abc4:	d053      	beq.n	800ac6e <arm_mat_mult_f32+0x126>
 800abc6:	9b02      	ldr	r3, [sp, #8]
 800abc8:	4644      	mov	r4, r8
 800abca:	18c1      	adds	r1, r0, r3
 800abcc:	4602      	mov	r2, r0
 800abce:	465b      	mov	r3, fp
 800abd0:	ed92 6a00 	vldr	s12, [r2]
 800abd4:	ed13 7a04 	vldr	s14, [r3, #-16]
 800abd8:	ed53 4a03 	vldr	s9, [r3, #-12]
 800abdc:	ed53 6a02 	vldr	s13, [r3, #-8]
 800abe0:	ed91 5a00 	vldr	s10, [r1]
 800abe4:	ed53 5a01 	vldr	s11, [r3, #-4]
 800abe8:	1957      	adds	r7, r2, r5
 800abea:	ee27 7a06 	vmul.f32	s14, s14, s12
 800abee:	ed97 6a00 	vldr	s12, [r7]
 800abf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abf6:	ee26 6a24 	vmul.f32	s12, s12, s9
 800abfa:	194f      	adds	r7, r1, r5
 800abfc:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ac00:	ee26 7a85 	vmul.f32	s14, s13, s10
 800ac04:	edd7 7a00 	vldr	s15, [r7]
 800ac08:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ac0c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ac10:	3c01      	subs	r4, #1
 800ac12:	4432      	add	r2, r6
 800ac14:	4431      	add	r1, r6
 800ac16:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac1a:	f103 0310 	add.w	r3, r3, #16
 800ac1e:	d1d7      	bne.n	800abd0 <arm_mat_mult_f32+0x88>
 800ac20:	9b03      	ldr	r3, [sp, #12]
 800ac22:	9a01      	ldr	r2, [sp, #4]
 800ac24:	4418      	add	r0, r3
 800ac26:	f1b9 0f00 	cmp.w	r9, #0
 800ac2a:	d00b      	beq.n	800ac44 <arm_mat_mult_f32+0xfc>
 800ac2c:	464b      	mov	r3, r9
 800ac2e:	edd0 6a00 	vldr	s13, [r0]
 800ac32:	ecb2 7a01 	vldmia	r2!, {s14}
 800ac36:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	4428      	add	r0, r5
 800ac3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac42:	d1f4      	bne.n	800ac2e <arm_mat_mult_f32+0xe6>
 800ac44:	ecec 7a01 	vstmia	ip!, {s15}
 800ac48:	45d4      	cmp	ip, sl
 800ac4a:	4670      	mov	r0, lr
 800ac4c:	f10e 0e04 	add.w	lr, lr, #4
 800ac50:	d1b4      	bne.n	800abbc <arm_mat_mult_f32+0x74>
 800ac52:	9a01      	ldr	r2, [sp, #4]
 800ac54:	9b06      	ldr	r3, [sp, #24]
 800ac56:	4611      	mov	r1, r2
 800ac58:	4419      	add	r1, r3
 800ac5a:	449b      	add	fp, r3
 800ac5c:	9b04      	ldr	r3, [sp, #16]
 800ac5e:	9101      	str	r1, [sp, #4]
 800ac60:	3b01      	subs	r3, #1
 800ac62:	44aa      	add	sl, r5
 800ac64:	9304      	str	r3, [sp, #16]
 800ac66:	d004      	beq.n	800ac72 <arm_mat_mult_f32+0x12a>
 800ac68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac6a:	6858      	ldr	r0, [r3, #4]
 800ac6c:	e79e      	b.n	800abac <arm_mat_mult_f32+0x64>
 800ac6e:	9a05      	ldr	r2, [sp, #20]
 800ac70:	e7d9      	b.n	800ac26 <arm_mat_mult_f32+0xde>
 800ac72:	4618      	mov	r0, r3
 800ac74:	b00b      	add	sp, #44	; 0x2c
 800ac76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7a:	f06f 0002 	mvn.w	r0, #2
 800ac7e:	b00b      	add	sp, #44	; 0x2c
 800ac80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac84:	00000000 	.word	0x00000000

0800ac88 <arm_mat_inverse_f32>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	8843      	ldrh	r3, [r0, #2]
 800ac8e:	8804      	ldrh	r4, [r0, #0]
 800ac90:	684e      	ldr	r6, [r1, #4]
 800ac92:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800ac96:	b087      	sub	sp, #28
 800ac98:	429c      	cmp	r4, r3
 800ac9a:	9301      	str	r3, [sp, #4]
 800ac9c:	9603      	str	r6, [sp, #12]
 800ac9e:	f040 80ea 	bne.w	800ae76 <arm_mat_inverse_f32+0x1ee>
 800aca2:	880a      	ldrh	r2, [r1, #0]
 800aca4:	884b      	ldrh	r3, [r1, #2]
 800aca6:	4293      	cmp	r3, r2
 800aca8:	f040 80e5 	bne.w	800ae76 <arm_mat_inverse_f32+0x1ee>
 800acac:	429c      	cmp	r4, r3
 800acae:	f040 80e2 	bne.w	800ae76 <arm_mat_inverse_f32+0x1ee>
 800acb2:	9005      	str	r0, [sp, #20]
 800acb4:	b30c      	cbz	r4, 800acfa <arm_mat_inverse_f32+0x72>
 800acb6:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800acba:	1e67      	subs	r7, r4, #1
 800acbc:	f846 bb04 	str.w	fp, [r6], #4
 800acc0:	d01b      	beq.n	800acfa <arm_mat_inverse_f32+0x72>
 800acc2:	f04f 0801 	mov.w	r8, #1
 800acc6:	00ba      	lsls	r2, r7, #2
 800acc8:	eb06 0a02 	add.w	sl, r6, r2
 800accc:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800acd0:	4630      	mov	r0, r6
 800acd2:	2100      	movs	r1, #0
 800acd4:	f000 f97e 	bl	800afd4 <memset>
 800acd8:	eb0a 0605 	add.w	r6, sl, r5
 800acdc:	462a      	mov	r2, r5
 800acde:	2100      	movs	r1, #0
 800ace0:	4650      	mov	r0, sl
 800ace2:	f1b8 0f00 	cmp.w	r8, #0
 800ace6:	f000 80cb 	beq.w	800ae80 <arm_mat_inverse_f32+0x1f8>
 800acea:	f000 f973 	bl	800afd4 <memset>
 800acee:	3f01      	subs	r7, #1
 800acf0:	f108 0801 	add.w	r8, r8, #1
 800acf4:	f846 bb04 	str.w	fp, [r6], #4
 800acf8:	d1e5      	bne.n	800acc6 <arm_mat_inverse_f32+0x3e>
 800acfa:	9b01      	ldr	r3, [sp, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f000 80b5 	beq.w	800ae6c <arm_mat_inverse_f32+0x1e4>
 800ad02:	009d      	lsls	r5, r3, #2
 800ad04:	eb09 0205 	add.w	r2, r9, r5
 800ad08:	46cc      	mov	ip, r9
 800ad0a:	9202      	str	r2, [sp, #8]
 800ad0c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ad10:	1d2a      	adds	r2, r5, #4
 800ad12:	9204      	str	r2, [sp, #16]
 800ad14:	462f      	mov	r7, r5
 800ad16:	469e      	mov	lr, r3
 800ad18:	2600      	movs	r6, #0
 800ad1a:	9b02      	ldr	r3, [sp, #8]
 800ad1c:	eddc 6a00 	vldr	s13, [ip]
 800ad20:	42b4      	cmp	r4, r6
 800ad22:	eba3 0b07 	sub.w	fp, r3, r7
 800ad26:	f000 80a1 	beq.w	800ae6c <arm_mat_inverse_f32+0x1e4>
 800ad2a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800ae90 <arm_mat_inverse_f32+0x208>
 800ad2e:	4632      	mov	r2, r6
 800ad30:	4663      	mov	r3, ip
 800ad32:	e00b      	b.n	800ad4c <arm_mat_inverse_f32+0xc4>
 800ad34:	eef4 7a47 	vcmp.f32	s15, s14
 800ad38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad3c:	f102 0201 	add.w	r2, r2, #1
 800ad40:	bfc8      	it	gt
 800ad42:	eeb0 7a67 	vmovgt.f32	s14, s15
 800ad46:	42a2      	cmp	r2, r4
 800ad48:	442b      	add	r3, r5
 800ad4a:	d014      	beq.n	800ad76 <arm_mat_inverse_f32+0xee>
 800ad4c:	edd3 7a00 	vldr	s15, [r3]
 800ad50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ad54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad58:	eeb1 6a67 	vneg.f32	s12, s15
 800ad5c:	dcea      	bgt.n	800ad34 <arm_mat_inverse_f32+0xac>
 800ad5e:	eeb4 6a47 	vcmp.f32	s12, s14
 800ad62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad66:	f102 0201 	add.w	r2, r2, #1
 800ad6a:	bfc8      	it	gt
 800ad6c:	eeb0 7a46 	vmovgt.f32	s14, s12
 800ad70:	42a2      	cmp	r2, r4
 800ad72:	442b      	add	r3, r5
 800ad74:	d1ea      	bne.n	800ad4c <arm_mat_inverse_f32+0xc4>
 800ad76:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ad7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad7e:	d075      	beq.n	800ae6c <arm_mat_inverse_f32+0x1e4>
 800ad80:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ad84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad88:	d070      	beq.n	800ae6c <arm_mat_inverse_f32+0x1e4>
 800ad8a:	4672      	mov	r2, lr
 800ad8c:	4663      	mov	r3, ip
 800ad8e:	ed93 7a00 	vldr	s14, [r3]
 800ad92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ad96:	3a01      	subs	r2, #1
 800ad98:	ece3 7a01 	vstmia	r3!, {s15}
 800ad9c:	d1f7      	bne.n	800ad8e <arm_mat_inverse_f32+0x106>
 800ad9e:	9901      	ldr	r1, [sp, #4]
 800ada0:	464b      	mov	r3, r9
 800ada2:	ed93 7a00 	vldr	s14, [r3]
 800ada6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800adaa:	3901      	subs	r1, #1
 800adac:	ece3 7a01 	vstmia	r3!, {s15}
 800adb0:	d1f7      	bne.n	800ada2 <arm_mat_inverse_f32+0x11a>
 800adb2:	9803      	ldr	r0, [sp, #12]
 800adb4:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800adb8:	42b1      	cmp	r1, r6
 800adba:	d039      	beq.n	800ae30 <arm_mat_inverse_f32+0x1a8>
 800adbc:	eddb 6a00 	vldr	s13, [fp]
 800adc0:	465a      	mov	r2, fp
 800adc2:	4673      	mov	r3, lr
 800adc4:	46e2      	mov	sl, ip
 800adc6:	ecba 7a01 	vldmia	sl!, {s14}
 800adca:	edd2 7a00 	vldr	s15, [r2]
 800adce:	ee26 7a87 	vmul.f32	s14, s13, s14
 800add2:	3b01      	subs	r3, #1
 800add4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800add8:	ece2 7a01 	vstmia	r2!, {s15}
 800addc:	d1f3      	bne.n	800adc6 <arm_mat_inverse_f32+0x13e>
 800adde:	9b01      	ldr	r3, [sp, #4]
 800ade0:	44bb      	add	fp, r7
 800ade2:	4602      	mov	r2, r0
 800ade4:	46ca      	mov	sl, r9
 800ade6:	ecba 7a01 	vldmia	sl!, {s14}
 800adea:	edd2 7a00 	vldr	s15, [r2]
 800adee:	ee26 7a87 	vmul.f32	s14, s13, s14
 800adf2:	3b01      	subs	r3, #1
 800adf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800adf8:	ece2 7a01 	vstmia	r2!, {s15}
 800adfc:	d1f3      	bne.n	800ade6 <arm_mat_inverse_f32+0x15e>
 800adfe:	4428      	add	r0, r5
 800ae00:	3101      	adds	r1, #1
 800ae02:	428c      	cmp	r4, r1
 800ae04:	44c3      	add	fp, r8
 800ae06:	d1d7      	bne.n	800adb8 <arm_mat_inverse_f32+0x130>
 800ae08:	9b04      	ldr	r3, [sp, #16]
 800ae0a:	f1be 0e01 	subs.w	lr, lr, #1
 800ae0e:	f106 0601 	add.w	r6, r6, #1
 800ae12:	449c      	add	ip, r3
 800ae14:	f1a7 0704 	sub.w	r7, r7, #4
 800ae18:	44a9      	add	r9, r5
 800ae1a:	f47f af7e 	bne.w	800ad1a <arm_mat_inverse_f32+0x92>
 800ae1e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ae22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae26:	d006      	beq.n	800ae36 <arm_mat_inverse_f32+0x1ae>
 800ae28:	2000      	movs	r0, #0
 800ae2a:	b007      	add	sp, #28
 800ae2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae30:	44bb      	add	fp, r7
 800ae32:	4428      	add	r0, r5
 800ae34:	e7e4      	b.n	800ae00 <arm_mat_inverse_f32+0x178>
 800ae36:	9b05      	ldr	r3, [sp, #20]
 800ae38:	9a01      	ldr	r2, [sp, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	edd3 7a00 	vldr	s15, [r3]
 800ae40:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ae44:	fb02 f204 	mul.w	r2, r2, r4
 800ae48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae4c:	4614      	mov	r4, r2
 800ae4e:	bf08      	it	eq
 800ae50:	3304      	addeq	r3, #4
 800ae52:	d007      	beq.n	800ae64 <arm_mat_inverse_f32+0x1dc>
 800ae54:	e7e8      	b.n	800ae28 <arm_mat_inverse_f32+0x1a0>
 800ae56:	ecf3 7a01 	vldmia	r3!, {s15}
 800ae5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ae5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae62:	d1e1      	bne.n	800ae28 <arm_mat_inverse_f32+0x1a0>
 800ae64:	f10e 0e01 	add.w	lr, lr, #1
 800ae68:	4574      	cmp	r4, lr
 800ae6a:	d1f4      	bne.n	800ae56 <arm_mat_inverse_f32+0x1ce>
 800ae6c:	f06f 0004 	mvn.w	r0, #4
 800ae70:	b007      	add	sp, #28
 800ae72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae76:	f06f 0002 	mvn.w	r0, #2
 800ae7a:	b007      	add	sp, #28
 800ae7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae80:	4656      	mov	r6, sl
 800ae82:	3f01      	subs	r7, #1
 800ae84:	f846 bb04 	str.w	fp, [r6], #4
 800ae88:	f47f af1b 	bne.w	800acc2 <arm_mat_inverse_f32+0x3a>
 800ae8c:	e735      	b.n	800acfa <arm_mat_inverse_f32+0x72>
 800ae8e:	bf00      	nop
 800ae90:	00000000 	.word	0x00000000

0800ae94 <arm_mat_init_f32>:
 800ae94:	8001      	strh	r1, [r0, #0]
 800ae96:	8042      	strh	r2, [r0, #2]
 800ae98:	6043      	str	r3, [r0, #4]
 800ae9a:	4770      	bx	lr

0800ae9c <arm_mat_add_f32>:
 800ae9c:	b4f0      	push	{r4, r5, r6, r7}
 800ae9e:	e9d1 4700 	ldrd	r4, r7, [r1]
 800aea2:	6803      	ldr	r3, [r0, #0]
 800aea4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800aea8:	6856      	ldr	r6, [r2, #4]
 800aeaa:	42a3      	cmp	r3, r4
 800aeac:	d15d      	bne.n	800af6a <arm_mat_add_f32+0xce>
 800aeae:	6812      	ldr	r2, [r2, #0]
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d15a      	bne.n	800af6a <arm_mat_add_f32+0xce>
 800aeb4:	8803      	ldrh	r3, [r0, #0]
 800aeb6:	8844      	ldrh	r4, [r0, #2]
 800aeb8:	fb04 f403 	mul.w	r4, r4, r3
 800aebc:	08a5      	lsrs	r5, r4, #2
 800aebe:	d032      	beq.n	800af26 <arm_mat_add_f32+0x8a>
 800aec0:	f10c 0110 	add.w	r1, ip, #16
 800aec4:	f107 0210 	add.w	r2, r7, #16
 800aec8:	f106 0310 	add.w	r3, r6, #16
 800aecc:	4628      	mov	r0, r5
 800aece:	ed12 7a04 	vldr	s14, [r2, #-16]
 800aed2:	ed51 7a04 	vldr	s15, [r1, #-16]
 800aed6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aeda:	3801      	subs	r0, #1
 800aedc:	ed43 7a04 	vstr	s15, [r3, #-16]
 800aee0:	ed12 7a03 	vldr	s14, [r2, #-12]
 800aee4:	ed51 7a03 	vldr	s15, [r1, #-12]
 800aee8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aeec:	f101 0110 	add.w	r1, r1, #16
 800aef0:	ed43 7a03 	vstr	s15, [r3, #-12]
 800aef4:	ed12 7a02 	vldr	s14, [r2, #-8]
 800aef8:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800aefc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af00:	f102 0210 	add.w	r2, r2, #16
 800af04:	ed43 7a02 	vstr	s15, [r3, #-8]
 800af08:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800af0c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800af10:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af14:	f103 0310 	add.w	r3, r3, #16
 800af18:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800af1c:	d1d7      	bne.n	800aece <arm_mat_add_f32+0x32>
 800af1e:	012b      	lsls	r3, r5, #4
 800af20:	449c      	add	ip, r3
 800af22:	441f      	add	r7, r3
 800af24:	441e      	add	r6, r3
 800af26:	f014 0403 	ands.w	r4, r4, #3
 800af2a:	d01b      	beq.n	800af64 <arm_mat_add_f32+0xc8>
 800af2c:	edd7 7a00 	vldr	s15, [r7]
 800af30:	ed9c 7a00 	vldr	s14, [ip]
 800af34:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af38:	3c01      	subs	r4, #1
 800af3a:	edc6 7a00 	vstr	s15, [r6]
 800af3e:	d011      	beq.n	800af64 <arm_mat_add_f32+0xc8>
 800af40:	eddc 7a01 	vldr	s15, [ip, #4]
 800af44:	ed97 7a01 	vldr	s14, [r7, #4]
 800af48:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af4c:	2c01      	cmp	r4, #1
 800af4e:	edc6 7a01 	vstr	s15, [r6, #4]
 800af52:	d007      	beq.n	800af64 <arm_mat_add_f32+0xc8>
 800af54:	eddc 7a02 	vldr	s15, [ip, #8]
 800af58:	ed97 7a02 	vldr	s14, [r7, #8]
 800af5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af60:	edc6 7a02 	vstr	s15, [r6, #8]
 800af64:	2000      	movs	r0, #0
 800af66:	bcf0      	pop	{r4, r5, r6, r7}
 800af68:	4770      	bx	lr
 800af6a:	f06f 0002 	mvn.w	r0, #2
 800af6e:	e7fa      	b.n	800af66 <arm_mat_add_f32+0xca>

0800af70 <__libc_init_array>:
 800af70:	b570      	push	{r4, r5, r6, lr}
 800af72:	4d0d      	ldr	r5, [pc, #52]	; (800afa8 <__libc_init_array+0x38>)
 800af74:	4c0d      	ldr	r4, [pc, #52]	; (800afac <__libc_init_array+0x3c>)
 800af76:	1b64      	subs	r4, r4, r5
 800af78:	10a4      	asrs	r4, r4, #2
 800af7a:	2600      	movs	r6, #0
 800af7c:	42a6      	cmp	r6, r4
 800af7e:	d109      	bne.n	800af94 <__libc_init_array+0x24>
 800af80:	4d0b      	ldr	r5, [pc, #44]	; (800afb0 <__libc_init_array+0x40>)
 800af82:	4c0c      	ldr	r4, [pc, #48]	; (800afb4 <__libc_init_array+0x44>)
 800af84:	f000 f82e 	bl	800afe4 <_init>
 800af88:	1b64      	subs	r4, r4, r5
 800af8a:	10a4      	asrs	r4, r4, #2
 800af8c:	2600      	movs	r6, #0
 800af8e:	42a6      	cmp	r6, r4
 800af90:	d105      	bne.n	800af9e <__libc_init_array+0x2e>
 800af92:	bd70      	pop	{r4, r5, r6, pc}
 800af94:	f855 3b04 	ldr.w	r3, [r5], #4
 800af98:	4798      	blx	r3
 800af9a:	3601      	adds	r6, #1
 800af9c:	e7ee      	b.n	800af7c <__libc_init_array+0xc>
 800af9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800afa2:	4798      	blx	r3
 800afa4:	3601      	adds	r6, #1
 800afa6:	e7f2      	b.n	800af8e <__libc_init_array+0x1e>
 800afa8:	0800b024 	.word	0x0800b024
 800afac:	0800b024 	.word	0x0800b024
 800afb0:	0800b024 	.word	0x0800b024
 800afb4:	0800b028 	.word	0x0800b028

0800afb8 <memcpy>:
 800afb8:	440a      	add	r2, r1
 800afba:	4291      	cmp	r1, r2
 800afbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800afc0:	d100      	bne.n	800afc4 <memcpy+0xc>
 800afc2:	4770      	bx	lr
 800afc4:	b510      	push	{r4, lr}
 800afc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afce:	4291      	cmp	r1, r2
 800afd0:	d1f9      	bne.n	800afc6 <memcpy+0xe>
 800afd2:	bd10      	pop	{r4, pc}

0800afd4 <memset>:
 800afd4:	4402      	add	r2, r0
 800afd6:	4603      	mov	r3, r0
 800afd8:	4293      	cmp	r3, r2
 800afda:	d100      	bne.n	800afde <memset+0xa>
 800afdc:	4770      	bx	lr
 800afde:	f803 1b01 	strb.w	r1, [r3], #1
 800afe2:	e7f9      	b.n	800afd8 <memset+0x4>

0800afe4 <_init>:
 800afe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe6:	bf00      	nop
 800afe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afea:	bc08      	pop	{r3}
 800afec:	469e      	mov	lr, r3
 800afee:	4770      	bx	lr

0800aff0 <_fini>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	bf00      	nop
 800aff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aff6:	bc08      	pop	{r3}
 800aff8:	469e      	mov	lr, r3
 800affa:	4770      	bx	lr
