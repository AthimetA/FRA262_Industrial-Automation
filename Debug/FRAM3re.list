
FRAM3re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c64c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800c7e4  0800c7e4  0001c7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c804  0800c804  0002043c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c804  0800c804  0001c804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c80c  0800c80c  0002043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c80c  0800c80c  0001c80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c810  0800c810  0001c810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000043c  20000000  0800c814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  20000440  0800cc50  00020440  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b24  0800cc50  00020b24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a74  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003111  00000000  00000000  00037ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0003aff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  0003c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001789e  00000000  00000000  0003d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016369  00000000  00000000  000549f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093019  00000000  00000000  0006ad5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000fdd78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004994  00000000  00000000  000fde40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  001027d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000440 	.word	0x20000440
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c7cc 	.word	0x0800c7cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000444 	.word	0x20000444
 80001d4:	0800c7cc 	.word	0x0800c7cc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	f00b fc86 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	f00b fc7d 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 2, 3, KalmanVar ->MatC_Data);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	2102      	movs	r1, #2
 8000d90:	f00b fc74 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3348      	adds	r3, #72	; 0x48
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2101      	movs	r1, #1
 8000da2:	f00b fc6b 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f503 7047 	add.w	r0, r3, #796	; 0x31c
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	334c      	adds	r3, #76	; 0x4c
 8000db0:	2203      	movs	r2, #3
 8000db2:	2103      	movs	r1, #3
 8000db4:	f00b fc62 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 2, 2, KalmanVar ->MatR_Data);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3370      	adds	r3, #112	; 0x70
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	f00b fc59 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3380      	adds	r3, #128	; 0x80
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	f00b fc50 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f503 704d 	add.w	r0, r3, #820	; 0x334
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	33a4      	adds	r3, #164	; 0xa4
 8000de6:	2201      	movs	r2, #1
 8000de8:	2103      	movs	r1, #3
 8000dea:	f00b fc47 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	33b0      	adds	r3, #176	; 0xb0
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	f00b fc3e 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	33bc      	adds	r3, #188	; 0xbc
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	f00b fc35 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f503 7053 	add.w	r0, r3, #844	; 0x34c
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	33e0      	adds	r3, #224	; 0xe0
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	2103      	movs	r1, #3
 8000e20:	f00b fc2c 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 2, 1, KalmanVar ->MatY_Data);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f503 7055 	add.w	r0, r3, #852	; 0x354
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e30:	2201      	movs	r2, #1
 8000e32:	2102      	movs	r1, #2
 8000e34:	f00b fc22 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 2, 1, KalmanVar ->MatZ_Data);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000e44:	2201      	movs	r2, #1
 8000e46:	2102      	movs	r1, #2
 8000e48:	f00b fc18 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 2, 2, KalmanVar ->MatS_Data);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8000e58:	2202      	movs	r2, #2
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	f00b fc0e 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 2, KalmanVar ->MatK_Data);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	2103      	movs	r1, #3
 8000e70:	f00b fc04 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f503 705d 	add.w	r0, r3, #884	; 0x374
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000e80:	2203      	movs	r2, #3
 8000e82:	2103      	movs	r1, #3
 8000e84:	f00b fbfa 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f503 705f 	add.w	r0, r3, #892	; 0x37c
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000e94:	2203      	movs	r2, #3
 8000e96:	2103      	movs	r1, #3
 8000e98:	f00b fbf0 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f503 7061 	add.w	r0, r3, #900	; 0x384
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	2103      	movs	r1, #3
 8000eac:	f00b fbe6 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQ), 3, 3, KalmanVar ->MatGQ_Data);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f503 7063 	add.w	r0, r3, #908	; 0x38c
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	f00b fbdc 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 2, KalmanVar ->MatCt_Data);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f503 7065 	add.w	r0, r3, #916	; 0x394
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	2103      	movs	r1, #3
 8000ed4:	f00b fbd2 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f503 7069 	add.w	r0, r3, #932	; 0x3a4
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	2103      	movs	r1, #3
 8000ee8:	f00b fbc8 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 2, 2, KalmanVar ->MatSinv_Data);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8000ef8:	2202      	movs	r2, #2
 8000efa:	2102      	movs	r1, #2
 8000efc:	f00b fbbe 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 2, 3, KalmanVar ->MatCPk_Data);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f503 706b 	add.w	r0, r3, #940	; 0x3ac
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	2102      	movs	r1, #2
 8000f10:	f00b fbb4 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f503 706d 	add.w	r0, r3, #948	; 0x3b4
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000f20:	2203      	movs	r2, #3
 8000f22:	2103      	movs	r1, #3
 8000f24:	f00b fbaa 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f503 706f 	add.w	r0, r3, #956	; 0x3bc
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8000f34:	2203      	movs	r2, #3
 8000f36:	2103      	movs	r1, #3
 8000f38:	f00b fba0 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 2, 1, KalmanVar ->MatCXk_Data);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	f00b fb96 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 2, 2, KalmanVar ->MatCPkCt_Data);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	2102      	movs	r1, #2
 8000f60:	f00b fb8c 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 2, KalmanVar ->MatPkCt_Data);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f503 7075 	add.w	r0, r3, #980	; 0x3d4
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8000f70:	2202      	movs	r2, #2
 8000f72:	2103      	movs	r1, #3
 8000f74:	f00b fb82 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f503 7077 	add.w	r0, r3, #988	; 0x3dc
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8000f84:	2201      	movs	r2, #1
 8000f86:	2103      	movs	r1, #3
 8000f88:	f00b fb78 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f503 7079 	add.w	r0, r3, #996	; 0x3e4
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8000f98:	2203      	movs	r2, #3
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	f00b fb6e 	bl	800c67c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f503 707b 	add.w	r0, r3, #1004	; 0x3ec
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8000fac:	2203      	movs	r2, #3
 8000fae:	2103      	movs	r1, #3
 8000fb0:	f00b fb64 	bl	800c67c <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f503 723f 	add.w	r2, r3, #764	; 0x2fc
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	f00b f8ee 	bl	800c1a4 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	f00b f8e4 	bl	800c1a4 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f503 7243 	add.w	r2, r3, #780	; 0x30c
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4610      	mov	r0, r2
 8000fec:	f00b f8da 	bl	800c1a4 <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQ));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8001002:	461a      	mov	r2, r3
 8001004:	f00b f994 	bl	800c330 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQ), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f503 7063 	add.w	r0, r3, #908	; 0x38c
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f503 7161 	add.w	r1, r3, #900	; 0x384
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800101a:	461a      	mov	r2, r3
 800101c:	f00b f988 	bl	800c330 <arm_mat_mult_f32>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <KalmanMatrixReset>:

void KalmanMatrixReset(KalmanFilterVar *KalmanVar , float Pvar)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	ed87 0a00 	vstr	s0, [r7]
	for (int index = 0; index < 3; ++index)
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	e013      	b.n	8001062 <KalmanMatrixReset+0x3a>
	{
		KalmanVar ->MatStateLast_Data[index] = 0.0;
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	332c      	adds	r3, #44	; 0x2c
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
		KalmanVar ->MatState_Data[index] = 0.0;
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3328      	adds	r3, #40	; 0x28
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	3304      	adds	r3, #4
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
	for (int index = 0; index < 3; ++index)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3301      	adds	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2b02      	cmp	r3, #2
 8001066:	dde8      	ble.n	800103a <KalmanMatrixReset+0x12>
	}

	KalmanVar ->MatPredict_Data[0] = Pvar;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	KalmanVar ->MatPredictLast_Data[0] = Pvar;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	KalmanVar ->MatPredict_Data[1] = 0.0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	KalmanVar ->MatPredictLast_Data[1] = 0.0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	KalmanVar ->MatPredict_Data[2] = 0.0;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	KalmanVar ->MatPredictLast_Data[2] = 0.0;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	KalmanVar ->MatPredict_Data[3] = 0.0;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	KalmanVar ->MatPredictLast_Data[3] = 0.0;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	KalmanVar ->MatPredict_Data[4] = Pvar;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	KalmanVar ->MatPredictLast_Data[4] = Pvar;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	KalmanVar ->MatPredict_Data[5] = 0.0;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	KalmanVar ->MatPredictLast_Data[5] = 0.0;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

	KalmanVar ->MatPredict_Data[6] = 0.0;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	KalmanVar ->MatPredictLast_Data[6] = 0.0;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	KalmanVar ->MatPredict_Data[7] = 0.0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	KalmanVar ->MatPredictLast_Data[7] = 0.0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	KalmanVar ->MatPredict_Data[8] = Pvar;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	KalmanVar ->MatPredictLast_Data[8] = Pvar;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg,float32_t VelocityDeg)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	ed87 0a02 	vstr	s0, [r7, #8]
 8001128:	edc7 0a01 	vstr	s1, [r7, #4]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f503 714f 	add.w	r1, r3, #828	; 0x33c
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800113e:	461a      	mov	r2, r3
 8001140:	f00b f8f6 	bl	800c330 <arm_mat_mult_f32>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f503 7153 	add.w	r1, r3, #844	; 0x34c
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8001160:	461a      	mov	r2, r3
 8001162:	f00b f8e5 	bl	800c330 <arm_mat_mult_f32>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f503 706d 	add.w	r0, r3, #948	; 0x3b4
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f503 715f 	add.w	r1, r3, #892	; 0x37c
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001182:	461a      	mov	r2, r3
 8001184:	f00b f8d4 	bl	800c330 <arm_mat_mult_f32>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f503 706f 	add.w	r0, r3, #956	; 0x3bc
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80011a4:	461a      	mov	r2, r3
 80011a6:	f00b fa6d 	bl	800c684 <arm_mat_add_f32>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	KalmanVar -> MatZ_Data[1] = VelocityDeg; // Sensor Input
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f503 714d 	add.w	r1, r3, #820	; 0x334
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80011d6:	461a      	mov	r2, r3
 80011d8:	f00b f8aa 	bl	800c330 <arm_mat_mult_f32>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f503 7171 	add.w	r1, r3, #964	; 0x3c4
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80011f8:	461a      	mov	r2, r3
 80011fa:	f00b f82f 	bl	800c25c <arm_mat_sub_f32>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f503 7151 	add.w	r1, r3, #836	; 0x344
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 800121a:	461a      	mov	r2, r3
 800121c:	f00b f888 	bl	800c330 <arm_mat_mult_f32>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f503 706b 	add.w	r0, r3, #940	; 0x3ac
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f503 7165 	add.w	r1, r3, #916	; 0x394
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 800123c:	461a      	mov	r2, r3
 800123e:	f00b f877 	bl	800c330 <arm_mat_mult_f32>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f503 7149 	add.w	r1, r3, #804	; 0x324
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800125e:	461a      	mov	r2, r3
 8001260:	f00b fa10 	bl	800c684 <arm_mat_add_f32>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f503 7259 	add.w	r2, r3, #868	; 0x364
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 800127a:	4619      	mov	r1, r3
 800127c:	4610      	mov	r0, r2
 800127e:	f00b f8f7 	bl	800c470 <arm_mat_inverse_f32>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f503 7165 	add.w	r1, r3, #916	; 0x394
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 800129e:	461a      	mov	r2, r3
 80012a0:	f00b f846 	bl	800c330 <arm_mat_mult_f32>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f503 7075 	add.w	r0, r3, #980	; 0x3d4
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f503 7167 	add.w	r1, r3, #924	; 0x39c
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80012c0:	461a      	mov	r2, r3
 80012c2:	f00b f835 	bl	800c330 <arm_mat_mult_f32>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f503 7155 	add.w	r1, r3, #852	; 0x354
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80012e2:	461a      	mov	r2, r3
 80012e4:	f00b f824 	bl	800c330 <arm_mat_mult_f32>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f503 7077 	add.w	r0, r3, #988	; 0x3dc
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f503 714d 	add.w	r1, r3, #820	; 0x334
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8001304:	461a      	mov	r2, r3
 8001306:	f00b f9bd 	bl	800c684 <arm_mat_add_f32>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f503 7143 	add.w	r1, r3, #780	; 0x30c
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8001326:	461a      	mov	r2, r3
 8001328:	f00b f802 	bl	800c330 <arm_mat_mult_f32>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f503 705d 	add.w	r0, r3, #884	; 0x374
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f503 7179 	add.w	r1, r3, #996	; 0x3e4
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8001348:	461a      	mov	r2, r3
 800134a:	f00a ff87 	bl	800c25c <arm_mat_sub_f32>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f503 707b 	add.w	r0, r3, #1004	; 0x3ec
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f503 7151 	add.w	r1, r3, #836	; 0x344
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800136a:	461a      	mov	r2, r3
 800136c:	f00a ffe0 	bl	800c330 <arm_mat_mult_f32>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <PIDAController_Init>:

#define PID_LIM_MIN_INT -10000.0f
#define PID_LIM_MAX_INT  10000.0f

void PIDAController_Init(PIDAController *pid)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	pid->Last1Error = 0.0f;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
	pid->Last2Error = 0.0f;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	625a      	str	r2, [r3, #36]	; 0x24

	pid->differentiatorOutput = 0.0f;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
	pid->integratorOutput = 0.0f;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
	pid->proportionalOutput = 0.0f;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	61da      	str	r2, [r3, #28]

	pid->ControllerOut = 0.0f;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
	pid->ControllerLastOut = 0.0f;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c

	pid->OutputMax = PID_LIM_MAX_INT;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <PIDAController_Init+0x58>)
 80013c8:	611a      	str	r2, [r3, #16]
	pid->OutputMin = PID_LIM_MIN_INT;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <PIDAController_Init+0x5c>)
 80013ce:	60da      	str	r2, [r3, #12]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	461c4000 	.word	0x461c4000
 80013e0:	c61c4000 	.word	0xc61c4000

080013e4 <PIDAPositonController_Update>:

float PIDAPositonController_Update(PIDAController *pid,TrajectoryG *traject, float setpoint, float measurement,float VfromTraject,float VMCal)
{
 80013e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013e8:	ed2d 8b02 	vpush	{d8}
 80013ec:	b088      	sub	sp, #32
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6178      	str	r0, [r7, #20]
 80013f2:	6139      	str	r1, [r7, #16]
 80013f4:	ed87 0a03 	vstr	s0, [r7, #12]
 80013f8:	edc7 0a02 	vstr	s1, [r7, #8]
 80013fc:	ed87 1a01 	vstr	s2, [r7, #4]
 8001400:	edc7 1a00 	vstr	s3, [r7]
    float error = setpoint - measurement;
 8001404:	ed97 7a03 	vldr	s14, [r7, #12]
 8001408:	edd7 7a02 	vldr	s15, [r7, #8]
 800140c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001410:	edc7 7a07 	vstr	s15, [r7, #28]
    float errorDZ = error;
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	61bb      	str	r3, [r7, #24]

	if(traject ->TrajectoryMode == 0) // S-curve
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800141e:	2b00      	cmp	r3, #0
 8001420:	d16d      	bne.n	80014fe <PIDAPositonController_Update+0x11a>
	{
	    if(AbsVal(VfromTraject) < AbsVal(VMCal) && traject->TrajectoryFlag == 0)
 8001422:	ed97 0a01 	vldr	s0, [r7, #4]
 8001426:	f000 fad3 	bl	80019d0 <AbsVal>
 800142a:	eeb0 8a40 	vmov.f32	s16, s0
 800142e:	ed97 0a00 	vldr	s0, [r7]
 8001432:	f000 facd 	bl	80019d0 <AbsVal>
 8001436:	eef0 7a40 	vmov.f32	s15, s0
 800143a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800143e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001442:	d513      	bpl.n	800146c <PIDAPositonController_Update+0x88>
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	edd3 7a86 	vldr	s15, [r3, #536]	; 0x218
 800144a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	d10b      	bne.n	800146c <PIDAPositonController_Update+0x88>
	    {
	    	pid->Kp  = 10.0;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	4a83      	ldr	r2, [pc, #524]	; (8001664 <PIDAPositonController_Update+0x280>)
 8001458:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 0.0;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 0.0;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	e058      	b.n	800151e <PIDAPositonController_Update+0x13a>
	    }
	    else if (AbsVal(VfromTraject) == AbsVal(VMCal))
 800146c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001470:	f000 faae 	bl	80019d0 <AbsVal>
 8001474:	eeb0 8a40 	vmov.f32	s16, s0
 8001478:	ed97 0a00 	vldr	s0, [r7]
 800147c:	f000 faa8 	bl	80019d0 <AbsVal>
 8001480:	eef0 7a40 	vmov.f32	s15, s0
 8001484:	eeb4 8a67 	vcmp.f32	s16, s15
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	d110      	bne.n	80014b0 <PIDAPositonController_Update+0xcc>
	    {
	    	pid->Kp  = 6.0;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	4a75      	ldr	r2, [pc, #468]	; (8001668 <PIDAPositonController_Update+0x284>)
 8001492:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 0.0;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 0.0;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
	    	traject->TrajectoryFlag = 1;
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 80014ae:	e036      	b.n	800151e <PIDAPositonController_Update+0x13a>
	    }
	    else if (AbsVal(VfromTraject) == AbsVal(VMCal) && traject->TrajectoryFlag == 1)
 80014b0:	ed97 0a01 	vldr	s0, [r7, #4]
 80014b4:	f000 fa8c 	bl	80019d0 <AbsVal>
 80014b8:	eeb0 8a40 	vmov.f32	s16, s0
 80014bc:	ed97 0a00 	vldr	s0, [r7]
 80014c0:	f000 fa86 	bl	80019d0 <AbsVal>
 80014c4:	eef0 7a40 	vmov.f32	s15, s0
 80014c8:	eeb4 8a67 	vcmp.f32	s16, s15
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	d125      	bne.n	800151e <PIDAPositonController_Update+0x13a>
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	edd3 7a86 	vldr	s15, [r3, #536]	; 0x218
 80014d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014dc:	eef4 7a47 	vcmp.f32	s15, s14
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	d11b      	bne.n	800151e <PIDAPositonController_Update+0x13a>
	    {
	    	pid->Kp  = 6.0;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	4a5f      	ldr	r2, [pc, #380]	; (8001668 <PIDAPositonController_Update+0x284>)
 80014ea:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 0.0;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 0.0;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	e00f      	b.n	800151e <PIDAPositonController_Update+0x13a>
	    }
	}
	else if(traject ->TrajectoryMode == 1) //Quintic
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8001504:	2b01      	cmp	r3, #1
 8001506:	d10a      	bne.n	800151e <PIDAPositonController_Update+0x13a>
	{
			pid->Kp  = 6.0;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	4a57      	ldr	r2, [pc, #348]	; (8001668 <PIDAPositonController_Update+0x284>)
 800150c:	601a      	str	r2, [r3, #0]
			pid->Ki  = 0.0;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
			pid->Kd  = 0.0;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
	}
	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	ed93 7a00 	vldr	s14, [r3]
 8001524:	edd7 7a06 	vldr	s15, [r7, #24]
 8001528:	ee27 7a27 	vmul.f32	s14, s14, s15
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	edd3 6a00 	vldr	s13, [r3]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	edd3 7a08 	vldr	s15, [r3, #32]
 8001538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800153c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	ed93 7a01 	vldr	s14, [r3, #4]
 800154c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ff9e 	bl	80004a0 <__aeabi_f2d>
 8001564:	4604      	mov	r4, r0
 8001566:	460d      	mov	r5, r1
 8001568:	69b8      	ldr	r0, [r7, #24]
 800156a:	f7fe ff99 	bl	80004a0 <__aeabi_f2d>
 800156e:	4680      	mov	r8, r0
 8001570:	4689      	mov	r9, r1
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ff92 	bl	80004a0 <__aeabi_f2d>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	f7fe fe30 	bl	80001e4 <__adddf3>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4640      	mov	r0, r8
 800158a:	4649      	mov	r1, r9
 800158c:	f7fe fe28 	bl	80001e0 <__aeabi_dsub>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4690      	mov	r8, r2
 8001596:	4699      	mov	r9, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ff7f 	bl	80004a0 <__aeabi_f2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4640      	mov	r0, r8
 80015a8:	4649      	mov	r1, r9
 80015aa:	f7fe fe1b 	bl	80001e4 <__adddf3>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f7fe ffcb 	bl	8000550 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff f9f7 	bl	80009b4 <__aeabi_d2f>
 80015c6:	4602      	mov	r2, r0
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	ed93 7a07 	vldr	s14, [r3, #28]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80015d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	edd3 7a06 	vldr	s15, [r3, #24]
 80015e2:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80015ec:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001602:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160a:	dd04      	ble.n	8001616 <PIDAPositonController_Update+0x232>

    	pid->ControllerOut = pid->OutputMax;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
 8001614:	e00e      	b.n	8001634 <PIDAPositonController_Update+0x250>

    } else if (pid->ControllerOut < pid->OutputMin) {
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001622:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	d503      	bpl.n	8001634 <PIDAPositonController_Update+0x250>

    	pid->ControllerOut = pid->OutputMin;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	6a1a      	ldr	r2, [r3, #32]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	ee07 3a90 	vmov	s15, r3
}
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	ecbd 8b02 	vpop	{d8}
 800165e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001662:	bf00      	nop
 8001664:	41200000 	.word	0x41200000
 8001668:	40c00000 	.word	0x40c00000

0800166c <PIDAVelocityController_Update>:



float PIDAVelocityController_Update(PIDAController *pid,TrajectoryG *traject, float setpoint, float measurement,float VfromTraject,float VMCal){
 800166c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001670:	ed2d 8b02 	vpush	{d8}
 8001674:	b088      	sub	sp, #32
 8001676:	af00      	add	r7, sp, #0
 8001678:	6178      	str	r0, [r7, #20]
 800167a:	6139      	str	r1, [r7, #16]
 800167c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001680:	edc7 0a02 	vstr	s1, [r7, #8]
 8001684:	ed87 1a01 	vstr	s2, [r7, #4]
 8001688:	edc7 1a00 	vstr	s3, [r7]

    float error = setpoint - measurement;
 800168c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001690:	edd7 7a02 	vldr	s15, [r7, #8]
 8001694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001698:	edc7 7a07 	vstr	s15, [r7, #28]
    float errorDZ = error;
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	61bb      	str	r3, [r7, #24]
	if(traject ->TrajectoryMode == 0) // S-curve
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d169      	bne.n	800177e <PIDAVelocityController_Update+0x112>
	{
	    if(AbsVal(VfromTraject) < AbsVal(VMCal) && traject->TrajectoryFlag == 0) // 10 deg/s
 80016aa:	ed97 0a01 	vldr	s0, [r7, #4]
 80016ae:	f000 f98f 	bl	80019d0 <AbsVal>
 80016b2:	eeb0 8a40 	vmov.f32	s16, s0
 80016b6:	ed97 0a00 	vldr	s0, [r7]
 80016ba:	f000 f989 	bl	80019d0 <AbsVal>
 80016be:	eef0 7a40 	vmov.f32	s15, s0
 80016c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80016c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ca:	d511      	bpl.n	80016f0 <PIDAVelocityController_Update+0x84>
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	edd3 7a86 	vldr	s15, [r3, #536]	; 0x218
 80016d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016da:	d109      	bne.n	80016f0 <PIDAVelocityController_Update+0x84>
	    {
	    	pid->Kp  = 20.0;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	4a80      	ldr	r2, [pc, #512]	; (80018e0 <PIDAVelocityController_Update+0x274>)
 80016e0:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 1.6;
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	4a7f      	ldr	r2, [pc, #508]	; (80018e4 <PIDAVelocityController_Update+0x278>)
 80016e6:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 2.5;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	4a7f      	ldr	r2, [pc, #508]	; (80018e8 <PIDAVelocityController_Update+0x27c>)
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	e055      	b.n	800179c <PIDAVelocityController_Update+0x130>
	    }
	    else if (AbsVal(VfromTraject) == AbsVal(VMCal))
 80016f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80016f4:	f000 f96c 	bl	80019d0 <AbsVal>
 80016f8:	eeb0 8a40 	vmov.f32	s16, s0
 80016fc:	ed97 0a00 	vldr	s0, [r7]
 8001700:	f000 f966 	bl	80019d0 <AbsVal>
 8001704:	eef0 7a40 	vmov.f32	s15, s0
 8001708:	eeb4 8a67 	vcmp.f32	s16, s15
 800170c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001710:	d10f      	bne.n	8001732 <PIDAVelocityController_Update+0xc6>
	    {
	    	pid->Kp  = 0.16;
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	4a75      	ldr	r2, [pc, #468]	; (80018ec <PIDAVelocityController_Update+0x280>)
 8001716:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 3.14;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	4a75      	ldr	r2, [pc, #468]	; (80018f0 <PIDAVelocityController_Update+0x284>)
 800171c:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 0;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
	    	traject->TrajectoryFlag = 1;
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800172c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8001730:	e034      	b.n	800179c <PIDAVelocityController_Update+0x130>
	    }
	    else if (AbsVal(VfromTraject) == AbsVal(VMCal) && traject->TrajectoryFlag == 1)
 8001732:	ed97 0a01 	vldr	s0, [r7, #4]
 8001736:	f000 f94b 	bl	80019d0 <AbsVal>
 800173a:	eeb0 8a40 	vmov.f32	s16, s0
 800173e:	ed97 0a00 	vldr	s0, [r7]
 8001742:	f000 f945 	bl	80019d0 <AbsVal>
 8001746:	eef0 7a40 	vmov.f32	s15, s0
 800174a:	eeb4 8a67 	vcmp.f32	s16, s15
 800174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001752:	d123      	bne.n	800179c <PIDAVelocityController_Update+0x130>
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	edd3 7a86 	vldr	s15, [r3, #536]	; 0x218
 800175a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800175e:	eef4 7a47 	vcmp.f32	s15, s14
 8001762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001766:	d119      	bne.n	800179c <PIDAVelocityController_Update+0x130>
	    {
	    	pid->Kp  = 0.27;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	4a62      	ldr	r2, [pc, #392]	; (80018f4 <PIDAVelocityController_Update+0x288>)
 800176c:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 2.2;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	4a61      	ldr	r2, [pc, #388]	; (80018f8 <PIDAVelocityController_Update+0x28c>)
 8001772:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 0;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	e00e      	b.n	800179c <PIDAVelocityController_Update+0x130>
	    }
	}
	else if(traject ->TrajectoryMode == 1) //Quintic
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8001784:	2b01      	cmp	r3, #1
 8001786:	d109      	bne.n	800179c <PIDAVelocityController_Update+0x130>
	{
			pid->Kp  = 0.27;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	4a5a      	ldr	r2, [pc, #360]	; (80018f4 <PIDAVelocityController_Update+0x288>)
 800178c:	601a      	str	r2, [r3, #0]
			pid->Ki  = 2.2;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	4a59      	ldr	r2, [pc, #356]	; (80018f8 <PIDAVelocityController_Update+0x28c>)
 8001792:	605a      	str	r2, [r3, #4]
			pid->Kd  = 0;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
	}
	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	ed93 7a00 	vldr	s14, [r3]
 80017a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	edd3 6a00 	vldr	s13, [r3]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80017b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80017ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80017ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fe5f 	bl	80004a0 <__aeabi_f2d>
 80017e2:	4604      	mov	r4, r0
 80017e4:	460d      	mov	r5, r1
 80017e6:	69b8      	ldr	r0, [r7, #24]
 80017e8:	f7fe fe5a 	bl	80004a0 <__aeabi_f2d>
 80017ec:	4680      	mov	r8, r0
 80017ee:	4689      	mov	r9, r1
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fe53 	bl	80004a0 <__aeabi_f2d>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	f7fe fcf1 	bl	80001e4 <__adddf3>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4640      	mov	r0, r8
 8001808:	4649      	mov	r1, r9
 800180a:	f7fe fce9 	bl	80001e0 <__aeabi_dsub>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4690      	mov	r8, r2
 8001814:	4699      	mov	r9, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe40 	bl	80004a0 <__aeabi_f2d>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4640      	mov	r0, r8
 8001826:	4649      	mov	r1, r9
 8001828:	f7fe fcdc 	bl	80001e4 <__adddf3>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4620      	mov	r0, r4
 8001832:	4629      	mov	r1, r5
 8001834:	f7fe fe8c 	bl	8000550 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f8b8 	bl	80009b4 <__aeabi_d2f>
 8001844:	4602      	mov	r2, r0
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	edd3 7a05 	vldr	s15, [r3, #20]
 8001856:	ee37 7a27 	vadd.f32	s14, s14, s15
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001860:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800186a:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001888:	dd04      	ble.n	8001894 <PIDAVelocityController_Update+0x228>

    	pid->ControllerOut = pid->OutputMax;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
 8001892:	e00e      	b.n	80018b2 <PIDAVelocityController_Update+0x246>

    } else if (pid->ControllerOut < pid->OutputMin) {
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	edd3 7a03 	vldr	s15, [r3, #12]
 80018a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	d503      	bpl.n	80018b2 <PIDAVelocityController_Update+0x246>

    	pid->ControllerOut = pid->OutputMin;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	6a1a      	ldr	r2, [r3, #32]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	ee07 3a90 	vmov	s15, r3
}
 80018d0:	eeb0 0a67 	vmov.f32	s0, s15
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	ecbd 8b02 	vpop	{d8}
 80018dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018e0:	41a00000 	.word	0x41a00000
 80018e4:	3fcccccd 	.word	0x3fcccccd
 80018e8:	40200000 	.word	0x40200000
 80018ec:	3e23d70a 	.word	0x3e23d70a
 80018f0:	4048f5c3 	.word	0x4048f5c3
 80018f4:	3e8a3d71 	.word	0x3e8a3d71
 80018f8:	400ccccd 	.word	0x400ccccd

080018fc <Robotinit>:


#include "Trajectory.h"

void Robotinit(RobotManagement *Robot)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	  Robot -> Position = 0.0;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
	  Robot -> Velocity = 0.0;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
	  Robot -> CurrentStation = 0;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	811a      	strh	r2, [r3, #8]
	  Robot -> GoalPositon = 0.0;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
	  Robot -> HomePositon = 0.0;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	615a      	str	r2, [r3, #20]
	  Robot -> QX = 0.0;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
	  Robot -> QV = 0.0;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
	  Robot -> QVMax = 0.0;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	621a      	str	r2, [r3, #32]

	  Robot -> flagSethome = 0;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  Robot -> flagStartTime = 0;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  Robot -> RunningFlag = 0;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	  Robot -> MotorIsOn = 0;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <TrajectorInit>:

void TrajectorInit(TrajectoryG *traject)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
	arm_mat_init_f32(&(traject ->MatTime), 6, 6, traject ->MatTime_Data);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f503 7007 	add.w	r0, r3, #540	; 0x21c
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2206      	movs	r2, #6
 8001980:	2106      	movs	r1, #6
 8001982:	f00a fe7b 	bl	800c67c <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatTimeINV), 6, 6, traject ->MatTimeINV_Data);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f503 7009 	add.w	r0, r3, #548	; 0x224
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3390      	adds	r3, #144	; 0x90
 8001990:	2206      	movs	r2, #6
 8001992:	2106      	movs	r1, #6
 8001994:	f00a fe72 	bl	800c67c <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatCondition), 6, 1, traject ->MatCondition_Data);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f503 700b 	add.w	r0, r3, #556	; 0x22c
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80019a4:	2201      	movs	r2, #1
 80019a6:	2106      	movs	r1, #6
 80019a8:	f00a fe68 	bl	800c67c <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatA), 6, 1, traject ->MatTA_Data);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f503 700d 	add.w	r0, r3, #564	; 0x234
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80019b8:	2201      	movs	r2, #1
 80019ba:	2106      	movs	r1, #6
 80019bc:	f00a fe5e 	bl	800c67c <arm_mat_init_f32>
	traject -> TrajectoryMode = 0;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <AbsVal>:
{
	Robot -> HomePositon = homePoint;
}

float AbsVal(float number)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 80019da:	edd7 7a01 	vldr	s15, [r7, #4]
 80019de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e6:	d50e      	bpl.n	8001a06 <AbsVal+0x36>
  {
    return number*-1.0;
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7fe fd59 	bl	80004a0 <__aeabi_f2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7fe ffdd 	bl	80009b4 <__aeabi_d2f>
 80019fa:	4603      	mov	r3, r0
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eef1 7a67 	vneg.f32	s15, s15
 8001a04:	e001      	b.n	8001a0a <AbsVal+0x3a>
  }
  else
  {
    return number;
 8001a06:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 8001a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	0000      	movs	r0, r0
	...

08001a18 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal, float Veloinput){
 8001a18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a1c:	b088      	sub	sp, #32
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a26:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a2a:	ed87 1a00 	vstr	s2, [r7]

	traject -> Qin = Qinitial;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	traject -> Qfinal = Qfinal;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	// Set initial = 0;
	traject -> QRelative = traject -> Qfinal - traject -> Qin;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	ed93 7a7c 	vldr	s14, [r3, #496]	; 0x1f0
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	edd3 7a7a 	vldr	s15, [r3, #488]	; 0x1e8
 8001a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	edc3 7a7b 	vstr	s15, [r3, #492]	; 0x1ec
	// Set Vmax Amax Jmax
	traject -> Vmax = 0.0;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	traject -> Amax = 21.77;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4a22      	ldr	r2, [pc, #136]	; (8001aec <CoefficientAndTimeCalculation+0xd4>)
 8001a62:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	traject -> Jmax = 114.59 ;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4a21      	ldr	r2, [pc, #132]	; (8001af0 <CoefficientAndTimeCalculation+0xd8>)
 8001a6a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	float gain = 0.0;
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
	if(traject -> QRelative < 0.0)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8001a7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a82:	d502      	bpl.n	8001a8a <CoefficientAndTimeCalculation+0x72>
	{
		gain = -1.0;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <CoefficientAndTimeCalculation+0xdc>)
 8001a86:	61fb      	str	r3, [r7, #28]
 8001a88:	e002      	b.n	8001a90 <CoefficientAndTimeCalculation+0x78>
	}
	else
	{
		gain = 1.0;
 8001a8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a8e:	61fb      	str	r3, [r7, #28]
	}
	// Find Speed limit
	float DistanceABS = AbsVal(traject -> QRelative);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8001a96:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9a:	f7ff ff99 	bl	80019d0 <AbsVal>
 8001a9e:	ed87 0a06 	vstr	s0, [r7, #24]
	// Check Trajectory mode
	if(DistanceABS <= 0.0 && DistanceABS >= 0.0)
 8001aa2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aae:	d80b      	bhi.n	8001ac8 <CoefficientAndTimeCalculation+0xb0>
 8001ab0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ab4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abc:	db04      	blt.n	8001ac8 <CoefficientAndTimeCalculation+0xb0>
	{
		traject -> TrajectoryMode = 1;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
 8001ac6:	e003      	b.n	8001ad0 <CoefficientAndTimeCalculation+0xb8>
	}
	else
	{
		traject -> TrajectoryMode = 0;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	}

	if(DistanceABS >= 130)
 8001ad0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ad4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001af8 <CoefficientAndTimeCalculation+0xe0>
 8001ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae0:	db0e      	blt.n	8001b00 <CoefficientAndTimeCalculation+0xe8>
	{
//		traject -> Vmax = 60;
		traject -> Vmax = 51;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4a05      	ldr	r2, [pc, #20]	; (8001afc <CoefficientAndTimeCalculation+0xe4>)
 8001ae6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8001aea:	e07a      	b.n	8001be2 <CoefficientAndTimeCalculation+0x1ca>
 8001aec:	41ae28f6 	.word	0x41ae28f6
 8001af0:	42e52e14 	.word	0x42e52e14
 8001af4:	bf800000 	.word	0xbf800000
 8001af8:	43020000 	.word	0x43020000
 8001afc:	424c0000 	.word	0x424c0000
	}
	else
	{
//		traject -> Vmax = (-0.0000003*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00009*(DistanceABS*DistanceABS*DistanceABS))-(0.0115*(DistanceABS*DistanceABS))+(0.995*DistanceABS)+7.1259;
		traject -> Vmax = (-0.0000001*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00005*(DistanceABS*DistanceABS*DistanceABS))-(0.0082*(DistanceABS*DistanceABS))+(0.8134*DistanceABS)+4.0415;
 8001b00:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b04:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b08:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b18:	ee17 0a90 	vmov	r0, s15
 8001b1c:	f7fe fcc0 	bl	80004a0 <__aeabi_f2d>
 8001b20:	f60f 33ac 	addw	r3, pc, #2988	; 0xbac
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fd12 	bl	8000550 <__aeabi_dmul>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4690      	mov	r8, r2
 8001b32:	4699      	mov	r9, r3
 8001b34:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b38:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b44:	ee17 0a90 	vmov	r0, s15
 8001b48:	f7fe fcaa 	bl	80004a0 <__aeabi_f2d>
 8001b4c:	f60f 3388 	addw	r3, pc, #2952	; 0xb88
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fcfc 	bl	8000550 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4640      	mov	r0, r8
 8001b5e:	4649      	mov	r1, r9
 8001b60:	f7fe fb40 	bl	80001e4 <__adddf3>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4690      	mov	r8, r2
 8001b6a:	4699      	mov	r9, r3
 8001b6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b70:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b74:	ee17 0a90 	vmov	r0, s15
 8001b78:	f7fe fc92 	bl	80004a0 <__aeabi_f2d>
 8001b7c:	f60f 3360 	addw	r3, pc, #2912	; 0xb60
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fce4 	bl	8000550 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4640      	mov	r0, r8
 8001b8e:	4649      	mov	r1, r9
 8001b90:	f7fe fb26 	bl	80001e0 <__aeabi_dsub>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4690      	mov	r8, r2
 8001b9a:	4699      	mov	r9, r3
 8001b9c:	69b8      	ldr	r0, [r7, #24]
 8001b9e:	f7fe fc7f 	bl	80004a0 <__aeabi_f2d>
 8001ba2:	f60f 3344 	addw	r3, pc, #2884	; 0xb44
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	f7fe fcd1 	bl	8000550 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4640      	mov	r0, r8
 8001bb4:	4649      	mov	r1, r9
 8001bb6:	f7fe fb15 	bl	80001e4 <__adddf3>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f60f 332c 	addw	r3, pc, #2860	; 0xb2c
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe fb0b 	bl	80001e4 <__adddf3>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7fe feed 	bl	80009b4 <__aeabi_d2f>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		//		traject -> Vmax = (-0.0000002*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00007*(DistanceABS*DistanceABS*DistanceABS))-(0.0092*(DistanceABS*DistanceABS))+(0.8419*DistanceABS)+4.8492;
	}

	if(traject -> Vmax > Veloinput)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8001be8:	ed97 7a00 	vldr	s14, [r7]
 8001bec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	d503      	bpl.n	8001bfe <CoefficientAndTimeCalculation+0x1e6>
	{
		traject -> Vmax = Veloinput;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  traject -> Vmax *gain;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	ed93 7a56 	vldr	s14, [r3, #344]	; 0x158
 8001c04:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
	traject -> Amax =  traject -> Amax *gain;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8001c18:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
	traject -> Jmax =  traject -> Jmax *gain;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 8001c2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154

	if(traject ->TrajectoryMode == 0) // S-curve
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f040 8559 	bne.w	80026f8 <CoefficientAndTimeCalculation+0xce0>
	{
		// Calculate time
			traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8001c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001c62:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001c66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	ed93 6a7b 	vldr	s12, [r3, #492]	; 0x1ec
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	edd3 6a56 	vldr	s13, [r3, #344]	; 0x158
 8001c76:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	edc3 7a79 	vstr	s15, [r3, #484]	; 0x1e4
			traject -> T[0] = (traject -> Amax/traject -> Jmax);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 8001c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
			traject -> T[1] = (traject -> Vmax/traject -> Amax);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	edd3 6a56 	vldr	s13, [r3, #344]	; 0x158
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8001ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	edc3 7a74 	vstr	s15, [r3, #464]	; 0x1d0
			traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8001cbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001ccc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	edc3 7a75 	vstr	s15, [r3, #468]	; 0x1d4
			traject -> T[3] = traject -> T[6] - traject -> T[2];
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	ed93 7a79 	vldr	s14, [r3, #484]	; 0x1e4
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	edc3 7a76 	vstr	s15, [r3, #472]	; 0x1d8
			traject -> T[4] = traject -> T[6] - traject -> T[1];
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	ed93 7a79 	vldr	s14, [r3, #484]	; 0x1e4
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	edc3 7a77 	vstr	s15, [r3, #476]	; 0x1dc
			traject -> T[5] = traject -> T[6] - traject -> T[0];
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	ed93 7a79 	vldr	s14, [r3, #484]	; 0x1e4
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	edc3 7a78 	vstr	s15, [r3, #480]	; 0x1e0

			traject -> A[0] = traject -> Jmax;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
			traject -> A[1] = 0;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
			traject -> A[2] = -1.0 * traject -> Jmax;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fbb1 	bl	80004a0 <__aeabi_f2d>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	f7fe fe35 	bl	80009b4 <__aeabi_d2f>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eef1 7a67 	vneg.f32	s15, s15
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	edc3 7a59 	vstr	s15, [r3, #356]	; 0x164
			traject -> A[3] = 0;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
			traject -> A[4] = -1.0 * traject -> Jmax;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fb98 	bl	80004a0 <__aeabi_f2d>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f7fe fe1c 	bl	80009b4 <__aeabi_d2f>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	ee07 3a90 	vmov	s15, r3
 8001d82:	eef1 7a67 	vneg.f32	s15, s15
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	edc3 7a5b 	vstr	s15, [r3, #364]	; 0x16c
			traject -> A[5] = 0;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
			traject -> A[6] = traject -> Jmax;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

			traject -> B[0] = 0;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
			traject -> B[1] = traject -> Amax;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
			traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	edd3 6a55 	vldr	s13, [r3, #340]	; 0x154
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001dca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	edc3 7a60 	vstr	s15, [r3, #384]	; 0x180
			traject -> B[3] = 0;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
			traject -> B[4] = traject -> Jmax * traject -> T[3];
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8001dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	edc3 7a62 	vstr	s15, [r3, #392]	; 0x188
			traject -> B[5] = (-1.0 * traject ->Amax);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fb4e 	bl	80004a0 <__aeabi_f2d>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f7fe fdd2 	bl	80009b4 <__aeabi_d2f>
 8001e10:	4603      	mov	r3, r0
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eef1 7a67 	vneg.f32	s15, s15
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	edc3 7a63 	vstr	s15, [r3, #396]	; 0x18c
			traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fb3a 	bl	80004a0 <__aeabi_f2d>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4614      	mov	r4, r2
 8001e32:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8001e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e46:	ee17 0a90 	vmov	r0, s15
 8001e4a:	f7fe fb29 	bl	80004a0 <__aeabi_f2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4620      	mov	r0, r4
 8001e54:	4629      	mov	r1, r5
 8001e56:	f7fe f9c3 	bl	80001e0 <__aeabi_dsub>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7fe fda7 	bl	80009b4 <__aeabi_d2f>
 8001e66:	4602      	mov	r2, r0
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

			traject -> C[0] = 0;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
			traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	edd3 6a73 	vldr	s13, [r3, #460]	; 0x1cc
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e92:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e96:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001ea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 8001eb4:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	edd3 6a58 	vldr	s13, [r3, #352]	; 0x160
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	ed93 6a73 	vldr	s12, [r3, #460]	; 0x1cc
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001eca:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ece:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001ed6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	ed93 6a5f 	vldr	s12, [r3, #380]	; 0x17c
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001ee6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eee:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	edc3 7a66 	vstr	s15, [r3, #408]	; 0x198
			traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	edd3 6a74 	vldr	s13, [r3, #464]	; 0x1d0
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f12:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001f26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	edd3 7a66 	vldr	s15, [r3, #408]	; 0x198
 8001f34:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	edd3 6a59 	vldr	s13, [r3, #356]	; 0x164
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	ed93 6a74 	vldr	s12, [r3, #464]	; 0x1d0
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001f4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f52:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f56:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	ed93 6a60 	vldr	s12, [r3, #384]	; 0x180
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001f66:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	edc3 7a67 	vstr	s15, [r3, #412]	; 0x19c
			traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	edd3 6a75 	vldr	s13, [r3, #468]	; 0x1d4
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f92:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f96:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001fa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001faa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 8001fb4:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	edd3 6a5a 	vldr	s13, [r3, #360]	; 0x168
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	ed93 6a75 	vldr	s12, [r3, #468]	; 0x1d4
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001fca:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001fd6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	ed93 6a61 	vldr	s12, [r3, #388]	; 0x184
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001fe6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fee:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	edc3 7a68 	vstr	s15, [r3, #416]	; 0x1a0
			traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	edd3 6a76 	vldr	s13, [r3, #472]	; 0x1d8
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 800200a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002012:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002016:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800202a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	edd3 7a68 	vldr	s15, [r3, #416]	; 0x1a0
 8002034:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	edd3 6a5b 	vldr	s13, [r3, #364]	; 0x16c
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	ed93 6a76 	vldr	s12, [r3, #472]	; 0x1d8
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 800204a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800204e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002052:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002056:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	ed93 6a62 	vldr	s12, [r3, #392]	; 0x188
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002066:	ee66 7a27 	vmul.f32	s15, s12, s15
 800206a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800206e:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	edc3 7a69 	vstr	s15, [r3, #420]	; 0x1a4
			traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	edd3 6a77 	vldr	s13, [r3, #476]	; 0x1dc
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 800208a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800208e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002092:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002096:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80020a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 80020b4:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	edd3 6a5c 	vldr	s13, [r3, #368]	; 0x170
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	ed93 6a77 	vldr	s12, [r3, #476]	; 0x1dc
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80020ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80020d6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	ed93 6a63 	vldr	s12, [r3, #396]	; 0x18c
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80020e6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020ee:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	edc3 7a6a 	vstr	s15, [r3, #424]	; 0x1a8
			traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	edd3 6a78 	vldr	s13, [r3, #480]	; 0x1e0
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 800210a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002112:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002116:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800212a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 8002134:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	edd3 6a5d 	vldr	s13, [r3, #372]	; 0x174
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	ed93 6a78 	vldr	s12, [r3, #480]	; 0x1e0
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 800214a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800214e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002152:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002156:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	ed93 6a64 	vldr	s12, [r3, #400]	; 0x190
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002166:	ee66 7a27 	vmul.f32	s15, s12, s15
 800216a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800216e:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	edc3 7a6b 	vstr	s15, [r3, #428]	; 0x1ac

			traject -> D[0] = 0;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
			traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	edd3 6a73 	vldr	s13, [r3, #460]	; 0x1cc
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8002194:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800219e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80021aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	ed93 6a73 	vldr	s12, [r3, #460]	; 0x1cc
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 80021c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021c8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80021cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	edd3 6a65 	vldr	s13, [r3, #404]	; 0x194
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 80021e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 80021ee:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	edd3 6a58 	vldr	s13, [r3, #352]	; 0x160
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	ed93 6a73 	vldr	s12, [r3, #460]	; 0x1cc
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8002204:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800220e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002216:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800221a:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	ed93 6a5f 	vldr	s12, [r3, #380]	; 0x17c
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	edd3 5a73 	vldr	s11, [r3, #460]	; 0x1cc
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8002230:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002234:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002238:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800223c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002240:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	ed93 6a66 	vldr	s12, [r3, #408]	; 0x198
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8002250:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002254:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8002258:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4

			traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	edd3 6a74 	vldr	s13, [r3, #464]	; 0x1d0
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8002274:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 800227e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002286:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800228a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	ed93 6a74 	vldr	s12, [r3, #464]	; 0x1d0
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 80022a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022a8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80022ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80022b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	edd3 6a66 	vldr	s13, [r3, #408]	; 0x198
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 80022c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 80022ce:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	edd3 6a59 	vldr	s13, [r3, #356]	; 0x164
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	ed93 6a74 	vldr	s12, [r3, #464]	; 0x1d0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 80022e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 80022ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f6:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80022fa:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	ed93 6a60 	vldr	s12, [r3, #384]	; 0x180
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	edd3 5a74 	vldr	s11, [r3, #464]	; 0x1d0
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8002310:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002314:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002318:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800231c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002320:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	ed93 6a67 	vldr	s12, [r3, #412]	; 0x19c
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8002330:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002334:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8002338:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8

			traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	edd3 6a75 	vldr	s13, [r3, #468]	; 0x1d4
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8002354:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 800235e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002366:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800236a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	ed93 6a75 	vldr	s12, [r3, #468]	; 0x1d4
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8002380:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002384:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002388:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800238c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002390:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	edd3 6a67 	vldr	s13, [r3, #412]	; 0x19c
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80023a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 80023ae:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	edd3 6a5a 	vldr	s13, [r3, #360]	; 0x168
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	ed93 6a75 	vldr	s12, [r3, #468]	; 0x1d4
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80023c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80023ce:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d6:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80023da:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	ed93 6a61 	vldr	s12, [r3, #388]	; 0x184
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	edd3 5a75 	vldr	s11, [r3, #468]	; 0x1d4
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80023f0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80023f4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023f8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80023fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002400:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	ed93 6a68 	vldr	s12, [r3, #416]	; 0x1a0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8002410:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002414:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8002418:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	edc3 7a6f 	vstr	s15, [r3, #444]	; 0x1bc
			traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	edd3 6a76 	vldr	s13, [r3, #472]	; 0x1d8
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002434:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 800243e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002446:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800244a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	ed93 6a76 	vldr	s12, [r3, #472]	; 0x1d8
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002460:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002464:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002468:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800246c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002470:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	edd3 6a68 	vldr	s13, [r3, #416]	; 0x1a0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002480:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002484:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	edd3 7a6f 	vldr	s15, [r3, #444]	; 0x1bc
 800248e:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	edd3 6a5b 	vldr	s13, [r3, #364]	; 0x16c
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	ed93 6a76 	vldr	s12, [r3, #472]	; 0x1d8
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 80024a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 80024ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b6:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80024ba:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	ed93 6a62 	vldr	s12, [r3, #392]	; 0x188
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	edd3 5a76 	vldr	s11, [r3, #472]	; 0x1d8
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 80024d0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80024d4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024d8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80024dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	ed93 6a69 	vldr	s12, [r3, #420]	; 0x1a4
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 80024f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 80024f8:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	edc3 7a70 	vstr	s15, [r3, #448]	; 0x1c0
			traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	edd3 6a77 	vldr	s13, [r3, #476]	; 0x1dc
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8002514:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 800251e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002526:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800252a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	ed93 6a77 	vldr	s12, [r3, #476]	; 0x1dc
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8002540:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002544:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002548:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800254c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002550:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	edd3 6a69 	vldr	s13, [r3, #420]	; 0x1a4
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8002560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002564:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	edd3 7a70 	vldr	s15, [r3, #448]	; 0x1c0
 800256e:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	edd3 6a5c 	vldr	s13, [r3, #368]	; 0x170
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	ed93 6a77 	vldr	s12, [r3, #476]	; 0x1dc
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8002584:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 800258e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002592:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002596:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800259a:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	ed93 6a63 	vldr	s12, [r3, #396]	; 0x18c
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	edd3 5a77 	vldr	s11, [r3, #476]	; 0x1dc
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80025b0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80025b4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025b8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80025bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	ed93 6a6a 	vldr	s12, [r3, #424]	; 0x1a8
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80025d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80025d8:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	edc3 7a71 	vstr	s15, [r3, #452]	; 0x1c4
			traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	edd3 6a78 	vldr	s13, [r3, #480]	; 0x1e0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 80025f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 80025fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002606:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800260a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	ed93 6a78 	vldr	s12, [r3, #480]	; 0x1e0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002620:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002624:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002628:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800262c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002630:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	edd3 6a6a 	vldr	s13, [r3, #424]	; 0x1a8
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	edd3 7a71 	vldr	s15, [r3, #452]	; 0x1c4
 800264e:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	edd3 6a5d 	vldr	s13, [r3, #372]	; 0x174
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	ed93 6a78 	vldr	s12, [r3, #480]	; 0x1e0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002664:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 800266e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002676:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800267a:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	ed93 6a64 	vldr	s12, [r3, #400]	; 0x190
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	edd3 5a78 	vldr	s11, [r3, #480]	; 0x1e0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002690:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002694:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002698:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800269c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	ed93 6a6b 	vldr	s12, [r3, #428]	; 0x1ac
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 80026b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80026b8:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	edc3 7a72 	vstr	s15, [r3, #456]	; 0x1c8
			traject -> VMCal = traject -> Vmax;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		   traject -> Trajectorystatus = arm_mat_mult_f32(&(traject ->MatTimeINV), &(traject ->MatCondition), &(traject ->MatA));

		   float t = (traject -> TimeFinal)/2.0;
		   traject -> VMCal = (traject -> MatTA_Data[1]) + (2*traject -> MatTA_Data[2]*t) + (3*traject -> MatTA_Data[3]*(t*t)) + (4*traject -> MatTA_Data[4]*(t*t*t)) + (5*traject -> MatTA_Data[5]*(t*t*t*t));
	}
}
 80026ce:	e3b9      	b.n	8002e44 <CoefficientAndTimeCalculation+0x142c>
 80026d0:	9abcaf48 	.word	0x9abcaf48
 80026d4:	be7ad7f2 	.word	0xbe7ad7f2
 80026d8:	eb1c432d 	.word	0xeb1c432d
 80026dc:	3f0a36e2 	.word	0x3f0a36e2
 80026e0:	5e9e1b09 	.word	0x5e9e1b09
 80026e4:	3f80cb29 	.word	0x3f80cb29
 80026e8:	6fd21ff3 	.word	0x6fd21ff3
 80026ec:	3fea075f 	.word	0x3fea075f
 80026f0:	f9db22d1 	.word	0xf9db22d1
 80026f4:	40102a7e 	.word	0x40102a7e
	else if(traject ->TrajectoryMode == 1) //Quintic
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80026fe:	2b01      	cmp	r3, #1
 8002700:	f040 83a0 	bne.w	8002e44 <CoefficientAndTimeCalculation+0x142c>
		   traject -> TimeInit = 0.0;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		   traject -> TimeFinal = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 800271a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 800272a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800272e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	ed93 6a7b 	vldr	s12, [r3, #492]	; 0x1ec
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	edd3 6a56 	vldr	s13, [r3, #344]	; 0x158
 800273e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	edc3 7a83 	vstr	s15, [r3, #524]	; 0x20c
		   traject -> MatTime_Data[0] = 1.0;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002752:	601a      	str	r2, [r3, #0]
		   traject -> MatTime_Data[1] = traject -> TimeInit;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	605a      	str	r2, [r3, #4]
		   traject -> MatTime_Data[2] = traject -> TimeInit*traject -> TimeInit;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 800276a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	edc3 7a02 	vstr	s15, [r3, #8]
		   traject -> MatTime_Data[3] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8002780:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 800278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	edc3 7a03 	vstr	s15, [r3, #12]
		   traject -> MatTime_Data[4] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	edc3 7a04 	vstr	s15, [r3, #16]
		   traject -> MatTime_Data[5] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	edc3 7a05 	vstr	s15, [r3, #20]
		   traject -> MatTime_Data[6] = 0.0;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	619a      	str	r2, [r3, #24]
		   traject -> MatTime_Data[7] = 1.0;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002800:	61da      	str	r2, [r3, #28]
		   traject -> MatTime_Data[8] = 2.0*traject -> TimeInit;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8002808:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	edc3 7a08 	vstr	s15, [r3, #32]
		   traject -> MatTime_Data[9] = 3.0*traject -> TimeInit*traject -> TimeInit;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd fe41 	bl	80004a0 <__aeabi_f2d>
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	4bce      	ldr	r3, [pc, #824]	; (8002b5c <CoefficientAndTimeCalculation+0x1144>)
 8002824:	f7fd fe94 	bl	8000550 <__aeabi_dmul>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4614      	mov	r4, r2
 800282e:	461d      	mov	r5, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002836:	4618      	mov	r0, r3
 8002838:	f7fd fe32 	bl	80004a0 <__aeabi_f2d>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4620      	mov	r0, r4
 8002842:	4629      	mov	r1, r5
 8002844:	f7fd fe84 	bl	8000550 <__aeabi_dmul>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	f7fe f8b0 	bl	80009b4 <__aeabi_d2f>
 8002854:	4602      	mov	r2, r0
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	625a      	str	r2, [r3, #36]	; 0x24
		   traject -> MatTime_Data[10] = 4.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002860:	4618      	mov	r0, r3
 8002862:	f7fd fe1d 	bl	80004a0 <__aeabi_f2d>
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	4bbd      	ldr	r3, [pc, #756]	; (8002b60 <CoefficientAndTimeCalculation+0x1148>)
 800286c:	f7fd fe70 	bl	8000550 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4614      	mov	r4, r2
 8002876:	461d      	mov	r5, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800287e:	4618      	mov	r0, r3
 8002880:	f7fd fe0e 	bl	80004a0 <__aeabi_f2d>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4620      	mov	r0, r4
 800288a:	4629      	mov	r1, r5
 800288c:	f7fd fe60 	bl	8000550 <__aeabi_dmul>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4614      	mov	r4, r2
 8002896:	461d      	mov	r5, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fdfe 	bl	80004a0 <__aeabi_f2d>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4620      	mov	r0, r4
 80028aa:	4629      	mov	r1, r5
 80028ac:	f7fd fe50 	bl	8000550 <__aeabi_dmul>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f7fe f87c 	bl	80009b4 <__aeabi_d2f>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	629a      	str	r2, [r3, #40]	; 0x28
		   traject -> MatTime_Data[11] = 5.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fd fde9 	bl	80004a0 <__aeabi_f2d>
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	4ba4      	ldr	r3, [pc, #656]	; (8002b64 <CoefficientAndTimeCalculation+0x114c>)
 80028d4:	f7fd fe3c 	bl	8000550 <__aeabi_dmul>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4614      	mov	r4, r2
 80028de:	461d      	mov	r5, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fdda 	bl	80004a0 <__aeabi_f2d>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4620      	mov	r0, r4
 80028f2:	4629      	mov	r1, r5
 80028f4:	f7fd fe2c 	bl	8000550 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4614      	mov	r4, r2
 80028fe:	461d      	mov	r5, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd fdca 	bl	80004a0 <__aeabi_f2d>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4620      	mov	r0, r4
 8002912:	4629      	mov	r1, r5
 8002914:	f7fd fe1c 	bl	8000550 <__aeabi_dmul>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4614      	mov	r4, r2
 800291e:	461d      	mov	r5, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd fdba 	bl	80004a0 <__aeabi_f2d>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4620      	mov	r0, r4
 8002932:	4629      	mov	r1, r5
 8002934:	f7fd fe0c 	bl	8000550 <__aeabi_dmul>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	f7fe f838 	bl	80009b4 <__aeabi_d2f>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	62da      	str	r2, [r3, #44]	; 0x2c
		   traject -> MatTime_Data[12] = 0.0;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	631a      	str	r2, [r3, #48]	; 0x30
		   traject -> MatTime_Data[13] = 0.0;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	635a      	str	r2, [r3, #52]	; 0x34
		   traject -> MatTime_Data[14] = 2.0;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
		   traject -> MatTime_Data[15] = 6.0*traject -> TimeInit;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8002968:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800296c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		   traject -> MatTime_Data[16] = 12.0*traject -> TimeInit*traject -> TimeInit;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fd8f 	bl	80004a0 <__aeabi_f2d>
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	4b78      	ldr	r3, [pc, #480]	; (8002b68 <CoefficientAndTimeCalculation+0x1150>)
 8002988:	f7fd fde2 	bl	8000550 <__aeabi_dmul>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4614      	mov	r4, r2
 8002992:	461d      	mov	r5, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fd80 	bl	80004a0 <__aeabi_f2d>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4620      	mov	r0, r4
 80029a6:	4629      	mov	r1, r5
 80029a8:	f7fd fdd2 	bl	8000550 <__aeabi_dmul>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	f7fd fffe 	bl	80009b4 <__aeabi_d2f>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
		   traject -> MatTime_Data[17] = 20.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fd fd6b 	bl	80004a0 <__aeabi_f2d>
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	4b67      	ldr	r3, [pc, #412]	; (8002b6c <CoefficientAndTimeCalculation+0x1154>)
 80029d0:	f7fd fdbe 	bl	8000550 <__aeabi_dmul>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4614      	mov	r4, r2
 80029da:	461d      	mov	r5, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fd5c 	bl	80004a0 <__aeabi_f2d>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4620      	mov	r0, r4
 80029ee:	4629      	mov	r1, r5
 80029f0:	f7fd fdae 	bl	8000550 <__aeabi_dmul>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4614      	mov	r4, r2
 80029fa:	461d      	mov	r5, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fd fd4c 	bl	80004a0 <__aeabi_f2d>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	4629      	mov	r1, r5
 8002a10:	f7fd fd9e 	bl	8000550 <__aeabi_dmul>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	f7fd ffca 	bl	80009b4 <__aeabi_d2f>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
		   traject -> MatTime_Data[18] = 1.0;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a2c:	649a      	str	r2, [r3, #72]	; 0x48
		   traject -> MatTime_Data[19] = traject -> TimeFinal;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	64da      	str	r2, [r3, #76]	; 0x4c
		   traject -> MatTime_Data[20] = traject -> TimeFinal*traject -> TimeFinal;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		   traject -> MatTime_Data[21] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		   traject -> MatTime_Data[22] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		   traject -> MatTime_Data[23] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002aa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002aae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002ab8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		   traject -> MatTime_Data[24] = 0.0;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	661a      	str	r2, [r3, #96]	; 0x60
		   traject -> MatTime_Data[25] = 1.0;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ada:	665a      	str	r2, [r3, #100]	; 0x64
		   traject -> MatTime_Data[26] = 2.0*traject -> TimeFinal;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002ae2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		   traject -> MatTime_Data[27] = 3.0*traject -> TimeFinal*traject -> TimeFinal;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fd fcd4 	bl	80004a0 <__aeabi_f2d>
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <CoefficientAndTimeCalculation+0x1144>)
 8002afe:	f7fd fd27 	bl	8000550 <__aeabi_dmul>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4614      	mov	r4, r2
 8002b08:	461d      	mov	r5, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fd fcc5 	bl	80004a0 <__aeabi_f2d>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	f7fd fd17 	bl	8000550 <__aeabi_dmul>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f7fd ff43 	bl	80009b4 <__aeabi_d2f>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	66da      	str	r2, [r3, #108]	; 0x6c
		   traject -> MatTime_Data[28] = 4.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fcb0 	bl	80004a0 <__aeabi_f2d>
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <CoefficientAndTimeCalculation+0x1148>)
 8002b46:	f7fd fd03 	bl	8000550 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4614      	mov	r4, r2
 8002b50:	461d      	mov	r5, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002b58:	e00a      	b.n	8002b70 <CoefficientAndTimeCalculation+0x1158>
 8002b5a:	bf00      	nop
 8002b5c:	40080000 	.word	0x40080000
 8002b60:	40100000 	.word	0x40100000
 8002b64:	40140000 	.word	0x40140000
 8002b68:	40280000 	.word	0x40280000
 8002b6c:	40340000 	.word	0x40340000
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fc95 	bl	80004a0 <__aeabi_f2d>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	f7fd fce7 	bl	8000550 <__aeabi_dmul>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4614      	mov	r4, r2
 8002b88:	461d      	mov	r5, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fc85 	bl	80004a0 <__aeabi_f2d>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	f7fd fcd7 	bl	8000550 <__aeabi_dmul>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f7fd ff03 	bl	80009b4 <__aeabi_d2f>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	671a      	str	r2, [r3, #112]	; 0x70
		   traject -> MatTime_Data[29] = 5.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fd fc70 	bl	80004a0 <__aeabi_f2d>
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	4ba2      	ldr	r3, [pc, #648]	; (8002e50 <CoefficientAndTimeCalculation+0x1438>)
 8002bc6:	f7fd fcc3 	bl	8000550 <__aeabi_dmul>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4614      	mov	r4, r2
 8002bd0:	461d      	mov	r5, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fc61 	bl	80004a0 <__aeabi_f2d>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4620      	mov	r0, r4
 8002be4:	4629      	mov	r1, r5
 8002be6:	f7fd fcb3 	bl	8000550 <__aeabi_dmul>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4614      	mov	r4, r2
 8002bf0:	461d      	mov	r5, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fc51 	bl	80004a0 <__aeabi_f2d>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4620      	mov	r0, r4
 8002c04:	4629      	mov	r1, r5
 8002c06:	f7fd fca3 	bl	8000550 <__aeabi_dmul>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4614      	mov	r4, r2
 8002c10:	461d      	mov	r5, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fd fc41 	bl	80004a0 <__aeabi_f2d>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4620      	mov	r0, r4
 8002c24:	4629      	mov	r1, r5
 8002c26:	f7fd fc93 	bl	8000550 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	f7fd febf 	bl	80009b4 <__aeabi_d2f>
 8002c36:	4602      	mov	r2, r0
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	675a      	str	r2, [r3, #116]	; 0x74
		   traject -> MatTime_Data[30] = 0.0;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	679a      	str	r2, [r3, #120]	; 0x78
		   traject -> MatTime_Data[31] = 0.0;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	67da      	str	r2, [r3, #124]	; 0x7c
		   traject -> MatTime_Data[32] = 2.0;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		   traject -> MatTime_Data[33] = 6.0*traject -> TimeFinal;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002c5c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		   traject -> MatTime_Data[34] = 12.0*traject -> TimeFinal*traject -> TimeFinal;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fd fc15 	bl	80004a0 <__aeabi_f2d>
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	4b76      	ldr	r3, [pc, #472]	; (8002e54 <CoefficientAndTimeCalculation+0x143c>)
 8002c7c:	f7fd fc68 	bl	8000550 <__aeabi_dmul>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4614      	mov	r4, r2
 8002c86:	461d      	mov	r5, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fd fc06 	bl	80004a0 <__aeabi_f2d>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4620      	mov	r0, r4
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	f7fd fc58 	bl	8000550 <__aeabi_dmul>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f7fd fe84 	bl	80009b4 <__aeabi_d2f>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		   traject -> MatTime_Data[35] = 20.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fd fbf0 	bl	80004a0 <__aeabi_f2d>
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	4b64      	ldr	r3, [pc, #400]	; (8002e58 <CoefficientAndTimeCalculation+0x1440>)
 8002cc6:	f7fd fc43 	bl	8000550 <__aeabi_dmul>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4614      	mov	r4, r2
 8002cd0:	461d      	mov	r5, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fd fbe1 	bl	80004a0 <__aeabi_f2d>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	f7fd fc33 	bl	8000550 <__aeabi_dmul>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4614      	mov	r4, r2
 8002cf0:	461d      	mov	r5, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fbd1 	bl	80004a0 <__aeabi_f2d>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4620      	mov	r0, r4
 8002d04:	4629      	mov	r1, r5
 8002d06:	f7fd fc23 	bl	8000550 <__aeabi_dmul>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	f7fd fe4f 	bl	80009b4 <__aeabi_d2f>
 8002d16:	4602      	mov	r2, r0
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		   traject -> MatCondition_Data[0] = traject -> Qin;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		   traject -> MatCondition_Data[1] = 0;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		   traject -> MatCondition_Data[2] = 0;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
		   traject -> MatCondition_Data[3] = traject -> Qfinal;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		   traject -> MatCondition_Data[4] = 0;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
		   traject -> MatCondition_Data[5] = 0;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		   traject -> Trajectorystatus = arm_mat_inverse_f32(&(traject ->MatTime), &(traject ->MatTimeINV));
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f503 7207 	add.w	r2, r3, #540	; 0x21c
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	f009 fb7f 	bl	800c470 <arm_mat_inverse_f32>
 8002d72:	4603      	mov	r3, r0
 8002d74:	461a      	mov	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
		   traject -> Trajectorystatus = arm_mat_mult_f32(&(traject ->MatTimeINV), &(traject ->MatCondition), &(traject ->MatA));
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f503 7009 	add.w	r0, r3, #548	; 0x224
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f503 710b 	add.w	r1, r3, #556	; 0x22c
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f009 face 	bl	800c330 <arm_mat_mult_f32>
 8002d94:	4603      	mov	r3, r0
 8002d96:	461a      	mov	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
		   float t = (traject -> TimeFinal)/2.0;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8002da4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dac:	edc7 7a05 	vstr	s15, [r7, #20]
		   traject -> VMCal = (traject -> MatTA_Data[1]) + (2*traject -> MatTA_Data[2]*t) + (3*traject -> MatTA_Data[3]*(t*t)) + (4*traject -> MatTA_Data[4]*(t*t*t)) + (5*traject -> MatTA_Data[5]*(t*t*t*t));
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8002dbc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002dc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8002dd2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002dd6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002dda:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dde:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002de2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002de6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8002df0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002df4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002df8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dfc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8002e00:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e04:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8002e16:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002e1a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002e1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e22:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8002e26:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e2a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e32:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	edc3 7a84 	vstr	s15, [r3, #528]	; 0x210
}
 8002e44:	bf00      	nop
 8002e46:	3720      	adds	r7, #32
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e4e:	bf00      	nop
 8002e50:	40140000 	.word	0x40140000
 8002e54:	40280000 	.word	0x40280000
 8002e58:	40340000 	.word	0x40340000
 8002e5c:	00000000 	.word	0x00000000

08002e60 <TrajectoryEvaluation>:

void TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime, uint64_t PredictTime){
 8002e60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	e9c7 2300 	strd	r2, r3, [r7]
   // Microsec to sec
   static float t = 0;
   static float tP = 0;
   t  = (CurrentTime - StartTime)/1000000.0;
 8002e6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e76:	ebb0 0802 	subs.w	r8, r0, r2
 8002e7a:	eb61 0903 	sbc.w	r9, r1, r3
 8002e7e:	4640      	mov	r0, r8
 8002e80:	4649      	mov	r1, r9
 8002e82:	f7fd fb2f 	bl	80004e4 <__aeabi_ul2d>
 8002e86:	a3cc      	add	r3, pc, #816	; (adr r3, 80031b8 <TrajectoryEvaluation+0x358>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f7fd fc8a 	bl	80007a4 <__aeabi_ddiv>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4610      	mov	r0, r2
 8002e96:	4619      	mov	r1, r3
 8002e98:	f7fd fd8c 	bl	80009b4 <__aeabi_d2f>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4ac8      	ldr	r2, [pc, #800]	; (80031c0 <TrajectoryEvaluation+0x360>)
 8002ea0:	6013      	str	r3, [r2, #0]
   tP = (PredictTime - StartTime)/1000000.0;
 8002ea2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eaa:	1a84      	subs	r4, r0, r2
 8002eac:	eb61 0503 	sbc.w	r5, r1, r3
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	f7fd fb16 	bl	80004e4 <__aeabi_ul2d>
 8002eb8:	a3bf      	add	r3, pc, #764	; (adr r3, 80031b8 <TrajectoryEvaluation+0x358>)
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	f7fd fc71 	bl	80007a4 <__aeabi_ddiv>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f7fd fd73 	bl	80009b4 <__aeabi_d2f>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4abc      	ldr	r2, [pc, #752]	; (80031c4 <TrajectoryEvaluation+0x364>)
 8002ed2:	6013      	str	r3, [r2, #0]

	if(traject ->TrajectoryMode == 0) // S-curve
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f040 8526 	bne.w	800392c <TrajectoryEvaluation+0xacc>
	{
		if(t >= 0 && t < traject -> T[0])
 8002ee0:	4bb7      	ldr	r3, [pc, #732]	; (80031c0 <TrajectoryEvaluation+0x360>)
 8002ee2:	edd3 7a00 	vldr	s15, [r3]
 8002ee6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eee:	f2c0 80aa 	blt.w	8003046 <TrajectoryEvaluation+0x1e6>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	ed93 7a73 	vldr	s14, [r3, #460]	; 0x1cc
 8002ef8:	4bb1      	ldr	r3, [pc, #708]	; (80031c0 <TrajectoryEvaluation+0x360>)
 8002efa:	edd3 7a00 	vldr	s15, [r3]
 8002efe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f06:	f340 809e 	ble.w	8003046 <TrajectoryEvaluation+0x1e6>
		   {
		      traject -> QJ = traject -> A[0];
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[0]*t + traject -> B[0];
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 8002f1c:	4ba8      	ldr	r3, [pc, #672]	; (80031c0 <TrajectoryEvaluation+0x360>)
 8002f1e:	edd3 7a00 	vldr	s15, [r3]
 8002f22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 8002f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 8002f3c:	4ba0      	ldr	r3, [pc, #640]	; (80031c0 <TrajectoryEvaluation+0x360>)
 8002f3e:	edd3 6a00 	vldr	s13, [r3]
 8002f42:	4b9f      	ldr	r3, [pc, #636]	; (80031c0 <TrajectoryEvaluation+0x360>)
 8002f44:	edd3 7a00 	vldr	s15, [r3]
 8002f48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002f54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 8002f5e:	4b98      	ldr	r3, [pc, #608]	; (80031c0 <TrajectoryEvaluation+0x360>)
 8002f60:	edd3 7a00 	vldr	s15, [r3]
 8002f64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 8002f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[0]*(tP*tP)/2 + traject -> B[0]*tP + traject -> C[0];
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 8002f82:	4b90      	ldr	r3, [pc, #576]	; (80031c4 <TrajectoryEvaluation+0x364>)
 8002f84:	edd3 6a00 	vldr	s13, [r3]
 8002f88:	4b8e      	ldr	r3, [pc, #568]	; (80031c4 <TrajectoryEvaluation+0x364>)
 8002f8a:	edd3 7a00 	vldr	s15, [r3]
 8002f8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f96:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002f9a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 8002fa4:	4b87      	ldr	r3, [pc, #540]	; (80031c4 <TrajectoryEvaluation+0x364>)
 8002fa6:	edd3 7a00 	vldr	s15, [r3]
 8002faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 8002fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	edd3 6a57 	vldr	s13, [r3, #348]	; 0x15c
 8002fce:	4b7c      	ldr	r3, [pc, #496]	; (80031c0 <TrajectoryEvaluation+0x360>)
 8002fd0:	ed93 6a00 	vldr	s12, [r3]
 8002fd4:	4b7a      	ldr	r3, [pc, #488]	; (80031c0 <TrajectoryEvaluation+0x360>)
 8002fd6:	edd3 7a00 	vldr	s15, [r3]
 8002fda:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002fde:	4b78      	ldr	r3, [pc, #480]	; (80031c0 <TrajectoryEvaluation+0x360>)
 8002fe0:	edd3 7a00 	vldr	s15, [r3]
 8002fe4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002fe8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fec:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002ff0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 8002ffe:	4b70      	ldr	r3, [pc, #448]	; (80031c0 <TrajectoryEvaluation+0x360>)
 8003000:	ed93 6a00 	vldr	s12, [r3]
 8003004:	4b6e      	ldr	r3, [pc, #440]	; (80031c0 <TrajectoryEvaluation+0x360>)
 8003006:	edd3 7a00 	vldr	s15, [r3]
 800300a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800300e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003012:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8003016:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800301a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	edd3 6a65 	vldr	s13, [r3, #404]	; 0x194
 8003024:	4b66      	ldr	r3, [pc, #408]	; (80031c0 <TrajectoryEvaluation+0x360>)
 8003026:	edd3 7a00 	vldr	s15, [r3]
 800302a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800302e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 8003038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 8003042:	f000 be08 	b.w	8003c56 <TrajectoryEvaluation+0xdf6>
		   }
		   else if( t >= traject -> T[0] && t < traject -> T[1])
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	ed93 7a73 	vldr	s14, [r3, #460]	; 0x1cc
 800304c:	4b5c      	ldr	r3, [pc, #368]	; (80031c0 <TrajectoryEvaluation+0x360>)
 800304e:	edd3 7a00 	vldr	s15, [r3]
 8003052:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305a:	f200 80b5 	bhi.w	80031c8 <TrajectoryEvaluation+0x368>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	ed93 7a74 	vldr	s14, [r3, #464]	; 0x1d0
 8003064:	4b56      	ldr	r3, [pc, #344]	; (80031c0 <TrajectoryEvaluation+0x360>)
 8003066:	edd3 7a00 	vldr	s15, [r3]
 800306a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800306e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003072:	f340 80a9 	ble.w	80031c8 <TrajectoryEvaluation+0x368>
		   {
		      traject -> QJ = traject -> A[1];
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[1]*t + traject -> B[1];
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 8003088:	4b4d      	ldr	r3, [pc, #308]	; (80031c0 <TrajectoryEvaluation+0x360>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8003098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 80030a8:	4b45      	ldr	r3, [pc, #276]	; (80031c0 <TrajectoryEvaluation+0x360>)
 80030aa:	edd3 6a00 	vldr	s13, [r3]
 80030ae:	4b44      	ldr	r3, [pc, #272]	; (80031c0 <TrajectoryEvaluation+0x360>)
 80030b0:	edd3 7a00 	vldr	s15, [r3]
 80030b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030bc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80030c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 80030ca:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <TrajectoryEvaluation+0x360>)
 80030cc:	edd3 7a00 	vldr	s15, [r3]
 80030d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	edd3 7a66 	vldr	s15, [r3, #408]	; 0x198
 80030de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[1]*(tP*tP)/2 + traject -> B[1]*tP + traject -> C[1];
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 80030ee:	4b35      	ldr	r3, [pc, #212]	; (80031c4 <TrajectoryEvaluation+0x364>)
 80030f0:	edd3 6a00 	vldr	s13, [r3]
 80030f4:	4b33      	ldr	r3, [pc, #204]	; (80031c4 <TrajectoryEvaluation+0x364>)
 80030f6:	edd3 7a00 	vldr	s15, [r3]
 80030fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003102:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003106:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 8003110:	4b2c      	ldr	r3, [pc, #176]	; (80031c4 <TrajectoryEvaluation+0x364>)
 8003112:	edd3 7a00 	vldr	s15, [r3]
 8003116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800311a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	edd3 7a66 	vldr	s15, [r3, #408]	; 0x198
 8003124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	edd3 6a58 	vldr	s13, [r3, #352]	; 0x160
 800313a:	4b21      	ldr	r3, [pc, #132]	; (80031c0 <TrajectoryEvaluation+0x360>)
 800313c:	ed93 6a00 	vldr	s12, [r3]
 8003140:	4b1f      	ldr	r3, [pc, #124]	; (80031c0 <TrajectoryEvaluation+0x360>)
 8003142:	edd3 7a00 	vldr	s15, [r3]
 8003146:	ee26 6a27 	vmul.f32	s12, s12, s15
 800314a:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <TrajectoryEvaluation+0x360>)
 800314c:	edd3 7a00 	vldr	s15, [r3]
 8003150:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003154:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003158:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800315c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003160:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 800316a:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <TrajectoryEvaluation+0x360>)
 800316c:	ed93 6a00 	vldr	s12, [r3]
 8003170:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <TrajectoryEvaluation+0x360>)
 8003172:	edd3 7a00 	vldr	s15, [r3]
 8003176:	ee66 7a27 	vmul.f32	s15, s12, s15
 800317a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800317e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8003182:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003186:	ee37 7a27 	vadd.f32	s14, s14, s15
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	edd3 6a66 	vldr	s13, [r3, #408]	; 0x198
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <TrajectoryEvaluation+0x360>)
 8003192:	edd3 7a00 	vldr	s15, [r3]
 8003196:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800319a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 80031a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 80031ae:	f000 bd52 	b.w	8003c56 <TrajectoryEvaluation+0xdf6>
 80031b2:	bf00      	nop
 80031b4:	f3af 8000 	nop.w
 80031b8:	00000000 	.word	0x00000000
 80031bc:	412e8480 	.word	0x412e8480
 80031c0:	2000045c 	.word	0x2000045c
 80031c4:	20000460 	.word	0x20000460
		   }
		   else if( t >= traject -> T[1] && t < traject -> T[2])
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	ed93 7a74 	vldr	s14, [r3, #464]	; 0x1d0
 80031ce:	4bb4      	ldr	r3, [pc, #720]	; (80034a0 <TrajectoryEvaluation+0x640>)
 80031d0:	edd3 7a00 	vldr	s15, [r3]
 80031d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031dc:	f200 80aa 	bhi.w	8003334 <TrajectoryEvaluation+0x4d4>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	ed93 7a75 	vldr	s14, [r3, #468]	; 0x1d4
 80031e6:	4bae      	ldr	r3, [pc, #696]	; (80034a0 <TrajectoryEvaluation+0x640>)
 80031e8:	edd3 7a00 	vldr	s15, [r3]
 80031ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f4:	f340 809e 	ble.w	8003334 <TrajectoryEvaluation+0x4d4>
		   {
		      traject -> QJ = traject -> A[2];
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[2]*t + traject -> B[2];
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 800320a:	4ba5      	ldr	r3, [pc, #660]	; (80034a0 <TrajectoryEvaluation+0x640>)
 800320c:	edd3 7a00 	vldr	s15, [r3]
 8003210:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	edd3 7a60 	vldr	s15, [r3, #384]	; 0x180
 800321a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 800322a:	4b9d      	ldr	r3, [pc, #628]	; (80034a0 <TrajectoryEvaluation+0x640>)
 800322c:	edd3 6a00 	vldr	s13, [r3]
 8003230:	4b9b      	ldr	r3, [pc, #620]	; (80034a0 <TrajectoryEvaluation+0x640>)
 8003232:	edd3 7a00 	vldr	s15, [r3]
 8003236:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800323a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003242:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 800324c:	4b94      	ldr	r3, [pc, #592]	; (80034a0 <TrajectoryEvaluation+0x640>)
 800324e:	edd3 7a00 	vldr	s15, [r3]
 8003252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003256:	ee37 7a27 	vadd.f32	s14, s14, s15
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 8003260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[2]*(tP*tP)/2 + traject -> B[2]*tP + traject -> C[2];
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 8003270:	4b8c      	ldr	r3, [pc, #560]	; (80034a4 <TrajectoryEvaluation+0x644>)
 8003272:	edd3 6a00 	vldr	s13, [r3]
 8003276:	4b8b      	ldr	r3, [pc, #556]	; (80034a4 <TrajectoryEvaluation+0x644>)
 8003278:	edd3 7a00 	vldr	s15, [r3]
 800327c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003284:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003288:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 8003292:	4b84      	ldr	r3, [pc, #528]	; (80034a4 <TrajectoryEvaluation+0x644>)
 8003294:	edd3 7a00 	vldr	s15, [r3]
 8003298:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800329c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 80032a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	edd3 6a59 	vldr	s13, [r3, #356]	; 0x164
 80032bc:	4b78      	ldr	r3, [pc, #480]	; (80034a0 <TrajectoryEvaluation+0x640>)
 80032be:	ed93 6a00 	vldr	s12, [r3]
 80032c2:	4b77      	ldr	r3, [pc, #476]	; (80034a0 <TrajectoryEvaluation+0x640>)
 80032c4:	edd3 7a00 	vldr	s15, [r3]
 80032c8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80032cc:	4b74      	ldr	r3, [pc, #464]	; (80034a0 <TrajectoryEvaluation+0x640>)
 80032ce:	edd3 7a00 	vldr	s15, [r3]
 80032d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80032d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032da:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80032de:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 80032ec:	4b6c      	ldr	r3, [pc, #432]	; (80034a0 <TrajectoryEvaluation+0x640>)
 80032ee:	ed93 6a00 	vldr	s12, [r3]
 80032f2:	4b6b      	ldr	r3, [pc, #428]	; (80034a0 <TrajectoryEvaluation+0x640>)
 80032f4:	edd3 7a00 	vldr	s15, [r3]
 80032f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80032fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003300:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8003304:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003308:	ee37 7a27 	vadd.f32	s14, s14, s15
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	edd3 6a67 	vldr	s13, [r3, #412]	; 0x19c
 8003312:	4b63      	ldr	r3, [pc, #396]	; (80034a0 <TrajectoryEvaluation+0x640>)
 8003314:	edd3 7a00 	vldr	s15, [r3]
 8003318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800331c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 8003326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 8003330:	f000 bc91 	b.w	8003c56 <TrajectoryEvaluation+0xdf6>
		   }
		   else if( t >= traject -> T[2] && t < traject -> T[3])
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	ed93 7a75 	vldr	s14, [r3, #468]	; 0x1d4
 800333a:	4b59      	ldr	r3, [pc, #356]	; (80034a0 <TrajectoryEvaluation+0x640>)
 800333c:	edd3 7a00 	vldr	s15, [r3]
 8003340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003348:	f200 80ae 	bhi.w	80034a8 <TrajectoryEvaluation+0x648>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	ed93 7a76 	vldr	s14, [r3, #472]	; 0x1d8
 8003352:	4b53      	ldr	r3, [pc, #332]	; (80034a0 <TrajectoryEvaluation+0x640>)
 8003354:	edd3 7a00 	vldr	s15, [r3]
 8003358:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800335c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003360:	f340 80a2 	ble.w	80034a8 <TrajectoryEvaluation+0x648>
		   {
		      traject -> QJ = traject -> A[3];
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[3]*t + traject -> B[3];
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 8003376:	4b4a      	ldr	r3, [pc, #296]	; (80034a0 <TrajectoryEvaluation+0x640>)
 8003378:	edd3 7a00 	vldr	s15, [r3]
 800337c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	edd3 7a61 	vldr	s15, [r3, #388]	; 0x184
 8003386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 8003396:	4b42      	ldr	r3, [pc, #264]	; (80034a0 <TrajectoryEvaluation+0x640>)
 8003398:	edd3 6a00 	vldr	s13, [r3]
 800339c:	4b40      	ldr	r3, [pc, #256]	; (80034a0 <TrajectoryEvaluation+0x640>)
 800339e:	edd3 7a00 	vldr	s15, [r3]
 80033a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033aa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80033ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 80033b8:	4b39      	ldr	r3, [pc, #228]	; (80034a0 <TrajectoryEvaluation+0x640>)
 80033ba:	edd3 7a00 	vldr	s15, [r3]
 80033be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	edd3 7a68 	vldr	s15, [r3, #416]	; 0x1a0
 80033cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[3]*(tP*tP)/2 + traject -> B[3]*tP + traject -> C[3];
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 80033dc:	4b31      	ldr	r3, [pc, #196]	; (80034a4 <TrajectoryEvaluation+0x644>)
 80033de:	edd3 6a00 	vldr	s13, [r3]
 80033e2:	4b30      	ldr	r3, [pc, #192]	; (80034a4 <TrajectoryEvaluation+0x644>)
 80033e4:	edd3 7a00 	vldr	s15, [r3]
 80033e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80033f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 80033fe:	4b29      	ldr	r3, [pc, #164]	; (80034a4 <TrajectoryEvaluation+0x644>)
 8003400:	edd3 7a00 	vldr	s15, [r3]
 8003404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003408:	ee37 7a27 	vadd.f32	s14, s14, s15
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	edd3 7a68 	vldr	s15, [r3, #416]	; 0x1a0
 8003412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	edd3 6a5a 	vldr	s13, [r3, #360]	; 0x168
 8003428:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <TrajectoryEvaluation+0x640>)
 800342a:	ed93 6a00 	vldr	s12, [r3]
 800342e:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <TrajectoryEvaluation+0x640>)
 8003430:	edd3 7a00 	vldr	s15, [r3]
 8003434:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003438:	4b19      	ldr	r3, [pc, #100]	; (80034a0 <TrajectoryEvaluation+0x640>)
 800343a:	edd3 7a00 	vldr	s15, [r3]
 800343e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003442:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003446:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800344a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800344e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 8003458:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <TrajectoryEvaluation+0x640>)
 800345a:	ed93 6a00 	vldr	s12, [r3]
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <TrajectoryEvaluation+0x640>)
 8003460:	edd3 7a00 	vldr	s15, [r3]
 8003464:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003468:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800346c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8003470:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003474:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	edd3 6a68 	vldr	s13, [r3, #416]	; 0x1a0
 800347e:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <TrajectoryEvaluation+0x640>)
 8003480:	edd3 7a00 	vldr	s15, [r3]
 8003484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	edd3 7a6f 	vldr	s15, [r3, #444]	; 0x1bc
 8003492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 800349c:	e3db      	b.n	8003c56 <TrajectoryEvaluation+0xdf6>
 800349e:	bf00      	nop
 80034a0:	2000045c 	.word	0x2000045c
 80034a4:	20000460 	.word	0x20000460
		   }
		   else if( t >= traject -> T[3] && t < traject -> T[4])
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	ed93 7a76 	vldr	s14, [r3, #472]	; 0x1d8
 80034ae:	4bb3      	ldr	r3, [pc, #716]	; (800377c <TrajectoryEvaluation+0x91c>)
 80034b0:	edd3 7a00 	vldr	s15, [r3]
 80034b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034bc:	f200 80a9 	bhi.w	8003612 <TrajectoryEvaluation+0x7b2>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	ed93 7a77 	vldr	s14, [r3, #476]	; 0x1dc
 80034c6:	4bad      	ldr	r3, [pc, #692]	; (800377c <TrajectoryEvaluation+0x91c>)
 80034c8:	edd3 7a00 	vldr	s15, [r3]
 80034cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d4:	f340 809d 	ble.w	8003612 <TrajectoryEvaluation+0x7b2>
		   {
		      traject -> QJ = traject -> A[4];
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[4]*t + traject -> B[4];
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 80034ea:	4ba4      	ldr	r3, [pc, #656]	; (800377c <TrajectoryEvaluation+0x91c>)
 80034ec:	edd3 7a00 	vldr	s15, [r3]
 80034f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	edd3 7a62 	vldr	s15, [r3, #392]	; 0x188
 80034fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 800350a:	4b9c      	ldr	r3, [pc, #624]	; (800377c <TrajectoryEvaluation+0x91c>)
 800350c:	edd3 6a00 	vldr	s13, [r3]
 8003510:	4b9a      	ldr	r3, [pc, #616]	; (800377c <TrajectoryEvaluation+0x91c>)
 8003512:	edd3 7a00 	vldr	s15, [r3]
 8003516:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800351a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003522:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 800352c:	4b93      	ldr	r3, [pc, #588]	; (800377c <TrajectoryEvaluation+0x91c>)
 800352e:	edd3 7a00 	vldr	s15, [r3]
 8003532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003536:	ee37 7a27 	vadd.f32	s14, s14, s15
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 8003540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[4]*(tP*tP)/2 + traject -> B[4]*tP + traject -> C[4];
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 8003550:	4b8b      	ldr	r3, [pc, #556]	; (8003780 <TrajectoryEvaluation+0x920>)
 8003552:	edd3 6a00 	vldr	s13, [r3]
 8003556:	4b8a      	ldr	r3, [pc, #552]	; (8003780 <TrajectoryEvaluation+0x920>)
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003564:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003568:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 8003572:	4b83      	ldr	r3, [pc, #524]	; (8003780 <TrajectoryEvaluation+0x920>)
 8003574:	edd3 7a00 	vldr	s15, [r3]
 8003578:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800357c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 8003586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	edd3 6a5b 	vldr	s13, [r3, #364]	; 0x16c
 800359c:	4b77      	ldr	r3, [pc, #476]	; (800377c <TrajectoryEvaluation+0x91c>)
 800359e:	ed93 6a00 	vldr	s12, [r3]
 80035a2:	4b76      	ldr	r3, [pc, #472]	; (800377c <TrajectoryEvaluation+0x91c>)
 80035a4:	edd3 7a00 	vldr	s15, [r3]
 80035a8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80035ac:	4b73      	ldr	r3, [pc, #460]	; (800377c <TrajectoryEvaluation+0x91c>)
 80035ae:	edd3 7a00 	vldr	s15, [r3]
 80035b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80035b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035ba:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80035be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80035c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 80035cc:	4b6b      	ldr	r3, [pc, #428]	; (800377c <TrajectoryEvaluation+0x91c>)
 80035ce:	ed93 6a00 	vldr	s12, [r3]
 80035d2:	4b6a      	ldr	r3, [pc, #424]	; (800377c <TrajectoryEvaluation+0x91c>)
 80035d4:	edd3 7a00 	vldr	s15, [r3]
 80035d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80035dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035e0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80035e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80035e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	edd3 6a69 	vldr	s13, [r3, #420]	; 0x1a4
 80035f2:	4b62      	ldr	r3, [pc, #392]	; (800377c <TrajectoryEvaluation+0x91c>)
 80035f4:	edd3 7a00 	vldr	s15, [r3]
 80035f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	edd3 7a70 	vldr	s15, [r3, #448]	; 0x1c0
 8003606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 8003610:	e321      	b.n	8003c56 <TrajectoryEvaluation+0xdf6>
		   }
		   else if( t >= traject -> T[4] && t < traject -> T[5])
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	ed93 7a77 	vldr	s14, [r3, #476]	; 0x1dc
 8003618:	4b58      	ldr	r3, [pc, #352]	; (800377c <TrajectoryEvaluation+0x91c>)
 800361a:	edd3 7a00 	vldr	s15, [r3]
 800361e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003626:	f200 80ad 	bhi.w	8003784 <TrajectoryEvaluation+0x924>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	ed93 7a78 	vldr	s14, [r3, #480]	; 0x1e0
 8003630:	4b52      	ldr	r3, [pc, #328]	; (800377c <TrajectoryEvaluation+0x91c>)
 8003632:	edd3 7a00 	vldr	s15, [r3]
 8003636:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800363a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800363e:	f340 80a1 	ble.w	8003784 <TrajectoryEvaluation+0x924>
		   {
		      traject -> QJ = traject -> A[5];
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[5]*t + traject -> B[5];
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 8003654:	4b49      	ldr	r3, [pc, #292]	; (800377c <TrajectoryEvaluation+0x91c>)
 8003656:	edd3 7a00 	vldr	s15, [r3]
 800365a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	edd3 7a63 	vldr	s15, [r3, #396]	; 0x18c
 8003664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 8003674:	4b41      	ldr	r3, [pc, #260]	; (800377c <TrajectoryEvaluation+0x91c>)
 8003676:	edd3 6a00 	vldr	s13, [r3]
 800367a:	4b40      	ldr	r3, [pc, #256]	; (800377c <TrajectoryEvaluation+0x91c>)
 800367c:	edd3 7a00 	vldr	s15, [r3]
 8003680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003688:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800368c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 8003696:	4b39      	ldr	r3, [pc, #228]	; (800377c <TrajectoryEvaluation+0x91c>)
 8003698:	edd3 7a00 	vldr	s15, [r3]
 800369c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 80036aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[5]*(tP*tP)/2 + traject -> B[5]*tP + traject -> C[5];
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 80036ba:	4b31      	ldr	r3, [pc, #196]	; (8003780 <TrajectoryEvaluation+0x920>)
 80036bc:	edd3 6a00 	vldr	s13, [r3]
 80036c0:	4b2f      	ldr	r3, [pc, #188]	; (8003780 <TrajectoryEvaluation+0x920>)
 80036c2:	edd3 7a00 	vldr	s15, [r3]
 80036c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80036d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 80036dc:	4b28      	ldr	r3, [pc, #160]	; (8003780 <TrajectoryEvaluation+0x920>)
 80036de:	edd3 7a00 	vldr	s15, [r3]
 80036e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 80036f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	edd3 6a5c 	vldr	s13, [r3, #368]	; 0x170
 8003706:	4b1d      	ldr	r3, [pc, #116]	; (800377c <TrajectoryEvaluation+0x91c>)
 8003708:	ed93 6a00 	vldr	s12, [r3]
 800370c:	4b1b      	ldr	r3, [pc, #108]	; (800377c <TrajectoryEvaluation+0x91c>)
 800370e:	edd3 7a00 	vldr	s15, [r3]
 8003712:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003716:	4b19      	ldr	r3, [pc, #100]	; (800377c <TrajectoryEvaluation+0x91c>)
 8003718:	edd3 7a00 	vldr	s15, [r3]
 800371c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003720:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003724:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8003728:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800372c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 8003736:	4b11      	ldr	r3, [pc, #68]	; (800377c <TrajectoryEvaluation+0x91c>)
 8003738:	ed93 6a00 	vldr	s12, [r3]
 800373c:	4b0f      	ldr	r3, [pc, #60]	; (800377c <TrajectoryEvaluation+0x91c>)
 800373e:	edd3 7a00 	vldr	s15, [r3]
 8003742:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003746:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800374a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800374e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003752:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	edd3 6a6a 	vldr	s13, [r3, #424]	; 0x1a8
 800375c:	4b07      	ldr	r3, [pc, #28]	; (800377c <TrajectoryEvaluation+0x91c>)
 800375e:	edd3 7a00 	vldr	s15, [r3]
 8003762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	edd3 7a71 	vldr	s15, [r3, #452]	; 0x1c4
 8003770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 800377a:	e26c      	b.n	8003c56 <TrajectoryEvaluation+0xdf6>
 800377c:	2000045c 	.word	0x2000045c
 8003780:	20000460 	.word	0x20000460
		   }
		   else if( t >= traject -> T[5] && t < traject -> T[6])
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	ed93 7a78 	vldr	s14, [r3, #480]	; 0x1e0
 800378a:	4b66      	ldr	r3, [pc, #408]	; (8003924 <TrajectoryEvaluation+0xac4>)
 800378c:	edd3 7a00 	vldr	s15, [r3]
 8003790:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	f200 80a9 	bhi.w	80038ee <TrajectoryEvaluation+0xa8e>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	ed93 7a79 	vldr	s14, [r3, #484]	; 0x1e4
 80037a2:	4b60      	ldr	r3, [pc, #384]	; (8003924 <TrajectoryEvaluation+0xac4>)
 80037a4:	edd3 7a00 	vldr	s15, [r3]
 80037a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b0:	f340 809d 	ble.w	80038ee <TrajectoryEvaluation+0xa8e>
		   {
		      traject -> QJ = traject -> A[6];
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[6]*t + traject -> B[6];
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	ed93 7a5d 	vldr	s14, [r3, #372]	; 0x174
 80037c6:	4b57      	ldr	r3, [pc, #348]	; (8003924 <TrajectoryEvaluation+0xac4>)
 80037c8:	edd3 7a00 	vldr	s15, [r3]
 80037cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	edd3 7a64 	vldr	s15, [r3, #400]	; 0x190
 80037d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	ed93 7a5d 	vldr	s14, [r3, #372]	; 0x174
 80037e6:	4b4f      	ldr	r3, [pc, #316]	; (8003924 <TrajectoryEvaluation+0xac4>)
 80037e8:	edd3 6a00 	vldr	s13, [r3]
 80037ec:	4b4d      	ldr	r3, [pc, #308]	; (8003924 <TrajectoryEvaluation+0xac4>)
 80037ee:	edd3 7a00 	vldr	s15, [r3]
 80037f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80037fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	edd3 6a64 	vldr	s13, [r3, #400]	; 0x190
 8003808:	4b46      	ldr	r3, [pc, #280]	; (8003924 <TrajectoryEvaluation+0xac4>)
 800380a:	edd3 7a00 	vldr	s15, [r3]
 800380e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003812:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 800381c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[6]*(tP*tP)/2 + traject -> B[6]*tP + traject -> C[6];
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	ed93 7a5d 	vldr	s14, [r3, #372]	; 0x174
 800382c:	4b3e      	ldr	r3, [pc, #248]	; (8003928 <TrajectoryEvaluation+0xac8>)
 800382e:	edd3 6a00 	vldr	s13, [r3]
 8003832:	4b3d      	ldr	r3, [pc, #244]	; (8003928 <TrajectoryEvaluation+0xac8>)
 8003834:	edd3 7a00 	vldr	s15, [r3]
 8003838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800383c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003840:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003844:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	edd3 6a64 	vldr	s13, [r3, #400]	; 0x190
 800384e:	4b36      	ldr	r3, [pc, #216]	; (8003928 <TrajectoryEvaluation+0xac8>)
 8003850:	edd3 7a00 	vldr	s15, [r3]
 8003854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003858:	ee37 7a27 	vadd.f32	s14, s14, s15
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 8003862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	edd3 6a5d 	vldr	s13, [r3, #372]	; 0x174
 8003878:	4b2a      	ldr	r3, [pc, #168]	; (8003924 <TrajectoryEvaluation+0xac4>)
 800387a:	ed93 6a00 	vldr	s12, [r3]
 800387e:	4b29      	ldr	r3, [pc, #164]	; (8003924 <TrajectoryEvaluation+0xac4>)
 8003880:	edd3 7a00 	vldr	s15, [r3]
 8003884:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003888:	4b26      	ldr	r3, [pc, #152]	; (8003924 <TrajectoryEvaluation+0xac4>)
 800388a:	edd3 7a00 	vldr	s15, [r3]
 800388e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003892:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003896:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800389a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800389e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	edd3 6a64 	vldr	s13, [r3, #400]	; 0x190
 80038a8:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <TrajectoryEvaluation+0xac4>)
 80038aa:	ed93 6a00 	vldr	s12, [r3]
 80038ae:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <TrajectoryEvaluation+0xac4>)
 80038b0:	edd3 7a00 	vldr	s15, [r3]
 80038b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80038b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038bc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80038c0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80038c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	edd3 6a6b 	vldr	s13, [r3, #428]	; 0x1ac
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <TrajectoryEvaluation+0xac4>)
 80038d0:	edd3 7a00 	vldr	s15, [r3]
 80038d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 80038e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 80038ec:	e1b3      	b.n	8003c56 <TrajectoryEvaluation+0xdf6>
		   }
		   else
		   {
		      traject -> QJ = 0;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = 0;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
		      traject -> QV = 0;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		      traject -> QVP = 0;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qfinal;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		  traject -> QV = 0;
		  traject -> QVP = 0;
		  traject -> QX = traject -> Qfinal;
	   }
	}
   return 1.0;
 8003922:	e199      	b.n	8003c58 <TrajectoryEvaluation+0xdf8>
 8003924:	2000045c 	.word	0x2000045c
 8003928:	20000460 	.word	0x20000460
	else if(traject ->TrajectoryMode == 1) //Quintic
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8003932:	2b01      	cmp	r3, #1
 8003934:	f040 8190 	bne.w	8003c58 <TrajectoryEvaluation+0xdf8>
	   if(t >= 0 && t < traject -> TimeFinal)
 8003938:	4bca      	ldr	r3, [pc, #808]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 800393a:	edd3 7a00 	vldr	s15, [r3]
 800393e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003946:	f2c0 816c 	blt.w	8003c22 <TrajectoryEvaluation+0xdc2>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8003950:	4bc4      	ldr	r3, [pc, #784]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003952:	edd3 7a00 	vldr	s15, [r3]
 8003956:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800395a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395e:	f340 8160 	ble.w	8003c22 <TrajectoryEvaluation+0xdc2>
			 traject -> QA = (2*traject -> MatTA_Data[2]) + (6*traject -> MatTA_Data[3]*t) + (12*traject -> MatTA_Data[4]*(t*t)) + (20*traject -> MatTA_Data[5]*(t*t*t));
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8003968:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8003972:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8003976:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800397a:	4bba      	ldr	r3, [pc, #744]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 800397c:	edd3 7a00 	vldr	s15, [r3]
 8003980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003984:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800398e:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8003992:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003996:	4bb3      	ldr	r3, [pc, #716]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003998:	ed93 6a00 	vldr	s12, [r3]
 800399c:	4bb1      	ldr	r3, [pc, #708]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 800399e:	edd3 7a00 	vldr	s15, [r3]
 80039a2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80039a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 80039b4:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80039b8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80039bc:	4ba9      	ldr	r3, [pc, #676]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 80039be:	ed93 6a00 	vldr	s12, [r3]
 80039c2:	4ba8      	ldr	r3, [pc, #672]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 80039c4:	edd3 7a00 	vldr	s15, [r3]
 80039c8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80039cc:	4ba5      	ldr	r3, [pc, #660]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 80039ce:	edd3 7a00 	vldr	s15, [r3]
 80039d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80039d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
			 traject -> QV = (traject -> MatTA_Data[1]) + (2*traject -> MatTA_Data[2]*t) + (3*traject -> MatTA_Data[3]*(t*t)) + (4*traject -> MatTA_Data[4]*(t*t*t)) + (5*traject -> MatTA_Data[5]*(t*t*t*t));
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 80039f0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80039f4:	4b9b      	ldr	r3, [pc, #620]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 80039f6:	edd3 7a00 	vldr	s15, [r3]
 80039fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8003a08:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003a0c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003a10:	4b94      	ldr	r3, [pc, #592]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003a12:	ed93 6a00 	vldr	s12, [r3]
 8003a16:	4b93      	ldr	r3, [pc, #588]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003a18:	edd3 7a00 	vldr	s15, [r3]
 8003a1c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003a20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8003a2e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003a32:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003a36:	4b8b      	ldr	r3, [pc, #556]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003a38:	ed93 6a00 	vldr	s12, [r3]
 8003a3c:	4b89      	ldr	r3, [pc, #548]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003a3e:	edd3 7a00 	vldr	s15, [r3]
 8003a42:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a46:	4b87      	ldr	r3, [pc, #540]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003a48:	edd3 7a00 	vldr	s15, [r3]
 8003a4c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8003a5e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003a62:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003a66:	4b7f      	ldr	r3, [pc, #508]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003a68:	ed93 6a00 	vldr	s12, [r3]
 8003a6c:	4b7d      	ldr	r3, [pc, #500]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003a6e:	edd3 7a00 	vldr	s15, [r3]
 8003a72:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a76:	4b7b      	ldr	r3, [pc, #492]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003a78:	edd3 7a00 	vldr	s15, [r3]
 8003a7c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a80:	4b78      	ldr	r3, [pc, #480]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003a82:	edd3 7a00 	vldr	s15, [r3]
 8003a86:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
			 traject -> QVP = (traject -> MatTA_Data[1]) + (2*traject -> MatTA_Data[2]*tP) + (3*traject -> MatTA_Data[3]*(tP*tP)) + (4*traject -> MatTA_Data[4]*(tP*tP*tP)) + (5*traject -> MatTA_Data[5]*(tP*tP*tP*tP));
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8003aa4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003aa8:	4b6f      	ldr	r3, [pc, #444]	; (8003c68 <TrajectoryEvaluation+0xe08>)
 8003aaa:	edd3 7a00 	vldr	s15, [r3]
 8003aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ab2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8003abc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003ac0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003ac4:	4b68      	ldr	r3, [pc, #416]	; (8003c68 <TrajectoryEvaluation+0xe08>)
 8003ac6:	ed93 6a00 	vldr	s12, [r3]
 8003aca:	4b67      	ldr	r3, [pc, #412]	; (8003c68 <TrajectoryEvaluation+0xe08>)
 8003acc:	edd3 7a00 	vldr	s15, [r3]
 8003ad0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ad8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8003ae2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003ae6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003aea:	4b5f      	ldr	r3, [pc, #380]	; (8003c68 <TrajectoryEvaluation+0xe08>)
 8003aec:	ed93 6a00 	vldr	s12, [r3]
 8003af0:	4b5d      	ldr	r3, [pc, #372]	; (8003c68 <TrajectoryEvaluation+0xe08>)
 8003af2:	edd3 7a00 	vldr	s15, [r3]
 8003af6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003afa:	4b5b      	ldr	r3, [pc, #364]	; (8003c68 <TrajectoryEvaluation+0xe08>)
 8003afc:	edd3 7a00 	vldr	s15, [r3]
 8003b00:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8003b12:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003b16:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003b1a:	4b53      	ldr	r3, [pc, #332]	; (8003c68 <TrajectoryEvaluation+0xe08>)
 8003b1c:	ed93 6a00 	vldr	s12, [r3]
 8003b20:	4b51      	ldr	r3, [pc, #324]	; (8003c68 <TrajectoryEvaluation+0xe08>)
 8003b22:	edd3 7a00 	vldr	s15, [r3]
 8003b26:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003b2a:	4b4f      	ldr	r3, [pc, #316]	; (8003c68 <TrajectoryEvaluation+0xe08>)
 8003b2c:	edd3 7a00 	vldr	s15, [r3]
 8003b30:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003b34:	4b4c      	ldr	r3, [pc, #304]	; (8003c68 <TrajectoryEvaluation+0xe08>)
 8003b36:	edd3 7a00 	vldr	s15, [r3]
 8003b3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
			 traject -> QX = (traject -> MatTA_Data[0]) + (traject -> MatTA_Data[1]*t) + (traject -> MatTA_Data[2]*(t*t)) + (traject -> MatTA_Data[3]*(t*t*t)) + (traject -> MatTA_Data[4]*(t*t*t*t))+ (traject -> MatTA_Data[5]*(t*t*t*t*t));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	ed93 7a4e 	vldr	s14, [r3, #312]	; 0x138
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	edd3 6a4f 	vldr	s13, [r3, #316]	; 0x13c
 8003b58:	4b42      	ldr	r3, [pc, #264]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003b5a:	edd3 7a00 	vldr	s15, [r3]
 8003b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	edd3 6a50 	vldr	s13, [r3, #320]	; 0x140
 8003b6c:	4b3d      	ldr	r3, [pc, #244]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003b6e:	ed93 6a00 	vldr	s12, [r3]
 8003b72:	4b3c      	ldr	r3, [pc, #240]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003b74:	edd3 7a00 	vldr	s15, [r3]
 8003b78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	edd3 6a51 	vldr	s13, [r3, #324]	; 0x144
 8003b8a:	4b36      	ldr	r3, [pc, #216]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003b8c:	ed93 6a00 	vldr	s12, [r3]
 8003b90:	4b34      	ldr	r3, [pc, #208]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003b92:	edd3 7a00 	vldr	s15, [r3]
 8003b96:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003b9a:	4b32      	ldr	r3, [pc, #200]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003b9c:	edd3 7a00 	vldr	s15, [r3]
 8003ba0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003ba4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ba8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	edd3 6a52 	vldr	s13, [r3, #328]	; 0x148
 8003bb2:	4b2c      	ldr	r3, [pc, #176]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003bb4:	ed93 6a00 	vldr	s12, [r3]
 8003bb8:	4b2a      	ldr	r3, [pc, #168]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003bba:	edd3 7a00 	vldr	s15, [r3]
 8003bbe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bc2:	4b28      	ldr	r3, [pc, #160]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003bc4:	edd3 7a00 	vldr	s15, [r3]
 8003bc8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bcc:	4b25      	ldr	r3, [pc, #148]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003bce:	edd3 7a00 	vldr	s15, [r3]
 8003bd2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	edd3 6a53 	vldr	s13, [r3, #332]	; 0x14c
 8003be4:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003be6:	ed93 6a00 	vldr	s12, [r3]
 8003bea:	4b1e      	ldr	r3, [pc, #120]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003bec:	edd3 7a00 	vldr	s15, [r3]
 8003bf0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003bf6:	edd3 7a00 	vldr	s15, [r3]
 8003bfa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bfe:	4b19      	ldr	r3, [pc, #100]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003c00:	edd3 7a00 	vldr	s15, [r3]
 8003c04:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003c08:	4b16      	ldr	r3, [pc, #88]	; (8003c64 <TrajectoryEvaluation+0xe04>)
 8003c0a:	edd3 7a00 	vldr	s15, [r3]
 8003c0e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003c12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 8003c20:	e019      	b.n	8003c56 <TrajectoryEvaluation+0xdf6>
		  traject -> QJ = 0;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		  traject -> QA = 0;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
		  traject -> QV = 0;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		  traject -> QVP = 0;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		  traject -> QX = traject -> Qfinal;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
   return 1.0;
 8003c56:	bf00      	nop
 8003c58:	bf00      	nop
}
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c62:	bf00      	nop
 8003c64:	2000045c 	.word	0x2000045c
 8003c68:	20000460 	.word	0x20000460

08003c6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c74:	f002 fb86 	bl	8006384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c78:	f000 f8d6 	bl	8003e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c7c:	f000 fb08 	bl	8004290 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c80:	f000 fade 	bl	8004240 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003c84:	f000 fab0 	bl	80041e8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003c88:	f000 f936 	bl	8003ef8 <MX_I2C1_Init>
  MX_TIM11_Init();
 8003c8c:	f000 fa88 	bl	80041a0 <MX_TIM11_Init>
  MX_TIM1_Init();
 8003c90:	f000 f960 	bl	8003f54 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003c94:	f000 f9e2 	bl	800405c <MX_TIM2_Init>
  MX_TIM5_Init();
 8003c98:	f000 fa34 	bl	8004104 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
//  HAL_Delay(1000);
  Ringbuf_Init();
 8003c9c:	f000 fe5e 	bl	800495c <Ringbuf_Init>
  KalmanMatrixInit(&KalmanVar);
 8003ca0:	484e      	ldr	r0, [pc, #312]	; (8003ddc <main+0x170>)
 8003ca2:	f7fd f859 	bl	8000d58 <KalmanMatrixInit>
  TrajectorInit(&traject);
 8003ca6:	484e      	ldr	r0, [pc, #312]	; (8003de0 <main+0x174>)
 8003ca8:	f7fd fe61 	bl	800196e <TrajectorInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003cac:	2100      	movs	r1, #0
 8003cae:	484d      	ldr	r0, [pc, #308]	; (8003de4 <main+0x178>)
 8003cb0:	f006 f820 	bl	8009cf4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8003cb4:	484c      	ldr	r0, [pc, #304]	; (8003de8 <main+0x17c>)
 8003cb6:	f005 ff3d 	bl	8009b34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8003cba:	213c      	movs	r1, #60	; 0x3c
 8003cbc:	484b      	ldr	r0, [pc, #300]	; (8003dec <main+0x180>)
 8003cbe:	f006 f96f 	bl	8009fa0 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 8003cc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4b49      	ldr	r3, [pc, #292]	; (8003df0 <main+0x184>)
 8003ccc:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 8003cce:	4b48      	ldr	r3, [pc, #288]	; (8003df0 <main+0x184>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a47      	ldr	r2, [pc, #284]	; (8003df0 <main+0x184>)
 8003cd4:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 8003cd6:	4b46      	ldr	r3, [pc, #280]	; (8003df0 <main+0x184>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a46      	ldr	r2, [pc, #280]	; (8003df4 <main+0x188>)
 8003cdc:	6013      	str	r3, [r2, #0]
  PIDAController_Init(&PidVelo);
 8003cde:	4846      	ldr	r0, [pc, #280]	; (8003df8 <main+0x18c>)
 8003ce0:	f7fd fb50 	bl	8001384 <PIDAController_Init>
  PIDAController_Init(&PidPos);
 8003ce4:	4845      	ldr	r0, [pc, #276]	; (8003dfc <main+0x190>)
 8003ce6:	f7fd fb4d 	bl	8001384 <PIDAController_Init>
  // Reset all Parameter
  Robotinit(&Robot);
 8003cea:	4845      	ldr	r0, [pc, #276]	; (8003e00 <main+0x194>)
 8003cec:	f7fd fe06 	bl	80018fc <Robotinit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timeElapsed[0] = Micros();
 8003cf0:	f002 f844 	bl	8005d7c <Micros>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4942      	ldr	r1, [pc, #264]	; (8003e04 <main+0x198>)
 8003cfa:	e9c1 2300 	strd	r2, r3, [r1]
	  timeElapsed[1] = HAL_GetTick();
 8003cfe:	f002 fba7 	bl	8006450 <HAL_GetTick>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2200      	movs	r2, #0
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	4b3e      	ldr	r3, [pc, #248]	; (8003e04 <main+0x198>)
 8003d0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d10:	e9c3 1202 	strd	r1, r2, [r3, #8]
	  RobotstateManagement();
 8003d14:	f001 fb28 	bl	8005368 <RobotstateManagement>
	  if(Micros() - EndEffLoopTime > 100000)
 8003d18:	f002 f830 	bl	8005d7c <Micros>
 8003d1c:	4b3a      	ldr	r3, [pc, #232]	; (8003e08 <main+0x19c>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	1a84      	subs	r4, r0, r2
 8003d24:	eb61 0503 	sbc.w	r5, r1, r3
 8003d28:	4b38      	ldr	r3, [pc, #224]	; (8003e0c <main+0x1a0>)
 8003d2a:	429c      	cmp	r4, r3
 8003d2c:	f175 0300 	sbcs.w	r3, r5, #0
 8003d30:	d308      	bcc.n	8003d44 <main+0xd8>
	  {
		  EndEffLoopTime = Micros();
 8003d32:	f002 f823 	bl	8005d7c <Micros>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4933      	ldr	r1, [pc, #204]	; (8003e08 <main+0x19c>)
 8003d3c:	e9c1 2300 	strd	r2, r3, [r1]
		  EndEffstateManagement();
 8003d40:	f001 fc62 	bl	8005608 <EndEffstateManagement>
	  }
	  if(Micros() - ControlLoopTime >= 10000)
 8003d44:	f002 f81a 	bl	8005d7c <Micros>
 8003d48:	4b31      	ldr	r3, [pc, #196]	; (8003e10 <main+0x1a4>)
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	ebb0 0802 	subs.w	r8, r0, r2
 8003d52:	eb61 0903 	sbc.w	r9, r1, r3
 8003d56:	f242 7310 	movw	r3, #10000	; 0x2710
 8003d5a:	4598      	cmp	r8, r3
 8003d5c:	f179 0300 	sbcs.w	r3, r9, #0
 8003d60:	d3c6      	bcc.n	8003cf0 <main+0x84>
	  {
		ControlLoopTime  = Micros();
 8003d62:	f002 f80b 	bl	8005d7c <Micros>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4929      	ldr	r1, [pc, #164]	; (8003e10 <main+0x1a4>)
 8003d6c:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStartTime = Micros();
 8003d70:	f002 f804 	bl	8005d7c <Micros>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4926      	ldr	r1, [pc, #152]	; (8003e14 <main+0x1a8>)
 8003d7a:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 8003d7e:	f000 fb4b 	bl	8004418 <EncoderRead>
		KalmanFilterFunction(&KalmanVar,PositionDeg[0],VelocityDeg);
 8003d82:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <main+0x1ac>)
 8003d84:	edd3 7a00 	vldr	s15, [r3]
 8003d88:	4b24      	ldr	r3, [pc, #144]	; (8003e1c <main+0x1b0>)
 8003d8a:	ed93 7a00 	vldr	s14, [r3]
 8003d8e:	eef0 0a47 	vmov.f32	s1, s14
 8003d92:	eeb0 0a67 	vmov.f32	s0, s15
 8003d96:	4811      	ldr	r0, [pc, #68]	; (8003ddc <main+0x170>)
 8003d98:	f7fd f9c0 	bl	800111c <KalmanFilterFunction>
		Robot.Position = PositionDeg[0];
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <main+0x1ac>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <main+0x194>)
 8003da2:	6013      	str	r3, [r2, #0]
		Robot.Velocity = KalmanVar.MatState_Data[1];
 8003da4:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <main+0x170>)
 8003da6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003daa:	4a15      	ldr	r2, [pc, #84]	; (8003e00 <main+0x194>)
 8003dac:	6053      	str	r3, [r2, #4]
		ControllLoopAndErrorHandler();
 8003dae:	f000 fca9 	bl	8004704 <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 8003db2:	f001 ffe3 	bl	8005d7c <Micros>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4919      	ldr	r1, [pc, #100]	; (8003e20 <main+0x1b4>)
 8003dbc:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 8003dc0:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <main+0x1b4>)
 8003dc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dc6:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <main+0x1a8>)
 8003dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dcc:	ebb0 0a02 	subs.w	sl, r0, r2
 8003dd0:	eb61 0b03 	sbc.w	fp, r1, r3
 8003dd4:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <main+0x1b8>)
 8003dd6:	e9c3 ab00 	strd	sl, fp, [r3]
	  timeElapsed[0] = Micros();
 8003dda:	e789      	b.n	8003cf0 <main+0x84>
 8003ddc:	20000034 	.word	0x20000034
 8003de0:	2000086c 	.word	0x2000086c
 8003de4:	200004b8 	.word	0x200004b8
 8003de8:	20000590 	.word	0x20000590
 8003dec:	20000500 	.word	0x20000500
 8003df0:	200007e8 	.word	0x200007e8
 8003df4:	200007f4 	.word	0x200007f4
 8003df8:	20000808 	.word	0x20000808
 8003dfc:	20000838 	.word	0x20000838
 8003e00:	200006dc 	.word	0x200006dc
 8003e04:	20000780 	.word	0x20000780
 8003e08:	20000790 	.word	0x20000790
 8003e0c:	000186a1 	.word	0x000186a1
 8003e10:	20000af8 	.word	0x20000af8
 8003e14:	20000ac8 	.word	0x20000ac8
 8003e18:	200007f8 	.word	0x200007f8
 8003e1c:	20000800 	.word	0x20000800
 8003e20:	20000ad0 	.word	0x20000ad0
 8003e24:	20000ad8 	.word	0x20000ad8

08003e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b094      	sub	sp, #80	; 0x50
 8003e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e2e:	f107 0320 	add.w	r3, r7, #32
 8003e32:	2230      	movs	r2, #48	; 0x30
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f008 fcc0 	bl	800c7bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e3c:	f107 030c 	add.w	r3, r7, #12
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	60da      	str	r2, [r3, #12]
 8003e4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <SystemClock_Config+0xc8>)
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	4a26      	ldr	r2, [pc, #152]	; (8003ef0 <SystemClock_Config+0xc8>)
 8003e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e5c:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <SystemClock_Config+0xc8>)
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e68:	2300      	movs	r3, #0
 8003e6a:	607b      	str	r3, [r7, #4]
 8003e6c:	4b21      	ldr	r3, [pc, #132]	; (8003ef4 <SystemClock_Config+0xcc>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a20      	ldr	r2, [pc, #128]	; (8003ef4 <SystemClock_Config+0xcc>)
 8003e72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <SystemClock_Config+0xcc>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e80:	607b      	str	r3, [r7, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e84:	2302      	movs	r3, #2
 8003e86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e8c:	2310      	movs	r3, #16
 8003e8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e90:	2302      	movs	r3, #2
 8003e92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e94:	2300      	movs	r3, #0
 8003e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003e98:	2308      	movs	r3, #8
 8003e9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003e9c:	2364      	movs	r3, #100	; 0x64
 8003e9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ea8:	f107 0320 	add.w	r3, r7, #32
 8003eac:	4618      	mov	r0, r3
 8003eae:	f005 f959 	bl	8009164 <HAL_RCC_OscConfig>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003eb8:	f001 ff78 	bl	8005dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ebc:	230f      	movs	r3, #15
 8003ebe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ecc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003ed2:	f107 030c 	add.w	r3, r7, #12
 8003ed6:	2103      	movs	r1, #3
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f005 fbbb 	bl	8009654 <HAL_RCC_ClockConfig>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003ee4:	f001 ff62 	bl	8005dac <Error_Handler>
  }
}
 8003ee8:	bf00      	nop
 8003eea:	3750      	adds	r7, #80	; 0x50
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40007000 	.word	0x40007000

08003ef8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003efc:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <MX_I2C1_Init+0x50>)
 8003efe:	4a13      	ldr	r2, [pc, #76]	; (8003f4c <MX_I2C1_Init+0x54>)
 8003f00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003f02:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <MX_I2C1_Init+0x50>)
 8003f04:	4a12      	ldr	r2, [pc, #72]	; (8003f50 <MX_I2C1_Init+0x58>)
 8003f06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f08:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <MX_I2C1_Init+0x50>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003f0e:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <MX_I2C1_Init+0x50>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f14:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <MX_I2C1_Init+0x50>)
 8003f16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <MX_I2C1_Init+0x50>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <MX_I2C1_Init+0x50>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f28:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <MX_I2C1_Init+0x50>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <MX_I2C1_Init+0x50>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f34:	4804      	ldr	r0, [pc, #16]	; (8003f48 <MX_I2C1_Init+0x50>)
 8003f36:	f003 f9a1 	bl	800727c <HAL_I2C_Init>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003f40:	f001 ff34 	bl	8005dac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f44:	bf00      	nop
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20000464 	.word	0x20000464
 8003f4c:	40005400 	.word	0x40005400
 8003f50:	00061a80 	.word	0x00061a80

08003f54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b092      	sub	sp, #72	; 0x48
 8003f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	611a      	str	r2, [r3, #16]
 8003f74:	615a      	str	r2, [r3, #20]
 8003f76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f78:	1d3b      	adds	r3, r7, #4
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f008 fc1c 	bl	800c7bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f84:	4b33      	ldr	r3, [pc, #204]	; (8004054 <MX_TIM1_Init+0x100>)
 8003f86:	4a34      	ldr	r2, [pc, #208]	; (8004058 <MX_TIM1_Init+0x104>)
 8003f88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003f8a:	4b32      	ldr	r3, [pc, #200]	; (8004054 <MX_TIM1_Init+0x100>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f90:	4b30      	ldr	r3, [pc, #192]	; (8004054 <MX_TIM1_Init+0x100>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8003f96:	4b2f      	ldr	r3, [pc, #188]	; (8004054 <MX_TIM1_Init+0x100>)
 8003f98:	f242 720f 	movw	r2, #9999	; 0x270f
 8003f9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f9e:	4b2d      	ldr	r3, [pc, #180]	; (8004054 <MX_TIM1_Init+0x100>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003fa4:	4b2b      	ldr	r3, [pc, #172]	; (8004054 <MX_TIM1_Init+0x100>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003faa:	4b2a      	ldr	r3, [pc, #168]	; (8004054 <MX_TIM1_Init+0x100>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003fb0:	4828      	ldr	r0, [pc, #160]	; (8004054 <MX_TIM1_Init+0x100>)
 8003fb2:	f005 fe50 	bl	8009c56 <HAL_TIM_PWM_Init>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003fbc:	f001 fef6 	bl	8005dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4821      	ldr	r0, [pc, #132]	; (8004054 <MX_TIM1_Init+0x100>)
 8003fd0:	f006 fdfa 	bl	800abc8 <HAL_TIMEx_MasterConfigSynchronization>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003fda:	f001 fee7 	bl	8005dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fde:	2360      	movs	r3, #96	; 0x60
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003fea:	2300      	movs	r3, #0
 8003fec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ffe:	2200      	movs	r2, #0
 8004000:	4619      	mov	r1, r3
 8004002:	4814      	ldr	r0, [pc, #80]	; (8004054 <MX_TIM1_Init+0x100>)
 8004004:	f006 f962 	bl	800a2cc <HAL_TIM_PWM_ConfigChannel>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800400e:	f001 fecd 	bl	8005dac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004012:	2300      	movs	r3, #0
 8004014:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004016:	2300      	movs	r3, #0
 8004018:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800402a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800402c:	2300      	movs	r3, #0
 800402e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004030:	1d3b      	adds	r3, r7, #4
 8004032:	4619      	mov	r1, r3
 8004034:	4807      	ldr	r0, [pc, #28]	; (8004054 <MX_TIM1_Init+0x100>)
 8004036:	f006 fe35 	bl	800aca4 <HAL_TIMEx_ConfigBreakDeadTime>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8004040:	f001 feb4 	bl	8005dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004044:	4803      	ldr	r0, [pc, #12]	; (8004054 <MX_TIM1_Init+0x100>)
 8004046:	f001 ffeb 	bl	8006020 <HAL_TIM_MspPostInit>

}
 800404a:	bf00      	nop
 800404c:	3748      	adds	r7, #72	; 0x48
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	200004b8 	.word	0x200004b8
 8004058:	40010000 	.word	0x40010000

0800405c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08c      	sub	sp, #48	; 0x30
 8004060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004062:	f107 030c 	add.w	r3, r7, #12
 8004066:	2224      	movs	r2, #36	; 0x24
 8004068:	2100      	movs	r1, #0
 800406a:	4618      	mov	r0, r3
 800406c:	f008 fba6 	bl	800c7bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004070:	1d3b      	adds	r3, r7, #4
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004078:	4b21      	ldr	r3, [pc, #132]	; (8004100 <MX_TIM2_Init+0xa4>)
 800407a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800407e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004080:	4b1f      	ldr	r3, [pc, #124]	; (8004100 <MX_TIM2_Init+0xa4>)
 8004082:	2200      	movs	r2, #0
 8004084:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004086:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <MX_TIM2_Init+0xa4>)
 8004088:	2200      	movs	r2, #0
 800408a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 800408c:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <MX_TIM2_Init+0xa4>)
 800408e:	f642 62df 	movw	r2, #11999	; 0x2edf
 8004092:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004094:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <MX_TIM2_Init+0xa4>)
 8004096:	2200      	movs	r2, #0
 8004098:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800409a:	4b19      	ldr	r3, [pc, #100]	; (8004100 <MX_TIM2_Init+0xa4>)
 800409c:	2200      	movs	r2, #0
 800409e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80040a0:	2303      	movs	r3, #3
 80040a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80040a8:	2301      	movs	r3, #1
 80040aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80040b4:	2300      	movs	r3, #0
 80040b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80040b8:	2301      	movs	r3, #1
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80040bc:	2300      	movs	r3, #0
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80040c4:	f107 030c 	add.w	r3, r7, #12
 80040c8:	4619      	mov	r1, r3
 80040ca:	480d      	ldr	r0, [pc, #52]	; (8004100 <MX_TIM2_Init+0xa4>)
 80040cc:	f005 fec2 	bl	8009e54 <HAL_TIM_Encoder_Init>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80040d6:	f001 fe69 	bl	8005dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040da:	2300      	movs	r3, #0
 80040dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80040e2:	1d3b      	adds	r3, r7, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4806      	ldr	r0, [pc, #24]	; (8004100 <MX_TIM2_Init+0xa4>)
 80040e8:	f006 fd6e 	bl	800abc8 <HAL_TIMEx_MasterConfigSynchronization>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80040f2:	f001 fe5b 	bl	8005dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80040f6:	bf00      	nop
 80040f8:	3730      	adds	r7, #48	; 0x30
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000500 	.word	0x20000500

08004104 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800410a:	f107 0308 	add.w	r3, r7, #8
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	605a      	str	r2, [r3, #4]
 8004114:	609a      	str	r2, [r3, #8]
 8004116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004118:	463b      	mov	r3, r7
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004120:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <MX_TIM5_Init+0x90>)
 8004122:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <MX_TIM5_Init+0x94>)
 8004124:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8004126:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <MX_TIM5_Init+0x90>)
 8004128:	2263      	movs	r2, #99	; 0x63
 800412a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800412c:	4b19      	ldr	r3, [pc, #100]	; (8004194 <MX_TIM5_Init+0x90>)
 800412e:	2200      	movs	r2, #0
 8004130:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 8004132:	4b18      	ldr	r3, [pc, #96]	; (8004194 <MX_TIM5_Init+0x90>)
 8004134:	4a19      	ldr	r2, [pc, #100]	; (800419c <MX_TIM5_Init+0x98>)
 8004136:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004138:	4b16      	ldr	r3, [pc, #88]	; (8004194 <MX_TIM5_Init+0x90>)
 800413a:	2200      	movs	r2, #0
 800413c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <MX_TIM5_Init+0x90>)
 8004140:	2200      	movs	r2, #0
 8004142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004144:	4813      	ldr	r0, [pc, #76]	; (8004194 <MX_TIM5_Init+0x90>)
 8004146:	f005 fca5 	bl	8009a94 <HAL_TIM_Base_Init>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8004150:	f001 fe2c 	bl	8005dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004158:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800415a:	f107 0308 	add.w	r3, r7, #8
 800415e:	4619      	mov	r1, r3
 8004160:	480c      	ldr	r0, [pc, #48]	; (8004194 <MX_TIM5_Init+0x90>)
 8004162:	f006 f975 	bl	800a450 <HAL_TIM_ConfigClockSource>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 800416c:	f001 fe1e 	bl	8005dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004170:	2320      	movs	r3, #32
 8004172:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004174:	2300      	movs	r3, #0
 8004176:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004178:	463b      	mov	r3, r7
 800417a:	4619      	mov	r1, r3
 800417c:	4805      	ldr	r0, [pc, #20]	; (8004194 <MX_TIM5_Init+0x90>)
 800417e:	f006 fd23 	bl	800abc8 <HAL_TIMEx_MasterConfigSynchronization>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8004188:	f001 fe10 	bl	8005dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800418c:	bf00      	nop
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20000548 	.word	0x20000548
 8004198:	40000c00 	.word	0x40000c00
 800419c:	0001869f 	.word	0x0001869f

080041a0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80041a4:	4b0e      	ldr	r3, [pc, #56]	; (80041e0 <MX_TIM11_Init+0x40>)
 80041a6:	4a0f      	ldr	r2, [pc, #60]	; (80041e4 <MX_TIM11_Init+0x44>)
 80041a8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80041aa:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <MX_TIM11_Init+0x40>)
 80041ac:	2263      	movs	r2, #99	; 0x63
 80041ae:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <MX_TIM11_Init+0x40>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80041b6:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <MX_TIM11_Init+0x40>)
 80041b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041bc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041be:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <MX_TIM11_Init+0x40>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <MX_TIM11_Init+0x40>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80041ca:	4805      	ldr	r0, [pc, #20]	; (80041e0 <MX_TIM11_Init+0x40>)
 80041cc:	f005 fc62 	bl	8009a94 <HAL_TIM_Base_Init>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80041d6:	f001 fde9 	bl	8005dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80041da:	bf00      	nop
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000590 	.word	0x20000590
 80041e4:	40014800 	.word	0x40014800

080041e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80041ec:	4b12      	ldr	r3, [pc, #72]	; (8004238 <MX_USART2_UART_Init+0x50>)
 80041ee:	4a13      	ldr	r2, [pc, #76]	; (800423c <MX_USART2_UART_Init+0x54>)
 80041f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80041f2:	4b11      	ldr	r3, [pc, #68]	; (8004238 <MX_USART2_UART_Init+0x50>)
 80041f4:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80041f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80041fa:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <MX_USART2_UART_Init+0x50>)
 80041fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004200:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004202:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <MX_USART2_UART_Init+0x50>)
 8004204:	2200      	movs	r2, #0
 8004206:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <MX_USART2_UART_Init+0x50>)
 800420a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800420e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004210:	4b09      	ldr	r3, [pc, #36]	; (8004238 <MX_USART2_UART_Init+0x50>)
 8004212:	220c      	movs	r2, #12
 8004214:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004216:	4b08      	ldr	r3, [pc, #32]	; (8004238 <MX_USART2_UART_Init+0x50>)
 8004218:	2200      	movs	r2, #0
 800421a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800421c:	4b06      	ldr	r3, [pc, #24]	; (8004238 <MX_USART2_UART_Init+0x50>)
 800421e:	2200      	movs	r2, #0
 8004220:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004222:	4805      	ldr	r0, [pc, #20]	; (8004238 <MX_USART2_UART_Init+0x50>)
 8004224:	f006 fda4 	bl	800ad70 <HAL_UART_Init>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800422e:	f001 fdbd 	bl	8005dac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004232:	bf00      	nop
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	200005d8 	.word	0x200005d8
 800423c:	40004400 	.word	0x40004400

08004240 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
 800424a:	4b10      	ldr	r3, [pc, #64]	; (800428c <MX_DMA_Init+0x4c>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	4a0f      	ldr	r2, [pc, #60]	; (800428c <MX_DMA_Init+0x4c>)
 8004250:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004254:	6313      	str	r3, [r2, #48]	; 0x30
 8004256:	4b0d      	ldr	r3, [pc, #52]	; (800428c <MX_DMA_Init+0x4c>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800425e:	607b      	str	r3, [r7, #4]
 8004260:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004262:	2200      	movs	r2, #0
 8004264:	2100      	movs	r1, #0
 8004266:	2010      	movs	r0, #16
 8004268:	f002 f9d9 	bl	800661e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800426c:	2010      	movs	r0, #16
 800426e:	f002 f9f2 	bl	8006656 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8004272:	2200      	movs	r2, #0
 8004274:	2100      	movs	r1, #0
 8004276:	2011      	movs	r0, #17
 8004278:	f002 f9d1 	bl	800661e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800427c:	2011      	movs	r0, #17
 800427e:	f002 f9ea 	bl	8006656 <HAL_NVIC_EnableIRQ>

}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40023800 	.word	0x40023800

08004290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08a      	sub	sp, #40	; 0x28
 8004294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004296:	f107 0314 	add.w	r3, r7, #20
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	605a      	str	r2, [r3, #4]
 80042a0:	609a      	str	r2, [r3, #8]
 80042a2:	60da      	str	r2, [r3, #12]
 80042a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	4b4e      	ldr	r3, [pc, #312]	; (80043e4 <MX_GPIO_Init+0x154>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	4a4d      	ldr	r2, [pc, #308]	; (80043e4 <MX_GPIO_Init+0x154>)
 80042b0:	f043 0304 	orr.w	r3, r3, #4
 80042b4:	6313      	str	r3, [r2, #48]	; 0x30
 80042b6:	4b4b      	ldr	r3, [pc, #300]	; (80043e4 <MX_GPIO_Init+0x154>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	4b47      	ldr	r3, [pc, #284]	; (80043e4 <MX_GPIO_Init+0x154>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	4a46      	ldr	r2, [pc, #280]	; (80043e4 <MX_GPIO_Init+0x154>)
 80042cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d0:	6313      	str	r3, [r2, #48]	; 0x30
 80042d2:	4b44      	ldr	r3, [pc, #272]	; (80043e4 <MX_GPIO_Init+0x154>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042de:	2300      	movs	r3, #0
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	4b40      	ldr	r3, [pc, #256]	; (80043e4 <MX_GPIO_Init+0x154>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	4a3f      	ldr	r2, [pc, #252]	; (80043e4 <MX_GPIO_Init+0x154>)
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	6313      	str	r3, [r2, #48]	; 0x30
 80042ee:	4b3d      	ldr	r3, [pc, #244]	; (80043e4 <MX_GPIO_Init+0x154>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042fa:	2300      	movs	r3, #0
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	4b39      	ldr	r3, [pc, #228]	; (80043e4 <MX_GPIO_Init+0x154>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	4a38      	ldr	r2, [pc, #224]	; (80043e4 <MX_GPIO_Init+0x154>)
 8004304:	f043 0302 	orr.w	r3, r3, #2
 8004308:	6313      	str	r3, [r2, #48]	; 0x30
 800430a:	4b36      	ldr	r3, [pc, #216]	; (80043e4 <MX_GPIO_Init+0x154>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	607b      	str	r3, [r7, #4]
 8004314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 8004316:	2200      	movs	r2, #0
 8004318:	f44f 7108 	mov.w	r1, #544	; 0x220
 800431c:	4832      	ldr	r0, [pc, #200]	; (80043e8 <MX_GPIO_Init+0x158>)
 800431e:	f002 ff61 	bl	80071e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin, GPIO_PIN_RESET);
 8004322:	2200      	movs	r2, #0
 8004324:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8004328:	4830      	ldr	r0, [pc, #192]	; (80043ec <MX_GPIO_Init+0x15c>)
 800432a:	f002 ff5b 	bl	80071e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800432e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004334:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800433e:	f107 0314 	add.w	r3, r7, #20
 8004342:	4619      	mov	r1, r3
 8004344:	482a      	ldr	r0, [pc, #168]	; (80043f0 <MX_GPIO_Init+0x160>)
 8004346:	f002 fdb1 	bl	8006eac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 800434a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800434e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004350:	2301      	movs	r3, #1
 8004352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004358:	2300      	movs	r3, #0
 800435a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800435c:	f107 0314 	add.w	r3, r7, #20
 8004360:	4619      	mov	r1, r3
 8004362:	4821      	ldr	r0, [pc, #132]	; (80043e8 <MX_GPIO_Init+0x158>)
 8004364:	f002 fda2 	bl	8006eac <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_RedLamp_Pin Pin_YelLamp_Pin Pin_BlueLamp_Pin */
  GPIO_InitStruct.Pin = Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin;
 8004368:	f44f 6383 	mov.w	r3, #1048	; 0x418
 800436c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800436e:	2301      	movs	r3, #1
 8004370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004376:	2300      	movs	r3, #0
 8004378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800437a:	f107 0314 	add.w	r3, r7, #20
 800437e:	4619      	mov	r1, r3
 8004380:	481a      	ldr	r0, [pc, #104]	; (80043ec <MX_GPIO_Init+0x15c>)
 8004382:	f002 fd93 	bl	8006eac <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Proxi_Pin */
  GPIO_InitStruct.Pin = Pin_Proxi_Pin;
 8004386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800438a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800438c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8004390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Proxi_GPIO_Port, &GPIO_InitStruct);
 8004396:	f107 0314 	add.w	r3, r7, #20
 800439a:	4619      	mov	r1, r3
 800439c:	4812      	ldr	r0, [pc, #72]	; (80043e8 <MX_GPIO_Init+0x158>)
 800439e:	f002 fd85 	bl	8006eac <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Emer_Pin */
  GPIO_InitStruct.Pin = Pin_Emer_Pin;
 80043a2:	2320      	movs	r3, #32
 80043a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80043a6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80043aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Emer_GPIO_Port, &GPIO_InitStruct);
 80043b0:	f107 0314 	add.w	r3, r7, #20
 80043b4:	4619      	mov	r1, r3
 80043b6:	480d      	ldr	r0, [pc, #52]	; (80043ec <MX_GPIO_Init+0x15c>)
 80043b8:	f002 fd78 	bl	8006eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80043bc:	2200      	movs	r2, #0
 80043be:	2100      	movs	r1, #0
 80043c0:	2017      	movs	r0, #23
 80043c2:	f002 f92c 	bl	800661e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80043c6:	2017      	movs	r0, #23
 80043c8:	f002 f945 	bl	8006656 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80043cc:	2200      	movs	r2, #0
 80043ce:	2100      	movs	r1, #0
 80043d0:	2028      	movs	r0, #40	; 0x28
 80043d2:	f002 f924 	bl	800661e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043d6:	2028      	movs	r0, #40	; 0x28
 80043d8:	f002 f93d 	bl	8006656 <HAL_NVIC_EnableIRQ>

}
 80043dc:	bf00      	nop
 80043de:	3728      	adds	r7, #40	; 0x28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40020000 	.word	0x40020000
 80043ec:	40020400 	.word	0x40020400
 80043f0:	40020800 	.word	0x40020800

080043f4 <Int32Abs>:

/* USER CODE BEGIN 4 */
uint32_t Int32Abs(int32_t number)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
	if(number<0){
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	da02      	bge.n	8004408 <Int32Abs+0x14>
		return number*-1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	425b      	negs	r3, r3
 8004406:	e000      	b.n	800440a <Int32Abs+0x16>
	}else{
		return number;
 8004408:	687b      	ldr	r3, [r7, #4]
	}
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <EncoderRead>:

void EncoderRead()
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 800441c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	461a      	mov	r2, r3
 8004424:	4b32      	ldr	r3, [pc, #200]	; (80044f0 <EncoderRead+0xd8>)
 8004426:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 8004428:	4b31      	ldr	r3, [pc, #196]	; (80044f0 <EncoderRead+0xd8>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4b30      	ldr	r3, [pc, #192]	; (80044f0 <EncoderRead+0xd8>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	1ad2      	subs	r2, r2, r3
 8004432:	4b30      	ldr	r3, [pc, #192]	; (80044f4 <EncoderRead+0xdc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	425b      	negs	r3, r3
 8004438:	429a      	cmp	r2, r3
 800443a:	da07      	bge.n	800444c <EncoderRead+0x34>
		WrappingStep+=12000;
 800443c:	4b2e      	ldr	r3, [pc, #184]	; (80044f8 <EncoderRead+0xe0>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004444:	3320      	adds	r3, #32
 8004446:	4a2c      	ldr	r2, [pc, #176]	; (80044f8 <EncoderRead+0xe0>)
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	e00f      	b.n	800446c <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 800444c:	4b28      	ldr	r3, [pc, #160]	; (80044f0 <EncoderRead+0xd8>)
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <EncoderRead+0xd8>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	1ad2      	subs	r2, r2, r3
 8004456:	4b27      	ldr	r3, [pc, #156]	; (80044f4 <EncoderRead+0xdc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	db06      	blt.n	800446c <EncoderRead+0x54>
		WrappingStep-=12000;
 800445e:	4b26      	ldr	r3, [pc, #152]	; (80044f8 <EncoderRead+0xe0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 8004466:	3b20      	subs	r3, #32
 8004468:	4a23      	ldr	r2, [pc, #140]	; (80044f8 <EncoderRead+0xe0>)
 800446a:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 800446c:	4b20      	ldr	r3, [pc, #128]	; (80044f0 <EncoderRead+0xd8>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b21      	ldr	r3, [pc, #132]	; (80044f8 <EncoderRead+0xe0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4413      	add	r3, r2
 8004476:	4a21      	ldr	r2, [pc, #132]	; (80044fc <EncoderRead+0xe4>)
 8004478:	6013      	str	r3, [r2, #0]
	PositionDeg[0] = (PositionRaw/12000.0)*360.0;
 800447a:	4b20      	ldr	r3, [pc, #128]	; (80044fc <EncoderRead+0xe4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fb fffc 	bl	800047c <__aeabi_i2d>
 8004484:	a318      	add	r3, pc, #96	; (adr r3, 80044e8 <EncoderRead+0xd0>)
 8004486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448a:	f7fc f98b 	bl	80007a4 <__aeabi_ddiv>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4610      	mov	r0, r2
 8004494:	4619      	mov	r1, r3
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	4b19      	ldr	r3, [pc, #100]	; (8004500 <EncoderRead+0xe8>)
 800449c:	f7fc f858 	bl	8000550 <__aeabi_dmul>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4610      	mov	r0, r2
 80044a6:	4619      	mov	r1, r3
 80044a8:	f7fc fa84 	bl	80009b4 <__aeabi_d2f>
 80044ac:	4603      	mov	r3, r0
 80044ae:	4a15      	ldr	r2, [pc, #84]	; (8004504 <EncoderRead+0xec>)
 80044b0:	6013      	str	r3, [r2, #0]
	VelocityDeg = ((PositionDeg[0] - PositionDeg[1])/dt);
 80044b2:	4b14      	ldr	r3, [pc, #80]	; (8004504 <EncoderRead+0xec>)
 80044b4:	ed93 7a00 	vldr	s14, [r3]
 80044b8:	4b12      	ldr	r3, [pc, #72]	; (8004504 <EncoderRead+0xec>)
 80044ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80044be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044c2:	eddf 6a11 	vldr	s13, [pc, #68]	; 8004508 <EncoderRead+0xf0>
 80044c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044ca:	4b10      	ldr	r3, [pc, #64]	; (800450c <EncoderRead+0xf4>)
 80044cc:	edc3 7a00 	vstr	s15, [r3]
	EncoderRawData[1] = EncoderRawData[0];
 80044d0:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <EncoderRead+0xd8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a06      	ldr	r2, [pc, #24]	; (80044f0 <EncoderRead+0xd8>)
 80044d6:	6053      	str	r3, [r2, #4]
	PositionDeg[1] = PositionDeg[0];
 80044d8:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <EncoderRead+0xec>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a09      	ldr	r2, [pc, #36]	; (8004504 <EncoderRead+0xec>)
 80044de:	6053      	str	r3, [r2, #4]
}
 80044e0:	bf00      	nop
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	f3af 8000 	nop.w
 80044e8:	00000000 	.word	0x00000000
 80044ec:	40c77000 	.word	0x40c77000
 80044f0:	200007e8 	.word	0x200007e8
 80044f4:	2000042c 	.word	0x2000042c
 80044f8:	200007f0 	.word	0x200007f0
 80044fc:	200007f4 	.word	0x200007f4
 8004500:	40768000 	.word	0x40768000
 8004504:	200007f8 	.word	0x200007f8
 8004508:	3c23d70a 	.word	0x3c23d70a
 800450c:	20000800 	.word	0x20000800

08004510 <Drivemotor>:

void Drivemotor(int32_t PWM){
 8004510:	b590      	push	{r4, r7, lr}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
		if(PWM<=0 && PWM>=-PWM_MAX){
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	dc11      	bgt.n	8004542 <Drivemotor+0x32>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a25      	ldr	r2, [pc, #148]	; (80045b8 <Drivemotor+0xa8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	db0d      	blt.n	8004542 <Drivemotor+0x32>
			htim1.Instance->CCR1=Int32Abs(PWM);
 8004526:	4b25      	ldr	r3, [pc, #148]	; (80045bc <Drivemotor+0xac>)
 8004528:	681c      	ldr	r4, [r3, #0]
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff ff62 	bl	80043f4 <Int32Abs>
 8004530:	4603      	mov	r3, r0
 8004532:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8004534:	2200      	movs	r2, #0
 8004536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800453a:	4821      	ldr	r0, [pc, #132]	; (80045c0 <Drivemotor+0xb0>)
 800453c:	f002 fe52 	bl	80071e4 <HAL_GPIO_WritePin>
 8004540:	e036      	b.n	80045b0 <Drivemotor+0xa0>
		}else if (PWM<-PWM_MAX){
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a1c      	ldr	r2, [pc, #112]	; (80045b8 <Drivemotor+0xa8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	da0b      	bge.n	8004562 <Drivemotor+0x52>
			htim1.Instance->CCR1=PWM_MAX;
 800454a:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <Drivemotor+0xac>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004552:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8004554:	2200      	movs	r2, #0
 8004556:	f44f 7100 	mov.w	r1, #512	; 0x200
 800455a:	4819      	ldr	r0, [pc, #100]	; (80045c0 <Drivemotor+0xb0>)
 800455c:	f002 fe42 	bl	80071e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}else if(PWM>PWM_MAX){
			htim1.Instance->CCR1=PWM_MAX;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}
}
 8004560:	e026      	b.n	80045b0 <Drivemotor+0xa0>
		}else if(PWM>=0 && PWM<=PWM_MAX){
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	db12      	blt.n	800458e <Drivemotor+0x7e>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f242 7210 	movw	r2, #10000	; 0x2710
 800456e:	4293      	cmp	r3, r2
 8004570:	dc0d      	bgt.n	800458e <Drivemotor+0x7e>
			htim1.Instance->CCR1=Int32Abs(PWM);
 8004572:	4b12      	ldr	r3, [pc, #72]	; (80045bc <Drivemotor+0xac>)
 8004574:	681c      	ldr	r4, [r3, #0]
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff ff3c 	bl	80043f4 <Int32Abs>
 800457c:	4603      	mov	r3, r0
 800457e:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8004580:	2201      	movs	r2, #1
 8004582:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004586:	480e      	ldr	r0, [pc, #56]	; (80045c0 <Drivemotor+0xb0>)
 8004588:	f002 fe2c 	bl	80071e4 <HAL_GPIO_WritePin>
 800458c:	e010      	b.n	80045b0 <Drivemotor+0xa0>
		}else if(PWM>PWM_MAX){
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f242 7210 	movw	r2, #10000	; 0x2710
 8004594:	4293      	cmp	r3, r2
 8004596:	dd0b      	ble.n	80045b0 <Drivemotor+0xa0>
			htim1.Instance->CCR1=PWM_MAX;
 8004598:	4b08      	ldr	r3, [pc, #32]	; (80045bc <Drivemotor+0xac>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f242 7210 	movw	r2, #10000	; 0x2710
 80045a0:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 80045a2:	2201      	movs	r2, #1
 80045a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045a8:	4805      	ldr	r0, [pc, #20]	; (80045c0 <Drivemotor+0xb0>)
 80045aa:	f002 fe1b 	bl	80071e4 <HAL_GPIO_WritePin>
}
 80045ae:	e7ff      	b.n	80045b0 <Drivemotor+0xa0>
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd90      	pop	{r4, r7, pc}
 80045b8:	ffffd8f0 	.word	0xffffd8f0
 80045bc:	200004b8 	.word	0x200004b8
 80045c0:	40020000 	.word	0x40020000
 80045c4:	00000000 	.word	0x00000000

080045c8 <InverseTFofMotor>:

float InverseTFofMotor(float Velo, float PredictVelo)
{
 80045c8:	b5b0      	push	{r4, r5, r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80045d2:	edc7 0a00 	vstr	s1, [r7]
	static float VeloLast = 0;
	static float Voltage = 0;
	static float VoltageLast = 0;
	static float Pwm = 0;
	Voltage = (PredictVelo - (1.298649403776808*Velo) + (0.413830007244888*VeloLast) - (0.492093238713741*VoltageLast))/0.660367603263632;
 80045d6:	6838      	ldr	r0, [r7, #0]
 80045d8:	f7fb ff62 	bl	80004a0 <__aeabi_f2d>
 80045dc:	4604      	mov	r4, r0
 80045de:	460d      	mov	r5, r1
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7fb ff5d 	bl	80004a0 <__aeabi_f2d>
 80045e6:	a345      	add	r3, pc, #276	; (adr r3, 80046fc <InverseTFofMotor+0x134>)
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	f7fb ffb0 	bl	8000550 <__aeabi_dmul>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4620      	mov	r0, r4
 80045f6:	4629      	mov	r1, r5
 80045f8:	f7fb fdf2 	bl	80001e0 <__aeabi_dsub>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4614      	mov	r4, r2
 8004602:	461d      	mov	r5, r3
 8004604:	4b38      	ldr	r3, [pc, #224]	; (80046e8 <InverseTFofMotor+0x120>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7fb ff49 	bl	80004a0 <__aeabi_f2d>
 800460e:	a32e      	add	r3, pc, #184	; (adr r3, 80046c8 <InverseTFofMotor+0x100>)
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	f7fb ff9c 	bl	8000550 <__aeabi_dmul>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4620      	mov	r0, r4
 800461e:	4629      	mov	r1, r5
 8004620:	f7fb fde0 	bl	80001e4 <__adddf3>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4614      	mov	r4, r2
 800462a:	461d      	mov	r5, r3
 800462c:	4b2f      	ldr	r3, [pc, #188]	; (80046ec <InverseTFofMotor+0x124>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f7fb ff35 	bl	80004a0 <__aeabi_f2d>
 8004636:	a326      	add	r3, pc, #152	; (adr r3, 80046d0 <InverseTFofMotor+0x108>)
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	f7fb ff88 	bl	8000550 <__aeabi_dmul>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4620      	mov	r0, r4
 8004646:	4629      	mov	r1, r5
 8004648:	f7fb fdca 	bl	80001e0 <__aeabi_dsub>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4610      	mov	r0, r2
 8004652:	4619      	mov	r1, r3
 8004654:	a320      	add	r3, pc, #128	; (adr r3, 80046d8 <InverseTFofMotor+0x110>)
 8004656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465a:	f7fc f8a3 	bl	80007a4 <__aeabi_ddiv>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4610      	mov	r0, r2
 8004664:	4619      	mov	r1, r3
 8004666:	f7fc f9a5 	bl	80009b4 <__aeabi_d2f>
 800466a:	4603      	mov	r3, r0
 800466c:	4a20      	ldr	r2, [pc, #128]	; (80046f0 <InverseTFofMotor+0x128>)
 800466e:	6013      	str	r3, [r2, #0]
	Pwm = (Voltage * 10000.0)/12.0;
 8004670:	4b1f      	ldr	r3, [pc, #124]	; (80046f0 <InverseTFofMotor+0x128>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f7fb ff13 	bl	80004a0 <__aeabi_f2d>
 800467a:	a319      	add	r3, pc, #100	; (adr r3, 80046e0 <InverseTFofMotor+0x118>)
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f7fb ff66 	bl	8000550 <__aeabi_dmul>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4610      	mov	r0, r2
 800468a:	4619      	mov	r1, r3
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <InverseTFofMotor+0x12c>)
 8004692:	f7fc f887 	bl	80007a4 <__aeabi_ddiv>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4610      	mov	r0, r2
 800469c:	4619      	mov	r1, r3
 800469e:	f7fc f989 	bl	80009b4 <__aeabi_d2f>
 80046a2:	4603      	mov	r3, r0
 80046a4:	4a14      	ldr	r2, [pc, #80]	; (80046f8 <InverseTFofMotor+0x130>)
 80046a6:	6013      	str	r3, [r2, #0]
	VoltageLast = Voltage;
 80046a8:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <InverseTFofMotor+0x128>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a0f      	ldr	r2, [pc, #60]	; (80046ec <InverseTFofMotor+0x124>)
 80046ae:	6013      	str	r3, [r2, #0]
	VeloLast = Velo;
 80046b0:	4a0d      	ldr	r2, [pc, #52]	; (80046e8 <InverseTFofMotor+0x120>)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6013      	str	r3, [r2, #0]
	return Pwm;
 80046b6:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <InverseTFofMotor+0x130>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	ee07 3a90 	vmov	s15, r3
}
 80046be:	eeb0 0a67 	vmov.f32	s0, s15
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bdb0      	pop	{r4, r5, r7, pc}
 80046c8:	dace185d 	.word	0xdace185d
 80046cc:	3fda7c30 	.word	0x3fda7c30
 80046d0:	a3b6ed62 	.word	0xa3b6ed62
 80046d4:	3fdf7e74 	.word	0x3fdf7e74
 80046d8:	3d6b5dd1 	.word	0x3d6b5dd1
 80046dc:	3fe521bb 	.word	0x3fe521bb
 80046e0:	00000000 	.word	0x00000000
 80046e4:	40c38800 	.word	0x40c38800
 80046e8:	20000b0c 	.word	0x20000b0c
 80046ec:	20000b10 	.word	0x20000b10
 80046f0:	20000b14 	.word	0x20000b14
 80046f4:	40280000 	.word	0x40280000
 80046f8:	20000b18 	.word	0x20000b18
 80046fc:	98e30f85 	.word	0x98e30f85
 8004700:	3ff4c744 	.word	0x3ff4c744

08004704 <ControllLoopAndErrorHandler>:


void ControllLoopAndErrorHandler()
{
 8004704:	b5b0      	push	{r4, r5, r7, lr}
 8004706:	ed2d 8b02 	vpush	{d8}
 800470a:	b084      	sub	sp, #16
 800470c:	af04      	add	r7, sp, #16
//		Robot.flagStartTime = 0;
//	}
//	CurrentTime = Micros();
//	PredictTime = CurrentTime + 10000;
//	TrajectoryEvaluation(&traject,StartTime,CurrentTime,PredictTime);
	if(Robot.MotorIsOn == 1)
 800470e:	4b89      	ldr	r3, [pc, #548]	; (8004934 <ControllLoopAndErrorHandler+0x230>)
 8004710:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004714:	2b01      	cmp	r3, #1
 8004716:	f040 80fb 	bne.w	8004910 <ControllLoopAndErrorHandler+0x20c>
	{
		if (Robot.flagStartTime == 1)
 800471a:	4b86      	ldr	r3, [pc, #536]	; (8004934 <ControllLoopAndErrorHandler+0x230>)
 800471c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004720:	2b01      	cmp	r3, #1
 8004722:	d10f      	bne.n	8004744 <ControllLoopAndErrorHandler+0x40>
		{
			StartTime = Micros();
 8004724:	f001 fb2a 	bl	8005d7c <Micros>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4982      	ldr	r1, [pc, #520]	; (8004938 <ControllLoopAndErrorHandler+0x234>)
 800472e:	e9c1 2300 	strd	r2, r3, [r1]
			Robot.flagStartTime = 0;
 8004732:	4b80      	ldr	r3, [pc, #512]	; (8004934 <ControllLoopAndErrorHandler+0x230>)
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			traject.TrajectoryFlag = 0;
 800473a:	4b80      	ldr	r3, [pc, #512]	; (800493c <ControllLoopAndErrorHandler+0x238>)
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		CurrentTime = Micros();
 8004744:	f001 fb1a 	bl	8005d7c <Micros>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	497c      	ldr	r1, [pc, #496]	; (8004940 <ControllLoopAndErrorHandler+0x23c>)
 800474e:	e9c1 2300 	strd	r2, r3, [r1]
		PredictTime = CurrentTime + 10000;
 8004752:	4b7b      	ldr	r3, [pc, #492]	; (8004940 <ControllLoopAndErrorHandler+0x23c>)
 8004754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004758:	f242 7110 	movw	r1, #10000	; 0x2710
 800475c:	1854      	adds	r4, r2, r1
 800475e:	f143 0500 	adc.w	r5, r3, #0
 8004762:	4b78      	ldr	r3, [pc, #480]	; (8004944 <ControllLoopAndErrorHandler+0x240>)
 8004764:	e9c3 4500 	strd	r4, r5, [r3]
		TrajectoryEvaluation(&traject,StartTime,CurrentTime,PredictTime);
 8004768:	4b73      	ldr	r3, [pc, #460]	; (8004938 <ControllLoopAndErrorHandler+0x234>)
 800476a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800476e:	4b74      	ldr	r3, [pc, #464]	; (8004940 <ControllLoopAndErrorHandler+0x23c>)
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	4973      	ldr	r1, [pc, #460]	; (8004944 <ControllLoopAndErrorHandler+0x240>)
 8004776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800477a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800477e:	e9cd 2300 	strd	r2, r3, [sp]
 8004782:	4622      	mov	r2, r4
 8004784:	462b      	mov	r3, r5
 8004786:	486d      	ldr	r0, [pc, #436]	; (800493c <ControllLoopAndErrorHandler+0x238>)
 8004788:	f7fe fb6a 	bl	8002e60 <TrajectoryEvaluation>
		Robot.QX = traject.QX;
 800478c:	4b6b      	ldr	r3, [pc, #428]	; (800493c <ControllLoopAndErrorHandler+0x238>)
 800478e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004792:	4a68      	ldr	r2, [pc, #416]	; (8004934 <ControllLoopAndErrorHandler+0x230>)
 8004794:	6193      	str	r3, [r2, #24]
		Robot.QV = traject.QV;
 8004796:	4b69      	ldr	r3, [pc, #420]	; (800493c <ControllLoopAndErrorHandler+0x238>)
 8004798:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800479c:	4a65      	ldr	r2, [pc, #404]	; (8004934 <ControllLoopAndErrorHandler+0x230>)
 800479e:	61d3      	str	r3, [r2, #28]
		if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0 && AbsVal(Robot.GoalPositon) == AbsVal(traject.QX))
 80047a0:	4b64      	ldr	r3, [pc, #400]	; (8004934 <ControllLoopAndErrorHandler+0x230>)
 80047a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80047a6:	4b63      	ldr	r3, [pc, #396]	; (8004934 <ControllLoopAndErrorHandler+0x230>)
 80047a8:	edd3 7a00 	vldr	s15, [r3]
 80047ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047b0:	eeb0 0a67 	vmov.f32	s0, s15
 80047b4:	f7fd f90c 	bl	80019d0 <AbsVal>
 80047b8:	eef0 7a40 	vmov.f32	s15, s0
 80047bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c8:	d547      	bpl.n	800485a <ControllLoopAndErrorHandler+0x156>
 80047ca:	4b5a      	ldr	r3, [pc, #360]	; (8004934 <ControllLoopAndErrorHandler+0x230>)
 80047cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80047d0:	eeb0 0a67 	vmov.f32	s0, s15
 80047d4:	f7fd f8fc 	bl	80019d0 <AbsVal>
 80047d8:	eef0 7a40 	vmov.f32	s15, s0
 80047dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e8:	d537      	bpl.n	800485a <ControllLoopAndErrorHandler+0x156>
 80047ea:	4b52      	ldr	r3, [pc, #328]	; (8004934 <ControllLoopAndErrorHandler+0x230>)
 80047ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80047f0:	eeb0 0a67 	vmov.f32	s0, s15
 80047f4:	f7fd f8ec 	bl	80019d0 <AbsVal>
 80047f8:	eeb0 8a40 	vmov.f32	s16, s0
 80047fc:	4b4f      	ldr	r3, [pc, #316]	; (800493c <ControllLoopAndErrorHandler+0x238>)
 80047fe:	edd3 7a81 	vldr	s15, [r3, #516]	; 0x204
 8004802:	eeb0 0a67 	vmov.f32	s0, s15
 8004806:	f7fd f8e3 	bl	80019d0 <AbsVal>
 800480a:	eef0 7a40 	vmov.f32	s15, s0
 800480e:	eeb4 8a67 	vcmp.f32	s16, s15
 8004812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004816:	d120      	bne.n	800485a <ControllLoopAndErrorHandler+0x156>
		{
			PWMCHECKER = 0.0;
 8004818:	4b4b      	ldr	r3, [pc, #300]	; (8004948 <ControllLoopAndErrorHandler+0x244>)
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
			Drivemotor(PWMCHECKER);
 8004820:	4b49      	ldr	r3, [pc, #292]	; (8004948 <ControllLoopAndErrorHandler+0x244>)
 8004822:	edd3 7a00 	vldr	s15, [r3]
 8004826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800482a:	ee17 0a90 	vmov	r0, s15
 800482e:	f7ff fe6f 	bl	8004510 <Drivemotor>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8004832:	2200      	movs	r2, #0
 8004834:	2108      	movs	r1, #8
 8004836:	4845      	ldr	r0, [pc, #276]	; (800494c <ControllLoopAndErrorHandler+0x248>)
 8004838:	f002 fcd4 	bl	80071e4 <HAL_GPIO_WritePin>
			Robot.RunningFlag = 0;
 800483c:	4b3d      	ldr	r3, [pc, #244]	; (8004934 <ControllLoopAndErrorHandler+0x230>)
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			Robot.MotorIsOn = 0;
 8004844:	4b3b      	ldr	r3, [pc, #236]	; (8004934 <ControllLoopAndErrorHandler+0x230>)
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PIDAController_Init(&PidVelo);
 800484c:	4840      	ldr	r0, [pc, #256]	; (8004950 <ControllLoopAndErrorHandler+0x24c>)
 800484e:	f7fc fd99 	bl	8001384 <PIDAController_Init>
			PIDAController_Init(&PidPos);
 8004852:	4840      	ldr	r0, [pc, #256]	; (8004954 <ControllLoopAndErrorHandler+0x250>)
 8004854:	f7fc fd96 	bl	8001384 <PIDAController_Init>
	else
	{
		PWMCHECKER = 0.0;
		Drivemotor(PWMCHECKER);
	}
}
 8004858:	e067      	b.n	800492a <ControllLoopAndErrorHandler+0x226>
			PIDAPositonController_Update(&PidPos, &traject, Robot.QX , Robot.Position, Robot.QV ,traject.Vmax);
 800485a:	4b36      	ldr	r3, [pc, #216]	; (8004934 <ControllLoopAndErrorHandler+0x230>)
 800485c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004860:	4b34      	ldr	r3, [pc, #208]	; (8004934 <ControllLoopAndErrorHandler+0x230>)
 8004862:	ed93 7a00 	vldr	s14, [r3]
 8004866:	4b33      	ldr	r3, [pc, #204]	; (8004934 <ControllLoopAndErrorHandler+0x230>)
 8004868:	edd3 6a07 	vldr	s13, [r3, #28]
 800486c:	4b33      	ldr	r3, [pc, #204]	; (800493c <ControllLoopAndErrorHandler+0x238>)
 800486e:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 8004872:	eef0 1a46 	vmov.f32	s3, s12
 8004876:	eeb0 1a66 	vmov.f32	s2, s13
 800487a:	eef0 0a47 	vmov.f32	s1, s14
 800487e:	eeb0 0a67 	vmov.f32	s0, s15
 8004882:	492e      	ldr	r1, [pc, #184]	; (800493c <ControllLoopAndErrorHandler+0x238>)
 8004884:	4833      	ldr	r0, [pc, #204]	; (8004954 <ControllLoopAndErrorHandler+0x250>)
 8004886:	f7fc fdad 	bl	80013e4 <PIDAPositonController_Update>
			PIDAVelocityController_Update(&PidVelo, &traject, Robot.QV + PidPos.ControllerOut , Robot.Velocity, Robot.QV ,traject.Vmax);
 800488a:	4b2a      	ldr	r3, [pc, #168]	; (8004934 <ControllLoopAndErrorHandler+0x230>)
 800488c:	ed93 7a07 	vldr	s14, [r3, #28]
 8004890:	4b30      	ldr	r3, [pc, #192]	; (8004954 <ControllLoopAndErrorHandler+0x250>)
 8004892:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800489a:	4b26      	ldr	r3, [pc, #152]	; (8004934 <ControllLoopAndErrorHandler+0x230>)
 800489c:	ed93 7a01 	vldr	s14, [r3, #4]
 80048a0:	4b24      	ldr	r3, [pc, #144]	; (8004934 <ControllLoopAndErrorHandler+0x230>)
 80048a2:	edd3 6a07 	vldr	s13, [r3, #28]
 80048a6:	4b25      	ldr	r3, [pc, #148]	; (800493c <ControllLoopAndErrorHandler+0x238>)
 80048a8:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 80048ac:	eef0 1a46 	vmov.f32	s3, s12
 80048b0:	eeb0 1a66 	vmov.f32	s2, s13
 80048b4:	eef0 0a47 	vmov.f32	s1, s14
 80048b8:	eeb0 0a67 	vmov.f32	s0, s15
 80048bc:	491f      	ldr	r1, [pc, #124]	; (800493c <ControllLoopAndErrorHandler+0x238>)
 80048be:	4824      	ldr	r0, [pc, #144]	; (8004950 <ControllLoopAndErrorHandler+0x24c>)
 80048c0:	f7fc fed4 	bl	800166c <PIDAVelocityController_Update>
			invTFOutput = InverseTFofMotor(traject.QV,traject.QVP);
 80048c4:	4b1d      	ldr	r3, [pc, #116]	; (800493c <ControllLoopAndErrorHandler+0x238>)
 80048c6:	edd3 7a7f 	vldr	s15, [r3, #508]	; 0x1fc
 80048ca:	4b1c      	ldr	r3, [pc, #112]	; (800493c <ControllLoopAndErrorHandler+0x238>)
 80048cc:	ed93 7a80 	vldr	s14, [r3, #512]	; 0x200
 80048d0:	eef0 0a47 	vmov.f32	s1, s14
 80048d4:	eeb0 0a67 	vmov.f32	s0, s15
 80048d8:	f7ff fe76 	bl	80045c8 <InverseTFofMotor>
 80048dc:	eef0 7a40 	vmov.f32	s15, s0
 80048e0:	4b1d      	ldr	r3, [pc, #116]	; (8004958 <ControllLoopAndErrorHandler+0x254>)
 80048e2:	edc3 7a00 	vstr	s15, [r3]
			PWMCHECKER = PidVelo.ControllerOut + invTFOutput;
 80048e6:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <ControllLoopAndErrorHandler+0x24c>)
 80048e8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80048ec:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <ControllLoopAndErrorHandler+0x254>)
 80048ee:	edd3 7a00 	vldr	s15, [r3]
 80048f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048f6:	4b14      	ldr	r3, [pc, #80]	; (8004948 <ControllLoopAndErrorHandler+0x244>)
 80048f8:	edc3 7a00 	vstr	s15, [r3]
			Drivemotor(PWMCHECKER);
 80048fc:	4b12      	ldr	r3, [pc, #72]	; (8004948 <ControllLoopAndErrorHandler+0x244>)
 80048fe:	edd3 7a00 	vldr	s15, [r3]
 8004902:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004906:	ee17 0a90 	vmov	r0, s15
 800490a:	f7ff fe01 	bl	8004510 <Drivemotor>
}
 800490e:	e00c      	b.n	800492a <ControllLoopAndErrorHandler+0x226>
		PWMCHECKER = 0.0;
 8004910:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <ControllLoopAndErrorHandler+0x244>)
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
		Drivemotor(PWMCHECKER);
 8004918:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <ControllLoopAndErrorHandler+0x244>)
 800491a:	edd3 7a00 	vldr	s15, [r3]
 800491e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004922:	ee17 0a90 	vmov	r0, s15
 8004926:	f7ff fdf3 	bl	8004510 <Drivemotor>
}
 800492a:	bf00      	nop
 800492c:	46bd      	mov	sp, r7
 800492e:	ecbd 8b02 	vpop	{d8}
 8004932:	bdb0      	pop	{r4, r5, r7, pc}
 8004934:	200006dc 	.word	0x200006dc
 8004938:	20000ab0 	.word	0x20000ab0
 800493c:	2000086c 	.word	0x2000086c
 8004940:	20000ab8 	.word	0x20000ab8
 8004944:	20000ac0 	.word	0x20000ac0
 8004948:	20000868 	.word	0x20000868
 800494c:	40020400 	.word	0x40020400
 8004950:	20000808 	.word	0x20000808
 8004954:	20000838 	.word	0x20000838
 8004958:	20000804 	.word	0x20000804

0800495c <Ringbuf_Init>:

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 8004960:	2214      	movs	r2, #20
 8004962:	2100      	movs	r1, #0
 8004964:	480e      	ldr	r0, [pc, #56]	; (80049a0 <Ringbuf_Init+0x44>)
 8004966:	f007 ff29 	bl	800c7bc <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 800496a:	2214      	movs	r2, #20
 800496c:	2100      	movs	r1, #0
 800496e:	480d      	ldr	r0, [pc, #52]	; (80049a4 <Ringbuf_Init+0x48>)
 8004970:	f007 ff24 	bl	800c7bc <memset>

	oldPos = 0;
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <Ringbuf_Init+0x4c>)
 8004976:	2200      	movs	r2, #0
 8004978:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 800497a:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <Ringbuf_Init+0x50>)
 800497c:	2200      	movs	r2, #0
 800497e:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 8004980:	2214      	movs	r2, #20
 8004982:	4907      	ldr	r1, [pc, #28]	; (80049a0 <Ringbuf_Init+0x44>)
 8004984:	480a      	ldr	r0, [pc, #40]	; (80049b0 <Ringbuf_Init+0x54>)
 8004986:	f006 fabf 	bl	800af08 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 800498a:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <Ringbuf_Init+0x58>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <Ringbuf_Init+0x58>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0208 	bic.w	r2, r2, #8
 8004998:	601a      	str	r2, [r3, #0]
}
 800499a:	bf00      	nop
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000714 	.word	0x20000714
 80049a4:	20000728 	.word	0x20000728
 80049a8:	20000746 	.word	0x20000746
 80049ac:	20000748 	.word	0x20000748
 80049b0:	200005d8 	.word	0x200005d8
 80049b4:	2000061c 	.word	0x2000061c

080049b8 <checkSum>:
	oldPos = 0;
	newPos = 0;
}

void checkSum (uint8_t *buffertoCheckSum, uint16_t Size)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	807b      	strh	r3, [r7, #2]
	uint8_t sum = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	73fb      	strb	r3, [r7, #15]
	modeByte = 0;
 80049c8:	4b52      	ldr	r3, [pc, #328]	; (8004b14 <checkSum+0x15c>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	701a      	strb	r2, [r3, #0]
	switch(Size){
 80049ce:	887b      	ldrh	r3, [r7, #2]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d84f      	bhi.n	8004a76 <checkSum+0xbe>
 80049d6:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <checkSum+0x24>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	08004acd 	.word	0x08004acd
 80049e0:	080049ed 	.word	0x080049ed
 80049e4:	08004acd 	.word	0x08004acd
 80049e8:	08004a13 	.word	0x08004a13
	case 1:
	case 3:
		break;
	case 2:
		if(!(checkAck(buffertoCheckSum, Size))) modeByte = sum = buffertoCheckSum[oldPos];
 80049ec:	887b      	ldrh	r3, [r7, #2]
 80049ee:	4619      	mov	r1, r3
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f897 	bl	8004b24 <checkAck>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d169      	bne.n	8004ad0 <checkSum+0x118>
 80049fc:	4b46      	ldr	r3, [pc, #280]	; (8004b18 <checkSum+0x160>)
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4413      	add	r3, r2
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	73fb      	strb	r3, [r7, #15]
 8004a0a:	4a42      	ldr	r2, [pc, #264]	; (8004b14 <checkSum+0x15c>)
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
 8004a0e:	7013      	strb	r3, [r2, #0]
		break;
 8004a10:	e05e      	b.n	8004ad0 <checkSum+0x118>
	case 4:
		if(checkAck(buffertoCheckSum, Size)) modeByte = sum = buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8004a12:	887b      	ldrh	r3, [r7, #2]
 8004a14:	4619      	mov	r1, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f884 	bl	8004b24 <checkAck>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <checkSum+0x80>
 8004a22:	4b3d      	ldr	r3, [pc, #244]	; (8004b18 <checkSum+0x160>)
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	3302      	adds	r3, #2
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	73fb      	strb	r3, [r7, #15]
 8004a30:	4a38      	ldr	r2, [pc, #224]	; (8004b14 <checkSum+0x15c>)
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	7013      	strb	r3, [r2, #0]
		else{
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
			modeByte = buffertoCheckSum[oldPos];
		}
		break;
 8004a36:	e04c      	b.n	8004ad2 <checkSum+0x11a>
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8004a38:	4b37      	ldr	r3, [pc, #220]	; (8004b18 <checkSum+0x160>)
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4413      	add	r3, r2
 8004a42:	781a      	ldrb	r2, [r3, #0]
 8004a44:	4b34      	ldr	r3, [pc, #208]	; (8004b18 <checkSum+0x160>)
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	440b      	add	r3, r1
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	4413      	add	r3, r2
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	4b30      	ldr	r3, [pc, #192]	; (8004b18 <checkSum+0x160>)
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	3302      	adds	r3, #2
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	440b      	add	r3, r1
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	4413      	add	r3, r2
 8004a62:	73fb      	strb	r3, [r7, #15]
			modeByte = buffertoCheckSum[oldPos];
 8004a64:	4b2c      	ldr	r3, [pc, #176]	; (8004b18 <checkSum+0x160>)
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	781a      	ldrb	r2, [r3, #0]
 8004a70:	4b28      	ldr	r3, [pc, #160]	; (8004b14 <checkSum+0x15c>)
 8004a72:	701a      	strb	r2, [r3, #0]
		break;
 8004a74:	e02d      	b.n	8004ad2 <checkSum+0x11a>
	default:
		modeByte = buffertoCheckSum[oldPos];
 8004a76:	4b28      	ldr	r3, [pc, #160]	; (8004b18 <checkSum+0x160>)
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4413      	add	r3, r2
 8004a80:	781a      	ldrb	r2, [r3, #0]
 8004a82:	4b24      	ldr	r3, [pc, #144]	; (8004b14 <checkSum+0x15c>)
 8004a84:	701a      	strb	r2, [r3, #0]
		for (int index = 0; index < Size-1; ++index)
 8004a86:	2300      	movs	r3, #0
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	e019      	b.n	8004ac0 <checkSum+0x108>
		{
			sum = sum + buffertoCheckSum[oldPos+index % MainBuf_SIZE];
 8004a8c:	4b22      	ldr	r3, [pc, #136]	; (8004b18 <checkSum+0x160>)
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	4b21      	ldr	r3, [pc, #132]	; (8004b1c <checkSum+0x164>)
 8004a96:	fb83 2301 	smull	r2, r3, r3, r1
 8004a9a:	10da      	asrs	r2, r3, #3
 8004a9c:	17cb      	asrs	r3, r1, #31
 8004a9e:	1ad2      	subs	r2, r2, r3
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	1aca      	subs	r2, r1, r3
 8004aaa:	1883      	adds	r3, r0, r2
 8004aac:	461a      	mov	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	781a      	ldrb	r2, [r3, #0]
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	73fb      	strb	r3, [r7, #15]
		for (int index = 0; index < Size-1; ++index)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	3301      	adds	r3, #1
 8004abe:	60bb      	str	r3, [r7, #8]
 8004ac0:	887b      	ldrh	r3, [r7, #2]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	dbe0      	blt.n	8004a8c <checkSum+0xd4>
 8004aca:	e002      	b.n	8004ad2 <checkSum+0x11a>
		break;
 8004acc:	bf00      	nop
 8004ace:	e000      	b.n	8004ad2 <checkSum+0x11a>
		break;
 8004ad0:	bf00      	nop
		}
	}

	if((uint8_t)buffertoCheckSum[oldPos+(Size-1) % MainBuf_SIZE] == (uint8_t)(~sum)) UARTstateManagement(MainBuf);
 8004ad2:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <checkSum+0x160>)
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	887b      	ldrh	r3, [r7, #2]
 8004ada:	1e59      	subs	r1, r3, #1
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <checkSum+0x164>)
 8004ade:	fb83 2301 	smull	r2, r3, r3, r1
 8004ae2:	10da      	asrs	r2, r3, #3
 8004ae4:	17cb      	asrs	r3, r1, #31
 8004ae6:	1ad2      	subs	r2, r2, r3
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	1aca      	subs	r2, r1, r3
 8004af2:	1883      	adds	r3, r0, r2
 8004af4:	461a      	mov	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4413      	add	r3, r2
 8004afa:	781a      	ldrb	r2, [r3, #0]
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	43db      	mvns	r3, r3
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d102      	bne.n	8004b0c <checkSum+0x154>
 8004b06:	4806      	ldr	r0, [pc, #24]	; (8004b20 <checkSum+0x168>)
 8004b08:	f000 f89a 	bl	8004c40 <UARTstateManagement>
}
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20000771 	.word	0x20000771
 8004b18:	20000746 	.word	0x20000746
 8004b1c:	66666667 	.word	0x66666667
 8004b20:	20000728 	.word	0x20000728

08004b24 <checkAck>:

uint8_t checkAck (uint8_t *buffertoCheckAck, uint16_t Size)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	807b      	strh	r3, [r7, #2]
	if((buffertoCheckAck[oldPos] == 0b01011000) && (buffertoCheckAck[oldPos+1 % MainBuf_SIZE] == 0b01110101)) return 1;
 8004b30:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <checkAck+0x40>)
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4413      	add	r3, r2
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	2b58      	cmp	r3, #88	; 0x58
 8004b3e:	d109      	bne.n	8004b54 <checkAck+0x30>
 8004b40:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <checkAck+0x40>)
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	4413      	add	r3, r2
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b75      	cmp	r3, #117	; 0x75
 8004b4e:	d101      	bne.n	8004b54 <checkAck+0x30>
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <checkAck+0x32>
	else return 0;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20000746 	.word	0x20000746

08004b68 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	807b      	strh	r3, [r7, #2]
        if (huart->Instance == USART2)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a28      	ldr	r2, [pc, #160]	; (8004c1c <HAL_UARTEx_RxEventCallback+0xb4>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d14a      	bne.n	8004c14 <HAL_UARTEx_RxEventCallback+0xac>
        {
                oldPos = newPos;
 8004b7e:	4b28      	ldr	r3, [pc, #160]	; (8004c20 <HAL_UARTEx_RxEventCallback+0xb8>)
 8004b80:	881a      	ldrh	r2, [r3, #0]
 8004b82:	4b28      	ldr	r3, [pc, #160]	; (8004c24 <HAL_UARTEx_RxEventCallback+0xbc>)
 8004b84:	801a      	strh	r2, [r3, #0]
                dataSize = Size;
 8004b86:	4a28      	ldr	r2, [pc, #160]	; (8004c28 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004b88:	887b      	ldrh	r3, [r7, #2]
 8004b8a:	8013      	strh	r3, [r2, #0]
                if (oldPos+dataSize > MainBuf_SIZE)
 8004b8c:	4b25      	ldr	r3, [pc, #148]	; (8004c24 <HAL_UARTEx_RxEventCallback+0xbc>)
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	4b25      	ldr	r3, [pc, #148]	; (8004c28 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	4413      	add	r3, r2
 8004b98:	2b14      	cmp	r3, #20
 8004b9a:	dd16      	ble.n	8004bca <HAL_UARTEx_RxEventCallback+0x62>
                {
                        oldPos = 0;
 8004b9c:	4b21      	ldr	r3, [pc, #132]	; (8004c24 <HAL_UARTEx_RxEventCallback+0xbc>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	801a      	strh	r2, [r3, #0]
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8004ba2:	4b20      	ldr	r3, [pc, #128]	; (8004c24 <HAL_UARTEx_RxEventCallback+0xbc>)
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	4b20      	ldr	r3, [pc, #128]	; (8004c2c <HAL_UARTEx_RxEventCallback+0xc4>)
 8004baa:	4413      	add	r3, r2
 8004bac:	4a1e      	ldr	r2, [pc, #120]	; (8004c28 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004bae:	8812      	ldrh	r2, [r2, #0]
 8004bb0:	491f      	ldr	r1, [pc, #124]	; (8004c30 <HAL_UARTEx_RxEventCallback+0xc8>)
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f007 fdf4 	bl	800c7a0 <memcpy>
                        newPos = dataSize+oldPos;
 8004bb8:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004bba:	881a      	ldrh	r2, [r3, #0]
 8004bbc:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <HAL_UARTEx_RxEventCallback+0xbc>)
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	4b16      	ldr	r3, [pc, #88]	; (8004c20 <HAL_UARTEx_RxEventCallback+0xb8>)
 8004bc6:	801a      	strh	r2, [r3, #0]
 8004bc8:	e012      	b.n	8004bf0 <HAL_UARTEx_RxEventCallback+0x88>
                }
                else
                {
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8004bca:	4b16      	ldr	r3, [pc, #88]	; (8004c24 <HAL_UARTEx_RxEventCallback+0xbc>)
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	4b16      	ldr	r3, [pc, #88]	; (8004c2c <HAL_UARTEx_RxEventCallback+0xc4>)
 8004bd2:	4413      	add	r3, r2
 8004bd4:	4a14      	ldr	r2, [pc, #80]	; (8004c28 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004bd6:	8812      	ldrh	r2, [r2, #0]
 8004bd8:	4915      	ldr	r1, [pc, #84]	; (8004c30 <HAL_UARTEx_RxEventCallback+0xc8>)
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f007 fde0 	bl	800c7a0 <memcpy>
                        newPos = dataSize+oldPos;
 8004be0:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004be2:	881a      	ldrh	r2, [r3, #0]
 8004be4:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <HAL_UARTEx_RxEventCallback+0xbc>)
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	4413      	add	r3, r2
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <HAL_UARTEx_RxEventCallback+0xb8>)
 8004bee:	801a      	strh	r2, [r3, #0]
                }

                checkSum(MainBuf, Size);
 8004bf0:	887b      	ldrh	r3, [r7, #2]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	480d      	ldr	r0, [pc, #52]	; (8004c2c <HAL_UARTEx_RxEventCallback+0xc4>)
 8004bf6:	f7ff fedf 	bl	80049b8 <checkSum>
                HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 8004bfa:	2214      	movs	r2, #20
 8004bfc:	490c      	ldr	r1, [pc, #48]	; (8004c30 <HAL_UARTEx_RxEventCallback+0xc8>)
 8004bfe:	480d      	ldr	r0, [pc, #52]	; (8004c34 <HAL_UARTEx_RxEventCallback+0xcc>)
 8004c00:	f006 f982 	bl	800af08 <HAL_UARTEx_ReceiveToIdle_DMA>
                __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8004c04:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <HAL_UARTEx_RxEventCallback+0xd0>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <HAL_UARTEx_RxEventCallback+0xd0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0208 	bic.w	r2, r2, #8
 8004c12:	601a      	str	r2, [r3, #0]
        }
}
 8004c14:	bf00      	nop
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40004400 	.word	0x40004400
 8004c20:	20000748 	.word	0x20000748
 8004c24:	20000746 	.word	0x20000746
 8004c28:	2000074a 	.word	0x2000074a
 8004c2c:	20000728 	.word	0x20000728
 8004c30:	20000714 	.word	0x20000714
 8004c34:	200005d8 	.word	0x200005d8
 8004c38:	2000061c 	.word	0x2000061c
 8004c3c:	00000000 	.word	0x00000000

08004c40 <UARTstateManagement>:

void UARTstateManagement(uint8_t *Mainbuffer)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	switch (UARTState)
 8004c48:	4bad      	ldr	r3, [pc, #692]	; (8004f00 <UARTstateManagement+0x2c0>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d01d      	beq.n	8004c8c <UARTstateManagement+0x4c>
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	f300 835a 	bgt.w	800530a <UARTstateManagement+0x6ca>
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 8354 	beq.w	8005304 <UARTstateManagement+0x6c4>
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d000      	beq.n	8004c62 <UARTstateManagement+0x22>
					homingFlag = 1;
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
					break;
				}
	}
}
 8004c60:	e353      	b.n	800530a <UARTstateManagement+0x6ca>
			if(Mainbuffer[oldPos] == 0b10010010)
 8004c62:	4ba8      	ldr	r3, [pc, #672]	; (8004f04 <UARTstateManagement+0x2c4>)
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b92      	cmp	r3, #146	; 0x92
 8004c70:	f040 834a 	bne.w	8005308 <UARTstateManagement+0x6c8>
				modeNo = 2;
 8004c74:	4ba4      	ldr	r3, [pc, #656]	; (8004f08 <UARTstateManagement+0x2c8>)
 8004c76:	2202      	movs	r2, #2
 8004c78:	701a      	strb	r2, [r3, #0]
				UARTState = MCUConnect;
 8004c7a:	4ba1      	ldr	r3, [pc, #644]	; (8004f00 <UARTstateManagement+0x2c0>)
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004c80:	2202      	movs	r2, #2
 8004c82:	49a2      	ldr	r1, [pc, #648]	; (8004f0c <UARTstateManagement+0x2cc>)
 8004c84:	48a2      	ldr	r0, [pc, #648]	; (8004f10 <UARTstateManagement+0x2d0>)
 8004c86:	f006 f8c1 	bl	800ae0c <HAL_UART_Transmit_DMA>
			break;
 8004c8a:	e33d      	b.n	8005308 <UARTstateManagement+0x6c8>
			stateSwitch = modeByte;
 8004c8c:	4ba1      	ldr	r3, [pc, #644]	; (8004f14 <UARTstateManagement+0x2d4>)
 8004c8e:	781a      	ldrb	r2, [r3, #0]
 8004c90:	4ba1      	ldr	r3, [pc, #644]	; (8004f18 <UARTstateManagement+0x2d8>)
 8004c92:	701a      	strb	r2, [r3, #0]
			switch (stateSwitch)
 8004c94:	4ba0      	ldr	r3, [pc, #640]	; (8004f18 <UARTstateManagement+0x2d8>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	3b91      	subs	r3, #145	; 0x91
 8004c9a:	2b0d      	cmp	r3, #13
 8004c9c:	f200 8335 	bhi.w	800530a <UARTstateManagement+0x6ca>
 8004ca0:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <UARTstateManagement+0x68>)
 8004ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca6:	bf00      	nop
 8004ca8:	08004ce1 	.word	0x08004ce1
 8004cac:	08004cf3 	.word	0x08004cf3
 8004cb0:	08004d0b 	.word	0x08004d0b
 8004cb4:	08004d23 	.word	0x08004d23
 8004cb8:	08004d83 	.word	0x08004d83
 8004cbc:	08004df1 	.word	0x08004df1
 8004cc0:	08004e29 	.word	0x08004e29
 8004cc4:	08004f3d 	.word	0x08004f3d
 8004cc8:	08004f81 	.word	0x08004f81
 8004ccc:	08005027 	.word	0x08005027
 8004cd0:	0800519d 	.word	0x0800519d
 8004cd4:	08005293 	.word	0x08005293
 8004cd8:	080052c3 	.word	0x080052c3
 8004cdc:	080052db 	.word	0x080052db
					modeNo = 1;
 8004ce0:	4b89      	ldr	r3, [pc, #548]	; (8004f08 <UARTstateManagement+0x2c8>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	4988      	ldr	r1, [pc, #544]	; (8004f0c <UARTstateManagement+0x2cc>)
 8004cea:	4889      	ldr	r0, [pc, #548]	; (8004f10 <UARTstateManagement+0x2d0>)
 8004cec:	f006 f88e 	bl	800ae0c <HAL_UART_Transmit_DMA>
					break;
 8004cf0:	e30b      	b.n	800530a <UARTstateManagement+0x6ca>
					modeNo = 2;
 8004cf2:	4b85      	ldr	r3, [pc, #532]	; (8004f08 <UARTstateManagement+0x2c8>)
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	701a      	strb	r2, [r3, #0]
					UARTState = MCUConnect;
 8004cf8:	4b81      	ldr	r3, [pc, #516]	; (8004f00 <UARTstateManagement+0x2c0>)
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004cfe:	2202      	movs	r2, #2
 8004d00:	4982      	ldr	r1, [pc, #520]	; (8004f0c <UARTstateManagement+0x2cc>)
 8004d02:	4883      	ldr	r0, [pc, #524]	; (8004f10 <UARTstateManagement+0x2d0>)
 8004d04:	f006 f882 	bl	800ae0c <HAL_UART_Transmit_DMA>
					break;
 8004d08:	e2ff      	b.n	800530a <UARTstateManagement+0x6ca>
					modeNo = 3;
 8004d0a:	4b7f      	ldr	r3, [pc, #508]	; (8004f08 <UARTstateManagement+0x2c8>)
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	701a      	strb	r2, [r3, #0]
					UARTState = MCUDisconnect;
 8004d10:	4b7b      	ldr	r3, [pc, #492]	; (8004f00 <UARTstateManagement+0x2c0>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004d16:	2202      	movs	r2, #2
 8004d18:	497c      	ldr	r1, [pc, #496]	; (8004f0c <UARTstateManagement+0x2cc>)
 8004d1a:	487d      	ldr	r0, [pc, #500]	; (8004f10 <UARTstateManagement+0x2d0>)
 8004d1c:	f006 f876 	bl	800ae0c <HAL_UART_Transmit_DMA>
					break;
 8004d20:	e2f3      	b.n	800530a <UARTstateManagement+0x6ca>
					modeNo = 4;
 8004d22:	4b79      	ldr	r3, [pc, #484]	; (8004f08 <UARTstateManagement+0x2c8>)
 8004d24:	2204      	movs	r2, #4
 8004d26:	701a      	strb	r2, [r3, #0]
					uartVelo = (float)((Mainbuffer[oldPos + 2 % MainBuf_SIZE])/255.0)*10.0;
 8004d28:	4b76      	ldr	r3, [pc, #472]	; (8004f04 <UARTstateManagement+0x2c4>)
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	3302      	adds	r3, #2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	4413      	add	r3, r2
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fb fba1 	bl	800047c <__aeabi_i2d>
 8004d3a:	a36d      	add	r3, pc, #436	; (adr r3, 8004ef0 <UARTstateManagement+0x2b0>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f7fb fd30 	bl	80007a4 <__aeabi_ddiv>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4610      	mov	r0, r2
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	f7fb fe32 	bl	80009b4 <__aeabi_d2f>
 8004d50:	ee07 0a10 	vmov	s14, r0
 8004d54:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8004d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5c:	4b6f      	ldr	r3, [pc, #444]	; (8004f1c <UARTstateManagement+0x2dc>)
 8004d5e:	edc3 7a00 	vstr	s15, [r3]
					Robot.QVMax = uartVelo*6.0;
 8004d62:	4b6e      	ldr	r3, [pc, #440]	; (8004f1c <UARTstateManagement+0x2dc>)
 8004d64:	edd3 7a00 	vldr	s15, [r3]
 8004d68:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d70:	4b6b      	ldr	r3, [pc, #428]	; (8004f20 <UARTstateManagement+0x2e0>)
 8004d72:	edc3 7a08 	vstr	s15, [r3, #32]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004d76:	2202      	movs	r2, #2
 8004d78:	4964      	ldr	r1, [pc, #400]	; (8004f0c <UARTstateManagement+0x2cc>)
 8004d7a:	4865      	ldr	r0, [pc, #404]	; (8004f10 <UARTstateManagement+0x2d0>)
 8004d7c:	f006 f846 	bl	800ae0c <HAL_UART_Transmit_DMA>
					break;
 8004d80:	e2c3      	b.n	800530a <UARTstateManagement+0x6ca>
					modeNo = 5;
 8004d82:	4b61      	ldr	r3, [pc, #388]	; (8004f08 <UARTstateManagement+0x2c8>)
 8004d84:	2205      	movs	r2, #5
 8004d86:	701a      	strb	r2, [r3, #0]
					goalFlag = 1;
 8004d88:	4b66      	ldr	r3, [pc, #408]	; (8004f24 <UARTstateManagement+0x2e4>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	701a      	strb	r2, [r3, #0]
					goalAmount = 1;
 8004d8e:	4b66      	ldr	r3, [pc, #408]	; (8004f28 <UARTstateManagement+0x2e8>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	701a      	strb	r2, [r3, #0]
					uartPos = (float)((((Mainbuffer[oldPos + 1 % MainBuf_SIZE] << 8) | Mainbuffer[oldPos + 2 % MainBuf_SIZE])*360.0)/62800);
 8004d94:	4b5b      	ldr	r3, [pc, #364]	; (8004f04 <UARTstateManagement+0x2c4>)
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	4a58      	ldr	r2, [pc, #352]	; (8004f04 <UARTstateManagement+0x2c4>)
 8004da4:	8812      	ldrh	r2, [r2, #0]
 8004da6:	3202      	adds	r2, #2
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	440a      	add	r2, r1
 8004dac:	7812      	ldrb	r2, [r2, #0]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fb fb63 	bl	800047c <__aeabi_i2d>
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	4b5c      	ldr	r3, [pc, #368]	; (8004f2c <UARTstateManagement+0x2ec>)
 8004dbc:	f7fb fbc8 	bl	8000550 <__aeabi_dmul>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	a34b      	add	r3, pc, #300	; (adr r3, 8004ef8 <UARTstateManagement+0x2b8>)
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	f7fb fce9 	bl	80007a4 <__aeabi_ddiv>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	f7fb fdeb 	bl	80009b4 <__aeabi_d2f>
 8004dde:	4603      	mov	r3, r0
 8004de0:	4a53      	ldr	r2, [pc, #332]	; (8004f30 <UARTstateManagement+0x2f0>)
 8004de2:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004de4:	2202      	movs	r2, #2
 8004de6:	4949      	ldr	r1, [pc, #292]	; (8004f0c <UARTstateManagement+0x2cc>)
 8004de8:	4849      	ldr	r0, [pc, #292]	; (8004f10 <UARTstateManagement+0x2d0>)
 8004dea:	f006 f80f 	bl	800ae0c <HAL_UART_Transmit_DMA>
					break;
 8004dee:	e28c      	b.n	800530a <UARTstateManagement+0x6ca>
					modeNo = 6;
 8004df0:	4b45      	ldr	r3, [pc, #276]	; (8004f08 <UARTstateManagement+0x2c8>)
 8004df2:	2206      	movs	r2, #6
 8004df4:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8004df6:	4b4b      	ldr	r3, [pc, #300]	; (8004f24 <UARTstateManagement+0x2e4>)
 8004df8:	2202      	movs	r2, #2
 8004dfa:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8004dfc:	220f      	movs	r2, #15
 8004dfe:	2100      	movs	r1, #0
 8004e00:	484c      	ldr	r0, [pc, #304]	; (8004f34 <UARTstateManagement+0x2f4>)
 8004e02:	f007 fcdb 	bl	800c7bc <memset>
					goalAmount = 1;
 8004e06:	4b48      	ldr	r3, [pc, #288]	; (8004f28 <UARTstateManagement+0x2e8>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	701a      	strb	r2, [r3, #0]
					uartGoal[0] = Mainbuffer[oldPos + 2 % MainBuf_SIZE];
 8004e0c:	4b3d      	ldr	r3, [pc, #244]	; (8004f04 <UARTstateManagement+0x2c4>)
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	3302      	adds	r3, #2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	4413      	add	r3, r2
 8004e16:	781a      	ldrb	r2, [r3, #0]
 8004e18:	4b46      	ldr	r3, [pc, #280]	; (8004f34 <UARTstateManagement+0x2f4>)
 8004e1a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	493b      	ldr	r1, [pc, #236]	; (8004f0c <UARTstateManagement+0x2cc>)
 8004e20:	483b      	ldr	r0, [pc, #236]	; (8004f10 <UARTstateManagement+0x2d0>)
 8004e22:	f005 fff3 	bl	800ae0c <HAL_UART_Transmit_DMA>
					break;
 8004e26:	e270      	b.n	800530a <UARTstateManagement+0x6ca>
					modeNo = 7;
 8004e28:	4b37      	ldr	r3, [pc, #220]	; (8004f08 <UARTstateManagement+0x2c8>)
 8004e2a:	2207      	movs	r2, #7
 8004e2c:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8004e2e:	4b3d      	ldr	r3, [pc, #244]	; (8004f24 <UARTstateManagement+0x2e4>)
 8004e30:	2202      	movs	r2, #2
 8004e32:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8004e34:	220f      	movs	r2, #15
 8004e36:	2100      	movs	r1, #0
 8004e38:	483e      	ldr	r0, [pc, #248]	; (8004f34 <UARTstateManagement+0x2f4>)
 8004e3a:	f007 fcbf 	bl	800c7bc <memset>
					goalAmount = Mainbuffer[oldPos + 1 % MainBuf_SIZE];
 8004e3e:	4b31      	ldr	r3, [pc, #196]	; (8004f04 <UARTstateManagement+0x2c4>)
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	3301      	adds	r3, #1
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	4413      	add	r3, r2
 8004e48:	781a      	ldrb	r2, [r3, #0]
 8004e4a:	4b37      	ldr	r3, [pc, #220]	; (8004f28 <UARTstateManagement+0x2e8>)
 8004e4c:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	e03a      	b.n	8004eca <UARTstateManagement+0x28a>
						uartGoal[0+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] & 15; // low 8 bit (last 4 bit)
 8004e54:	4b2b      	ldr	r3, [pc, #172]	; (8004f04 <UARTstateManagement+0x2c4>)
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1c99      	adds	r1, r3, #2
 8004e5e:	4b36      	ldr	r3, [pc, #216]	; (8004f38 <UARTstateManagement+0x2f8>)
 8004e60:	fb83 2301 	smull	r2, r3, r3, r1
 8004e64:	10da      	asrs	r2, r3, #3
 8004e66:	17cb      	asrs	r3, r1, #31
 8004e68:	1ad2      	subs	r2, r2, r3
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	1aca      	subs	r2, r1, r3
 8004e74:	1883      	adds	r3, r0, r2
 8004e76:	461a      	mov	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	781a      	ldrb	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	f002 020f 	and.w	r2, r2, #15
 8004e86:	b2d1      	uxtb	r1, r2
 8004e88:	4a2a      	ldr	r2, [pc, #168]	; (8004f34 <UARTstateManagement+0x2f4>)
 8004e8a:	54d1      	strb	r1, [r2, r3]
						uartGoal[1+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] >> 4; // high 8 bit (first 4 bit)
 8004e8c:	4b1d      	ldr	r3, [pc, #116]	; (8004f04 <UARTstateManagement+0x2c4>)
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	1c99      	adds	r1, r3, #2
 8004e96:	4b28      	ldr	r3, [pc, #160]	; (8004f38 <UARTstateManagement+0x2f8>)
 8004e98:	fb83 2301 	smull	r2, r3, r3, r1
 8004e9c:	10da      	asrs	r2, r3, #3
 8004e9e:	17cb      	asrs	r3, r1, #31
 8004ea0:	1ad2      	subs	r2, r2, r3
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	1aca      	subs	r2, r1, r3
 8004eac:	1883      	adds	r3, r0, r2
 8004eae:	461a      	mov	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	781a      	ldrb	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	3301      	adds	r3, #1
 8004ebc:	0912      	lsrs	r2, r2, #4
 8004ebe:	b2d1      	uxtb	r1, r2
 8004ec0:	4a1c      	ldr	r2, [pc, #112]	; (8004f34 <UARTstateManagement+0x2f4>)
 8004ec2:	54d1      	strb	r1, [r2, r3]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	4b17      	ldr	r3, [pc, #92]	; (8004f28 <UARTstateManagement+0x2e8>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	0fda      	lsrs	r2, r3, #31
 8004ed2:	4413      	add	r3, r2
 8004ed4:	105b      	asrs	r3, r3, #1
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4293      	cmp	r3, r2
 8004edc:	dbba      	blt.n	8004e54 <UARTstateManagement+0x214>
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004ede:	2202      	movs	r2, #2
 8004ee0:	490a      	ldr	r1, [pc, #40]	; (8004f0c <UARTstateManagement+0x2cc>)
 8004ee2:	480b      	ldr	r0, [pc, #44]	; (8004f10 <UARTstateManagement+0x2d0>)
 8004ee4:	f005 ff92 	bl	800ae0c <HAL_UART_Transmit_DMA>
					break;
 8004ee8:	e20f      	b.n	800530a <UARTstateManagement+0x6ca>
 8004eea:	bf00      	nop
 8004eec:	f3af 8000 	nop.w
 8004ef0:	00000000 	.word	0x00000000
 8004ef4:	406fe000 	.word	0x406fe000
 8004ef8:	00000000 	.word	0x00000000
 8004efc:	40eeaa00 	.word	0x40eeaa00
 8004f00:	20000710 	.word	0x20000710
 8004f04:	20000746 	.word	0x20000746
 8004f08:	20000770 	.word	0x20000770
 8004f0c:	2000002c 	.word	0x2000002c
 8004f10:	200005d8 	.word	0x200005d8
 8004f14:	20000771 	.word	0x20000771
 8004f18:	20000744 	.word	0x20000744
 8004f1c:	20000750 	.word	0x20000750
 8004f20:	200006dc 	.word	0x200006dc
 8004f24:	20000769 	.word	0x20000769
 8004f28:	20000767 	.word	0x20000767
 8004f2c:	40768000 	.word	0x40768000
 8004f30:	20000754 	.word	0x20000754
 8004f34:	20000758 	.word	0x20000758
 8004f38:	66666667 	.word	0x66666667
					modeNo = 8;
 8004f3c:	4b8a      	ldr	r3, [pc, #552]	; (8005168 <UARTstateManagement+0x528>)
 8004f3e:	2208      	movs	r2, #8
 8004f40:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 0){
 8004f42:	4b8a      	ldr	r3, [pc, #552]	; (800516c <UARTstateManagement+0x52c>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d114      	bne.n	8004f74 <UARTstateManagement+0x334>
					goingToGoalFlag = 0;
 8004f4a:	4b89      	ldr	r3, [pc, #548]	; (8005170 <UARTstateManagement+0x530>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	701a      	strb	r2, [r3, #0]
					Robot.MotorIsOn = 1;
 8004f50:	4b88      	ldr	r3, [pc, #544]	; (8005174 <UARTstateManagement+0x534>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					Robot.flagStartTime = 1;
 8004f58:	4b86      	ldr	r3, [pc, #536]	; (8005174 <UARTstateManagement+0x534>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					Robot.RunningFlag = 1;
 8004f60:	4b84      	ldr	r3, [pc, #528]	; (8005174 <UARTstateManagement+0x534>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					doingTaskFlag = 1;
 8004f68:	4b80      	ldr	r3, [pc, #512]	; (800516c <UARTstateManagement+0x52c>)
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	701a      	strb	r2, [r3, #0]
					goalIDX = 0;
 8004f6e:	4b82      	ldr	r3, [pc, #520]	; (8005178 <UARTstateManagement+0x538>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004f74:	2202      	movs	r2, #2
 8004f76:	4981      	ldr	r1, [pc, #516]	; (800517c <UARTstateManagement+0x53c>)
 8004f78:	4881      	ldr	r0, [pc, #516]	; (8005180 <UARTstateManagement+0x540>)
 8004f7a:	f005 ff47 	bl	800ae0c <HAL_UART_Transmit_DMA>
					break;
 8004f7e:	e1c4      	b.n	800530a <UARTstateManagement+0x6ca>
					modeNo = 9;
 8004f80:	4b79      	ldr	r3, [pc, #484]	; (8005168 <UARTstateManagement+0x528>)
 8004f82:	2209      	movs	r2, #9
 8004f84:	701a      	strb	r2, [r3, #0]
					Robot.CurrentStation = 0;
 8004f86:	4b7b      	ldr	r3, [pc, #492]	; (8005174 <UARTstateManagement+0x534>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	811a      	strh	r2, [r3, #8]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8004f8c:	4b77      	ldr	r3, [pc, #476]	; (800516c <UARTstateManagement+0x52c>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d004      	beq.n	8004f9e <UARTstateManagement+0x35e>
 8004f94:	4b77      	ldr	r3, [pc, #476]	; (8005174 <UARTstateManagement+0x534>)
 8004f96:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d11f      	bne.n	8004fde <UARTstateManagement+0x39e>
 8004f9e:	4b77      	ldr	r3, [pc, #476]	; (800517c <UARTstateManagement+0x53c>)
 8004fa0:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 8004fa2:	4b78      	ldr	r3, [pc, #480]	; (8005184 <UARTstateManagement+0x544>)
 8004fa4:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 153; // start-mode
 8004fa6:	4b77      	ldr	r3, [pc, #476]	; (8005184 <UARTstateManagement+0x544>)
 8004fa8:	2299      	movs	r2, #153	; 0x99
 8004faa:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = Robot.CurrentStation; // set current goal
 8004fac:	4b71      	ldr	r3, [pc, #452]	; (8005174 <UARTstateManagement+0x534>)
 8004fae:	891b      	ldrh	r3, [r3, #8]
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	4b74      	ldr	r3, [pc, #464]	; (8005184 <UARTstateManagement+0x544>)
 8004fb4:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 8004fb6:	4b73      	ldr	r3, [pc, #460]	; (8005184 <UARTstateManagement+0x544>)
 8004fb8:	789a      	ldrb	r2, [r3, #2]
 8004fba:	4b72      	ldr	r3, [pc, #456]	; (8005184 <UARTstateManagement+0x544>)
 8004fbc:	78db      	ldrb	r3, [r3, #3]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	4b70      	ldr	r3, [pc, #448]	; (8005184 <UARTstateManagement+0x544>)
 8004fc4:	791b      	ldrb	r3, [r3, #4]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	4b6d      	ldr	r3, [pc, #436]	; (8005184 <UARTstateManagement+0x544>)
 8004fd0:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8004fd2:	2206      	movs	r2, #6
 8004fd4:	496b      	ldr	r1, [pc, #428]	; (8005184 <UARTstateManagement+0x544>)
 8004fd6:	486a      	ldr	r0, [pc, #424]	; (8005180 <UARTstateManagement+0x540>)
 8004fd8:	f005 ff18 	bl	800ae0c <HAL_UART_Transmit_DMA>
					break;
 8004fdc:	e195      	b.n	800530a <UARTstateManagement+0x6ca>
 8004fde:	4b6a      	ldr	r3, [pc, #424]	; (8005188 <UARTstateManagement+0x548>)
 8004fe0:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8004fe2:	4b68      	ldr	r3, [pc, #416]	; (8005184 <UARTstateManagement+0x544>)
 8004fe4:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 8004fe6:	4a69      	ldr	r2, [pc, #420]	; (800518c <UARTstateManagement+0x54c>)
 8004fe8:	4b64      	ldr	r3, [pc, #400]	; (800517c <UARTstateManagement+0x53c>)
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 153; // start-mode
 8004fee:	4b65      	ldr	r3, [pc, #404]	; (8005184 <UARTstateManagement+0x544>)
 8004ff0:	2299      	movs	r2, #153	; 0x99
 8004ff2:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = Robot.CurrentStation; // set currentStation
 8004ff4:	4b5f      	ldr	r3, [pc, #380]	; (8005174 <UARTstateManagement+0x534>)
 8004ff6:	891b      	ldrh	r3, [r3, #8]
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	4b62      	ldr	r3, [pc, #392]	; (8005184 <UARTstateManagement+0x544>)
 8004ffc:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8004ffe:	4b61      	ldr	r3, [pc, #388]	; (8005184 <UARTstateManagement+0x544>)
 8005000:	791a      	ldrb	r2, [r3, #4]
 8005002:	4b60      	ldr	r3, [pc, #384]	; (8005184 <UARTstateManagement+0x544>)
 8005004:	795b      	ldrb	r3, [r3, #5]
 8005006:	4413      	add	r3, r2
 8005008:	b2da      	uxtb	r2, r3
 800500a:	4b5e      	ldr	r3, [pc, #376]	; (8005184 <UARTstateManagement+0x544>)
 800500c:	799b      	ldrb	r3, [r3, #6]
 800500e:	4413      	add	r3, r2
 8005010:	b2db      	uxtb	r3, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	b2da      	uxtb	r2, r3
 8005016:	4b5b      	ldr	r3, [pc, #364]	; (8005184 <UARTstateManagement+0x544>)
 8005018:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 800501a:	2208      	movs	r2, #8
 800501c:	4959      	ldr	r1, [pc, #356]	; (8005184 <UARTstateManagement+0x544>)
 800501e:	4858      	ldr	r0, [pc, #352]	; (8005180 <UARTstateManagement+0x540>)
 8005020:	f005 fef4 	bl	800ae0c <HAL_UART_Transmit_DMA>
					break;
 8005024:	e171      	b.n	800530a <UARTstateManagement+0x6ca>
					modeNo = 10;
 8005026:	4b50      	ldr	r3, [pc, #320]	; (8005168 <UARTstateManagement+0x528>)
 8005028:	220a      	movs	r2, #10
 800502a:	701a      	strb	r2, [r3, #0]
					posData = (uint16_t)(((((Robot.Position)*10000.0)*M_PI)/180.0));
 800502c:	4b51      	ldr	r3, [pc, #324]	; (8005174 <UARTstateManagement+0x534>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4618      	mov	r0, r3
 8005032:	f7fb fa35 	bl	80004a0 <__aeabi_f2d>
 8005036:	a348      	add	r3, pc, #288	; (adr r3, 8005158 <UARTstateManagement+0x518>)
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f7fb fa88 	bl	8000550 <__aeabi_dmul>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4610      	mov	r0, r2
 8005046:	4619      	mov	r1, r3
 8005048:	a345      	add	r3, pc, #276	; (adr r3, 8005160 <UARTstateManagement+0x520>)
 800504a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504e:	f7fb fa7f 	bl	8000550 <__aeabi_dmul>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4610      	mov	r0, r2
 8005058:	4619      	mov	r1, r3
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	4b4c      	ldr	r3, [pc, #304]	; (8005190 <UARTstateManagement+0x550>)
 8005060:	f7fb fba0 	bl	80007a4 <__aeabi_ddiv>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4610      	mov	r0, r2
 800506a:	4619      	mov	r1, r3
 800506c:	f7fb fc82 	bl	8000974 <__aeabi_d2uiz>
 8005070:	4603      	mov	r3, r0
 8005072:	b29a      	uxth	r2, r3
 8005074:	4b47      	ldr	r3, [pc, #284]	; (8005194 <UARTstateManagement+0x554>)
 8005076:	801a      	strh	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8005078:	4b3c      	ldr	r3, [pc, #240]	; (800516c <UARTstateManagement+0x52c>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d004      	beq.n	800508a <UARTstateManagement+0x44a>
 8005080:	4b3c      	ldr	r3, [pc, #240]	; (8005174 <UARTstateManagement+0x534>)
 8005082:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005086:	2b01      	cmp	r3, #1
 8005088:	d126      	bne.n	80050d8 <UARTstateManagement+0x498>
 800508a:	4b3c      	ldr	r3, [pc, #240]	; (800517c <UARTstateManagement+0x53c>)
 800508c:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 800508e:	4b3d      	ldr	r3, [pc, #244]	; (8005184 <UARTstateManagement+0x544>)
 8005090:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 154; // start-mode
 8005092:	4b3c      	ldr	r3, [pc, #240]	; (8005184 <UARTstateManagement+0x544>)
 8005094:	229a      	movs	r2, #154	; 0x9a
 8005096:	709a      	strb	r2, [r3, #2]
						TxBuf[3] = (posData) >> 8 ; // set high byte posData
 8005098:	4b3e      	ldr	r3, [pc, #248]	; (8005194 <UARTstateManagement+0x554>)
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	0a1b      	lsrs	r3, r3, #8
 800509e:	b29b      	uxth	r3, r3
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	4b38      	ldr	r3, [pc, #224]	; (8005184 <UARTstateManagement+0x544>)
 80050a4:	70da      	strb	r2, [r3, #3]
						TxBuf[4] = (posData) & 0xff; // set low byte posData
 80050a6:	4b3b      	ldr	r3, [pc, #236]	; (8005194 <UARTstateManagement+0x554>)
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	4b35      	ldr	r3, [pc, #212]	; (8005184 <UARTstateManagement+0x544>)
 80050ae:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 80050b0:	4b34      	ldr	r3, [pc, #208]	; (8005184 <UARTstateManagement+0x544>)
 80050b2:	789a      	ldrb	r2, [r3, #2]
 80050b4:	4b33      	ldr	r3, [pc, #204]	; (8005184 <UARTstateManagement+0x544>)
 80050b6:	78db      	ldrb	r3, [r3, #3]
 80050b8:	4413      	add	r3, r2
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	4b31      	ldr	r3, [pc, #196]	; (8005184 <UARTstateManagement+0x544>)
 80050be:	791b      	ldrb	r3, [r3, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	43db      	mvns	r3, r3
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	4b2e      	ldr	r3, [pc, #184]	; (8005184 <UARTstateManagement+0x544>)
 80050ca:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 80050cc:	2206      	movs	r2, #6
 80050ce:	492d      	ldr	r1, [pc, #180]	; (8005184 <UARTstateManagement+0x544>)
 80050d0:	482b      	ldr	r0, [pc, #172]	; (8005180 <UARTstateManagement+0x540>)
 80050d2:	f005 fe9b 	bl	800ae0c <HAL_UART_Transmit_DMA>
					break;
 80050d6:	e118      	b.n	800530a <UARTstateManagement+0x6ca>
 80050d8:	4b2b      	ldr	r3, [pc, #172]	; (8005188 <UARTstateManagement+0x548>)
 80050da:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 80050dc:	4b29      	ldr	r3, [pc, #164]	; (8005184 <UARTstateManagement+0x544>)
 80050de:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 80050e0:	4a2a      	ldr	r2, [pc, #168]	; (800518c <UARTstateManagement+0x54c>)
 80050e2:	4b26      	ldr	r3, [pc, #152]	; (800517c <UARTstateManagement+0x53c>)
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 154; // start-mode
 80050e8:	4b26      	ldr	r3, [pc, #152]	; (8005184 <UARTstateManagement+0x544>)
 80050ea:	229a      	movs	r2, #154	; 0x9a
 80050ec:	711a      	strb	r2, [r3, #4]
						if(homingFlag == 1 && Robot.Position <= 0.5){
 80050ee:	4b2a      	ldr	r3, [pc, #168]	; (8005198 <UARTstateManagement+0x558>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d110      	bne.n	8005118 <UARTstateManagement+0x4d8>
 80050f6:	4b1f      	ldr	r3, [pc, #124]	; (8005174 <UARTstateManagement+0x534>)
 80050f8:	edd3 7a00 	vldr	s15, [r3]
 80050fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005108:	d806      	bhi.n	8005118 <UARTstateManagement+0x4d8>
							TxBuf[5] = 0; // set high byte posData
 800510a:	4b1e      	ldr	r3, [pc, #120]	; (8005184 <UARTstateManagement+0x544>)
 800510c:	2200      	movs	r2, #0
 800510e:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = 0; // set low byte posData
 8005110:	4b1c      	ldr	r3, [pc, #112]	; (8005184 <UARTstateManagement+0x544>)
 8005112:	2200      	movs	r2, #0
 8005114:	719a      	strb	r2, [r3, #6]
 8005116:	e00b      	b.n	8005130 <UARTstateManagement+0x4f0>
							TxBuf[5] = (posData) >> 8 ; // set high byte posData
 8005118:	4b1e      	ldr	r3, [pc, #120]	; (8005194 <UARTstateManagement+0x554>)
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	0a1b      	lsrs	r3, r3, #8
 800511e:	b29b      	uxth	r3, r3
 8005120:	b2da      	uxtb	r2, r3
 8005122:	4b18      	ldr	r3, [pc, #96]	; (8005184 <UARTstateManagement+0x544>)
 8005124:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = (posData) & 0xff; // set low byte posData
 8005126:	4b1b      	ldr	r3, [pc, #108]	; (8005194 <UARTstateManagement+0x554>)
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	b2da      	uxtb	r2, r3
 800512c:	4b15      	ldr	r3, [pc, #84]	; (8005184 <UARTstateManagement+0x544>)
 800512e:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8005130:	4b14      	ldr	r3, [pc, #80]	; (8005184 <UARTstateManagement+0x544>)
 8005132:	791a      	ldrb	r2, [r3, #4]
 8005134:	4b13      	ldr	r3, [pc, #76]	; (8005184 <UARTstateManagement+0x544>)
 8005136:	795b      	ldrb	r3, [r3, #5]
 8005138:	4413      	add	r3, r2
 800513a:	b2da      	uxtb	r2, r3
 800513c:	4b11      	ldr	r3, [pc, #68]	; (8005184 <UARTstateManagement+0x544>)
 800513e:	799b      	ldrb	r3, [r3, #6]
 8005140:	4413      	add	r3, r2
 8005142:	b2db      	uxtb	r3, r3
 8005144:	43db      	mvns	r3, r3
 8005146:	b2da      	uxtb	r2, r3
 8005148:	4b0e      	ldr	r3, [pc, #56]	; (8005184 <UARTstateManagement+0x544>)
 800514a:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 800514c:	2208      	movs	r2, #8
 800514e:	490d      	ldr	r1, [pc, #52]	; (8005184 <UARTstateManagement+0x544>)
 8005150:	480b      	ldr	r0, [pc, #44]	; (8005180 <UARTstateManagement+0x540>)
 8005152:	f005 fe5b 	bl	800ae0c <HAL_UART_Transmit_DMA>
					break;
 8005156:	e0d8      	b.n	800530a <UARTstateManagement+0x6ca>
 8005158:	00000000 	.word	0x00000000
 800515c:	40c38800 	.word	0x40c38800
 8005160:	54442d18 	.word	0x54442d18
 8005164:	400921fb 	.word	0x400921fb
 8005168:	20000770 	.word	0x20000770
 800516c:	2000076c 	.word	0x2000076c
 8005170:	2000076d 	.word	0x2000076d
 8005174:	200006dc 	.word	0x200006dc
 8005178:	20000768 	.word	0x20000768
 800517c:	2000002c 	.word	0x2000002c
 8005180:	200005d8 	.word	0x200005d8
 8005184:	2000073c 	.word	0x2000073c
 8005188:	20000030 	.word	0x20000030
 800518c:	2000073e 	.word	0x2000073e
 8005190:	40668000 	.word	0x40668000
 8005194:	2000074c 	.word	0x2000074c
 8005198:	2000076b 	.word	0x2000076b
					modeNo = 11;
 800519c:	4b60      	ldr	r3, [pc, #384]	; (8005320 <UARTstateManagement+0x6e0>)
 800519e:	220b      	movs	r2, #11
 80051a0:	701a      	strb	r2, [r3, #0]
					veloData = (((AbsVal(Robot.Velocity)/6.0)*255.0)/10.0);
 80051a2:	4b60      	ldr	r3, [pc, #384]	; (8005324 <UARTstateManagement+0x6e4>)
 80051a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80051a8:	eeb0 0a67 	vmov.f32	s0, s15
 80051ac:	f7fc fc10 	bl	80019d0 <AbsVal>
 80051b0:	ee10 3a10 	vmov	r3, s0
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fb f973 	bl	80004a0 <__aeabi_f2d>
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	4b5a      	ldr	r3, [pc, #360]	; (8005328 <UARTstateManagement+0x6e8>)
 80051c0:	f7fb faf0 	bl	80007a4 <__aeabi_ddiv>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4610      	mov	r0, r2
 80051ca:	4619      	mov	r1, r3
 80051cc:	a352      	add	r3, pc, #328	; (adr r3, 8005318 <UARTstateManagement+0x6d8>)
 80051ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d2:	f7fb f9bd 	bl	8000550 <__aeabi_dmul>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4610      	mov	r0, r2
 80051dc:	4619      	mov	r1, r3
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	4b52      	ldr	r3, [pc, #328]	; (800532c <UARTstateManagement+0x6ec>)
 80051e4:	f7fb fade 	bl	80007a4 <__aeabi_ddiv>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4610      	mov	r0, r2
 80051ee:	4619      	mov	r1, r3
 80051f0:	f7fb fbc0 	bl	8000974 <__aeabi_d2uiz>
 80051f4:	4603      	mov	r3, r0
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	4b4d      	ldr	r3, [pc, #308]	; (8005330 <UARTstateManagement+0x6f0>)
 80051fa:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 80051fc:	4b4d      	ldr	r3, [pc, #308]	; (8005334 <UARTstateManagement+0x6f4>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d004      	beq.n	800520e <UARTstateManagement+0x5ce>
 8005204:	4b47      	ldr	r3, [pc, #284]	; (8005324 <UARTstateManagement+0x6e4>)
 8005206:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800520a:	2b01      	cmp	r3, #1
 800520c:	d11e      	bne.n	800524c <UARTstateManagement+0x60c>
 800520e:	4b4a      	ldr	r3, [pc, #296]	; (8005338 <UARTstateManagement+0x6f8>)
 8005210:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 8005212:	4b4a      	ldr	r3, [pc, #296]	; (800533c <UARTstateManagement+0x6fc>)
 8005214:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 155;
 8005216:	4b49      	ldr	r3, [pc, #292]	; (800533c <UARTstateManagement+0x6fc>)
 8005218:	229b      	movs	r2, #155	; 0x9b
 800521a:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = veloData; // set low byte posData
 800521c:	4b44      	ldr	r3, [pc, #272]	; (8005330 <UARTstateManagement+0x6f0>)
 800521e:	781a      	ldrb	r2, [r3, #0]
 8005220:	4b46      	ldr	r3, [pc, #280]	; (800533c <UARTstateManagement+0x6fc>)
 8005222:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 8005224:	4b45      	ldr	r3, [pc, #276]	; (800533c <UARTstateManagement+0x6fc>)
 8005226:	789a      	ldrb	r2, [r3, #2]
 8005228:	4b44      	ldr	r3, [pc, #272]	; (800533c <UARTstateManagement+0x6fc>)
 800522a:	78db      	ldrb	r3, [r3, #3]
 800522c:	4413      	add	r3, r2
 800522e:	b2da      	uxtb	r2, r3
 8005230:	4b42      	ldr	r3, [pc, #264]	; (800533c <UARTstateManagement+0x6fc>)
 8005232:	791b      	ldrb	r3, [r3, #4]
 8005234:	4413      	add	r3, r2
 8005236:	b2db      	uxtb	r3, r3
 8005238:	43db      	mvns	r3, r3
 800523a:	b2da      	uxtb	r2, r3
 800523c:	4b3f      	ldr	r3, [pc, #252]	; (800533c <UARTstateManagement+0x6fc>)
 800523e:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8005240:	2206      	movs	r2, #6
 8005242:	493e      	ldr	r1, [pc, #248]	; (800533c <UARTstateManagement+0x6fc>)
 8005244:	483e      	ldr	r0, [pc, #248]	; (8005340 <UARTstateManagement+0x700>)
 8005246:	f005 fde1 	bl	800ae0c <HAL_UART_Transmit_DMA>
					break;
 800524a:	e05e      	b.n	800530a <UARTstateManagement+0x6ca>
 800524c:	4b3d      	ldr	r3, [pc, #244]	; (8005344 <UARTstateManagement+0x704>)
 800524e:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8005250:	4b3a      	ldr	r3, [pc, #232]	; (800533c <UARTstateManagement+0x6fc>)
 8005252:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 8005254:	4a3c      	ldr	r2, [pc, #240]	; (8005348 <UARTstateManagement+0x708>)
 8005256:	4b38      	ldr	r3, [pc, #224]	; (8005338 <UARTstateManagement+0x6f8>)
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 155; // start-mode
 800525c:	4b37      	ldr	r3, [pc, #220]	; (800533c <UARTstateManagement+0x6fc>)
 800525e:	229b      	movs	r2, #155	; 0x9b
 8005260:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = veloData; // set low byte posData
 8005262:	4b33      	ldr	r3, [pc, #204]	; (8005330 <UARTstateManagement+0x6f0>)
 8005264:	781a      	ldrb	r2, [r3, #0]
 8005266:	4b35      	ldr	r3, [pc, #212]	; (800533c <UARTstateManagement+0x6fc>)
 8005268:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 800526a:	4b34      	ldr	r3, [pc, #208]	; (800533c <UARTstateManagement+0x6fc>)
 800526c:	791a      	ldrb	r2, [r3, #4]
 800526e:	4b33      	ldr	r3, [pc, #204]	; (800533c <UARTstateManagement+0x6fc>)
 8005270:	795b      	ldrb	r3, [r3, #5]
 8005272:	4413      	add	r3, r2
 8005274:	b2da      	uxtb	r2, r3
 8005276:	4b31      	ldr	r3, [pc, #196]	; (800533c <UARTstateManagement+0x6fc>)
 8005278:	799b      	ldrb	r3, [r3, #6]
 800527a:	4413      	add	r3, r2
 800527c:	b2db      	uxtb	r3, r3
 800527e:	43db      	mvns	r3, r3
 8005280:	b2da      	uxtb	r2, r3
 8005282:	4b2e      	ldr	r3, [pc, #184]	; (800533c <UARTstateManagement+0x6fc>)
 8005284:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 8005286:	2208      	movs	r2, #8
 8005288:	492c      	ldr	r1, [pc, #176]	; (800533c <UARTstateManagement+0x6fc>)
 800528a:	482d      	ldr	r0, [pc, #180]	; (8005340 <UARTstateManagement+0x700>)
 800528c:	f005 fdbe 	bl	800ae0c <HAL_UART_Transmit_DMA>
					break;
 8005290:	e03b      	b.n	800530a <UARTstateManagement+0x6ca>
					modeNo = 12;
 8005292:	4b23      	ldr	r3, [pc, #140]	; (8005320 <UARTstateManagement+0x6e0>)
 8005294:	220c      	movs	r2, #12
 8005296:	701a      	strb	r2, [r3, #0]
					RobotState = EndEff;
 8005298:	4b2c      	ldr	r3, [pc, #176]	; (800534c <UARTstateManagement+0x70c>)
 800529a:	2203      	movs	r2, #3
 800529c:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 800529e:	4b2c      	ldr	r3, [pc, #176]	; (8005350 <UARTstateManagement+0x710>)
 80052a0:	2201      	movs	r2, #1
 80052a2:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorReadFlag =  1;
 80052a4:	4b2b      	ldr	r3, [pc, #172]	; (8005354 <UARTstateManagement+0x714>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	701a      	strb	r2, [r3, #0]
					EndEffState = CheckBeforRun;
 80052aa:	4b2b      	ldr	r3, [pc, #172]	; (8005358 <UARTstateManagement+0x718>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	701a      	strb	r2, [r3, #0]
					endEffFlag = 1;
 80052b0:	4b2a      	ldr	r3, [pc, #168]	; (800535c <UARTstateManagement+0x71c>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80052b6:	2202      	movs	r2, #2
 80052b8:	491f      	ldr	r1, [pc, #124]	; (8005338 <UARTstateManagement+0x6f8>)
 80052ba:	4821      	ldr	r0, [pc, #132]	; (8005340 <UARTstateManagement+0x700>)
 80052bc:	f005 fda6 	bl	800ae0c <HAL_UART_Transmit_DMA>
					break;
 80052c0:	e023      	b.n	800530a <UARTstateManagement+0x6ca>
					modeNo = 13;
 80052c2:	4b17      	ldr	r3, [pc, #92]	; (8005320 <UARTstateManagement+0x6e0>)
 80052c4:	220d      	movs	r2, #13
 80052c6:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 80052c8:	4b24      	ldr	r3, [pc, #144]	; (800535c <UARTstateManagement+0x71c>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80052ce:	2202      	movs	r2, #2
 80052d0:	4919      	ldr	r1, [pc, #100]	; (8005338 <UARTstateManagement+0x6f8>)
 80052d2:	481b      	ldr	r0, [pc, #108]	; (8005340 <UARTstateManagement+0x700>)
 80052d4:	f005 fd9a 	bl	800ae0c <HAL_UART_Transmit_DMA>
					break;
 80052d8:	e017      	b.n	800530a <UARTstateManagement+0x6ca>
					modeNo = 14;
 80052da:	4b11      	ldr	r3, [pc, #68]	; (8005320 <UARTstateManagement+0x6e0>)
 80052dc:	220e      	movs	r2, #14
 80052de:	701a      	strb	r2, [r3, #0]
					RobotRunToPositon(Robot.HomePositon,51.0);
 80052e0:	4b10      	ldr	r3, [pc, #64]	; (8005324 <UARTstateManagement+0x6e4>)
 80052e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80052e6:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8005360 <UARTstateManagement+0x720>
 80052ea:	eeb0 0a67 	vmov.f32	s0, s15
 80052ee:	f000 fbe5 	bl	8005abc <RobotRunToPositon>
					homingFlag = 1;
 80052f2:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <UARTstateManagement+0x724>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80052f8:	2202      	movs	r2, #2
 80052fa:	490f      	ldr	r1, [pc, #60]	; (8005338 <UARTstateManagement+0x6f8>)
 80052fc:	4810      	ldr	r0, [pc, #64]	; (8005340 <UARTstateManagement+0x700>)
 80052fe:	f005 fd85 	bl	800ae0c <HAL_UART_Transmit_DMA>
					break;
 8005302:	e002      	b.n	800530a <UARTstateManagement+0x6ca>
			break;
 8005304:	bf00      	nop
 8005306:	e000      	b.n	800530a <UARTstateManagement+0x6ca>
			break;
 8005308:	bf00      	nop
}
 800530a:	bf00      	nop
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	f3af 8000 	nop.w
 8005318:	00000000 	.word	0x00000000
 800531c:	406fe000 	.word	0x406fe000
 8005320:	20000770 	.word	0x20000770
 8005324:	200006dc 	.word	0x200006dc
 8005328:	40180000 	.word	0x40180000
 800532c:	40240000 	.word	0x40240000
 8005330:	2000074e 	.word	0x2000074e
 8005334:	2000076c 	.word	0x2000076c
 8005338:	2000002c 	.word	0x2000002c
 800533c:	2000073c 	.word	0x2000073c
 8005340:	200005d8 	.word	0x200005d8
 8005344:	20000030 	.word	0x20000030
 8005348:	2000073e 	.word	0x2000073e
 800534c:	20000711 	.word	0x20000711
 8005350:	20000b01 	.word	0x20000b01
 8005354:	20000b00 	.word	0x20000b00
 8005358:	20000000 	.word	0x20000000
 800535c:	2000076a 	.word	0x2000076a
 8005360:	424c0000 	.word	0x424c0000
 8005364:	2000076b 	.word	0x2000076b

08005368 <RobotstateManagement>:

void RobotstateManagement()
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
	switch (RobotState)
 800536c:	4b91      	ldr	r3, [pc, #580]	; (80055b4 <RobotstateManagement+0x24c>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b04      	cmp	r3, #4
 8005372:	f200 811d 	bhi.w	80055b0 <RobotstateManagement+0x248>
 8005376:	a201      	add	r2, pc, #4	; (adr r2, 800537c <RobotstateManagement+0x14>)
 8005378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537c:	08005391 	.word	0x08005391
 8005380:	080053ad 	.word	0x080053ad
 8005384:	08005405 	.word	0x08005405
 8005388:	080055a7 	.word	0x080055a7
 800538c:	08005591 	.word	0x08005591
	{
		case init:
			// Start Finding home Position
			Robot.flagSethome = 1;
 8005390:	4b89      	ldr	r3, [pc, #548]	; (80055b8 <RobotstateManagement+0x250>)
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			// Turn 360 Deg
			RobotRunToPositon(360.0,51.0);
 8005398:	eddf 0a88 	vldr	s1, [pc, #544]	; 80055bc <RobotstateManagement+0x254>
 800539c:	ed9f 0a88 	vldr	s0, [pc, #544]	; 80055c0 <RobotstateManagement+0x258>
 80053a0:	f000 fb8c 	bl	8005abc <RobotRunToPositon>
			// Goto next State
			RobotState = FindHome;
 80053a4:	4b83      	ldr	r3, [pc, #524]	; (80055b4 <RobotstateManagement+0x24c>)
 80053a6:	2201      	movs	r2, #1
 80053a8:	701a      	strb	r2, [r3, #0]
			break;
 80053aa:	e101      	b.n	80055b0 <RobotstateManagement+0x248>
		case FindHome:
			if(Robot.RunningFlag == 0)
 80053ac:	4b82      	ldr	r3, [pc, #520]	; (80055b8 <RobotstateManagement+0x250>)
 80053ae:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f040 80f9 	bne.w	80055aa <RobotstateManagement+0x242>
			{
				if(Robot.flagSethome == 2)
 80053b8:	4b7f      	ldr	r3, [pc, #508]	; (80055b8 <RobotstateManagement+0x250>)
 80053ba:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d111      	bne.n	80053e6 <RobotstateManagement+0x7e>
				{
					RobotRunToPositon(Robot.HomePositon,51.0);
 80053c2:	4b7d      	ldr	r3, [pc, #500]	; (80055b8 <RobotstateManagement+0x250>)
 80053c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80053c8:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80055bc <RobotstateManagement+0x254>
 80053cc:	eeb0 0a67 	vmov.f32	s0, s15
 80053d0:	f000 fb74 	bl	8005abc <RobotRunToPositon>
					Robot.RunningFlag = 1;
 80053d4:	4b78      	ldr	r3, [pc, #480]	; (80055b8 <RobotstateManagement+0x250>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					Robot.flagSethome = 3;
 80053dc:	4b76      	ldr	r3, [pc, #472]	; (80055b8 <RobotstateManagement+0x250>)
 80053de:	2203      	movs	r2, #3
 80053e0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					RobotResetAll();
					UARTState = MCUConnect;
					RobotState = NormalOperation;
				}
			}
			break;
 80053e4:	e0e1      	b.n	80055aa <RobotstateManagement+0x242>
				else if(Robot.flagSethome == 3)
 80053e6:	4b74      	ldr	r3, [pc, #464]	; (80055b8 <RobotstateManagement+0x250>)
 80053e8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	f040 80dc 	bne.w	80055aa <RobotstateManagement+0x242>
					RobotResetAll();
 80053f2:	f000 fb9d 	bl	8005b30 <RobotResetAll>
					UARTState = MCUConnect;
 80053f6:	4b73      	ldr	r3, [pc, #460]	; (80055c4 <RobotstateManagement+0x25c>)
 80053f8:	2202      	movs	r2, #2
 80053fa:	701a      	strb	r2, [r3, #0]
					RobotState = NormalOperation;
 80053fc:	4b6d      	ldr	r3, [pc, #436]	; (80055b4 <RobotstateManagement+0x24c>)
 80053fe:	2202      	movs	r2, #2
 8005400:	701a      	strb	r2, [r3, #0]
			break;
 8005402:	e0d2      	b.n	80055aa <RobotstateManagement+0x242>
		case NormalOperation:
			if(notContinueFlag == 1){
 8005404:	4b70      	ldr	r3, [pc, #448]	; (80055c8 <RobotstateManagement+0x260>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d10e      	bne.n	800542a <RobotstateManagement+0xc2>
				Robot.MotorIsOn = 1;
 800540c:	4b6a      	ldr	r3, [pc, #424]	; (80055b8 <RobotstateManagement+0x250>)
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				Robot.RunningFlag = 1;
 8005414:	4b68      	ldr	r3, [pc, #416]	; (80055b8 <RobotstateManagement+0x250>)
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				Robot.flagStartTime = 1;
 800541c:	4b66      	ldr	r3, [pc, #408]	; (80055b8 <RobotstateManagement+0x250>)
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				notContinueFlag = 0;
 8005424:	4b68      	ldr	r3, [pc, #416]	; (80055c8 <RobotstateManagement+0x260>)
 8005426:	2200      	movs	r2, #0
 8005428:	701a      	strb	r2, [r3, #0]
			}
			if(doingTaskFlag == 1 && Robot.RunningFlag == 1 && endEffFlag == 0){
 800542a:	4b68      	ldr	r3, [pc, #416]	; (80055cc <RobotstateManagement+0x264>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d159      	bne.n	80054e6 <RobotstateManagement+0x17e>
 8005432:	4b61      	ldr	r3, [pc, #388]	; (80055b8 <RobotstateManagement+0x250>)
 8005434:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005438:	2b01      	cmp	r3, #1
 800543a:	d154      	bne.n	80054e6 <RobotstateManagement+0x17e>
 800543c:	4b64      	ldr	r3, [pc, #400]	; (80055d0 <RobotstateManagement+0x268>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d150      	bne.n	80054e6 <RobotstateManagement+0x17e>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8005444:	2201      	movs	r2, #1
 8005446:	2108      	movs	r1, #8
 8005448:	4862      	ldr	r0, [pc, #392]	; (80055d4 <RobotstateManagement+0x26c>)
 800544a:	f001 fecb 	bl	80071e4 <HAL_GPIO_WritePin>
				if(goalFlag == 1 && goingToGoalFlag == 0){
 800544e:	4b62      	ldr	r3, [pc, #392]	; (80055d8 <RobotstateManagement+0x270>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d11d      	bne.n	8005492 <RobotstateManagement+0x12a>
 8005456:	4b61      	ldr	r3, [pc, #388]	; (80055dc <RobotstateManagement+0x274>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d119      	bne.n	8005492 <RobotstateManagement+0x12a>
					goingToGoalFlag = 1;
 800545e:	4b5f      	ldr	r3, [pc, #380]	; (80055dc <RobotstateManagement+0x274>)
 8005460:	2201      	movs	r2, #1
 8005462:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = uartPos;
 8005464:	4b5e      	ldr	r3, [pc, #376]	; (80055e0 <RobotstateManagement+0x278>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a53      	ldr	r2, [pc, #332]	; (80055b8 <RobotstateManagement+0x250>)
 800546a:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 800546c:	4b52      	ldr	r3, [pc, #328]	; (80055b8 <RobotstateManagement+0x250>)
 800546e:	edd3 7a00 	vldr	s15, [r3]
 8005472:	4b51      	ldr	r3, [pc, #324]	; (80055b8 <RobotstateManagement+0x250>)
 8005474:	ed93 7a03 	vldr	s14, [r3, #12]
 8005478:	4b4f      	ldr	r3, [pc, #316]	; (80055b8 <RobotstateManagement+0x250>)
 800547a:	edd3 6a08 	vldr	s13, [r3, #32]
 800547e:	eeb0 1a66 	vmov.f32	s2, s13
 8005482:	eef0 0a47 	vmov.f32	s1, s14
 8005486:	eeb0 0a67 	vmov.f32	s0, s15
 800548a:	4856      	ldr	r0, [pc, #344]	; (80055e4 <RobotstateManagement+0x27c>)
 800548c:	f7fc fac4 	bl	8001a18 <CoefficientAndTimeCalculation>
 8005490:	e029      	b.n	80054e6 <RobotstateManagement+0x17e>
				}
				else if(goalFlag == 2 && goingToGoalFlag == 0){
 8005492:	4b51      	ldr	r3, [pc, #324]	; (80055d8 <RobotstateManagement+0x270>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b02      	cmp	r3, #2
 8005498:	d125      	bne.n	80054e6 <RobotstateManagement+0x17e>
 800549a:	4b50      	ldr	r3, [pc, #320]	; (80055dc <RobotstateManagement+0x274>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d121      	bne.n	80054e6 <RobotstateManagement+0x17e>
					goingToGoalFlag = 1;
 80054a2:	4b4e      	ldr	r3, [pc, #312]	; (80055dc <RobotstateManagement+0x274>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = goalDeg[uartGoal[goalIDX]-1];
 80054a8:	4b4f      	ldr	r3, [pc, #316]	; (80055e8 <RobotstateManagement+0x280>)
 80054aa:	f993 3000 	ldrsb.w	r3, [r3]
 80054ae:	461a      	mov	r2, r3
 80054b0:	4b4e      	ldr	r3, [pc, #312]	; (80055ec <RobotstateManagement+0x284>)
 80054b2:	5c9b      	ldrb	r3, [r3, r2]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	4a4e      	ldr	r2, [pc, #312]	; (80055f0 <RobotstateManagement+0x288>)
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a3e      	ldr	r2, [pc, #248]	; (80055b8 <RobotstateManagement+0x250>)
 80054c0:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 80054c2:	4b3d      	ldr	r3, [pc, #244]	; (80055b8 <RobotstateManagement+0x250>)
 80054c4:	edd3 7a00 	vldr	s15, [r3]
 80054c8:	4b3b      	ldr	r3, [pc, #236]	; (80055b8 <RobotstateManagement+0x250>)
 80054ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80054ce:	4b3a      	ldr	r3, [pc, #232]	; (80055b8 <RobotstateManagement+0x250>)
 80054d0:	edd3 6a08 	vldr	s13, [r3, #32]
 80054d4:	eeb0 1a66 	vmov.f32	s2, s13
 80054d8:	eef0 0a47 	vmov.f32	s1, s14
 80054dc:	eeb0 0a67 	vmov.f32	s0, s15
 80054e0:	4840      	ldr	r0, [pc, #256]	; (80055e4 <RobotstateManagement+0x27c>)
 80054e2:	f7fc fa99 	bl	8001a18 <CoefficientAndTimeCalculation>
				}
			}

			if(endEffFlag == 0 && goingToGoalFlag == 1 && doingTaskFlag == 1){
 80054e6:	4b3a      	ldr	r3, [pc, #232]	; (80055d0 <RobotstateManagement+0x268>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d132      	bne.n	8005554 <RobotstateManagement+0x1ec>
 80054ee:	4b3b      	ldr	r3, [pc, #236]	; (80055dc <RobotstateManagement+0x274>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d12e      	bne.n	8005554 <RobotstateManagement+0x1ec>
 80054f6:	4b35      	ldr	r3, [pc, #212]	; (80055cc <RobotstateManagement+0x264>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d12a      	bne.n	8005554 <RobotstateManagement+0x1ec>
				if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0){
 80054fe:	4b2e      	ldr	r3, [pc, #184]	; (80055b8 <RobotstateManagement+0x250>)
 8005500:	ed93 7a03 	vldr	s14, [r3, #12]
 8005504:	4b2c      	ldr	r3, [pc, #176]	; (80055b8 <RobotstateManagement+0x250>)
 8005506:	edd3 7a00 	vldr	s15, [r3]
 800550a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800550e:	eeb0 0a67 	vmov.f32	s0, s15
 8005512:	f7fc fa5d 	bl	80019d0 <AbsVal>
 8005516:	eef0 7a40 	vmov.f32	s15, s0
 800551a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800551e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005526:	d515      	bpl.n	8005554 <RobotstateManagement+0x1ec>
 8005528:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <RobotstateManagement+0x250>)
 800552a:	edd3 7a01 	vldr	s15, [r3, #4]
 800552e:	eeb0 0a67 	vmov.f32	s0, s15
 8005532:	f7fc fa4d 	bl	80019d0 <AbsVal>
 8005536:	eef0 7a40 	vmov.f32	s15, s0
 800553a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800553e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005546:	d505      	bpl.n	8005554 <RobotstateManagement+0x1ec>
					endEffFlag = 1;
 8005548:	4b21      	ldr	r3, [pc, #132]	; (80055d0 <RobotstateManagement+0x268>)
 800554a:	2201      	movs	r2, #1
 800554c:	701a      	strb	r2, [r3, #0]
					goingToGoalFlag = 0;
 800554e:	4b23      	ldr	r3, [pc, #140]	; (80055dc <RobotstateManagement+0x274>)
 8005550:	2200      	movs	r2, #0
 8005552:	701a      	strb	r2, [r3, #0]
				}
			}

			if(goingToGoalFlag == 0 && doingTaskFlag == 1 && Robot.RunningFlag == 0 && endEffFlag == 1){
 8005554:	4b21      	ldr	r3, [pc, #132]	; (80055dc <RobotstateManagement+0x274>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d128      	bne.n	80055ae <RobotstateManagement+0x246>
 800555c:	4b1b      	ldr	r3, [pc, #108]	; (80055cc <RobotstateManagement+0x264>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d124      	bne.n	80055ae <RobotstateManagement+0x246>
 8005564:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <RobotstateManagement+0x250>)
 8005566:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800556a:	2b00      	cmp	r3, #0
 800556c:	d11f      	bne.n	80055ae <RobotstateManagement+0x246>
 800556e:	4b18      	ldr	r3, [pc, #96]	; (80055d0 <RobotstateManagement+0x268>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d11b      	bne.n	80055ae <RobotstateManagement+0x246>
				RobotState = EndEff;
 8005576:	4b0f      	ldr	r3, [pc, #60]	; (80055b4 <RobotstateManagement+0x24c>)
 8005578:	2203      	movs	r2, #3
 800557a:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 800557c:	4b1d      	ldr	r3, [pc, #116]	; (80055f4 <RobotstateManagement+0x28c>)
 800557e:	2201      	movs	r2, #1
 8005580:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 8005582:	4b1d      	ldr	r3, [pc, #116]	; (80055f8 <RobotstateManagement+0x290>)
 8005584:	2201      	movs	r2, #1
 8005586:	701a      	strb	r2, [r3, #0]
				EndEffState = CheckBeforRun;
 8005588:	4b1c      	ldr	r3, [pc, #112]	; (80055fc <RobotstateManagement+0x294>)
 800558a:	2201      	movs	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800558e:	e00e      	b.n	80055ae <RobotstateManagement+0x246>
		case EndEff:
			break;
		case Emergency:
			Robot.MotorIsOn = 0;
 8005590:	4b09      	ldr	r3, [pc, #36]	; (80055b8 <RobotstateManagement+0x250>)
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PIDAController_Init(&PidVelo);
 8005598:	4819      	ldr	r0, [pc, #100]	; (8005600 <RobotstateManagement+0x298>)
 800559a:	f7fb fef3 	bl	8001384 <PIDAController_Init>
			PIDAController_Init(&PidPos);
 800559e:	4819      	ldr	r0, [pc, #100]	; (8005604 <RobotstateManagement+0x29c>)
 80055a0:	f7fb fef0 	bl	8001384 <PIDAController_Init>
			// Luv u pls pass
			break;
 80055a4:	e004      	b.n	80055b0 <RobotstateManagement+0x248>
			break;
 80055a6:	bf00      	nop
 80055a8:	e002      	b.n	80055b0 <RobotstateManagement+0x248>
			break;
 80055aa:	bf00      	nop
 80055ac:	e000      	b.n	80055b0 <RobotstateManagement+0x248>
			break;
 80055ae:	bf00      	nop
	}
}
 80055b0:	bf00      	nop
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000711 	.word	0x20000711
 80055b8:	200006dc 	.word	0x200006dc
 80055bc:	424c0000 	.word	0x424c0000
 80055c0:	43b40000 	.word	0x43b40000
 80055c4:	20000710 	.word	0x20000710
 80055c8:	2000076f 	.word	0x2000076f
 80055cc:	2000076c 	.word	0x2000076c
 80055d0:	2000076a 	.word	0x2000076a
 80055d4:	40020400 	.word	0x40020400
 80055d8:	20000769 	.word	0x20000769
 80055dc:	2000076d 	.word	0x2000076d
 80055e0:	20000754 	.word	0x20000754
 80055e4:	2000086c 	.word	0x2000086c
 80055e8:	20000768 	.word	0x20000768
 80055ec:	20000758 	.word	0x20000758
 80055f0:	20000004 	.word	0x20000004
 80055f4:	20000b01 	.word	0x20000b01
 80055f8:	20000b00 	.word	0x20000b00
 80055fc:	20000000 	.word	0x20000000
 8005600:	20000808 	.word	0x20000808
 8005604:	20000838 	.word	0x20000838

08005608 <EndEffstateManagement>:

void EndEffstateManagement()
{
 8005608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800560c:	b086      	sub	sp, #24
 800560e:	af00      	add	r7, sp, #0
	switch (EndEffState)
 8005610:	4ba6      	ldr	r3, [pc, #664]	; (80058ac <EndEffstateManagement+0x2a4>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b04      	cmp	r3, #4
 8005616:	f200 8144 	bhi.w	80058a2 <EndEffstateManagement+0x29a>
 800561a:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <EndEffstateManagement+0x18>)
 800561c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005620:	08005635 	.word	0x08005635
 8005624:	0800563d 	.word	0x0800563d
 8005628:	080056f7 	.word	0x080056f7
 800562c:	08005775 	.word	0x08005775
 8005630:	0800579d 	.word	0x0800579d
	{
		case idle:
			// Do not thing wait for command
			EndEffStatus = AwaitCommand;
 8005634:	4b9e      	ldr	r3, [pc, #632]	; (80058b0 <EndEffstateManagement+0x2a8>)
 8005636:	2203      	movs	r2, #3
 8005638:	701a      	strb	r2, [r3, #0]
//			I2CEndEffectorWriteFlag = 1;
			break;
 800563a:	e132      	b.n	80058a2 <EndEffstateManagement+0x29a>
		case CheckBeforRun:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 800563c:	4b9d      	ldr	r3, [pc, #628]	; (80058b4 <EndEffstateManagement+0x2ac>)
 800563e:	2223      	movs	r2, #35	; 0x23
 8005640:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 8005642:	489c      	ldr	r0, [pc, #624]	; (80058b4 <EndEffstateManagement+0x2ac>)
 8005644:	f000 f956 	bl	80058f4 <I2CWriteFcn>
			check[0]++;
 8005648:	4b9b      	ldr	r3, [pc, #620]	; (80058b8 <EndEffstateManagement+0x2b0>)
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	1c51      	adds	r1, r2, #1
 8005650:	6139      	str	r1, [r7, #16]
 8005652:	f143 0300 	adc.w	r3, r3, #0
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	4b97      	ldr	r3, [pc, #604]	; (80058b8 <EndEffstateManagement+0x2b0>)
 800565a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800565e:	e9c3 1200 	strd	r1, r2, [r3]
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8005662:	4b96      	ldr	r3, [pc, #600]	; (80058bc <EndEffstateManagement+0x2b4>)
 8005664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b20      	cmp	r3, #32
 800566c:	f040 8112 	bne.w	8005894 <EndEffstateManagement+0x28c>
			{
				I2CReadFcn(I2CRxDataBuffer);
 8005670:	4893      	ldr	r0, [pc, #588]	; (80058c0 <EndEffstateManagement+0x2b8>)
 8005672:	f000 f965 	bl	8005940 <I2CReadFcn>
				check[1]++;
 8005676:	4b90      	ldr	r3, [pc, #576]	; (80058b8 <EndEffstateManagement+0x2b0>)
 8005678:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800567c:	1c51      	adds	r1, r2, #1
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	f143 0300 	adc.w	r3, r3, #0
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	4b8c      	ldr	r3, [pc, #560]	; (80058b8 <EndEffstateManagement+0x2b0>)
 8005688:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800568c:	e9c3 1202 	strd	r1, r2, [r3, #8]
				if(hi2c1.State == HAL_I2C_STATE_READY)
 8005690:	4b8a      	ldr	r3, [pc, #552]	; (80058bc <EndEffstateManagement+0x2b4>)
 8005692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b20      	cmp	r3, #32
 800569a:	f040 80fb 	bne.w	8005894 <EndEffstateManagement+0x28c>
				{
					if(I2CRxDataBuffer[0] == 0x78)
 800569e:	4b88      	ldr	r3, [pc, #544]	; (80058c0 <EndEffstateManagement+0x2b8>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b78      	cmp	r3, #120	; 0x78
 80056a4:	d119      	bne.n	80056da <EndEffstateManagement+0xd2>
					{
						check[2]++;
 80056a6:	4b84      	ldr	r3, [pc, #528]	; (80058b8 <EndEffstateManagement+0x2b0>)
 80056a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80056ac:	1c51      	adds	r1, r2, #1
 80056ae:	6039      	str	r1, [r7, #0]
 80056b0:	f143 0300 	adc.w	r3, r3, #0
 80056b4:	607b      	str	r3, [r7, #4]
 80056b6:	4b80      	ldr	r3, [pc, #512]	; (80058b8 <EndEffstateManagement+0x2b0>)
 80056b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80056bc:	e9c3 1204 	strd	r1, r2, [r3, #16]
						EndEffState = OpenLaser;
 80056c0:	4b7a      	ldr	r3, [pc, #488]	; (80058ac <EndEffstateManagement+0x2a4>)
 80056c2:	2202      	movs	r2, #2
 80056c4:	701a      	strb	r2, [r3, #0]
						openLaserWriteFlag = 1;
 80056c6:	4b7f      	ldr	r3, [pc, #508]	; (80058c4 <EndEffstateManagement+0x2bc>)
 80056c8:	2201      	movs	r2, #1
 80056ca:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorWriteFlag = 1;
 80056cc:	4b7e      	ldr	r3, [pc, #504]	; (80058c8 <EndEffstateManagement+0x2c0>)
 80056ce:	2201      	movs	r2, #1
 80056d0:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorReadFlag =  0;
 80056d2:	4b7e      	ldr	r3, [pc, #504]	; (80058cc <EndEffstateManagement+0x2c4>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	701a      	strb	r2, [r3, #0]
						EndEffState = idle;
					}
				}
			}

		break;
 80056d8:	e0dc      	b.n	8005894 <EndEffstateManagement+0x28c>
						check[3]++;
 80056da:	4b77      	ldr	r3, [pc, #476]	; (80058b8 <EndEffstateManagement+0x2b0>)
 80056dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80056e0:	f112 0a01 	adds.w	sl, r2, #1
 80056e4:	f143 0b00 	adc.w	fp, r3, #0
 80056e8:	4b73      	ldr	r3, [pc, #460]	; (80058b8 <EndEffstateManagement+0x2b0>)
 80056ea:	e9c3 ab06 	strd	sl, fp, [r3, #24]
						EndEffState = idle;
 80056ee:	4b6f      	ldr	r3, [pc, #444]	; (80058ac <EndEffstateManagement+0x2a4>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	701a      	strb	r2, [r3, #0]
		break;
 80056f4:	e0ce      	b.n	8005894 <EndEffstateManagement+0x28c>
		case OpenLaser:
			// Open Laser
			if(openLaserWriteFlag == 1){
 80056f6:	4b73      	ldr	r3, [pc, #460]	; (80058c4 <EndEffstateManagement+0x2bc>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d11d      	bne.n	800573a <EndEffstateManagement+0x132>
				check[4]++;
 80056fe:	4b6e      	ldr	r3, [pc, #440]	; (80058b8 <EndEffstateManagement+0x2b0>)
 8005700:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005704:	1c50      	adds	r0, r2, #1
 8005706:	f143 0100 	adc.w	r1, r3, #0
 800570a:	4b6b      	ldr	r3, [pc, #428]	; (80058b8 <EndEffstateManagement+0x2b0>)
 800570c:	e9c3 0108 	strd	r0, r1, [r3, #32]
				I2CTxDataBuffer[0] = 0x45;
 8005710:	4b68      	ldr	r3, [pc, #416]	; (80058b4 <EndEffstateManagement+0x2ac>)
 8005712:	2245      	movs	r2, #69	; 0x45
 8005714:	701a      	strb	r2, [r3, #0]
				I2CWriteFcn(I2CTxDataBuffer);
 8005716:	4867      	ldr	r0, [pc, #412]	; (80058b4 <EndEffstateManagement+0x2ac>)
 8005718:	f000 f8ec 	bl	80058f4 <I2CWriteFcn>
				openLaserWriteFlag = 0;
 800571c:	4b69      	ldr	r3, [pc, #420]	; (80058c4 <EndEffstateManagement+0x2bc>)
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
				endEffLoopTime = Micros();
 8005722:	f000 fb2b 	bl	8005d7c <Micros>
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	4969      	ldr	r1, [pc, #420]	; (80058d0 <EndEffstateManagement+0x2c8>)
 800572c:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8005730:	2201      	movs	r2, #1
 8005732:	2110      	movs	r1, #16
 8005734:	4867      	ldr	r0, [pc, #412]	; (80058d4 <EndEffstateManagement+0x2cc>)
 8005736:	f001 fd55 	bl	80071e4 <HAL_GPIO_WritePin>
			}
			if(hi2c1.State == HAL_I2C_STATE_READY && Micros() - endEffLoopTime > 50000)
 800573a:	4b60      	ldr	r3, [pc, #384]	; (80058bc <EndEffstateManagement+0x2b4>)
 800573c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b20      	cmp	r3, #32
 8005744:	f040 80a8 	bne.w	8005898 <EndEffstateManagement+0x290>
 8005748:	f000 fb18 	bl	8005d7c <Micros>
 800574c:	4b60      	ldr	r3, [pc, #384]	; (80058d0 <EndEffstateManagement+0x2c8>)
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	1a84      	subs	r4, r0, r2
 8005754:	eb61 0503 	sbc.w	r5, r1, r3
 8005758:	f24c 3351 	movw	r3, #50001	; 0xc351
 800575c:	429c      	cmp	r4, r3
 800575e:	f175 0300 	sbcs.w	r3, r5, #0
 8005762:	f0c0 8099 	bcc.w	8005898 <EndEffstateManagement+0x290>
			{
				EndEffState = SetupReadStatus;
 8005766:	4b51      	ldr	r3, [pc, #324]	; (80058ac <EndEffstateManagement+0x2a4>)
 8005768:	2203      	movs	r2, #3
 800576a:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 800576c:	4b56      	ldr	r3, [pc, #344]	; (80058c8 <EndEffstateManagement+0x2c0>)
 800576e:	2201      	movs	r2, #1
 8005770:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005772:	e091      	b.n	8005898 <EndEffstateManagement+0x290>
		case SetupReadStatus:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 8005774:	4b4f      	ldr	r3, [pc, #316]	; (80058b4 <EndEffstateManagement+0x2ac>)
 8005776:	2223      	movs	r2, #35	; 0x23
 8005778:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 800577a:	484e      	ldr	r0, [pc, #312]	; (80058b4 <EndEffstateManagement+0x2ac>)
 800577c:	f000 f8ba 	bl	80058f4 <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8005780:	4b4e      	ldr	r3, [pc, #312]	; (80058bc <EndEffstateManagement+0x2b4>)
 8005782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b20      	cmp	r3, #32
 800578a:	f040 8087 	bne.w	800589c <EndEffstateManagement+0x294>
			{
				EndEffState = ReadStatus;
 800578e:	4b47      	ldr	r3, [pc, #284]	; (80058ac <EndEffstateManagement+0x2a4>)
 8005790:	2204      	movs	r2, #4
 8005792:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 8005794:	4b4d      	ldr	r3, [pc, #308]	; (80058cc <EndEffstateManagement+0x2c4>)
 8005796:	2201      	movs	r2, #1
 8005798:	701a      	strb	r2, [r3, #0]
			}
			break;
 800579a:	e07f      	b.n	800589c <EndEffstateManagement+0x294>
		case ReadStatus:
			I2CReadFcn(I2CRxDataBuffer);
 800579c:	4848      	ldr	r0, [pc, #288]	; (80058c0 <EndEffstateManagement+0x2b8>)
 800579e:	f000 f8cf 	bl	8005940 <I2CReadFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 80057a2:	4b46      	ldr	r3, [pc, #280]	; (80058bc <EndEffstateManagement+0x2b4>)
 80057a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	d178      	bne.n	80058a0 <EndEffstateManagement+0x298>
			{
				I2CEndEffectorReadFlag =  1;
 80057ae:	4b47      	ldr	r3, [pc, #284]	; (80058cc <EndEffstateManagement+0x2c4>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	701a      	strb	r2, [r3, #0]
				if(I2CRxDataBuffer[0] == 0x78)
 80057b4:	4b42      	ldr	r3, [pc, #264]	; (80058c0 <EndEffstateManagement+0x2b8>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b78      	cmp	r3, #120	; 0x78
 80057ba:	d141      	bne.n	8005840 <EndEffstateManagement+0x238>
				{
					check[5]++;
 80057bc:	4b3e      	ldr	r3, [pc, #248]	; (80058b8 <EndEffstateManagement+0x2b0>)
 80057be:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80057c2:	f112 0801 	adds.w	r8, r2, #1
 80057c6:	f143 0900 	adc.w	r9, r3, #0
 80057ca:	4b3b      	ldr	r3, [pc, #236]	; (80058b8 <EndEffstateManagement+0x2b0>)
 80057cc:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80057d0:	2200      	movs	r2, #0
 80057d2:	2110      	movs	r1, #16
 80057d4:	483f      	ldr	r0, [pc, #252]	; (80058d4 <EndEffstateManagement+0x2cc>)
 80057d6:	f001 fd05 	bl	80071e4 <HAL_GPIO_WritePin>
					EndEffState = idle;
 80057da:	4b34      	ldr	r3, [pc, #208]	; (80058ac <EndEffstateManagement+0x2a4>)
 80057dc:	2200      	movs	r2, #0
 80057de:	701a      	strb	r2, [r3, #0]
					EndEffStatus = AwaitCommand;
 80057e0:	4b33      	ldr	r3, [pc, #204]	; (80058b0 <EndEffstateManagement+0x2a8>)
 80057e2:	2203      	movs	r2, #3
 80057e4:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 80057e6:	4b3c      	ldr	r3, [pc, #240]	; (80058d8 <EndEffstateManagement+0x2d0>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	701a      	strb	r2, [r3, #0]
					if(RobotState != Emergency){
 80057ec:	4b3b      	ldr	r3, [pc, #236]	; (80058dc <EndEffstateManagement+0x2d4>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	d002      	beq.n	80057fa <EndEffstateManagement+0x1f2>
						RobotState = NormalOperation;
 80057f4:	4b39      	ldr	r3, [pc, #228]	; (80058dc <EndEffstateManagement+0x2d4>)
 80057f6:	2202      	movs	r2, #2
 80057f8:	701a      	strb	r2, [r3, #0]
					}
					if(doingTaskFlag == 1){
 80057fa:	4b39      	ldr	r3, [pc, #228]	; (80058e0 <EndEffstateManagement+0x2d8>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d14e      	bne.n	80058a0 <EndEffstateManagement+0x298>
						goalIDX++;
 8005802:	4b38      	ldr	r3, [pc, #224]	; (80058e4 <EndEffstateManagement+0x2dc>)
 8005804:	f993 3000 	ldrsb.w	r3, [r3]
 8005808:	b2db      	uxtb	r3, r3
 800580a:	3301      	adds	r3, #1
 800580c:	b2db      	uxtb	r3, r3
 800580e:	b25a      	sxtb	r2, r3
 8005810:	4b34      	ldr	r3, [pc, #208]	; (80058e4 <EndEffstateManagement+0x2dc>)
 8005812:	701a      	strb	r2, [r3, #0]
						if(goalIDX > goalAmount-1){
 8005814:	4b34      	ldr	r3, [pc, #208]	; (80058e8 <EndEffstateManagement+0x2e0>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	461a      	mov	r2, r3
 800581a:	4b32      	ldr	r3, [pc, #200]	; (80058e4 <EndEffstateManagement+0x2dc>)
 800581c:	f993 3000 	ldrsb.w	r3, [r3]
 8005820:	429a      	cmp	r2, r3
 8005822:	dc09      	bgt.n	8005838 <EndEffstateManagement+0x230>
							goalIDX = 0;
 8005824:	4b2f      	ldr	r3, [pc, #188]	; (80058e4 <EndEffstateManagement+0x2dc>)
 8005826:	2200      	movs	r2, #0
 8005828:	701a      	strb	r2, [r3, #0]
							goalFlag = 0;
 800582a:	4b30      	ldr	r3, [pc, #192]	; (80058ec <EndEffstateManagement+0x2e4>)
 800582c:	2200      	movs	r2, #0
 800582e:	701a      	strb	r2, [r3, #0]
							doingTaskFlag = 0;
 8005830:	4b2b      	ldr	r3, [pc, #172]	; (80058e0 <EndEffstateManagement+0x2d8>)
 8005832:	2200      	movs	r2, #0
 8005834:	701a      	strb	r2, [r3, #0]
					EndEffStatus = Closing;
					EndEffState = SetupReadStatus;
					I2CEndEffectorWriteFlag = 1;
				}
			}
			break;
 8005836:	e033      	b.n	80058a0 <EndEffstateManagement+0x298>
							notContinueFlag = 1;
 8005838:	4b2d      	ldr	r3, [pc, #180]	; (80058f0 <EndEffstateManagement+0x2e8>)
 800583a:	2201      	movs	r2, #1
 800583c:	701a      	strb	r2, [r3, #0]
			break;
 800583e:	e02f      	b.n	80058a0 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x12)
 8005840:	4b1f      	ldr	r3, [pc, #124]	; (80058c0 <EndEffstateManagement+0x2b8>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b12      	cmp	r3, #18
 8005846:	d109      	bne.n	800585c <EndEffstateManagement+0x254>
					EndEffStatus = Opening;
 8005848:	4b19      	ldr	r3, [pc, #100]	; (80058b0 <EndEffstateManagement+0x2a8>)
 800584a:	2200      	movs	r2, #0
 800584c:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 800584e:	4b17      	ldr	r3, [pc, #92]	; (80058ac <EndEffstateManagement+0x2a4>)
 8005850:	2203      	movs	r2, #3
 8005852:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8005854:	4b1c      	ldr	r3, [pc, #112]	; (80058c8 <EndEffstateManagement+0x2c0>)
 8005856:	2201      	movs	r2, #1
 8005858:	701a      	strb	r2, [r3, #0]
			break;
 800585a:	e021      	b.n	80058a0 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x34)
 800585c:	4b18      	ldr	r3, [pc, #96]	; (80058c0 <EndEffstateManagement+0x2b8>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b34      	cmp	r3, #52	; 0x34
 8005862:	d109      	bne.n	8005878 <EndEffstateManagement+0x270>
					EndEffStatus = Working;
 8005864:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <EndEffstateManagement+0x2a8>)
 8005866:	2202      	movs	r2, #2
 8005868:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 800586a:	4b10      	ldr	r3, [pc, #64]	; (80058ac <EndEffstateManagement+0x2a4>)
 800586c:	2203      	movs	r2, #3
 800586e:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8005870:	4b15      	ldr	r3, [pc, #84]	; (80058c8 <EndEffstateManagement+0x2c0>)
 8005872:	2201      	movs	r2, #1
 8005874:	701a      	strb	r2, [r3, #0]
			break;
 8005876:	e013      	b.n	80058a0 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x56)
 8005878:	4b11      	ldr	r3, [pc, #68]	; (80058c0 <EndEffstateManagement+0x2b8>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b56      	cmp	r3, #86	; 0x56
 800587e:	d10f      	bne.n	80058a0 <EndEffstateManagement+0x298>
					EndEffStatus = Closing;
 8005880:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <EndEffstateManagement+0x2a8>)
 8005882:	2201      	movs	r2, #1
 8005884:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8005886:	4b09      	ldr	r3, [pc, #36]	; (80058ac <EndEffstateManagement+0x2a4>)
 8005888:	2203      	movs	r2, #3
 800588a:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 800588c:	4b0e      	ldr	r3, [pc, #56]	; (80058c8 <EndEffstateManagement+0x2c0>)
 800588e:	2201      	movs	r2, #1
 8005890:	701a      	strb	r2, [r3, #0]
			break;
 8005892:	e005      	b.n	80058a0 <EndEffstateManagement+0x298>
		break;
 8005894:	bf00      	nop
 8005896:	e004      	b.n	80058a2 <EndEffstateManagement+0x29a>
			break;
 8005898:	bf00      	nop
 800589a:	e002      	b.n	80058a2 <EndEffstateManagement+0x29a>
			break;
 800589c:	bf00      	nop
 800589e:	e000      	b.n	80058a2 <EndEffstateManagement+0x29a>
			break;
 80058a0:	bf00      	nop
	}
}
 80058a2:	bf00      	nop
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ac:	20000000 	.word	0x20000000
 80058b0:	20000001 	.word	0x20000001
 80058b4:	20000b08 	.word	0x20000b08
 80058b8:	20000798 	.word	0x20000798
 80058bc:	20000464 	.word	0x20000464
 80058c0:	20000b04 	.word	0x20000b04
 80058c4:	2000076e 	.word	0x2000076e
 80058c8:	20000b01 	.word	0x20000b01
 80058cc:	20000b00 	.word	0x20000b00
 80058d0:	20000af0 	.word	0x20000af0
 80058d4:	40020400 	.word	0x40020400
 80058d8:	2000076a 	.word	0x2000076a
 80058dc:	20000711 	.word	0x20000711
 80058e0:	2000076c 	.word	0x2000076c
 80058e4:	20000768 	.word	0x20000768
 80058e8:	20000767 	.word	0x20000767
 80058ec:	20000769 	.word	0x20000769
 80058f0:	2000076f 	.word	0x2000076f

080058f4 <I2CWriteFcn>:

void I2CWriteFcn(uint8_t *Wdata) {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorWriteFlag == 1  && hi2c1.State == HAL_I2C_STATE_READY) {
 80058fc:	4b0d      	ldr	r3, [pc, #52]	; (8005934 <I2CWriteFcn+0x40>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d112      	bne.n	800592a <I2CWriteFcn+0x36>
 8005904:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <I2CWriteFcn+0x44>)
 8005906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b20      	cmp	r3, #32
 800590e:	d10c      	bne.n	800592a <I2CWriteFcn+0x36>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	781a      	ldrb	r2, [r3, #0]
		static uint8_t data[EndEffRxBuf_SIZE];
		memcpy ((uint8_t *)data, (uint8_t *)Wdata, EndEffRxBuf_SIZE);
 8005914:	4b09      	ldr	r3, [pc, #36]	; (800593c <I2CWriteFcn+0x48>)
 8005916:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, Endeff_ADDR, data, I2CTxDataLen);
 8005918:	2301      	movs	r3, #1
 800591a:	4a08      	ldr	r2, [pc, #32]	; (800593c <I2CWriteFcn+0x48>)
 800591c:	2146      	movs	r1, #70	; 0x46
 800591e:	4806      	ldr	r0, [pc, #24]	; (8005938 <I2CWriteFcn+0x44>)
 8005920:	f001 fdf0 	bl	8007504 <HAL_I2C_Master_Transmit_IT>
		I2CEndEffectorWriteFlag = 0;
 8005924:	4b03      	ldr	r3, [pc, #12]	; (8005934 <I2CWriteFcn+0x40>)
 8005926:	2200      	movs	r2, #0
 8005928:	701a      	strb	r2, [r3, #0]
	}
}
 800592a:	bf00      	nop
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20000b01 	.word	0x20000b01
 8005938:	20000464 	.word	0x20000464
 800593c:	20000b1c 	.word	0x20000b1c

08005940 <I2CReadFcn>:
void I2CReadFcn(uint8_t *Rdata) {
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY) {
 8005948:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <I2CReadFcn+0x38>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d10e      	bne.n	800596e <I2CReadFcn+0x2e>
 8005950:	4b0a      	ldr	r3, [pc, #40]	; (800597c <I2CReadFcn+0x3c>)
 8005952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b20      	cmp	r3, #32
 800595a:	d108      	bne.n	800596e <I2CReadFcn+0x2e>
		HAL_I2C_Master_Receive_IT(&hi2c1, Endeff_ADDR, Rdata, I2CRxDataLen);
 800595c:	2301      	movs	r3, #1
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	2146      	movs	r1, #70	; 0x46
 8005962:	4806      	ldr	r0, [pc, #24]	; (800597c <I2CReadFcn+0x3c>)
 8005964:	f001 fe74 	bl	8007650 <HAL_I2C_Master_Receive_IT>
		I2CEndEffectorReadFlag =  0;
 8005968:	4b03      	ldr	r3, [pc, #12]	; (8005978 <I2CReadFcn+0x38>)
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]
	}
}
 800596e:	bf00      	nop
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20000b00 	.word	0x20000b00
 800597c:	20000464 	.word	0x20000464

08005980 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005980:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
 8005988:	4603      	mov	r3, r0
 800598a:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800598c:	88fb      	ldrh	r3, [r7, #6]
 800598e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005992:	d103      	bne.n	800599c <HAL_GPIO_EXTI_Callback+0x1c>
	{
//		I2CEndEffectorWriteFlag = 1;
//		I2CEndEffectorReadFlag =  1;
//		EndEffState = CheckBeforRun;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8005994:	2108      	movs	r1, #8
 8005996:	483e      	ldr	r0, [pc, #248]	; (8005a90 <HAL_GPIO_EXTI_Callback+0x110>)
 8005998:	f001 fc3d 	bl	8007216 <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_10)
 800599c:	88fb      	ldrh	r3, [r7, #6]
 800599e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a2:	d13e      	bne.n	8005a22 <HAL_GPIO_EXTI_Callback+0xa2>
	{
		// Proxi Sensor
		if(Robot.flagSethome == 1)
 80059a4:	4b3b      	ldr	r3, [pc, #236]	; (8005a94 <HAL_GPIO_EXTI_Callback+0x114>)
 80059a6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d139      	bne.n	8005a22 <HAL_GPIO_EXTI_Callback+0xa2>
		{
			homePoint[homeFF] = PositionDeg[0];
 80059ae:	4b3a      	ldr	r3, [pc, #232]	; (8005a98 <HAL_GPIO_EXTI_Callback+0x118>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	4b39      	ldr	r3, [pc, #228]	; (8005a9c <HAL_GPIO_EXTI_Callback+0x11c>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	4939      	ldr	r1, [pc, #228]	; (8005aa0 <HAL_GPIO_EXTI_Callback+0x120>)
 80059ba:	0083      	lsls	r3, r0, #2
 80059bc:	440b      	add	r3, r1
 80059be:	601a      	str	r2, [r3, #0]
			homeFF++;
 80059c0:	4b35      	ldr	r3, [pc, #212]	; (8005a98 <HAL_GPIO_EXTI_Callback+0x118>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	3301      	adds	r3, #1
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	4b33      	ldr	r3, [pc, #204]	; (8005a98 <HAL_GPIO_EXTI_Callback+0x118>)
 80059ca:	701a      	strb	r2, [r3, #0]
			if(homeFF == 2)
 80059cc:	4b32      	ldr	r3, [pc, #200]	; (8005a98 <HAL_GPIO_EXTI_Callback+0x118>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d126      	bne.n	8005a22 <HAL_GPIO_EXTI_Callback+0xa2>
			{
				if(homePoint[1]-homePoint[0] > 180.0)
 80059d4:	4b32      	ldr	r3, [pc, #200]	; (8005aa0 <HAL_GPIO_EXTI_Callback+0x120>)
 80059d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80059da:	4b31      	ldr	r3, [pc, #196]	; (8005aa0 <HAL_GPIO_EXTI_Callback+0x120>)
 80059dc:	edd3 7a00 	vldr	s15, [r3]
 80059e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059e4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005aa4 <HAL_GPIO_EXTI_Callback+0x124>
 80059e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f0:	dd04      	ble.n	80059fc <HAL_GPIO_EXTI_Callback+0x7c>
				{
					Robot.HomePositon =  0;
 80059f2:	4b28      	ldr	r3, [pc, #160]	; (8005a94 <HAL_GPIO_EXTI_Callback+0x114>)
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	615a      	str	r2, [r3, #20]
 80059fa:	e00e      	b.n	8005a1a <HAL_GPIO_EXTI_Callback+0x9a>
				}
				else
				{
					Robot.HomePositon = (homePoint[0]+homePoint[1])/2.0;
 80059fc:	4b28      	ldr	r3, [pc, #160]	; (8005aa0 <HAL_GPIO_EXTI_Callback+0x120>)
 80059fe:	ed93 7a00 	vldr	s14, [r3]
 8005a02:	4b27      	ldr	r3, [pc, #156]	; (8005aa0 <HAL_GPIO_EXTI_Callback+0x120>)
 8005a04:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a14:	4b1f      	ldr	r3, [pc, #124]	; (8005a94 <HAL_GPIO_EXTI_Callback+0x114>)
 8005a16:	edc3 7a05 	vstr	s15, [r3, #20]
				}
				Robot.flagSethome = 2;
 8005a1a:	4b1e      	ldr	r3, [pc, #120]	; (8005a94 <HAL_GPIO_EXTI_Callback+0x114>)
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			}
		}
	}
	if(GPIO_Pin == GPIO_PIN_5)
 8005a22:	88fb      	ldrh	r3, [r7, #6]
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	d12e      	bne.n	8005a86 <HAL_GPIO_EXTI_Callback+0x106>
	{
		if(EmertimeoutFlag == 0)
 8005a28:	4b1f      	ldr	r3, [pc, #124]	; (8005aa8 <HAL_GPIO_EXTI_Callback+0x128>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d102      	bne.n	8005a36 <HAL_GPIO_EXTI_Callback+0xb6>
		{
			EmertimeoutFlag = 1;
 8005a30:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <HAL_GPIO_EXTI_Callback+0x128>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	701a      	strb	r2, [r3, #0]
		}

		if(Micros() - EmergencycalloutTime > 100000 && EmertimeoutFlag == 1)
 8005a36:	f000 f9a1 	bl	8005d7c <Micros>
 8005a3a:	4b1c      	ldr	r3, [pc, #112]	; (8005aac <HAL_GPIO_EXTI_Callback+0x12c>)
 8005a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a40:	1a84      	subs	r4, r0, r2
 8005a42:	eb61 0503 	sbc.w	r5, r1, r3
 8005a46:	4b1a      	ldr	r3, [pc, #104]	; (8005ab0 <HAL_GPIO_EXTI_Callback+0x130>)
 8005a48:	429c      	cmp	r4, r3
 8005a4a:	f175 0300 	sbcs.w	r3, r5, #0
 8005a4e:	d31a      	bcc.n	8005a86 <HAL_GPIO_EXTI_Callback+0x106>
 8005a50:	4b15      	ldr	r3, [pc, #84]	; (8005aa8 <HAL_GPIO_EXTI_Callback+0x128>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d116      	bne.n	8005a86 <HAL_GPIO_EXTI_Callback+0x106>
		{
			check[6]++;
 8005a58:	4b16      	ldr	r3, [pc, #88]	; (8005ab4 <HAL_GPIO_EXTI_Callback+0x134>)
 8005a5a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005a5e:	f112 0801 	adds.w	r8, r2, #1
 8005a62:	f143 0900 	adc.w	r9, r3, #0
 8005a66:	4b13      	ldr	r3, [pc, #76]	; (8005ab4 <HAL_GPIO_EXTI_Callback+0x134>)
 8005a68:	e9c3 890c 	strd	r8, r9, [r3, #48]	; 0x30
			EmergencycalloutTime = Micros();
 8005a6c:	f000 f986 	bl	8005d7c <Micros>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	490d      	ldr	r1, [pc, #52]	; (8005aac <HAL_GPIO_EXTI_Callback+0x12c>)
 8005a76:	e9c1 2300 	strd	r2, r3, [r1]
			EmertimeoutFlag = 0;
 8005a7a:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <HAL_GPIO_EXTI_Callback+0x128>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	701a      	strb	r2, [r3, #0]
			//Docode
			HAL_TIM_Base_Start_IT(&htim5);
 8005a80:	480d      	ldr	r0, [pc, #52]	; (8005ab8 <HAL_GPIO_EXTI_Callback+0x138>)
 8005a82:	f004 f857 	bl	8009b34 <HAL_TIM_Base_Start_IT>
		}
	}
}
 8005a86:	bf00      	nop
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005a90:	40020400 	.word	0x40020400
 8005a94:	200006dc 	.word	0x200006dc
 8005a98:	20000704 	.word	0x20000704
 8005a9c:	200007f8 	.word	0x200007f8
 8005aa0:	20000708 	.word	0x20000708
 8005aa4:	43340000 	.word	0x43340000
 8005aa8:	20000ae8 	.word	0x20000ae8
 8005aac:	20000ae0 	.word	0x20000ae0
 8005ab0:	000186a1 	.word	0x000186a1
 8005ab4:	20000798 	.word	0x20000798
 8005ab8:	20000548 	.word	0x20000548

08005abc <RobotRunToPositon>:
void RobotRunToPositon(float Destination , float VeloInput)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	ed87 0a01 	vstr	s0, [r7, #4]
 8005ac6:	edc7 0a00 	vstr	s1, [r7]
	Robot.GoalPositon = Destination;
 8005aca:	4a16      	ldr	r2, [pc, #88]	; (8005b24 <RobotRunToPositon+0x68>)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	60d3      	str	r3, [r2, #12]
	Robot.QVMax = VeloInput;
 8005ad0:	4a14      	ldr	r2, [pc, #80]	; (8005b24 <RobotRunToPositon+0x68>)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	6213      	str	r3, [r2, #32]
	CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 8005ad6:	4b13      	ldr	r3, [pc, #76]	; (8005b24 <RobotRunToPositon+0x68>)
 8005ad8:	edd3 7a00 	vldr	s15, [r3]
 8005adc:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <RobotRunToPositon+0x68>)
 8005ade:	ed93 7a03 	vldr	s14, [r3, #12]
 8005ae2:	4b10      	ldr	r3, [pc, #64]	; (8005b24 <RobotRunToPositon+0x68>)
 8005ae4:	edd3 6a08 	vldr	s13, [r3, #32]
 8005ae8:	eeb0 1a66 	vmov.f32	s2, s13
 8005aec:	eef0 0a47 	vmov.f32	s1, s14
 8005af0:	eeb0 0a67 	vmov.f32	s0, s15
 8005af4:	480c      	ldr	r0, [pc, #48]	; (8005b28 <RobotRunToPositon+0x6c>)
 8005af6:	f7fb ff8f 	bl	8001a18 <CoefficientAndTimeCalculation>
	// Start Trajectory Evaluator
	Robot.MotorIsOn = 1;
 8005afa:	4b0a      	ldr	r3, [pc, #40]	; (8005b24 <RobotRunToPositon+0x68>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Robot.flagStartTime = 1;
 8005b02:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <RobotRunToPositon+0x68>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Robot.RunningFlag = 1;
 8005b0a:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <RobotRunToPositon+0x68>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8005b12:	2201      	movs	r2, #1
 8005b14:	2108      	movs	r1, #8
 8005b16:	4805      	ldr	r0, [pc, #20]	; (8005b2c <RobotRunToPositon+0x70>)
 8005b18:	f001 fb64 	bl	80071e4 <HAL_GPIO_WritePin>
}
 8005b1c:	bf00      	nop
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	200006dc 	.word	0x200006dc
 8005b28:	2000086c 	.word	0x2000086c
 8005b2c:	40020400 	.word	0x40020400

08005b30 <RobotResetAll>:


void RobotResetAll()
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
	// Reset Encoder
	TIM_ResetCounter(TIM2);
 8005b34:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005b38:	f000 f866 	bl	8005c08 <TIM_ResetCounter>
	EncoderRawData[0] = 0;
 8005b3c:	4b23      	ldr	r3, [pc, #140]	; (8005bcc <RobotResetAll+0x9c>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]
	EncoderRawData[1] = 0;
 8005b42:	4b22      	ldr	r3, [pc, #136]	; (8005bcc <RobotResetAll+0x9c>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	605a      	str	r2, [r3, #4]
	WrappingStep = 0;
 8005b48:	4b21      	ldr	r3, [pc, #132]	; (8005bd0 <RobotResetAll+0xa0>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]
	// Reset Trajectory
	CoefficientAndTimeCalculation(&traject,0.0,0.0,60);
 8005b4e:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8005bd4 <RobotResetAll+0xa4>
 8005b52:	eddf 0a21 	vldr	s1, [pc, #132]	; 8005bd8 <RobotResetAll+0xa8>
 8005b56:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8005bd8 <RobotResetAll+0xa8>
 8005b5a:	4820      	ldr	r0, [pc, #128]	; (8005bdc <RobotResetAll+0xac>)
 8005b5c:	f7fb ff5c 	bl	8001a18 <CoefficientAndTimeCalculation>
	Robot.flagStartTime = 1;
 8005b60:	4b1f      	ldr	r3, [pc, #124]	; (8005be0 <RobotResetAll+0xb0>)
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	StartTime = 0;
 8005b68:	491e      	ldr	r1, [pc, #120]	; (8005be4 <RobotResetAll+0xb4>)
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	f04f 0300 	mov.w	r3, #0
 8005b72:	e9c1 2300 	strd	r2, r3, [r1]
	CurrentTime = 0;
 8005b76:	491c      	ldr	r1, [pc, #112]	; (8005be8 <RobotResetAll+0xb8>)
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	e9c1 2300 	strd	r2, r3, [r1]
	// Reset Position
	PositionDeg[0] = 0;
 8005b84:	4b19      	ldr	r3, [pc, #100]	; (8005bec <RobotResetAll+0xbc>)
 8005b86:	f04f 0200 	mov.w	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]
	PositionDeg[1] = 0;
 8005b8c:	4b17      	ldr	r3, [pc, #92]	; (8005bec <RobotResetAll+0xbc>)
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	605a      	str	r2, [r3, #4]
	KalmanMatrixReset(&KalmanVar, Pvar);
 8005b94:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8005bf0 <RobotResetAll+0xc0>
 8005b98:	4816      	ldr	r0, [pc, #88]	; (8005bf4 <RobotResetAll+0xc4>)
 8005b9a:	f7fb fa45 	bl	8001028 <KalmanMatrixReset>
	Robotinit(&Robot);
 8005b9e:	4810      	ldr	r0, [pc, #64]	; (8005be0 <RobotResetAll+0xb0>)
 8005ba0:	f7fb feac 	bl	80018fc <Robotinit>
	// Reset Pid
	PIDAController_Init(&PidVelo);
 8005ba4:	4814      	ldr	r0, [pc, #80]	; (8005bf8 <RobotResetAll+0xc8>)
 8005ba6:	f7fb fbed 	bl	8001384 <PIDAController_Init>
	PIDAController_Init(&PidPos);
 8005baa:	4814      	ldr	r0, [pc, #80]	; (8005bfc <RobotResetAll+0xcc>)
 8005bac:	f7fb fbea 	bl	8001384 <PIDAController_Init>
	// Reset Home Buffer
	homePoint[0] = 0;
 8005bb0:	4b13      	ldr	r3, [pc, #76]	; (8005c00 <RobotResetAll+0xd0>)
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]
	homePoint[1] = 0;
 8005bb8:	4b11      	ldr	r3, [pc, #68]	; (8005c00 <RobotResetAll+0xd0>)
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	605a      	str	r2, [r3, #4]
	homeFF = 0;
 8005bc0:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <RobotResetAll+0xd4>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	701a      	strb	r2, [r3, #0]
}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	200007e8 	.word	0x200007e8
 8005bd0:	200007f0 	.word	0x200007f0
 8005bd4:	42700000 	.word	0x42700000
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	2000086c 	.word	0x2000086c
 8005be0:	200006dc 	.word	0x200006dc
 8005be4:	20000ab0 	.word	0x20000ab0
 8005be8:	20000ab8 	.word	0x20000ab8
 8005bec:	200007f8 	.word	0x200007f8
 8005bf0:	447a0000 	.word	0x447a0000
 8005bf4:	20000034 	.word	0x20000034
 8005bf8:	20000808 	.word	0x20000808
 8005bfc:	20000838 	.word	0x20000838
 8005c00:	20000708 	.word	0x20000708
 8005c04:	20000704 	.word	0x20000704

08005c08 <TIM_ResetCounter>:

void TIM_ResetCounter(TIM_TypeDef* TIMx)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Reset the Counter Register value */
  TIMx->CNT = 0;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
	...

08005c24 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a47      	ldr	r2, [pc, #284]	; (8005d50 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d10b      	bne.n	8005c4e <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micro += 65535;
 8005c36:	4b47      	ldr	r3, [pc, #284]	; (8005d54 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c40:	eb12 0a01 	adds.w	sl, r2, r1
 8005c44:	f143 0b00 	adc.w	fp, r3, #0
 8005c48:	4b42      	ldr	r3, [pc, #264]	; (8005d54 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005c4a:	e9c3 ab00 	strd	sl, fp, [r3]
	}
	if (htim == &htim5){
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a41      	ldr	r2, [pc, #260]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d177      	bne.n	8005d46 <HAL_TIM_PeriodElapsedCallback+0x122>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET)
 8005c56:	2120      	movs	r1, #32
 8005c58:	4840      	ldr	r0, [pc, #256]	; (8005d5c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005c5a:	f001 faab 	bl	80071b4 <HAL_GPIO_ReadPin>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d15b      	bne.n	8005d1c <HAL_TIM_PeriodElapsedCallback+0xf8>
		{
			check[7]++;
 8005c64:	4b3e      	ldr	r3, [pc, #248]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005c66:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005c6a:	f112 0801 	adds.w	r8, r2, #1
 8005c6e:	f143 0900 	adc.w	r9, r3, #0
 8005c72:	4b3b      	ldr	r3, [pc, #236]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005c74:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
			if(EndEffState != idle)
 8005c78:	4b3a      	ldr	r3, [pc, #232]	; (8005d64 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_TIM_PeriodElapsedCallback+0x64>
			{
				RobotState = EndEff;
 8005c80:	4b39      	ldr	r3, [pc, #228]	; (8005d68 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005c82:	2203      	movs	r2, #3
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	e002      	b.n	8005c8e <HAL_TIM_PeriodElapsedCallback+0x6a>
			}
			else
			{
				RobotState = NormalOperation;
 8005c88:	4b37      	ldr	r3, [pc, #220]	; (8005d68 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c94:	4831      	ldr	r0, [pc, #196]	; (8005d5c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005c96:	f001 faa5 	bl	80071e4 <HAL_GPIO_WritePin>
			if((doingTaskFlag == 1 && goingToGoalFlag == 1) || homingFlag == 1)
 8005c9a:	4b34      	ldr	r3, [pc, #208]	; (8005d6c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d103      	bne.n	8005caa <HAL_TIM_PeriodElapsedCallback+0x86>
 8005ca2:	4b33      	ldr	r3, [pc, #204]	; (8005d70 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d003      	beq.n	8005cb2 <HAL_TIM_PeriodElapsedCallback+0x8e>
 8005caa:	4b32      	ldr	r3, [pc, #200]	; (8005d74 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d10b      	bne.n	8005cca <HAL_TIM_PeriodElapsedCallback+0xa6>
			{
				RobotRunToPositon(Robot.GoalPositon,Robot.QVMax);
 8005cb2:	4b31      	ldr	r3, [pc, #196]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005cb4:	edd3 7a03 	vldr	s15, [r3, #12]
 8005cb8:	4b2f      	ldr	r3, [pc, #188]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005cba:	ed93 7a08 	vldr	s14, [r3, #32]
 8005cbe:	eef0 0a47 	vmov.f32	s1, s14
 8005cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8005cc6:	f7ff fef9 	bl	8005abc <RobotRunToPositon>
			}
			if(Robot.flagSethome == 1){
 8005cca:	4b2b      	ldr	r3, [pc, #172]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005ccc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d105      	bne.n	8005ce0 <HAL_TIM_PeriodElapsedCallback+0xbc>
				RobotResetAll();
 8005cd4:	f7ff ff2c 	bl	8005b30 <RobotResetAll>
				RobotState = init;
 8005cd8:	4b23      	ldr	r3, [pc, #140]	; (8005d68 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	e02f      	b.n	8005d40 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
			else if(Robot.flagSethome == 2 || Robot.flagSethome == 3)
 8005ce0:	4b25      	ldr	r3, [pc, #148]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005ce2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d004      	beq.n	8005cf4 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8005cea:	4b23      	ldr	r3, [pc, #140]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005cec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d125      	bne.n	8005d40 <HAL_TIM_PeriodElapsedCallback+0x11c>
			{
				Robot.flagSethome = 3;
 8005cf4:	4b20      	ldr	r3, [pc, #128]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005cf6:	2203      	movs	r2, #3
 8005cf8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				RobotRunToPositon(Robot.HomePositon,Robot.QVMax);
 8005cfc:	4b1e      	ldr	r3, [pc, #120]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005cfe:	edd3 7a05 	vldr	s15, [r3, #20]
 8005d02:	4b1d      	ldr	r3, [pc, #116]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005d04:	ed93 7a08 	vldr	s14, [r3, #32]
 8005d08:	eef0 0a47 	vmov.f32	s1, s14
 8005d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d10:	f7ff fed4 	bl	8005abc <RobotRunToPositon>
				RobotState = FindHome;
 8005d14:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	e011      	b.n	8005d40 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
		}
		else
		{
			check[8]++;
 8005d1c:	4b10      	ldr	r3, [pc, #64]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005d1e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8005d22:	1c54      	adds	r4, r2, #1
 8005d24:	f143 0500 	adc.w	r5, r3, #0
 8005d28:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005d2a:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
			RobotState = Emergency;
 8005d2e:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005d30:	2204      	movs	r2, #4
 8005d32:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8005d34:	2201      	movs	r2, #1
 8005d36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d3a:	4808      	ldr	r0, [pc, #32]	; (8005d5c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005d3c:	f001 fa52 	bl	80071e4 <HAL_GPIO_WritePin>
		}
		HAL_TIM_Base_Stop_IT(&htim5);
 8005d40:	4805      	ldr	r0, [pc, #20]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005d42:	f003 ff59 	bl	8009bf8 <HAL_TIM_Base_Stop_IT>
	}
}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d50:	20000590 	.word	0x20000590
 8005d54:	20000778 	.word	0x20000778
 8005d58:	20000548 	.word	0x20000548
 8005d5c:	40020400 	.word	0x40020400
 8005d60:	20000798 	.word	0x20000798
 8005d64:	20000000 	.word	0x20000000
 8005d68:	20000711 	.word	0x20000711
 8005d6c:	2000076c 	.word	0x2000076c
 8005d70:	2000076d 	.word	0x2000076d
 8005d74:	2000076b 	.word	0x2000076b
 8005d78:	200006dc 	.word	0x200006dc

08005d7c <Micros>:

uint64_t Micros(){
 8005d7c:	b4b0      	push	{r4, r5, r7}
 8005d7e:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8005d80:	4b08      	ldr	r3, [pc, #32]	; (8005da4 <Micros+0x28>)
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	2200      	movs	r2, #0
 8005d86:	4618      	mov	r0, r3
 8005d88:	4611      	mov	r1, r2
 8005d8a:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <Micros+0x2c>)
 8005d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d90:	1884      	adds	r4, r0, r2
 8005d92:	eb41 0503 	adc.w	r5, r1, r3
 8005d96:	4622      	mov	r2, r4
 8005d98:	462b      	mov	r3, r5
}
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bcb0      	pop	{r4, r5, r7}
 8005da2:	4770      	bx	lr
 8005da4:	40014800 	.word	0x40014800
 8005da8:	20000778 	.word	0x20000778

08005dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005db0:	b672      	cpsid	i
}
 8005db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005db4:	e7fe      	b.n	8005db4 <Error_Handler+0x8>
	...

08005db8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	607b      	str	r3, [r7, #4]
 8005dc2:	4b10      	ldr	r3, [pc, #64]	; (8005e04 <HAL_MspInit+0x4c>)
 8005dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc6:	4a0f      	ldr	r2, [pc, #60]	; (8005e04 <HAL_MspInit+0x4c>)
 8005dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8005dce:	4b0d      	ldr	r3, [pc, #52]	; (8005e04 <HAL_MspInit+0x4c>)
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dd6:	607b      	str	r3, [r7, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dda:	2300      	movs	r3, #0
 8005ddc:	603b      	str	r3, [r7, #0]
 8005dde:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <HAL_MspInit+0x4c>)
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	4a08      	ldr	r2, [pc, #32]	; (8005e04 <HAL_MspInit+0x4c>)
 8005de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de8:	6413      	str	r3, [r2, #64]	; 0x40
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <HAL_MspInit+0x4c>)
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005df6:	2007      	movs	r0, #7
 8005df8:	f000 fc06 	bl	8006608 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005dfc:	bf00      	nop
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40023800 	.word	0x40023800

08005e08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08a      	sub	sp, #40	; 0x28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e10:	f107 0314 	add.w	r3, r7, #20
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	609a      	str	r2, [r3, #8]
 8005e1c:	60da      	str	r2, [r3, #12]
 8005e1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a21      	ldr	r2, [pc, #132]	; (8005eac <HAL_I2C_MspInit+0xa4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d13c      	bne.n	8005ea4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	4b20      	ldr	r3, [pc, #128]	; (8005eb0 <HAL_I2C_MspInit+0xa8>)
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	4a1f      	ldr	r2, [pc, #124]	; (8005eb0 <HAL_I2C_MspInit+0xa8>)
 8005e34:	f043 0302 	orr.w	r3, r3, #2
 8005e38:	6313      	str	r3, [r2, #48]	; 0x30
 8005e3a:	4b1d      	ldr	r3, [pc, #116]	; (8005eb0 <HAL_I2C_MspInit+0xa8>)
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	613b      	str	r3, [r7, #16]
 8005e44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005e46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e4c:	2312      	movs	r3, #18
 8005e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e54:	2303      	movs	r3, #3
 8005e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005e58:	2304      	movs	r3, #4
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e5c:	f107 0314 	add.w	r3, r7, #20
 8005e60:	4619      	mov	r1, r3
 8005e62:	4814      	ldr	r0, [pc, #80]	; (8005eb4 <HAL_I2C_MspInit+0xac>)
 8005e64:	f001 f822 	bl	8006eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	4b10      	ldr	r3, [pc, #64]	; (8005eb0 <HAL_I2C_MspInit+0xa8>)
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e70:	4a0f      	ldr	r2, [pc, #60]	; (8005eb0 <HAL_I2C_MspInit+0xa8>)
 8005e72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e76:	6413      	str	r3, [r2, #64]	; 0x40
 8005e78:	4b0d      	ldr	r3, [pc, #52]	; (8005eb0 <HAL_I2C_MspInit+0xa8>)
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005e84:	2200      	movs	r2, #0
 8005e86:	2100      	movs	r1, #0
 8005e88:	201f      	movs	r0, #31
 8005e8a:	f000 fbc8 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005e8e:	201f      	movs	r0, #31
 8005e90:	f000 fbe1 	bl	8006656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005e94:	2200      	movs	r2, #0
 8005e96:	2100      	movs	r1, #0
 8005e98:	2020      	movs	r0, #32
 8005e9a:	f000 fbc0 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005e9e:	2020      	movs	r0, #32
 8005ea0:	f000 fbd9 	bl	8006656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005ea4:	bf00      	nop
 8005ea6:	3728      	adds	r7, #40	; 0x28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40005400 	.word	0x40005400
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	40020400 	.word	0x40020400

08005eb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a0e      	ldr	r2, [pc, #56]	; (8005f00 <HAL_TIM_PWM_MspInit+0x48>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d115      	bne.n	8005ef6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <HAL_TIM_PWM_MspInit+0x4c>)
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed2:	4a0c      	ldr	r2, [pc, #48]	; (8005f04 <HAL_TIM_PWM_MspInit+0x4c>)
 8005ed4:	f043 0301 	orr.w	r3, r3, #1
 8005ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8005eda:	4b0a      	ldr	r3, [pc, #40]	; (8005f04 <HAL_TIM_PWM_MspInit+0x4c>)
 8005edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2100      	movs	r1, #0
 8005eea:	201a      	movs	r0, #26
 8005eec:	f000 fb97 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005ef0:	201a      	movs	r0, #26
 8005ef2:	f000 fbb0 	bl	8006656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005ef6:	bf00      	nop
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40010000 	.word	0x40010000
 8005f04:	40023800 	.word	0x40023800

08005f08 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08a      	sub	sp, #40	; 0x28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f10:	f107 0314 	add.w	r3, r7, #20
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	60da      	str	r2, [r3, #12]
 8005f1e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f28:	d12b      	bne.n	8005f82 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	613b      	str	r3, [r7, #16]
 8005f2e:	4b17      	ldr	r3, [pc, #92]	; (8005f8c <HAL_TIM_Encoder_MspInit+0x84>)
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	4a16      	ldr	r2, [pc, #88]	; (8005f8c <HAL_TIM_Encoder_MspInit+0x84>)
 8005f34:	f043 0301 	orr.w	r3, r3, #1
 8005f38:	6413      	str	r3, [r2, #64]	; 0x40
 8005f3a:	4b14      	ldr	r3, [pc, #80]	; (8005f8c <HAL_TIM_Encoder_MspInit+0x84>)
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	613b      	str	r3, [r7, #16]
 8005f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	4b10      	ldr	r3, [pc, #64]	; (8005f8c <HAL_TIM_Encoder_MspInit+0x84>)
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	4a0f      	ldr	r2, [pc, #60]	; (8005f8c <HAL_TIM_Encoder_MspInit+0x84>)
 8005f50:	f043 0301 	orr.w	r3, r3, #1
 8005f54:	6313      	str	r3, [r2, #48]	; 0x30
 8005f56:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <HAL_TIM_Encoder_MspInit+0x84>)
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f62:	2303      	movs	r3, #3
 8005f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f66:	2302      	movs	r3, #2
 8005f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005f72:	2301      	movs	r3, #1
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f76:	f107 0314 	add.w	r3, r7, #20
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4804      	ldr	r0, [pc, #16]	; (8005f90 <HAL_TIM_Encoder_MspInit+0x88>)
 8005f7e:	f000 ff95 	bl	8006eac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005f82:	bf00      	nop
 8005f84:	3728      	adds	r7, #40	; 0x28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	40020000 	.word	0x40020000

08005f94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a1c      	ldr	r2, [pc, #112]	; (8006014 <HAL_TIM_Base_MspInit+0x80>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d116      	bne.n	8005fd4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	4b1b      	ldr	r3, [pc, #108]	; (8006018 <HAL_TIM_Base_MspInit+0x84>)
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	4a1a      	ldr	r2, [pc, #104]	; (8006018 <HAL_TIM_Base_MspInit+0x84>)
 8005fb0:	f043 0308 	orr.w	r3, r3, #8
 8005fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fb6:	4b18      	ldr	r3, [pc, #96]	; (8006018 <HAL_TIM_Base_MspInit+0x84>)
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	2032      	movs	r0, #50	; 0x32
 8005fc8:	f000 fb29 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005fcc:	2032      	movs	r0, #50	; 0x32
 8005fce:	f000 fb42 	bl	8006656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8005fd2:	e01a      	b.n	800600a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a10      	ldr	r2, [pc, #64]	; (800601c <HAL_TIM_Base_MspInit+0x88>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d115      	bne.n	800600a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	4b0d      	ldr	r3, [pc, #52]	; (8006018 <HAL_TIM_Base_MspInit+0x84>)
 8005fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe6:	4a0c      	ldr	r2, [pc, #48]	; (8006018 <HAL_TIM_Base_MspInit+0x84>)
 8005fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fec:	6453      	str	r3, [r2, #68]	; 0x44
 8005fee:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <HAL_TIM_Base_MspInit+0x84>)
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ff6:	60bb      	str	r3, [r7, #8]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	201a      	movs	r0, #26
 8006000:	f000 fb0d 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006004:	201a      	movs	r0, #26
 8006006:	f000 fb26 	bl	8006656 <HAL_NVIC_EnableIRQ>
}
 800600a:	bf00      	nop
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	40000c00 	.word	0x40000c00
 8006018:	40023800 	.word	0x40023800
 800601c:	40014800 	.word	0x40014800

08006020 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006028:	f107 030c 	add.w	r3, r7, #12
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	605a      	str	r2, [r3, #4]
 8006032:	609a      	str	r2, [r3, #8]
 8006034:	60da      	str	r2, [r3, #12]
 8006036:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a12      	ldr	r2, [pc, #72]	; (8006088 <HAL_TIM_MspPostInit+0x68>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d11e      	bne.n	8006080 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006042:	2300      	movs	r3, #0
 8006044:	60bb      	str	r3, [r7, #8]
 8006046:	4b11      	ldr	r3, [pc, #68]	; (800608c <HAL_TIM_MspPostInit+0x6c>)
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	4a10      	ldr	r2, [pc, #64]	; (800608c <HAL_TIM_MspPostInit+0x6c>)
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	6313      	str	r3, [r2, #48]	; 0x30
 8006052:	4b0e      	ldr	r3, [pc, #56]	; (800608c <HAL_TIM_MspPostInit+0x6c>)
 8006054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	60bb      	str	r3, [r7, #8]
 800605c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800605e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006062:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006064:	2302      	movs	r3, #2
 8006066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006068:	2300      	movs	r3, #0
 800606a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800606c:	2300      	movs	r3, #0
 800606e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006070:	2301      	movs	r3, #1
 8006072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006074:	f107 030c 	add.w	r3, r7, #12
 8006078:	4619      	mov	r1, r3
 800607a:	4805      	ldr	r0, [pc, #20]	; (8006090 <HAL_TIM_MspPostInit+0x70>)
 800607c:	f000 ff16 	bl	8006eac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006080:	bf00      	nop
 8006082:	3720      	adds	r7, #32
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40010000 	.word	0x40010000
 800608c:	40023800 	.word	0x40023800
 8006090:	40020000 	.word	0x40020000

08006094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08a      	sub	sp, #40	; 0x28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800609c:	f107 0314 	add.w	r3, r7, #20
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	605a      	str	r2, [r3, #4]
 80060a6:	609a      	str	r2, [r3, #8]
 80060a8:	60da      	str	r2, [r3, #12]
 80060aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a4b      	ldr	r2, [pc, #300]	; (80061e0 <HAL_UART_MspInit+0x14c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	f040 8090 	bne.w	80061d8 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80060b8:	2300      	movs	r3, #0
 80060ba:	613b      	str	r3, [r7, #16]
 80060bc:	4b49      	ldr	r3, [pc, #292]	; (80061e4 <HAL_UART_MspInit+0x150>)
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	4a48      	ldr	r2, [pc, #288]	; (80061e4 <HAL_UART_MspInit+0x150>)
 80060c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060c6:	6413      	str	r3, [r2, #64]	; 0x40
 80060c8:	4b46      	ldr	r3, [pc, #280]	; (80061e4 <HAL_UART_MspInit+0x150>)
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d0:	613b      	str	r3, [r7, #16]
 80060d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060d4:	2300      	movs	r3, #0
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	4b42      	ldr	r3, [pc, #264]	; (80061e4 <HAL_UART_MspInit+0x150>)
 80060da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060dc:	4a41      	ldr	r2, [pc, #260]	; (80061e4 <HAL_UART_MspInit+0x150>)
 80060de:	f043 0301 	orr.w	r3, r3, #1
 80060e2:	6313      	str	r3, [r2, #48]	; 0x30
 80060e4:	4b3f      	ldr	r3, [pc, #252]	; (80061e4 <HAL_UART_MspInit+0x150>)
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80060f0:	230c      	movs	r3, #12
 80060f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060f4:	2302      	movs	r3, #2
 80060f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f8:	2300      	movs	r3, #0
 80060fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060fc:	2303      	movs	r3, #3
 80060fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006100:	2307      	movs	r3, #7
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006104:	f107 0314 	add.w	r3, r7, #20
 8006108:	4619      	mov	r1, r3
 800610a:	4837      	ldr	r0, [pc, #220]	; (80061e8 <HAL_UART_MspInit+0x154>)
 800610c:	f000 fece 	bl	8006eac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006110:	4b36      	ldr	r3, [pc, #216]	; (80061ec <HAL_UART_MspInit+0x158>)
 8006112:	4a37      	ldr	r2, [pc, #220]	; (80061f0 <HAL_UART_MspInit+0x15c>)
 8006114:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006116:	4b35      	ldr	r3, [pc, #212]	; (80061ec <HAL_UART_MspInit+0x158>)
 8006118:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800611c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800611e:	4b33      	ldr	r3, [pc, #204]	; (80061ec <HAL_UART_MspInit+0x158>)
 8006120:	2200      	movs	r2, #0
 8006122:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006124:	4b31      	ldr	r3, [pc, #196]	; (80061ec <HAL_UART_MspInit+0x158>)
 8006126:	2200      	movs	r2, #0
 8006128:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800612a:	4b30      	ldr	r3, [pc, #192]	; (80061ec <HAL_UART_MspInit+0x158>)
 800612c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006130:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006132:	4b2e      	ldr	r3, [pc, #184]	; (80061ec <HAL_UART_MspInit+0x158>)
 8006134:	2200      	movs	r2, #0
 8006136:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006138:	4b2c      	ldr	r3, [pc, #176]	; (80061ec <HAL_UART_MspInit+0x158>)
 800613a:	2200      	movs	r2, #0
 800613c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800613e:	4b2b      	ldr	r3, [pc, #172]	; (80061ec <HAL_UART_MspInit+0x158>)
 8006140:	2200      	movs	r2, #0
 8006142:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006144:	4b29      	ldr	r3, [pc, #164]	; (80061ec <HAL_UART_MspInit+0x158>)
 8006146:	2200      	movs	r2, #0
 8006148:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800614a:	4b28      	ldr	r3, [pc, #160]	; (80061ec <HAL_UART_MspInit+0x158>)
 800614c:	2200      	movs	r2, #0
 800614e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006150:	4826      	ldr	r0, [pc, #152]	; (80061ec <HAL_UART_MspInit+0x158>)
 8006152:	f000 fa9b 	bl	800668c <HAL_DMA_Init>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800615c:	f7ff fe26 	bl	8005dac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a22      	ldr	r2, [pc, #136]	; (80061ec <HAL_UART_MspInit+0x158>)
 8006164:	639a      	str	r2, [r3, #56]	; 0x38
 8006166:	4a21      	ldr	r2, [pc, #132]	; (80061ec <HAL_UART_MspInit+0x158>)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800616c:	4b21      	ldr	r3, [pc, #132]	; (80061f4 <HAL_UART_MspInit+0x160>)
 800616e:	4a22      	ldr	r2, [pc, #136]	; (80061f8 <HAL_UART_MspInit+0x164>)
 8006170:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8006172:	4b20      	ldr	r3, [pc, #128]	; (80061f4 <HAL_UART_MspInit+0x160>)
 8006174:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006178:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800617a:	4b1e      	ldr	r3, [pc, #120]	; (80061f4 <HAL_UART_MspInit+0x160>)
 800617c:	2240      	movs	r2, #64	; 0x40
 800617e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006180:	4b1c      	ldr	r3, [pc, #112]	; (80061f4 <HAL_UART_MspInit+0x160>)
 8006182:	2200      	movs	r2, #0
 8006184:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006186:	4b1b      	ldr	r3, [pc, #108]	; (80061f4 <HAL_UART_MspInit+0x160>)
 8006188:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800618c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800618e:	4b19      	ldr	r3, [pc, #100]	; (80061f4 <HAL_UART_MspInit+0x160>)
 8006190:	2200      	movs	r2, #0
 8006192:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006194:	4b17      	ldr	r3, [pc, #92]	; (80061f4 <HAL_UART_MspInit+0x160>)
 8006196:	2200      	movs	r2, #0
 8006198:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800619a:	4b16      	ldr	r3, [pc, #88]	; (80061f4 <HAL_UART_MspInit+0x160>)
 800619c:	2200      	movs	r2, #0
 800619e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80061a0:	4b14      	ldr	r3, [pc, #80]	; (80061f4 <HAL_UART_MspInit+0x160>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80061a6:	4b13      	ldr	r3, [pc, #76]	; (80061f4 <HAL_UART_MspInit+0x160>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80061ac:	4811      	ldr	r0, [pc, #68]	; (80061f4 <HAL_UART_MspInit+0x160>)
 80061ae:	f000 fa6d 	bl	800668c <HAL_DMA_Init>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80061b8:	f7ff fdf8 	bl	8005dac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a0d      	ldr	r2, [pc, #52]	; (80061f4 <HAL_UART_MspInit+0x160>)
 80061c0:	635a      	str	r2, [r3, #52]	; 0x34
 80061c2:	4a0c      	ldr	r2, [pc, #48]	; (80061f4 <HAL_UART_MspInit+0x160>)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80061c8:	2200      	movs	r2, #0
 80061ca:	2100      	movs	r1, #0
 80061cc:	2026      	movs	r0, #38	; 0x26
 80061ce:	f000 fa26 	bl	800661e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80061d2:	2026      	movs	r0, #38	; 0x26
 80061d4:	f000 fa3f 	bl	8006656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80061d8:	bf00      	nop
 80061da:	3728      	adds	r7, #40	; 0x28
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40004400 	.word	0x40004400
 80061e4:	40023800 	.word	0x40023800
 80061e8:	40020000 	.word	0x40020000
 80061ec:	2000061c 	.word	0x2000061c
 80061f0:	40026088 	.word	0x40026088
 80061f4:	2000067c 	.word	0x2000067c
 80061f8:	400260a0 	.word	0x400260a0

080061fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006200:	e7fe      	b.n	8006200 <NMI_Handler+0x4>

08006202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006202:	b480      	push	{r7}
 8006204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006206:	e7fe      	b.n	8006206 <HardFault_Handler+0x4>

08006208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006208:	b480      	push	{r7}
 800620a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800620c:	e7fe      	b.n	800620c <MemManage_Handler+0x4>

0800620e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800620e:	b480      	push	{r7}
 8006210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006212:	e7fe      	b.n	8006212 <BusFault_Handler+0x4>

08006214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006218:	e7fe      	b.n	8006218 <UsageFault_Handler+0x4>

0800621a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800621a:	b480      	push	{r7}
 800621c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800621e:	bf00      	nop
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800622c:	bf00      	nop
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006236:	b480      	push	{r7}
 8006238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800623a:	bf00      	nop
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006248:	f000 f8ee 	bl	8006428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800624c:	bf00      	nop
 800624e:	bd80      	pop	{r7, pc}

08006250 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006254:	4802      	ldr	r0, [pc, #8]	; (8006260 <DMA1_Stream5_IRQHandler+0x10>)
 8006256:	f000 fbb1 	bl	80069bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800625a:	bf00      	nop
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	2000061c 	.word	0x2000061c

08006264 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006268:	4802      	ldr	r0, [pc, #8]	; (8006274 <DMA1_Stream6_IRQHandler+0x10>)
 800626a:	f000 fba7 	bl	80069bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800626e:	bf00      	nop
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	2000067c 	.word	0x2000067c

08006278 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Emer_Pin);
 800627c:	2020      	movs	r0, #32
 800627e:	f000 ffe5 	bl	800724c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006282:	bf00      	nop
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800628c:	4803      	ldr	r0, [pc, #12]	; (800629c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800628e:	f003 ff15 	bl	800a0bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8006292:	4803      	ldr	r0, [pc, #12]	; (80062a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8006294:	f003 ff12 	bl	800a0bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006298:	bf00      	nop
 800629a:	bd80      	pop	{r7, pc}
 800629c:	200004b8 	.word	0x200004b8
 80062a0:	20000590 	.word	0x20000590

080062a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80062a8:	4802      	ldr	r0, [pc, #8]	; (80062b4 <I2C1_EV_IRQHandler+0x10>)
 80062aa:	f001 fa7f 	bl	80077ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80062ae:	bf00      	nop
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	20000464 	.word	0x20000464

080062b8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80062bc:	4802      	ldr	r0, [pc, #8]	; (80062c8 <I2C1_ER_IRQHandler+0x10>)
 80062be:	f001 fbe6 	bl	8007a8e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80062c2:	bf00      	nop
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000464 	.word	0x20000464

080062cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80062d0:	4802      	ldr	r0, [pc, #8]	; (80062dc <USART2_IRQHandler+0x10>)
 80062d2:	f004 fe7f 	bl	800afd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80062d6:	bf00      	nop
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	200005d8 	.word	0x200005d8

080062e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Proxi_Pin);
 80062e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80062e8:	f000 ffb0 	bl	800724c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80062ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80062f0:	f000 ffac 	bl	800724c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80062f4:	bf00      	nop
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80062fc:	4802      	ldr	r0, [pc, #8]	; (8006308 <TIM5_IRQHandler+0x10>)
 80062fe:	f003 fedd 	bl	800a0bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8006302:	bf00      	nop
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	20000548 	.word	0x20000548

0800630c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006310:	4b06      	ldr	r3, [pc, #24]	; (800632c <SystemInit+0x20>)
 8006312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006316:	4a05      	ldr	r2, [pc, #20]	; (800632c <SystemInit+0x20>)
 8006318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800631c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006320:	bf00      	nop
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	e000ed00 	.word	0xe000ed00

08006330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006368 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006334:	480d      	ldr	r0, [pc, #52]	; (800636c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006336:	490e      	ldr	r1, [pc, #56]	; (8006370 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006338:	4a0e      	ldr	r2, [pc, #56]	; (8006374 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800633a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800633c:	e002      	b.n	8006344 <LoopCopyDataInit>

0800633e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800633e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006342:	3304      	adds	r3, #4

08006344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006348:	d3f9      	bcc.n	800633e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800634a:	4a0b      	ldr	r2, [pc, #44]	; (8006378 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800634c:	4c0b      	ldr	r4, [pc, #44]	; (800637c <LoopFillZerobss+0x26>)
  movs r3, #0
 800634e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006350:	e001      	b.n	8006356 <LoopFillZerobss>

08006352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006354:	3204      	adds	r2, #4

08006356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006358:	d3fb      	bcc.n	8006352 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800635a:	f7ff ffd7 	bl	800630c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800635e:	f006 f9fb 	bl	800c758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006362:	f7fd fc83 	bl	8003c6c <main>
  bx  lr    
 8006366:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800636c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006370:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 8006374:	0800c814 	.word	0x0800c814
  ldr r2, =_sbss
 8006378:	20000440 	.word	0x20000440
  ldr r4, =_ebss
 800637c:	20000b24 	.word	0x20000b24

08006380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006380:	e7fe      	b.n	8006380 <ADC_IRQHandler>
	...

08006384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006388:	4b0e      	ldr	r3, [pc, #56]	; (80063c4 <HAL_Init+0x40>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a0d      	ldr	r2, [pc, #52]	; (80063c4 <HAL_Init+0x40>)
 800638e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006394:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <HAL_Init+0x40>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a0a      	ldr	r2, [pc, #40]	; (80063c4 <HAL_Init+0x40>)
 800639a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800639e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80063a0:	4b08      	ldr	r3, [pc, #32]	; (80063c4 <HAL_Init+0x40>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a07      	ldr	r2, [pc, #28]	; (80063c4 <HAL_Init+0x40>)
 80063a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063ac:	2003      	movs	r0, #3
 80063ae:	f000 f92b 	bl	8006608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80063b2:	2000      	movs	r0, #0
 80063b4:	f000 f808 	bl	80063c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80063b8:	f7ff fcfe 	bl	8005db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	40023c00 	.word	0x40023c00

080063c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80063d0:	4b12      	ldr	r3, [pc, #72]	; (800641c <HAL_InitTick+0x54>)
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	4b12      	ldr	r3, [pc, #72]	; (8006420 <HAL_InitTick+0x58>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	4619      	mov	r1, r3
 80063da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063de:	fbb3 f3f1 	udiv	r3, r3, r1
 80063e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 f943 	bl	8006672 <HAL_SYSTICK_Config>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e00e      	b.n	8006414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b0f      	cmp	r3, #15
 80063fa:	d80a      	bhi.n	8006412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80063fc:	2200      	movs	r2, #0
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	f04f 30ff 	mov.w	r0, #4294967295
 8006404:	f000 f90b 	bl	800661e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006408:	4a06      	ldr	r2, [pc, #24]	; (8006424 <HAL_InitTick+0x5c>)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	e000      	b.n	8006414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
}
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	20000430 	.word	0x20000430
 8006420:	20000438 	.word	0x20000438
 8006424:	20000434 	.word	0x20000434

08006428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800642c:	4b06      	ldr	r3, [pc, #24]	; (8006448 <HAL_IncTick+0x20>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	4b06      	ldr	r3, [pc, #24]	; (800644c <HAL_IncTick+0x24>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4413      	add	r3, r2
 8006438:	4a04      	ldr	r2, [pc, #16]	; (800644c <HAL_IncTick+0x24>)
 800643a:	6013      	str	r3, [r2, #0]
}
 800643c:	bf00      	nop
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	20000438 	.word	0x20000438
 800644c:	20000b20 	.word	0x20000b20

08006450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
  return uwTick;
 8006454:	4b03      	ldr	r3, [pc, #12]	; (8006464 <HAL_GetTick+0x14>)
 8006456:	681b      	ldr	r3, [r3, #0]
}
 8006458:	4618      	mov	r0, r3
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	20000b20 	.word	0x20000b20

08006468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006478:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <__NVIC_SetPriorityGrouping+0x44>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006484:	4013      	ands	r3, r2
 8006486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800649a:	4a04      	ldr	r2, [pc, #16]	; (80064ac <__NVIC_SetPriorityGrouping+0x44>)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	60d3      	str	r3, [r2, #12]
}
 80064a0:	bf00      	nop
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	e000ed00 	.word	0xe000ed00

080064b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064b4:	4b04      	ldr	r3, [pc, #16]	; (80064c8 <__NVIC_GetPriorityGrouping+0x18>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	0a1b      	lsrs	r3, r3, #8
 80064ba:	f003 0307 	and.w	r3, r3, #7
}
 80064be:	4618      	mov	r0, r3
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	e000ed00 	.word	0xe000ed00

080064cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	4603      	mov	r3, r0
 80064d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	db0b      	blt.n	80064f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064de:	79fb      	ldrb	r3, [r7, #7]
 80064e0:	f003 021f 	and.w	r2, r3, #31
 80064e4:	4907      	ldr	r1, [pc, #28]	; (8006504 <__NVIC_EnableIRQ+0x38>)
 80064e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	2001      	movs	r0, #1
 80064ee:	fa00 f202 	lsl.w	r2, r0, r2
 80064f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	e000e100 	.word	0xe000e100

08006508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	4603      	mov	r3, r0
 8006510:	6039      	str	r1, [r7, #0]
 8006512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006518:	2b00      	cmp	r3, #0
 800651a:	db0a      	blt.n	8006532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	b2da      	uxtb	r2, r3
 8006520:	490c      	ldr	r1, [pc, #48]	; (8006554 <__NVIC_SetPriority+0x4c>)
 8006522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006526:	0112      	lsls	r2, r2, #4
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	440b      	add	r3, r1
 800652c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006530:	e00a      	b.n	8006548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	b2da      	uxtb	r2, r3
 8006536:	4908      	ldr	r1, [pc, #32]	; (8006558 <__NVIC_SetPriority+0x50>)
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	3b04      	subs	r3, #4
 8006540:	0112      	lsls	r2, r2, #4
 8006542:	b2d2      	uxtb	r2, r2
 8006544:	440b      	add	r3, r1
 8006546:	761a      	strb	r2, [r3, #24]
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	e000e100 	.word	0xe000e100
 8006558:	e000ed00 	.word	0xe000ed00

0800655c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800655c:	b480      	push	{r7}
 800655e:	b089      	sub	sp, #36	; 0x24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f1c3 0307 	rsb	r3, r3, #7
 8006576:	2b04      	cmp	r3, #4
 8006578:	bf28      	it	cs
 800657a:	2304      	movcs	r3, #4
 800657c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	3304      	adds	r3, #4
 8006582:	2b06      	cmp	r3, #6
 8006584:	d902      	bls.n	800658c <NVIC_EncodePriority+0x30>
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	3b03      	subs	r3, #3
 800658a:	e000      	b.n	800658e <NVIC_EncodePriority+0x32>
 800658c:	2300      	movs	r3, #0
 800658e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006590:	f04f 32ff 	mov.w	r2, #4294967295
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	fa02 f303 	lsl.w	r3, r2, r3
 800659a:	43da      	mvns	r2, r3
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	401a      	ands	r2, r3
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065a4:	f04f 31ff 	mov.w	r1, #4294967295
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	fa01 f303 	lsl.w	r3, r1, r3
 80065ae:	43d9      	mvns	r1, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065b4:	4313      	orrs	r3, r2
         );
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3724      	adds	r7, #36	; 0x24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
	...

080065c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065d4:	d301      	bcc.n	80065da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065d6:	2301      	movs	r3, #1
 80065d8:	e00f      	b.n	80065fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065da:	4a0a      	ldr	r2, [pc, #40]	; (8006604 <SysTick_Config+0x40>)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3b01      	subs	r3, #1
 80065e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065e2:	210f      	movs	r1, #15
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295
 80065e8:	f7ff ff8e 	bl	8006508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065ec:	4b05      	ldr	r3, [pc, #20]	; (8006604 <SysTick_Config+0x40>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065f2:	4b04      	ldr	r3, [pc, #16]	; (8006604 <SysTick_Config+0x40>)
 80065f4:	2207      	movs	r2, #7
 80065f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	e000e010 	.word	0xe000e010

08006608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff ff29 	bl	8006468 <__NVIC_SetPriorityGrouping>
}
 8006616:	bf00      	nop
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800661e:	b580      	push	{r7, lr}
 8006620:	b086      	sub	sp, #24
 8006622:	af00      	add	r7, sp, #0
 8006624:	4603      	mov	r3, r0
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	607a      	str	r2, [r7, #4]
 800662a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006630:	f7ff ff3e 	bl	80064b0 <__NVIC_GetPriorityGrouping>
 8006634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	6978      	ldr	r0, [r7, #20]
 800663c:	f7ff ff8e 	bl	800655c <NVIC_EncodePriority>
 8006640:	4602      	mov	r2, r0
 8006642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006646:	4611      	mov	r1, r2
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff ff5d 	bl	8006508 <__NVIC_SetPriority>
}
 800664e:	bf00      	nop
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b082      	sub	sp, #8
 800665a:	af00      	add	r7, sp, #0
 800665c:	4603      	mov	r3, r0
 800665e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006664:	4618      	mov	r0, r3
 8006666:	f7ff ff31 	bl	80064cc <__NVIC_EnableIRQ>
}
 800666a:	bf00      	nop
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b082      	sub	sp, #8
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7ff ffa2 	bl	80065c4 <SysTick_Config>
 8006680:	4603      	mov	r3, r0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006698:	f7ff feda 	bl	8006450 <HAL_GetTick>
 800669c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e099      	b.n	80067dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0201 	bic.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066c8:	e00f      	b.n	80066ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066ca:	f7ff fec1 	bl	8006450 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b05      	cmp	r3, #5
 80066d6:	d908      	bls.n	80066ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2203      	movs	r2, #3
 80066e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e078      	b.n	80067dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e8      	bne.n	80066ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	4b38      	ldr	r3, [pc, #224]	; (80067e4 <HAL_DMA_Init+0x158>)
 8006704:	4013      	ands	r3, r2
 8006706:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006716:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006722:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800672e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	2b04      	cmp	r3, #4
 8006742:	d107      	bne.n	8006754 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674c:	4313      	orrs	r3, r2
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f023 0307 	bic.w	r3, r3, #7
 800676a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	2b04      	cmp	r3, #4
 800677c:	d117      	bne.n	80067ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	4313      	orrs	r3, r2
 8006786:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00e      	beq.n	80067ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fb0f 	bl	8006db4 <DMA_CheckFifoParam>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d008      	beq.n	80067ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2240      	movs	r2, #64	; 0x40
 80067a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80067aa:	2301      	movs	r3, #1
 80067ac:	e016      	b.n	80067dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fac6 	bl	8006d48 <DMA_CalcBaseAndBitshift>
 80067bc:	4603      	mov	r3, r0
 80067be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c4:	223f      	movs	r2, #63	; 0x3f
 80067c6:	409a      	lsls	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	f010803f 	.word	0xf010803f

080067e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_DMA_Start_IT+0x26>
 800680a:	2302      	movs	r3, #2
 800680c:	e040      	b.n	8006890 <HAL_DMA_Start_IT+0xa8>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b01      	cmp	r3, #1
 8006820:	d12f      	bne.n	8006882 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2202      	movs	r2, #2
 8006826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 fa58 	bl	8006cec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006840:	223f      	movs	r2, #63	; 0x3f
 8006842:	409a      	lsls	r2, r3
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0216 	orr.w	r2, r2, #22
 8006856:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685c:	2b00      	cmp	r3, #0
 800685e:	d007      	beq.n	8006870 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0208 	orr.w	r2, r2, #8
 800686e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0201 	orr.w	r2, r2, #1
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	e005      	b.n	800688e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800688a:	2302      	movs	r3, #2
 800688c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800688e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3718      	adds	r7, #24
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80068a6:	f7ff fdd3 	bl	8006450 <HAL_GetTick>
 80068aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d008      	beq.n	80068ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2280      	movs	r2, #128	; 0x80
 80068bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e052      	b.n	8006970 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0216 	bic.w	r2, r2, #22
 80068d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	695a      	ldr	r2, [r3, #20]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d103      	bne.n	80068fa <HAL_DMA_Abort+0x62>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d007      	beq.n	800690a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0208 	bic.w	r2, r2, #8
 8006908:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0201 	bic.w	r2, r2, #1
 8006918:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800691a:	e013      	b.n	8006944 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800691c:	f7ff fd98 	bl	8006450 <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b05      	cmp	r3, #5
 8006928:	d90c      	bls.n	8006944 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2220      	movs	r2, #32
 800692e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2203      	movs	r2, #3
 8006934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e015      	b.n	8006970 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e4      	bne.n	800691c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006956:	223f      	movs	r2, #63	; 0x3f
 8006958:	409a      	lsls	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d004      	beq.n	8006996 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2280      	movs	r2, #128	; 0x80
 8006990:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e00c      	b.n	80069b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2205      	movs	r2, #5
 800699a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 0201 	bic.w	r2, r2, #1
 80069ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80069c8:	4b8e      	ldr	r3, [pc, #568]	; (8006c04 <HAL_DMA_IRQHandler+0x248>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a8e      	ldr	r2, [pc, #568]	; (8006c08 <HAL_DMA_IRQHandler+0x24c>)
 80069ce:	fba2 2303 	umull	r2, r3, r2, r3
 80069d2:	0a9b      	lsrs	r3, r3, #10
 80069d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e6:	2208      	movs	r2, #8
 80069e8:	409a      	lsls	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4013      	ands	r3, r2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d01a      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d013      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0204 	bic.w	r2, r2, #4
 8006a0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a14:	2208      	movs	r2, #8
 8006a16:	409a      	lsls	r2, r3
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a20:	f043 0201 	orr.w	r2, r3, #1
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	409a      	lsls	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4013      	ands	r3, r2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d012      	beq.n	8006a5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00b      	beq.n	8006a5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	409a      	lsls	r2, r3
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a56:	f043 0202 	orr.w	r2, r3, #2
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a62:	2204      	movs	r2, #4
 8006a64:	409a      	lsls	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d012      	beq.n	8006a94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00b      	beq.n	8006a94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a80:	2204      	movs	r2, #4
 8006a82:	409a      	lsls	r2, r3
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8c:	f043 0204 	orr.w	r2, r3, #4
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a98:	2210      	movs	r2, #16
 8006a9a:	409a      	lsls	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d043      	beq.n	8006b2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0308 	and.w	r3, r3, #8
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d03c      	beq.n	8006b2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab6:	2210      	movs	r2, #16
 8006ab8:	409a      	lsls	r2, r3
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d018      	beq.n	8006afe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d108      	bne.n	8006aec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d024      	beq.n	8006b2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	4798      	blx	r3
 8006aea:	e01f      	b.n	8006b2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d01b      	beq.n	8006b2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	4798      	blx	r3
 8006afc:	e016      	b.n	8006b2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d107      	bne.n	8006b1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0208 	bic.w	r2, r2, #8
 8006b1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b30:	2220      	movs	r2, #32
 8006b32:	409a      	lsls	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4013      	ands	r3, r2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 808f 	beq.w	8006c5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0310 	and.w	r3, r3, #16
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 8087 	beq.w	8006c5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b52:	2220      	movs	r2, #32
 8006b54:	409a      	lsls	r2, r3
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b05      	cmp	r3, #5
 8006b64:	d136      	bne.n	8006bd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 0216 	bic.w	r2, r2, #22
 8006b74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	695a      	ldr	r2, [r3, #20]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d103      	bne.n	8006b96 <HAL_DMA_IRQHandler+0x1da>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0208 	bic.w	r2, r2, #8
 8006ba4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006baa:	223f      	movs	r2, #63	; 0x3f
 8006bac:	409a      	lsls	r2, r3
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d07e      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	4798      	blx	r3
        }
        return;
 8006bd2:	e079      	b.n	8006cc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d01d      	beq.n	8006c1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10d      	bne.n	8006c0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d031      	beq.n	8006c5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	4798      	blx	r3
 8006c00:	e02c      	b.n	8006c5c <HAL_DMA_IRQHandler+0x2a0>
 8006c02:	bf00      	nop
 8006c04:	20000430 	.word	0x20000430
 8006c08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d023      	beq.n	8006c5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	4798      	blx	r3
 8006c1c:	e01e      	b.n	8006c5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10f      	bne.n	8006c4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f022 0210 	bic.w	r2, r2, #16
 8006c3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d032      	beq.n	8006cca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d022      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2205      	movs	r2, #5
 8006c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0201 	bic.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	60bb      	str	r3, [r7, #8]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d307      	bcc.n	8006ca4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1f2      	bne.n	8006c88 <HAL_DMA_IRQHandler+0x2cc>
 8006ca2:	e000      	b.n	8006ca6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006ca4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d005      	beq.n	8006cca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	4798      	blx	r3
 8006cc6:	e000      	b.n	8006cca <HAL_DMA_IRQHandler+0x30e>
        return;
 8006cc8:	bf00      	nop
    }
  }
}
 8006cca:	3718      	adds	r7, #24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cde:	b2db      	uxtb	r3, r3
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	2b40      	cmp	r3, #64	; 0x40
 8006d18:	d108      	bne.n	8006d2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006d2a:	e007      	b.n	8006d3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	60da      	str	r2, [r3, #12]
}
 8006d3c:	bf00      	nop
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	3b10      	subs	r3, #16
 8006d58:	4a14      	ldr	r2, [pc, #80]	; (8006dac <DMA_CalcBaseAndBitshift+0x64>)
 8006d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5e:	091b      	lsrs	r3, r3, #4
 8006d60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006d62:	4a13      	ldr	r2, [pc, #76]	; (8006db0 <DMA_CalcBaseAndBitshift+0x68>)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4413      	add	r3, r2
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d909      	bls.n	8006d8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006d7e:	f023 0303 	bic.w	r3, r3, #3
 8006d82:	1d1a      	adds	r2, r3, #4
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	659a      	str	r2, [r3, #88]	; 0x58
 8006d88:	e007      	b.n	8006d9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006d92:	f023 0303 	bic.w	r3, r3, #3
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	aaaaaaab 	.word	0xaaaaaaab
 8006db0:	0800c7fc 	.word	0x0800c7fc

08006db4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d11f      	bne.n	8006e0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d856      	bhi.n	8006e82 <DMA_CheckFifoParam+0xce>
 8006dd4:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <DMA_CheckFifoParam+0x28>)
 8006dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006ded 	.word	0x08006ded
 8006de0:	08006dff 	.word	0x08006dff
 8006de4:	08006ded 	.word	0x08006ded
 8006de8:	08006e83 	.word	0x08006e83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d046      	beq.n	8006e86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dfc:	e043      	b.n	8006e86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e06:	d140      	bne.n	8006e8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e0c:	e03d      	b.n	8006e8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e16:	d121      	bne.n	8006e5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d837      	bhi.n	8006e8e <DMA_CheckFifoParam+0xda>
 8006e1e:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <DMA_CheckFifoParam+0x70>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e35 	.word	0x08006e35
 8006e28:	08006e3b 	.word	0x08006e3b
 8006e2c:	08006e35 	.word	0x08006e35
 8006e30:	08006e4d 	.word	0x08006e4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	73fb      	strb	r3, [r7, #15]
      break;
 8006e38:	e030      	b.n	8006e9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d025      	beq.n	8006e92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e4a:	e022      	b.n	8006e92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e54:	d11f      	bne.n	8006e96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006e5a:	e01c      	b.n	8006e96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d903      	bls.n	8006e6a <DMA_CheckFifoParam+0xb6>
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b03      	cmp	r3, #3
 8006e66:	d003      	beq.n	8006e70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006e68:	e018      	b.n	8006e9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e6e:	e015      	b.n	8006e9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00e      	beq.n	8006e9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e80:	e00b      	b.n	8006e9a <DMA_CheckFifoParam+0xe6>
      break;
 8006e82:	bf00      	nop
 8006e84:	e00a      	b.n	8006e9c <DMA_CheckFifoParam+0xe8>
      break;
 8006e86:	bf00      	nop
 8006e88:	e008      	b.n	8006e9c <DMA_CheckFifoParam+0xe8>
      break;
 8006e8a:	bf00      	nop
 8006e8c:	e006      	b.n	8006e9c <DMA_CheckFifoParam+0xe8>
      break;
 8006e8e:	bf00      	nop
 8006e90:	e004      	b.n	8006e9c <DMA_CheckFifoParam+0xe8>
      break;
 8006e92:	bf00      	nop
 8006e94:	e002      	b.n	8006e9c <DMA_CheckFifoParam+0xe8>
      break;   
 8006e96:	bf00      	nop
 8006e98:	e000      	b.n	8006e9c <DMA_CheckFifoParam+0xe8>
      break;
 8006e9a:	bf00      	nop
    }
  } 
  
  return status; 
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop

08006eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b089      	sub	sp, #36	; 0x24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61fb      	str	r3, [r7, #28]
 8006ec6:	e159      	b.n	800717c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ec8:	2201      	movs	r2, #1
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	4013      	ands	r3, r2
 8006eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	f040 8148 	bne.w	8007176 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d005      	beq.n	8006efe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d130      	bne.n	8006f60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	2203      	movs	r2, #3
 8006f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0e:	43db      	mvns	r3, r3
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	4013      	ands	r3, r2
 8006f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	68da      	ldr	r2, [r3, #12]
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f34:	2201      	movs	r2, #1
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3c:	43db      	mvns	r3, r3
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	4013      	ands	r3, r2
 8006f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	091b      	lsrs	r3, r3, #4
 8006f4a:	f003 0201 	and.w	r2, r3, #1
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	fa02 f303 	lsl.w	r3, r2, r3
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f003 0303 	and.w	r3, r3, #3
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d017      	beq.n	8006f9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	2203      	movs	r2, #3
 8006f78:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	4013      	ands	r3, r2
 8006f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	005b      	lsls	r3, r3, #1
 8006f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	69ba      	ldr	r2, [r7, #24]
 8006f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f003 0303 	and.w	r3, r3, #3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d123      	bne.n	8006ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	08da      	lsrs	r2, r3, #3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3208      	adds	r2, #8
 8006fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	220f      	movs	r2, #15
 8006fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc4:	43db      	mvns	r3, r3
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	691a      	ldr	r2, [r3, #16]
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	08da      	lsrs	r2, r3, #3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	3208      	adds	r2, #8
 8006fea:	69b9      	ldr	r1, [r7, #24]
 8006fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	005b      	lsls	r3, r3, #1
 8006ffa:	2203      	movs	r2, #3
 8006ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8007000:	43db      	mvns	r3, r3
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	4013      	ands	r3, r2
 8007006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f003 0203 	and.w	r2, r3, #3
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	005b      	lsls	r3, r3, #1
 8007014:	fa02 f303 	lsl.w	r3, r2, r3
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	4313      	orrs	r3, r2
 800701c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 80a2 	beq.w	8007176 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007032:	2300      	movs	r3, #0
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	4b57      	ldr	r3, [pc, #348]	; (8007194 <HAL_GPIO_Init+0x2e8>)
 8007038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800703a:	4a56      	ldr	r2, [pc, #344]	; (8007194 <HAL_GPIO_Init+0x2e8>)
 800703c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007040:	6453      	str	r3, [r2, #68]	; 0x44
 8007042:	4b54      	ldr	r3, [pc, #336]	; (8007194 <HAL_GPIO_Init+0x2e8>)
 8007044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800704e:	4a52      	ldr	r2, [pc, #328]	; (8007198 <HAL_GPIO_Init+0x2ec>)
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	089b      	lsrs	r3, r3, #2
 8007054:	3302      	adds	r3, #2
 8007056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800705a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	f003 0303 	and.w	r3, r3, #3
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	220f      	movs	r2, #15
 8007066:	fa02 f303 	lsl.w	r3, r2, r3
 800706a:	43db      	mvns	r3, r3
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	4013      	ands	r3, r2
 8007070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a49      	ldr	r2, [pc, #292]	; (800719c <HAL_GPIO_Init+0x2f0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d019      	beq.n	80070ae <HAL_GPIO_Init+0x202>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a48      	ldr	r2, [pc, #288]	; (80071a0 <HAL_GPIO_Init+0x2f4>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d013      	beq.n	80070aa <HAL_GPIO_Init+0x1fe>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a47      	ldr	r2, [pc, #284]	; (80071a4 <HAL_GPIO_Init+0x2f8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00d      	beq.n	80070a6 <HAL_GPIO_Init+0x1fa>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a46      	ldr	r2, [pc, #280]	; (80071a8 <HAL_GPIO_Init+0x2fc>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d007      	beq.n	80070a2 <HAL_GPIO_Init+0x1f6>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a45      	ldr	r2, [pc, #276]	; (80071ac <HAL_GPIO_Init+0x300>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d101      	bne.n	800709e <HAL_GPIO_Init+0x1f2>
 800709a:	2304      	movs	r3, #4
 800709c:	e008      	b.n	80070b0 <HAL_GPIO_Init+0x204>
 800709e:	2307      	movs	r3, #7
 80070a0:	e006      	b.n	80070b0 <HAL_GPIO_Init+0x204>
 80070a2:	2303      	movs	r3, #3
 80070a4:	e004      	b.n	80070b0 <HAL_GPIO_Init+0x204>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e002      	b.n	80070b0 <HAL_GPIO_Init+0x204>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <HAL_GPIO_Init+0x204>
 80070ae:	2300      	movs	r3, #0
 80070b0:	69fa      	ldr	r2, [r7, #28]
 80070b2:	f002 0203 	and.w	r2, r2, #3
 80070b6:	0092      	lsls	r2, r2, #2
 80070b8:	4093      	lsls	r3, r2
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	4313      	orrs	r3, r2
 80070be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80070c0:	4935      	ldr	r1, [pc, #212]	; (8007198 <HAL_GPIO_Init+0x2ec>)
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	089b      	lsrs	r3, r3, #2
 80070c6:	3302      	adds	r3, #2
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070ce:	4b38      	ldr	r3, [pc, #224]	; (80071b0 <HAL_GPIO_Init+0x304>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	43db      	mvns	r3, r3
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	4013      	ands	r3, r2
 80070dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070f2:	4a2f      	ldr	r2, [pc, #188]	; (80071b0 <HAL_GPIO_Init+0x304>)
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80070f8:	4b2d      	ldr	r3, [pc, #180]	; (80071b0 <HAL_GPIO_Init+0x304>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	43db      	mvns	r3, r3
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	4013      	ands	r3, r2
 8007106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	4313      	orrs	r3, r2
 800711a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800711c:	4a24      	ldr	r2, [pc, #144]	; (80071b0 <HAL_GPIO_Init+0x304>)
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007122:	4b23      	ldr	r3, [pc, #140]	; (80071b0 <HAL_GPIO_Init+0x304>)
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	43db      	mvns	r3, r3
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	4013      	ands	r3, r2
 8007130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	4313      	orrs	r3, r2
 8007144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007146:	4a1a      	ldr	r2, [pc, #104]	; (80071b0 <HAL_GPIO_Init+0x304>)
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800714c:	4b18      	ldr	r3, [pc, #96]	; (80071b0 <HAL_GPIO_Init+0x304>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	43db      	mvns	r3, r3
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	4013      	ands	r3, r2
 800715a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007170:	4a0f      	ldr	r2, [pc, #60]	; (80071b0 <HAL_GPIO_Init+0x304>)
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	3301      	adds	r3, #1
 800717a:	61fb      	str	r3, [r7, #28]
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	2b0f      	cmp	r3, #15
 8007180:	f67f aea2 	bls.w	8006ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop
 8007188:	3724      	adds	r7, #36	; 0x24
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	40023800 	.word	0x40023800
 8007198:	40013800 	.word	0x40013800
 800719c:	40020000 	.word	0x40020000
 80071a0:	40020400 	.word	0x40020400
 80071a4:	40020800 	.word	0x40020800
 80071a8:	40020c00 	.word	0x40020c00
 80071ac:	40021000 	.word	0x40021000
 80071b0:	40013c00 	.word	0x40013c00

080071b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	460b      	mov	r3, r1
 80071be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	691a      	ldr	r2, [r3, #16]
 80071c4:	887b      	ldrh	r3, [r7, #2]
 80071c6:	4013      	ands	r3, r2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80071cc:	2301      	movs	r3, #1
 80071ce:	73fb      	strb	r3, [r7, #15]
 80071d0:	e001      	b.n	80071d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80071d2:	2300      	movs	r3, #0
 80071d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3714      	adds	r7, #20
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	807b      	strh	r3, [r7, #2]
 80071f0:	4613      	mov	r3, r2
 80071f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071f4:	787b      	ldrb	r3, [r7, #1]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071fa:	887a      	ldrh	r2, [r7, #2]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007200:	e003      	b.n	800720a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007202:	887b      	ldrh	r3, [r7, #2]
 8007204:	041a      	lsls	r2, r3, #16
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	619a      	str	r2, [r3, #24]
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007216:	b480      	push	{r7}
 8007218:	b085      	sub	sp, #20
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	460b      	mov	r3, r1
 8007220:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007228:	887a      	ldrh	r2, [r7, #2]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4013      	ands	r3, r2
 800722e:	041a      	lsls	r2, r3, #16
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	43d9      	mvns	r1, r3
 8007234:	887b      	ldrh	r3, [r7, #2]
 8007236:	400b      	ands	r3, r1
 8007238:	431a      	orrs	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	619a      	str	r2, [r3, #24]
}
 800723e:	bf00      	nop
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
	...

0800724c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	4603      	mov	r3, r0
 8007254:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007256:	4b08      	ldr	r3, [pc, #32]	; (8007278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007258:	695a      	ldr	r2, [r3, #20]
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	4013      	ands	r3, r2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d006      	beq.n	8007270 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007262:	4a05      	ldr	r2, [pc, #20]	; (8007278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007264:	88fb      	ldrh	r3, [r7, #6]
 8007266:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007268:	88fb      	ldrh	r3, [r7, #6]
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe fb88 	bl	8005980 <HAL_GPIO_EXTI_Callback>
  }
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	40013c00 	.word	0x40013c00

0800727c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e12b      	b.n	80074e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d106      	bne.n	80072a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fe fdb0 	bl	8005e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2224      	movs	r2, #36	; 0x24
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0201 	bic.w	r2, r2, #1
 80072be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80072e0:	f002 fbb0 	bl	8009a44 <HAL_RCC_GetPCLK1Freq>
 80072e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	4a81      	ldr	r2, [pc, #516]	; (80074f0 <HAL_I2C_Init+0x274>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d807      	bhi.n	8007300 <HAL_I2C_Init+0x84>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4a80      	ldr	r2, [pc, #512]	; (80074f4 <HAL_I2C_Init+0x278>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	bf94      	ite	ls
 80072f8:	2301      	movls	r3, #1
 80072fa:	2300      	movhi	r3, #0
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	e006      	b.n	800730e <HAL_I2C_Init+0x92>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4a7d      	ldr	r2, [pc, #500]	; (80074f8 <HAL_I2C_Init+0x27c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	bf94      	ite	ls
 8007308:	2301      	movls	r3, #1
 800730a:	2300      	movhi	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e0e7      	b.n	80074e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4a78      	ldr	r2, [pc, #480]	; (80074fc <HAL_I2C_Init+0x280>)
 800731a:	fba2 2303 	umull	r2, r3, r2, r3
 800731e:	0c9b      	lsrs	r3, r3, #18
 8007320:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	430a      	orrs	r2, r1
 8007334:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	4a6a      	ldr	r2, [pc, #424]	; (80074f0 <HAL_I2C_Init+0x274>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d802      	bhi.n	8007350 <HAL_I2C_Init+0xd4>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	3301      	adds	r3, #1
 800734e:	e009      	b.n	8007364 <HAL_I2C_Init+0xe8>
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007356:	fb02 f303 	mul.w	r3, r2, r3
 800735a:	4a69      	ldr	r2, [pc, #420]	; (8007500 <HAL_I2C_Init+0x284>)
 800735c:	fba2 2303 	umull	r2, r3, r2, r3
 8007360:	099b      	lsrs	r3, r3, #6
 8007362:	3301      	adds	r3, #1
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6812      	ldr	r2, [r2, #0]
 8007368:	430b      	orrs	r3, r1
 800736a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007376:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	495c      	ldr	r1, [pc, #368]	; (80074f0 <HAL_I2C_Init+0x274>)
 8007380:	428b      	cmp	r3, r1
 8007382:	d819      	bhi.n	80073b8 <HAL_I2C_Init+0x13c>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	1e59      	subs	r1, r3, #1
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007392:	1c59      	adds	r1, r3, #1
 8007394:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007398:	400b      	ands	r3, r1
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <HAL_I2C_Init+0x138>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	1e59      	subs	r1, r3, #1
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80073ac:	3301      	adds	r3, #1
 80073ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073b2:	e051      	b.n	8007458 <HAL_I2C_Init+0x1dc>
 80073b4:	2304      	movs	r3, #4
 80073b6:	e04f      	b.n	8007458 <HAL_I2C_Init+0x1dc>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d111      	bne.n	80073e4 <HAL_I2C_Init+0x168>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	1e58      	subs	r0, r3, #1
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6859      	ldr	r1, [r3, #4]
 80073c8:	460b      	mov	r3, r1
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	440b      	add	r3, r1
 80073ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80073d2:	3301      	adds	r3, #1
 80073d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bf0c      	ite	eq
 80073dc:	2301      	moveq	r3, #1
 80073de:	2300      	movne	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	e012      	b.n	800740a <HAL_I2C_Init+0x18e>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	1e58      	subs	r0, r3, #1
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6859      	ldr	r1, [r3, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	440b      	add	r3, r1
 80073f2:	0099      	lsls	r1, r3, #2
 80073f4:	440b      	add	r3, r1
 80073f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80073fa:	3301      	adds	r3, #1
 80073fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007400:	2b00      	cmp	r3, #0
 8007402:	bf0c      	ite	eq
 8007404:	2301      	moveq	r3, #1
 8007406:	2300      	movne	r3, #0
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <HAL_I2C_Init+0x196>
 800740e:	2301      	movs	r3, #1
 8007410:	e022      	b.n	8007458 <HAL_I2C_Init+0x1dc>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10e      	bne.n	8007438 <HAL_I2C_Init+0x1bc>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	1e58      	subs	r0, r3, #1
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6859      	ldr	r1, [r3, #4]
 8007422:	460b      	mov	r3, r1
 8007424:	005b      	lsls	r3, r3, #1
 8007426:	440b      	add	r3, r1
 8007428:	fbb0 f3f3 	udiv	r3, r0, r3
 800742c:	3301      	adds	r3, #1
 800742e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007436:	e00f      	b.n	8007458 <HAL_I2C_Init+0x1dc>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	1e58      	subs	r0, r3, #1
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6859      	ldr	r1, [r3, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	440b      	add	r3, r1
 8007446:	0099      	lsls	r1, r3, #2
 8007448:	440b      	add	r3, r1
 800744a:	fbb0 f3f3 	udiv	r3, r0, r3
 800744e:	3301      	adds	r3, #1
 8007450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007454:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007458:	6879      	ldr	r1, [r7, #4]
 800745a:	6809      	ldr	r1, [r1, #0]
 800745c:	4313      	orrs	r3, r2
 800745e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69da      	ldr	r2, [r3, #28]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	431a      	orrs	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007486:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	6911      	ldr	r1, [r2, #16]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	68d2      	ldr	r2, [r2, #12]
 8007492:	4311      	orrs	r1, r2
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	6812      	ldr	r2, [r2, #0]
 8007498:	430b      	orrs	r3, r1
 800749a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	695a      	ldr	r2, [r3, #20]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0201 	orr.w	r2, r2, #1
 80074c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2220      	movs	r2, #32
 80074d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	000186a0 	.word	0x000186a0
 80074f4:	001e847f 	.word	0x001e847f
 80074f8:	003d08ff 	.word	0x003d08ff
 80074fc:	431bde83 	.word	0x431bde83
 8007500:	10624dd3 	.word	0x10624dd3

08007504 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	607a      	str	r2, [r7, #4]
 800750e:	461a      	mov	r2, r3
 8007510:	460b      	mov	r3, r1
 8007512:	817b      	strh	r3, [r7, #10]
 8007514:	4613      	mov	r3, r2
 8007516:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b20      	cmp	r3, #32
 8007526:	f040 8085 	bne.w	8007634 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800752a:	4b46      	ldr	r3, [pc, #280]	; (8007644 <HAL_I2C_Master_Transmit_IT+0x140>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	08db      	lsrs	r3, r3, #3
 8007530:	4a45      	ldr	r2, [pc, #276]	; (8007648 <HAL_I2C_Master_Transmit_IT+0x144>)
 8007532:	fba2 2303 	umull	r2, r3, r2, r3
 8007536:	0a1a      	lsrs	r2, r3, #8
 8007538:	4613      	mov	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	009a      	lsls	r2, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	3b01      	subs	r3, #1
 8007548:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d116      	bne.n	800757e <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	f043 0220 	orr.w	r2, r3, #32
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e05b      	b.n	8007636 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	f003 0302 	and.w	r3, r3, #2
 8007588:	2b02      	cmp	r3, #2
 800758a:	d0db      	beq.n	8007544 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007592:	2b01      	cmp	r3, #1
 8007594:	d101      	bne.n	800759a <HAL_I2C_Master_Transmit_IT+0x96>
 8007596:	2302      	movs	r3, #2
 8007598:	e04d      	b.n	8007636 <HAL_I2C_Master_Transmit_IT+0x132>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d007      	beq.n	80075c0 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f042 0201 	orr.w	r2, r2, #1
 80075be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2221      	movs	r2, #33	; 0x21
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2210      	movs	r2, #16
 80075dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	893a      	ldrh	r2, [r7, #8]
 80075f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4a13      	ldr	r2, [pc, #76]	; (800764c <HAL_I2C_Master_Transmit_IT+0x148>)
 8007600:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007602:	897a      	ldrh	r2, [r7, #10]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800761e:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800762e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	e000      	b.n	8007636 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8007634:	2302      	movs	r3, #2
  }
}
 8007636:	4618      	mov	r0, r3
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	20000430 	.word	0x20000430
 8007648:	14f8b589 	.word	0x14f8b589
 800764c:	ffff0000 	.word	0xffff0000

08007650 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	607a      	str	r2, [r7, #4]
 800765a:	461a      	mov	r2, r3
 800765c:	460b      	mov	r3, r1
 800765e:	817b      	strh	r3, [r7, #10]
 8007660:	4613      	mov	r3, r2
 8007662:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b20      	cmp	r3, #32
 8007672:	f040 808d 	bne.w	8007790 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007676:	4b4a      	ldr	r3, [pc, #296]	; (80077a0 <HAL_I2C_Master_Receive_IT+0x150>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	08db      	lsrs	r3, r3, #3
 800767c:	4a49      	ldr	r2, [pc, #292]	; (80077a4 <HAL_I2C_Master_Receive_IT+0x154>)
 800767e:	fba2 2303 	umull	r2, r3, r2, r3
 8007682:	0a1a      	lsrs	r2, r3, #8
 8007684:	4613      	mov	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	009a      	lsls	r2, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	3b01      	subs	r3, #1
 8007694:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d116      	bne.n	80076ca <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b6:	f043 0220 	orr.w	r2, r3, #32
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e063      	b.n	8007792 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d0db      	beq.n	8007690 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d101      	bne.n	80076e6 <HAL_I2C_Master_Receive_IT+0x96>
 80076e2:	2302      	movs	r3, #2
 80076e4:	e055      	b.n	8007792 <HAL_I2C_Master_Receive_IT+0x142>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d007      	beq.n	800770c <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f042 0201 	orr.w	r2, r2, #1
 800770a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800771a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2222      	movs	r2, #34	; 0x22
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2210      	movs	r2, #16
 8007728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	893a      	ldrh	r2, [r7, #8]
 800773c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007742:	b29a      	uxth	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4a17      	ldr	r2, [pc, #92]	; (80077a8 <HAL_I2C_Master_Receive_IT+0x158>)
 800774c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800774e:	897a      	ldrh	r2, [r7, #10]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800776a:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800777a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800778a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	e000      	b.n	8007792 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8007790:	2302      	movs	r3, #2
  }
}
 8007792:	4618      	mov	r0, r3
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20000430 	.word	0x20000430
 80077a4:	14f8b589 	.word	0x14f8b589
 80077a8:	ffff0000 	.word	0xffff0000

080077ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b088      	sub	sp, #32
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077cc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
 80077d8:	2b10      	cmp	r3, #16
 80077da:	d003      	beq.n	80077e4 <HAL_I2C_EV_IRQHandler+0x38>
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	2b40      	cmp	r3, #64	; 0x40
 80077e0:	f040 80c1 	bne.w	8007966 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10d      	bne.n	800781a <HAL_I2C_EV_IRQHandler+0x6e>
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007804:	d003      	beq.n	800780e <HAL_I2C_EV_IRQHandler+0x62>
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800780c:	d101      	bne.n	8007812 <HAL_I2C_EV_IRQHandler+0x66>
 800780e:	2301      	movs	r3, #1
 8007810:	e000      	b.n	8007814 <HAL_I2C_EV_IRQHandler+0x68>
 8007812:	2300      	movs	r3, #0
 8007814:	2b01      	cmp	r3, #1
 8007816:	f000 8132 	beq.w	8007a7e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00c      	beq.n	800783e <HAL_I2C_EV_IRQHandler+0x92>
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	0a5b      	lsrs	r3, r3, #9
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	d006      	beq.n	800783e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f001 fc7b 	bl	800912c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fd83 	bl	8008342 <I2C_Master_SB>
 800783c:	e092      	b.n	8007964 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	08db      	lsrs	r3, r3, #3
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	d009      	beq.n	800785e <HAL_I2C_EV_IRQHandler+0xb2>
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	0a5b      	lsrs	r3, r3, #9
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fdf9 	bl	800844e <I2C_Master_ADD10>
 800785c:	e082      	b.n	8007964 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	085b      	lsrs	r3, r3, #1
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d009      	beq.n	800787e <HAL_I2C_EV_IRQHandler+0xd2>
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	0a5b      	lsrs	r3, r3, #9
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fe13 	bl	80084a2 <I2C_Master_ADDR>
 800787c:	e072      	b.n	8007964 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	089b      	lsrs	r3, r3, #2
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	2b00      	cmp	r3, #0
 8007888:	d03b      	beq.n	8007902 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007898:	f000 80f3 	beq.w	8007a82 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	09db      	lsrs	r3, r3, #7
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00f      	beq.n	80078c8 <HAL_I2C_EV_IRQHandler+0x11c>
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	0a9b      	lsrs	r3, r3, #10
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d009      	beq.n	80078c8 <HAL_I2C_EV_IRQHandler+0x11c>
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	089b      	lsrs	r3, r3, #2
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d103      	bne.n	80078c8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f9f3 	bl	8007cac <I2C_MasterTransmit_TXE>
 80078c6:	e04d      	b.n	8007964 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	089b      	lsrs	r3, r3, #2
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 80d6 	beq.w	8007a82 <HAL_I2C_EV_IRQHandler+0x2d6>
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	0a5b      	lsrs	r3, r3, #9
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f000 80cf 	beq.w	8007a82 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	2b21      	cmp	r3, #33	; 0x21
 80078e8:	d103      	bne.n	80078f2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa7a 	bl	8007de4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078f0:	e0c7      	b.n	8007a82 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
 80078f4:	2b40      	cmp	r3, #64	; 0x40
 80078f6:	f040 80c4 	bne.w	8007a82 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fae8 	bl	8007ed0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007900:	e0bf      	b.n	8007a82 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800790c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007910:	f000 80b7 	beq.w	8007a82 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	099b      	lsrs	r3, r3, #6
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00f      	beq.n	8007940 <HAL_I2C_EV_IRQHandler+0x194>
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	0a9b      	lsrs	r3, r3, #10
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d009      	beq.n	8007940 <HAL_I2C_EV_IRQHandler+0x194>
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	089b      	lsrs	r3, r3, #2
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b00      	cmp	r3, #0
 8007936:	d103      	bne.n	8007940 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fb5d 	bl	8007ff8 <I2C_MasterReceive_RXNE>
 800793e:	e011      	b.n	8007964 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	089b      	lsrs	r3, r3, #2
 8007944:	f003 0301 	and.w	r3, r3, #1
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 809a 	beq.w	8007a82 <HAL_I2C_EV_IRQHandler+0x2d6>
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	0a5b      	lsrs	r3, r3, #9
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 8093 	beq.w	8007a82 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fc06 	bl	800816e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007962:	e08e      	b.n	8007a82 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007964:	e08d      	b.n	8007a82 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796a:	2b00      	cmp	r3, #0
 800796c:	d004      	beq.n	8007978 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	61fb      	str	r3, [r7, #28]
 8007976:	e007      	b.n	8007988 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	085b      	lsrs	r3, r3, #1
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	2b00      	cmp	r3, #0
 8007992:	d012      	beq.n	80079ba <HAL_I2C_EV_IRQHandler+0x20e>
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	0a5b      	lsrs	r3, r3, #9
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00c      	beq.n	80079ba <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80079b0:	69b9      	ldr	r1, [r7, #24]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 ffc4 	bl	8008940 <I2C_Slave_ADDR>
 80079b8:	e066      	b.n	8007a88 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	091b      	lsrs	r3, r3, #4
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d009      	beq.n	80079da <HAL_I2C_EV_IRQHandler+0x22e>
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	0a5b      	lsrs	r3, r3, #9
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fffe 	bl	80089d4 <I2C_Slave_STOPF>
 80079d8:	e056      	b.n	8007a88 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	2b21      	cmp	r3, #33	; 0x21
 80079de:	d002      	beq.n	80079e6 <HAL_I2C_EV_IRQHandler+0x23a>
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	2b29      	cmp	r3, #41	; 0x29
 80079e4:	d125      	bne.n	8007a32 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	09db      	lsrs	r3, r3, #7
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00f      	beq.n	8007a12 <HAL_I2C_EV_IRQHandler+0x266>
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	0a9b      	lsrs	r3, r3, #10
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d009      	beq.n	8007a12 <HAL_I2C_EV_IRQHandler+0x266>
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	089b      	lsrs	r3, r3, #2
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d103      	bne.n	8007a12 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 feda 	bl	80087c4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a10:	e039      	b.n	8007a86 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	089b      	lsrs	r3, r3, #2
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d033      	beq.n	8007a86 <HAL_I2C_EV_IRQHandler+0x2da>
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	0a5b      	lsrs	r3, r3, #9
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d02d      	beq.n	8007a86 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 ff07 	bl	800883e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a30:	e029      	b.n	8007a86 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	099b      	lsrs	r3, r3, #6
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00f      	beq.n	8007a5e <HAL_I2C_EV_IRQHandler+0x2b2>
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	0a9b      	lsrs	r3, r3, #10
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d009      	beq.n	8007a5e <HAL_I2C_EV_IRQHandler+0x2b2>
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	089b      	lsrs	r3, r3, #2
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d103      	bne.n	8007a5e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 ff12 	bl	8008880 <I2C_SlaveReceive_RXNE>
 8007a5c:	e014      	b.n	8007a88 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	089b      	lsrs	r3, r3, #2
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00e      	beq.n	8007a88 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	0a5b      	lsrs	r3, r3, #9
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d008      	beq.n	8007a88 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 ff40 	bl	80088fc <I2C_SlaveReceive_BTF>
 8007a7c:	e004      	b.n	8007a88 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007a7e:	bf00      	nop
 8007a80:	e002      	b.n	8007a88 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a82:	bf00      	nop
 8007a84:	e000      	b.n	8007a88 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a86:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007a88:	3720      	adds	r7, #32
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b08a      	sub	sp, #40	; 0x28
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ab0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	0a1b      	lsrs	r3, r3, #8
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00e      	beq.n	8007adc <HAL_I2C_ER_IRQHandler+0x4e>
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	0a1b      	lsrs	r3, r3, #8
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d008      	beq.n	8007adc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	f043 0301 	orr.w	r3, r3, #1
 8007ad0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007ada:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	0a5b      	lsrs	r3, r3, #9
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00e      	beq.n	8007b06 <HAL_I2C_ER_IRQHandler+0x78>
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	0a1b      	lsrs	r3, r3, #8
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d008      	beq.n	8007b06 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	f043 0302 	orr.w	r3, r3, #2
 8007afa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007b04:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	0a9b      	lsrs	r3, r3, #10
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d03f      	beq.n	8007b92 <HAL_I2C_ER_IRQHandler+0x104>
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	0a1b      	lsrs	r3, r3, #8
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d039      	beq.n	8007b92 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007b1e:	7efb      	ldrb	r3, [r7, #27]
 8007b20:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b30:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b36:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007b38:	7ebb      	ldrb	r3, [r7, #26]
 8007b3a:	2b20      	cmp	r3, #32
 8007b3c:	d112      	bne.n	8007b64 <HAL_I2C_ER_IRQHandler+0xd6>
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10f      	bne.n	8007b64 <HAL_I2C_ER_IRQHandler+0xd6>
 8007b44:	7cfb      	ldrb	r3, [r7, #19]
 8007b46:	2b21      	cmp	r3, #33	; 0x21
 8007b48:	d008      	beq.n	8007b5c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007b4a:	7cfb      	ldrb	r3, [r7, #19]
 8007b4c:	2b29      	cmp	r3, #41	; 0x29
 8007b4e:	d005      	beq.n	8007b5c <HAL_I2C_ER_IRQHandler+0xce>
 8007b50:	7cfb      	ldrb	r3, [r7, #19]
 8007b52:	2b28      	cmp	r3, #40	; 0x28
 8007b54:	d106      	bne.n	8007b64 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2b21      	cmp	r3, #33	; 0x21
 8007b5a:	d103      	bne.n	8007b64 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 f869 	bl	8008c34 <I2C_Slave_AF>
 8007b62:	e016      	b.n	8007b92 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b6c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	f043 0304 	orr.w	r3, r3, #4
 8007b74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007b76:	7efb      	ldrb	r3, [r7, #27]
 8007b78:	2b10      	cmp	r3, #16
 8007b7a:	d002      	beq.n	8007b82 <HAL_I2C_ER_IRQHandler+0xf4>
 8007b7c:	7efb      	ldrb	r3, [r7, #27]
 8007b7e:	2b40      	cmp	r3, #64	; 0x40
 8007b80:	d107      	bne.n	8007b92 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b90:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007b92:	6a3b      	ldr	r3, [r7, #32]
 8007b94:	0adb      	lsrs	r3, r3, #11
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00e      	beq.n	8007bbc <HAL_I2C_ER_IRQHandler+0x12e>
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	0a1b      	lsrs	r3, r3, #8
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d008      	beq.n	8007bbc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	f043 0308 	orr.w	r3, r3, #8
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007bba:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d008      	beq.n	8007bd4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f001 f8a0 	bl	8008d14 <I2C_ITError>
  }
}
 8007bd4:	bf00      	nop
 8007bd6:	3728      	adds	r7, #40	; 0x28
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	70fb      	strb	r3, [r7, #3]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d150      	bne.n	8007d74 <I2C_MasterTransmit_TXE+0xc8>
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	2b21      	cmp	r3, #33	; 0x21
 8007cd6:	d14d      	bne.n	8007d74 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2b08      	cmp	r3, #8
 8007cdc:	d01d      	beq.n	8007d1a <I2C_MasterTransmit_TXE+0x6e>
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2b20      	cmp	r3, #32
 8007ce2:	d01a      	beq.n	8007d1a <I2C_MasterTransmit_TXE+0x6e>
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cea:	d016      	beq.n	8007d1a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007cfa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2211      	movs	r2, #17
 8007d00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7ff ff62 	bl	8007bdc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d18:	e060      	b.n	8007ddc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d28:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d38:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2220      	movs	r2, #32
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b40      	cmp	r3, #64	; 0x40
 8007d52:	d107      	bne.n	8007d64 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7ff ff7d 	bl	8007c5c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d62:	e03b      	b.n	8007ddc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff ff35 	bl	8007bdc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d72:	e033      	b.n	8007ddc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	2b21      	cmp	r3, #33	; 0x21
 8007d78:	d005      	beq.n	8007d86 <I2C_MasterTransmit_TXE+0xda>
 8007d7a:	7bbb      	ldrb	r3, [r7, #14]
 8007d7c:	2b40      	cmp	r3, #64	; 0x40
 8007d7e:	d12d      	bne.n	8007ddc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
 8007d82:	2b22      	cmp	r3, #34	; 0x22
 8007d84:	d12a      	bne.n	8007ddc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d108      	bne.n	8007da2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d9e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007da0:	e01c      	b.n	8007ddc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b40      	cmp	r3, #64	; 0x40
 8007dac:	d103      	bne.n	8007db6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f88e 	bl	8007ed0 <I2C_MemoryTransmit_TXE_BTF>
}
 8007db4:	e012      	b.n	8007ddc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	781a      	ldrb	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007dda:	e7ff      	b.n	8007ddc <I2C_MasterTransmit_TXE+0x130>
 8007ddc:	bf00      	nop
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b21      	cmp	r3, #33	; 0x21
 8007dfc:	d164      	bne.n	8007ec8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d012      	beq.n	8007e2e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	781a      	ldrb	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e18:	1c5a      	adds	r2, r3, #1
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	3b01      	subs	r3, #1
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007e2c:	e04c      	b.n	8007ec8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d01d      	beq.n	8007e70 <I2C_MasterTransmit_BTF+0x8c>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b20      	cmp	r3, #32
 8007e38:	d01a      	beq.n	8007e70 <I2C_MasterTransmit_BTF+0x8c>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e40:	d016      	beq.n	8007e70 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e50:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2211      	movs	r2, #17
 8007e56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2220      	movs	r2, #32
 8007e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7ff feb7 	bl	8007bdc <HAL_I2C_MasterTxCpltCallback>
}
 8007e6e:	e02b      	b.n	8007ec8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e7e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e8e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b40      	cmp	r3, #64	; 0x40
 8007ea8:	d107      	bne.n	8007eba <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7ff fed2 	bl	8007c5c <HAL_I2C_MemTxCpltCallback>
}
 8007eb8:	e006      	b.n	8007ec8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7ff fe8a 	bl	8007bdc <HAL_I2C_MasterTxCpltCallback>
}
 8007ec8:	bf00      	nop
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ede:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d11d      	bne.n	8007f24 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d10b      	bne.n	8007f08 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f00:	1c9a      	adds	r2, r3, #2
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007f06:	e073      	b.n	8007ff0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	121b      	asrs	r3, r3, #8
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007f22:	e065      	b.n	8007ff0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d10b      	bne.n	8007f44 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007f42:	e055      	b.n	8007ff0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d151      	bne.n	8007ff0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	2b22      	cmp	r3, #34	; 0x22
 8007f50:	d10d      	bne.n	8007f6e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f60:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007f6c:	e040      	b.n	8007ff0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d015      	beq.n	8007fa4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	2b21      	cmp	r3, #33	; 0x21
 8007f7c:	d112      	bne.n	8007fa4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	781a      	ldrb	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8e:	1c5a      	adds	r2, r3, #1
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007fa2:	e025      	b.n	8007ff0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d120      	bne.n	8007ff0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	2b21      	cmp	r3, #33	; 0x21
 8007fb2:	d11d      	bne.n	8007ff0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	685a      	ldr	r2, [r3, #4]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007fc2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fd2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f7ff fe36 	bl	8007c5c <HAL_I2C_MemTxCpltCallback>
}
 8007ff0:	bf00      	nop
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b22      	cmp	r3, #34	; 0x22
 800800a:	f040 80ac 	bne.w	8008166 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008012:	b29b      	uxth	r3, r3
 8008014:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2b03      	cmp	r3, #3
 800801a:	d921      	bls.n	8008060 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	691a      	ldr	r2, [r3, #16]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	b2d2      	uxtb	r2, r2
 8008028:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008038:	b29b      	uxth	r3, r3
 800803a:	3b01      	subs	r3, #1
 800803c:	b29a      	uxth	r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008046:	b29b      	uxth	r3, r3
 8008048:	2b03      	cmp	r3, #3
 800804a:	f040 808c 	bne.w	8008166 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685a      	ldr	r2, [r3, #4]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800805c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800805e:	e082      	b.n	8008166 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008064:	2b02      	cmp	r3, #2
 8008066:	d075      	beq.n	8008154 <I2C_MasterReceive_RXNE+0x15c>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d002      	beq.n	8008074 <I2C_MasterReceive_RXNE+0x7c>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d16f      	bne.n	8008154 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f001 f827 	bl	80090c8 <I2C_WaitOnSTOPRequestThroughIT>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d142      	bne.n	8008106 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800808e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800809e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	691a      	ldr	r2, [r3, #16]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	b2d2      	uxtb	r2, r2
 80080ac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b2:	1c5a      	adds	r2, r3, #1
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080bc:	b29b      	uxth	r3, r3
 80080be:	3b01      	subs	r3, #1
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2220      	movs	r2, #32
 80080ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b40      	cmp	r3, #64	; 0x40
 80080d8:	d10a      	bne.n	80080f0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff fdc1 	bl	8007c70 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80080ee:	e03a      	b.n	8008166 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2212      	movs	r2, #18
 80080fc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7ff fd76 	bl	8007bf0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008104:	e02f      	b.n	8008166 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008114:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	691a      	ldr	r2, [r3, #16]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	b2d2      	uxtb	r2, r2
 8008122:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008132:	b29b      	uxth	r3, r3
 8008134:	3b01      	subs	r3, #1
 8008136:	b29a      	uxth	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2220      	movs	r2, #32
 8008140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7ff fd99 	bl	8007c84 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008152:	e008      	b.n	8008166 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008162:	605a      	str	r2, [r3, #4]
}
 8008164:	e7ff      	b.n	8008166 <I2C_MasterReceive_RXNE+0x16e>
 8008166:	bf00      	nop
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008180:	b29b      	uxth	r3, r3
 8008182:	2b04      	cmp	r3, #4
 8008184:	d11b      	bne.n	80081be <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008194:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	691a      	ldr	r2, [r3, #16]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	b2d2      	uxtb	r2, r2
 80081a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	1c5a      	adds	r2, r3, #1
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	3b01      	subs	r3, #1
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80081bc:	e0bd      	b.n	800833a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	d129      	bne.n	800821c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081d6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b04      	cmp	r3, #4
 80081dc:	d00a      	beq.n	80081f4 <I2C_MasterReceive_BTF+0x86>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d007      	beq.n	80081f4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081f2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691a      	ldr	r2, [r3, #16]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	b2d2      	uxtb	r2, r2
 8008200:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008210:	b29b      	uxth	r3, r3
 8008212:	3b01      	subs	r3, #1
 8008214:	b29a      	uxth	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800821a:	e08e      	b.n	800833a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008220:	b29b      	uxth	r3, r3
 8008222:	2b02      	cmp	r3, #2
 8008224:	d176      	bne.n	8008314 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d002      	beq.n	8008232 <I2C_MasterReceive_BTF+0xc4>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2b10      	cmp	r3, #16
 8008230:	d108      	bne.n	8008244 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	e019      	b.n	8008278 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b04      	cmp	r3, #4
 8008248:	d002      	beq.n	8008250 <I2C_MasterReceive_BTF+0xe2>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b02      	cmp	r3, #2
 800824e:	d108      	bne.n	8008262 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	e00a      	b.n	8008278 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2b10      	cmp	r3, #16
 8008266:	d007      	beq.n	8008278 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008276:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	691a      	ldr	r2, [r3, #16]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	b2d2      	uxtb	r2, r2
 8008284:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008294:	b29b      	uxth	r3, r3
 8008296:	3b01      	subs	r3, #1
 8008298:	b29a      	uxth	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	691a      	ldr	r2, [r3, #16]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	3b01      	subs	r3, #1
 80082be:	b29a      	uxth	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80082d2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b40      	cmp	r3, #64	; 0x40
 80082e6:	d10a      	bne.n	80082fe <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7ff fcba 	bl	8007c70 <HAL_I2C_MemRxCpltCallback>
}
 80082fc:	e01d      	b.n	800833a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2212      	movs	r2, #18
 800830a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff fc6f 	bl	8007bf0 <HAL_I2C_MasterRxCpltCallback>
}
 8008312:	e012      	b.n	800833a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	691a      	ldr	r2, [r3, #16]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	b2d2      	uxtb	r2, r2
 8008320:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008330:	b29b      	uxth	r3, r3
 8008332:	3b01      	subs	r3, #1
 8008334:	b29a      	uxth	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800833a:	bf00      	nop
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b40      	cmp	r3, #64	; 0x40
 8008354:	d117      	bne.n	8008386 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800835a:	2b00      	cmp	r3, #0
 800835c:	d109      	bne.n	8008372 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008362:	b2db      	uxtb	r3, r3
 8008364:	461a      	mov	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800836e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008370:	e067      	b.n	8008442 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008376:	b2db      	uxtb	r3, r3
 8008378:	f043 0301 	orr.w	r3, r3, #1
 800837c:	b2da      	uxtb	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	611a      	str	r2, [r3, #16]
}
 8008384:	e05d      	b.n	8008442 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800838e:	d133      	bne.n	80083f8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b21      	cmp	r3, #33	; 0x21
 800839a:	d109      	bne.n	80083b0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	461a      	mov	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80083ac:	611a      	str	r2, [r3, #16]
 80083ae:	e008      	b.n	80083c2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	f043 0301 	orr.w	r3, r3, #1
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d004      	beq.n	80083d4 <I2C_Master_SB+0x92>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d108      	bne.n	80083e6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d032      	beq.n	8008442 <I2C_Master_SB+0x100>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d02d      	beq.n	8008442 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083f4:	605a      	str	r2, [r3, #4]
}
 80083f6:	e024      	b.n	8008442 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10e      	bne.n	800841e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008404:	b29b      	uxth	r3, r3
 8008406:	11db      	asrs	r3, r3, #7
 8008408:	b2db      	uxtb	r3, r3
 800840a:	f003 0306 	and.w	r3, r3, #6
 800840e:	b2db      	uxtb	r3, r3
 8008410:	f063 030f 	orn	r3, r3, #15
 8008414:	b2da      	uxtb	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	611a      	str	r2, [r3, #16]
}
 800841c:	e011      	b.n	8008442 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008422:	2b01      	cmp	r3, #1
 8008424:	d10d      	bne.n	8008442 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842a:	b29b      	uxth	r3, r3
 800842c:	11db      	asrs	r3, r3, #7
 800842e:	b2db      	uxtb	r3, r3
 8008430:	f003 0306 	and.w	r3, r3, #6
 8008434:	b2db      	uxtb	r3, r3
 8008436:	f063 030e 	orn	r3, r3, #14
 800843a:	b2da      	uxtb	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	611a      	str	r2, [r3, #16]
}
 8008442:	bf00      	nop
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800844e:	b480      	push	{r7}
 8008450:	b083      	sub	sp, #12
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800845a:	b2da      	uxtb	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008466:	2b00      	cmp	r3, #0
 8008468:	d004      	beq.n	8008474 <I2C_Master_ADD10+0x26>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008470:	2b00      	cmp	r3, #0
 8008472:	d108      	bne.n	8008486 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00c      	beq.n	8008496 <I2C_Master_ADD10+0x48>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008482:	2b00      	cmp	r3, #0
 8008484:	d007      	beq.n	8008496 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008494:	605a      	str	r2, [r3, #4]
  }
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b091      	sub	sp, #68	; 0x44
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084be:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b22      	cmp	r3, #34	; 0x22
 80084ca:	f040 8169 	bne.w	80087a0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10f      	bne.n	80084f6 <I2C_Master_ADDR+0x54>
 80084d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80084da:	2b40      	cmp	r3, #64	; 0x40
 80084dc:	d10b      	bne.n	80084f6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084de:	2300      	movs	r3, #0
 80084e0:	633b      	str	r3, [r7, #48]	; 0x30
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	633b      	str	r3, [r7, #48]	; 0x30
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	633b      	str	r3, [r7, #48]	; 0x30
 80084f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f4:	e160      	b.n	80087b8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d11d      	bne.n	800853a <I2C_Master_ADDR+0x98>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008506:	d118      	bne.n	800853a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008508:	2300      	movs	r3, #0
 800850a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800851c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800852c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	651a      	str	r2, [r3, #80]	; 0x50
 8008538:	e13e      	b.n	80087b8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800853e:	b29b      	uxth	r3, r3
 8008540:	2b00      	cmp	r3, #0
 8008542:	d113      	bne.n	800856c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008544:	2300      	movs	r3, #0
 8008546:	62bb      	str	r3, [r7, #40]	; 0x28
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	62bb      	str	r3, [r7, #40]	; 0x28
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	e115      	b.n	8008798 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008570:	b29b      	uxth	r3, r3
 8008572:	2b01      	cmp	r3, #1
 8008574:	f040 808a 	bne.w	800868c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800857e:	d137      	bne.n	80085f0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800858e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800859a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800859e:	d113      	bne.n	80085c8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ae:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085b0:	2300      	movs	r3, #0
 80085b2:	627b      	str	r3, [r7, #36]	; 0x24
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	627b      	str	r3, [r7, #36]	; 0x24
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	e0e7      	b.n	8008798 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085c8:	2300      	movs	r3, #0
 80085ca:	623b      	str	r3, [r7, #32]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	623b      	str	r3, [r7, #32]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	623b      	str	r3, [r7, #32]
 80085dc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	e0d3      	b.n	8008798 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80085f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f2:	2b08      	cmp	r3, #8
 80085f4:	d02e      	beq.n	8008654 <I2C_Master_ADDR+0x1b2>
 80085f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f8:	2b20      	cmp	r3, #32
 80085fa:	d02b      	beq.n	8008654 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80085fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fe:	2b12      	cmp	r3, #18
 8008600:	d102      	bne.n	8008608 <I2C_Master_ADDR+0x166>
 8008602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008604:	2b01      	cmp	r3, #1
 8008606:	d125      	bne.n	8008654 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860a:	2b04      	cmp	r3, #4
 800860c:	d00e      	beq.n	800862c <I2C_Master_ADDR+0x18a>
 800860e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008610:	2b02      	cmp	r3, #2
 8008612:	d00b      	beq.n	800862c <I2C_Master_ADDR+0x18a>
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	2b10      	cmp	r3, #16
 8008618:	d008      	beq.n	800862c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	e007      	b.n	800863c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800863a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800863c:	2300      	movs	r3, #0
 800863e:	61fb      	str	r3, [r7, #28]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	61fb      	str	r3, [r7, #28]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	61fb      	str	r3, [r7, #28]
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	e0a1      	b.n	8008798 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008662:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008664:	2300      	movs	r3, #0
 8008666:	61bb      	str	r3, [r7, #24]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	61bb      	str	r3, [r7, #24]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	61bb      	str	r3, [r7, #24]
 8008678:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	e085      	b.n	8008798 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008690:	b29b      	uxth	r3, r3
 8008692:	2b02      	cmp	r3, #2
 8008694:	d14d      	bne.n	8008732 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008698:	2b04      	cmp	r3, #4
 800869a:	d016      	beq.n	80086ca <I2C_Master_ADDR+0x228>
 800869c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d013      	beq.n	80086ca <I2C_Master_ADDR+0x228>
 80086a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a4:	2b10      	cmp	r3, #16
 80086a6:	d010      	beq.n	80086ca <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086b6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	e007      	b.n	80086da <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086d8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086e8:	d117      	bne.n	800871a <I2C_Master_ADDR+0x278>
 80086ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086f0:	d00b      	beq.n	800870a <I2C_Master_ADDR+0x268>
 80086f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d008      	beq.n	800870a <I2C_Master_ADDR+0x268>
 80086f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fa:	2b08      	cmp	r3, #8
 80086fc:	d005      	beq.n	800870a <I2C_Master_ADDR+0x268>
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	2b10      	cmp	r3, #16
 8008702:	d002      	beq.n	800870a <I2C_Master_ADDR+0x268>
 8008704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008706:	2b20      	cmp	r3, #32
 8008708:	d107      	bne.n	800871a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	685a      	ldr	r2, [r3, #4]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008718:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800871a:	2300      	movs	r3, #0
 800871c:	617b      	str	r3, [r7, #20]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	617b      	str	r3, [r7, #20]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	617b      	str	r3, [r7, #20]
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	e032      	b.n	8008798 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008740:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800874c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008750:	d117      	bne.n	8008782 <I2C_Master_ADDR+0x2e0>
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008758:	d00b      	beq.n	8008772 <I2C_Master_ADDR+0x2d0>
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	2b01      	cmp	r3, #1
 800875e:	d008      	beq.n	8008772 <I2C_Master_ADDR+0x2d0>
 8008760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008762:	2b08      	cmp	r3, #8
 8008764:	d005      	beq.n	8008772 <I2C_Master_ADDR+0x2d0>
 8008766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008768:	2b10      	cmp	r3, #16
 800876a:	d002      	beq.n	8008772 <I2C_Master_ADDR+0x2d0>
 800876c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876e:	2b20      	cmp	r3, #32
 8008770:	d107      	bne.n	8008782 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008780:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008782:	2300      	movs	r3, #0
 8008784:	613b      	str	r3, [r7, #16]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	613b      	str	r3, [r7, #16]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	613b      	str	r3, [r7, #16]
 8008796:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800879e:	e00b      	b.n	80087b8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087a0:	2300      	movs	r3, #0
 80087a2:	60fb      	str	r3, [r7, #12]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	60fb      	str	r3, [r7, #12]
 80087b4:	68fb      	ldr	r3, [r7, #12]
}
 80087b6:	e7ff      	b.n	80087b8 <I2C_Master_ADDR+0x316>
 80087b8:	bf00      	nop
 80087ba:	3744      	adds	r7, #68	; 0x44
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d8:	b29b      	uxth	r3, r3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d02b      	beq.n	8008836 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e2:	781a      	ldrb	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ee:	1c5a      	adds	r2, r3, #1
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	3b01      	subs	r3, #1
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008806:	b29b      	uxth	r3, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	d114      	bne.n	8008836 <I2C_SlaveTransmit_TXE+0x72>
 800880c:	7bfb      	ldrb	r3, [r7, #15]
 800880e:	2b29      	cmp	r3, #41	; 0x29
 8008810:	d111      	bne.n	8008836 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008820:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2221      	movs	r2, #33	; 0x21
 8008826:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2228      	movs	r2, #40	; 0x28
 800882c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7ff f9e7 	bl	8007c04 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008836:	bf00      	nop
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800883e:	b480      	push	{r7}
 8008840:	b083      	sub	sp, #12
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800884a:	b29b      	uxth	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	d011      	beq.n	8008874 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008854:	781a      	ldrb	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	1c5a      	adds	r2, r3, #1
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800886a:	b29b      	uxth	r3, r3
 800886c:	3b01      	subs	r3, #1
 800886e:	b29a      	uxth	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800888e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008894:	b29b      	uxth	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d02c      	beq.n	80088f4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	691a      	ldr	r2, [r3, #16]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a4:	b2d2      	uxtb	r2, r2
 80088a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	1c5a      	adds	r2, r3, #1
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	3b01      	subs	r3, #1
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d114      	bne.n	80088f4 <I2C_SlaveReceive_RXNE+0x74>
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	2b2a      	cmp	r3, #42	; 0x2a
 80088ce:	d111      	bne.n	80088f4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685a      	ldr	r2, [r3, #4]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088de:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2222      	movs	r2, #34	; 0x22
 80088e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2228      	movs	r2, #40	; 0x28
 80088ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7ff f992 	bl	8007c18 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80088f4:	bf00      	nop
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008908:	b29b      	uxth	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d012      	beq.n	8008934 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	691a      	ldr	r2, [r3, #16]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	b2d2      	uxtb	r2, r2
 800891a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008920:	1c5a      	adds	r2, r3, #1
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800892a:	b29b      	uxth	r3, r3
 800892c:	3b01      	subs	r3, #1
 800892e:	b29a      	uxth	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800894a:	2300      	movs	r3, #0
 800894c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008954:	b2db      	uxtb	r3, r3
 8008956:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800895a:	2b28      	cmp	r3, #40	; 0x28
 800895c:	d127      	bne.n	80089ae <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800896c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	089b      	lsrs	r3, r3, #2
 8008972:	f003 0301 	and.w	r3, r3, #1
 8008976:	2b00      	cmp	r3, #0
 8008978:	d101      	bne.n	800897e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800897a:	2301      	movs	r3, #1
 800897c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	09db      	lsrs	r3, r3, #7
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d103      	bne.n	8008992 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	81bb      	strh	r3, [r7, #12]
 8008990:	e002      	b.n	8008998 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80089a0:	89ba      	ldrh	r2, [r7, #12]
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7ff f940 	bl	8007c2c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80089ac:	e00e      	b.n	80089cc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089ae:	2300      	movs	r3, #0
 80089b0:	60bb      	str	r3, [r7, #8]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	60bb      	str	r3, [r7, #8]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	60bb      	str	r3, [r7, #8]
 80089c2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80089cc:	bf00      	nop
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089e2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	685a      	ldr	r2, [r3, #4]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80089f2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80089f4:	2300      	movs	r3, #0
 80089f6:	60bb      	str	r3, [r7, #8]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	60bb      	str	r3, [r7, #8]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f042 0201 	orr.w	r2, r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a20:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a30:	d172      	bne.n	8008b18 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	2b22      	cmp	r3, #34	; 0x22
 8008a36:	d002      	beq.n	8008a3e <I2C_Slave_STOPF+0x6a>
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
 8008a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a3c:	d135      	bne.n	8008aaa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d005      	beq.n	8008a62 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5a:	f043 0204 	orr.w	r2, r3, #4
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fe f92a 	bl	8006cd0 <HAL_DMA_GetState>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d049      	beq.n	8008b16 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a86:	4a69      	ldr	r2, [pc, #420]	; (8008c2c <I2C_Slave_STOPF+0x258>)
 8008a88:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fd ff72 	bl	8006978 <HAL_DMA_Abort_IT>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d03d      	beq.n	8008b16 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008aa8:	e035      	b.n	8008b16 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d005      	beq.n	8008ace <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	f043 0204 	orr.w	r2, r3, #4
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008adc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fe f8f4 	bl	8006cd0 <HAL_DMA_GetState>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d014      	beq.n	8008b18 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af2:	4a4e      	ldr	r2, [pc, #312]	; (8008c2c <I2C_Slave_STOPF+0x258>)
 8008af4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fd ff3c 	bl	8006978 <HAL_DMA_Abort_IT>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d008      	beq.n	8008b18 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b10:	4610      	mov	r0, r2
 8008b12:	4798      	blx	r3
 8008b14:	e000      	b.n	8008b18 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008b16:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d03e      	beq.n	8008ba0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	f003 0304 	and.w	r3, r3, #4
 8008b2c:	2b04      	cmp	r3, #4
 8008b2e:	d112      	bne.n	8008b56 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	691a      	ldr	r2, [r3, #16]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3a:	b2d2      	uxtb	r2, r2
 8008b3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b60:	2b40      	cmp	r3, #64	; 0x40
 8008b62:	d112      	bne.n	8008b8a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	691a      	ldr	r2, [r3, #16]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6e:	b2d2      	uxtb	r2, r2
 8008b70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b76:	1c5a      	adds	r2, r3, #1
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	3b01      	subs	r3, #1
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d005      	beq.n	8008ba0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b98:	f043 0204 	orr.w	r2, r3, #4
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d003      	beq.n	8008bb0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f8b3 	bl	8008d14 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008bae:	e039      	b.n	8008c24 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
 8008bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8008bb4:	d109      	bne.n	8008bca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2228      	movs	r2, #40	; 0x28
 8008bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7ff f827 	bl	8007c18 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b28      	cmp	r3, #40	; 0x28
 8008bd4:	d111      	bne.n	8008bfa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a15      	ldr	r2, [pc, #84]	; (8008c30 <I2C_Slave_STOPF+0x25c>)
 8008bda:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2220      	movs	r2, #32
 8008be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff f828 	bl	8007c48 <HAL_I2C_ListenCpltCallback>
}
 8008bf8:	e014      	b.n	8008c24 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfe:	2b22      	cmp	r3, #34	; 0x22
 8008c00:	d002      	beq.n	8008c08 <I2C_Slave_STOPF+0x234>
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	2b22      	cmp	r3, #34	; 0x22
 8008c06:	d10d      	bne.n	8008c24 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2220      	movs	r2, #32
 8008c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7fe fffa 	bl	8007c18 <HAL_I2C_SlaveRxCpltCallback>
}
 8008c24:	bf00      	nop
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	08008f79 	.word	0x08008f79
 8008c30:	ffff0000 	.word	0xffff0000

08008c34 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c42:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c48:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	2b08      	cmp	r3, #8
 8008c4e:	d002      	beq.n	8008c56 <I2C_Slave_AF+0x22>
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2b20      	cmp	r3, #32
 8008c54:	d129      	bne.n	8008caa <I2C_Slave_AF+0x76>
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	2b28      	cmp	r3, #40	; 0x28
 8008c5a:	d126      	bne.n	8008caa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a2c      	ldr	r2, [pc, #176]	; (8008d10 <I2C_Slave_AF+0xdc>)
 8008c60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008c70:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c7a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c8a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2220      	movs	r2, #32
 8008c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7fe ffd0 	bl	8007c48 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008ca8:	e02e      	b.n	8008d08 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
 8008cac:	2b21      	cmp	r3, #33	; 0x21
 8008cae:	d126      	bne.n	8008cfe <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a17      	ldr	r2, [pc, #92]	; (8008d10 <I2C_Slave_AF+0xdc>)
 8008cb4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2221      	movs	r2, #33	; 0x21
 8008cba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008cda:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ce4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cf4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7fe ff84 	bl	8007c04 <HAL_I2C_SlaveTxCpltCallback>
}
 8008cfc:	e004      	b.n	8008d08 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d06:	615a      	str	r2, [r3, #20]
}
 8008d08:	bf00      	nop
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	ffff0000 	.word	0xffff0000

08008d14 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d2a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	2b10      	cmp	r3, #16
 8008d30:	d002      	beq.n	8008d38 <I2C_ITError+0x24>
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	2b40      	cmp	r3, #64	; 0x40
 8008d36:	d10a      	bne.n	8008d4e <I2C_ITError+0x3a>
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	2b22      	cmp	r3, #34	; 0x22
 8008d3c:	d107      	bne.n	8008d4e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d4c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008d4e:	7bfb      	ldrb	r3, [r7, #15]
 8008d50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008d54:	2b28      	cmp	r3, #40	; 0x28
 8008d56:	d107      	bne.n	8008d68 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2228      	movs	r2, #40	; 0x28
 8008d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008d66:	e015      	b.n	8008d94 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d76:	d00a      	beq.n	8008d8e <I2C_ITError+0x7a>
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	2b60      	cmp	r3, #96	; 0x60
 8008d7c:	d007      	beq.n	8008d8e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2220      	movs	r2, #32
 8008d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008da2:	d162      	bne.n	8008e6a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008db2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d020      	beq.n	8008e04 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc6:	4a6a      	ldr	r2, [pc, #424]	; (8008f70 <I2C_ITError+0x25c>)
 8008dc8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fd fdd2 	bl	8006978 <HAL_DMA_Abort_IT>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f000 8089 	beq.w	8008eee <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f022 0201 	bic.w	r2, r2, #1
 8008dea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2220      	movs	r2, #32
 8008df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008dfe:	4610      	mov	r0, r2
 8008e00:	4798      	blx	r3
 8008e02:	e074      	b.n	8008eee <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e08:	4a59      	ldr	r2, [pc, #356]	; (8008f70 <I2C_ITError+0x25c>)
 8008e0a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fd fdb1 	bl	8006978 <HAL_DMA_Abort_IT>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d068      	beq.n	8008eee <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e26:	2b40      	cmp	r3, #64	; 0x40
 8008e28:	d10b      	bne.n	8008e42 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	691a      	ldr	r2, [r3, #16]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	b2d2      	uxtb	r2, r2
 8008e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	1c5a      	adds	r2, r3, #1
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f022 0201 	bic.w	r2, r2, #1
 8008e50:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2220      	movs	r2, #32
 8008e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e64:	4610      	mov	r0, r2
 8008e66:	4798      	blx	r3
 8008e68:	e041      	b.n	8008eee <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b60      	cmp	r3, #96	; 0x60
 8008e74:	d125      	bne.n	8008ec2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2220      	movs	r2, #32
 8008e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8e:	2b40      	cmp	r3, #64	; 0x40
 8008e90:	d10b      	bne.n	8008eaa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	691a      	ldr	r2, [r3, #16]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9c:	b2d2      	uxtb	r2, r2
 8008e9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea4:	1c5a      	adds	r2, r3, #1
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f022 0201 	bic.w	r2, r2, #1
 8008eb8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f7fe feec 	bl	8007c98 <HAL_I2C_AbortCpltCallback>
 8008ec0:	e015      	b.n	8008eee <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ecc:	2b40      	cmp	r3, #64	; 0x40
 8008ece:	d10b      	bne.n	8008ee8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	691a      	ldr	r2, [r3, #16]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eda:	b2d2      	uxtb	r2, r2
 8008edc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7fe fecb 	bl	8007c84 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d10e      	bne.n	8008f1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d109      	bne.n	8008f1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d104      	bne.n	8008f1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f2a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f32:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	d113      	bne.n	8008f68 <I2C_ITError+0x254>
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	2b28      	cmp	r3, #40	; 0x28
 8008f44:	d110      	bne.n	8008f68 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a0a      	ldr	r2, [pc, #40]	; (8008f74 <I2C_ITError+0x260>)
 8008f4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2220      	movs	r2, #32
 8008f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7fe fe70 	bl	8007c48 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008f68:	bf00      	nop
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	08008f79 	.word	0x08008f79
 8008f74:	ffff0000 	.word	0xffff0000

08008f78 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f80:	2300      	movs	r3, #0
 8008f82:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f88:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f90:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008f92:	4b4b      	ldr	r3, [pc, #300]	; (80090c0 <I2C_DMAAbort+0x148>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	08db      	lsrs	r3, r3, #3
 8008f98:	4a4a      	ldr	r2, [pc, #296]	; (80090c4 <I2C_DMAAbort+0x14c>)
 8008f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f9e:	0a1a      	lsrs	r2, r3, #8
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4413      	add	r3, r2
 8008fa6:	00da      	lsls	r2, r3, #3
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d106      	bne.n	8008fc0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	f043 0220 	orr.w	r2, r3, #32
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008fbe:	e00a      	b.n	8008fd6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fd4:	d0ea      	beq.n	8008fac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d003      	beq.n	8008ff6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009004:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	2200      	movs	r2, #0
 800900a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009018:	2200      	movs	r2, #0
 800901a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009020:	2b00      	cmp	r3, #0
 8009022:	d003      	beq.n	800902c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009028:	2200      	movs	r2, #0
 800902a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f022 0201 	bic.w	r2, r2, #1
 800903a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b60      	cmp	r3, #96	; 0x60
 8009046:	d10e      	bne.n	8009066 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2220      	movs	r2, #32
 800904c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	2200      	movs	r2, #0
 800905c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800905e:	6978      	ldr	r0, [r7, #20]
 8009060:	f7fe fe1a 	bl	8007c98 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009064:	e027      	b.n	80090b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009066:	7cfb      	ldrb	r3, [r7, #19]
 8009068:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800906c:	2b28      	cmp	r3, #40	; 0x28
 800906e:	d117      	bne.n	80090a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0201 	orr.w	r2, r2, #1
 800907e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800908e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	2200      	movs	r2, #0
 8009094:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2228      	movs	r2, #40	; 0x28
 800909a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800909e:	e007      	b.n	80090b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	2220      	movs	r2, #32
 80090a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80090b0:	6978      	ldr	r0, [r7, #20]
 80090b2:	f7fe fde7 	bl	8007c84 <HAL_I2C_ErrorCallback>
}
 80090b6:	bf00      	nop
 80090b8:	3718      	adds	r7, #24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	20000430 	.word	0x20000430
 80090c4:	14f8b589 	.word	0x14f8b589

080090c8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090d0:	2300      	movs	r3, #0
 80090d2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80090d4:	4b13      	ldr	r3, [pc, #76]	; (8009124 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	08db      	lsrs	r3, r3, #3
 80090da:	4a13      	ldr	r2, [pc, #76]	; (8009128 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80090dc:	fba2 2303 	umull	r2, r3, r2, r3
 80090e0:	0a1a      	lsrs	r2, r3, #8
 80090e2:	4613      	mov	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3b01      	subs	r3, #1
 80090ee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d107      	bne.n	8009106 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fa:	f043 0220 	orr.w	r2, r3, #32
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e008      	b.n	8009118 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009114:	d0e9      	beq.n	80090ea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3714      	adds	r7, #20
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr
 8009124:	20000430 	.word	0x20000430
 8009128:	14f8b589 	.word	0x14f8b589

0800912c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009138:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800913c:	d103      	bne.n	8009146 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009144:	e007      	b.n	8009156 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800914e:	d102      	bne.n	8009156 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2208      	movs	r2, #8
 8009154:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009156:	bf00      	nop
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
	...

08009164 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e267      	b.n	8009646 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0301 	and.w	r3, r3, #1
 800917e:	2b00      	cmp	r3, #0
 8009180:	d075      	beq.n	800926e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009182:	4b88      	ldr	r3, [pc, #544]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f003 030c 	and.w	r3, r3, #12
 800918a:	2b04      	cmp	r3, #4
 800918c:	d00c      	beq.n	80091a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800918e:	4b85      	ldr	r3, [pc, #532]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009196:	2b08      	cmp	r3, #8
 8009198:	d112      	bne.n	80091c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800919a:	4b82      	ldr	r3, [pc, #520]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091a6:	d10b      	bne.n	80091c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091a8:	4b7e      	ldr	r3, [pc, #504]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d05b      	beq.n	800926c <HAL_RCC_OscConfig+0x108>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d157      	bne.n	800926c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e242      	b.n	8009646 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091c8:	d106      	bne.n	80091d8 <HAL_RCC_OscConfig+0x74>
 80091ca:	4b76      	ldr	r3, [pc, #472]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a75      	ldr	r2, [pc, #468]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 80091d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091d4:	6013      	str	r3, [r2, #0]
 80091d6:	e01d      	b.n	8009214 <HAL_RCC_OscConfig+0xb0>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091e0:	d10c      	bne.n	80091fc <HAL_RCC_OscConfig+0x98>
 80091e2:	4b70      	ldr	r3, [pc, #448]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a6f      	ldr	r2, [pc, #444]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 80091e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80091ec:	6013      	str	r3, [r2, #0]
 80091ee:	4b6d      	ldr	r3, [pc, #436]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a6c      	ldr	r2, [pc, #432]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 80091f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	e00b      	b.n	8009214 <HAL_RCC_OscConfig+0xb0>
 80091fc:	4b69      	ldr	r3, [pc, #420]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a68      	ldr	r2, [pc, #416]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 8009202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009206:	6013      	str	r3, [r2, #0]
 8009208:	4b66      	ldr	r3, [pc, #408]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a65      	ldr	r2, [pc, #404]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 800920e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d013      	beq.n	8009244 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800921c:	f7fd f918 	bl	8006450 <HAL_GetTick>
 8009220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009222:	e008      	b.n	8009236 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009224:	f7fd f914 	bl	8006450 <HAL_GetTick>
 8009228:	4602      	mov	r2, r0
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	2b64      	cmp	r3, #100	; 0x64
 8009230:	d901      	bls.n	8009236 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009232:	2303      	movs	r3, #3
 8009234:	e207      	b.n	8009646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009236:	4b5b      	ldr	r3, [pc, #364]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0f0      	beq.n	8009224 <HAL_RCC_OscConfig+0xc0>
 8009242:	e014      	b.n	800926e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009244:	f7fd f904 	bl	8006450 <HAL_GetTick>
 8009248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800924a:	e008      	b.n	800925e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800924c:	f7fd f900 	bl	8006450 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	2b64      	cmp	r3, #100	; 0x64
 8009258:	d901      	bls.n	800925e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800925a:	2303      	movs	r3, #3
 800925c:	e1f3      	b.n	8009646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800925e:	4b51      	ldr	r3, [pc, #324]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1f0      	bne.n	800924c <HAL_RCC_OscConfig+0xe8>
 800926a:	e000      	b.n	800926e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800926c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0302 	and.w	r3, r3, #2
 8009276:	2b00      	cmp	r3, #0
 8009278:	d063      	beq.n	8009342 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800927a:	4b4a      	ldr	r3, [pc, #296]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f003 030c 	and.w	r3, r3, #12
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00b      	beq.n	800929e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009286:	4b47      	ldr	r3, [pc, #284]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800928e:	2b08      	cmp	r3, #8
 8009290:	d11c      	bne.n	80092cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009292:	4b44      	ldr	r3, [pc, #272]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800929a:	2b00      	cmp	r3, #0
 800929c:	d116      	bne.n	80092cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800929e:	4b41      	ldr	r3, [pc, #260]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 0302 	and.w	r3, r3, #2
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d005      	beq.n	80092b6 <HAL_RCC_OscConfig+0x152>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d001      	beq.n	80092b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e1c7      	b.n	8009646 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092b6:	4b3b      	ldr	r3, [pc, #236]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	00db      	lsls	r3, r3, #3
 80092c4:	4937      	ldr	r1, [pc, #220]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092ca:	e03a      	b.n	8009342 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d020      	beq.n	8009316 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80092d4:	4b34      	ldr	r3, [pc, #208]	; (80093a8 <HAL_RCC_OscConfig+0x244>)
 80092d6:	2201      	movs	r2, #1
 80092d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092da:	f7fd f8b9 	bl	8006450 <HAL_GetTick>
 80092de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092e0:	e008      	b.n	80092f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092e2:	f7fd f8b5 	bl	8006450 <HAL_GetTick>
 80092e6:	4602      	mov	r2, r0
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d901      	bls.n	80092f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e1a8      	b.n	8009646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092f4:	4b2b      	ldr	r3, [pc, #172]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0302 	and.w	r3, r3, #2
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d0f0      	beq.n	80092e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009300:	4b28      	ldr	r3, [pc, #160]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	00db      	lsls	r3, r3, #3
 800930e:	4925      	ldr	r1, [pc, #148]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 8009310:	4313      	orrs	r3, r2
 8009312:	600b      	str	r3, [r1, #0]
 8009314:	e015      	b.n	8009342 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009316:	4b24      	ldr	r3, [pc, #144]	; (80093a8 <HAL_RCC_OscConfig+0x244>)
 8009318:	2200      	movs	r2, #0
 800931a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800931c:	f7fd f898 	bl	8006450 <HAL_GetTick>
 8009320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009322:	e008      	b.n	8009336 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009324:	f7fd f894 	bl	8006450 <HAL_GetTick>
 8009328:	4602      	mov	r2, r0
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	2b02      	cmp	r3, #2
 8009330:	d901      	bls.n	8009336 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	e187      	b.n	8009646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009336:	4b1b      	ldr	r3, [pc, #108]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f003 0302 	and.w	r3, r3, #2
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1f0      	bne.n	8009324 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 0308 	and.w	r3, r3, #8
 800934a:	2b00      	cmp	r3, #0
 800934c:	d036      	beq.n	80093bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d016      	beq.n	8009384 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009356:	4b15      	ldr	r3, [pc, #84]	; (80093ac <HAL_RCC_OscConfig+0x248>)
 8009358:	2201      	movs	r2, #1
 800935a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800935c:	f7fd f878 	bl	8006450 <HAL_GetTick>
 8009360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009362:	e008      	b.n	8009376 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009364:	f7fd f874 	bl	8006450 <HAL_GetTick>
 8009368:	4602      	mov	r2, r0
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	2b02      	cmp	r3, #2
 8009370:	d901      	bls.n	8009376 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009372:	2303      	movs	r3, #3
 8009374:	e167      	b.n	8009646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009376:	4b0b      	ldr	r3, [pc, #44]	; (80093a4 <HAL_RCC_OscConfig+0x240>)
 8009378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800937a:	f003 0302 	and.w	r3, r3, #2
 800937e:	2b00      	cmp	r3, #0
 8009380:	d0f0      	beq.n	8009364 <HAL_RCC_OscConfig+0x200>
 8009382:	e01b      	b.n	80093bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009384:	4b09      	ldr	r3, [pc, #36]	; (80093ac <HAL_RCC_OscConfig+0x248>)
 8009386:	2200      	movs	r2, #0
 8009388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800938a:	f7fd f861 	bl	8006450 <HAL_GetTick>
 800938e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009390:	e00e      	b.n	80093b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009392:	f7fd f85d 	bl	8006450 <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	2b02      	cmp	r3, #2
 800939e:	d907      	bls.n	80093b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e150      	b.n	8009646 <HAL_RCC_OscConfig+0x4e2>
 80093a4:	40023800 	.word	0x40023800
 80093a8:	42470000 	.word	0x42470000
 80093ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093b0:	4b88      	ldr	r3, [pc, #544]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 80093b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093b4:	f003 0302 	and.w	r3, r3, #2
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1ea      	bne.n	8009392 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 0304 	and.w	r3, r3, #4
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 8097 	beq.w	80094f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093ca:	2300      	movs	r3, #0
 80093cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093ce:	4b81      	ldr	r3, [pc, #516]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 80093d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10f      	bne.n	80093fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093da:	2300      	movs	r3, #0
 80093dc:	60bb      	str	r3, [r7, #8]
 80093de:	4b7d      	ldr	r3, [pc, #500]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 80093e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e2:	4a7c      	ldr	r2, [pc, #496]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 80093e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093e8:	6413      	str	r3, [r2, #64]	; 0x40
 80093ea:	4b7a      	ldr	r3, [pc, #488]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 80093ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093f2:	60bb      	str	r3, [r7, #8]
 80093f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80093f6:	2301      	movs	r3, #1
 80093f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093fa:	4b77      	ldr	r3, [pc, #476]	; (80095d8 <HAL_RCC_OscConfig+0x474>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009402:	2b00      	cmp	r3, #0
 8009404:	d118      	bne.n	8009438 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009406:	4b74      	ldr	r3, [pc, #464]	; (80095d8 <HAL_RCC_OscConfig+0x474>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a73      	ldr	r2, [pc, #460]	; (80095d8 <HAL_RCC_OscConfig+0x474>)
 800940c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009412:	f7fd f81d 	bl	8006450 <HAL_GetTick>
 8009416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009418:	e008      	b.n	800942c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800941a:	f7fd f819 	bl	8006450 <HAL_GetTick>
 800941e:	4602      	mov	r2, r0
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	2b02      	cmp	r3, #2
 8009426:	d901      	bls.n	800942c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009428:	2303      	movs	r3, #3
 800942a:	e10c      	b.n	8009646 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800942c:	4b6a      	ldr	r3, [pc, #424]	; (80095d8 <HAL_RCC_OscConfig+0x474>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009434:	2b00      	cmp	r3, #0
 8009436:	d0f0      	beq.n	800941a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d106      	bne.n	800944e <HAL_RCC_OscConfig+0x2ea>
 8009440:	4b64      	ldr	r3, [pc, #400]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 8009442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009444:	4a63      	ldr	r2, [pc, #396]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 8009446:	f043 0301 	orr.w	r3, r3, #1
 800944a:	6713      	str	r3, [r2, #112]	; 0x70
 800944c:	e01c      	b.n	8009488 <HAL_RCC_OscConfig+0x324>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	2b05      	cmp	r3, #5
 8009454:	d10c      	bne.n	8009470 <HAL_RCC_OscConfig+0x30c>
 8009456:	4b5f      	ldr	r3, [pc, #380]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 8009458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800945a:	4a5e      	ldr	r2, [pc, #376]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 800945c:	f043 0304 	orr.w	r3, r3, #4
 8009460:	6713      	str	r3, [r2, #112]	; 0x70
 8009462:	4b5c      	ldr	r3, [pc, #368]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 8009464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009466:	4a5b      	ldr	r2, [pc, #364]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 8009468:	f043 0301 	orr.w	r3, r3, #1
 800946c:	6713      	str	r3, [r2, #112]	; 0x70
 800946e:	e00b      	b.n	8009488 <HAL_RCC_OscConfig+0x324>
 8009470:	4b58      	ldr	r3, [pc, #352]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 8009472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009474:	4a57      	ldr	r2, [pc, #348]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 8009476:	f023 0301 	bic.w	r3, r3, #1
 800947a:	6713      	str	r3, [r2, #112]	; 0x70
 800947c:	4b55      	ldr	r3, [pc, #340]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 800947e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009480:	4a54      	ldr	r2, [pc, #336]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 8009482:	f023 0304 	bic.w	r3, r3, #4
 8009486:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d015      	beq.n	80094bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009490:	f7fc ffde 	bl	8006450 <HAL_GetTick>
 8009494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009496:	e00a      	b.n	80094ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009498:	f7fc ffda 	bl	8006450 <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d901      	bls.n	80094ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e0cb      	b.n	8009646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094ae:	4b49      	ldr	r3, [pc, #292]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 80094b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b2:	f003 0302 	and.w	r3, r3, #2
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d0ee      	beq.n	8009498 <HAL_RCC_OscConfig+0x334>
 80094ba:	e014      	b.n	80094e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094bc:	f7fc ffc8 	bl	8006450 <HAL_GetTick>
 80094c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094c2:	e00a      	b.n	80094da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094c4:	f7fc ffc4 	bl	8006450 <HAL_GetTick>
 80094c8:	4602      	mov	r2, r0
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d901      	bls.n	80094da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e0b5      	b.n	8009646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094da:	4b3e      	ldr	r3, [pc, #248]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 80094dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094de:	f003 0302 	and.w	r3, r3, #2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1ee      	bne.n	80094c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094e6:	7dfb      	ldrb	r3, [r7, #23]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d105      	bne.n	80094f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094ec:	4b39      	ldr	r3, [pc, #228]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 80094ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f0:	4a38      	ldr	r2, [pc, #224]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 80094f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 80a1 	beq.w	8009644 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009502:	4b34      	ldr	r3, [pc, #208]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	f003 030c 	and.w	r3, r3, #12
 800950a:	2b08      	cmp	r3, #8
 800950c:	d05c      	beq.n	80095c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	2b02      	cmp	r3, #2
 8009514:	d141      	bne.n	800959a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009516:	4b31      	ldr	r3, [pc, #196]	; (80095dc <HAL_RCC_OscConfig+0x478>)
 8009518:	2200      	movs	r2, #0
 800951a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800951c:	f7fc ff98 	bl	8006450 <HAL_GetTick>
 8009520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009522:	e008      	b.n	8009536 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009524:	f7fc ff94 	bl	8006450 <HAL_GetTick>
 8009528:	4602      	mov	r2, r0
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	2b02      	cmp	r3, #2
 8009530:	d901      	bls.n	8009536 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	e087      	b.n	8009646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009536:	4b27      	ldr	r3, [pc, #156]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1f0      	bne.n	8009524 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	69da      	ldr	r2, [r3, #28]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	431a      	orrs	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	019b      	lsls	r3, r3, #6
 8009552:	431a      	orrs	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009558:	085b      	lsrs	r3, r3, #1
 800955a:	3b01      	subs	r3, #1
 800955c:	041b      	lsls	r3, r3, #16
 800955e:	431a      	orrs	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009564:	061b      	lsls	r3, r3, #24
 8009566:	491b      	ldr	r1, [pc, #108]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 8009568:	4313      	orrs	r3, r2
 800956a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800956c:	4b1b      	ldr	r3, [pc, #108]	; (80095dc <HAL_RCC_OscConfig+0x478>)
 800956e:	2201      	movs	r2, #1
 8009570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009572:	f7fc ff6d 	bl	8006450 <HAL_GetTick>
 8009576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009578:	e008      	b.n	800958c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800957a:	f7fc ff69 	bl	8006450 <HAL_GetTick>
 800957e:	4602      	mov	r2, r0
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	2b02      	cmp	r3, #2
 8009586:	d901      	bls.n	800958c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009588:	2303      	movs	r3, #3
 800958a:	e05c      	b.n	8009646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800958c:	4b11      	ldr	r3, [pc, #68]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d0f0      	beq.n	800957a <HAL_RCC_OscConfig+0x416>
 8009598:	e054      	b.n	8009644 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800959a:	4b10      	ldr	r3, [pc, #64]	; (80095dc <HAL_RCC_OscConfig+0x478>)
 800959c:	2200      	movs	r2, #0
 800959e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095a0:	f7fc ff56 	bl	8006450 <HAL_GetTick>
 80095a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095a6:	e008      	b.n	80095ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095a8:	f7fc ff52 	bl	8006450 <HAL_GetTick>
 80095ac:	4602      	mov	r2, r0
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d901      	bls.n	80095ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80095b6:	2303      	movs	r3, #3
 80095b8:	e045      	b.n	8009646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095ba:	4b06      	ldr	r3, [pc, #24]	; (80095d4 <HAL_RCC_OscConfig+0x470>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1f0      	bne.n	80095a8 <HAL_RCC_OscConfig+0x444>
 80095c6:	e03d      	b.n	8009644 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d107      	bne.n	80095e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e038      	b.n	8009646 <HAL_RCC_OscConfig+0x4e2>
 80095d4:	40023800 	.word	0x40023800
 80095d8:	40007000 	.word	0x40007000
 80095dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80095e0:	4b1b      	ldr	r3, [pc, #108]	; (8009650 <HAL_RCC_OscConfig+0x4ec>)
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	699b      	ldr	r3, [r3, #24]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d028      	beq.n	8009640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d121      	bne.n	8009640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009606:	429a      	cmp	r2, r3
 8009608:	d11a      	bne.n	8009640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009610:	4013      	ands	r3, r2
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009616:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009618:	4293      	cmp	r3, r2
 800961a:	d111      	bne.n	8009640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009626:	085b      	lsrs	r3, r3, #1
 8009628:	3b01      	subs	r3, #1
 800962a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800962c:	429a      	cmp	r2, r3
 800962e:	d107      	bne.n	8009640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800963c:	429a      	cmp	r2, r3
 800963e:	d001      	beq.n	8009644 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e000      	b.n	8009646 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	40023800 	.word	0x40023800

08009654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e0cc      	b.n	8009802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009668:	4b68      	ldr	r3, [pc, #416]	; (800980c <HAL_RCC_ClockConfig+0x1b8>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 0307 	and.w	r3, r3, #7
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d90c      	bls.n	8009690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009676:	4b65      	ldr	r3, [pc, #404]	; (800980c <HAL_RCC_ClockConfig+0x1b8>)
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	b2d2      	uxtb	r2, r2
 800967c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800967e:	4b63      	ldr	r3, [pc, #396]	; (800980c <HAL_RCC_ClockConfig+0x1b8>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 0307 	and.w	r3, r3, #7
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	429a      	cmp	r2, r3
 800968a:	d001      	beq.n	8009690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e0b8      	b.n	8009802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 0302 	and.w	r3, r3, #2
 8009698:	2b00      	cmp	r3, #0
 800969a:	d020      	beq.n	80096de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d005      	beq.n	80096b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80096a8:	4b59      	ldr	r3, [pc, #356]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	4a58      	ldr	r2, [pc, #352]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80096ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80096b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0308 	and.w	r3, r3, #8
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d005      	beq.n	80096cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096c0:	4b53      	ldr	r3, [pc, #332]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	4a52      	ldr	r2, [pc, #328]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80096c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80096ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096cc:	4b50      	ldr	r3, [pc, #320]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	494d      	ldr	r1, [pc, #308]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80096da:	4313      	orrs	r3, r2
 80096dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d044      	beq.n	8009774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d107      	bne.n	8009702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096f2:	4b47      	ldr	r3, [pc, #284]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d119      	bne.n	8009732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	e07f      	b.n	8009802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	2b02      	cmp	r3, #2
 8009708:	d003      	beq.n	8009712 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800970e:	2b03      	cmp	r3, #3
 8009710:	d107      	bne.n	8009722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009712:	4b3f      	ldr	r3, [pc, #252]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d109      	bne.n	8009732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e06f      	b.n	8009802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009722:	4b3b      	ldr	r3, [pc, #236]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e067      	b.n	8009802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009732:	4b37      	ldr	r3, [pc, #220]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	f023 0203 	bic.w	r2, r3, #3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	4934      	ldr	r1, [pc, #208]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 8009740:	4313      	orrs	r3, r2
 8009742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009744:	f7fc fe84 	bl	8006450 <HAL_GetTick>
 8009748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800974a:	e00a      	b.n	8009762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800974c:	f7fc fe80 	bl	8006450 <HAL_GetTick>
 8009750:	4602      	mov	r2, r0
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	f241 3288 	movw	r2, #5000	; 0x1388
 800975a:	4293      	cmp	r3, r2
 800975c:	d901      	bls.n	8009762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800975e:	2303      	movs	r3, #3
 8009760:	e04f      	b.n	8009802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009762:	4b2b      	ldr	r3, [pc, #172]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	f003 020c 	and.w	r2, r3, #12
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	429a      	cmp	r2, r3
 8009772:	d1eb      	bne.n	800974c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009774:	4b25      	ldr	r3, [pc, #148]	; (800980c <HAL_RCC_ClockConfig+0x1b8>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 0307 	and.w	r3, r3, #7
 800977c:	683a      	ldr	r2, [r7, #0]
 800977e:	429a      	cmp	r2, r3
 8009780:	d20c      	bcs.n	800979c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009782:	4b22      	ldr	r3, [pc, #136]	; (800980c <HAL_RCC_ClockConfig+0x1b8>)
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	b2d2      	uxtb	r2, r2
 8009788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800978a:	4b20      	ldr	r3, [pc, #128]	; (800980c <HAL_RCC_ClockConfig+0x1b8>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0307 	and.w	r3, r3, #7
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	429a      	cmp	r2, r3
 8009796:	d001      	beq.n	800979c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	e032      	b.n	8009802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 0304 	and.w	r3, r3, #4
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d008      	beq.n	80097ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097a8:	4b19      	ldr	r3, [pc, #100]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	4916      	ldr	r1, [pc, #88]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 0308 	and.w	r3, r3, #8
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d009      	beq.n	80097da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097c6:	4b12      	ldr	r3, [pc, #72]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	00db      	lsls	r3, r3, #3
 80097d4:	490e      	ldr	r1, [pc, #56]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80097d6:	4313      	orrs	r3, r2
 80097d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80097da:	f000 f821 	bl	8009820 <HAL_RCC_GetSysClockFreq>
 80097de:	4602      	mov	r2, r0
 80097e0:	4b0b      	ldr	r3, [pc, #44]	; (8009810 <HAL_RCC_ClockConfig+0x1bc>)
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	091b      	lsrs	r3, r3, #4
 80097e6:	f003 030f 	and.w	r3, r3, #15
 80097ea:	490a      	ldr	r1, [pc, #40]	; (8009814 <HAL_RCC_ClockConfig+0x1c0>)
 80097ec:	5ccb      	ldrb	r3, [r1, r3]
 80097ee:	fa22 f303 	lsr.w	r3, r2, r3
 80097f2:	4a09      	ldr	r2, [pc, #36]	; (8009818 <HAL_RCC_ClockConfig+0x1c4>)
 80097f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80097f6:	4b09      	ldr	r3, [pc, #36]	; (800981c <HAL_RCC_ClockConfig+0x1c8>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fc fde4 	bl	80063c8 <HAL_InitTick>

  return HAL_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	40023c00 	.word	0x40023c00
 8009810:	40023800 	.word	0x40023800
 8009814:	0800c7e4 	.word	0x0800c7e4
 8009818:	20000430 	.word	0x20000430
 800981c:	20000434 	.word	0x20000434

08009820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009824:	b094      	sub	sp, #80	; 0x50
 8009826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009828:	2300      	movs	r3, #0
 800982a:	647b      	str	r3, [r7, #68]	; 0x44
 800982c:	2300      	movs	r3, #0
 800982e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009830:	2300      	movs	r3, #0
 8009832:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009834:	2300      	movs	r3, #0
 8009836:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009838:	4b79      	ldr	r3, [pc, #484]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x200>)
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f003 030c 	and.w	r3, r3, #12
 8009840:	2b08      	cmp	r3, #8
 8009842:	d00d      	beq.n	8009860 <HAL_RCC_GetSysClockFreq+0x40>
 8009844:	2b08      	cmp	r3, #8
 8009846:	f200 80e1 	bhi.w	8009a0c <HAL_RCC_GetSysClockFreq+0x1ec>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d002      	beq.n	8009854 <HAL_RCC_GetSysClockFreq+0x34>
 800984e:	2b04      	cmp	r3, #4
 8009850:	d003      	beq.n	800985a <HAL_RCC_GetSysClockFreq+0x3a>
 8009852:	e0db      	b.n	8009a0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009854:	4b73      	ldr	r3, [pc, #460]	; (8009a24 <HAL_RCC_GetSysClockFreq+0x204>)
 8009856:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009858:	e0db      	b.n	8009a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800985a:	4b73      	ldr	r3, [pc, #460]	; (8009a28 <HAL_RCC_GetSysClockFreq+0x208>)
 800985c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800985e:	e0d8      	b.n	8009a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009860:	4b6f      	ldr	r3, [pc, #444]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009868:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800986a:	4b6d      	ldr	r3, [pc, #436]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x200>)
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009872:	2b00      	cmp	r3, #0
 8009874:	d063      	beq.n	800993e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009876:	4b6a      	ldr	r3, [pc, #424]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	099b      	lsrs	r3, r3, #6
 800987c:	2200      	movs	r2, #0
 800987e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009880:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009888:	633b      	str	r3, [r7, #48]	; 0x30
 800988a:	2300      	movs	r3, #0
 800988c:	637b      	str	r3, [r7, #52]	; 0x34
 800988e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009892:	4622      	mov	r2, r4
 8009894:	462b      	mov	r3, r5
 8009896:	f04f 0000 	mov.w	r0, #0
 800989a:	f04f 0100 	mov.w	r1, #0
 800989e:	0159      	lsls	r1, r3, #5
 80098a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80098a4:	0150      	lsls	r0, r2, #5
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4621      	mov	r1, r4
 80098ac:	1a51      	subs	r1, r2, r1
 80098ae:	6139      	str	r1, [r7, #16]
 80098b0:	4629      	mov	r1, r5
 80098b2:	eb63 0301 	sbc.w	r3, r3, r1
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	f04f 0200 	mov.w	r2, #0
 80098bc:	f04f 0300 	mov.w	r3, #0
 80098c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098c4:	4659      	mov	r1, fp
 80098c6:	018b      	lsls	r3, r1, #6
 80098c8:	4651      	mov	r1, sl
 80098ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80098ce:	4651      	mov	r1, sl
 80098d0:	018a      	lsls	r2, r1, #6
 80098d2:	4651      	mov	r1, sl
 80098d4:	ebb2 0801 	subs.w	r8, r2, r1
 80098d8:	4659      	mov	r1, fp
 80098da:	eb63 0901 	sbc.w	r9, r3, r1
 80098de:	f04f 0200 	mov.w	r2, #0
 80098e2:	f04f 0300 	mov.w	r3, #0
 80098e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80098ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80098ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80098f2:	4690      	mov	r8, r2
 80098f4:	4699      	mov	r9, r3
 80098f6:	4623      	mov	r3, r4
 80098f8:	eb18 0303 	adds.w	r3, r8, r3
 80098fc:	60bb      	str	r3, [r7, #8]
 80098fe:	462b      	mov	r3, r5
 8009900:	eb49 0303 	adc.w	r3, r9, r3
 8009904:	60fb      	str	r3, [r7, #12]
 8009906:	f04f 0200 	mov.w	r2, #0
 800990a:	f04f 0300 	mov.w	r3, #0
 800990e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009912:	4629      	mov	r1, r5
 8009914:	024b      	lsls	r3, r1, #9
 8009916:	4621      	mov	r1, r4
 8009918:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800991c:	4621      	mov	r1, r4
 800991e:	024a      	lsls	r2, r1, #9
 8009920:	4610      	mov	r0, r2
 8009922:	4619      	mov	r1, r3
 8009924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009926:	2200      	movs	r2, #0
 8009928:	62bb      	str	r3, [r7, #40]	; 0x28
 800992a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800992c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009930:	f7f7 f890 	bl	8000a54 <__aeabi_uldivmod>
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	4613      	mov	r3, r2
 800993a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800993c:	e058      	b.n	80099f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800993e:	4b38      	ldr	r3, [pc, #224]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	099b      	lsrs	r3, r3, #6
 8009944:	2200      	movs	r2, #0
 8009946:	4618      	mov	r0, r3
 8009948:	4611      	mov	r1, r2
 800994a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800994e:	623b      	str	r3, [r7, #32]
 8009950:	2300      	movs	r3, #0
 8009952:	627b      	str	r3, [r7, #36]	; 0x24
 8009954:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009958:	4642      	mov	r2, r8
 800995a:	464b      	mov	r3, r9
 800995c:	f04f 0000 	mov.w	r0, #0
 8009960:	f04f 0100 	mov.w	r1, #0
 8009964:	0159      	lsls	r1, r3, #5
 8009966:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800996a:	0150      	lsls	r0, r2, #5
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	4641      	mov	r1, r8
 8009972:	ebb2 0a01 	subs.w	sl, r2, r1
 8009976:	4649      	mov	r1, r9
 8009978:	eb63 0b01 	sbc.w	fp, r3, r1
 800997c:	f04f 0200 	mov.w	r2, #0
 8009980:	f04f 0300 	mov.w	r3, #0
 8009984:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009988:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800998c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009990:	ebb2 040a 	subs.w	r4, r2, sl
 8009994:	eb63 050b 	sbc.w	r5, r3, fp
 8009998:	f04f 0200 	mov.w	r2, #0
 800999c:	f04f 0300 	mov.w	r3, #0
 80099a0:	00eb      	lsls	r3, r5, #3
 80099a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80099a6:	00e2      	lsls	r2, r4, #3
 80099a8:	4614      	mov	r4, r2
 80099aa:	461d      	mov	r5, r3
 80099ac:	4643      	mov	r3, r8
 80099ae:	18e3      	adds	r3, r4, r3
 80099b0:	603b      	str	r3, [r7, #0]
 80099b2:	464b      	mov	r3, r9
 80099b4:	eb45 0303 	adc.w	r3, r5, r3
 80099b8:	607b      	str	r3, [r7, #4]
 80099ba:	f04f 0200 	mov.w	r2, #0
 80099be:	f04f 0300 	mov.w	r3, #0
 80099c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80099c6:	4629      	mov	r1, r5
 80099c8:	028b      	lsls	r3, r1, #10
 80099ca:	4621      	mov	r1, r4
 80099cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80099d0:	4621      	mov	r1, r4
 80099d2:	028a      	lsls	r2, r1, #10
 80099d4:	4610      	mov	r0, r2
 80099d6:	4619      	mov	r1, r3
 80099d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099da:	2200      	movs	r2, #0
 80099dc:	61bb      	str	r3, [r7, #24]
 80099de:	61fa      	str	r2, [r7, #28]
 80099e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099e4:	f7f7 f836 	bl	8000a54 <__aeabi_uldivmod>
 80099e8:	4602      	mov	r2, r0
 80099ea:	460b      	mov	r3, r1
 80099ec:	4613      	mov	r3, r2
 80099ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80099f0:	4b0b      	ldr	r3, [pc, #44]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x200>)
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	0c1b      	lsrs	r3, r3, #16
 80099f6:	f003 0303 	and.w	r3, r3, #3
 80099fa:	3301      	adds	r3, #1
 80099fc:	005b      	lsls	r3, r3, #1
 80099fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009a00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a0a:	e002      	b.n	8009a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009a0c:	4b05      	ldr	r3, [pc, #20]	; (8009a24 <HAL_RCC_GetSysClockFreq+0x204>)
 8009a0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3750      	adds	r7, #80	; 0x50
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a1e:	bf00      	nop
 8009a20:	40023800 	.word	0x40023800
 8009a24:	00f42400 	.word	0x00f42400
 8009a28:	007a1200 	.word	0x007a1200

08009a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a30:	4b03      	ldr	r3, [pc, #12]	; (8009a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8009a32:	681b      	ldr	r3, [r3, #0]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	20000430 	.word	0x20000430

08009a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009a48:	f7ff fff0 	bl	8009a2c <HAL_RCC_GetHCLKFreq>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	4b05      	ldr	r3, [pc, #20]	; (8009a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	0a9b      	lsrs	r3, r3, #10
 8009a54:	f003 0307 	and.w	r3, r3, #7
 8009a58:	4903      	ldr	r1, [pc, #12]	; (8009a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a5a:	5ccb      	ldrb	r3, [r1, r3]
 8009a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	40023800 	.word	0x40023800
 8009a68:	0800c7f4 	.word	0x0800c7f4

08009a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009a70:	f7ff ffdc 	bl	8009a2c <HAL_RCC_GetHCLKFreq>
 8009a74:	4602      	mov	r2, r0
 8009a76:	4b05      	ldr	r3, [pc, #20]	; (8009a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	0b5b      	lsrs	r3, r3, #13
 8009a7c:	f003 0307 	and.w	r3, r3, #7
 8009a80:	4903      	ldr	r1, [pc, #12]	; (8009a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a82:	5ccb      	ldrb	r3, [r1, r3]
 8009a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	40023800 	.word	0x40023800
 8009a90:	0800c7f4 	.word	0x0800c7f4

08009a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e041      	b.n	8009b2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d106      	bne.n	8009ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7fc fa6a 	bl	8005f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	f000 fdac 	bl	800a630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d001      	beq.n	8009b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e044      	b.n	8009bd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2202      	movs	r2, #2
 8009b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68da      	ldr	r2, [r3, #12]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f042 0201 	orr.w	r2, r2, #1
 8009b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a1e      	ldr	r2, [pc, #120]	; (8009be4 <HAL_TIM_Base_Start_IT+0xb0>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d018      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b76:	d013      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a1a      	ldr	r2, [pc, #104]	; (8009be8 <HAL_TIM_Base_Start_IT+0xb4>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d00e      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a19      	ldr	r2, [pc, #100]	; (8009bec <HAL_TIM_Base_Start_IT+0xb8>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d009      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a17      	ldr	r2, [pc, #92]	; (8009bf0 <HAL_TIM_Base_Start_IT+0xbc>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d004      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a16      	ldr	r2, [pc, #88]	; (8009bf4 <HAL_TIM_Base_Start_IT+0xc0>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d111      	bne.n	8009bc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	f003 0307 	and.w	r3, r3, #7
 8009baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2b06      	cmp	r3, #6
 8009bb0:	d010      	beq.n	8009bd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f042 0201 	orr.w	r2, r2, #1
 8009bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bc2:	e007      	b.n	8009bd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f042 0201 	orr.w	r2, r2, #1
 8009bd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3714      	adds	r7, #20
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	40010000 	.word	0x40010000
 8009be8:	40000400 	.word	0x40000400
 8009bec:	40000800 	.word	0x40000800
 8009bf0:	40000c00 	.word	0x40000c00
 8009bf4:	40014000 	.word	0x40014000

08009bf8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68da      	ldr	r2, [r3, #12]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f022 0201 	bic.w	r2, r2, #1
 8009c0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	6a1a      	ldr	r2, [r3, #32]
 8009c16:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10f      	bne.n	8009c40 <HAL_TIM_Base_Stop_IT+0x48>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6a1a      	ldr	r2, [r3, #32]
 8009c26:	f240 4344 	movw	r3, #1092	; 0x444
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d107      	bne.n	8009c40 <HAL_TIM_Base_Stop_IT+0x48>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f022 0201 	bic.w	r2, r2, #1
 8009c3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	370c      	adds	r7, #12
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr

08009c56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b082      	sub	sp, #8
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d101      	bne.n	8009c68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	e041      	b.n	8009cec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d106      	bne.n	8009c82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7fc f91b 	bl	8005eb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2202      	movs	r2, #2
 8009c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	3304      	adds	r3, #4
 8009c92:	4619      	mov	r1, r3
 8009c94:	4610      	mov	r0, r2
 8009c96:	f000 fccb 	bl	800a630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d109      	bne.n	8009d18 <HAL_TIM_PWM_Start+0x24>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	bf14      	ite	ne
 8009d10:	2301      	movne	r3, #1
 8009d12:	2300      	moveq	r3, #0
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	e022      	b.n	8009d5e <HAL_TIM_PWM_Start+0x6a>
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	2b04      	cmp	r3, #4
 8009d1c:	d109      	bne.n	8009d32 <HAL_TIM_PWM_Start+0x3e>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	bf14      	ite	ne
 8009d2a:	2301      	movne	r3, #1
 8009d2c:	2300      	moveq	r3, #0
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	e015      	b.n	8009d5e <HAL_TIM_PWM_Start+0x6a>
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	2b08      	cmp	r3, #8
 8009d36:	d109      	bne.n	8009d4c <HAL_TIM_PWM_Start+0x58>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	bf14      	ite	ne
 8009d44:	2301      	movne	r3, #1
 8009d46:	2300      	moveq	r3, #0
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	e008      	b.n	8009d5e <HAL_TIM_PWM_Start+0x6a>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	bf14      	ite	ne
 8009d58:	2301      	movne	r3, #1
 8009d5a:	2300      	moveq	r3, #0
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e068      	b.n	8009e38 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d104      	bne.n	8009d76 <HAL_TIM_PWM_Start+0x82>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d74:	e013      	b.n	8009d9e <HAL_TIM_PWM_Start+0xaa>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	d104      	bne.n	8009d86 <HAL_TIM_PWM_Start+0x92>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2202      	movs	r2, #2
 8009d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d84:	e00b      	b.n	8009d9e <HAL_TIM_PWM_Start+0xaa>
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2b08      	cmp	r3, #8
 8009d8a:	d104      	bne.n	8009d96 <HAL_TIM_PWM_Start+0xa2>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2202      	movs	r2, #2
 8009d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d94:	e003      	b.n	8009d9e <HAL_TIM_PWM_Start+0xaa>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2202      	movs	r2, #2
 8009d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2201      	movs	r2, #1
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f000 fee8 	bl	800ab7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a23      	ldr	r2, [pc, #140]	; (8009e40 <HAL_TIM_PWM_Start+0x14c>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d107      	bne.n	8009dc6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009dc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a1d      	ldr	r2, [pc, #116]	; (8009e40 <HAL_TIM_PWM_Start+0x14c>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d018      	beq.n	8009e02 <HAL_TIM_PWM_Start+0x10e>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dd8:	d013      	beq.n	8009e02 <HAL_TIM_PWM_Start+0x10e>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a19      	ldr	r2, [pc, #100]	; (8009e44 <HAL_TIM_PWM_Start+0x150>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d00e      	beq.n	8009e02 <HAL_TIM_PWM_Start+0x10e>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a17      	ldr	r2, [pc, #92]	; (8009e48 <HAL_TIM_PWM_Start+0x154>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d009      	beq.n	8009e02 <HAL_TIM_PWM_Start+0x10e>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a16      	ldr	r2, [pc, #88]	; (8009e4c <HAL_TIM_PWM_Start+0x158>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d004      	beq.n	8009e02 <HAL_TIM_PWM_Start+0x10e>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a14      	ldr	r2, [pc, #80]	; (8009e50 <HAL_TIM_PWM_Start+0x15c>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d111      	bne.n	8009e26 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	f003 0307 	and.w	r3, r3, #7
 8009e0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2b06      	cmp	r3, #6
 8009e12:	d010      	beq.n	8009e36 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f042 0201 	orr.w	r2, r2, #1
 8009e22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e24:	e007      	b.n	8009e36 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f042 0201 	orr.w	r2, r2, #1
 8009e34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	40010000 	.word	0x40010000
 8009e44:	40000400 	.word	0x40000400
 8009e48:	40000800 	.word	0x40000800
 8009e4c:	40000c00 	.word	0x40000c00
 8009e50:	40014000 	.word	0x40014000

08009e54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e097      	b.n	8009f98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d106      	bne.n	8009e82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7fc f843 	bl	8005f08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2202      	movs	r2, #2
 8009e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	6812      	ldr	r2, [r2, #0]
 8009e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e98:	f023 0307 	bic.w	r3, r3, #7
 8009e9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	f000 fbc1 	bl	800a630 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6a1b      	ldr	r3, [r3, #32]
 8009ec4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ed6:	f023 0303 	bic.w	r3, r3, #3
 8009eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	689a      	ldr	r2, [r3, #8]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	699b      	ldr	r3, [r3, #24]
 8009ee4:	021b      	lsls	r3, r3, #8
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009ef4:	f023 030c 	bic.w	r3, r3, #12
 8009ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	68da      	ldr	r2, [r3, #12]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	69db      	ldr	r3, [r3, #28]
 8009f0e:	021b      	lsls	r3, r3, #8
 8009f10:	4313      	orrs	r3, r2
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	011a      	lsls	r2, r3, #4
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	031b      	lsls	r3, r3, #12
 8009f24:	4313      	orrs	r3, r2
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009f32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009f3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	685a      	ldr	r2, [r3, #4]
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	011b      	lsls	r3, r3, #4
 8009f46:	4313      	orrs	r3, r2
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fb0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009fb8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009fc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009fc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d110      	bne.n	8009ff2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d102      	bne.n	8009fdc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009fd6:	7b7b      	ldrb	r3, [r7, #13]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d001      	beq.n	8009fe0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e069      	b.n	800a0b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2202      	movs	r2, #2
 8009fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ff0:	e031      	b.n	800a056 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2b04      	cmp	r3, #4
 8009ff6:	d110      	bne.n	800a01a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ff8:	7bbb      	ldrb	r3, [r7, #14]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d102      	bne.n	800a004 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ffe:	7b3b      	ldrb	r3, [r7, #12]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d001      	beq.n	800a008 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	e055      	b.n	800a0b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2202      	movs	r2, #2
 800a00c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2202      	movs	r2, #2
 800a014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a018:	e01d      	b.n	800a056 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a01a:	7bfb      	ldrb	r3, [r7, #15]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d108      	bne.n	800a032 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a020:	7bbb      	ldrb	r3, [r7, #14]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d105      	bne.n	800a032 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a026:	7b7b      	ldrb	r3, [r7, #13]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d102      	bne.n	800a032 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a02c:	7b3b      	ldrb	r3, [r7, #12]
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d001      	beq.n	800a036 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e03e      	b.n	800a0b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2202      	movs	r2, #2
 800a03a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2202      	movs	r2, #2
 800a042:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2202      	movs	r2, #2
 800a04a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2202      	movs	r2, #2
 800a052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d003      	beq.n	800a064 <HAL_TIM_Encoder_Start+0xc4>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	2b04      	cmp	r3, #4
 800a060:	d008      	beq.n	800a074 <HAL_TIM_Encoder_Start+0xd4>
 800a062:	e00f      	b.n	800a084 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2201      	movs	r2, #1
 800a06a:	2100      	movs	r1, #0
 800a06c:	4618      	mov	r0, r3
 800a06e:	f000 fd85 	bl	800ab7c <TIM_CCxChannelCmd>
      break;
 800a072:	e016      	b.n	800a0a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2201      	movs	r2, #1
 800a07a:	2104      	movs	r1, #4
 800a07c:	4618      	mov	r0, r3
 800a07e:	f000 fd7d 	bl	800ab7c <TIM_CCxChannelCmd>
      break;
 800a082:	e00e      	b.n	800a0a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2201      	movs	r2, #1
 800a08a:	2100      	movs	r1, #0
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 fd75 	bl	800ab7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2201      	movs	r2, #1
 800a098:	2104      	movs	r1, #4
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 fd6e 	bl	800ab7c <TIM_CCxChannelCmd>
      break;
 800a0a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f042 0201 	orr.w	r2, r2, #1
 800a0b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	f003 0302 	and.w	r3, r3, #2
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d122      	bne.n	800a118 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	f003 0302 	and.w	r3, r3, #2
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d11b      	bne.n	800a118 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f06f 0202 	mvn.w	r2, #2
 800a0e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	f003 0303 	and.w	r3, r3, #3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fa77 	bl	800a5f2 <HAL_TIM_IC_CaptureCallback>
 800a104:	e005      	b.n	800a112 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fa69 	bl	800a5de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 fa7a 	bl	800a606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	f003 0304 	and.w	r3, r3, #4
 800a122:	2b04      	cmp	r3, #4
 800a124:	d122      	bne.n	800a16c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	f003 0304 	and.w	r3, r3, #4
 800a130:	2b04      	cmp	r3, #4
 800a132:	d11b      	bne.n	800a16c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f06f 0204 	mvn.w	r2, #4
 800a13c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2202      	movs	r2, #2
 800a142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d003      	beq.n	800a15a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fa4d 	bl	800a5f2 <HAL_TIM_IC_CaptureCallback>
 800a158:	e005      	b.n	800a166 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fa3f 	bl	800a5de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fa50 	bl	800a606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	f003 0308 	and.w	r3, r3, #8
 800a176:	2b08      	cmp	r3, #8
 800a178:	d122      	bne.n	800a1c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	f003 0308 	and.w	r3, r3, #8
 800a184:	2b08      	cmp	r3, #8
 800a186:	d11b      	bne.n	800a1c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f06f 0208 	mvn.w	r2, #8
 800a190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2204      	movs	r2, #4
 800a196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	f003 0303 	and.w	r3, r3, #3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d003      	beq.n	800a1ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fa23 	bl	800a5f2 <HAL_TIM_IC_CaptureCallback>
 800a1ac:	e005      	b.n	800a1ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 fa15 	bl	800a5de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fa26 	bl	800a606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	f003 0310 	and.w	r3, r3, #16
 800a1ca:	2b10      	cmp	r3, #16
 800a1cc:	d122      	bne.n	800a214 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	f003 0310 	and.w	r3, r3, #16
 800a1d8:	2b10      	cmp	r3, #16
 800a1da:	d11b      	bne.n	800a214 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f06f 0210 	mvn.w	r2, #16
 800a1e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2208      	movs	r2, #8
 800a1ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	69db      	ldr	r3, [r3, #28]
 800a1f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d003      	beq.n	800a202 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f9f9 	bl	800a5f2 <HAL_TIM_IC_CaptureCallback>
 800a200:	e005      	b.n	800a20e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f9eb 	bl	800a5de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f9fc 	bl	800a606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d10e      	bne.n	800a240 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	f003 0301 	and.w	r3, r3, #1
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d107      	bne.n	800a240 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f06f 0201 	mvn.w	r2, #1
 800a238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f7fb fcf2 	bl	8005c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a24a:	2b80      	cmp	r3, #128	; 0x80
 800a24c:	d10e      	bne.n	800a26c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a258:	2b80      	cmp	r3, #128	; 0x80
 800a25a:	d107      	bne.n	800a26c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fd78 	bl	800ad5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a276:	2b40      	cmp	r3, #64	; 0x40
 800a278:	d10e      	bne.n	800a298 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a284:	2b40      	cmp	r3, #64	; 0x40
 800a286:	d107      	bne.n	800a298 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f9c1 	bl	800a61a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	f003 0320 	and.w	r3, r3, #32
 800a2a2:	2b20      	cmp	r3, #32
 800a2a4:	d10e      	bne.n	800a2c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	f003 0320 	and.w	r3, r3, #32
 800a2b0:	2b20      	cmp	r3, #32
 800a2b2:	d107      	bne.n	800a2c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f06f 0220 	mvn.w	r2, #32
 800a2bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fd42 	bl	800ad48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2c4:	bf00      	nop
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d101      	bne.n	800a2ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	e0ae      	b.n	800a448 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2b0c      	cmp	r3, #12
 800a2f6:	f200 809f 	bhi.w	800a438 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a2fa:	a201      	add	r2, pc, #4	; (adr r2, 800a300 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a300:	0800a335 	.word	0x0800a335
 800a304:	0800a439 	.word	0x0800a439
 800a308:	0800a439 	.word	0x0800a439
 800a30c:	0800a439 	.word	0x0800a439
 800a310:	0800a375 	.word	0x0800a375
 800a314:	0800a439 	.word	0x0800a439
 800a318:	0800a439 	.word	0x0800a439
 800a31c:	0800a439 	.word	0x0800a439
 800a320:	0800a3b7 	.word	0x0800a3b7
 800a324:	0800a439 	.word	0x0800a439
 800a328:	0800a439 	.word	0x0800a439
 800a32c:	0800a439 	.word	0x0800a439
 800a330:	0800a3f7 	.word	0x0800a3f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68b9      	ldr	r1, [r7, #8]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 f9f8 	bl	800a730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	699a      	ldr	r2, [r3, #24]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f042 0208 	orr.w	r2, r2, #8
 800a34e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	699a      	ldr	r2, [r3, #24]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f022 0204 	bic.w	r2, r2, #4
 800a35e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6999      	ldr	r1, [r3, #24]
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	691a      	ldr	r2, [r3, #16]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	430a      	orrs	r2, r1
 800a370:	619a      	str	r2, [r3, #24]
      break;
 800a372:	e064      	b.n	800a43e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68b9      	ldr	r1, [r7, #8]
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 fa3e 	bl	800a7fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	699a      	ldr	r2, [r3, #24]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a38e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	699a      	ldr	r2, [r3, #24]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a39e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	6999      	ldr	r1, [r3, #24]
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	021a      	lsls	r2, r3, #8
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	430a      	orrs	r2, r1
 800a3b2:	619a      	str	r2, [r3, #24]
      break;
 800a3b4:	e043      	b.n	800a43e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68b9      	ldr	r1, [r7, #8]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 fa89 	bl	800a8d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	69da      	ldr	r2, [r3, #28]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f042 0208 	orr.w	r2, r2, #8
 800a3d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	69da      	ldr	r2, [r3, #28]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f022 0204 	bic.w	r2, r2, #4
 800a3e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	69d9      	ldr	r1, [r3, #28]
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	691a      	ldr	r2, [r3, #16]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	430a      	orrs	r2, r1
 800a3f2:	61da      	str	r2, [r3, #28]
      break;
 800a3f4:	e023      	b.n	800a43e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68b9      	ldr	r1, [r7, #8]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f000 fad3 	bl	800a9a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	69da      	ldr	r2, [r3, #28]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	69da      	ldr	r2, [r3, #28]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	69d9      	ldr	r1, [r3, #28]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	021a      	lsls	r2, r3, #8
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	430a      	orrs	r2, r1
 800a434:	61da      	str	r2, [r3, #28]
      break;
 800a436:	e002      	b.n	800a43e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	75fb      	strb	r3, [r7, #23]
      break;
 800a43c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a446:	7dfb      	ldrb	r3, [r7, #23]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3718      	adds	r7, #24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a464:	2b01      	cmp	r3, #1
 800a466:	d101      	bne.n	800a46c <HAL_TIM_ConfigClockSource+0x1c>
 800a468:	2302      	movs	r3, #2
 800a46a:	e0b4      	b.n	800a5d6 <HAL_TIM_ConfigClockSource+0x186>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2202      	movs	r2, #2
 800a478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a48a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a492:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4a4:	d03e      	beq.n	800a524 <HAL_TIM_ConfigClockSource+0xd4>
 800a4a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4aa:	f200 8087 	bhi.w	800a5bc <HAL_TIM_ConfigClockSource+0x16c>
 800a4ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4b2:	f000 8086 	beq.w	800a5c2 <HAL_TIM_ConfigClockSource+0x172>
 800a4b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ba:	d87f      	bhi.n	800a5bc <HAL_TIM_ConfigClockSource+0x16c>
 800a4bc:	2b70      	cmp	r3, #112	; 0x70
 800a4be:	d01a      	beq.n	800a4f6 <HAL_TIM_ConfigClockSource+0xa6>
 800a4c0:	2b70      	cmp	r3, #112	; 0x70
 800a4c2:	d87b      	bhi.n	800a5bc <HAL_TIM_ConfigClockSource+0x16c>
 800a4c4:	2b60      	cmp	r3, #96	; 0x60
 800a4c6:	d050      	beq.n	800a56a <HAL_TIM_ConfigClockSource+0x11a>
 800a4c8:	2b60      	cmp	r3, #96	; 0x60
 800a4ca:	d877      	bhi.n	800a5bc <HAL_TIM_ConfigClockSource+0x16c>
 800a4cc:	2b50      	cmp	r3, #80	; 0x50
 800a4ce:	d03c      	beq.n	800a54a <HAL_TIM_ConfigClockSource+0xfa>
 800a4d0:	2b50      	cmp	r3, #80	; 0x50
 800a4d2:	d873      	bhi.n	800a5bc <HAL_TIM_ConfigClockSource+0x16c>
 800a4d4:	2b40      	cmp	r3, #64	; 0x40
 800a4d6:	d058      	beq.n	800a58a <HAL_TIM_ConfigClockSource+0x13a>
 800a4d8:	2b40      	cmp	r3, #64	; 0x40
 800a4da:	d86f      	bhi.n	800a5bc <HAL_TIM_ConfigClockSource+0x16c>
 800a4dc:	2b30      	cmp	r3, #48	; 0x30
 800a4de:	d064      	beq.n	800a5aa <HAL_TIM_ConfigClockSource+0x15a>
 800a4e0:	2b30      	cmp	r3, #48	; 0x30
 800a4e2:	d86b      	bhi.n	800a5bc <HAL_TIM_ConfigClockSource+0x16c>
 800a4e4:	2b20      	cmp	r3, #32
 800a4e6:	d060      	beq.n	800a5aa <HAL_TIM_ConfigClockSource+0x15a>
 800a4e8:	2b20      	cmp	r3, #32
 800a4ea:	d867      	bhi.n	800a5bc <HAL_TIM_ConfigClockSource+0x16c>
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d05c      	beq.n	800a5aa <HAL_TIM_ConfigClockSource+0x15a>
 800a4f0:	2b10      	cmp	r3, #16
 800a4f2:	d05a      	beq.n	800a5aa <HAL_TIM_ConfigClockSource+0x15a>
 800a4f4:	e062      	b.n	800a5bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6818      	ldr	r0, [r3, #0]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	6899      	ldr	r1, [r3, #8]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	685a      	ldr	r2, [r3, #4]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	f000 fb19 	bl	800ab3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a518:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	609a      	str	r2, [r3, #8]
      break;
 800a522:	e04f      	b.n	800a5c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6818      	ldr	r0, [r3, #0]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	6899      	ldr	r1, [r3, #8]
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	685a      	ldr	r2, [r3, #4]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	f000 fb02 	bl	800ab3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	689a      	ldr	r2, [r3, #8]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a546:	609a      	str	r2, [r3, #8]
      break;
 800a548:	e03c      	b.n	800a5c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6818      	ldr	r0, [r3, #0]
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	6859      	ldr	r1, [r3, #4]
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	461a      	mov	r2, r3
 800a558:	f000 fa76 	bl	800aa48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2150      	movs	r1, #80	; 0x50
 800a562:	4618      	mov	r0, r3
 800a564:	f000 facf 	bl	800ab06 <TIM_ITRx_SetConfig>
      break;
 800a568:	e02c      	b.n	800a5c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6818      	ldr	r0, [r3, #0]
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	6859      	ldr	r1, [r3, #4]
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	461a      	mov	r2, r3
 800a578:	f000 fa95 	bl	800aaa6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2160      	movs	r1, #96	; 0x60
 800a582:	4618      	mov	r0, r3
 800a584:	f000 fabf 	bl	800ab06 <TIM_ITRx_SetConfig>
      break;
 800a588:	e01c      	b.n	800a5c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6818      	ldr	r0, [r3, #0]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	6859      	ldr	r1, [r3, #4]
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	461a      	mov	r2, r3
 800a598:	f000 fa56 	bl	800aa48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2140      	movs	r1, #64	; 0x40
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f000 faaf 	bl	800ab06 <TIM_ITRx_SetConfig>
      break;
 800a5a8:	e00c      	b.n	800a5c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	f000 faa6 	bl	800ab06 <TIM_ITRx_SetConfig>
      break;
 800a5ba:	e003      	b.n	800a5c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	73fb      	strb	r3, [r7, #15]
      break;
 800a5c0:	e000      	b.n	800a5c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a5c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5de:	b480      	push	{r7}
 800a5e0:	b083      	sub	sp, #12
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a5e6:	bf00      	nop
 800a5e8:	370c      	adds	r7, #12
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b083      	sub	sp, #12
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a5fa:	bf00      	nop
 800a5fc:	370c      	adds	r7, #12
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a606:	b480      	push	{r7}
 800a608:	b083      	sub	sp, #12
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a60e:	bf00      	nop
 800a610:	370c      	adds	r7, #12
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b083      	sub	sp, #12
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a622:	bf00      	nop
 800a624:	370c      	adds	r7, #12
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
	...

0800a630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a34      	ldr	r2, [pc, #208]	; (800a714 <TIM_Base_SetConfig+0xe4>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d00f      	beq.n	800a668 <TIM_Base_SetConfig+0x38>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a64e:	d00b      	beq.n	800a668 <TIM_Base_SetConfig+0x38>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	4a31      	ldr	r2, [pc, #196]	; (800a718 <TIM_Base_SetConfig+0xe8>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d007      	beq.n	800a668 <TIM_Base_SetConfig+0x38>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4a30      	ldr	r2, [pc, #192]	; (800a71c <TIM_Base_SetConfig+0xec>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d003      	beq.n	800a668 <TIM_Base_SetConfig+0x38>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a2f      	ldr	r2, [pc, #188]	; (800a720 <TIM_Base_SetConfig+0xf0>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d108      	bne.n	800a67a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a66e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	4313      	orrs	r3, r2
 800a678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a25      	ldr	r2, [pc, #148]	; (800a714 <TIM_Base_SetConfig+0xe4>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d01b      	beq.n	800a6ba <TIM_Base_SetConfig+0x8a>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a688:	d017      	beq.n	800a6ba <TIM_Base_SetConfig+0x8a>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a22      	ldr	r2, [pc, #136]	; (800a718 <TIM_Base_SetConfig+0xe8>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d013      	beq.n	800a6ba <TIM_Base_SetConfig+0x8a>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a21      	ldr	r2, [pc, #132]	; (800a71c <TIM_Base_SetConfig+0xec>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d00f      	beq.n	800a6ba <TIM_Base_SetConfig+0x8a>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a20      	ldr	r2, [pc, #128]	; (800a720 <TIM_Base_SetConfig+0xf0>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d00b      	beq.n	800a6ba <TIM_Base_SetConfig+0x8a>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a1f      	ldr	r2, [pc, #124]	; (800a724 <TIM_Base_SetConfig+0xf4>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d007      	beq.n	800a6ba <TIM_Base_SetConfig+0x8a>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4a1e      	ldr	r2, [pc, #120]	; (800a728 <TIM_Base_SetConfig+0xf8>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d003      	beq.n	800a6ba <TIM_Base_SetConfig+0x8a>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4a1d      	ldr	r2, [pc, #116]	; (800a72c <TIM_Base_SetConfig+0xfc>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d108      	bne.n	800a6cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	689a      	ldr	r2, [r3, #8]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	4a08      	ldr	r2, [pc, #32]	; (800a714 <TIM_Base_SetConfig+0xe4>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d103      	bne.n	800a700 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	691a      	ldr	r2, [r3, #16]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	615a      	str	r2, [r3, #20]
}
 800a706:	bf00      	nop
 800a708:	3714      	adds	r7, #20
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	40010000 	.word	0x40010000
 800a718:	40000400 	.word	0x40000400
 800a71c:	40000800 	.word	0x40000800
 800a720:	40000c00 	.word	0x40000c00
 800a724:	40014000 	.word	0x40014000
 800a728:	40014400 	.word	0x40014400
 800a72c:	40014800 	.word	0x40014800

0800a730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a730:	b480      	push	{r7}
 800a732:	b087      	sub	sp, #28
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a1b      	ldr	r3, [r3, #32]
 800a73e:	f023 0201 	bic.w	r2, r3, #1
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	699b      	ldr	r3, [r3, #24]
 800a756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a75e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f023 0303 	bic.w	r3, r3, #3
 800a766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	4313      	orrs	r3, r2
 800a770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f023 0302 	bic.w	r3, r3, #2
 800a778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	4313      	orrs	r3, r2
 800a782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4a1c      	ldr	r2, [pc, #112]	; (800a7f8 <TIM_OC1_SetConfig+0xc8>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d10c      	bne.n	800a7a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	f023 0308 	bic.w	r3, r3, #8
 800a792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	697a      	ldr	r2, [r7, #20]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	f023 0304 	bic.w	r3, r3, #4
 800a7a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	4a13      	ldr	r2, [pc, #76]	; (800a7f8 <TIM_OC1_SetConfig+0xc8>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d111      	bne.n	800a7d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	695b      	ldr	r3, [r3, #20]
 800a7c2:	693a      	ldr	r2, [r7, #16]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	699b      	ldr	r3, [r3, #24]
 800a7cc:	693a      	ldr	r2, [r7, #16]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	693a      	ldr	r2, [r7, #16]
 800a7d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	685a      	ldr	r2, [r3, #4]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	621a      	str	r2, [r3, #32]
}
 800a7ec:	bf00      	nop
 800a7ee:	371c      	adds	r7, #28
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr
 800a7f8:	40010000 	.word	0x40010000

0800a7fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b087      	sub	sp, #28
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a1b      	ldr	r3, [r3, #32]
 800a80a:	f023 0210 	bic.w	r2, r3, #16
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a82a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	021b      	lsls	r3, r3, #8
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	f023 0320 	bic.w	r3, r3, #32
 800a846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	011b      	lsls	r3, r3, #4
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	4313      	orrs	r3, r2
 800a852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a1e      	ldr	r2, [pc, #120]	; (800a8d0 <TIM_OC2_SetConfig+0xd4>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d10d      	bne.n	800a878 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	011b      	lsls	r3, r3, #4
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a876:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a15      	ldr	r2, [pc, #84]	; (800a8d0 <TIM_OC2_SetConfig+0xd4>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d113      	bne.n	800a8a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a88e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	695b      	ldr	r3, [r3, #20]
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	693a      	ldr	r2, [r7, #16]
 800a898:	4313      	orrs	r3, r2
 800a89a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	699b      	ldr	r3, [r3, #24]
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	693a      	ldr	r2, [r7, #16]
 800a8ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	685a      	ldr	r2, [r3, #4]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	621a      	str	r2, [r3, #32]
}
 800a8c2:	bf00      	nop
 800a8c4:	371c      	adds	r7, #28
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	40010000 	.word	0x40010000

0800a8d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b087      	sub	sp, #28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a1b      	ldr	r3, [r3, #32]
 800a8e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	69db      	ldr	r3, [r3, #28]
 800a8fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f023 0303 	bic.w	r3, r3, #3
 800a90a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	4313      	orrs	r3, r2
 800a914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a91c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	021b      	lsls	r3, r3, #8
 800a924:	697a      	ldr	r2, [r7, #20]
 800a926:	4313      	orrs	r3, r2
 800a928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a1d      	ldr	r2, [pc, #116]	; (800a9a4 <TIM_OC3_SetConfig+0xd0>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d10d      	bne.n	800a94e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a938:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	021b      	lsls	r3, r3, #8
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	4313      	orrs	r3, r2
 800a944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a94c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a14      	ldr	r2, [pc, #80]	; (800a9a4 <TIM_OC3_SetConfig+0xd0>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d113      	bne.n	800a97e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a95c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	695b      	ldr	r3, [r3, #20]
 800a96a:	011b      	lsls	r3, r3, #4
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	4313      	orrs	r3, r2
 800a970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	699b      	ldr	r3, [r3, #24]
 800a976:	011b      	lsls	r3, r3, #4
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	693a      	ldr	r2, [r7, #16]
 800a982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	685a      	ldr	r2, [r3, #4]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	697a      	ldr	r2, [r7, #20]
 800a996:	621a      	str	r2, [r3, #32]
}
 800a998:	bf00      	nop
 800a99a:	371c      	adds	r7, #28
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	40010000 	.word	0x40010000

0800a9a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b087      	sub	sp, #28
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a1b      	ldr	r3, [r3, #32]
 800a9b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	69db      	ldr	r3, [r3, #28]
 800a9ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	021b      	lsls	r3, r3, #8
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a9f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	031b      	lsls	r3, r3, #12
 800a9fa:	693a      	ldr	r2, [r7, #16]
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a10      	ldr	r2, [pc, #64]	; (800aa44 <TIM_OC4_SetConfig+0x9c>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d109      	bne.n	800aa1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	695b      	ldr	r3, [r3, #20]
 800aa14:	019b      	lsls	r3, r3, #6
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	685a      	ldr	r2, [r3, #4]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	621a      	str	r2, [r3, #32]
}
 800aa36:	bf00      	nop
 800aa38:	371c      	adds	r7, #28
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	40010000 	.word	0x40010000

0800aa48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b087      	sub	sp, #28
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6a1b      	ldr	r3, [r3, #32]
 800aa58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	f023 0201 	bic.w	r2, r3, #1
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	011b      	lsls	r3, r3, #4
 800aa78:	693a      	ldr	r2, [r7, #16]
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	f023 030a 	bic.w	r3, r3, #10
 800aa84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa86:	697a      	ldr	r2, [r7, #20]
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	693a      	ldr	r2, [r7, #16]
 800aa92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	697a      	ldr	r2, [r7, #20]
 800aa98:	621a      	str	r2, [r3, #32]
}
 800aa9a:	bf00      	nop
 800aa9c:	371c      	adds	r7, #28
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr

0800aaa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aaa6:	b480      	push	{r7}
 800aaa8:	b087      	sub	sp, #28
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	60f8      	str	r0, [r7, #12]
 800aaae:	60b9      	str	r1, [r7, #8]
 800aab0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6a1b      	ldr	r3, [r3, #32]
 800aab6:	f023 0210 	bic.w	r2, r3, #16
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	699b      	ldr	r3, [r3, #24]
 800aac2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6a1b      	ldr	r3, [r3, #32]
 800aac8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aad0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	031b      	lsls	r3, r3, #12
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	4313      	orrs	r3, r2
 800aada:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aae2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	011b      	lsls	r3, r3, #4
 800aae8:	693a      	ldr	r2, [r7, #16]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	697a      	ldr	r2, [r7, #20]
 800aaf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	693a      	ldr	r2, [r7, #16]
 800aaf8:	621a      	str	r2, [r3, #32]
}
 800aafa:	bf00      	nop
 800aafc:	371c      	adds	r7, #28
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab06:	b480      	push	{r7}
 800ab08:	b085      	sub	sp, #20
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	4313      	orrs	r3, r2
 800ab24:	f043 0307 	orr.w	r3, r3, #7
 800ab28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	609a      	str	r2, [r3, #8]
}
 800ab30:	bf00      	nop
 800ab32:	3714      	adds	r7, #20
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b087      	sub	sp, #28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
 800ab48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	021a      	lsls	r2, r3, #8
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	431a      	orrs	r2, r3
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	697a      	ldr	r2, [r7, #20]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	609a      	str	r2, [r3, #8]
}
 800ab70:	bf00      	nop
 800ab72:	371c      	adds	r7, #28
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b087      	sub	sp, #28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	f003 031f 	and.w	r3, r3, #31
 800ab8e:	2201      	movs	r2, #1
 800ab90:	fa02 f303 	lsl.w	r3, r2, r3
 800ab94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6a1a      	ldr	r2, [r3, #32]
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	43db      	mvns	r3, r3
 800ab9e:	401a      	ands	r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6a1a      	ldr	r2, [r3, #32]
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	f003 031f 	and.w	r3, r3, #31
 800abae:	6879      	ldr	r1, [r7, #4]
 800abb0:	fa01 f303 	lsl.w	r3, r1, r3
 800abb4:	431a      	orrs	r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	621a      	str	r2, [r3, #32]
}
 800abba:	bf00      	nop
 800abbc:	371c      	adds	r7, #28
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
	...

0800abc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d101      	bne.n	800abe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abdc:	2302      	movs	r3, #2
 800abde:	e050      	b.n	800ac82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2202      	movs	r2, #2
 800abec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a1c      	ldr	r2, [pc, #112]	; (800ac90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d018      	beq.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac2c:	d013      	beq.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a18      	ldr	r2, [pc, #96]	; (800ac94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d00e      	beq.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a16      	ldr	r2, [pc, #88]	; (800ac98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d009      	beq.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a15      	ldr	r2, [pc, #84]	; (800ac9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d004      	beq.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a13      	ldr	r2, [pc, #76]	; (800aca0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d10c      	bne.n	800ac70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	4313      	orrs	r3, r2
 800ac66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	40010000 	.word	0x40010000
 800ac94:	40000400 	.word	0x40000400
 800ac98:	40000800 	.word	0x40000800
 800ac9c:	40000c00 	.word	0x40000c00
 800aca0:	40014000 	.word	0x40014000

0800aca4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800acae:	2300      	movs	r3, #0
 800acb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d101      	bne.n	800acc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800acbc:	2302      	movs	r3, #2
 800acbe:	e03d      	b.n	800ad3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	4313      	orrs	r3, r2
 800acf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	695b      	ldr	r3, [r3, #20]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	69db      	ldr	r3, [r3, #28]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d101      	bne.n	800ad82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e03f      	b.n	800ae02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d106      	bne.n	800ad9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7fb f97c 	bl	8006094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2224      	movs	r2, #36	; 0x24
 800ada0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	68da      	ldr	r2, [r3, #12]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800adb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 ff81 	bl	800bcbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	691a      	ldr	r2, [r3, #16]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800adc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	695a      	ldr	r2, [r3, #20]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800add8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	68da      	ldr	r2, [r3, #12]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ade8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2220      	movs	r2, #32
 800adf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2220      	movs	r2, #32
 800adfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
	...

0800ae0c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b08c      	sub	sp, #48	; 0x30
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	4613      	mov	r3, r2
 800ae18:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	2b20      	cmp	r3, #32
 800ae24:	d165      	bne.n	800aef2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d002      	beq.n	800ae32 <HAL_UART_Transmit_DMA+0x26>
 800ae2c:	88fb      	ldrh	r3, [r7, #6]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d101      	bne.n	800ae36 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	e05e      	b.n	800aef4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d101      	bne.n	800ae44 <HAL_UART_Transmit_DMA+0x38>
 800ae40:	2302      	movs	r3, #2
 800ae42:	e057      	b.n	800aef4 <HAL_UART_Transmit_DMA+0xe8>
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2201      	movs	r2, #1
 800ae48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800ae4c:	68ba      	ldr	r2, [r7, #8]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	88fa      	ldrh	r2, [r7, #6]
 800ae56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	88fa      	ldrh	r2, [r7, #6]
 800ae5c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2221      	movs	r2, #33	; 0x21
 800ae68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae70:	4a22      	ldr	r2, [pc, #136]	; (800aefc <HAL_UART_Transmit_DMA+0xf0>)
 800ae72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae78:	4a21      	ldr	r2, [pc, #132]	; (800af00 <HAL_UART_Transmit_DMA+0xf4>)
 800ae7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae80:	4a20      	ldr	r2, [pc, #128]	; (800af04 <HAL_UART_Transmit_DMA+0xf8>)
 800ae82:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae88:	2200      	movs	r2, #0
 800ae8a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800ae8c:	f107 0308 	add.w	r3, r7, #8
 800ae90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ae96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae98:	6819      	ldr	r1, [r3, #0]
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	461a      	mov	r2, r3
 800aea2:	88fb      	ldrh	r3, [r7, #6]
 800aea4:	f7fb fca0 	bl	80067e8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aeb0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	3314      	adds	r3, #20
 800aec0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	e853 3f00 	ldrex	r3, [r3]
 800aec8:	617b      	str	r3, [r7, #20]
   return(result);
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aed0:	62bb      	str	r3, [r7, #40]	; 0x28
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	3314      	adds	r3, #20
 800aed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeda:	627a      	str	r2, [r7, #36]	; 0x24
 800aedc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aede:	6a39      	ldr	r1, [r7, #32]
 800aee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aee2:	e841 2300 	strex	r3, r2, [r1]
 800aee6:	61fb      	str	r3, [r7, #28]
   return(result);
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d1e5      	bne.n	800aeba <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800aeee:	2300      	movs	r3, #0
 800aef0:	e000      	b.n	800aef4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800aef2:	2302      	movs	r3, #2
  }
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3730      	adds	r7, #48	; 0x30
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	0800b555 	.word	0x0800b555
 800af00:	0800b5ef 	.word	0x0800b5ef
 800af04:	0800b767 	.word	0x0800b767

0800af08 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b08c      	sub	sp, #48	; 0x30
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	4613      	mov	r3, r2
 800af14:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	2b20      	cmp	r3, #32
 800af20:	d152      	bne.n	800afc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d002      	beq.n	800af2e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800af28:	88fb      	ldrh	r3, [r7, #6]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d101      	bne.n	800af32 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	e04b      	b.n	800afca <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d101      	bne.n	800af40 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800af3c:	2302      	movs	r3, #2
 800af3e:	e044      	b.n	800afca <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2201      	movs	r2, #1
 800af4c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800af4e:	88fb      	ldrh	r3, [r7, #6]
 800af50:	461a      	mov	r2, r3
 800af52:	68b9      	ldr	r1, [r7, #8]
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f000 fc51 	bl	800b7fc <UART_Start_Receive_DMA>
 800af5a:	4603      	mov	r3, r0
 800af5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800af60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af64:	2b00      	cmp	r3, #0
 800af66:	d12c      	bne.n	800afc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d125      	bne.n	800afbc <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af70:	2300      	movs	r3, #0
 800af72:	613b      	str	r3, [r7, #16]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	613b      	str	r3, [r7, #16]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	613b      	str	r3, [r7, #16]
 800af84:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	330c      	adds	r3, #12
 800af8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	e853 3f00 	ldrex	r3, [r3]
 800af94:	617b      	str	r3, [r7, #20]
   return(result);
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	f043 0310 	orr.w	r3, r3, #16
 800af9c:	62bb      	str	r3, [r7, #40]	; 0x28
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	330c      	adds	r3, #12
 800afa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afa6:	627a      	str	r2, [r7, #36]	; 0x24
 800afa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afaa:	6a39      	ldr	r1, [r7, #32]
 800afac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afae:	e841 2300 	strex	r3, r2, [r1]
 800afb2:	61fb      	str	r3, [r7, #28]
   return(result);
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d1e5      	bne.n	800af86 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800afba:	e002      	b.n	800afc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800afc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afc6:	e000      	b.n	800afca <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800afc8:	2302      	movs	r3, #2
  }
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3730      	adds	r7, #48	; 0x30
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
	...

0800afd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b0ba      	sub	sp, #232	; 0xe8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	695b      	ldr	r3, [r3, #20]
 800aff6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800affa:	2300      	movs	r3, #0
 800affc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b000:	2300      	movs	r3, #0
 800b002:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b00a:	f003 030f 	and.w	r3, r3, #15
 800b00e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10f      	bne.n	800b03a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b01a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b01e:	f003 0320 	and.w	r3, r3, #32
 800b022:	2b00      	cmp	r3, #0
 800b024:	d009      	beq.n	800b03a <HAL_UART_IRQHandler+0x66>
 800b026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b02a:	f003 0320 	and.w	r3, r3, #32
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d003      	beq.n	800b03a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 fd87 	bl	800bb46 <UART_Receive_IT>
      return;
 800b038:	e256      	b.n	800b4e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b03a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f000 80de 	beq.w	800b200 <HAL_UART_IRQHandler+0x22c>
 800b044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b048:	f003 0301 	and.w	r3, r3, #1
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d106      	bne.n	800b05e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b054:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f000 80d1 	beq.w	800b200 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b062:	f003 0301 	and.w	r3, r3, #1
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00b      	beq.n	800b082 <HAL_UART_IRQHandler+0xae>
 800b06a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b06e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b072:	2b00      	cmp	r3, #0
 800b074:	d005      	beq.n	800b082 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07a:	f043 0201 	orr.w	r2, r3, #1
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b086:	f003 0304 	and.w	r3, r3, #4
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00b      	beq.n	800b0a6 <HAL_UART_IRQHandler+0xd2>
 800b08e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b092:	f003 0301 	and.w	r3, r3, #1
 800b096:	2b00      	cmp	r3, #0
 800b098:	d005      	beq.n	800b0a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09e:	f043 0202 	orr.w	r2, r3, #2
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b0a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0aa:	f003 0302 	and.w	r3, r3, #2
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00b      	beq.n	800b0ca <HAL_UART_IRQHandler+0xf6>
 800b0b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0b6:	f003 0301 	and.w	r3, r3, #1
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d005      	beq.n	800b0ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c2:	f043 0204 	orr.w	r2, r3, #4
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b0ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ce:	f003 0308 	and.w	r3, r3, #8
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d011      	beq.n	800b0fa <HAL_UART_IRQHandler+0x126>
 800b0d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0da:	f003 0320 	and.w	r3, r3, #32
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d105      	bne.n	800b0ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b0e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0e6:	f003 0301 	and.w	r3, r3, #1
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d005      	beq.n	800b0fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f2:	f043 0208 	orr.w	r2, r3, #8
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f000 81ed 	beq.w	800b4de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b108:	f003 0320 	and.w	r3, r3, #32
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d008      	beq.n	800b122 <HAL_UART_IRQHandler+0x14e>
 800b110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b114:	f003 0320 	and.w	r3, r3, #32
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d002      	beq.n	800b122 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 fd12 	bl	800bb46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	695b      	ldr	r3, [r3, #20]
 800b128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b12c:	2b40      	cmp	r3, #64	; 0x40
 800b12e:	bf0c      	ite	eq
 800b130:	2301      	moveq	r3, #1
 800b132:	2300      	movne	r3, #0
 800b134:	b2db      	uxtb	r3, r3
 800b136:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13e:	f003 0308 	and.w	r3, r3, #8
 800b142:	2b00      	cmp	r3, #0
 800b144:	d103      	bne.n	800b14e <HAL_UART_IRQHandler+0x17a>
 800b146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d04f      	beq.n	800b1ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fc1a 	bl	800b988 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	695b      	ldr	r3, [r3, #20]
 800b15a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b15e:	2b40      	cmp	r3, #64	; 0x40
 800b160:	d141      	bne.n	800b1e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	3314      	adds	r3, #20
 800b168:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b170:	e853 3f00 	ldrex	r3, [r3]
 800b174:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b178:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b17c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	3314      	adds	r3, #20
 800b18a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b18e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b196:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b19a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b19e:	e841 2300 	strex	r3, r2, [r1]
 800b1a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b1a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1d9      	bne.n	800b162 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d013      	beq.n	800b1de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ba:	4a7d      	ldr	r2, [pc, #500]	; (800b3b0 <HAL_UART_IRQHandler+0x3dc>)
 800b1bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7fb fbd8 	bl	8006978 <HAL_DMA_Abort_IT>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d016      	beq.n	800b1fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b1d8:	4610      	mov	r0, r2
 800b1da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1dc:	e00e      	b.n	800b1fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f9ae 	bl	800b540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1e4:	e00a      	b.n	800b1fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 f9aa 	bl	800b540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1ec:	e006      	b.n	800b1fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 f9a6 	bl	800b540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b1fa:	e170      	b.n	800b4de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1fc:	bf00      	nop
    return;
 800b1fe:	e16e      	b.n	800b4de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b204:	2b01      	cmp	r3, #1
 800b206:	f040 814a 	bne.w	800b49e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b20a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b20e:	f003 0310 	and.w	r3, r3, #16
 800b212:	2b00      	cmp	r3, #0
 800b214:	f000 8143 	beq.w	800b49e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b21c:	f003 0310 	and.w	r3, r3, #16
 800b220:	2b00      	cmp	r3, #0
 800b222:	f000 813c 	beq.w	800b49e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b226:	2300      	movs	r3, #0
 800b228:	60bb      	str	r3, [r7, #8]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	60bb      	str	r3, [r7, #8]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	60bb      	str	r3, [r7, #8]
 800b23a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	695b      	ldr	r3, [r3, #20]
 800b242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b246:	2b40      	cmp	r3, #64	; 0x40
 800b248:	f040 80b4 	bne.w	800b3b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b258:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f000 8140 	beq.w	800b4e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b26a:	429a      	cmp	r2, r3
 800b26c:	f080 8139 	bcs.w	800b4e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b276:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27c:	69db      	ldr	r3, [r3, #28]
 800b27e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b282:	f000 8088 	beq.w	800b396 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	330c      	adds	r3, #12
 800b28c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b290:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b294:	e853 3f00 	ldrex	r3, [r3]
 800b298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b29c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b2a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	330c      	adds	r3, #12
 800b2ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b2b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b2b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b2be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b2c2:	e841 2300 	strex	r3, r2, [r1]
 800b2c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b2ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d1d9      	bne.n	800b286 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	3314      	adds	r3, #20
 800b2d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2dc:	e853 3f00 	ldrex	r3, [r3]
 800b2e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b2e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2e4:	f023 0301 	bic.w	r3, r3, #1
 800b2e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	3314      	adds	r3, #20
 800b2f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b2f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b2fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b2fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b302:	e841 2300 	strex	r3, r2, [r1]
 800b306:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1e1      	bne.n	800b2d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3314      	adds	r3, #20
 800b314:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b318:	e853 3f00 	ldrex	r3, [r3]
 800b31c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b31e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b324:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	3314      	adds	r3, #20
 800b32e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b332:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b334:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b336:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b338:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b33a:	e841 2300 	strex	r3, r2, [r1]
 800b33e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1e3      	bne.n	800b30e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2220      	movs	r2, #32
 800b34a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	330c      	adds	r3, #12
 800b35a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b35e:	e853 3f00 	ldrex	r3, [r3]
 800b362:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b366:	f023 0310 	bic.w	r3, r3, #16
 800b36a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	330c      	adds	r3, #12
 800b374:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b378:	65ba      	str	r2, [r7, #88]	; 0x58
 800b37a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b37e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b380:	e841 2300 	strex	r3, r2, [r1]
 800b384:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1e3      	bne.n	800b354 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b390:	4618      	mov	r0, r3
 800b392:	f7fb fa81 	bl	8006898 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f7f9 fbde 	bl	8004b68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b3ac:	e099      	b.n	800b4e2 <HAL_UART_IRQHandler+0x50e>
 800b3ae:	bf00      	nop
 800b3b0:	0800ba4f 	.word	0x0800ba4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	1ad3      	subs	r3, r2, r3
 800b3c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	f000 808b 	beq.w	800b4e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b3d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f000 8086 	beq.w	800b4e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	330c      	adds	r3, #12
 800b3e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e4:	e853 3f00 	ldrex	r3, [r3]
 800b3e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b3f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	330c      	adds	r3, #12
 800b3fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b3fe:	647a      	str	r2, [r7, #68]	; 0x44
 800b400:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b402:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b406:	e841 2300 	strex	r3, r2, [r1]
 800b40a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1e3      	bne.n	800b3da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3314      	adds	r3, #20
 800b418:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41c:	e853 3f00 	ldrex	r3, [r3]
 800b420:	623b      	str	r3, [r7, #32]
   return(result);
 800b422:	6a3b      	ldr	r3, [r7, #32]
 800b424:	f023 0301 	bic.w	r3, r3, #1
 800b428:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3314      	adds	r3, #20
 800b432:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b436:	633a      	str	r2, [r7, #48]	; 0x30
 800b438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b43c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b43e:	e841 2300 	strex	r3, r2, [r1]
 800b442:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b446:	2b00      	cmp	r3, #0
 800b448:	d1e3      	bne.n	800b412 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2220      	movs	r2, #32
 800b44e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	330c      	adds	r3, #12
 800b45e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	e853 3f00 	ldrex	r3, [r3]
 800b466:	60fb      	str	r3, [r7, #12]
   return(result);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f023 0310 	bic.w	r3, r3, #16
 800b46e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	330c      	adds	r3, #12
 800b478:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b47c:	61fa      	str	r2, [r7, #28]
 800b47e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b480:	69b9      	ldr	r1, [r7, #24]
 800b482:	69fa      	ldr	r2, [r7, #28]
 800b484:	e841 2300 	strex	r3, r2, [r1]
 800b488:	617b      	str	r3, [r7, #20]
   return(result);
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1e3      	bne.n	800b458 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b490:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b494:	4619      	mov	r1, r3
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7f9 fb66 	bl	8004b68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b49c:	e023      	b.n	800b4e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b49e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d009      	beq.n	800b4be <HAL_UART_IRQHandler+0x4ea>
 800b4aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d003      	beq.n	800b4be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 fadd 	bl	800ba76 <UART_Transmit_IT>
    return;
 800b4bc:	e014      	b.n	800b4e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b4be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00e      	beq.n	800b4e8 <HAL_UART_IRQHandler+0x514>
 800b4ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d008      	beq.n	800b4e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 fb1d 	bl	800bb16 <UART_EndTransmit_IT>
    return;
 800b4dc:	e004      	b.n	800b4e8 <HAL_UART_IRQHandler+0x514>
    return;
 800b4de:	bf00      	nop
 800b4e0:	e002      	b.n	800b4e8 <HAL_UART_IRQHandler+0x514>
      return;
 800b4e2:	bf00      	nop
 800b4e4:	e000      	b.n	800b4e8 <HAL_UART_IRQHandler+0x514>
      return;
 800b4e6:	bf00      	nop
  }
}
 800b4e8:	37e8      	adds	r7, #232	; 0xe8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop

0800b4f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b4f8:	bf00      	nop
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b50c:	bf00      	nop
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b534:	bf00      	nop
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b548:	bf00      	nop
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b090      	sub	sp, #64	; 0x40
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b560:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d137      	bne.n	800b5e0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b572:	2200      	movs	r2, #0
 800b574:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	3314      	adds	r3, #20
 800b57c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b580:	e853 3f00 	ldrex	r3, [r3]
 800b584:	623b      	str	r3, [r7, #32]
   return(result);
 800b586:	6a3b      	ldr	r3, [r7, #32]
 800b588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b58c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	3314      	adds	r3, #20
 800b594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b596:	633a      	str	r2, [r7, #48]	; 0x30
 800b598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b59e:	e841 2300 	strex	r3, r2, [r1]
 800b5a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1e5      	bne.n	800b576 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	330c      	adds	r3, #12
 800b5b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	e853 3f00 	ldrex	r3, [r3]
 800b5b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5c0:	637b      	str	r3, [r7, #52]	; 0x34
 800b5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	330c      	adds	r3, #12
 800b5c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5ca:	61fa      	str	r2, [r7, #28]
 800b5cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ce:	69b9      	ldr	r1, [r7, #24]
 800b5d0:	69fa      	ldr	r2, [r7, #28]
 800b5d2:	e841 2300 	strex	r3, r2, [r1]
 800b5d6:	617b      	str	r3, [r7, #20]
   return(result);
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1e5      	bne.n	800b5aa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b5de:	e002      	b.n	800b5e6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b5e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b5e2:	f7ff ff85 	bl	800b4f0 <HAL_UART_TxCpltCallback>
}
 800b5e6:	bf00      	nop
 800b5e8:	3740      	adds	r7, #64	; 0x40
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b084      	sub	sp, #16
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b5fc:	68f8      	ldr	r0, [r7, #12]
 800b5fe:	f7ff ff81 	bl	800b504 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b602:	bf00      	nop
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b09c      	sub	sp, #112	; 0x70
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b616:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b622:	2b00      	cmp	r3, #0
 800b624:	d172      	bne.n	800b70c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b628:	2200      	movs	r2, #0
 800b62a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b62c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	330c      	adds	r3, #12
 800b632:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b636:	e853 3f00 	ldrex	r3, [r3]
 800b63a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b63c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b63e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b642:	66bb      	str	r3, [r7, #104]	; 0x68
 800b644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	330c      	adds	r3, #12
 800b64a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b64c:	65ba      	str	r2, [r7, #88]	; 0x58
 800b64e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b650:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b652:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b654:	e841 2300 	strex	r3, r2, [r1]
 800b658:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1e5      	bne.n	800b62c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3314      	adds	r3, #20
 800b666:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66a:	e853 3f00 	ldrex	r3, [r3]
 800b66e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b672:	f023 0301 	bic.w	r3, r3, #1
 800b676:	667b      	str	r3, [r7, #100]	; 0x64
 800b678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	3314      	adds	r3, #20
 800b67e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b680:	647a      	str	r2, [r7, #68]	; 0x44
 800b682:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b684:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b686:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b688:	e841 2300 	strex	r3, r2, [r1]
 800b68c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b68e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1e5      	bne.n	800b660 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	3314      	adds	r3, #20
 800b69a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69e:	e853 3f00 	ldrex	r3, [r3]
 800b6a2:	623b      	str	r3, [r7, #32]
   return(result);
 800b6a4:	6a3b      	ldr	r3, [r7, #32]
 800b6a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6aa:	663b      	str	r3, [r7, #96]	; 0x60
 800b6ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	3314      	adds	r3, #20
 800b6b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b6b4:	633a      	str	r2, [r7, #48]	; 0x30
 800b6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6bc:	e841 2300 	strex	r3, r2, [r1]
 800b6c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1e5      	bne.n	800b694 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b6c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ca:	2220      	movs	r2, #32
 800b6cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d119      	bne.n	800b70c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	330c      	adds	r3, #12
 800b6de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	e853 3f00 	ldrex	r3, [r3]
 800b6e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f023 0310 	bic.w	r3, r3, #16
 800b6ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	330c      	adds	r3, #12
 800b6f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b6f8:	61fa      	str	r2, [r7, #28]
 800b6fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6fc:	69b9      	ldr	r1, [r7, #24]
 800b6fe:	69fa      	ldr	r2, [r7, #28]
 800b700:	e841 2300 	strex	r3, r2, [r1]
 800b704:	617b      	str	r3, [r7, #20]
   return(result);
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1e5      	bne.n	800b6d8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b70c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b710:	2b01      	cmp	r3, #1
 800b712:	d106      	bne.n	800b722 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b716:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b718:	4619      	mov	r1, r3
 800b71a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b71c:	f7f9 fa24 	bl	8004b68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b720:	e002      	b.n	800b728 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b722:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b724:	f7ff fef8 	bl	800b518 <HAL_UART_RxCpltCallback>
}
 800b728:	bf00      	nop
 800b72a:	3770      	adds	r7, #112	; 0x70
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b73c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b742:	2b01      	cmp	r3, #1
 800b744:	d108      	bne.n	800b758 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b74a:	085b      	lsrs	r3, r3, #1
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	4619      	mov	r1, r3
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f7f9 fa09 	bl	8004b68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b756:	e002      	b.n	800b75e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f7ff fee7 	bl	800b52c <HAL_UART_RxHalfCpltCallback>
}
 800b75e:	bf00      	nop
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b084      	sub	sp, #16
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b76e:	2300      	movs	r3, #0
 800b770:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b776:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	695b      	ldr	r3, [r3, #20]
 800b77e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b782:	2b80      	cmp	r3, #128	; 0x80
 800b784:	bf0c      	ite	eq
 800b786:	2301      	moveq	r3, #1
 800b788:	2300      	movne	r3, #0
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b794:	b2db      	uxtb	r3, r3
 800b796:	2b21      	cmp	r3, #33	; 0x21
 800b798:	d108      	bne.n	800b7ac <UART_DMAError+0x46>
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d005      	beq.n	800b7ac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b7a6:	68b8      	ldr	r0, [r7, #8]
 800b7a8:	f000 f8c6 	bl	800b938 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	695b      	ldr	r3, [r3, #20]
 800b7b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7b6:	2b40      	cmp	r3, #64	; 0x40
 800b7b8:	bf0c      	ite	eq
 800b7ba:	2301      	moveq	r3, #1
 800b7bc:	2300      	movne	r3, #0
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	2b22      	cmp	r3, #34	; 0x22
 800b7cc:	d108      	bne.n	800b7e0 <UART_DMAError+0x7a>
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d005      	beq.n	800b7e0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b7da:	68b8      	ldr	r0, [r7, #8]
 800b7dc:	f000 f8d4 	bl	800b988 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e4:	f043 0210 	orr.w	r2, r3, #16
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7ec:	68b8      	ldr	r0, [r7, #8]
 800b7ee:	f7ff fea7 	bl	800b540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7f2:	bf00      	nop
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
	...

0800b7fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b098      	sub	sp, #96	; 0x60
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	4613      	mov	r3, r2
 800b808:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b80a:	68ba      	ldr	r2, [r7, #8]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	88fa      	ldrh	r2, [r7, #6]
 800b814:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2222      	movs	r2, #34	; 0x22
 800b820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b828:	4a40      	ldr	r2, [pc, #256]	; (800b92c <UART_Start_Receive_DMA+0x130>)
 800b82a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b830:	4a3f      	ldr	r2, [pc, #252]	; (800b930 <UART_Start_Receive_DMA+0x134>)
 800b832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b838:	4a3e      	ldr	r2, [pc, #248]	; (800b934 <UART_Start_Receive_DMA+0x138>)
 800b83a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b840:	2200      	movs	r2, #0
 800b842:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b844:	f107 0308 	add.w	r3, r7, #8
 800b848:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	3304      	adds	r3, #4
 800b854:	4619      	mov	r1, r3
 800b856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	88fb      	ldrh	r3, [r7, #6]
 800b85c:	f7fa ffc4 	bl	80067e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b860:	2300      	movs	r3, #0
 800b862:	613b      	str	r3, [r7, #16]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	613b      	str	r3, [r7, #16]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	613b      	str	r3, [r7, #16]
 800b874:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d019      	beq.n	800b8ba <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	330c      	adds	r3, #12
 800b88c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b890:	e853 3f00 	ldrex	r3, [r3]
 800b894:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b89c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	330c      	adds	r3, #12
 800b8a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8a6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b8a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b8ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8ae:	e841 2300 	strex	r3, r2, [r1]
 800b8b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b8b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1e5      	bne.n	800b886 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	3314      	adds	r3, #20
 800b8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c4:	e853 3f00 	ldrex	r3, [r3]
 800b8c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8cc:	f043 0301 	orr.w	r3, r3, #1
 800b8d0:	657b      	str	r3, [r7, #84]	; 0x54
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	3314      	adds	r3, #20
 800b8d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b8da:	63ba      	str	r2, [r7, #56]	; 0x38
 800b8dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8e2:	e841 2300 	strex	r3, r2, [r1]
 800b8e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d1e5      	bne.n	800b8ba <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	3314      	adds	r3, #20
 800b8f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	e853 3f00 	ldrex	r3, [r3]
 800b8fc:	617b      	str	r3, [r7, #20]
   return(result);
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b904:	653b      	str	r3, [r7, #80]	; 0x50
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	3314      	adds	r3, #20
 800b90c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b90e:	627a      	str	r2, [r7, #36]	; 0x24
 800b910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b912:	6a39      	ldr	r1, [r7, #32]
 800b914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b916:	e841 2300 	strex	r3, r2, [r1]
 800b91a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1e5      	bne.n	800b8ee <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	3760      	adds	r7, #96	; 0x60
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	0800b60b 	.word	0x0800b60b
 800b930:	0800b731 	.word	0x0800b731
 800b934:	0800b767 	.word	0x0800b767

0800b938 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b938:	b480      	push	{r7}
 800b93a:	b089      	sub	sp, #36	; 0x24
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	330c      	adds	r3, #12
 800b946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	e853 3f00 	ldrex	r3, [r3]
 800b94e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b956:	61fb      	str	r3, [r7, #28]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	330c      	adds	r3, #12
 800b95e:	69fa      	ldr	r2, [r7, #28]
 800b960:	61ba      	str	r2, [r7, #24]
 800b962:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b964:	6979      	ldr	r1, [r7, #20]
 800b966:	69ba      	ldr	r2, [r7, #24]
 800b968:	e841 2300 	strex	r3, r2, [r1]
 800b96c:	613b      	str	r3, [r7, #16]
   return(result);
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1e5      	bne.n	800b940 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2220      	movs	r2, #32
 800b978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b97c:	bf00      	nop
 800b97e:	3724      	adds	r7, #36	; 0x24
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b988:	b480      	push	{r7}
 800b98a:	b095      	sub	sp, #84	; 0x54
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	330c      	adds	r3, #12
 800b996:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b99a:	e853 3f00 	ldrex	r3, [r3]
 800b99e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	330c      	adds	r3, #12
 800b9ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b9b0:	643a      	str	r2, [r7, #64]	; 0x40
 800b9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b9b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9b8:	e841 2300 	strex	r3, r2, [r1]
 800b9bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d1e5      	bne.n	800b990 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	3314      	adds	r3, #20
 800b9ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9cc:	6a3b      	ldr	r3, [r7, #32]
 800b9ce:	e853 3f00 	ldrex	r3, [r3]
 800b9d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	f023 0301 	bic.w	r3, r3, #1
 800b9da:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	3314      	adds	r3, #20
 800b9e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9ec:	e841 2300 	strex	r3, r2, [r1]
 800b9f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1e5      	bne.n	800b9c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d119      	bne.n	800ba34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	330c      	adds	r3, #12
 800ba06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	e853 3f00 	ldrex	r3, [r3]
 800ba0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	f023 0310 	bic.w	r3, r3, #16
 800ba16:	647b      	str	r3, [r7, #68]	; 0x44
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	330c      	adds	r3, #12
 800ba1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba20:	61ba      	str	r2, [r7, #24]
 800ba22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba24:	6979      	ldr	r1, [r7, #20]
 800ba26:	69ba      	ldr	r2, [r7, #24]
 800ba28:	e841 2300 	strex	r3, r2, [r1]
 800ba2c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1e5      	bne.n	800ba00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2220      	movs	r2, #32
 800ba38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ba42:	bf00      	nop
 800ba44:	3754      	adds	r7, #84	; 0x54
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b084      	sub	sp, #16
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2200      	movs	r2, #0
 800ba66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f7ff fd69 	bl	800b540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba6e:	bf00      	nop
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ba76:	b480      	push	{r7}
 800ba78:	b085      	sub	sp, #20
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	2b21      	cmp	r3, #33	; 0x21
 800ba88:	d13e      	bne.n	800bb08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba92:	d114      	bne.n	800babe <UART_Transmit_IT+0x48>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	691b      	ldr	r3, [r3, #16]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d110      	bne.n	800babe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6a1b      	ldr	r3, [r3, #32]
 800baa0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	881b      	ldrh	r3, [r3, #0]
 800baa6:	461a      	mov	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bab0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a1b      	ldr	r3, [r3, #32]
 800bab6:	1c9a      	adds	r2, r3, #2
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	621a      	str	r2, [r3, #32]
 800babc:	e008      	b.n	800bad0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a1b      	ldr	r3, [r3, #32]
 800bac2:	1c59      	adds	r1, r3, #1
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	6211      	str	r1, [r2, #32]
 800bac8:	781a      	ldrb	r2, [r3, #0]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	3b01      	subs	r3, #1
 800bad8:	b29b      	uxth	r3, r3
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	4619      	mov	r1, r3
 800bade:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10f      	bne.n	800bb04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	68da      	ldr	r2, [r3, #12]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800baf2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68da      	ldr	r2, [r3, #12]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bb04:	2300      	movs	r3, #0
 800bb06:	e000      	b.n	800bb0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bb08:	2302      	movs	r3, #2
  }
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3714      	adds	r7, #20
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b082      	sub	sp, #8
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	68da      	ldr	r2, [r3, #12]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2220      	movs	r2, #32
 800bb32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f7ff fcda 	bl	800b4f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b08c      	sub	sp, #48	; 0x30
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	2b22      	cmp	r3, #34	; 0x22
 800bb58:	f040 80ab 	bne.w	800bcb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb64:	d117      	bne.n	800bb96 <UART_Receive_IT+0x50>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d113      	bne.n	800bb96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8e:	1c9a      	adds	r2, r3, #2
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	629a      	str	r2, [r3, #40]	; 0x28
 800bb94:	e026      	b.n	800bbe4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bba8:	d007      	beq.n	800bbba <UART_Receive_IT+0x74>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d10a      	bne.n	800bbc8 <UART_Receive_IT+0x82>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	691b      	ldr	r3, [r3, #16]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d106      	bne.n	800bbc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	b2da      	uxtb	r2, r3
 800bbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc4:	701a      	strb	r2, [r3, #0]
 800bbc6:	e008      	b.n	800bbda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbd4:	b2da      	uxtb	r2, r3
 800bbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbde:	1c5a      	adds	r2, r3, #1
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	3b01      	subs	r3, #1
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d15a      	bne.n	800bcae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68da      	ldr	r2, [r3, #12]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f022 0220 	bic.w	r2, r2, #32
 800bc06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	68da      	ldr	r2, [r3, #12]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	695a      	ldr	r2, [r3, #20]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f022 0201 	bic.w	r2, r2, #1
 800bc26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2220      	movs	r2, #32
 800bc2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d135      	bne.n	800bca4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	330c      	adds	r3, #12
 800bc44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	e853 3f00 	ldrex	r3, [r3]
 800bc4c:	613b      	str	r3, [r7, #16]
   return(result);
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	f023 0310 	bic.w	r3, r3, #16
 800bc54:	627b      	str	r3, [r7, #36]	; 0x24
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	330c      	adds	r3, #12
 800bc5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc5e:	623a      	str	r2, [r7, #32]
 800bc60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc62:	69f9      	ldr	r1, [r7, #28]
 800bc64:	6a3a      	ldr	r2, [r7, #32]
 800bc66:	e841 2300 	strex	r3, r2, [r1]
 800bc6a:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d1e5      	bne.n	800bc3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f003 0310 	and.w	r3, r3, #16
 800bc7c:	2b10      	cmp	r3, #16
 800bc7e:	d10a      	bne.n	800bc96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc80:	2300      	movs	r3, #0
 800bc82:	60fb      	str	r3, [r7, #12]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	60fb      	str	r3, [r7, #12]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	60fb      	str	r3, [r7, #12]
 800bc94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f7f8 ff63 	bl	8004b68 <HAL_UARTEx_RxEventCallback>
 800bca2:	e002      	b.n	800bcaa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f7ff fc37 	bl	800b518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	e002      	b.n	800bcb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	e000      	b.n	800bcb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bcb2:	2302      	movs	r3, #2
  }
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3730      	adds	r7, #48	; 0x30
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bcbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bcc0:	b0c0      	sub	sp, #256	; 0x100
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bcc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	691b      	ldr	r3, [r3, #16]
 800bcd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bcd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcd8:	68d9      	ldr	r1, [r3, #12]
 800bcda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	ea40 0301 	orr.w	r3, r0, r1
 800bce4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcea:	689a      	ldr	r2, [r3, #8]
 800bcec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	431a      	orrs	r2, r3
 800bcf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcf8:	695b      	ldr	r3, [r3, #20]
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd00:	69db      	ldr	r3, [r3, #28]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bd08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bd14:	f021 010c 	bic.w	r1, r1, #12
 800bd18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd22:	430b      	orrs	r3, r1
 800bd24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bd26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	695b      	ldr	r3, [r3, #20]
 800bd2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bd32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd36:	6999      	ldr	r1, [r3, #24]
 800bd38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	ea40 0301 	orr.w	r3, r0, r1
 800bd42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bd44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	4b8f      	ldr	r3, [pc, #572]	; (800bf88 <UART_SetConfig+0x2cc>)
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d005      	beq.n	800bd5c <UART_SetConfig+0xa0>
 800bd50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	4b8d      	ldr	r3, [pc, #564]	; (800bf8c <UART_SetConfig+0x2d0>)
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d104      	bne.n	800bd66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bd5c:	f7fd fe86 	bl	8009a6c <HAL_RCC_GetPCLK2Freq>
 800bd60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bd64:	e003      	b.n	800bd6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bd66:	f7fd fe6d 	bl	8009a44 <HAL_RCC_GetPCLK1Freq>
 800bd6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd72:	69db      	ldr	r3, [r3, #28]
 800bd74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd78:	f040 810c 	bne.w	800bf94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bd7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd80:	2200      	movs	r2, #0
 800bd82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bd8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bd8e:	4622      	mov	r2, r4
 800bd90:	462b      	mov	r3, r5
 800bd92:	1891      	adds	r1, r2, r2
 800bd94:	65b9      	str	r1, [r7, #88]	; 0x58
 800bd96:	415b      	adcs	r3, r3
 800bd98:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bd9e:	4621      	mov	r1, r4
 800bda0:	eb12 0801 	adds.w	r8, r2, r1
 800bda4:	4629      	mov	r1, r5
 800bda6:	eb43 0901 	adc.w	r9, r3, r1
 800bdaa:	f04f 0200 	mov.w	r2, #0
 800bdae:	f04f 0300 	mov.w	r3, #0
 800bdb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bdb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bdba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bdbe:	4690      	mov	r8, r2
 800bdc0:	4699      	mov	r9, r3
 800bdc2:	4623      	mov	r3, r4
 800bdc4:	eb18 0303 	adds.w	r3, r8, r3
 800bdc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bdcc:	462b      	mov	r3, r5
 800bdce:	eb49 0303 	adc.w	r3, r9, r3
 800bdd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bdd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	2200      	movs	r2, #0
 800bdde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bde2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bde6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bdea:	460b      	mov	r3, r1
 800bdec:	18db      	adds	r3, r3, r3
 800bdee:	653b      	str	r3, [r7, #80]	; 0x50
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	eb42 0303 	adc.w	r3, r2, r3
 800bdf6:	657b      	str	r3, [r7, #84]	; 0x54
 800bdf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bdfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800be00:	f7f4 fe28 	bl	8000a54 <__aeabi_uldivmod>
 800be04:	4602      	mov	r2, r0
 800be06:	460b      	mov	r3, r1
 800be08:	4b61      	ldr	r3, [pc, #388]	; (800bf90 <UART_SetConfig+0x2d4>)
 800be0a:	fba3 2302 	umull	r2, r3, r3, r2
 800be0e:	095b      	lsrs	r3, r3, #5
 800be10:	011c      	lsls	r4, r3, #4
 800be12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be16:	2200      	movs	r2, #0
 800be18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800be20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800be24:	4642      	mov	r2, r8
 800be26:	464b      	mov	r3, r9
 800be28:	1891      	adds	r1, r2, r2
 800be2a:	64b9      	str	r1, [r7, #72]	; 0x48
 800be2c:	415b      	adcs	r3, r3
 800be2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800be34:	4641      	mov	r1, r8
 800be36:	eb12 0a01 	adds.w	sl, r2, r1
 800be3a:	4649      	mov	r1, r9
 800be3c:	eb43 0b01 	adc.w	fp, r3, r1
 800be40:	f04f 0200 	mov.w	r2, #0
 800be44:	f04f 0300 	mov.w	r3, #0
 800be48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800be4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800be50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be54:	4692      	mov	sl, r2
 800be56:	469b      	mov	fp, r3
 800be58:	4643      	mov	r3, r8
 800be5a:	eb1a 0303 	adds.w	r3, sl, r3
 800be5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be62:	464b      	mov	r3, r9
 800be64:	eb4b 0303 	adc.w	r3, fp, r3
 800be68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800be6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800be7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800be80:	460b      	mov	r3, r1
 800be82:	18db      	adds	r3, r3, r3
 800be84:	643b      	str	r3, [r7, #64]	; 0x40
 800be86:	4613      	mov	r3, r2
 800be88:	eb42 0303 	adc.w	r3, r2, r3
 800be8c:	647b      	str	r3, [r7, #68]	; 0x44
 800be8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800be92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800be96:	f7f4 fddd 	bl	8000a54 <__aeabi_uldivmod>
 800be9a:	4602      	mov	r2, r0
 800be9c:	460b      	mov	r3, r1
 800be9e:	4611      	mov	r1, r2
 800bea0:	4b3b      	ldr	r3, [pc, #236]	; (800bf90 <UART_SetConfig+0x2d4>)
 800bea2:	fba3 2301 	umull	r2, r3, r3, r1
 800bea6:	095b      	lsrs	r3, r3, #5
 800bea8:	2264      	movs	r2, #100	; 0x64
 800beaa:	fb02 f303 	mul.w	r3, r2, r3
 800beae:	1acb      	subs	r3, r1, r3
 800beb0:	00db      	lsls	r3, r3, #3
 800beb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800beb6:	4b36      	ldr	r3, [pc, #216]	; (800bf90 <UART_SetConfig+0x2d4>)
 800beb8:	fba3 2302 	umull	r2, r3, r3, r2
 800bebc:	095b      	lsrs	r3, r3, #5
 800bebe:	005b      	lsls	r3, r3, #1
 800bec0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bec4:	441c      	add	r4, r3
 800bec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800beca:	2200      	movs	r2, #0
 800becc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bed0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bed4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bed8:	4642      	mov	r2, r8
 800beda:	464b      	mov	r3, r9
 800bedc:	1891      	adds	r1, r2, r2
 800bede:	63b9      	str	r1, [r7, #56]	; 0x38
 800bee0:	415b      	adcs	r3, r3
 800bee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bee8:	4641      	mov	r1, r8
 800beea:	1851      	adds	r1, r2, r1
 800beec:	6339      	str	r1, [r7, #48]	; 0x30
 800beee:	4649      	mov	r1, r9
 800bef0:	414b      	adcs	r3, r1
 800bef2:	637b      	str	r3, [r7, #52]	; 0x34
 800bef4:	f04f 0200 	mov.w	r2, #0
 800bef8:	f04f 0300 	mov.w	r3, #0
 800befc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bf00:	4659      	mov	r1, fp
 800bf02:	00cb      	lsls	r3, r1, #3
 800bf04:	4651      	mov	r1, sl
 800bf06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf0a:	4651      	mov	r1, sl
 800bf0c:	00ca      	lsls	r2, r1, #3
 800bf0e:	4610      	mov	r0, r2
 800bf10:	4619      	mov	r1, r3
 800bf12:	4603      	mov	r3, r0
 800bf14:	4642      	mov	r2, r8
 800bf16:	189b      	adds	r3, r3, r2
 800bf18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf1c:	464b      	mov	r3, r9
 800bf1e:	460a      	mov	r2, r1
 800bf20:	eb42 0303 	adc.w	r3, r2, r3
 800bf24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bf34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bf38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	18db      	adds	r3, r3, r3
 800bf40:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf42:	4613      	mov	r3, r2
 800bf44:	eb42 0303 	adc.w	r3, r2, r3
 800bf48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bf4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bf52:	f7f4 fd7f 	bl	8000a54 <__aeabi_uldivmod>
 800bf56:	4602      	mov	r2, r0
 800bf58:	460b      	mov	r3, r1
 800bf5a:	4b0d      	ldr	r3, [pc, #52]	; (800bf90 <UART_SetConfig+0x2d4>)
 800bf5c:	fba3 1302 	umull	r1, r3, r3, r2
 800bf60:	095b      	lsrs	r3, r3, #5
 800bf62:	2164      	movs	r1, #100	; 0x64
 800bf64:	fb01 f303 	mul.w	r3, r1, r3
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	00db      	lsls	r3, r3, #3
 800bf6c:	3332      	adds	r3, #50	; 0x32
 800bf6e:	4a08      	ldr	r2, [pc, #32]	; (800bf90 <UART_SetConfig+0x2d4>)
 800bf70:	fba2 2303 	umull	r2, r3, r2, r3
 800bf74:	095b      	lsrs	r3, r3, #5
 800bf76:	f003 0207 	and.w	r2, r3, #7
 800bf7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4422      	add	r2, r4
 800bf82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bf84:	e105      	b.n	800c192 <UART_SetConfig+0x4d6>
 800bf86:	bf00      	nop
 800bf88:	40011000 	.word	0x40011000
 800bf8c:	40011400 	.word	0x40011400
 800bf90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bf9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bfa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bfa6:	4642      	mov	r2, r8
 800bfa8:	464b      	mov	r3, r9
 800bfaa:	1891      	adds	r1, r2, r2
 800bfac:	6239      	str	r1, [r7, #32]
 800bfae:	415b      	adcs	r3, r3
 800bfb0:	627b      	str	r3, [r7, #36]	; 0x24
 800bfb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bfb6:	4641      	mov	r1, r8
 800bfb8:	1854      	adds	r4, r2, r1
 800bfba:	4649      	mov	r1, r9
 800bfbc:	eb43 0501 	adc.w	r5, r3, r1
 800bfc0:	f04f 0200 	mov.w	r2, #0
 800bfc4:	f04f 0300 	mov.w	r3, #0
 800bfc8:	00eb      	lsls	r3, r5, #3
 800bfca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bfce:	00e2      	lsls	r2, r4, #3
 800bfd0:	4614      	mov	r4, r2
 800bfd2:	461d      	mov	r5, r3
 800bfd4:	4643      	mov	r3, r8
 800bfd6:	18e3      	adds	r3, r4, r3
 800bfd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bfdc:	464b      	mov	r3, r9
 800bfde:	eb45 0303 	adc.w	r3, r5, r3
 800bfe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bfe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bff2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bff6:	f04f 0200 	mov.w	r2, #0
 800bffa:	f04f 0300 	mov.w	r3, #0
 800bffe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c002:	4629      	mov	r1, r5
 800c004:	008b      	lsls	r3, r1, #2
 800c006:	4621      	mov	r1, r4
 800c008:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c00c:	4621      	mov	r1, r4
 800c00e:	008a      	lsls	r2, r1, #2
 800c010:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c014:	f7f4 fd1e 	bl	8000a54 <__aeabi_uldivmod>
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	4b60      	ldr	r3, [pc, #384]	; (800c1a0 <UART_SetConfig+0x4e4>)
 800c01e:	fba3 2302 	umull	r2, r3, r3, r2
 800c022:	095b      	lsrs	r3, r3, #5
 800c024:	011c      	lsls	r4, r3, #4
 800c026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c02a:	2200      	movs	r2, #0
 800c02c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c030:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c034:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c038:	4642      	mov	r2, r8
 800c03a:	464b      	mov	r3, r9
 800c03c:	1891      	adds	r1, r2, r2
 800c03e:	61b9      	str	r1, [r7, #24]
 800c040:	415b      	adcs	r3, r3
 800c042:	61fb      	str	r3, [r7, #28]
 800c044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c048:	4641      	mov	r1, r8
 800c04a:	1851      	adds	r1, r2, r1
 800c04c:	6139      	str	r1, [r7, #16]
 800c04e:	4649      	mov	r1, r9
 800c050:	414b      	adcs	r3, r1
 800c052:	617b      	str	r3, [r7, #20]
 800c054:	f04f 0200 	mov.w	r2, #0
 800c058:	f04f 0300 	mov.w	r3, #0
 800c05c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c060:	4659      	mov	r1, fp
 800c062:	00cb      	lsls	r3, r1, #3
 800c064:	4651      	mov	r1, sl
 800c066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c06a:	4651      	mov	r1, sl
 800c06c:	00ca      	lsls	r2, r1, #3
 800c06e:	4610      	mov	r0, r2
 800c070:	4619      	mov	r1, r3
 800c072:	4603      	mov	r3, r0
 800c074:	4642      	mov	r2, r8
 800c076:	189b      	adds	r3, r3, r2
 800c078:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c07c:	464b      	mov	r3, r9
 800c07e:	460a      	mov	r2, r1
 800c080:	eb42 0303 	adc.w	r3, r2, r3
 800c084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	2200      	movs	r2, #0
 800c090:	67bb      	str	r3, [r7, #120]	; 0x78
 800c092:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c094:	f04f 0200 	mov.w	r2, #0
 800c098:	f04f 0300 	mov.w	r3, #0
 800c09c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c0a0:	4649      	mov	r1, r9
 800c0a2:	008b      	lsls	r3, r1, #2
 800c0a4:	4641      	mov	r1, r8
 800c0a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c0aa:	4641      	mov	r1, r8
 800c0ac:	008a      	lsls	r2, r1, #2
 800c0ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c0b2:	f7f4 fccf 	bl	8000a54 <__aeabi_uldivmod>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	4b39      	ldr	r3, [pc, #228]	; (800c1a0 <UART_SetConfig+0x4e4>)
 800c0bc:	fba3 1302 	umull	r1, r3, r3, r2
 800c0c0:	095b      	lsrs	r3, r3, #5
 800c0c2:	2164      	movs	r1, #100	; 0x64
 800c0c4:	fb01 f303 	mul.w	r3, r1, r3
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	011b      	lsls	r3, r3, #4
 800c0cc:	3332      	adds	r3, #50	; 0x32
 800c0ce:	4a34      	ldr	r2, [pc, #208]	; (800c1a0 <UART_SetConfig+0x4e4>)
 800c0d0:	fba2 2303 	umull	r2, r3, r2, r3
 800c0d4:	095b      	lsrs	r3, r3, #5
 800c0d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0da:	441c      	add	r4, r3
 800c0dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	673b      	str	r3, [r7, #112]	; 0x70
 800c0e4:	677a      	str	r2, [r7, #116]	; 0x74
 800c0e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c0ea:	4642      	mov	r2, r8
 800c0ec:	464b      	mov	r3, r9
 800c0ee:	1891      	adds	r1, r2, r2
 800c0f0:	60b9      	str	r1, [r7, #8]
 800c0f2:	415b      	adcs	r3, r3
 800c0f4:	60fb      	str	r3, [r7, #12]
 800c0f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c0fa:	4641      	mov	r1, r8
 800c0fc:	1851      	adds	r1, r2, r1
 800c0fe:	6039      	str	r1, [r7, #0]
 800c100:	4649      	mov	r1, r9
 800c102:	414b      	adcs	r3, r1
 800c104:	607b      	str	r3, [r7, #4]
 800c106:	f04f 0200 	mov.w	r2, #0
 800c10a:	f04f 0300 	mov.w	r3, #0
 800c10e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c112:	4659      	mov	r1, fp
 800c114:	00cb      	lsls	r3, r1, #3
 800c116:	4651      	mov	r1, sl
 800c118:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c11c:	4651      	mov	r1, sl
 800c11e:	00ca      	lsls	r2, r1, #3
 800c120:	4610      	mov	r0, r2
 800c122:	4619      	mov	r1, r3
 800c124:	4603      	mov	r3, r0
 800c126:	4642      	mov	r2, r8
 800c128:	189b      	adds	r3, r3, r2
 800c12a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c12c:	464b      	mov	r3, r9
 800c12e:	460a      	mov	r2, r1
 800c130:	eb42 0303 	adc.w	r3, r2, r3
 800c134:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	2200      	movs	r2, #0
 800c13e:	663b      	str	r3, [r7, #96]	; 0x60
 800c140:	667a      	str	r2, [r7, #100]	; 0x64
 800c142:	f04f 0200 	mov.w	r2, #0
 800c146:	f04f 0300 	mov.w	r3, #0
 800c14a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c14e:	4649      	mov	r1, r9
 800c150:	008b      	lsls	r3, r1, #2
 800c152:	4641      	mov	r1, r8
 800c154:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c158:	4641      	mov	r1, r8
 800c15a:	008a      	lsls	r2, r1, #2
 800c15c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c160:	f7f4 fc78 	bl	8000a54 <__aeabi_uldivmod>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	4b0d      	ldr	r3, [pc, #52]	; (800c1a0 <UART_SetConfig+0x4e4>)
 800c16a:	fba3 1302 	umull	r1, r3, r3, r2
 800c16e:	095b      	lsrs	r3, r3, #5
 800c170:	2164      	movs	r1, #100	; 0x64
 800c172:	fb01 f303 	mul.w	r3, r1, r3
 800c176:	1ad3      	subs	r3, r2, r3
 800c178:	011b      	lsls	r3, r3, #4
 800c17a:	3332      	adds	r3, #50	; 0x32
 800c17c:	4a08      	ldr	r2, [pc, #32]	; (800c1a0 <UART_SetConfig+0x4e4>)
 800c17e:	fba2 2303 	umull	r2, r3, r2, r3
 800c182:	095b      	lsrs	r3, r3, #5
 800c184:	f003 020f 	and.w	r2, r3, #15
 800c188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4422      	add	r2, r4
 800c190:	609a      	str	r2, [r3, #8]
}
 800c192:	bf00      	nop
 800c194:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c198:	46bd      	mov	sp, r7
 800c19a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c19e:	bf00      	nop
 800c1a0:	51eb851f 	.word	0x51eb851f

0800c1a4 <arm_mat_trans_f32>:
 800c1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a8:	8802      	ldrh	r2, [r0, #0]
 800c1aa:	884b      	ldrh	r3, [r1, #2]
 800c1ac:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c1b0:	684f      	ldr	r7, [r1, #4]
 800c1b2:	8840      	ldrh	r0, [r0, #2]
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	d14c      	bne.n	800c254 <arm_mat_trans_f32+0xb0>
 800c1ba:	f8b1 e000 	ldrh.w	lr, [r1]
 800c1be:	4586      	cmp	lr, r0
 800c1c0:	d148      	bne.n	800c254 <arm_mat_trans_f32+0xb0>
 800c1c2:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800c1c6:	009c      	lsls	r4, r3, #2
 800c1c8:	f00e 0e03 	and.w	lr, lr, #3
 800c1cc:	fb08 f904 	mul.w	r9, r8, r4
 800c1d0:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800c1d4:	011d      	lsls	r5, r3, #4
 800c1d6:	00db      	lsls	r3, r3, #3
 800c1d8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800c1dc:	eb07 0a04 	add.w	sl, r7, r4
 800c1e0:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800c1e4:	9201      	str	r2, [sp, #4]
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	463b      	mov	r3, r7
 800c1ea:	f1b8 0f00 	cmp.w	r8, #0
 800c1ee:	d01d      	beq.n	800c22c <arm_mat_trans_f32+0x88>
 800c1f0:	9900      	ldr	r1, [sp, #0]
 800c1f2:	f10c 0210 	add.w	r2, ip, #16
 800c1f6:	4439      	add	r1, r7
 800c1f8:	4640      	mov	r0, r8
 800c1fa:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800c1fe:	601e      	str	r6, [r3, #0]
 800c200:	ed52 7a03 	vldr	s15, [r2, #-12]
 800c204:	191e      	adds	r6, r3, r4
 800c206:	edc6 7a00 	vstr	s15, [r6]
 800c20a:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800c20e:	600e      	str	r6, [r1, #0]
 800c210:	ed52 7a01 	vldr	s15, [r2, #-4]
 800c214:	190e      	adds	r6, r1, r4
 800c216:	3801      	subs	r0, #1
 800c218:	442b      	add	r3, r5
 800c21a:	f102 0210 	add.w	r2, r2, #16
 800c21e:	edc6 7a00 	vstr	s15, [r6]
 800c222:	4429      	add	r1, r5
 800c224:	d1e9      	bne.n	800c1fa <arm_mat_trans_f32+0x56>
 800c226:	44dc      	add	ip, fp
 800c228:	eb09 0307 	add.w	r3, r9, r7
 800c22c:	f1be 0f00 	cmp.w	lr, #0
 800c230:	d009      	beq.n	800c246 <arm_mat_trans_f32+0xa2>
 800c232:	4672      	mov	r2, lr
 800c234:	4661      	mov	r1, ip
 800c236:	f851 0b04 	ldr.w	r0, [r1], #4
 800c23a:	6018      	str	r0, [r3, #0]
 800c23c:	3a01      	subs	r2, #1
 800c23e:	4423      	add	r3, r4
 800c240:	d1f9      	bne.n	800c236 <arm_mat_trans_f32+0x92>
 800c242:	9b01      	ldr	r3, [sp, #4]
 800c244:	449c      	add	ip, r3
 800c246:	3704      	adds	r7, #4
 800c248:	4557      	cmp	r7, sl
 800c24a:	d1cd      	bne.n	800c1e8 <arm_mat_trans_f32+0x44>
 800c24c:	2000      	movs	r0, #0
 800c24e:	b003      	add	sp, #12
 800c250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c254:	f06f 0002 	mvn.w	r0, #2
 800c258:	e7f9      	b.n	800c24e <arm_mat_trans_f32+0xaa>
 800c25a:	bf00      	nop

0800c25c <arm_mat_sub_f32>:
 800c25c:	b4f0      	push	{r4, r5, r6, r7}
 800c25e:	e9d1 4700 	ldrd	r4, r7, [r1]
 800c262:	6803      	ldr	r3, [r0, #0]
 800c264:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c268:	6856      	ldr	r6, [r2, #4]
 800c26a:	42a3      	cmp	r3, r4
 800c26c:	d15d      	bne.n	800c32a <arm_mat_sub_f32+0xce>
 800c26e:	6812      	ldr	r2, [r2, #0]
 800c270:	4293      	cmp	r3, r2
 800c272:	d15a      	bne.n	800c32a <arm_mat_sub_f32+0xce>
 800c274:	8803      	ldrh	r3, [r0, #0]
 800c276:	8844      	ldrh	r4, [r0, #2]
 800c278:	fb04 f403 	mul.w	r4, r4, r3
 800c27c:	08a5      	lsrs	r5, r4, #2
 800c27e:	d032      	beq.n	800c2e6 <arm_mat_sub_f32+0x8a>
 800c280:	f10c 0110 	add.w	r1, ip, #16
 800c284:	f107 0210 	add.w	r2, r7, #16
 800c288:	f106 0310 	add.w	r3, r6, #16
 800c28c:	4628      	mov	r0, r5
 800c28e:	ed12 7a04 	vldr	s14, [r2, #-16]
 800c292:	ed51 7a04 	vldr	s15, [r1, #-16]
 800c296:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c29a:	3801      	subs	r0, #1
 800c29c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800c2a0:	ed12 7a03 	vldr	s14, [r2, #-12]
 800c2a4:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c2a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2ac:	f101 0110 	add.w	r1, r1, #16
 800c2b0:	ed43 7a03 	vstr	s15, [r3, #-12]
 800c2b4:	ed12 7a02 	vldr	s14, [r2, #-8]
 800c2b8:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800c2bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2c0:	f102 0210 	add.w	r2, r2, #16
 800c2c4:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c2c8:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800c2cc:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800c2d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2d4:	f103 0310 	add.w	r3, r3, #16
 800c2d8:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800c2dc:	d1d7      	bne.n	800c28e <arm_mat_sub_f32+0x32>
 800c2de:	012b      	lsls	r3, r5, #4
 800c2e0:	449c      	add	ip, r3
 800c2e2:	441f      	add	r7, r3
 800c2e4:	441e      	add	r6, r3
 800c2e6:	f014 0403 	ands.w	r4, r4, #3
 800c2ea:	d01b      	beq.n	800c324 <arm_mat_sub_f32+0xc8>
 800c2ec:	eddc 7a00 	vldr	s15, [ip]
 800c2f0:	ed97 7a00 	vldr	s14, [r7]
 800c2f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2f8:	3c01      	subs	r4, #1
 800c2fa:	edc6 7a00 	vstr	s15, [r6]
 800c2fe:	d011      	beq.n	800c324 <arm_mat_sub_f32+0xc8>
 800c300:	eddc 7a01 	vldr	s15, [ip, #4]
 800c304:	ed97 7a01 	vldr	s14, [r7, #4]
 800c308:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c30c:	2c01      	cmp	r4, #1
 800c30e:	edc6 7a01 	vstr	s15, [r6, #4]
 800c312:	d007      	beq.n	800c324 <arm_mat_sub_f32+0xc8>
 800c314:	eddc 7a02 	vldr	s15, [ip, #8]
 800c318:	ed97 7a02 	vldr	s14, [r7, #8]
 800c31c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c320:	edc6 7a02 	vstr	s15, [r6, #8]
 800c324:	2000      	movs	r0, #0
 800c326:	bcf0      	pop	{r4, r5, r6, r7}
 800c328:	4770      	bx	lr
 800c32a:	f06f 0002 	mvn.w	r0, #2
 800c32e:	e7fa      	b.n	800c326 <arm_mat_sub_f32+0xca>

0800c330 <arm_mat_mult_f32>:
 800c330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c334:	8845      	ldrh	r5, [r0, #2]
 800c336:	880b      	ldrh	r3, [r1, #0]
 800c338:	8806      	ldrh	r6, [r0, #0]
 800c33a:	6847      	ldr	r7, [r0, #4]
 800c33c:	6854      	ldr	r4, [r2, #4]
 800c33e:	6848      	ldr	r0, [r1, #4]
 800c340:	b08b      	sub	sp, #44	; 0x2c
 800c342:	42ab      	cmp	r3, r5
 800c344:	9109      	str	r1, [sp, #36]	; 0x24
 800c346:	9604      	str	r6, [sp, #16]
 800c348:	8849      	ldrh	r1, [r1, #2]
 800c34a:	f040 808a 	bne.w	800c462 <arm_mat_mult_f32+0x132>
 800c34e:	8815      	ldrh	r5, [r2, #0]
 800c350:	42b5      	cmp	r5, r6
 800c352:	f040 8086 	bne.w	800c462 <arm_mat_mult_f32+0x132>
 800c356:	8852      	ldrh	r2, [r2, #2]
 800c358:	428a      	cmp	r2, r1
 800c35a:	f040 8082 	bne.w	800c462 <arm_mat_mult_f32+0x132>
 800c35e:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800c362:	1d01      	adds	r1, r0, #4
 800c364:	0116      	lsls	r6, r2, #4
 800c366:	9108      	str	r1, [sp, #32]
 800c368:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800c36c:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800c370:	9101      	str	r1, [sp, #4]
 800c372:	fb06 f108 	mul.w	r1, r6, r8
 800c376:	0095      	lsls	r5, r2, #2
 800c378:	9103      	str	r1, [sp, #12]
 800c37a:	00d2      	lsls	r2, r2, #3
 800c37c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800c380:	f003 0903 	and.w	r9, r3, #3
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	f107 0b10 	add.w	fp, r7, #16
 800c38a:	eb04 0a05 	add.w	sl, r4, r5
 800c38e:	9107      	str	r1, [sp, #28]
 800c390:	9202      	str	r2, [sp, #8]
 800c392:	9306      	str	r3, [sp, #24]
 800c394:	f1ab 0310 	sub.w	r3, fp, #16
 800c398:	9305      	str	r3, [sp, #20]
 800c39a:	9b07      	ldr	r3, [sp, #28]
 800c39c:	f8dd e020 	ldr.w	lr, [sp, #32]
 800c3a0:	eb03 0c0a 	add.w	ip, r3, sl
 800c3a4:	eddf 7a31 	vldr	s15, [pc, #196]	; 800c46c <arm_mat_mult_f32+0x13c>
 800c3a8:	f1b8 0f00 	cmp.w	r8, #0
 800c3ac:	d053      	beq.n	800c456 <arm_mat_mult_f32+0x126>
 800c3ae:	9b02      	ldr	r3, [sp, #8]
 800c3b0:	4644      	mov	r4, r8
 800c3b2:	18c1      	adds	r1, r0, r3
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	465b      	mov	r3, fp
 800c3b8:	ed92 6a00 	vldr	s12, [r2]
 800c3bc:	ed13 7a04 	vldr	s14, [r3, #-16]
 800c3c0:	ed53 4a03 	vldr	s9, [r3, #-12]
 800c3c4:	ed53 6a02 	vldr	s13, [r3, #-8]
 800c3c8:	ed91 5a00 	vldr	s10, [r1]
 800c3cc:	ed53 5a01 	vldr	s11, [r3, #-4]
 800c3d0:	1957      	adds	r7, r2, r5
 800c3d2:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c3d6:	ed97 6a00 	vldr	s12, [r7]
 800c3da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3de:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c3e2:	194f      	adds	r7, r1, r5
 800c3e4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c3e8:	ee26 7a85 	vmul.f32	s14, s13, s10
 800c3ec:	edd7 7a00 	vldr	s15, [r7]
 800c3f0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c3f4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c3f8:	3c01      	subs	r4, #1
 800c3fa:	4432      	add	r2, r6
 800c3fc:	4431      	add	r1, r6
 800c3fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c402:	f103 0310 	add.w	r3, r3, #16
 800c406:	d1d7      	bne.n	800c3b8 <arm_mat_mult_f32+0x88>
 800c408:	9b03      	ldr	r3, [sp, #12]
 800c40a:	9a01      	ldr	r2, [sp, #4]
 800c40c:	4418      	add	r0, r3
 800c40e:	f1b9 0f00 	cmp.w	r9, #0
 800c412:	d00b      	beq.n	800c42c <arm_mat_mult_f32+0xfc>
 800c414:	464b      	mov	r3, r9
 800c416:	edd0 6a00 	vldr	s13, [r0]
 800c41a:	ecb2 7a01 	vldmia	r2!, {s14}
 800c41e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c422:	3b01      	subs	r3, #1
 800c424:	4428      	add	r0, r5
 800c426:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c42a:	d1f4      	bne.n	800c416 <arm_mat_mult_f32+0xe6>
 800c42c:	ecec 7a01 	vstmia	ip!, {s15}
 800c430:	45d4      	cmp	ip, sl
 800c432:	4670      	mov	r0, lr
 800c434:	f10e 0e04 	add.w	lr, lr, #4
 800c438:	d1b4      	bne.n	800c3a4 <arm_mat_mult_f32+0x74>
 800c43a:	9a01      	ldr	r2, [sp, #4]
 800c43c:	9b06      	ldr	r3, [sp, #24]
 800c43e:	4611      	mov	r1, r2
 800c440:	4419      	add	r1, r3
 800c442:	449b      	add	fp, r3
 800c444:	9b04      	ldr	r3, [sp, #16]
 800c446:	9101      	str	r1, [sp, #4]
 800c448:	3b01      	subs	r3, #1
 800c44a:	44aa      	add	sl, r5
 800c44c:	9304      	str	r3, [sp, #16]
 800c44e:	d004      	beq.n	800c45a <arm_mat_mult_f32+0x12a>
 800c450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c452:	6858      	ldr	r0, [r3, #4]
 800c454:	e79e      	b.n	800c394 <arm_mat_mult_f32+0x64>
 800c456:	9a05      	ldr	r2, [sp, #20]
 800c458:	e7d9      	b.n	800c40e <arm_mat_mult_f32+0xde>
 800c45a:	4618      	mov	r0, r3
 800c45c:	b00b      	add	sp, #44	; 0x2c
 800c45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c462:	f06f 0002 	mvn.w	r0, #2
 800c466:	b00b      	add	sp, #44	; 0x2c
 800c468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c46c:	00000000 	.word	0x00000000

0800c470 <arm_mat_inverse_f32>:
 800c470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c474:	8843      	ldrh	r3, [r0, #2]
 800c476:	8804      	ldrh	r4, [r0, #0]
 800c478:	684e      	ldr	r6, [r1, #4]
 800c47a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800c47e:	b087      	sub	sp, #28
 800c480:	429c      	cmp	r4, r3
 800c482:	9301      	str	r3, [sp, #4]
 800c484:	9603      	str	r6, [sp, #12]
 800c486:	f040 80ea 	bne.w	800c65e <arm_mat_inverse_f32+0x1ee>
 800c48a:	880a      	ldrh	r2, [r1, #0]
 800c48c:	884b      	ldrh	r3, [r1, #2]
 800c48e:	4293      	cmp	r3, r2
 800c490:	f040 80e5 	bne.w	800c65e <arm_mat_inverse_f32+0x1ee>
 800c494:	429c      	cmp	r4, r3
 800c496:	f040 80e2 	bne.w	800c65e <arm_mat_inverse_f32+0x1ee>
 800c49a:	9005      	str	r0, [sp, #20]
 800c49c:	b30c      	cbz	r4, 800c4e2 <arm_mat_inverse_f32+0x72>
 800c49e:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800c4a2:	1e67      	subs	r7, r4, #1
 800c4a4:	f846 bb04 	str.w	fp, [r6], #4
 800c4a8:	d01b      	beq.n	800c4e2 <arm_mat_inverse_f32+0x72>
 800c4aa:	f04f 0801 	mov.w	r8, #1
 800c4ae:	00ba      	lsls	r2, r7, #2
 800c4b0:	eb06 0a02 	add.w	sl, r6, r2
 800c4b4:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	2100      	movs	r1, #0
 800c4bc:	f000 f97e 	bl	800c7bc <memset>
 800c4c0:	eb0a 0605 	add.w	r6, sl, r5
 800c4c4:	462a      	mov	r2, r5
 800c4c6:	2100      	movs	r1, #0
 800c4c8:	4650      	mov	r0, sl
 800c4ca:	f1b8 0f00 	cmp.w	r8, #0
 800c4ce:	f000 80cb 	beq.w	800c668 <arm_mat_inverse_f32+0x1f8>
 800c4d2:	f000 f973 	bl	800c7bc <memset>
 800c4d6:	3f01      	subs	r7, #1
 800c4d8:	f108 0801 	add.w	r8, r8, #1
 800c4dc:	f846 bb04 	str.w	fp, [r6], #4
 800c4e0:	d1e5      	bne.n	800c4ae <arm_mat_inverse_f32+0x3e>
 800c4e2:	9b01      	ldr	r3, [sp, #4]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	f000 80b5 	beq.w	800c654 <arm_mat_inverse_f32+0x1e4>
 800c4ea:	009d      	lsls	r5, r3, #2
 800c4ec:	eb09 0205 	add.w	r2, r9, r5
 800c4f0:	46cc      	mov	ip, r9
 800c4f2:	9202      	str	r2, [sp, #8]
 800c4f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c4f8:	1d2a      	adds	r2, r5, #4
 800c4fa:	9204      	str	r2, [sp, #16]
 800c4fc:	462f      	mov	r7, r5
 800c4fe:	469e      	mov	lr, r3
 800c500:	2600      	movs	r6, #0
 800c502:	9b02      	ldr	r3, [sp, #8]
 800c504:	eddc 6a00 	vldr	s13, [ip]
 800c508:	42b4      	cmp	r4, r6
 800c50a:	eba3 0b07 	sub.w	fp, r3, r7
 800c50e:	f000 80a1 	beq.w	800c654 <arm_mat_inverse_f32+0x1e4>
 800c512:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800c678 <arm_mat_inverse_f32+0x208>
 800c516:	4632      	mov	r2, r6
 800c518:	4663      	mov	r3, ip
 800c51a:	e00b      	b.n	800c534 <arm_mat_inverse_f32+0xc4>
 800c51c:	eef4 7a47 	vcmp.f32	s15, s14
 800c520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c524:	f102 0201 	add.w	r2, r2, #1
 800c528:	bfc8      	it	gt
 800c52a:	eeb0 7a67 	vmovgt.f32	s14, s15
 800c52e:	42a2      	cmp	r2, r4
 800c530:	442b      	add	r3, r5
 800c532:	d014      	beq.n	800c55e <arm_mat_inverse_f32+0xee>
 800c534:	edd3 7a00 	vldr	s15, [r3]
 800c538:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c53c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c540:	eeb1 6a67 	vneg.f32	s12, s15
 800c544:	dcea      	bgt.n	800c51c <arm_mat_inverse_f32+0xac>
 800c546:	eeb4 6a47 	vcmp.f32	s12, s14
 800c54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c54e:	f102 0201 	add.w	r2, r2, #1
 800c552:	bfc8      	it	gt
 800c554:	eeb0 7a46 	vmovgt.f32	s14, s12
 800c558:	42a2      	cmp	r2, r4
 800c55a:	442b      	add	r3, r5
 800c55c:	d1ea      	bne.n	800c534 <arm_mat_inverse_f32+0xc4>
 800c55e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c566:	d075      	beq.n	800c654 <arm_mat_inverse_f32+0x1e4>
 800c568:	eef5 6a40 	vcmp.f32	s13, #0.0
 800c56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c570:	d070      	beq.n	800c654 <arm_mat_inverse_f32+0x1e4>
 800c572:	4672      	mov	r2, lr
 800c574:	4663      	mov	r3, ip
 800c576:	ed93 7a00 	vldr	s14, [r3]
 800c57a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c57e:	3a01      	subs	r2, #1
 800c580:	ece3 7a01 	vstmia	r3!, {s15}
 800c584:	d1f7      	bne.n	800c576 <arm_mat_inverse_f32+0x106>
 800c586:	9901      	ldr	r1, [sp, #4]
 800c588:	464b      	mov	r3, r9
 800c58a:	ed93 7a00 	vldr	s14, [r3]
 800c58e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c592:	3901      	subs	r1, #1
 800c594:	ece3 7a01 	vstmia	r3!, {s15}
 800c598:	d1f7      	bne.n	800c58a <arm_mat_inverse_f32+0x11a>
 800c59a:	9803      	ldr	r0, [sp, #12]
 800c59c:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800c5a0:	42b1      	cmp	r1, r6
 800c5a2:	d039      	beq.n	800c618 <arm_mat_inverse_f32+0x1a8>
 800c5a4:	eddb 6a00 	vldr	s13, [fp]
 800c5a8:	465a      	mov	r2, fp
 800c5aa:	4673      	mov	r3, lr
 800c5ac:	46e2      	mov	sl, ip
 800c5ae:	ecba 7a01 	vldmia	sl!, {s14}
 800c5b2:	edd2 7a00 	vldr	s15, [r2]
 800c5b6:	ee26 7a87 	vmul.f32	s14, s13, s14
 800c5ba:	3b01      	subs	r3, #1
 800c5bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5c0:	ece2 7a01 	vstmia	r2!, {s15}
 800c5c4:	d1f3      	bne.n	800c5ae <arm_mat_inverse_f32+0x13e>
 800c5c6:	9b01      	ldr	r3, [sp, #4]
 800c5c8:	44bb      	add	fp, r7
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	46ca      	mov	sl, r9
 800c5ce:	ecba 7a01 	vldmia	sl!, {s14}
 800c5d2:	edd2 7a00 	vldr	s15, [r2]
 800c5d6:	ee26 7a87 	vmul.f32	s14, s13, s14
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5e0:	ece2 7a01 	vstmia	r2!, {s15}
 800c5e4:	d1f3      	bne.n	800c5ce <arm_mat_inverse_f32+0x15e>
 800c5e6:	4428      	add	r0, r5
 800c5e8:	3101      	adds	r1, #1
 800c5ea:	428c      	cmp	r4, r1
 800c5ec:	44c3      	add	fp, r8
 800c5ee:	d1d7      	bne.n	800c5a0 <arm_mat_inverse_f32+0x130>
 800c5f0:	9b04      	ldr	r3, [sp, #16]
 800c5f2:	f1be 0e01 	subs.w	lr, lr, #1
 800c5f6:	f106 0601 	add.w	r6, r6, #1
 800c5fa:	449c      	add	ip, r3
 800c5fc:	f1a7 0704 	sub.w	r7, r7, #4
 800c600:	44a9      	add	r9, r5
 800c602:	f47f af7e 	bne.w	800c502 <arm_mat_inverse_f32+0x92>
 800c606:	eef5 6a40 	vcmp.f32	s13, #0.0
 800c60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c60e:	d006      	beq.n	800c61e <arm_mat_inverse_f32+0x1ae>
 800c610:	2000      	movs	r0, #0
 800c612:	b007      	add	sp, #28
 800c614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c618:	44bb      	add	fp, r7
 800c61a:	4428      	add	r0, r5
 800c61c:	e7e4      	b.n	800c5e8 <arm_mat_inverse_f32+0x178>
 800c61e:	9b05      	ldr	r3, [sp, #20]
 800c620:	9a01      	ldr	r2, [sp, #4]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	edd3 7a00 	vldr	s15, [r3]
 800c628:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c62c:	fb02 f204 	mul.w	r2, r2, r4
 800c630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c634:	4614      	mov	r4, r2
 800c636:	bf08      	it	eq
 800c638:	3304      	addeq	r3, #4
 800c63a:	d007      	beq.n	800c64c <arm_mat_inverse_f32+0x1dc>
 800c63c:	e7e8      	b.n	800c610 <arm_mat_inverse_f32+0x1a0>
 800c63e:	ecf3 7a01 	vldmia	r3!, {s15}
 800c642:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c64a:	d1e1      	bne.n	800c610 <arm_mat_inverse_f32+0x1a0>
 800c64c:	f10e 0e01 	add.w	lr, lr, #1
 800c650:	4574      	cmp	r4, lr
 800c652:	d1f4      	bne.n	800c63e <arm_mat_inverse_f32+0x1ce>
 800c654:	f06f 0004 	mvn.w	r0, #4
 800c658:	b007      	add	sp, #28
 800c65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65e:	f06f 0002 	mvn.w	r0, #2
 800c662:	b007      	add	sp, #28
 800c664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c668:	4656      	mov	r6, sl
 800c66a:	3f01      	subs	r7, #1
 800c66c:	f846 bb04 	str.w	fp, [r6], #4
 800c670:	f47f af1b 	bne.w	800c4aa <arm_mat_inverse_f32+0x3a>
 800c674:	e735      	b.n	800c4e2 <arm_mat_inverse_f32+0x72>
 800c676:	bf00      	nop
 800c678:	00000000 	.word	0x00000000

0800c67c <arm_mat_init_f32>:
 800c67c:	8001      	strh	r1, [r0, #0]
 800c67e:	8042      	strh	r2, [r0, #2]
 800c680:	6043      	str	r3, [r0, #4]
 800c682:	4770      	bx	lr

0800c684 <arm_mat_add_f32>:
 800c684:	b4f0      	push	{r4, r5, r6, r7}
 800c686:	e9d1 4700 	ldrd	r4, r7, [r1]
 800c68a:	6803      	ldr	r3, [r0, #0]
 800c68c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c690:	6856      	ldr	r6, [r2, #4]
 800c692:	42a3      	cmp	r3, r4
 800c694:	d15d      	bne.n	800c752 <arm_mat_add_f32+0xce>
 800c696:	6812      	ldr	r2, [r2, #0]
 800c698:	4293      	cmp	r3, r2
 800c69a:	d15a      	bne.n	800c752 <arm_mat_add_f32+0xce>
 800c69c:	8803      	ldrh	r3, [r0, #0]
 800c69e:	8844      	ldrh	r4, [r0, #2]
 800c6a0:	fb04 f403 	mul.w	r4, r4, r3
 800c6a4:	08a5      	lsrs	r5, r4, #2
 800c6a6:	d032      	beq.n	800c70e <arm_mat_add_f32+0x8a>
 800c6a8:	f10c 0110 	add.w	r1, ip, #16
 800c6ac:	f107 0210 	add.w	r2, r7, #16
 800c6b0:	f106 0310 	add.w	r3, r6, #16
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	ed12 7a04 	vldr	s14, [r2, #-16]
 800c6ba:	ed51 7a04 	vldr	s15, [r1, #-16]
 800c6be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6c2:	3801      	subs	r0, #1
 800c6c4:	ed43 7a04 	vstr	s15, [r3, #-16]
 800c6c8:	ed12 7a03 	vldr	s14, [r2, #-12]
 800c6cc:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c6d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6d4:	f101 0110 	add.w	r1, r1, #16
 800c6d8:	ed43 7a03 	vstr	s15, [r3, #-12]
 800c6dc:	ed12 7a02 	vldr	s14, [r2, #-8]
 800c6e0:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800c6e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6e8:	f102 0210 	add.w	r2, r2, #16
 800c6ec:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c6f0:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800c6f4:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800c6f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6fc:	f103 0310 	add.w	r3, r3, #16
 800c700:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800c704:	d1d7      	bne.n	800c6b6 <arm_mat_add_f32+0x32>
 800c706:	012b      	lsls	r3, r5, #4
 800c708:	449c      	add	ip, r3
 800c70a:	441f      	add	r7, r3
 800c70c:	441e      	add	r6, r3
 800c70e:	f014 0403 	ands.w	r4, r4, #3
 800c712:	d01b      	beq.n	800c74c <arm_mat_add_f32+0xc8>
 800c714:	edd7 7a00 	vldr	s15, [r7]
 800c718:	ed9c 7a00 	vldr	s14, [ip]
 800c71c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c720:	3c01      	subs	r4, #1
 800c722:	edc6 7a00 	vstr	s15, [r6]
 800c726:	d011      	beq.n	800c74c <arm_mat_add_f32+0xc8>
 800c728:	eddc 7a01 	vldr	s15, [ip, #4]
 800c72c:	ed97 7a01 	vldr	s14, [r7, #4]
 800c730:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c734:	2c01      	cmp	r4, #1
 800c736:	edc6 7a01 	vstr	s15, [r6, #4]
 800c73a:	d007      	beq.n	800c74c <arm_mat_add_f32+0xc8>
 800c73c:	eddc 7a02 	vldr	s15, [ip, #8]
 800c740:	ed97 7a02 	vldr	s14, [r7, #8]
 800c744:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c748:	edc6 7a02 	vstr	s15, [r6, #8]
 800c74c:	2000      	movs	r0, #0
 800c74e:	bcf0      	pop	{r4, r5, r6, r7}
 800c750:	4770      	bx	lr
 800c752:	f06f 0002 	mvn.w	r0, #2
 800c756:	e7fa      	b.n	800c74e <arm_mat_add_f32+0xca>

0800c758 <__libc_init_array>:
 800c758:	b570      	push	{r4, r5, r6, lr}
 800c75a:	4d0d      	ldr	r5, [pc, #52]	; (800c790 <__libc_init_array+0x38>)
 800c75c:	4c0d      	ldr	r4, [pc, #52]	; (800c794 <__libc_init_array+0x3c>)
 800c75e:	1b64      	subs	r4, r4, r5
 800c760:	10a4      	asrs	r4, r4, #2
 800c762:	2600      	movs	r6, #0
 800c764:	42a6      	cmp	r6, r4
 800c766:	d109      	bne.n	800c77c <__libc_init_array+0x24>
 800c768:	4d0b      	ldr	r5, [pc, #44]	; (800c798 <__libc_init_array+0x40>)
 800c76a:	4c0c      	ldr	r4, [pc, #48]	; (800c79c <__libc_init_array+0x44>)
 800c76c:	f000 f82e 	bl	800c7cc <_init>
 800c770:	1b64      	subs	r4, r4, r5
 800c772:	10a4      	asrs	r4, r4, #2
 800c774:	2600      	movs	r6, #0
 800c776:	42a6      	cmp	r6, r4
 800c778:	d105      	bne.n	800c786 <__libc_init_array+0x2e>
 800c77a:	bd70      	pop	{r4, r5, r6, pc}
 800c77c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c780:	4798      	blx	r3
 800c782:	3601      	adds	r6, #1
 800c784:	e7ee      	b.n	800c764 <__libc_init_array+0xc>
 800c786:	f855 3b04 	ldr.w	r3, [r5], #4
 800c78a:	4798      	blx	r3
 800c78c:	3601      	adds	r6, #1
 800c78e:	e7f2      	b.n	800c776 <__libc_init_array+0x1e>
 800c790:	0800c80c 	.word	0x0800c80c
 800c794:	0800c80c 	.word	0x0800c80c
 800c798:	0800c80c 	.word	0x0800c80c
 800c79c:	0800c810 	.word	0x0800c810

0800c7a0 <memcpy>:
 800c7a0:	440a      	add	r2, r1
 800c7a2:	4291      	cmp	r1, r2
 800c7a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7a8:	d100      	bne.n	800c7ac <memcpy+0xc>
 800c7aa:	4770      	bx	lr
 800c7ac:	b510      	push	{r4, lr}
 800c7ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7b6:	4291      	cmp	r1, r2
 800c7b8:	d1f9      	bne.n	800c7ae <memcpy+0xe>
 800c7ba:	bd10      	pop	{r4, pc}

0800c7bc <memset>:
 800c7bc:	4402      	add	r2, r0
 800c7be:	4603      	mov	r3, r0
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d100      	bne.n	800c7c6 <memset+0xa>
 800c7c4:	4770      	bx	lr
 800c7c6:	f803 1b01 	strb.w	r1, [r3], #1
 800c7ca:	e7f9      	b.n	800c7c0 <memset+0x4>

0800c7cc <_init>:
 800c7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ce:	bf00      	nop
 800c7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7d2:	bc08      	pop	{r3}
 800c7d4:	469e      	mov	lr, r3
 800c7d6:	4770      	bx	lr

0800c7d8 <_fini>:
 800c7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7da:	bf00      	nop
 800c7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7de:	bc08      	pop	{r3}
 800c7e0:	469e      	mov	lr, r3
 800c7e2:	4770      	bx	lr
