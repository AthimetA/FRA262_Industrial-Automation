
FRAM3re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a384  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800a51c  0800a51c  0001a51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a53c  0800a53c  00020438  2**0
                  CONTENTS
  4 .ARM          00000008  0800a53c  0800a53c  0001a53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a544  0800a544  00020438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a544  0800a544  0001a544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a548  0800a548  0001a548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000438  20000000  0800a54c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  20000438  0800a984  00020438  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000aec  0800a984  00020aec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017699  00000000  00000000  00020468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000306b  00000000  00000000  00037b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0003ab70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  0003bcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001789a  00000000  00000000  0003ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015761  00000000  00000000  0005456a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092fed  00000000  00000000  00069ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000fccb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004950  00000000  00000000  000fcd80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  001016d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000438 	.word	0x20000438
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a504 	.word	0x0800a504

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000043c 	.word	0x2000043c
 80001d4:	0800a504 	.word	0x0800a504

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	f009 fb22 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f503 7040 	add.w	r0, r3, #768	; 0x300
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	f009 fb19 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 2, 3, KalmanVar ->MatC_Data);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f503 7042 	add.w	r0, r3, #776	; 0x308
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	2102      	movs	r1, #2
 8000d90:	f009 fb10 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f503 7044 	add.w	r0, r3, #784	; 0x310
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3348      	adds	r3, #72	; 0x48
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2101      	movs	r1, #1
 8000da2:	f009 fb07 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f503 7046 	add.w	r0, r3, #792	; 0x318
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	334c      	adds	r3, #76	; 0x4c
 8000db0:	2203      	movs	r2, #3
 8000db2:	2103      	movs	r1, #3
 8000db4:	f009 fafe 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 2, 2, KalmanVar ->MatR_Data);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f503 7048 	add.w	r0, r3, #800	; 0x320
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3370      	adds	r3, #112	; 0x70
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	f009 faf5 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f503 704a 	add.w	r0, r3, #808	; 0x328
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3380      	adds	r3, #128	; 0x80
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	f009 faec 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f503 704c 	add.w	r0, r3, #816	; 0x330
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	33a4      	adds	r3, #164	; 0xa4
 8000de6:	2201      	movs	r2, #1
 8000de8:	2103      	movs	r1, #3
 8000dea:	f009 fae3 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f503 704e 	add.w	r0, r3, #824	; 0x338
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	33b0      	adds	r3, #176	; 0xb0
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	f009 fada 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f503 7050 	add.w	r0, r3, #832	; 0x340
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	33bc      	adds	r3, #188	; 0xbc
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	f009 fad1 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f503 7052 	add.w	r0, r3, #840	; 0x348
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	33e0      	adds	r3, #224	; 0xe0
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	2103      	movs	r1, #3
 8000e20:	f009 fac8 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 2, 1, KalmanVar ->MatY_Data);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f503 7054 	add.w	r0, r3, #848	; 0x350
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e30:	2201      	movs	r2, #1
 8000e32:	2102      	movs	r1, #2
 8000e34:	f009 fabe 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 2, 1, KalmanVar ->MatZ_Data);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f503 7056 	add.w	r0, r3, #856	; 0x358
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000e44:	2201      	movs	r2, #1
 8000e46:	2102      	movs	r1, #2
 8000e48:	f009 fab4 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 2, 2, KalmanVar ->MatS_Data);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8000e58:	2202      	movs	r2, #2
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	f009 faaa 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 2, KalmanVar ->MatK_Data);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f503 705a 	add.w	r0, r3, #872	; 0x368
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	2103      	movs	r1, #3
 8000e70:	f009 faa0 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f503 705c 	add.w	r0, r3, #880	; 0x370
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000e80:	2203      	movs	r2, #3
 8000e82:	2103      	movs	r1, #3
 8000e84:	f009 fa96 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f503 705e 	add.w	r0, r3, #888	; 0x378
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000e94:	2203      	movs	r2, #3
 8000e96:	2103      	movs	r1, #3
 8000e98:	f009 fa8c 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f503 7060 	add.w	r0, r3, #896	; 0x380
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	2103      	movs	r1, #3
 8000eac:	f009 fa82 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQ), 3, 3, KalmanVar ->MatGQ_Data);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f503 7062 	add.w	r0, r3, #904	; 0x388
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	f009 fa78 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 2, KalmanVar ->MatCt_Data);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f503 7064 	add.w	r0, r3, #912	; 0x390
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	2103      	movs	r1, #3
 8000ed4:	f009 fa6e 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f503 7068 	add.w	r0, r3, #928	; 0x3a0
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	2103      	movs	r1, #3
 8000ee8:	f009 fa64 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 2, 2, KalmanVar ->MatSinv_Data);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f503 7066 	add.w	r0, r3, #920	; 0x398
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8000ef8:	2202      	movs	r2, #2
 8000efa:	2102      	movs	r1, #2
 8000efc:	f009 fa5a 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 2, 3, KalmanVar ->MatCPk_Data);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f503 706a 	add.w	r0, r3, #936	; 0x3a8
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	2102      	movs	r1, #2
 8000f10:	f009 fa50 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f503 706c 	add.w	r0, r3, #944	; 0x3b0
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000f20:	2203      	movs	r2, #3
 8000f22:	2103      	movs	r1, #3
 8000f24:	f009 fa46 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f503 706e 	add.w	r0, r3, #952	; 0x3b8
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8000f34:	2203      	movs	r2, #3
 8000f36:	2103      	movs	r1, #3
 8000f38:	f009 fa3c 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 2, 1, KalmanVar ->MatCXk_Data);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f503 7070 	add.w	r0, r3, #960	; 0x3c0
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	f009 fa32 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 2, 2, KalmanVar ->MatCPkCt_Data);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f503 7072 	add.w	r0, r3, #968	; 0x3c8
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	2102      	movs	r1, #2
 8000f60:	f009 fa28 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 2, KalmanVar ->MatPkCt_Data);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f503 7074 	add.w	r0, r3, #976	; 0x3d0
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8000f70:	2202      	movs	r2, #2
 8000f72:	2103      	movs	r1, #3
 8000f74:	f009 fa1e 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f503 7076 	add.w	r0, r3, #984	; 0x3d8
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8000f84:	2201      	movs	r2, #1
 8000f86:	2103      	movs	r1, #3
 8000f88:	f009 fa14 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f503 7078 	add.w	r0, r3, #992	; 0x3e0
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000f98:	2203      	movs	r2, #3
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	f009 fa0a 	bl	800a3b4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f503 707a 	add.w	r0, r3, #1000	; 0x3e8
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 8000fac:	2203      	movs	r2, #3
 8000fae:	2103      	movs	r1, #3
 8000fb0:	f009 fa00 	bl	800a3b4 <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f503 723e 	add.w	r2, r3, #760	; 0x2f8
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	f008 ff8a 	bl	8009edc <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f503 724a 	add.w	r2, r3, #808	; 0x328
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	f008 ff80 	bl	8009edc <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f503 7242 	add.w	r2, r3, #776	; 0x308
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4610      	mov	r0, r2
 8000fec:	f008 ff76 	bl	8009edc <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQ));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f503 704a 	add.w	r0, r3, #808	; 0x328
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f503 7146 	add.w	r1, r3, #792	; 0x318
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8001002:	461a      	mov	r2, r3
 8001004:	f009 f830 	bl	800a068 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQ), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f503 7062 	add.w	r0, r3, #904	; 0x388
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f503 7160 	add.w	r1, r3, #896	; 0x380
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 800101a:	461a      	mov	r2, r3
 800101c:	f009 f824 	bl	800a068 <arm_mat_mult_f32>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <KalmanMatrixReset>:

void KalmanMatrixReset(KalmanFilterVar *KalmanVar , float Pvar)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	ed87 0a00 	vstr	s0, [r7]
	for (int index = 0; index < 3; ++index)
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	e013      	b.n	8001062 <KalmanMatrixReset+0x3a>
	{
		KalmanVar ->MatStateLast_Data[index] = 0.0;
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	332c      	adds	r3, #44	; 0x2c
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
		KalmanVar ->MatState_Data[index] = 0.0;
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3328      	adds	r3, #40	; 0x28
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	3304      	adds	r3, #4
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
	for (int index = 0; index < 3; ++index)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3301      	adds	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2b02      	cmp	r3, #2
 8001066:	dde8      	ble.n	800103a <KalmanMatrixReset+0x12>
	}

	KalmanVar ->MatPredict_Data[0] = Pvar;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	KalmanVar ->MatPredictLast_Data[0] = Pvar;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	KalmanVar ->MatPredict_Data[1] = 0.0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	KalmanVar ->MatPredictLast_Data[1] = 0.0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	KalmanVar ->MatPredict_Data[2] = 0.0;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	KalmanVar ->MatPredictLast_Data[2] = 0.0;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	KalmanVar ->MatPredict_Data[3] = 0.0;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	KalmanVar ->MatPredictLast_Data[3] = 0.0;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	KalmanVar ->MatPredict_Data[4] = Pvar;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	KalmanVar ->MatPredictLast_Data[4] = Pvar;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	KalmanVar ->MatPredict_Data[5] = 0.0;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	KalmanVar ->MatPredictLast_Data[5] = 0.0;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

	KalmanVar ->MatPredict_Data[6] = 0.0;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	KalmanVar ->MatPredictLast_Data[6] = 0.0;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	KalmanVar ->MatPredict_Data[7] = 0.0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	KalmanVar ->MatPredictLast_Data[7] = 0.0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	KalmanVar ->MatPredict_Data[8] = Pvar;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	KalmanVar ->MatPredictLast_Data[8] = Pvar;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg,float32_t VelocityDeg)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	ed87 0a02 	vstr	s0, [r7, #8]
 8001128:	edc7 0a01 	vstr	s1, [r7, #4]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f503 714e 	add.w	r1, r3, #824	; 0x338
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f503 734c 	add.w	r3, r3, #816	; 0x330
 800113e:	461a      	mov	r2, r3
 8001140:	f008 ff92 	bl	800a068 <arm_mat_mult_f32>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f503 7152 	add.w	r1, r3, #840	; 0x348
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8001160:	461a      	mov	r2, r3
 8001162:	f008 ff81 	bl	800a068 <arm_mat_mult_f32>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f503 706c 	add.w	r0, r3, #944	; 0x3b0
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f503 715e 	add.w	r1, r3, #888	; 0x378
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8001182:	461a      	mov	r2, r3
 8001184:	f008 ff70 	bl	800a068 <arm_mat_mult_f32>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f503 706e 	add.w	r0, r3, #952	; 0x3b8
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f503 7168 	add.w	r1, r3, #928	; 0x3a0
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80011a4:	461a      	mov	r2, r3
 80011a6:	f009 f909 	bl	800a3bc <arm_mat_add_f32>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	KalmanVar -> MatZ_Data[1] = VelocityDeg; // Sensor Input
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f503 7042 	add.w	r0, r3, #776	; 0x308
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f503 714c 	add.w	r1, r3, #816	; 0x330
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 80011d6:	461a      	mov	r2, r3
 80011d8:	f008 ff46 	bl	800a068 <arm_mat_mult_f32>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f503 7056 	add.w	r0, r3, #856	; 0x358
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f503 7170 	add.w	r1, r3, #960	; 0x3c0
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80011f8:	461a      	mov	r2, r3
 80011fa:	f008 fecb 	bl	8009f94 <arm_mat_sub_f32>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f503 7042 	add.w	r0, r3, #776	; 0x308
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f503 7150 	add.w	r1, r3, #832	; 0x340
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 800121a:	461a      	mov	r2, r3
 800121c:	f008 ff24 	bl	800a068 <arm_mat_mult_f32>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f503 706a 	add.w	r0, r3, #936	; 0x3a8
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f503 7164 	add.w	r1, r3, #912	; 0x390
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800123c:	461a      	mov	r2, r3
 800123e:	f008 ff13 	bl	800a068 <arm_mat_mult_f32>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f503 7072 	add.w	r0, r3, #968	; 0x3c8
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f503 7148 	add.w	r1, r3, #800	; 0x320
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800125e:	461a      	mov	r2, r3
 8001260:	f009 f8ac 	bl	800a3bc <arm_mat_add_f32>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f503 7258 	add.w	r2, r3, #864	; 0x360
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f503 7366 	add.w	r3, r3, #920	; 0x398
 800127a:	4619      	mov	r1, r3
 800127c:	4610      	mov	r0, r2
 800127e:	f008 ff93 	bl	800a1a8 <arm_mat_inverse_f32>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f503 7050 	add.w	r0, r3, #832	; 0x340
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f503 7164 	add.w	r1, r3, #912	; 0x390
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800129e:	461a      	mov	r2, r3
 80012a0:	f008 fee2 	bl	800a068 <arm_mat_mult_f32>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f503 7074 	add.w	r0, r3, #976	; 0x3d0
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f503 7166 	add.w	r1, r3, #920	; 0x398
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f503 735a 	add.w	r3, r3, #872	; 0x368
 80012c0:	461a      	mov	r2, r3
 80012c2:	f008 fed1 	bl	800a068 <arm_mat_mult_f32>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f503 705a 	add.w	r0, r3, #872	; 0x368
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f503 7154 	add.w	r1, r3, #848	; 0x350
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 80012e2:	461a      	mov	r2, r3
 80012e4:	f008 fec0 	bl	800a068 <arm_mat_mult_f32>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f503 7076 	add.w	r0, r3, #984	; 0x3d8
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f503 714c 	add.w	r1, r3, #816	; 0x330
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8001304:	461a      	mov	r2, r3
 8001306:	f009 f859 	bl	800a3bc <arm_mat_add_f32>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f503 705a 	add.w	r0, r3, #872	; 0x368
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f503 7142 	add.w	r1, r3, #776	; 0x308
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8001326:	461a      	mov	r2, r3
 8001328:	f008 fe9e 	bl	800a068 <arm_mat_mult_f32>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f503 705c 	add.w	r0, r3, #880	; 0x370
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001348:	461a      	mov	r2, r3
 800134a:	f008 fe23 	bl	8009f94 <arm_mat_sub_f32>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f503 707a 	add.w	r0, r3, #1000	; 0x3e8
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f503 7150 	add.w	r1, r3, #832	; 0x340
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800136a:	461a      	mov	r2, r3
 800136c:	f008 fe7c 	bl	800a068 <arm_mat_mult_f32>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <PIDAController_Init>:

#define PID_LIM_MIN_INT -10000.0f
#define PID_LIM_MAX_INT  10000.0f

void PIDAController_Init(PIDAController *pid)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	pid->Last1Error = 0.0f;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
	pid->Last2Error = 0.0f;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	625a      	str	r2, [r3, #36]	; 0x24

	pid->differentiatorOutput = 0.0f;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
	pid->integratorOutput = 0.0f;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
	pid->proportionalOutput = 0.0f;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	61da      	str	r2, [r3, #28]

	pid->ControllerOut = 0.0f;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
	pid->ControllerLastOut = 0.0f;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c

	pid->OutputMax = PID_LIM_MAX_INT;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <PIDAController_Init+0x58>)
 80013c8:	611a      	str	r2, [r3, #16]
	pid->OutputMin = PID_LIM_MIN_INT;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <PIDAController_Init+0x5c>)
 80013ce:	60da      	str	r2, [r3, #12]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	461c4000 	.word	0x461c4000
 80013e0:	c61c4000 	.word	0xc61c4000

080013e4 <Robotinit>:


#include "Trajectory.h"

void Robotinit(RobotManagement *Robot)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	  Robot -> Position = 0.0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
	  Robot -> Velocity = 0.0;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
	  Robot -> CurrentStation = 0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	811a      	strh	r2, [r3, #8]
	  Robot -> GoalPositon = 0.0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
	  Robot -> HomePositon = 0.0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
	  Robot -> QX = 0.0;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
	  Robot -> QV = 0.0;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
	  Robot -> QVMax = 0.0;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	621a      	str	r2, [r3, #32]

	  Robot -> flagSethome = 0;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  Robot -> flagStartTime = 0;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  Robot -> RunningFlag = 0;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	  Robot -> MotorIsOn = 0;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <TrajectorInit>:

void TrajectorInit(TrajectoryG *traject)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
	arm_mat_init_f32(&(traject ->MatTime), 6, 6, traject ->MatTime_Data);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f503 7004 	add.w	r0, r3, #528	; 0x210
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2206      	movs	r2, #6
 8001468:	2106      	movs	r1, #6
 800146a:	f008 ffa3 	bl	800a3b4 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatTimeINV), 6, 6, traject ->MatTimeINV_Data);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f503 7006 	add.w	r0, r3, #536	; 0x218
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3390      	adds	r3, #144	; 0x90
 8001478:	2206      	movs	r2, #6
 800147a:	2106      	movs	r1, #6
 800147c:	f008 ff9a 	bl	800a3b4 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatCondition), 6, 1, traject ->MatCondition_Data);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f503 7008 	add.w	r0, r3, #544	; 0x220
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800148c:	2201      	movs	r2, #1
 800148e:	2106      	movs	r1, #6
 8001490:	f008 ff90 	bl	800a3b4 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatA), 6, 1, traject ->MatTA_Data);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f503 700a 	add.w	r0, r3, #552	; 0x228
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80014a0:	2201      	movs	r2, #1
 80014a2:	2106      	movs	r1, #6
 80014a4:	f008 ff86 	bl	800a3b4 <arm_mat_init_f32>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <AbsVal>:
{
	Robot -> HomePositon = homePoint;
}

float AbsVal(float number)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 80014ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80014be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	d50e      	bpl.n	80014e6 <AbsVal+0x36>
  {
    return number*-1.0;
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7fe ffe9 	bl	80004a0 <__aeabi_f2d>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff fa6d 	bl	80009b4 <__aeabi_d2f>
 80014da:	4603      	mov	r3, r0
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eef1 7a67 	vneg.f32	s15, s15
 80014e4:	e001      	b.n	80014ea <AbsVal+0x3a>
  }
  else
  {
    return number;
 80014e6:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 80014ea:	eeb0 0a67 	vmov.f32	s0, s15
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	0000      	movs	r0, r0
	...

080014f8 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal, float Veloinput){
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	ed87 0a02 	vstr	s0, [r7, #8]
 8001504:	edc7 0a01 	vstr	s1, [r7, #4]
 8001508:	ed87 1a00 	vstr	s2, [r7]

	traject -> Qin = Qinitial;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	traject -> Qfinal = Qfinal;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	// Set initial = 0;
	traject -> QRelative = traject -> Qfinal - traject -> Qin;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	ed93 7a7c 	vldr	s14, [r3, #496]	; 0x1f0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	edd3 7a7a 	vldr	s15, [r3, #488]	; 0x1e8
 8001528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	edc3 7a7b 	vstr	s15, [r3, #492]	; 0x1ec

	// Set Vmax Amax Jmax
	traject -> Vmax = 0.0;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	traject -> Amax = 21.77;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4a17      	ldr	r2, [pc, #92]	; (800159c <CoefficientAndTimeCalculation+0xa4>)
 8001540:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	traject -> Jmax = 114.59 ;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4a16      	ldr	r2, [pc, #88]	; (80015a0 <CoefficientAndTimeCalculation+0xa8>)
 8001548:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	float gain = 0.0;
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
	if(traject -> QRelative < 0.0)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8001558:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001560:	d502      	bpl.n	8001568 <CoefficientAndTimeCalculation+0x70>
	{
		gain = -1.0;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <CoefficientAndTimeCalculation+0xac>)
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e002      	b.n	800156e <CoefficientAndTimeCalculation+0x76>
	}
	else
	{
		gain = 1.0;
 8001568:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800156c:	617b      	str	r3, [r7, #20]
	}
	// Find Speed limit
	float DistanceABS = AbsVal(traject -> QRelative);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8001574:	eeb0 0a67 	vmov.f32	s0, s15
 8001578:	f7ff ff9a 	bl	80014b0 <AbsVal>
 800157c:	ed87 0a04 	vstr	s0, [r7, #16]

	if(DistanceABS >= 130)
 8001580:	edd7 7a04 	vldr	s15, [r7, #16]
 8001584:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80015a8 <CoefficientAndTimeCalculation+0xb0>
 8001588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001590:	db0e      	blt.n	80015b0 <CoefficientAndTimeCalculation+0xb8>
	{
//		traject -> Vmax = 60;
		traject -> Vmax = 51;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4a05      	ldr	r2, [pc, #20]	; (80015ac <CoefficientAndTimeCalculation+0xb4>)
 8001596:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800159a:	e07a      	b.n	8001692 <CoefficientAndTimeCalculation+0x19a>
 800159c:	41ae28f6 	.word	0x41ae28f6
 80015a0:	42e52e14 	.word	0x42e52e14
 80015a4:	bf800000 	.word	0xbf800000
 80015a8:	43020000 	.word	0x43020000
 80015ac:	424c0000 	.word	0x424c0000
	}
	else
	{
//		traject -> Vmax = (-0.0000003*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00009*(DistanceABS*DistanceABS*DistanceABS))-(0.0115*(DistanceABS*DistanceABS))+(0.995*DistanceABS)+7.1259;
		traject -> Vmax = (-0.0000002*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00007*(DistanceABS*DistanceABS*DistanceABS))-(0.0092*(DistanceABS*DistanceABS))+(0.8419*DistanceABS)+4.8492;
 80015b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015b4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80015bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c8:	ee17 0a90 	vmov	r0, s15
 80015cc:	f7fe ff68 	bl	80004a0 <__aeabi_f2d>
 80015d0:	f20f 5380 	addw	r3, pc, #1408	; 0x580
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7fe ffba 	bl	8000550 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4614      	mov	r4, r2
 80015e2:	461d      	mov	r5, r3
 80015e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80015e8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80015f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f4:	ee17 0a90 	vmov	r0, s15
 80015f8:	f7fe ff52 	bl	80004a0 <__aeabi_f2d>
 80015fc:	f20f 535c 	addw	r3, pc, #1372	; 0x55c
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7fe ffa4 	bl	8000550 <__aeabi_dmul>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4620      	mov	r0, r4
 800160e:	4629      	mov	r1, r5
 8001610:	f7fe fde8 	bl	80001e4 <__adddf3>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4614      	mov	r4, r2
 800161a:	461d      	mov	r5, r3
 800161c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001620:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001624:	ee17 0a90 	vmov	r0, s15
 8001628:	f7fe ff3a 	bl	80004a0 <__aeabi_f2d>
 800162c:	f20f 5334 	addw	r3, pc, #1332	; 0x534
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7fe ff8c 	bl	8000550 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4620      	mov	r0, r4
 800163e:	4629      	mov	r1, r5
 8001640:	f7fe fdce 	bl	80001e0 <__aeabi_dsub>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4614      	mov	r4, r2
 800164a:	461d      	mov	r5, r3
 800164c:	6938      	ldr	r0, [r7, #16]
 800164e:	f7fe ff27 	bl	80004a0 <__aeabi_f2d>
 8001652:	f20f 5318 	addw	r3, pc, #1304	; 0x518
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7fe ff79 	bl	8000550 <__aeabi_dmul>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4620      	mov	r0, r4
 8001664:	4629      	mov	r1, r5
 8001666:	f7fe fdbd 	bl	80001e4 <__adddf3>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	f20f 5300 	addw	r3, pc, #1280	; 0x500
 8001676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167a:	f7fe fdb3 	bl	80001e4 <__adddf3>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff f995 	bl	80009b4 <__aeabi_d2f>
 800168a:	4602      	mov	r2, r0
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}

	if(traject -> Vmax > Veloinput)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8001698:	ed97 7a00 	vldr	s14, [r7]
 800169c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a4:	d503      	bpl.n	80016ae <CoefficientAndTimeCalculation+0x1b6>
	{
		traject -> Vmax = Veloinput;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  traject -> Vmax *gain;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	ed93 7a56 	vldr	s14, [r3, #344]	; 0x158
 80016b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
	traject -> Amax =  traject -> Amax *gain;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 80016c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
	traject -> Jmax =  traject -> Jmax *gain;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 80016dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154

	// Calculate time
	traject -> TimeInit = 0.0;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	traject -> TimeFinal = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8001700:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001710:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001714:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	ed93 6a7b 	vldr	s12, [r3, #492]	; 0x1ec
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	edd3 6a56 	vldr	s13, [r3, #344]	; 0x158
 8001724:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	edc3 7a83 	vstr	s15, [r3, #524]	; 0x20c

	traject -> MatTime_Data[0] = 1.0;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001738:	601a      	str	r2, [r3, #0]
	traject -> MatTime_Data[1] = traject -> TimeInit;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	605a      	str	r2, [r3, #4]
	traject -> MatTime_Data[2] = traject -> TimeInit*traject -> TimeInit;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	edc3 7a02 	vstr	s15, [r3, #8]
	traject -> MatTime_Data[3] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001766:	ee27 7a27 	vmul.f32	s14, s14, s15
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	edc3 7a03 	vstr	s15, [r3, #12]
	traject -> MatTime_Data[4] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001786:	ee27 7a27 	vmul.f32	s14, s14, s15
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001790:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 800179a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	edc3 7a04 	vstr	s15, [r3, #16]
	traject -> MatTime_Data[5] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80017b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80017ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80017c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80017ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	edc3 7a05 	vstr	s15, [r3, #20]
	traject -> MatTime_Data[6] = 0.0;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
	traject -> MatTime_Data[7] = 1.0;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017e6:	61da      	str	r2, [r3, #28]
	traject -> MatTime_Data[8] = 2.0*traject -> TimeInit;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80017ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	edc3 7a08 	vstr	s15, [r3, #32]
	traject -> MatTime_Data[9] = 3.0*traject -> TimeInit*traject -> TimeInit;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe4e 	bl	80004a0 <__aeabi_f2d>
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	4bcd      	ldr	r3, [pc, #820]	; (8001b40 <CoefficientAndTimeCalculation+0x648>)
 800180a:	f7fe fea1 	bl	8000550 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4614      	mov	r4, r2
 8001814:	461d      	mov	r5, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe3f 	bl	80004a0 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4620      	mov	r0, r4
 8001828:	4629      	mov	r1, r5
 800182a:	f7fe fe91 	bl	8000550 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f7ff f8bd 	bl	80009b4 <__aeabi_d2f>
 800183a:	4602      	mov	r2, r0
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	625a      	str	r2, [r3, #36]	; 0x24
	traject -> MatTime_Data[10] = 4.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fe2a 	bl	80004a0 <__aeabi_f2d>
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	4bbc      	ldr	r3, [pc, #752]	; (8001b44 <CoefficientAndTimeCalculation+0x64c>)
 8001852:	f7fe fe7d 	bl	8000550 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4614      	mov	r4, r2
 800185c:	461d      	mov	r5, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe1b 	bl	80004a0 <__aeabi_f2d>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4620      	mov	r0, r4
 8001870:	4629      	mov	r1, r5
 8001872:	f7fe fe6d 	bl	8000550 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4614      	mov	r4, r2
 800187c:	461d      	mov	r5, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe0b 	bl	80004a0 <__aeabi_f2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4620      	mov	r0, r4
 8001890:	4629      	mov	r1, r5
 8001892:	f7fe fe5d 	bl	8000550 <__aeabi_dmul>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	f7ff f889 	bl	80009b4 <__aeabi_d2f>
 80018a2:	4602      	mov	r2, r0
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
	traject -> MatTime_Data[11] = 5.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fdf6 	bl	80004a0 <__aeabi_f2d>
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	4ba3      	ldr	r3, [pc, #652]	; (8001b48 <CoefficientAndTimeCalculation+0x650>)
 80018ba:	f7fe fe49 	bl	8000550 <__aeabi_dmul>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4614      	mov	r4, r2
 80018c4:	461d      	mov	r5, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fde7 	bl	80004a0 <__aeabi_f2d>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4620      	mov	r0, r4
 80018d8:	4629      	mov	r1, r5
 80018da:	f7fe fe39 	bl	8000550 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4614      	mov	r4, r2
 80018e4:	461d      	mov	r5, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fdd7 	bl	80004a0 <__aeabi_f2d>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4620      	mov	r0, r4
 80018f8:	4629      	mov	r1, r5
 80018fa:	f7fe fe29 	bl	8000550 <__aeabi_dmul>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4614      	mov	r4, r2
 8001904:	461d      	mov	r5, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fdc7 	bl	80004a0 <__aeabi_f2d>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4620      	mov	r0, r4
 8001918:	4629      	mov	r1, r5
 800191a:	f7fe fe19 	bl	8000550 <__aeabi_dmul>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f7ff f845 	bl	80009b4 <__aeabi_d2f>
 800192a:	4602      	mov	r2, r0
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
	traject -> MatTime_Data[12] = 0.0;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	631a      	str	r2, [r3, #48]	; 0x30
	traject -> MatTime_Data[13] = 0.0;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	635a      	str	r2, [r3, #52]	; 0x34
	traject -> MatTime_Data[14] = 2.0;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001946:	639a      	str	r2, [r3, #56]	; 0x38
	traject -> MatTime_Data[15] = 6.0*traject -> TimeInit;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 800194e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	traject -> MatTime_Data[16] = 12.0*traject -> TimeInit*traject -> TimeInit;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fd9c 	bl	80004a0 <__aeabi_f2d>
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b77      	ldr	r3, [pc, #476]	; (8001b4c <CoefficientAndTimeCalculation+0x654>)
 800196e:	f7fe fdef 	bl	8000550 <__aeabi_dmul>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4614      	mov	r4, r2
 8001978:	461d      	mov	r5, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fd8d 	bl	80004a0 <__aeabi_f2d>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4620      	mov	r0, r4
 800198c:	4629      	mov	r1, r5
 800198e:	f7fe fddf 	bl	8000550 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	f7ff f80b 	bl	80009b4 <__aeabi_d2f>
 800199e:	4602      	mov	r2, r0
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	641a      	str	r2, [r3, #64]	; 0x40
	traject -> MatTime_Data[17] = 20.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fd78 	bl	80004a0 <__aeabi_f2d>
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	4b66      	ldr	r3, [pc, #408]	; (8001b50 <CoefficientAndTimeCalculation+0x658>)
 80019b6:	f7fe fdcb 	bl	8000550 <__aeabi_dmul>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4614      	mov	r4, r2
 80019c0:	461d      	mov	r5, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fd69 	bl	80004a0 <__aeabi_f2d>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4620      	mov	r0, r4
 80019d4:	4629      	mov	r1, r5
 80019d6:	f7fe fdbb 	bl	8000550 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4614      	mov	r4, r2
 80019e0:	461d      	mov	r5, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fd59 	bl	80004a0 <__aeabi_f2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4620      	mov	r0, r4
 80019f4:	4629      	mov	r1, r5
 80019f6:	f7fe fdab 	bl	8000550 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f7fe ffd7 	bl	80009b4 <__aeabi_d2f>
 8001a06:	4602      	mov	r2, r0
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	645a      	str	r2, [r3, #68]	; 0x44
	traject -> MatTime_Data[18] = 1.0;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a12:	649a      	str	r2, [r3, #72]	; 0x48
	traject -> MatTime_Data[19] = traject -> TimeFinal;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	64da      	str	r2, [r3, #76]	; 0x4c
	traject -> MatTime_Data[20] = traject -> TimeFinal*traject -> TimeFinal;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	traject -> MatTime_Data[21] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	traject -> MatTime_Data[22] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001a6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	traject -> MatTime_Data[23] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001a8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001a94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001a9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	traject -> MatTime_Data[24] = 0.0;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	661a      	str	r2, [r3, #96]	; 0x60
	traject -> MatTime_Data[25] = 1.0;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ac0:	665a      	str	r2, [r3, #100]	; 0x64
	traject -> MatTime_Data[26] = 2.0*traject -> TimeFinal;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001ac8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	traject -> MatTime_Data[27] = 3.0*traject -> TimeFinal*traject -> TimeFinal;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fce1 	bl	80004a0 <__aeabi_f2d>
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <CoefficientAndTimeCalculation+0x648>)
 8001ae4:	f7fe fd34 	bl	8000550 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4614      	mov	r4, r2
 8001aee:	461d      	mov	r5, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fcd2 	bl	80004a0 <__aeabi_f2d>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4620      	mov	r0, r4
 8001b02:	4629      	mov	r1, r5
 8001b04:	f7fe fd24 	bl	8000550 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7fe ff50 	bl	80009b4 <__aeabi_d2f>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	66da      	str	r2, [r3, #108]	; 0x6c
	traject -> MatTime_Data[28] = 4.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fcbd 	bl	80004a0 <__aeabi_f2d>
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <CoefficientAndTimeCalculation+0x64c>)
 8001b2c:	f7fe fd10 	bl	8000550 <__aeabi_dmul>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4614      	mov	r4, r2
 8001b36:	461d      	mov	r5, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001b3e:	e01d      	b.n	8001b7c <CoefficientAndTimeCalculation+0x684>
 8001b40:	40080000 	.word	0x40080000
 8001b44:	40100000 	.word	0x40100000
 8001b48:	40140000 	.word	0x40140000
 8001b4c:	40280000 	.word	0x40280000
 8001b50:	40340000 	.word	0x40340000
 8001b54:	9abcaf48 	.word	0x9abcaf48
 8001b58:	be8ad7f2 	.word	0xbe8ad7f2
 8001b5c:	d7c6fbd2 	.word	0xd7c6fbd2
 8001b60:	3f12599e 	.word	0x3f12599e
 8001b64:	18fc5048 	.word	0x18fc5048
 8001b68:	3f82d773 	.word	0x3f82d773
 8001b6c:	44d013a9 	.word	0x44d013a9
 8001b70:	3feaf0d8 	.word	0x3feaf0d8
 8001b74:	af4f0d84 	.word	0xaf4f0d84
 8001b78:	40136594 	.word	0x40136594
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fc8f 	bl	80004a0 <__aeabi_f2d>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4620      	mov	r0, r4
 8001b88:	4629      	mov	r1, r5
 8001b8a:	f7fe fce1 	bl	8000550 <__aeabi_dmul>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4614      	mov	r4, r2
 8001b94:	461d      	mov	r5, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fc7f 	bl	80004a0 <__aeabi_f2d>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	4629      	mov	r1, r5
 8001baa:	f7fe fcd1 	bl	8000550 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7fe fefd 	bl	80009b4 <__aeabi_d2f>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	671a      	str	r2, [r3, #112]	; 0x70
	traject -> MatTime_Data[29] = 5.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fc6a 	bl	80004a0 <__aeabi_f2d>
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b78      	ldr	r3, [pc, #480]	; (8001db4 <CoefficientAndTimeCalculation+0x8bc>)
 8001bd2:	f7fe fcbd 	bl	8000550 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4614      	mov	r4, r2
 8001bdc:	461d      	mov	r5, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fc5b 	bl	80004a0 <__aeabi_f2d>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4620      	mov	r0, r4
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	f7fe fcad 	bl	8000550 <__aeabi_dmul>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4614      	mov	r4, r2
 8001bfc:	461d      	mov	r5, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fc4b 	bl	80004a0 <__aeabi_f2d>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4620      	mov	r0, r4
 8001c10:	4629      	mov	r1, r5
 8001c12:	f7fe fc9d 	bl	8000550 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4614      	mov	r4, r2
 8001c1c:	461d      	mov	r5, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc3b 	bl	80004a0 <__aeabi_f2d>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4620      	mov	r0, r4
 8001c30:	4629      	mov	r1, r5
 8001c32:	f7fe fc8d 	bl	8000550 <__aeabi_dmul>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f7fe feb9 	bl	80009b4 <__aeabi_d2f>
 8001c42:	4602      	mov	r2, r0
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	675a      	str	r2, [r3, #116]	; 0x74
	traject -> MatTime_Data[30] = 0.0;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	679a      	str	r2, [r3, #120]	; 0x78
	traject -> MatTime_Data[31] = 0.0;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	67da      	str	r2, [r3, #124]	; 0x7c
	traject -> MatTime_Data[32] = 2.0;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	traject -> MatTime_Data[33] = 6.0*traject -> TimeFinal;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001c68:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001c6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	traject -> MatTime_Data[34] = 12.0*traject -> TimeFinal*traject -> TimeFinal;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fc0f 	bl	80004a0 <__aeabi_f2d>
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	4b4c      	ldr	r3, [pc, #304]	; (8001db8 <CoefficientAndTimeCalculation+0x8c0>)
 8001c88:	f7fe fc62 	bl	8000550 <__aeabi_dmul>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4614      	mov	r4, r2
 8001c92:	461d      	mov	r5, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc00 	bl	80004a0 <__aeabi_f2d>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	f7fe fc52 	bl	8000550 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f7fe fe7e 	bl	80009b4 <__aeabi_d2f>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	traject -> MatTime_Data[35] = 20.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fbea 	bl	80004a0 <__aeabi_f2d>
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <CoefficientAndTimeCalculation+0x8c4>)
 8001cd2:	f7fe fc3d 	bl	8000550 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4614      	mov	r4, r2
 8001cdc:	461d      	mov	r5, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fbdb 	bl	80004a0 <__aeabi_f2d>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4620      	mov	r0, r4
 8001cf0:	4629      	mov	r1, r5
 8001cf2:	f7fe fc2d 	bl	8000550 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4614      	mov	r4, r2
 8001cfc:	461d      	mov	r5, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fbcb 	bl	80004a0 <__aeabi_f2d>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4620      	mov	r0, r4
 8001d10:	4629      	mov	r1, r5
 8001d12:	f7fe fc1d 	bl	8000550 <__aeabi_dmul>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f7fe fe49 	bl	80009b4 <__aeabi_d2f>
 8001d22:	4602      	mov	r2, r0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	traject -> MatCondition_Data[0] = traject -> Qin;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	traject -> MatCondition_Data[1] = 0;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	traject -> MatCondition_Data[2] = 0;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	traject -> MatCondition_Data[3] = traject -> Qfinal;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	traject -> MatCondition_Data[4] = 0;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	traject -> MatCondition_Data[5] = 0;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

	traject -> Trajectorystatus = arm_mat_inverse_f32(&(traject ->MatTime), &(traject ->MatTimeINV));
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001d76:	4619      	mov	r1, r3
 8001d78:	4610      	mov	r0, r2
 8001d7a:	f008 fa15 	bl	800a1a8 <arm_mat_inverse_f32>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461a      	mov	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
	traject -> Trajectorystatus = arm_mat_mult_f32(&(traject ->MatTimeINV), &(traject ->MatCondition), &(traject ->MatA));
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f503 7006 	add.w	r0, r3, #536	; 0x218
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f503 7108 	add.w	r1, r3, #544	; 0x220
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f008 f964 	bl	800a068 <arm_mat_mult_f32>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bdb0      	pop	{r4, r5, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40140000 	.word	0x40140000
 8001db8:	40280000 	.word	0x40280000
 8001dbc:	40340000 	.word	0x40340000

08001dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dc8:	f002 f954 	bl	8004074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dcc:	f000 f8e4 	bl	8001f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dd0:	f000 fb16 	bl	8002400 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dd4:	f000 faec 	bl	80023b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001dd8:	f000 fabe 	bl	8002358 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001ddc:	f000 f944 	bl	8002068 <MX_I2C1_Init>
  MX_TIM11_Init();
 8001de0:	f000 fa96 	bl	8002310 <MX_TIM11_Init>
  MX_TIM1_Init();
 8001de4:	f000 f96e 	bl	80020c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001de8:	f000 f9f0 	bl	80021cc <MX_TIM2_Init>
  MX_TIM5_Init();
 8001dec:	f000 fa42 	bl	8002274 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8001df0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001df4:	f002 f9b0 	bl	8004158 <HAL_Delay>
  Ringbuf_Init();
 8001df8:	f000 fc3a 	bl	8002670 <Ringbuf_Init>
  KalmanMatrixInit(&KalmanVar);
 8001dfc:	4851      	ldr	r0, [pc, #324]	; (8001f44 <main+0x184>)
 8001dfe:	f7fe ffab 	bl	8000d58 <KalmanMatrixInit>
  TrajectorInit(&traject);
 8001e02:	4851      	ldr	r0, [pc, #324]	; (8001f48 <main+0x188>)
 8001e04:	f7ff fb27 	bl	8001456 <TrajectorInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4850      	ldr	r0, [pc, #320]	; (8001f4c <main+0x18c>)
 8001e0c:	f005 fe0e 	bl	8007a2c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8001e10:	484f      	ldr	r0, [pc, #316]	; (8001f50 <main+0x190>)
 8001e12:	f005 fd2b 	bl	800786c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001e16:	213c      	movs	r1, #60	; 0x3c
 8001e18:	484e      	ldr	r0, [pc, #312]	; (8001f54 <main+0x194>)
 8001e1a:	f005 ff5d 	bl	8007cd8 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 8001e1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b4c      	ldr	r3, [pc, #304]	; (8001f58 <main+0x198>)
 8001e28:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 8001e2a:	4b4b      	ldr	r3, [pc, #300]	; (8001f58 <main+0x198>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a4a      	ldr	r2, [pc, #296]	; (8001f58 <main+0x198>)
 8001e30:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 8001e32:	4b49      	ldr	r3, [pc, #292]	; (8001f58 <main+0x198>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a49      	ldr	r2, [pc, #292]	; (8001f5c <main+0x19c>)
 8001e38:	6013      	str	r3, [r2, #0]
  PIDAController_Init(&PidVelo);
 8001e3a:	4849      	ldr	r0, [pc, #292]	; (8001f60 <main+0x1a0>)
 8001e3c:	f7ff faa2 	bl	8001384 <PIDAController_Init>
  PIDAController_Init(&PidPos);
 8001e40:	4848      	ldr	r0, [pc, #288]	; (8001f64 <main+0x1a4>)
 8001e42:	f7ff fa9f 	bl	8001384 <PIDAController_Init>
  // Reset all Parameter
  Robotinit(&Robot);
 8001e46:	4848      	ldr	r0, [pc, #288]	; (8001f68 <main+0x1a8>)
 8001e48:	f7ff facc 	bl	80013e4 <Robotinit>
  RobotRunToPositon(360.0,51.0);
 8001e4c:	eddf 0a47 	vldr	s1, [pc, #284]	; 8001f6c <main+0x1ac>
 8001e50:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8001f70 <main+0x1b0>
 8001e54:	f001 fcaa 	bl	80037ac <RobotRunToPositon>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timeElapsed[0] = Micros();
 8001e58:	f001 fe08 	bl	8003a6c <Micros>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4944      	ldr	r1, [pc, #272]	; (8001f74 <main+0x1b4>)
 8001e62:	e9c1 2300 	strd	r2, r3, [r1]
	  timeElapsed[1] = HAL_GetTick();
 8001e66:	f002 f96b 	bl	8004140 <HAL_GetTick>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	4b40      	ldr	r3, [pc, #256]	; (8001f74 <main+0x1b4>)
 8001e74:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e78:	e9c3 1202 	strd	r1, r2, [r3, #8]
	  RobotstateManagement();
 8001e7c:	f001 f8fc 	bl	8003078 <RobotstateManagement>
	  if(Micros() - EndEffLoopTime > 100000)
 8001e80:	f001 fdf4 	bl	8003a6c <Micros>
 8001e84:	4b3c      	ldr	r3, [pc, #240]	; (8001f78 <main+0x1b8>)
 8001e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8a:	1a84      	subs	r4, r0, r2
 8001e8c:	eb61 0503 	sbc.w	r5, r1, r3
 8001e90:	4b3a      	ldr	r3, [pc, #232]	; (8001f7c <main+0x1bc>)
 8001e92:	429c      	cmp	r4, r3
 8001e94:	f175 0300 	sbcs.w	r3, r5, #0
 8001e98:	d308      	bcc.n	8001eac <main+0xec>
	  {
		  EndEffLoopTime = Micros();
 8001e9a:	f001 fde7 	bl	8003a6c <Micros>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4935      	ldr	r1, [pc, #212]	; (8001f78 <main+0x1b8>)
 8001ea4:	e9c1 2300 	strd	r2, r3, [r1]
		  EndEffstateManagement();
 8001ea8:	f001 fa26 	bl	80032f8 <EndEffstateManagement>
	  }
	  if(Micros() - ControlLoopTime >= 10000)
 8001eac:	f001 fdde 	bl	8003a6c <Micros>
 8001eb0:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <main+0x1c0>)
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	ebb0 0802 	subs.w	r8, r0, r2
 8001eba:	eb61 0903 	sbc.w	r9, r1, r3
 8001ebe:	f242 7310 	movw	r3, #10000	; 0x2710
 8001ec2:	4598      	cmp	r8, r3
 8001ec4:	f179 0300 	sbcs.w	r3, r9, #0
 8001ec8:	d3c6      	bcc.n	8001e58 <main+0x98>
	  {
		ControlLoopTime  = Micros();
 8001eca:	f001 fdcf 	bl	8003a6c <Micros>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	492b      	ldr	r1, [pc, #172]	; (8001f80 <main+0x1c0>)
 8001ed4:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStartTime = Micros();
 8001ed8:	f001 fdc8 	bl	8003a6c <Micros>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4928      	ldr	r1, [pc, #160]	; (8001f84 <main+0x1c4>)
 8001ee2:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 8001ee6:	f000 fb3f 	bl	8002568 <EncoderRead>
//		KalmanFilterFunction(&KalmanVar,PositionDeg[0]);
		KalmanFilterFunction(&KalmanVar,PositionDeg[0],VelocityDeg);
 8001eea:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <main+0x1c8>)
 8001eec:	edd3 7a00 	vldr	s15, [r3]
 8001ef0:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <main+0x1cc>)
 8001ef2:	ed93 7a00 	vldr	s14, [r3]
 8001ef6:	eef0 0a47 	vmov.f32	s1, s14
 8001efa:	eeb0 0a67 	vmov.f32	s0, s15
 8001efe:	4811      	ldr	r0, [pc, #68]	; (8001f44 <main+0x184>)
 8001f00:	f7ff f90c 	bl	800111c <KalmanFilterFunction>
		Robot.Position = PositionDeg[0];
 8001f04:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <main+0x1c8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <main+0x1a8>)
 8001f0a:	6013      	str	r3, [r2, #0]
		Robot.Velocity = KalmanVar.MatState_Data[1];
 8001f0c:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <main+0x184>)
 8001f0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001f12:	4a15      	ldr	r2, [pc, #84]	; (8001f68 <main+0x1a8>)
 8001f14:	6053      	str	r3, [r2, #4]
		ControllLoopAndErrorHandler();
 8001f16:	f000 fba3 	bl	8002660 <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 8001f1a:	f001 fda7 	bl	8003a6c <Micros>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	491b      	ldr	r1, [pc, #108]	; (8001f90 <main+0x1d0>)
 8001f24:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <main+0x1d0>)
 8001f2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <main+0x1c4>)
 8001f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f34:	ebb0 0a02 	subs.w	sl, r0, r2
 8001f38:	eb61 0b03 	sbc.w	fp, r1, r3
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <main+0x1d4>)
 8001f3e:	e9c3 ab00 	strd	sl, fp, [r3]
	  timeElapsed[0] = Micros();
 8001f42:	e789      	b.n	8001e58 <main+0x98>
 8001f44:	20000034 	.word	0x20000034
 8001f48:	2000085c 	.word	0x2000085c
 8001f4c:	200004a8 	.word	0x200004a8
 8001f50:	20000580 	.word	0x20000580
 8001f54:	200004f0 	.word	0x200004f0
 8001f58:	200007d8 	.word	0x200007d8
 8001f5c:	200007e4 	.word	0x200007e4
 8001f60:	200007f4 	.word	0x200007f4
 8001f64:	20000828 	.word	0x20000828
 8001f68:	200006cc 	.word	0x200006cc
 8001f6c:	424c0000 	.word	0x424c0000
 8001f70:	43b40000 	.word	0x43b40000
 8001f74:	20000770 	.word	0x20000770
 8001f78:	20000780 	.word	0x20000780
 8001f7c:	000186a1 	.word	0x000186a1
 8001f80:	20000ad0 	.word	0x20000ad0
 8001f84:	20000aa0 	.word	0x20000aa0
 8001f88:	200007e8 	.word	0x200007e8
 8001f8c:	200007f0 	.word	0x200007f0
 8001f90:	20000aa8 	.word	0x20000aa8
 8001f94:	20000ab0 	.word	0x20000ab0

08001f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b094      	sub	sp, #80	; 0x50
 8001f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f9e:	f107 0320 	add.w	r3, r7, #32
 8001fa2:	2230      	movs	r2, #48	; 0x30
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f008 faa4 	bl	800a4f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fac:	f107 030c 	add.w	r3, r7, #12
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <SystemClock_Config+0xc8>)
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	4a26      	ldr	r2, [pc, #152]	; (8002060 <SystemClock_Config+0xc8>)
 8001fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fca:	6413      	str	r3, [r2, #64]	; 0x40
 8001fcc:	4b24      	ldr	r3, [pc, #144]	; (8002060 <SystemClock_Config+0xc8>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd8:	2300      	movs	r3, #0
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <SystemClock_Config+0xcc>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a20      	ldr	r2, [pc, #128]	; (8002064 <SystemClock_Config+0xcc>)
 8001fe2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <SystemClock_Config+0xcc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ffc:	2310      	movs	r3, #16
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002000:	2302      	movs	r3, #2
 8002002:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002004:	2300      	movs	r3, #0
 8002006:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002008:	2308      	movs	r3, #8
 800200a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800200c:	2364      	movs	r3, #100	; 0x64
 800200e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002010:	2302      	movs	r3, #2
 8002012:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002014:	2304      	movs	r3, #4
 8002016:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002018:	f107 0320 	add.w	r3, r7, #32
 800201c:	4618      	mov	r0, r3
 800201e:	f004 ff3d 	bl	8006e9c <HAL_RCC_OscConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002028:	f001 fd38 	bl	8003a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800202c:	230f      	movs	r3, #15
 800202e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002030:	2302      	movs	r3, #2
 8002032:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	2103      	movs	r1, #3
 8002048:	4618      	mov	r0, r3
 800204a:	f005 f99f 	bl	800738c <HAL_RCC_ClockConfig>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002054:	f001 fd22 	bl	8003a9c <Error_Handler>
  }
}
 8002058:	bf00      	nop
 800205a:	3750      	adds	r7, #80	; 0x50
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40023800 	.word	0x40023800
 8002064:	40007000 	.word	0x40007000

08002068 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <MX_I2C1_Init+0x50>)
 800206e:	4a13      	ldr	r2, [pc, #76]	; (80020bc <MX_I2C1_Init+0x54>)
 8002070:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <MX_I2C1_Init+0x50>)
 8002074:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <MX_I2C1_Init+0x58>)
 8002076:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <MX_I2C1_Init+0x50>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <MX_I2C1_Init+0x50>)
 8002080:	2200      	movs	r2, #0
 8002082:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <MX_I2C1_Init+0x50>)
 8002086:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800208a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800208c:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <MX_I2C1_Init+0x50>)
 800208e:	2200      	movs	r2, #0
 8002090:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <MX_I2C1_Init+0x50>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <MX_I2C1_Init+0x50>)
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <MX_I2C1_Init+0x50>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020a4:	4804      	ldr	r0, [pc, #16]	; (80020b8 <MX_I2C1_Init+0x50>)
 80020a6:	f002 ff85 	bl	8004fb4 <HAL_I2C_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020b0:	f001 fcf4 	bl	8003a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000454 	.word	0x20000454
 80020bc:	40005400 	.word	0x40005400
 80020c0:	00061a80 	.word	0x00061a80

080020c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b092      	sub	sp, #72	; 0x48
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
 80020e4:	615a      	str	r2, [r3, #20]
 80020e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	2220      	movs	r2, #32
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f008 fa00 	bl	800a4f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020f4:	4b33      	ldr	r3, [pc, #204]	; (80021c4 <MX_TIM1_Init+0x100>)
 80020f6:	4a34      	ldr	r2, [pc, #208]	; (80021c8 <MX_TIM1_Init+0x104>)
 80020f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020fa:	4b32      	ldr	r3, [pc, #200]	; (80021c4 <MX_TIM1_Init+0x100>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002100:	4b30      	ldr	r3, [pc, #192]	; (80021c4 <MX_TIM1_Init+0x100>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8002106:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <MX_TIM1_Init+0x100>)
 8002108:	f242 720f 	movw	r2, #9999	; 0x270f
 800210c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800210e:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <MX_TIM1_Init+0x100>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002114:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <MX_TIM1_Init+0x100>)
 8002116:	2200      	movs	r2, #0
 8002118:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211a:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <MX_TIM1_Init+0x100>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002120:	4828      	ldr	r0, [pc, #160]	; (80021c4 <MX_TIM1_Init+0x100>)
 8002122:	f005 fc34 	bl	800798e <HAL_TIM_PWM_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800212c:	f001 fcb6 	bl	8003a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002130:	2300      	movs	r3, #0
 8002132:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002138:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800213c:	4619      	mov	r1, r3
 800213e:	4821      	ldr	r0, [pc, #132]	; (80021c4 <MX_TIM1_Init+0x100>)
 8002140:	f006 fbde 	bl	8008900 <HAL_TIMEx_MasterConfigSynchronization>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800214a:	f001 fca7 	bl	8003a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800214e:	2360      	movs	r3, #96	; 0x60
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002156:	2300      	movs	r3, #0
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800215a:	2300      	movs	r3, #0
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800216a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216e:	2200      	movs	r2, #0
 8002170:	4619      	mov	r1, r3
 8002172:	4814      	ldr	r0, [pc, #80]	; (80021c4 <MX_TIM1_Init+0x100>)
 8002174:	f005 ff46 	bl	8008004 <HAL_TIM_PWM_ConfigChannel>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800217e:	f001 fc8d 	bl	8003a9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800219a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	4619      	mov	r1, r3
 80021a4:	4807      	ldr	r0, [pc, #28]	; (80021c4 <MX_TIM1_Init+0x100>)
 80021a6:	f006 fc19 	bl	80089dc <HAL_TIMEx_ConfigBreakDeadTime>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80021b0:	f001 fc74 	bl	8003a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021b4:	4803      	ldr	r0, [pc, #12]	; (80021c4 <MX_TIM1_Init+0x100>)
 80021b6:	f001 fdab 	bl	8003d10 <HAL_TIM_MspPostInit>

}
 80021ba:	bf00      	nop
 80021bc:	3748      	adds	r7, #72	; 0x48
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200004a8 	.word	0x200004a8
 80021c8:	40010000 	.word	0x40010000

080021cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08c      	sub	sp, #48	; 0x30
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021d2:	f107 030c 	add.w	r3, r7, #12
 80021d6:	2224      	movs	r2, #36	; 0x24
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f008 f98a 	bl	800a4f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021e8:	4b21      	ldr	r3, [pc, #132]	; (8002270 <MX_TIM2_Init+0xa4>)
 80021ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021f0:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <MX_TIM2_Init+0xa4>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f6:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <MX_TIM2_Init+0xa4>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 80021fc:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <MX_TIM2_Init+0xa4>)
 80021fe:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002202:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002204:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <MX_TIM2_Init+0xa4>)
 8002206:	2200      	movs	r2, #0
 8002208:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220a:	4b19      	ldr	r3, [pc, #100]	; (8002270 <MX_TIM2_Init+0xa4>)
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002210:	2303      	movs	r3, #3
 8002212:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002218:	2301      	movs	r3, #1
 800221a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800221c:	2300      	movs	r3, #0
 800221e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002228:	2301      	movs	r3, #1
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800222c:	2300      	movs	r3, #0
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	4619      	mov	r1, r3
 800223a:	480d      	ldr	r0, [pc, #52]	; (8002270 <MX_TIM2_Init+0xa4>)
 800223c:	f005 fca6 	bl	8007b8c <HAL_TIM_Encoder_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002246:	f001 fc29 	bl	8003a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	4619      	mov	r1, r3
 8002256:	4806      	ldr	r0, [pc, #24]	; (8002270 <MX_TIM2_Init+0xa4>)
 8002258:	f006 fb52 	bl	8008900 <HAL_TIMEx_MasterConfigSynchronization>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002262:	f001 fc1b 	bl	8003a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002266:	bf00      	nop
 8002268:	3730      	adds	r7, #48	; 0x30
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200004f0 	.word	0x200004f0

08002274 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800227a:	f107 0308 	add.w	r3, r7, #8
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002288:	463b      	mov	r3, r7
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002290:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <MX_TIM5_Init+0x90>)
 8002292:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <MX_TIM5_Init+0x94>)
 8002294:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <MX_TIM5_Init+0x90>)
 8002298:	2263      	movs	r2, #99	; 0x63
 800229a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <MX_TIM5_Init+0x90>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <MX_TIM5_Init+0x90>)
 80022a4:	4a19      	ldr	r2, [pc, #100]	; (800230c <MX_TIM5_Init+0x98>)
 80022a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <MX_TIM5_Init+0x90>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <MX_TIM5_Init+0x90>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022b4:	4813      	ldr	r0, [pc, #76]	; (8002304 <MX_TIM5_Init+0x90>)
 80022b6:	f005 fa89 	bl	80077cc <HAL_TIM_Base_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 80022c0:	f001 fbec 	bl	8003a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80022ca:	f107 0308 	add.w	r3, r7, #8
 80022ce:	4619      	mov	r1, r3
 80022d0:	480c      	ldr	r0, [pc, #48]	; (8002304 <MX_TIM5_Init+0x90>)
 80022d2:	f005 ff59 	bl	8008188 <HAL_TIM_ConfigClockSource>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 80022dc:	f001 fbde 	bl	8003a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80022e0:	2320      	movs	r3, #32
 80022e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022e8:	463b      	mov	r3, r7
 80022ea:	4619      	mov	r1, r3
 80022ec:	4805      	ldr	r0, [pc, #20]	; (8002304 <MX_TIM5_Init+0x90>)
 80022ee:	f006 fb07 	bl	8008900 <HAL_TIMEx_MasterConfigSynchronization>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 80022f8:	f001 fbd0 	bl	8003a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80022fc:	bf00      	nop
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000538 	.word	0x20000538
 8002308:	40000c00 	.word	0x40000c00
 800230c:	0001869f 	.word	0x0001869f

08002310 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002314:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <MX_TIM11_Init+0x40>)
 8002316:	4a0f      	ldr	r2, [pc, #60]	; (8002354 <MX_TIM11_Init+0x44>)
 8002318:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <MX_TIM11_Init+0x40>)
 800231c:	2263      	movs	r2, #99	; 0x63
 800231e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <MX_TIM11_Init+0x40>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <MX_TIM11_Init+0x40>)
 8002328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800232c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <MX_TIM11_Init+0x40>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <MX_TIM11_Init+0x40>)
 8002336:	2200      	movs	r2, #0
 8002338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800233a:	4805      	ldr	r0, [pc, #20]	; (8002350 <MX_TIM11_Init+0x40>)
 800233c:	f005 fa46 	bl	80077cc <HAL_TIM_Base_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002346:	f001 fba9 	bl	8003a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000580 	.word	0x20000580
 8002354:	40014800 	.word	0x40014800

08002358 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <MX_USART2_UART_Init+0x50>)
 800235e:	4a13      	ldr	r2, [pc, #76]	; (80023ac <MX_USART2_UART_Init+0x54>)
 8002360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <MX_USART2_UART_Init+0x50>)
 8002364:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8002368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800236a:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <MX_USART2_UART_Init+0x50>)
 800236c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002370:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002372:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <MX_USART2_UART_Init+0x50>)
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <MX_USART2_UART_Init+0x50>)
 800237a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800237e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <MX_USART2_UART_Init+0x50>)
 8002382:	220c      	movs	r2, #12
 8002384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <MX_USART2_UART_Init+0x50>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <MX_USART2_UART_Init+0x50>)
 800238e:	2200      	movs	r2, #0
 8002390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <MX_USART2_UART_Init+0x50>)
 8002394:	f006 fb88 	bl	8008aa8 <HAL_UART_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800239e:	f001 fb7d 	bl	8003a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200005c8 	.word	0x200005c8
 80023ac:	40004400 	.word	0x40004400

080023b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <MX_DMA_Init+0x4c>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a0f      	ldr	r2, [pc, #60]	; (80023fc <MX_DMA_Init+0x4c>)
 80023c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <MX_DMA_Init+0x4c>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2100      	movs	r1, #0
 80023d6:	2010      	movs	r0, #16
 80023d8:	f001 ffbd 	bl	8004356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80023dc:	2010      	movs	r0, #16
 80023de:	f001 ffd6 	bl	800438e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	2011      	movs	r0, #17
 80023e8:	f001 ffb5 	bl	8004356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80023ec:	2011      	movs	r0, #17
 80023ee:	f001 ffce 	bl	800438e <HAL_NVIC_EnableIRQ>

}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800

08002400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	; 0x28
 8002404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	4b4e      	ldr	r3, [pc, #312]	; (8002554 <MX_GPIO_Init+0x154>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a4d      	ldr	r2, [pc, #308]	; (8002554 <MX_GPIO_Init+0x154>)
 8002420:	f043 0304 	orr.w	r3, r3, #4
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b4b      	ldr	r3, [pc, #300]	; (8002554 <MX_GPIO_Init+0x154>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	4b47      	ldr	r3, [pc, #284]	; (8002554 <MX_GPIO_Init+0x154>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a46      	ldr	r2, [pc, #280]	; (8002554 <MX_GPIO_Init+0x154>)
 800243c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b44      	ldr	r3, [pc, #272]	; (8002554 <MX_GPIO_Init+0x154>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	4b40      	ldr	r3, [pc, #256]	; (8002554 <MX_GPIO_Init+0x154>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a3f      	ldr	r2, [pc, #252]	; (8002554 <MX_GPIO_Init+0x154>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <MX_GPIO_Init+0x154>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	4b39      	ldr	r3, [pc, #228]	; (8002554 <MX_GPIO_Init+0x154>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a38      	ldr	r2, [pc, #224]	; (8002554 <MX_GPIO_Init+0x154>)
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b36      	ldr	r3, [pc, #216]	; (8002554 <MX_GPIO_Init+0x154>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 8002486:	2200      	movs	r2, #0
 8002488:	f44f 7108 	mov.w	r1, #544	; 0x220
 800248c:	4832      	ldr	r0, [pc, #200]	; (8002558 <MX_GPIO_Init+0x158>)
 800248e:	f002 fd45 	bl	8004f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin, GPIO_PIN_RESET);
 8002492:	2200      	movs	r2, #0
 8002494:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8002498:	4830      	ldr	r0, [pc, #192]	; (800255c <MX_GPIO_Init+0x15c>)
 800249a:	f002 fd3f 	bl	8004f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800249e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80024a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	482a      	ldr	r0, [pc, #168]	; (8002560 <MX_GPIO_Init+0x160>)
 80024b6:	f002 fb95 	bl	8004be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 80024ba:	f44f 7308 	mov.w	r3, #544	; 0x220
 80024be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c0:	2301      	movs	r3, #1
 80024c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	4619      	mov	r1, r3
 80024d2:	4821      	ldr	r0, [pc, #132]	; (8002558 <MX_GPIO_Init+0x158>)
 80024d4:	f002 fb86 	bl	8004be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_RedLamp_Pin Pin_YelLamp_Pin Pin_BlueLamp_Pin */
  GPIO_InitStruct.Pin = Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin;
 80024d8:	f44f 6383 	mov.w	r3, #1048	; 0x418
 80024dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024de:	2301      	movs	r3, #1
 80024e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	2300      	movs	r3, #0
 80024e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ea:	f107 0314 	add.w	r3, r7, #20
 80024ee:	4619      	mov	r1, r3
 80024f0:	481a      	ldr	r0, [pc, #104]	; (800255c <MX_GPIO_Init+0x15c>)
 80024f2:	f002 fb77 	bl	8004be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Proxi_Pin */
  GPIO_InitStruct.Pin = Pin_Proxi_Pin;
 80024f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80024fc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Proxi_GPIO_Port, &GPIO_InitStruct);
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	4619      	mov	r1, r3
 800250c:	4812      	ldr	r0, [pc, #72]	; (8002558 <MX_GPIO_Init+0x158>)
 800250e:	f002 fb69 	bl	8004be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Emer_Pin */
  GPIO_InitStruct.Pin = Pin_Emer_Pin;
 8002512:	2320      	movs	r3, #32
 8002514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002516:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800251a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Emer_GPIO_Port, &GPIO_InitStruct);
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4619      	mov	r1, r3
 8002526:	480d      	ldr	r0, [pc, #52]	; (800255c <MX_GPIO_Init+0x15c>)
 8002528:	f002 fb5c 	bl	8004be4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800252c:	2200      	movs	r2, #0
 800252e:	2100      	movs	r1, #0
 8002530:	2017      	movs	r0, #23
 8002532:	f001 ff10 	bl	8004356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002536:	2017      	movs	r0, #23
 8002538:	f001 ff29 	bl	800438e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800253c:	2200      	movs	r2, #0
 800253e:	2100      	movs	r1, #0
 8002540:	2028      	movs	r0, #40	; 0x28
 8002542:	f001 ff08 	bl	8004356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002546:	2028      	movs	r0, #40	; 0x28
 8002548:	f001 ff21 	bl	800438e <HAL_NVIC_EnableIRQ>

}
 800254c:	bf00      	nop
 800254e:	3728      	adds	r7, #40	; 0x28
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40023800 	.word	0x40023800
 8002558:	40020000 	.word	0x40020000
 800255c:	40020400 	.word	0x40020400
 8002560:	40020800 	.word	0x40020800
 8002564:	00000000 	.word	0x00000000

08002568 <EncoderRead>:
		return number;
	}
}

void EncoderRead()
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 800256c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	461a      	mov	r2, r3
 8002574:	4b32      	ldr	r3, [pc, #200]	; (8002640 <EncoderRead+0xd8>)
 8002576:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 8002578:	4b31      	ldr	r3, [pc, #196]	; (8002640 <EncoderRead+0xd8>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b30      	ldr	r3, [pc, #192]	; (8002640 <EncoderRead+0xd8>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	1ad2      	subs	r2, r2, r3
 8002582:	4b30      	ldr	r3, [pc, #192]	; (8002644 <EncoderRead+0xdc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	425b      	negs	r3, r3
 8002588:	429a      	cmp	r2, r3
 800258a:	da07      	bge.n	800259c <EncoderRead+0x34>
		WrappingStep+=12000;
 800258c:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <EncoderRead+0xe0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8002594:	3320      	adds	r3, #32
 8002596:	4a2c      	ldr	r2, [pc, #176]	; (8002648 <EncoderRead+0xe0>)
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e00f      	b.n	80025bc <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 800259c:	4b28      	ldr	r3, [pc, #160]	; (8002640 <EncoderRead+0xd8>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b27      	ldr	r3, [pc, #156]	; (8002640 <EncoderRead+0xd8>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	1ad2      	subs	r2, r2, r3
 80025a6:	4b27      	ldr	r3, [pc, #156]	; (8002644 <EncoderRead+0xdc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	db06      	blt.n	80025bc <EncoderRead+0x54>
		WrappingStep-=12000;
 80025ae:	4b26      	ldr	r3, [pc, #152]	; (8002648 <EncoderRead+0xe0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 80025b6:	3b20      	subs	r3, #32
 80025b8:	4a23      	ldr	r2, [pc, #140]	; (8002648 <EncoderRead+0xe0>)
 80025ba:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 80025bc:	4b20      	ldr	r3, [pc, #128]	; (8002640 <EncoderRead+0xd8>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b21      	ldr	r3, [pc, #132]	; (8002648 <EncoderRead+0xe0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a21      	ldr	r2, [pc, #132]	; (800264c <EncoderRead+0xe4>)
 80025c8:	6013      	str	r3, [r2, #0]
	PositionDeg[0] = (PositionRaw/12000.0)*360.0;
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <EncoderRead+0xe4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ff54 	bl	800047c <__aeabi_i2d>
 80025d4:	a318      	add	r3, pc, #96	; (adr r3, 8002638 <EncoderRead+0xd0>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f7fe f8e3 	bl	80007a4 <__aeabi_ddiv>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	4b19      	ldr	r3, [pc, #100]	; (8002650 <EncoderRead+0xe8>)
 80025ec:	f7fd ffb0 	bl	8000550 <__aeabi_dmul>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	f7fe f9dc 	bl	80009b4 <__aeabi_d2f>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4a15      	ldr	r2, [pc, #84]	; (8002654 <EncoderRead+0xec>)
 8002600:	6013      	str	r3, [r2, #0]
	VelocityDeg = ((PositionDeg[0] - PositionDeg[1])/dt);
 8002602:	4b14      	ldr	r3, [pc, #80]	; (8002654 <EncoderRead+0xec>)
 8002604:	ed93 7a00 	vldr	s14, [r3]
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <EncoderRead+0xec>)
 800260a:	edd3 7a01 	vldr	s15, [r3, #4]
 800260e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002612:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002658 <EncoderRead+0xf0>
 8002616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <EncoderRead+0xf4>)
 800261c:	edc3 7a00 	vstr	s15, [r3]
	EncoderRawData[1] = EncoderRawData[0];
 8002620:	4b07      	ldr	r3, [pc, #28]	; (8002640 <EncoderRead+0xd8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a06      	ldr	r2, [pc, #24]	; (8002640 <EncoderRead+0xd8>)
 8002626:	6053      	str	r3, [r2, #4]
	PositionDeg[1] = PositionDeg[0];
 8002628:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <EncoderRead+0xec>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a09      	ldr	r2, [pc, #36]	; (8002654 <EncoderRead+0xec>)
 800262e:	6053      	str	r3, [r2, #4]
}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	f3af 8000 	nop.w
 8002638:	00000000 	.word	0x00000000
 800263c:	40c77000 	.word	0x40c77000
 8002640:	200007d8 	.word	0x200007d8
 8002644:	20000428 	.word	0x20000428
 8002648:	200007e0 	.word	0x200007e0
 800264c:	200007e4 	.word	0x200007e4
 8002650:	40768000 	.word	0x40768000
 8002654:	200007e8 	.word	0x200007e8
 8002658:	3c23d70a 	.word	0x3c23d70a
 800265c:	200007f0 	.word	0x200007f0

08002660 <ControllLoopAndErrorHandler>:
	return Pwm;
}


void ControllLoopAndErrorHandler()
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
//	else
//	{
//		PWMCHECKER = 0.0;
//		Drivemotor(PWMCHECKER);
//	}
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <Ringbuf_Init>:

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 8002674:	2214      	movs	r2, #20
 8002676:	2100      	movs	r1, #0
 8002678:	480e      	ldr	r0, [pc, #56]	; (80026b4 <Ringbuf_Init+0x44>)
 800267a:	f007 ff3b 	bl	800a4f4 <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 800267e:	2214      	movs	r2, #20
 8002680:	2100      	movs	r1, #0
 8002682:	480d      	ldr	r0, [pc, #52]	; (80026b8 <Ringbuf_Init+0x48>)
 8002684:	f007 ff36 	bl	800a4f4 <memset>

	oldPos = 0;
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <Ringbuf_Init+0x4c>)
 800268a:	2200      	movs	r2, #0
 800268c:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <Ringbuf_Init+0x50>)
 8002690:	2200      	movs	r2, #0
 8002692:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 8002694:	2214      	movs	r2, #20
 8002696:	4907      	ldr	r1, [pc, #28]	; (80026b4 <Ringbuf_Init+0x44>)
 8002698:	480a      	ldr	r0, [pc, #40]	; (80026c4 <Ringbuf_Init+0x54>)
 800269a:	f006 fad1 	bl	8008c40 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <Ringbuf_Init+0x58>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <Ringbuf_Init+0x58>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0208 	bic.w	r2, r2, #8
 80026ac:	601a      	str	r2, [r3, #0]
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000704 	.word	0x20000704
 80026b8:	20000718 	.word	0x20000718
 80026bc:	20000736 	.word	0x20000736
 80026c0:	20000738 	.word	0x20000738
 80026c4:	200005c8 	.word	0x200005c8
 80026c8:	2000060c 	.word	0x2000060c

080026cc <checkSum>:
	oldPos = 0;
	newPos = 0;
}

void checkSum (uint8_t *buffertoCheckSum, uint16_t Size)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	807b      	strh	r3, [r7, #2]
	uint8_t sum = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
	modeByte = 0;
 80026dc:	4b52      	ldr	r3, [pc, #328]	; (8002828 <checkSum+0x15c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
	switch(Size){
 80026e2:	887b      	ldrh	r3, [r7, #2]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d84f      	bhi.n	800278a <checkSum+0xbe>
 80026ea:	a201      	add	r2, pc, #4	; (adr r2, 80026f0 <checkSum+0x24>)
 80026ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f0:	080027e1 	.word	0x080027e1
 80026f4:	08002701 	.word	0x08002701
 80026f8:	080027e1 	.word	0x080027e1
 80026fc:	08002727 	.word	0x08002727
	case 1:
	case 3:
		break;
	case 2:
		if(!(checkAck(buffertoCheckSum, Size))) modeByte = sum = buffertoCheckSum[oldPos];
 8002700:	887b      	ldrh	r3, [r7, #2]
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f897 	bl	8002838 <checkAck>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d169      	bne.n	80027e4 <checkSum+0x118>
 8002710:	4b46      	ldr	r3, [pc, #280]	; (800282c <checkSum+0x160>)
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	73fb      	strb	r3, [r7, #15]
 800271e:	4a42      	ldr	r2, [pc, #264]	; (8002828 <checkSum+0x15c>)
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	7013      	strb	r3, [r2, #0]
		break;
 8002724:	e05e      	b.n	80027e4 <checkSum+0x118>
	case 4:
		if(checkAck(buffertoCheckSum, Size)) modeByte = sum = buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8002726:	887b      	ldrh	r3, [r7, #2]
 8002728:	4619      	mov	r1, r3
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f884 	bl	8002838 <checkAck>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <checkSum+0x80>
 8002736:	4b3d      	ldr	r3, [pc, #244]	; (800282c <checkSum+0x160>)
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	3302      	adds	r3, #2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	4413      	add	r3, r2
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	4a38      	ldr	r2, [pc, #224]	; (8002828 <checkSum+0x15c>)
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	7013      	strb	r3, [r2, #0]
		else{
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
			modeByte = buffertoCheckSum[oldPos];
		}
		break;
 800274a:	e04c      	b.n	80027e6 <checkSum+0x11a>
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 800274c:	4b37      	ldr	r3, [pc, #220]	; (800282c <checkSum+0x160>)
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	781a      	ldrb	r2, [r3, #0]
 8002758:	4b34      	ldr	r3, [pc, #208]	; (800282c <checkSum+0x160>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	3301      	adds	r3, #1
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	440b      	add	r3, r1
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	4413      	add	r3, r2
 8002766:	b2da      	uxtb	r2, r3
 8002768:	4b30      	ldr	r3, [pc, #192]	; (800282c <checkSum+0x160>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	3302      	adds	r3, #2
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	440b      	add	r3, r1
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	4413      	add	r3, r2
 8002776:	73fb      	strb	r3, [r7, #15]
			modeByte = buffertoCheckSum[oldPos];
 8002778:	4b2c      	ldr	r3, [pc, #176]	; (800282c <checkSum+0x160>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	781a      	ldrb	r2, [r3, #0]
 8002784:	4b28      	ldr	r3, [pc, #160]	; (8002828 <checkSum+0x15c>)
 8002786:	701a      	strb	r2, [r3, #0]
		break;
 8002788:	e02d      	b.n	80027e6 <checkSum+0x11a>
	default:
		modeByte = buffertoCheckSum[oldPos];
 800278a:	4b28      	ldr	r3, [pc, #160]	; (800282c <checkSum+0x160>)
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	781a      	ldrb	r2, [r3, #0]
 8002796:	4b24      	ldr	r3, [pc, #144]	; (8002828 <checkSum+0x15c>)
 8002798:	701a      	strb	r2, [r3, #0]
		for (int index = 0; index < Size-1; ++index)
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	e019      	b.n	80027d4 <checkSum+0x108>
		{
			sum = sum + buffertoCheckSum[oldPos+index % MainBuf_SIZE];
 80027a0:	4b22      	ldr	r3, [pc, #136]	; (800282c <checkSum+0x160>)
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	4b21      	ldr	r3, [pc, #132]	; (8002830 <checkSum+0x164>)
 80027aa:	fb83 2301 	smull	r2, r3, r3, r1
 80027ae:	10da      	asrs	r2, r3, #3
 80027b0:	17cb      	asrs	r3, r1, #31
 80027b2:	1ad2      	subs	r2, r2, r3
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	1aca      	subs	r2, r1, r3
 80027be:	1883      	adds	r3, r0, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	781a      	ldrb	r2, [r3, #0]
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	4413      	add	r3, r2
 80027cc:	73fb      	strb	r3, [r7, #15]
		for (int index = 0; index < Size-1; ++index)
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	3301      	adds	r3, #1
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	429a      	cmp	r2, r3
 80027dc:	dbe0      	blt.n	80027a0 <checkSum+0xd4>
 80027de:	e002      	b.n	80027e6 <checkSum+0x11a>
		break;
 80027e0:	bf00      	nop
 80027e2:	e000      	b.n	80027e6 <checkSum+0x11a>
		break;
 80027e4:	bf00      	nop
		}
	}

	if((uint8_t)buffertoCheckSum[oldPos+(Size-1) % MainBuf_SIZE] == (uint8_t)(~sum)) UARTstateManagement(MainBuf);
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <checkSum+0x160>)
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	887b      	ldrh	r3, [r7, #2]
 80027ee:	1e59      	subs	r1, r3, #1
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <checkSum+0x164>)
 80027f2:	fb83 2301 	smull	r2, r3, r3, r1
 80027f6:	10da      	asrs	r2, r3, #3
 80027f8:	17cb      	asrs	r3, r1, #31
 80027fa:	1ad2      	subs	r2, r2, r3
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	1aca      	subs	r2, r1, r3
 8002806:	1883      	adds	r3, r0, r2
 8002808:	461a      	mov	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	781a      	ldrb	r2, [r3, #0]
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	43db      	mvns	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	429a      	cmp	r2, r3
 8002818:	d102      	bne.n	8002820 <checkSum+0x154>
 800281a:	4806      	ldr	r0, [pc, #24]	; (8002834 <checkSum+0x168>)
 800281c:	f000 f898 	bl	8002950 <UARTstateManagement>
}
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000761 	.word	0x20000761
 800282c:	20000736 	.word	0x20000736
 8002830:	66666667 	.word	0x66666667
 8002834:	20000718 	.word	0x20000718

08002838 <checkAck>:

uint8_t checkAck (uint8_t *buffertoCheckAck, uint16_t Size)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	807b      	strh	r3, [r7, #2]
	if((buffertoCheckAck[oldPos] == 0b01011000) && (buffertoCheckAck[oldPos+1 % MainBuf_SIZE] == 0b01110101)) return 1;
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <checkAck+0x40>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b58      	cmp	r3, #88	; 0x58
 8002852:	d109      	bne.n	8002868 <checkAck+0x30>
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <checkAck+0x40>)
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	3301      	adds	r3, #1
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b75      	cmp	r3, #117	; 0x75
 8002862:	d101      	bne.n	8002868 <checkAck+0x30>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <checkAck+0x32>
	else return 0;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000736 	.word	0x20000736

0800287c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	807b      	strh	r3, [r7, #2]
        if (huart->Instance == USART2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a28      	ldr	r2, [pc, #160]	; (8002930 <HAL_UARTEx_RxEventCallback+0xb4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d14a      	bne.n	8002928 <HAL_UARTEx_RxEventCallback+0xac>
        {
                oldPos = newPos;
 8002892:	4b28      	ldr	r3, [pc, #160]	; (8002934 <HAL_UARTEx_RxEventCallback+0xb8>)
 8002894:	881a      	ldrh	r2, [r3, #0]
 8002896:	4b28      	ldr	r3, [pc, #160]	; (8002938 <HAL_UARTEx_RxEventCallback+0xbc>)
 8002898:	801a      	strh	r2, [r3, #0]
                dataSize = Size;
 800289a:	4a28      	ldr	r2, [pc, #160]	; (800293c <HAL_UARTEx_RxEventCallback+0xc0>)
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	8013      	strh	r3, [r2, #0]
                if (oldPos+dataSize > MainBuf_SIZE)
 80028a0:	4b25      	ldr	r3, [pc, #148]	; (8002938 <HAL_UARTEx_RxEventCallback+0xbc>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b25      	ldr	r3, [pc, #148]	; (800293c <HAL_UARTEx_RxEventCallback+0xc0>)
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	2b14      	cmp	r3, #20
 80028ae:	dd16      	ble.n	80028de <HAL_UARTEx_RxEventCallback+0x62>
                {
                        oldPos = 0;
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_UARTEx_RxEventCallback+0xbc>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	801a      	strh	r2, [r3, #0]
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 80028b6:	4b20      	ldr	r3, [pc, #128]	; (8002938 <HAL_UARTEx_RxEventCallback+0xbc>)
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	4b20      	ldr	r3, [pc, #128]	; (8002940 <HAL_UARTEx_RxEventCallback+0xc4>)
 80028be:	4413      	add	r3, r2
 80028c0:	4a1e      	ldr	r2, [pc, #120]	; (800293c <HAL_UARTEx_RxEventCallback+0xc0>)
 80028c2:	8812      	ldrh	r2, [r2, #0]
 80028c4:	491f      	ldr	r1, [pc, #124]	; (8002944 <HAL_UARTEx_RxEventCallback+0xc8>)
 80028c6:	4618      	mov	r0, r3
 80028c8:	f007 fe06 	bl	800a4d8 <memcpy>
                        newPos = dataSize+oldPos;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <HAL_UARTEx_RxEventCallback+0xc0>)
 80028ce:	881a      	ldrh	r2, [r3, #0]
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_UARTEx_RxEventCallback+0xbc>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	4413      	add	r3, r2
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	4b16      	ldr	r3, [pc, #88]	; (8002934 <HAL_UARTEx_RxEventCallback+0xb8>)
 80028da:	801a      	strh	r2, [r3, #0]
 80028dc:	e012      	b.n	8002904 <HAL_UARTEx_RxEventCallback+0x88>
                }
                else
                {
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <HAL_UARTEx_RxEventCallback+0xbc>)
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b16      	ldr	r3, [pc, #88]	; (8002940 <HAL_UARTEx_RxEventCallback+0xc4>)
 80028e6:	4413      	add	r3, r2
 80028e8:	4a14      	ldr	r2, [pc, #80]	; (800293c <HAL_UARTEx_RxEventCallback+0xc0>)
 80028ea:	8812      	ldrh	r2, [r2, #0]
 80028ec:	4915      	ldr	r1, [pc, #84]	; (8002944 <HAL_UARTEx_RxEventCallback+0xc8>)
 80028ee:	4618      	mov	r0, r3
 80028f0:	f007 fdf2 	bl	800a4d8 <memcpy>
                        newPos = dataSize+oldPos;
 80028f4:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_UARTEx_RxEventCallback+0xc0>)
 80028f6:	881a      	ldrh	r2, [r3, #0]
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <HAL_UARTEx_RxEventCallback+0xbc>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	4413      	add	r3, r2
 80028fe:	b29a      	uxth	r2, r3
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <HAL_UARTEx_RxEventCallback+0xb8>)
 8002902:	801a      	strh	r2, [r3, #0]
                }

                checkSum(MainBuf, Size);
 8002904:	887b      	ldrh	r3, [r7, #2]
 8002906:	4619      	mov	r1, r3
 8002908:	480d      	ldr	r0, [pc, #52]	; (8002940 <HAL_UARTEx_RxEventCallback+0xc4>)
 800290a:	f7ff fedf 	bl	80026cc <checkSum>
                HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 800290e:	2214      	movs	r2, #20
 8002910:	490c      	ldr	r1, [pc, #48]	; (8002944 <HAL_UARTEx_RxEventCallback+0xc8>)
 8002912:	480d      	ldr	r0, [pc, #52]	; (8002948 <HAL_UARTEx_RxEventCallback+0xcc>)
 8002914:	f006 f994 	bl	8008c40 <HAL_UARTEx_ReceiveToIdle_DMA>
                __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <HAL_UARTEx_RxEventCallback+0xd0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_UARTEx_RxEventCallback+0xd0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0208 	bic.w	r2, r2, #8
 8002926:	601a      	str	r2, [r3, #0]
        }
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40004400 	.word	0x40004400
 8002934:	20000738 	.word	0x20000738
 8002938:	20000736 	.word	0x20000736
 800293c:	2000073a 	.word	0x2000073a
 8002940:	20000718 	.word	0x20000718
 8002944:	20000704 	.word	0x20000704
 8002948:	200005c8 	.word	0x200005c8
 800294c:	2000060c 	.word	0x2000060c

08002950 <UARTstateManagement>:

void UARTstateManagement(uint8_t *Mainbuffer)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	switch (UARTState)
 8002958:	4bad      	ldr	r3, [pc, #692]	; (8002c10 <UARTstateManagement+0x2c0>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d01d      	beq.n	800299c <UARTstateManagement+0x4c>
 8002960:	2b02      	cmp	r3, #2
 8002962:	f300 835a 	bgt.w	800301a <UARTstateManagement+0x6ca>
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 8354 	beq.w	8003014 <UARTstateManagement+0x6c4>
 800296c:	2b01      	cmp	r3, #1
 800296e:	d000      	beq.n	8002972 <UARTstateManagement+0x22>
					homingFlag = 1;
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
					break;
				}
	}
}
 8002970:	e353      	b.n	800301a <UARTstateManagement+0x6ca>
			if(Mainbuffer[oldPos] == 0b10010010)
 8002972:	4ba8      	ldr	r3, [pc, #672]	; (8002c14 <UARTstateManagement+0x2c4>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b92      	cmp	r3, #146	; 0x92
 8002980:	f040 834a 	bne.w	8003018 <UARTstateManagement+0x6c8>
				modeNo = 2;
 8002984:	4ba4      	ldr	r3, [pc, #656]	; (8002c18 <UARTstateManagement+0x2c8>)
 8002986:	2202      	movs	r2, #2
 8002988:	701a      	strb	r2, [r3, #0]
				UARTState = MCUConnect;
 800298a:	4ba1      	ldr	r3, [pc, #644]	; (8002c10 <UARTstateManagement+0x2c0>)
 800298c:	2202      	movs	r2, #2
 800298e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8002990:	2202      	movs	r2, #2
 8002992:	49a2      	ldr	r1, [pc, #648]	; (8002c1c <UARTstateManagement+0x2cc>)
 8002994:	48a2      	ldr	r0, [pc, #648]	; (8002c20 <UARTstateManagement+0x2d0>)
 8002996:	f006 f8d5 	bl	8008b44 <HAL_UART_Transmit_DMA>
			break;
 800299a:	e33d      	b.n	8003018 <UARTstateManagement+0x6c8>
			stateSwitch = modeByte;
 800299c:	4ba1      	ldr	r3, [pc, #644]	; (8002c24 <UARTstateManagement+0x2d4>)
 800299e:	781a      	ldrb	r2, [r3, #0]
 80029a0:	4ba1      	ldr	r3, [pc, #644]	; (8002c28 <UARTstateManagement+0x2d8>)
 80029a2:	701a      	strb	r2, [r3, #0]
			switch (stateSwitch)
 80029a4:	4ba0      	ldr	r3, [pc, #640]	; (8002c28 <UARTstateManagement+0x2d8>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	3b91      	subs	r3, #145	; 0x91
 80029aa:	2b0d      	cmp	r3, #13
 80029ac:	f200 8335 	bhi.w	800301a <UARTstateManagement+0x6ca>
 80029b0:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <UARTstateManagement+0x68>)
 80029b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b6:	bf00      	nop
 80029b8:	080029f1 	.word	0x080029f1
 80029bc:	08002a03 	.word	0x08002a03
 80029c0:	08002a1b 	.word	0x08002a1b
 80029c4:	08002a33 	.word	0x08002a33
 80029c8:	08002a93 	.word	0x08002a93
 80029cc:	08002b01 	.word	0x08002b01
 80029d0:	08002b39 	.word	0x08002b39
 80029d4:	08002c4d 	.word	0x08002c4d
 80029d8:	08002c91 	.word	0x08002c91
 80029dc:	08002d37 	.word	0x08002d37
 80029e0:	08002ead 	.word	0x08002ead
 80029e4:	08002fa3 	.word	0x08002fa3
 80029e8:	08002fd3 	.word	0x08002fd3
 80029ec:	08002feb 	.word	0x08002feb
					modeNo = 1;
 80029f0:	4b89      	ldr	r3, [pc, #548]	; (8002c18 <UARTstateManagement+0x2c8>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80029f6:	2202      	movs	r2, #2
 80029f8:	4988      	ldr	r1, [pc, #544]	; (8002c1c <UARTstateManagement+0x2cc>)
 80029fa:	4889      	ldr	r0, [pc, #548]	; (8002c20 <UARTstateManagement+0x2d0>)
 80029fc:	f006 f8a2 	bl	8008b44 <HAL_UART_Transmit_DMA>
					break;
 8002a00:	e30b      	b.n	800301a <UARTstateManagement+0x6ca>
					modeNo = 2;
 8002a02:	4b85      	ldr	r3, [pc, #532]	; (8002c18 <UARTstateManagement+0x2c8>)
 8002a04:	2202      	movs	r2, #2
 8002a06:	701a      	strb	r2, [r3, #0]
					UARTState = MCUConnect;
 8002a08:	4b81      	ldr	r3, [pc, #516]	; (8002c10 <UARTstateManagement+0x2c0>)
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8002a0e:	2202      	movs	r2, #2
 8002a10:	4982      	ldr	r1, [pc, #520]	; (8002c1c <UARTstateManagement+0x2cc>)
 8002a12:	4883      	ldr	r0, [pc, #524]	; (8002c20 <UARTstateManagement+0x2d0>)
 8002a14:	f006 f896 	bl	8008b44 <HAL_UART_Transmit_DMA>
					break;
 8002a18:	e2ff      	b.n	800301a <UARTstateManagement+0x6ca>
					modeNo = 3;
 8002a1a:	4b7f      	ldr	r3, [pc, #508]	; (8002c18 <UARTstateManagement+0x2c8>)
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	701a      	strb	r2, [r3, #0]
					UARTState = MCUDisconnect;
 8002a20:	4b7b      	ldr	r3, [pc, #492]	; (8002c10 <UARTstateManagement+0x2c0>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8002a26:	2202      	movs	r2, #2
 8002a28:	497c      	ldr	r1, [pc, #496]	; (8002c1c <UARTstateManagement+0x2cc>)
 8002a2a:	487d      	ldr	r0, [pc, #500]	; (8002c20 <UARTstateManagement+0x2d0>)
 8002a2c:	f006 f88a 	bl	8008b44 <HAL_UART_Transmit_DMA>
					break;
 8002a30:	e2f3      	b.n	800301a <UARTstateManagement+0x6ca>
					modeNo = 4;
 8002a32:	4b79      	ldr	r3, [pc, #484]	; (8002c18 <UARTstateManagement+0x2c8>)
 8002a34:	2204      	movs	r2, #4
 8002a36:	701a      	strb	r2, [r3, #0]
					uartVelo = (float)((Mainbuffer[oldPos + 2 % MainBuf_SIZE])/255.0)*10.0;
 8002a38:	4b76      	ldr	r3, [pc, #472]	; (8002c14 <UARTstateManagement+0x2c4>)
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd fd19 	bl	800047c <__aeabi_i2d>
 8002a4a:	a36d      	add	r3, pc, #436	; (adr r3, 8002c00 <UARTstateManagement+0x2b0>)
 8002a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a50:	f7fd fea8 	bl	80007a4 <__aeabi_ddiv>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f7fd ffaa 	bl	80009b4 <__aeabi_d2f>
 8002a60:	ee07 0a10 	vmov	s14, r0
 8002a64:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6c:	4b6f      	ldr	r3, [pc, #444]	; (8002c2c <UARTstateManagement+0x2dc>)
 8002a6e:	edc3 7a00 	vstr	s15, [r3]
					Robot.QVMax = uartVelo*6.0;
 8002a72:	4b6e      	ldr	r3, [pc, #440]	; (8002c2c <UARTstateManagement+0x2dc>)
 8002a74:	edd3 7a00 	vldr	s15, [r3]
 8002a78:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a80:	4b6b      	ldr	r3, [pc, #428]	; (8002c30 <UARTstateManagement+0x2e0>)
 8002a82:	edc3 7a08 	vstr	s15, [r3, #32]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8002a86:	2202      	movs	r2, #2
 8002a88:	4964      	ldr	r1, [pc, #400]	; (8002c1c <UARTstateManagement+0x2cc>)
 8002a8a:	4865      	ldr	r0, [pc, #404]	; (8002c20 <UARTstateManagement+0x2d0>)
 8002a8c:	f006 f85a 	bl	8008b44 <HAL_UART_Transmit_DMA>
					break;
 8002a90:	e2c3      	b.n	800301a <UARTstateManagement+0x6ca>
					modeNo = 5;
 8002a92:	4b61      	ldr	r3, [pc, #388]	; (8002c18 <UARTstateManagement+0x2c8>)
 8002a94:	2205      	movs	r2, #5
 8002a96:	701a      	strb	r2, [r3, #0]
					goalFlag = 1;
 8002a98:	4b66      	ldr	r3, [pc, #408]	; (8002c34 <UARTstateManagement+0x2e4>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	701a      	strb	r2, [r3, #0]
					goalAmount = 1;
 8002a9e:	4b66      	ldr	r3, [pc, #408]	; (8002c38 <UARTstateManagement+0x2e8>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	701a      	strb	r2, [r3, #0]
					uartPos = (float)((((Mainbuffer[oldPos + 1 % MainBuf_SIZE] << 8) | Mainbuffer[oldPos + 2 % MainBuf_SIZE])*360.0)/62800);
 8002aa4:	4b5b      	ldr	r3, [pc, #364]	; (8002c14 <UARTstateManagement+0x2c4>)
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <UARTstateManagement+0x2c4>)
 8002ab4:	8812      	ldrh	r2, [r2, #0]
 8002ab6:	3202      	adds	r2, #2
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	440a      	add	r2, r1
 8002abc:	7812      	ldrb	r2, [r2, #0]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fcdb 	bl	800047c <__aeabi_i2d>
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	4b5c      	ldr	r3, [pc, #368]	; (8002c3c <UARTstateManagement+0x2ec>)
 8002acc:	f7fd fd40 	bl	8000550 <__aeabi_dmul>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	a34b      	add	r3, pc, #300	; (adr r3, 8002c08 <UARTstateManagement+0x2b8>)
 8002ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ade:	f7fd fe61 	bl	80007a4 <__aeabi_ddiv>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f7fd ff63 	bl	80009b4 <__aeabi_d2f>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4a53      	ldr	r2, [pc, #332]	; (8002c40 <UARTstateManagement+0x2f0>)
 8002af2:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8002af4:	2202      	movs	r2, #2
 8002af6:	4949      	ldr	r1, [pc, #292]	; (8002c1c <UARTstateManagement+0x2cc>)
 8002af8:	4849      	ldr	r0, [pc, #292]	; (8002c20 <UARTstateManagement+0x2d0>)
 8002afa:	f006 f823 	bl	8008b44 <HAL_UART_Transmit_DMA>
					break;
 8002afe:	e28c      	b.n	800301a <UARTstateManagement+0x6ca>
					modeNo = 6;
 8002b00:	4b45      	ldr	r3, [pc, #276]	; (8002c18 <UARTstateManagement+0x2c8>)
 8002b02:	2206      	movs	r2, #6
 8002b04:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8002b06:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <UARTstateManagement+0x2e4>)
 8002b08:	2202      	movs	r2, #2
 8002b0a:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8002b0c:	220f      	movs	r2, #15
 8002b0e:	2100      	movs	r1, #0
 8002b10:	484c      	ldr	r0, [pc, #304]	; (8002c44 <UARTstateManagement+0x2f4>)
 8002b12:	f007 fcef 	bl	800a4f4 <memset>
					goalAmount = 1;
 8002b16:	4b48      	ldr	r3, [pc, #288]	; (8002c38 <UARTstateManagement+0x2e8>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
					uartGoal[0] = Mainbuffer[oldPos + 2 % MainBuf_SIZE];
 8002b1c:	4b3d      	ldr	r3, [pc, #244]	; (8002c14 <UARTstateManagement+0x2c4>)
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	3302      	adds	r3, #2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	781a      	ldrb	r2, [r3, #0]
 8002b28:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <UARTstateManagement+0x2f4>)
 8002b2a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	493b      	ldr	r1, [pc, #236]	; (8002c1c <UARTstateManagement+0x2cc>)
 8002b30:	483b      	ldr	r0, [pc, #236]	; (8002c20 <UARTstateManagement+0x2d0>)
 8002b32:	f006 f807 	bl	8008b44 <HAL_UART_Transmit_DMA>
					break;
 8002b36:	e270      	b.n	800301a <UARTstateManagement+0x6ca>
					modeNo = 7;
 8002b38:	4b37      	ldr	r3, [pc, #220]	; (8002c18 <UARTstateManagement+0x2c8>)
 8002b3a:	2207      	movs	r2, #7
 8002b3c:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8002b3e:	4b3d      	ldr	r3, [pc, #244]	; (8002c34 <UARTstateManagement+0x2e4>)
 8002b40:	2202      	movs	r2, #2
 8002b42:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8002b44:	220f      	movs	r2, #15
 8002b46:	2100      	movs	r1, #0
 8002b48:	483e      	ldr	r0, [pc, #248]	; (8002c44 <UARTstateManagement+0x2f4>)
 8002b4a:	f007 fcd3 	bl	800a4f4 <memset>
					goalAmount = Mainbuffer[oldPos + 1 % MainBuf_SIZE];
 8002b4e:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <UARTstateManagement+0x2c4>)
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	4413      	add	r3, r2
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	4b37      	ldr	r3, [pc, #220]	; (8002c38 <UARTstateManagement+0x2e8>)
 8002b5c:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	e03a      	b.n	8002bda <UARTstateManagement+0x28a>
						uartGoal[0+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] & 15; // low 8 bit (last 4 bit)
 8002b64:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <UARTstateManagement+0x2c4>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1c99      	adds	r1, r3, #2
 8002b6e:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <UARTstateManagement+0x2f8>)
 8002b70:	fb83 2301 	smull	r2, r3, r3, r1
 8002b74:	10da      	asrs	r2, r3, #3
 8002b76:	17cb      	asrs	r3, r1, #31
 8002b78:	1ad2      	subs	r2, r2, r3
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	1aca      	subs	r2, r1, r3
 8002b84:	1883      	adds	r3, r0, r2
 8002b86:	461a      	mov	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	f002 020f 	and.w	r2, r2, #15
 8002b96:	b2d1      	uxtb	r1, r2
 8002b98:	4a2a      	ldr	r2, [pc, #168]	; (8002c44 <UARTstateManagement+0x2f4>)
 8002b9a:	54d1      	strb	r1, [r2, r3]
						uartGoal[1+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] >> 4; // high 8 bit (first 4 bit)
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <UARTstateManagement+0x2c4>)
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1c99      	adds	r1, r3, #2
 8002ba6:	4b28      	ldr	r3, [pc, #160]	; (8002c48 <UARTstateManagement+0x2f8>)
 8002ba8:	fb83 2301 	smull	r2, r3, r3, r1
 8002bac:	10da      	asrs	r2, r3, #3
 8002bae:	17cb      	asrs	r3, r1, #31
 8002bb0:	1ad2      	subs	r2, r2, r3
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	1aca      	subs	r2, r1, r3
 8002bbc:	1883      	adds	r3, r0, r2
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	781a      	ldrb	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	3301      	adds	r3, #1
 8002bcc:	0912      	lsrs	r2, r2, #4
 8002bce:	b2d1      	uxtb	r1, r2
 8002bd0:	4a1c      	ldr	r2, [pc, #112]	; (8002c44 <UARTstateManagement+0x2f4>)
 8002bd2:	54d1      	strb	r1, [r2, r3]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <UARTstateManagement+0x2e8>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	3301      	adds	r3, #1
 8002be0:	0fda      	lsrs	r2, r3, #31
 8002be2:	4413      	add	r3, r2
 8002be4:	105b      	asrs	r3, r3, #1
 8002be6:	461a      	mov	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4293      	cmp	r3, r2
 8002bec:	dbba      	blt.n	8002b64 <UARTstateManagement+0x214>
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8002bee:	2202      	movs	r2, #2
 8002bf0:	490a      	ldr	r1, [pc, #40]	; (8002c1c <UARTstateManagement+0x2cc>)
 8002bf2:	480b      	ldr	r0, [pc, #44]	; (8002c20 <UARTstateManagement+0x2d0>)
 8002bf4:	f005 ffa6 	bl	8008b44 <HAL_UART_Transmit_DMA>
					break;
 8002bf8:	e20f      	b.n	800301a <UARTstateManagement+0x6ca>
 8002bfa:	bf00      	nop
 8002bfc:	f3af 8000 	nop.w
 8002c00:	00000000 	.word	0x00000000
 8002c04:	406fe000 	.word	0x406fe000
 8002c08:	00000000 	.word	0x00000000
 8002c0c:	40eeaa00 	.word	0x40eeaa00
 8002c10:	20000700 	.word	0x20000700
 8002c14:	20000736 	.word	0x20000736
 8002c18:	20000760 	.word	0x20000760
 8002c1c:	2000002c 	.word	0x2000002c
 8002c20:	200005c8 	.word	0x200005c8
 8002c24:	20000761 	.word	0x20000761
 8002c28:	20000734 	.word	0x20000734
 8002c2c:	20000740 	.word	0x20000740
 8002c30:	200006cc 	.word	0x200006cc
 8002c34:	20000759 	.word	0x20000759
 8002c38:	20000757 	.word	0x20000757
 8002c3c:	40768000 	.word	0x40768000
 8002c40:	20000744 	.word	0x20000744
 8002c44:	20000748 	.word	0x20000748
 8002c48:	66666667 	.word	0x66666667
					modeNo = 8;
 8002c4c:	4b8a      	ldr	r3, [pc, #552]	; (8002e78 <UARTstateManagement+0x528>)
 8002c4e:	2208      	movs	r2, #8
 8002c50:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 0){
 8002c52:	4b8a      	ldr	r3, [pc, #552]	; (8002e7c <UARTstateManagement+0x52c>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d114      	bne.n	8002c84 <UARTstateManagement+0x334>
					goingToGoalFlag = 0;
 8002c5a:	4b89      	ldr	r3, [pc, #548]	; (8002e80 <UARTstateManagement+0x530>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
					Robot.MotorIsOn = 1;
 8002c60:	4b88      	ldr	r3, [pc, #544]	; (8002e84 <UARTstateManagement+0x534>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					Robot.flagStartTime = 1;
 8002c68:	4b86      	ldr	r3, [pc, #536]	; (8002e84 <UARTstateManagement+0x534>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					Robot.RunningFlag = 1;
 8002c70:	4b84      	ldr	r3, [pc, #528]	; (8002e84 <UARTstateManagement+0x534>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					doingTaskFlag = 1;
 8002c78:	4b80      	ldr	r3, [pc, #512]	; (8002e7c <UARTstateManagement+0x52c>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
					goalIDX = 0;
 8002c7e:	4b82      	ldr	r3, [pc, #520]	; (8002e88 <UARTstateManagement+0x538>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8002c84:	2202      	movs	r2, #2
 8002c86:	4981      	ldr	r1, [pc, #516]	; (8002e8c <UARTstateManagement+0x53c>)
 8002c88:	4881      	ldr	r0, [pc, #516]	; (8002e90 <UARTstateManagement+0x540>)
 8002c8a:	f005 ff5b 	bl	8008b44 <HAL_UART_Transmit_DMA>
					break;
 8002c8e:	e1c4      	b.n	800301a <UARTstateManagement+0x6ca>
					modeNo = 9;
 8002c90:	4b79      	ldr	r3, [pc, #484]	; (8002e78 <UARTstateManagement+0x528>)
 8002c92:	2209      	movs	r2, #9
 8002c94:	701a      	strb	r2, [r3, #0]
					Robot.CurrentStation = 0;
 8002c96:	4b7b      	ldr	r3, [pc, #492]	; (8002e84 <UARTstateManagement+0x534>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	811a      	strh	r2, [r3, #8]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8002c9c:	4b77      	ldr	r3, [pc, #476]	; (8002e7c <UARTstateManagement+0x52c>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d004      	beq.n	8002cae <UARTstateManagement+0x35e>
 8002ca4:	4b77      	ldr	r3, [pc, #476]	; (8002e84 <UARTstateManagement+0x534>)
 8002ca6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d11f      	bne.n	8002cee <UARTstateManagement+0x39e>
 8002cae:	4b77      	ldr	r3, [pc, #476]	; (8002e8c <UARTstateManagement+0x53c>)
 8002cb0:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 8002cb2:	4b78      	ldr	r3, [pc, #480]	; (8002e94 <UARTstateManagement+0x544>)
 8002cb4:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 153; // start-mode
 8002cb6:	4b77      	ldr	r3, [pc, #476]	; (8002e94 <UARTstateManagement+0x544>)
 8002cb8:	2299      	movs	r2, #153	; 0x99
 8002cba:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = Robot.CurrentStation; // set current goal
 8002cbc:	4b71      	ldr	r3, [pc, #452]	; (8002e84 <UARTstateManagement+0x534>)
 8002cbe:	891b      	ldrh	r3, [r3, #8]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4b74      	ldr	r3, [pc, #464]	; (8002e94 <UARTstateManagement+0x544>)
 8002cc4:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 8002cc6:	4b73      	ldr	r3, [pc, #460]	; (8002e94 <UARTstateManagement+0x544>)
 8002cc8:	789a      	ldrb	r2, [r3, #2]
 8002cca:	4b72      	ldr	r3, [pc, #456]	; (8002e94 <UARTstateManagement+0x544>)
 8002ccc:	78db      	ldrb	r3, [r3, #3]
 8002cce:	4413      	add	r3, r2
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	4b70      	ldr	r3, [pc, #448]	; (8002e94 <UARTstateManagement+0x544>)
 8002cd4:	791b      	ldrb	r3, [r3, #4]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4b6d      	ldr	r3, [pc, #436]	; (8002e94 <UARTstateManagement+0x544>)
 8002ce0:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8002ce2:	2206      	movs	r2, #6
 8002ce4:	496b      	ldr	r1, [pc, #428]	; (8002e94 <UARTstateManagement+0x544>)
 8002ce6:	486a      	ldr	r0, [pc, #424]	; (8002e90 <UARTstateManagement+0x540>)
 8002ce8:	f005 ff2c 	bl	8008b44 <HAL_UART_Transmit_DMA>
					break;
 8002cec:	e195      	b.n	800301a <UARTstateManagement+0x6ca>
 8002cee:	4b6a      	ldr	r3, [pc, #424]	; (8002e98 <UARTstateManagement+0x548>)
 8002cf0:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8002cf2:	4b68      	ldr	r3, [pc, #416]	; (8002e94 <UARTstateManagement+0x544>)
 8002cf4:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 8002cf6:	4a69      	ldr	r2, [pc, #420]	; (8002e9c <UARTstateManagement+0x54c>)
 8002cf8:	4b64      	ldr	r3, [pc, #400]	; (8002e8c <UARTstateManagement+0x53c>)
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 153; // start-mode
 8002cfe:	4b65      	ldr	r3, [pc, #404]	; (8002e94 <UARTstateManagement+0x544>)
 8002d00:	2299      	movs	r2, #153	; 0x99
 8002d02:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = Robot.CurrentStation; // set currentStation
 8002d04:	4b5f      	ldr	r3, [pc, #380]	; (8002e84 <UARTstateManagement+0x534>)
 8002d06:	891b      	ldrh	r3, [r3, #8]
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	4b62      	ldr	r3, [pc, #392]	; (8002e94 <UARTstateManagement+0x544>)
 8002d0c:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8002d0e:	4b61      	ldr	r3, [pc, #388]	; (8002e94 <UARTstateManagement+0x544>)
 8002d10:	791a      	ldrb	r2, [r3, #4]
 8002d12:	4b60      	ldr	r3, [pc, #384]	; (8002e94 <UARTstateManagement+0x544>)
 8002d14:	795b      	ldrb	r3, [r3, #5]
 8002d16:	4413      	add	r3, r2
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	4b5e      	ldr	r3, [pc, #376]	; (8002e94 <UARTstateManagement+0x544>)
 8002d1c:	799b      	ldrb	r3, [r3, #6]
 8002d1e:	4413      	add	r3, r2
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4b5b      	ldr	r3, [pc, #364]	; (8002e94 <UARTstateManagement+0x544>)
 8002d28:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 8002d2a:	2208      	movs	r2, #8
 8002d2c:	4959      	ldr	r1, [pc, #356]	; (8002e94 <UARTstateManagement+0x544>)
 8002d2e:	4858      	ldr	r0, [pc, #352]	; (8002e90 <UARTstateManagement+0x540>)
 8002d30:	f005 ff08 	bl	8008b44 <HAL_UART_Transmit_DMA>
					break;
 8002d34:	e171      	b.n	800301a <UARTstateManagement+0x6ca>
					modeNo = 10;
 8002d36:	4b50      	ldr	r3, [pc, #320]	; (8002e78 <UARTstateManagement+0x528>)
 8002d38:	220a      	movs	r2, #10
 8002d3a:	701a      	strb	r2, [r3, #0]
					posData = (uint16_t)(((((Robot.Position)*10000.0)*M_PI)/180.0));
 8002d3c:	4b51      	ldr	r3, [pc, #324]	; (8002e84 <UARTstateManagement+0x534>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fd fbad 	bl	80004a0 <__aeabi_f2d>
 8002d46:	a348      	add	r3, pc, #288	; (adr r3, 8002e68 <UARTstateManagement+0x518>)
 8002d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4c:	f7fd fc00 	bl	8000550 <__aeabi_dmul>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4610      	mov	r0, r2
 8002d56:	4619      	mov	r1, r3
 8002d58:	a345      	add	r3, pc, #276	; (adr r3, 8002e70 <UARTstateManagement+0x520>)
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	f7fd fbf7 	bl	8000550 <__aeabi_dmul>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4610      	mov	r0, r2
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	4b4c      	ldr	r3, [pc, #304]	; (8002ea0 <UARTstateManagement+0x550>)
 8002d70:	f7fd fd18 	bl	80007a4 <__aeabi_ddiv>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f7fd fdfa 	bl	8000974 <__aeabi_d2uiz>
 8002d80:	4603      	mov	r3, r0
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <UARTstateManagement+0x554>)
 8002d86:	801a      	strh	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8002d88:	4b3c      	ldr	r3, [pc, #240]	; (8002e7c <UARTstateManagement+0x52c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d004      	beq.n	8002d9a <UARTstateManagement+0x44a>
 8002d90:	4b3c      	ldr	r3, [pc, #240]	; (8002e84 <UARTstateManagement+0x534>)
 8002d92:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d126      	bne.n	8002de8 <UARTstateManagement+0x498>
 8002d9a:	4b3c      	ldr	r3, [pc, #240]	; (8002e8c <UARTstateManagement+0x53c>)
 8002d9c:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 8002d9e:	4b3d      	ldr	r3, [pc, #244]	; (8002e94 <UARTstateManagement+0x544>)
 8002da0:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 154; // start-mode
 8002da2:	4b3c      	ldr	r3, [pc, #240]	; (8002e94 <UARTstateManagement+0x544>)
 8002da4:	229a      	movs	r2, #154	; 0x9a
 8002da6:	709a      	strb	r2, [r3, #2]
						TxBuf[3] = (posData) >> 8 ; // set high byte posData
 8002da8:	4b3e      	ldr	r3, [pc, #248]	; (8002ea4 <UARTstateManagement+0x554>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <UARTstateManagement+0x544>)
 8002db4:	70da      	strb	r2, [r3, #3]
						TxBuf[4] = (posData) & 0xff; // set low byte posData
 8002db6:	4b3b      	ldr	r3, [pc, #236]	; (8002ea4 <UARTstateManagement+0x554>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	4b35      	ldr	r3, [pc, #212]	; (8002e94 <UARTstateManagement+0x544>)
 8002dbe:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 8002dc0:	4b34      	ldr	r3, [pc, #208]	; (8002e94 <UARTstateManagement+0x544>)
 8002dc2:	789a      	ldrb	r2, [r3, #2]
 8002dc4:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <UARTstateManagement+0x544>)
 8002dc6:	78db      	ldrb	r3, [r3, #3]
 8002dc8:	4413      	add	r3, r2
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	4b31      	ldr	r3, [pc, #196]	; (8002e94 <UARTstateManagement+0x544>)
 8002dce:	791b      	ldrb	r3, [r3, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <UARTstateManagement+0x544>)
 8002dda:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8002ddc:	2206      	movs	r2, #6
 8002dde:	492d      	ldr	r1, [pc, #180]	; (8002e94 <UARTstateManagement+0x544>)
 8002de0:	482b      	ldr	r0, [pc, #172]	; (8002e90 <UARTstateManagement+0x540>)
 8002de2:	f005 feaf 	bl	8008b44 <HAL_UART_Transmit_DMA>
					break;
 8002de6:	e118      	b.n	800301a <UARTstateManagement+0x6ca>
 8002de8:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <UARTstateManagement+0x548>)
 8002dea:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8002dec:	4b29      	ldr	r3, [pc, #164]	; (8002e94 <UARTstateManagement+0x544>)
 8002dee:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 8002df0:	4a2a      	ldr	r2, [pc, #168]	; (8002e9c <UARTstateManagement+0x54c>)
 8002df2:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <UARTstateManagement+0x53c>)
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 154; // start-mode
 8002df8:	4b26      	ldr	r3, [pc, #152]	; (8002e94 <UARTstateManagement+0x544>)
 8002dfa:	229a      	movs	r2, #154	; 0x9a
 8002dfc:	711a      	strb	r2, [r3, #4]
						if(homingFlag == 1 && Robot.Position <= 0.5){
 8002dfe:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <UARTstateManagement+0x558>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d110      	bne.n	8002e28 <UARTstateManagement+0x4d8>
 8002e06:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <UARTstateManagement+0x534>)
 8002e08:	edd3 7a00 	vldr	s15, [r3]
 8002e0c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e18:	d806      	bhi.n	8002e28 <UARTstateManagement+0x4d8>
							TxBuf[5] = 0; // set high byte posData
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <UARTstateManagement+0x544>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = 0; // set low byte posData
 8002e20:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <UARTstateManagement+0x544>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	719a      	strb	r2, [r3, #6]
 8002e26:	e00b      	b.n	8002e40 <UARTstateManagement+0x4f0>
							TxBuf[5] = (posData) >> 8 ; // set high byte posData
 8002e28:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <UARTstateManagement+0x554>)
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <UARTstateManagement+0x544>)
 8002e34:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = (posData) & 0xff; // set low byte posData
 8002e36:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <UARTstateManagement+0x554>)
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <UARTstateManagement+0x544>)
 8002e3e:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8002e40:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <UARTstateManagement+0x544>)
 8002e42:	791a      	ldrb	r2, [r3, #4]
 8002e44:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <UARTstateManagement+0x544>)
 8002e46:	795b      	ldrb	r3, [r3, #5]
 8002e48:	4413      	add	r3, r2
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <UARTstateManagement+0x544>)
 8002e4e:	799b      	ldrb	r3, [r3, #6]
 8002e50:	4413      	add	r3, r2
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <UARTstateManagement+0x544>)
 8002e5a:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	490d      	ldr	r1, [pc, #52]	; (8002e94 <UARTstateManagement+0x544>)
 8002e60:	480b      	ldr	r0, [pc, #44]	; (8002e90 <UARTstateManagement+0x540>)
 8002e62:	f005 fe6f 	bl	8008b44 <HAL_UART_Transmit_DMA>
					break;
 8002e66:	e0d8      	b.n	800301a <UARTstateManagement+0x6ca>
 8002e68:	00000000 	.word	0x00000000
 8002e6c:	40c38800 	.word	0x40c38800
 8002e70:	54442d18 	.word	0x54442d18
 8002e74:	400921fb 	.word	0x400921fb
 8002e78:	20000760 	.word	0x20000760
 8002e7c:	2000075c 	.word	0x2000075c
 8002e80:	2000075d 	.word	0x2000075d
 8002e84:	200006cc 	.word	0x200006cc
 8002e88:	20000758 	.word	0x20000758
 8002e8c:	2000002c 	.word	0x2000002c
 8002e90:	200005c8 	.word	0x200005c8
 8002e94:	2000072c 	.word	0x2000072c
 8002e98:	20000030 	.word	0x20000030
 8002e9c:	2000072e 	.word	0x2000072e
 8002ea0:	40668000 	.word	0x40668000
 8002ea4:	2000073c 	.word	0x2000073c
 8002ea8:	2000075b 	.word	0x2000075b
					modeNo = 11;
 8002eac:	4b60      	ldr	r3, [pc, #384]	; (8003030 <UARTstateManagement+0x6e0>)
 8002eae:	220b      	movs	r2, #11
 8002eb0:	701a      	strb	r2, [r3, #0]
					veloData = (((AbsVal(Robot.Velocity)/6.0)*255.0)/10.0);
 8002eb2:	4b60      	ldr	r3, [pc, #384]	; (8003034 <UARTstateManagement+0x6e4>)
 8002eb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ebc:	f7fe faf8 	bl	80014b0 <AbsVal>
 8002ec0:	ee10 3a10 	vmov	r3, s0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fd faeb 	bl	80004a0 <__aeabi_f2d>
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	4b5a      	ldr	r3, [pc, #360]	; (8003038 <UARTstateManagement+0x6e8>)
 8002ed0:	f7fd fc68 	bl	80007a4 <__aeabi_ddiv>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	a352      	add	r3, pc, #328	; (adr r3, 8003028 <UARTstateManagement+0x6d8>)
 8002ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee2:	f7fd fb35 	bl	8000550 <__aeabi_dmul>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4610      	mov	r0, r2
 8002eec:	4619      	mov	r1, r3
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	4b52      	ldr	r3, [pc, #328]	; (800303c <UARTstateManagement+0x6ec>)
 8002ef4:	f7fd fc56 	bl	80007a4 <__aeabi_ddiv>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	f7fd fd38 	bl	8000974 <__aeabi_d2uiz>
 8002f04:	4603      	mov	r3, r0
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	4b4d      	ldr	r3, [pc, #308]	; (8003040 <UARTstateManagement+0x6f0>)
 8002f0a:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8002f0c:	4b4d      	ldr	r3, [pc, #308]	; (8003044 <UARTstateManagement+0x6f4>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d004      	beq.n	8002f1e <UARTstateManagement+0x5ce>
 8002f14:	4b47      	ldr	r3, [pc, #284]	; (8003034 <UARTstateManagement+0x6e4>)
 8002f16:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d11e      	bne.n	8002f5c <UARTstateManagement+0x60c>
 8002f1e:	4b4a      	ldr	r3, [pc, #296]	; (8003048 <UARTstateManagement+0x6f8>)
 8002f20:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 8002f22:	4b4a      	ldr	r3, [pc, #296]	; (800304c <UARTstateManagement+0x6fc>)
 8002f24:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 155;
 8002f26:	4b49      	ldr	r3, [pc, #292]	; (800304c <UARTstateManagement+0x6fc>)
 8002f28:	229b      	movs	r2, #155	; 0x9b
 8002f2a:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = veloData; // set low byte posData
 8002f2c:	4b44      	ldr	r3, [pc, #272]	; (8003040 <UARTstateManagement+0x6f0>)
 8002f2e:	781a      	ldrb	r2, [r3, #0]
 8002f30:	4b46      	ldr	r3, [pc, #280]	; (800304c <UARTstateManagement+0x6fc>)
 8002f32:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 8002f34:	4b45      	ldr	r3, [pc, #276]	; (800304c <UARTstateManagement+0x6fc>)
 8002f36:	789a      	ldrb	r2, [r3, #2]
 8002f38:	4b44      	ldr	r3, [pc, #272]	; (800304c <UARTstateManagement+0x6fc>)
 8002f3a:	78db      	ldrb	r3, [r3, #3]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	4b42      	ldr	r3, [pc, #264]	; (800304c <UARTstateManagement+0x6fc>)
 8002f42:	791b      	ldrb	r3, [r3, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	4b3f      	ldr	r3, [pc, #252]	; (800304c <UARTstateManagement+0x6fc>)
 8002f4e:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8002f50:	2206      	movs	r2, #6
 8002f52:	493e      	ldr	r1, [pc, #248]	; (800304c <UARTstateManagement+0x6fc>)
 8002f54:	483e      	ldr	r0, [pc, #248]	; (8003050 <UARTstateManagement+0x700>)
 8002f56:	f005 fdf5 	bl	8008b44 <HAL_UART_Transmit_DMA>
					break;
 8002f5a:	e05e      	b.n	800301a <UARTstateManagement+0x6ca>
 8002f5c:	4b3d      	ldr	r3, [pc, #244]	; (8003054 <UARTstateManagement+0x704>)
 8002f5e:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8002f60:	4b3a      	ldr	r3, [pc, #232]	; (800304c <UARTstateManagement+0x6fc>)
 8002f62:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 8002f64:	4a3c      	ldr	r2, [pc, #240]	; (8003058 <UARTstateManagement+0x708>)
 8002f66:	4b38      	ldr	r3, [pc, #224]	; (8003048 <UARTstateManagement+0x6f8>)
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 155; // start-mode
 8002f6c:	4b37      	ldr	r3, [pc, #220]	; (800304c <UARTstateManagement+0x6fc>)
 8002f6e:	229b      	movs	r2, #155	; 0x9b
 8002f70:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = veloData; // set low byte posData
 8002f72:	4b33      	ldr	r3, [pc, #204]	; (8003040 <UARTstateManagement+0x6f0>)
 8002f74:	781a      	ldrb	r2, [r3, #0]
 8002f76:	4b35      	ldr	r3, [pc, #212]	; (800304c <UARTstateManagement+0x6fc>)
 8002f78:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8002f7a:	4b34      	ldr	r3, [pc, #208]	; (800304c <UARTstateManagement+0x6fc>)
 8002f7c:	791a      	ldrb	r2, [r3, #4]
 8002f7e:	4b33      	ldr	r3, [pc, #204]	; (800304c <UARTstateManagement+0x6fc>)
 8002f80:	795b      	ldrb	r3, [r3, #5]
 8002f82:	4413      	add	r3, r2
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	4b31      	ldr	r3, [pc, #196]	; (800304c <UARTstateManagement+0x6fc>)
 8002f88:	799b      	ldrb	r3, [r3, #6]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	4b2e      	ldr	r3, [pc, #184]	; (800304c <UARTstateManagement+0x6fc>)
 8002f94:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 8002f96:	2208      	movs	r2, #8
 8002f98:	492c      	ldr	r1, [pc, #176]	; (800304c <UARTstateManagement+0x6fc>)
 8002f9a:	482d      	ldr	r0, [pc, #180]	; (8003050 <UARTstateManagement+0x700>)
 8002f9c:	f005 fdd2 	bl	8008b44 <HAL_UART_Transmit_DMA>
					break;
 8002fa0:	e03b      	b.n	800301a <UARTstateManagement+0x6ca>
					modeNo = 12;
 8002fa2:	4b23      	ldr	r3, [pc, #140]	; (8003030 <UARTstateManagement+0x6e0>)
 8002fa4:	220c      	movs	r2, #12
 8002fa6:	701a      	strb	r2, [r3, #0]
					RobotState = EndEff;
 8002fa8:	4b2c      	ldr	r3, [pc, #176]	; (800305c <UARTstateManagement+0x70c>)
 8002faa:	2203      	movs	r2, #3
 8002fac:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8002fae:	4b2c      	ldr	r3, [pc, #176]	; (8003060 <UARTstateManagement+0x710>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorReadFlag =  1;
 8002fb4:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <UARTstateManagement+0x714>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]
					EndEffState = CheckBeforRun;
 8002fba:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <UARTstateManagement+0x718>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
					endEffFlag = 1;
 8002fc0:	4b2a      	ldr	r3, [pc, #168]	; (800306c <UARTstateManagement+0x71c>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	491f      	ldr	r1, [pc, #124]	; (8003048 <UARTstateManagement+0x6f8>)
 8002fca:	4821      	ldr	r0, [pc, #132]	; (8003050 <UARTstateManagement+0x700>)
 8002fcc:	f005 fdba 	bl	8008b44 <HAL_UART_Transmit_DMA>
					break;
 8002fd0:	e023      	b.n	800301a <UARTstateManagement+0x6ca>
					modeNo = 13;
 8002fd2:	4b17      	ldr	r3, [pc, #92]	; (8003030 <UARTstateManagement+0x6e0>)
 8002fd4:	220d      	movs	r2, #13
 8002fd6:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 8002fd8:	4b24      	ldr	r3, [pc, #144]	; (800306c <UARTstateManagement+0x71c>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8002fde:	2202      	movs	r2, #2
 8002fe0:	4919      	ldr	r1, [pc, #100]	; (8003048 <UARTstateManagement+0x6f8>)
 8002fe2:	481b      	ldr	r0, [pc, #108]	; (8003050 <UARTstateManagement+0x700>)
 8002fe4:	f005 fdae 	bl	8008b44 <HAL_UART_Transmit_DMA>
					break;
 8002fe8:	e017      	b.n	800301a <UARTstateManagement+0x6ca>
					modeNo = 14;
 8002fea:	4b11      	ldr	r3, [pc, #68]	; (8003030 <UARTstateManagement+0x6e0>)
 8002fec:	220e      	movs	r2, #14
 8002fee:	701a      	strb	r2, [r3, #0]
					RobotRunToPositon(Robot.HomePositon,51.0);
 8002ff0:	4b10      	ldr	r3, [pc, #64]	; (8003034 <UARTstateManagement+0x6e4>)
 8002ff2:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ff6:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8003070 <UARTstateManagement+0x720>
 8002ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8002ffe:	f000 fbd5 	bl	80037ac <RobotRunToPositon>
					homingFlag = 1;
 8003002:	4b1c      	ldr	r3, [pc, #112]	; (8003074 <UARTstateManagement+0x724>)
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003008:	2202      	movs	r2, #2
 800300a:	490f      	ldr	r1, [pc, #60]	; (8003048 <UARTstateManagement+0x6f8>)
 800300c:	4810      	ldr	r0, [pc, #64]	; (8003050 <UARTstateManagement+0x700>)
 800300e:	f005 fd99 	bl	8008b44 <HAL_UART_Transmit_DMA>
					break;
 8003012:	e002      	b.n	800301a <UARTstateManagement+0x6ca>
			break;
 8003014:	bf00      	nop
 8003016:	e000      	b.n	800301a <UARTstateManagement+0x6ca>
			break;
 8003018:	bf00      	nop
}
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	f3af 8000 	nop.w
 8003028:	00000000 	.word	0x00000000
 800302c:	406fe000 	.word	0x406fe000
 8003030:	20000760 	.word	0x20000760
 8003034:	200006cc 	.word	0x200006cc
 8003038:	40180000 	.word	0x40180000
 800303c:	40240000 	.word	0x40240000
 8003040:	2000073e 	.word	0x2000073e
 8003044:	2000075c 	.word	0x2000075c
 8003048:	2000002c 	.word	0x2000002c
 800304c:	2000072c 	.word	0x2000072c
 8003050:	200005c8 	.word	0x200005c8
 8003054:	20000030 	.word	0x20000030
 8003058:	2000072e 	.word	0x2000072e
 800305c:	20000701 	.word	0x20000701
 8003060:	20000ad9 	.word	0x20000ad9
 8003064:	20000ad8 	.word	0x20000ad8
 8003068:	20000000 	.word	0x20000000
 800306c:	2000075a 	.word	0x2000075a
 8003070:	424c0000 	.word	0x424c0000
 8003074:	2000075b 	.word	0x2000075b

08003078 <RobotstateManagement>:

void RobotstateManagement()
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
	switch (RobotState)
 800307c:	4b8a      	ldr	r3, [pc, #552]	; (80032a8 <RobotstateManagement+0x230>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b04      	cmp	r3, #4
 8003082:	f200 810f 	bhi.w	80032a4 <RobotstateManagement+0x22c>
 8003086:	a201      	add	r2, pc, #4	; (adr r2, 800308c <RobotstateManagement+0x14>)
 8003088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308c:	0800329b 	.word	0x0800329b
 8003090:	080030a1 	.word	0x080030a1
 8003094:	080030f9 	.word	0x080030f9
 8003098:	0800329b 	.word	0x0800329b
 800309c:	08003285 	.word	0x08003285
//			RobotRunToPositon(360.0,51.0);
//			// Goto next State
//			RobotState = FindHome;
			break;
		case FindHome:
			if(Robot.RunningFlag == 0)
 80030a0:	4b82      	ldr	r3, [pc, #520]	; (80032ac <RobotstateManagement+0x234>)
 80030a2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 80f9 	bne.w	800329e <RobotstateManagement+0x226>
			{
				if(Robot.flagSethome == 2)
 80030ac:	4b7f      	ldr	r3, [pc, #508]	; (80032ac <RobotstateManagement+0x234>)
 80030ae:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d111      	bne.n	80030da <RobotstateManagement+0x62>
				{
					RobotRunToPositon(Robot.HomePositon,51.0);
 80030b6:	4b7d      	ldr	r3, [pc, #500]	; (80032ac <RobotstateManagement+0x234>)
 80030b8:	edd3 7a05 	vldr	s15, [r3, #20]
 80030bc:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80032b0 <RobotstateManagement+0x238>
 80030c0:	eeb0 0a67 	vmov.f32	s0, s15
 80030c4:	f000 fb72 	bl	80037ac <RobotRunToPositon>
					Robot.RunningFlag = 1;
 80030c8:	4b78      	ldr	r3, [pc, #480]	; (80032ac <RobotstateManagement+0x234>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					Robot.flagSethome = 3;
 80030d0:	4b76      	ldr	r3, [pc, #472]	; (80032ac <RobotstateManagement+0x234>)
 80030d2:	2203      	movs	r2, #3
 80030d4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					RobotResetAll();
					UARTState = MCUConnect;
					RobotState = NormalOperation;
				}
			}
			break;
 80030d8:	e0e1      	b.n	800329e <RobotstateManagement+0x226>
				else if(Robot.flagSethome == 3)
 80030da:	4b74      	ldr	r3, [pc, #464]	; (80032ac <RobotstateManagement+0x234>)
 80030dc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	f040 80dc 	bne.w	800329e <RobotstateManagement+0x226>
					RobotResetAll();
 80030e6:	f000 fb9b 	bl	8003820 <RobotResetAll>
					UARTState = MCUConnect;
 80030ea:	4b72      	ldr	r3, [pc, #456]	; (80032b4 <RobotstateManagement+0x23c>)
 80030ec:	2202      	movs	r2, #2
 80030ee:	701a      	strb	r2, [r3, #0]
					RobotState = NormalOperation;
 80030f0:	4b6d      	ldr	r3, [pc, #436]	; (80032a8 <RobotstateManagement+0x230>)
 80030f2:	2202      	movs	r2, #2
 80030f4:	701a      	strb	r2, [r3, #0]
			break;
 80030f6:	e0d2      	b.n	800329e <RobotstateManagement+0x226>
		case NormalOperation:
			if(notContinueFlag == 1){
 80030f8:	4b6f      	ldr	r3, [pc, #444]	; (80032b8 <RobotstateManagement+0x240>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d10e      	bne.n	800311e <RobotstateManagement+0xa6>
				Robot.MotorIsOn = 1;
 8003100:	4b6a      	ldr	r3, [pc, #424]	; (80032ac <RobotstateManagement+0x234>)
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				Robot.RunningFlag = 1;
 8003108:	4b68      	ldr	r3, [pc, #416]	; (80032ac <RobotstateManagement+0x234>)
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				Robot.flagStartTime = 1;
 8003110:	4b66      	ldr	r3, [pc, #408]	; (80032ac <RobotstateManagement+0x234>)
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				notContinueFlag = 0;
 8003118:	4b67      	ldr	r3, [pc, #412]	; (80032b8 <RobotstateManagement+0x240>)
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
			}
			if(doingTaskFlag == 1 && Robot.RunningFlag == 1 && endEffFlag == 0){
 800311e:	4b67      	ldr	r3, [pc, #412]	; (80032bc <RobotstateManagement+0x244>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d159      	bne.n	80031da <RobotstateManagement+0x162>
 8003126:	4b61      	ldr	r3, [pc, #388]	; (80032ac <RobotstateManagement+0x234>)
 8003128:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800312c:	2b01      	cmp	r3, #1
 800312e:	d154      	bne.n	80031da <RobotstateManagement+0x162>
 8003130:	4b63      	ldr	r3, [pc, #396]	; (80032c0 <RobotstateManagement+0x248>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d150      	bne.n	80031da <RobotstateManagement+0x162>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8003138:	2201      	movs	r2, #1
 800313a:	2108      	movs	r1, #8
 800313c:	4861      	ldr	r0, [pc, #388]	; (80032c4 <RobotstateManagement+0x24c>)
 800313e:	f001 feed 	bl	8004f1c <HAL_GPIO_WritePin>
				if(goalFlag == 1 && goingToGoalFlag == 0){
 8003142:	4b61      	ldr	r3, [pc, #388]	; (80032c8 <RobotstateManagement+0x250>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d11d      	bne.n	8003186 <RobotstateManagement+0x10e>
 800314a:	4b60      	ldr	r3, [pc, #384]	; (80032cc <RobotstateManagement+0x254>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d119      	bne.n	8003186 <RobotstateManagement+0x10e>
					goingToGoalFlag = 1;
 8003152:	4b5e      	ldr	r3, [pc, #376]	; (80032cc <RobotstateManagement+0x254>)
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = uartPos;
 8003158:	4b5d      	ldr	r3, [pc, #372]	; (80032d0 <RobotstateManagement+0x258>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a53      	ldr	r2, [pc, #332]	; (80032ac <RobotstateManagement+0x234>)
 800315e:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 8003160:	4b52      	ldr	r3, [pc, #328]	; (80032ac <RobotstateManagement+0x234>)
 8003162:	edd3 7a00 	vldr	s15, [r3]
 8003166:	4b51      	ldr	r3, [pc, #324]	; (80032ac <RobotstateManagement+0x234>)
 8003168:	ed93 7a03 	vldr	s14, [r3, #12]
 800316c:	4b4f      	ldr	r3, [pc, #316]	; (80032ac <RobotstateManagement+0x234>)
 800316e:	edd3 6a08 	vldr	s13, [r3, #32]
 8003172:	eeb0 1a66 	vmov.f32	s2, s13
 8003176:	eef0 0a47 	vmov.f32	s1, s14
 800317a:	eeb0 0a67 	vmov.f32	s0, s15
 800317e:	4855      	ldr	r0, [pc, #340]	; (80032d4 <RobotstateManagement+0x25c>)
 8003180:	f7fe f9ba 	bl	80014f8 <CoefficientAndTimeCalculation>
 8003184:	e029      	b.n	80031da <RobotstateManagement+0x162>
				}
				else if(goalFlag == 2 && goingToGoalFlag == 0){
 8003186:	4b50      	ldr	r3, [pc, #320]	; (80032c8 <RobotstateManagement+0x250>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d125      	bne.n	80031da <RobotstateManagement+0x162>
 800318e:	4b4f      	ldr	r3, [pc, #316]	; (80032cc <RobotstateManagement+0x254>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d121      	bne.n	80031da <RobotstateManagement+0x162>
					goingToGoalFlag = 1;
 8003196:	4b4d      	ldr	r3, [pc, #308]	; (80032cc <RobotstateManagement+0x254>)
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = goalDeg[uartGoal[goalIDX]-1];
 800319c:	4b4e      	ldr	r3, [pc, #312]	; (80032d8 <RobotstateManagement+0x260>)
 800319e:	f993 3000 	ldrsb.w	r3, [r3]
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b4d      	ldr	r3, [pc, #308]	; (80032dc <RobotstateManagement+0x264>)
 80031a6:	5c9b      	ldrb	r3, [r3, r2]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	4a4d      	ldr	r2, [pc, #308]	; (80032e0 <RobotstateManagement+0x268>)
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a3e      	ldr	r2, [pc, #248]	; (80032ac <RobotstateManagement+0x234>)
 80031b4:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 80031b6:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <RobotstateManagement+0x234>)
 80031b8:	edd3 7a00 	vldr	s15, [r3]
 80031bc:	4b3b      	ldr	r3, [pc, #236]	; (80032ac <RobotstateManagement+0x234>)
 80031be:	ed93 7a03 	vldr	s14, [r3, #12]
 80031c2:	4b3a      	ldr	r3, [pc, #232]	; (80032ac <RobotstateManagement+0x234>)
 80031c4:	edd3 6a08 	vldr	s13, [r3, #32]
 80031c8:	eeb0 1a66 	vmov.f32	s2, s13
 80031cc:	eef0 0a47 	vmov.f32	s1, s14
 80031d0:	eeb0 0a67 	vmov.f32	s0, s15
 80031d4:	483f      	ldr	r0, [pc, #252]	; (80032d4 <RobotstateManagement+0x25c>)
 80031d6:	f7fe f98f 	bl	80014f8 <CoefficientAndTimeCalculation>
				}
			}

			if(endEffFlag == 0 && goingToGoalFlag == 1 && doingTaskFlag == 1){
 80031da:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <RobotstateManagement+0x248>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d132      	bne.n	8003248 <RobotstateManagement+0x1d0>
 80031e2:	4b3a      	ldr	r3, [pc, #232]	; (80032cc <RobotstateManagement+0x254>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d12e      	bne.n	8003248 <RobotstateManagement+0x1d0>
 80031ea:	4b34      	ldr	r3, [pc, #208]	; (80032bc <RobotstateManagement+0x244>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d12a      	bne.n	8003248 <RobotstateManagement+0x1d0>
				if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0){
 80031f2:	4b2e      	ldr	r3, [pc, #184]	; (80032ac <RobotstateManagement+0x234>)
 80031f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80031f8:	4b2c      	ldr	r3, [pc, #176]	; (80032ac <RobotstateManagement+0x234>)
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003202:	eeb0 0a67 	vmov.f32	s0, s15
 8003206:	f7fe f953 	bl	80014b0 <AbsVal>
 800320a:	eef0 7a40 	vmov.f32	s15, s0
 800320e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321a:	d515      	bpl.n	8003248 <RobotstateManagement+0x1d0>
 800321c:	4b23      	ldr	r3, [pc, #140]	; (80032ac <RobotstateManagement+0x234>)
 800321e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003222:	eeb0 0a67 	vmov.f32	s0, s15
 8003226:	f7fe f943 	bl	80014b0 <AbsVal>
 800322a:	eef0 7a40 	vmov.f32	s15, s0
 800322e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323a:	d505      	bpl.n	8003248 <RobotstateManagement+0x1d0>
					endEffFlag = 1;
 800323c:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <RobotstateManagement+0x248>)
 800323e:	2201      	movs	r2, #1
 8003240:	701a      	strb	r2, [r3, #0]
					goingToGoalFlag = 0;
 8003242:	4b22      	ldr	r3, [pc, #136]	; (80032cc <RobotstateManagement+0x254>)
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
				}
			}

			if(goingToGoalFlag == 0 && doingTaskFlag == 1 && Robot.RunningFlag == 0 && endEffFlag == 1){
 8003248:	4b20      	ldr	r3, [pc, #128]	; (80032cc <RobotstateManagement+0x254>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d128      	bne.n	80032a2 <RobotstateManagement+0x22a>
 8003250:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <RobotstateManagement+0x244>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d124      	bne.n	80032a2 <RobotstateManagement+0x22a>
 8003258:	4b14      	ldr	r3, [pc, #80]	; (80032ac <RobotstateManagement+0x234>)
 800325a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800325e:	2b00      	cmp	r3, #0
 8003260:	d11f      	bne.n	80032a2 <RobotstateManagement+0x22a>
 8003262:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <RobotstateManagement+0x248>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d11b      	bne.n	80032a2 <RobotstateManagement+0x22a>
				RobotState = EndEff;
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <RobotstateManagement+0x230>)
 800326c:	2203      	movs	r2, #3
 800326e:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 8003270:	4b1c      	ldr	r3, [pc, #112]	; (80032e4 <RobotstateManagement+0x26c>)
 8003272:	2201      	movs	r2, #1
 8003274:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 8003276:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <RobotstateManagement+0x270>)
 8003278:	2201      	movs	r2, #1
 800327a:	701a      	strb	r2, [r3, #0]
				EndEffState = CheckBeforRun;
 800327c:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <RobotstateManagement+0x274>)
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003282:	e00e      	b.n	80032a2 <RobotstateManagement+0x22a>
		case EndEff:
			break;
		case Emergency:
			Robot.MotorIsOn = 0;
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <RobotstateManagement+0x234>)
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PIDAController_Init(&PidVelo);
 800328c:	4818      	ldr	r0, [pc, #96]	; (80032f0 <RobotstateManagement+0x278>)
 800328e:	f7fe f879 	bl	8001384 <PIDAController_Init>
			PIDAController_Init(&PidPos);
 8003292:	4818      	ldr	r0, [pc, #96]	; (80032f4 <RobotstateManagement+0x27c>)
 8003294:	f7fe f876 	bl	8001384 <PIDAController_Init>
			// Luv u pls pass
			break;
 8003298:	e004      	b.n	80032a4 <RobotstateManagement+0x22c>
			break;
 800329a:	bf00      	nop
 800329c:	e002      	b.n	80032a4 <RobotstateManagement+0x22c>
			break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <RobotstateManagement+0x22c>
			break;
 80032a2:	bf00      	nop
	}
}
 80032a4:	bf00      	nop
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000701 	.word	0x20000701
 80032ac:	200006cc 	.word	0x200006cc
 80032b0:	424c0000 	.word	0x424c0000
 80032b4:	20000700 	.word	0x20000700
 80032b8:	2000075f 	.word	0x2000075f
 80032bc:	2000075c 	.word	0x2000075c
 80032c0:	2000075a 	.word	0x2000075a
 80032c4:	40020400 	.word	0x40020400
 80032c8:	20000759 	.word	0x20000759
 80032cc:	2000075d 	.word	0x2000075d
 80032d0:	20000744 	.word	0x20000744
 80032d4:	2000085c 	.word	0x2000085c
 80032d8:	20000758 	.word	0x20000758
 80032dc:	20000748 	.word	0x20000748
 80032e0:	20000004 	.word	0x20000004
 80032e4:	20000ad9 	.word	0x20000ad9
 80032e8:	20000ad8 	.word	0x20000ad8
 80032ec:	20000000 	.word	0x20000000
 80032f0:	200007f4 	.word	0x200007f4
 80032f4:	20000828 	.word	0x20000828

080032f8 <EndEffstateManagement>:

void EndEffstateManagement()
{
 80032f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
	switch (EndEffState)
 8003300:	4ba6      	ldr	r3, [pc, #664]	; (800359c <EndEffstateManagement+0x2a4>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b04      	cmp	r3, #4
 8003306:	f200 8144 	bhi.w	8003592 <EndEffstateManagement+0x29a>
 800330a:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <EndEffstateManagement+0x18>)
 800330c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003310:	08003325 	.word	0x08003325
 8003314:	0800332d 	.word	0x0800332d
 8003318:	080033e7 	.word	0x080033e7
 800331c:	08003465 	.word	0x08003465
 8003320:	0800348d 	.word	0x0800348d
	{
		case idle:
			// Do not thing wait for command
			EndEffStatus = AwaitCommand;
 8003324:	4b9e      	ldr	r3, [pc, #632]	; (80035a0 <EndEffstateManagement+0x2a8>)
 8003326:	2203      	movs	r2, #3
 8003328:	701a      	strb	r2, [r3, #0]
//			I2CEndEffectorWriteFlag = 1;
			break;
 800332a:	e132      	b.n	8003592 <EndEffstateManagement+0x29a>
		case CheckBeforRun:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 800332c:	4b9d      	ldr	r3, [pc, #628]	; (80035a4 <EndEffstateManagement+0x2ac>)
 800332e:	2223      	movs	r2, #35	; 0x23
 8003330:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 8003332:	489c      	ldr	r0, [pc, #624]	; (80035a4 <EndEffstateManagement+0x2ac>)
 8003334:	f000 f956 	bl	80035e4 <I2CWriteFcn>
			check[0]++;
 8003338:	4b9b      	ldr	r3, [pc, #620]	; (80035a8 <EndEffstateManagement+0x2b0>)
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	1c51      	adds	r1, r2, #1
 8003340:	6139      	str	r1, [r7, #16]
 8003342:	f143 0300 	adc.w	r3, r3, #0
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	4b97      	ldr	r3, [pc, #604]	; (80035a8 <EndEffstateManagement+0x2b0>)
 800334a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800334e:	e9c3 1200 	strd	r1, r2, [r3]
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8003352:	4b96      	ldr	r3, [pc, #600]	; (80035ac <EndEffstateManagement+0x2b4>)
 8003354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b20      	cmp	r3, #32
 800335c:	f040 8112 	bne.w	8003584 <EndEffstateManagement+0x28c>
			{
				I2CReadFcn(I2CRxDataBuffer);
 8003360:	4893      	ldr	r0, [pc, #588]	; (80035b0 <EndEffstateManagement+0x2b8>)
 8003362:	f000 f965 	bl	8003630 <I2CReadFcn>
				check[1]++;
 8003366:	4b90      	ldr	r3, [pc, #576]	; (80035a8 <EndEffstateManagement+0x2b0>)
 8003368:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800336c:	1c51      	adds	r1, r2, #1
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	f143 0300 	adc.w	r3, r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	4b8c      	ldr	r3, [pc, #560]	; (80035a8 <EndEffstateManagement+0x2b0>)
 8003378:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800337c:	e9c3 1202 	strd	r1, r2, [r3, #8]
				if(hi2c1.State == HAL_I2C_STATE_READY)
 8003380:	4b8a      	ldr	r3, [pc, #552]	; (80035ac <EndEffstateManagement+0x2b4>)
 8003382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b20      	cmp	r3, #32
 800338a:	f040 80fb 	bne.w	8003584 <EndEffstateManagement+0x28c>
				{
					if(I2CRxDataBuffer[0] == 0x78)
 800338e:	4b88      	ldr	r3, [pc, #544]	; (80035b0 <EndEffstateManagement+0x2b8>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b78      	cmp	r3, #120	; 0x78
 8003394:	d119      	bne.n	80033ca <EndEffstateManagement+0xd2>
					{
						check[2]++;
 8003396:	4b84      	ldr	r3, [pc, #528]	; (80035a8 <EndEffstateManagement+0x2b0>)
 8003398:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800339c:	1c51      	adds	r1, r2, #1
 800339e:	6039      	str	r1, [r7, #0]
 80033a0:	f143 0300 	adc.w	r3, r3, #0
 80033a4:	607b      	str	r3, [r7, #4]
 80033a6:	4b80      	ldr	r3, [pc, #512]	; (80035a8 <EndEffstateManagement+0x2b0>)
 80033a8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80033ac:	e9c3 1204 	strd	r1, r2, [r3, #16]
						EndEffState = OpenLaser;
 80033b0:	4b7a      	ldr	r3, [pc, #488]	; (800359c <EndEffstateManagement+0x2a4>)
 80033b2:	2202      	movs	r2, #2
 80033b4:	701a      	strb	r2, [r3, #0]
						openLaserWriteFlag = 1;
 80033b6:	4b7f      	ldr	r3, [pc, #508]	; (80035b4 <EndEffstateManagement+0x2bc>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorWriteFlag = 1;
 80033bc:	4b7e      	ldr	r3, [pc, #504]	; (80035b8 <EndEffstateManagement+0x2c0>)
 80033be:	2201      	movs	r2, #1
 80033c0:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorReadFlag =  0;
 80033c2:	4b7e      	ldr	r3, [pc, #504]	; (80035bc <EndEffstateManagement+0x2c4>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
						EndEffState = idle;
					}
				}
			}

		break;
 80033c8:	e0dc      	b.n	8003584 <EndEffstateManagement+0x28c>
						check[3]++;
 80033ca:	4b77      	ldr	r3, [pc, #476]	; (80035a8 <EndEffstateManagement+0x2b0>)
 80033cc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80033d0:	f112 0a01 	adds.w	sl, r2, #1
 80033d4:	f143 0b00 	adc.w	fp, r3, #0
 80033d8:	4b73      	ldr	r3, [pc, #460]	; (80035a8 <EndEffstateManagement+0x2b0>)
 80033da:	e9c3 ab06 	strd	sl, fp, [r3, #24]
						EndEffState = idle;
 80033de:	4b6f      	ldr	r3, [pc, #444]	; (800359c <EndEffstateManagement+0x2a4>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
		break;
 80033e4:	e0ce      	b.n	8003584 <EndEffstateManagement+0x28c>
		case OpenLaser:
			// Open Laser
			if(openLaserWriteFlag == 1){
 80033e6:	4b73      	ldr	r3, [pc, #460]	; (80035b4 <EndEffstateManagement+0x2bc>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d11d      	bne.n	800342a <EndEffstateManagement+0x132>
				check[4]++;
 80033ee:	4b6e      	ldr	r3, [pc, #440]	; (80035a8 <EndEffstateManagement+0x2b0>)
 80033f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80033f4:	1c50      	adds	r0, r2, #1
 80033f6:	f143 0100 	adc.w	r1, r3, #0
 80033fa:	4b6b      	ldr	r3, [pc, #428]	; (80035a8 <EndEffstateManagement+0x2b0>)
 80033fc:	e9c3 0108 	strd	r0, r1, [r3, #32]
				I2CTxDataBuffer[0] = 0x45;
 8003400:	4b68      	ldr	r3, [pc, #416]	; (80035a4 <EndEffstateManagement+0x2ac>)
 8003402:	2245      	movs	r2, #69	; 0x45
 8003404:	701a      	strb	r2, [r3, #0]
				I2CWriteFcn(I2CTxDataBuffer);
 8003406:	4867      	ldr	r0, [pc, #412]	; (80035a4 <EndEffstateManagement+0x2ac>)
 8003408:	f000 f8ec 	bl	80035e4 <I2CWriteFcn>
				openLaserWriteFlag = 0;
 800340c:	4b69      	ldr	r3, [pc, #420]	; (80035b4 <EndEffstateManagement+0x2bc>)
 800340e:	2200      	movs	r2, #0
 8003410:	701a      	strb	r2, [r3, #0]
				endEffLoopTime = Micros();
 8003412:	f000 fb2b 	bl	8003a6c <Micros>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4969      	ldr	r1, [pc, #420]	; (80035c0 <EndEffstateManagement+0x2c8>)
 800341c:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003420:	2201      	movs	r2, #1
 8003422:	2110      	movs	r1, #16
 8003424:	4867      	ldr	r0, [pc, #412]	; (80035c4 <EndEffstateManagement+0x2cc>)
 8003426:	f001 fd79 	bl	8004f1c <HAL_GPIO_WritePin>
			}
			if(hi2c1.State == HAL_I2C_STATE_READY && Micros() - endEffLoopTime > 50000)
 800342a:	4b60      	ldr	r3, [pc, #384]	; (80035ac <EndEffstateManagement+0x2b4>)
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b20      	cmp	r3, #32
 8003434:	f040 80a8 	bne.w	8003588 <EndEffstateManagement+0x290>
 8003438:	f000 fb18 	bl	8003a6c <Micros>
 800343c:	4b60      	ldr	r3, [pc, #384]	; (80035c0 <EndEffstateManagement+0x2c8>)
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	1a84      	subs	r4, r0, r2
 8003444:	eb61 0503 	sbc.w	r5, r1, r3
 8003448:	f24c 3351 	movw	r3, #50001	; 0xc351
 800344c:	429c      	cmp	r4, r3
 800344e:	f175 0300 	sbcs.w	r3, r5, #0
 8003452:	f0c0 8099 	bcc.w	8003588 <EndEffstateManagement+0x290>
			{
				EndEffState = SetupReadStatus;
 8003456:	4b51      	ldr	r3, [pc, #324]	; (800359c <EndEffstateManagement+0x2a4>)
 8003458:	2203      	movs	r2, #3
 800345a:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 800345c:	4b56      	ldr	r3, [pc, #344]	; (80035b8 <EndEffstateManagement+0x2c0>)
 800345e:	2201      	movs	r2, #1
 8003460:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003462:	e091      	b.n	8003588 <EndEffstateManagement+0x290>
		case SetupReadStatus:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 8003464:	4b4f      	ldr	r3, [pc, #316]	; (80035a4 <EndEffstateManagement+0x2ac>)
 8003466:	2223      	movs	r2, #35	; 0x23
 8003468:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 800346a:	484e      	ldr	r0, [pc, #312]	; (80035a4 <EndEffstateManagement+0x2ac>)
 800346c:	f000 f8ba 	bl	80035e4 <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8003470:	4b4e      	ldr	r3, [pc, #312]	; (80035ac <EndEffstateManagement+0x2b4>)
 8003472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b20      	cmp	r3, #32
 800347a:	f040 8087 	bne.w	800358c <EndEffstateManagement+0x294>
			{
				EndEffState = ReadStatus;
 800347e:	4b47      	ldr	r3, [pc, #284]	; (800359c <EndEffstateManagement+0x2a4>)
 8003480:	2204      	movs	r2, #4
 8003482:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 8003484:	4b4d      	ldr	r3, [pc, #308]	; (80035bc <EndEffstateManagement+0x2c4>)
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
			}
			break;
 800348a:	e07f      	b.n	800358c <EndEffstateManagement+0x294>
		case ReadStatus:
			I2CReadFcn(I2CRxDataBuffer);
 800348c:	4848      	ldr	r0, [pc, #288]	; (80035b0 <EndEffstateManagement+0x2b8>)
 800348e:	f000 f8cf 	bl	8003630 <I2CReadFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8003492:	4b46      	ldr	r3, [pc, #280]	; (80035ac <EndEffstateManagement+0x2b4>)
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b20      	cmp	r3, #32
 800349c:	d178      	bne.n	8003590 <EndEffstateManagement+0x298>
			{
				I2CEndEffectorReadFlag =  1;
 800349e:	4b47      	ldr	r3, [pc, #284]	; (80035bc <EndEffstateManagement+0x2c4>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	701a      	strb	r2, [r3, #0]
				if(I2CRxDataBuffer[0] == 0x78)
 80034a4:	4b42      	ldr	r3, [pc, #264]	; (80035b0 <EndEffstateManagement+0x2b8>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b78      	cmp	r3, #120	; 0x78
 80034aa:	d141      	bne.n	8003530 <EndEffstateManagement+0x238>
				{
					check[5]++;
 80034ac:	4b3e      	ldr	r3, [pc, #248]	; (80035a8 <EndEffstateManagement+0x2b0>)
 80034ae:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80034b2:	f112 0801 	adds.w	r8, r2, #1
 80034b6:	f143 0900 	adc.w	r9, r3, #0
 80034ba:	4b3b      	ldr	r3, [pc, #236]	; (80035a8 <EndEffstateManagement+0x2b0>)
 80034bc:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80034c0:	2200      	movs	r2, #0
 80034c2:	2110      	movs	r1, #16
 80034c4:	483f      	ldr	r0, [pc, #252]	; (80035c4 <EndEffstateManagement+0x2cc>)
 80034c6:	f001 fd29 	bl	8004f1c <HAL_GPIO_WritePin>
					EndEffState = idle;
 80034ca:	4b34      	ldr	r3, [pc, #208]	; (800359c <EndEffstateManagement+0x2a4>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
					EndEffStatus = AwaitCommand;
 80034d0:	4b33      	ldr	r3, [pc, #204]	; (80035a0 <EndEffstateManagement+0x2a8>)
 80034d2:	2203      	movs	r2, #3
 80034d4:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 80034d6:	4b3c      	ldr	r3, [pc, #240]	; (80035c8 <EndEffstateManagement+0x2d0>)
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
					if(RobotState != Emergency){
 80034dc:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <EndEffstateManagement+0x2d4>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d002      	beq.n	80034ea <EndEffstateManagement+0x1f2>
						RobotState = NormalOperation;
 80034e4:	4b39      	ldr	r3, [pc, #228]	; (80035cc <EndEffstateManagement+0x2d4>)
 80034e6:	2202      	movs	r2, #2
 80034e8:	701a      	strb	r2, [r3, #0]
					}
					if(doingTaskFlag == 1){
 80034ea:	4b39      	ldr	r3, [pc, #228]	; (80035d0 <EndEffstateManagement+0x2d8>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d14e      	bne.n	8003590 <EndEffstateManagement+0x298>
						goalIDX++;
 80034f2:	4b38      	ldr	r3, [pc, #224]	; (80035d4 <EndEffstateManagement+0x2dc>)
 80034f4:	f993 3000 	ldrsb.w	r3, [r3]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	3301      	adds	r3, #1
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	b25a      	sxtb	r2, r3
 8003500:	4b34      	ldr	r3, [pc, #208]	; (80035d4 <EndEffstateManagement+0x2dc>)
 8003502:	701a      	strb	r2, [r3, #0]
						if(goalIDX > goalAmount-1){
 8003504:	4b34      	ldr	r3, [pc, #208]	; (80035d8 <EndEffstateManagement+0x2e0>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	4b32      	ldr	r3, [pc, #200]	; (80035d4 <EndEffstateManagement+0x2dc>)
 800350c:	f993 3000 	ldrsb.w	r3, [r3]
 8003510:	429a      	cmp	r2, r3
 8003512:	dc09      	bgt.n	8003528 <EndEffstateManagement+0x230>
							goalIDX = 0;
 8003514:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <EndEffstateManagement+0x2dc>)
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
							goalFlag = 0;
 800351a:	4b30      	ldr	r3, [pc, #192]	; (80035dc <EndEffstateManagement+0x2e4>)
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]
							doingTaskFlag = 0;
 8003520:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <EndEffstateManagement+0x2d8>)
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
					EndEffStatus = Closing;
					EndEffState = SetupReadStatus;
					I2CEndEffectorWriteFlag = 1;
				}
			}
			break;
 8003526:	e033      	b.n	8003590 <EndEffstateManagement+0x298>
							notContinueFlag = 1;
 8003528:	4b2d      	ldr	r3, [pc, #180]	; (80035e0 <EndEffstateManagement+0x2e8>)
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
			break;
 800352e:	e02f      	b.n	8003590 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x12)
 8003530:	4b1f      	ldr	r3, [pc, #124]	; (80035b0 <EndEffstateManagement+0x2b8>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b12      	cmp	r3, #18
 8003536:	d109      	bne.n	800354c <EndEffstateManagement+0x254>
					EndEffStatus = Opening;
 8003538:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <EndEffstateManagement+0x2a8>)
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 800353e:	4b17      	ldr	r3, [pc, #92]	; (800359c <EndEffstateManagement+0x2a4>)
 8003540:	2203      	movs	r2, #3
 8003542:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8003544:	4b1c      	ldr	r3, [pc, #112]	; (80035b8 <EndEffstateManagement+0x2c0>)
 8003546:	2201      	movs	r2, #1
 8003548:	701a      	strb	r2, [r3, #0]
			break;
 800354a:	e021      	b.n	8003590 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x34)
 800354c:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <EndEffstateManagement+0x2b8>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b34      	cmp	r3, #52	; 0x34
 8003552:	d109      	bne.n	8003568 <EndEffstateManagement+0x270>
					EndEffStatus = Working;
 8003554:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <EndEffstateManagement+0x2a8>)
 8003556:	2202      	movs	r2, #2
 8003558:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 800355a:	4b10      	ldr	r3, [pc, #64]	; (800359c <EndEffstateManagement+0x2a4>)
 800355c:	2203      	movs	r2, #3
 800355e:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8003560:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <EndEffstateManagement+0x2c0>)
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
			break;
 8003566:	e013      	b.n	8003590 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x56)
 8003568:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <EndEffstateManagement+0x2b8>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b56      	cmp	r3, #86	; 0x56
 800356e:	d10f      	bne.n	8003590 <EndEffstateManagement+0x298>
					EndEffStatus = Closing;
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <EndEffstateManagement+0x2a8>)
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <EndEffstateManagement+0x2a4>)
 8003578:	2203      	movs	r2, #3
 800357a:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 800357c:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <EndEffstateManagement+0x2c0>)
 800357e:	2201      	movs	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]
			break;
 8003582:	e005      	b.n	8003590 <EndEffstateManagement+0x298>
		break;
 8003584:	bf00      	nop
 8003586:	e004      	b.n	8003592 <EndEffstateManagement+0x29a>
			break;
 8003588:	bf00      	nop
 800358a:	e002      	b.n	8003592 <EndEffstateManagement+0x29a>
			break;
 800358c:	bf00      	nop
 800358e:	e000      	b.n	8003592 <EndEffstateManagement+0x29a>
			break;
 8003590:	bf00      	nop
	}
}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800359c:	20000000 	.word	0x20000000
 80035a0:	20000001 	.word	0x20000001
 80035a4:	20000ae0 	.word	0x20000ae0
 80035a8:	20000788 	.word	0x20000788
 80035ac:	20000454 	.word	0x20000454
 80035b0:	20000adc 	.word	0x20000adc
 80035b4:	2000075e 	.word	0x2000075e
 80035b8:	20000ad9 	.word	0x20000ad9
 80035bc:	20000ad8 	.word	0x20000ad8
 80035c0:	20000ac8 	.word	0x20000ac8
 80035c4:	40020400 	.word	0x40020400
 80035c8:	2000075a 	.word	0x2000075a
 80035cc:	20000701 	.word	0x20000701
 80035d0:	2000075c 	.word	0x2000075c
 80035d4:	20000758 	.word	0x20000758
 80035d8:	20000757 	.word	0x20000757
 80035dc:	20000759 	.word	0x20000759
 80035e0:	2000075f 	.word	0x2000075f

080035e4 <I2CWriteFcn>:

void I2CWriteFcn(uint8_t *Wdata) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorWriteFlag == 1  && hi2c1.State == HAL_I2C_STATE_READY) {
 80035ec:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <I2CWriteFcn+0x40>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d112      	bne.n	800361a <I2CWriteFcn+0x36>
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <I2CWriteFcn+0x44>)
 80035f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d10c      	bne.n	800361a <I2CWriteFcn+0x36>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	781a      	ldrb	r2, [r3, #0]
		static uint8_t data[EndEffRxBuf_SIZE];
		memcpy ((uint8_t *)data, (uint8_t *)Wdata, EndEffRxBuf_SIZE);
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <I2CWriteFcn+0x48>)
 8003606:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, Endeff_ADDR, data, I2CTxDataLen);
 8003608:	2301      	movs	r3, #1
 800360a:	4a08      	ldr	r2, [pc, #32]	; (800362c <I2CWriteFcn+0x48>)
 800360c:	2146      	movs	r1, #70	; 0x46
 800360e:	4806      	ldr	r0, [pc, #24]	; (8003628 <I2CWriteFcn+0x44>)
 8003610:	f001 fe14 	bl	800523c <HAL_I2C_Master_Transmit_IT>
		I2CEndEffectorWriteFlag = 0;
 8003614:	4b03      	ldr	r3, [pc, #12]	; (8003624 <I2CWriteFcn+0x40>)
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
	}
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000ad9 	.word	0x20000ad9
 8003628:	20000454 	.word	0x20000454
 800362c:	20000ae4 	.word	0x20000ae4

08003630 <I2CReadFcn>:
void I2CReadFcn(uint8_t *Rdata) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY) {
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <I2CReadFcn+0x38>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d10e      	bne.n	800365e <I2CReadFcn+0x2e>
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <I2CReadFcn+0x3c>)
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b20      	cmp	r3, #32
 800364a:	d108      	bne.n	800365e <I2CReadFcn+0x2e>
		HAL_I2C_Master_Receive_IT(&hi2c1, Endeff_ADDR, Rdata, I2CRxDataLen);
 800364c:	2301      	movs	r3, #1
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	2146      	movs	r1, #70	; 0x46
 8003652:	4806      	ldr	r0, [pc, #24]	; (800366c <I2CReadFcn+0x3c>)
 8003654:	f001 fe98 	bl	8005388 <HAL_I2C_Master_Receive_IT>
		I2CEndEffectorReadFlag =  0;
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <I2CReadFcn+0x38>)
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
	}
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000ad8 	.word	0x20000ad8
 800366c:	20000454 	.word	0x20000454

08003670 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003670:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003682:	d103      	bne.n	800368c <HAL_GPIO_EXTI_Callback+0x1c>
	{
//		I2CEndEffectorWriteFlag = 1;
//		I2CEndEffectorReadFlag =  1;
//		EndEffState = CheckBeforRun;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8003684:	2108      	movs	r1, #8
 8003686:	483e      	ldr	r0, [pc, #248]	; (8003780 <HAL_GPIO_EXTI_Callback+0x110>)
 8003688:	f001 fc61 	bl	8004f4e <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_10)
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003692:	d13e      	bne.n	8003712 <HAL_GPIO_EXTI_Callback+0xa2>
	{
		// Proxi Sensor
		if(Robot.flagSethome == 1)
 8003694:	4b3b      	ldr	r3, [pc, #236]	; (8003784 <HAL_GPIO_EXTI_Callback+0x114>)
 8003696:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800369a:	2b01      	cmp	r3, #1
 800369c:	d139      	bne.n	8003712 <HAL_GPIO_EXTI_Callback+0xa2>
		{
			homePoint[homeFF] = PositionDeg[0];
 800369e:	4b3a      	ldr	r3, [pc, #232]	; (8003788 <HAL_GPIO_EXTI_Callback+0x118>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	4b39      	ldr	r3, [pc, #228]	; (800378c <HAL_GPIO_EXTI_Callback+0x11c>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4939      	ldr	r1, [pc, #228]	; (8003790 <HAL_GPIO_EXTI_Callback+0x120>)
 80036aa:	0083      	lsls	r3, r0, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	601a      	str	r2, [r3, #0]
			homeFF++;
 80036b0:	4b35      	ldr	r3, [pc, #212]	; (8003788 <HAL_GPIO_EXTI_Callback+0x118>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	3301      	adds	r3, #1
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	4b33      	ldr	r3, [pc, #204]	; (8003788 <HAL_GPIO_EXTI_Callback+0x118>)
 80036ba:	701a      	strb	r2, [r3, #0]
			if(homeFF == 2)
 80036bc:	4b32      	ldr	r3, [pc, #200]	; (8003788 <HAL_GPIO_EXTI_Callback+0x118>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d126      	bne.n	8003712 <HAL_GPIO_EXTI_Callback+0xa2>
			{
				if(homePoint[1]-homePoint[0] > 180.0)
 80036c4:	4b32      	ldr	r3, [pc, #200]	; (8003790 <HAL_GPIO_EXTI_Callback+0x120>)
 80036c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80036ca:	4b31      	ldr	r3, [pc, #196]	; (8003790 <HAL_GPIO_EXTI_Callback+0x120>)
 80036cc:	edd3 7a00 	vldr	s15, [r3]
 80036d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036d4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003794 <HAL_GPIO_EXTI_Callback+0x124>
 80036d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e0:	dd04      	ble.n	80036ec <HAL_GPIO_EXTI_Callback+0x7c>
				{
					Robot.HomePositon =  0;
 80036e2:	4b28      	ldr	r3, [pc, #160]	; (8003784 <HAL_GPIO_EXTI_Callback+0x114>)
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	615a      	str	r2, [r3, #20]
 80036ea:	e00e      	b.n	800370a <HAL_GPIO_EXTI_Callback+0x9a>
				}
				else
				{
					Robot.HomePositon = (homePoint[0]+homePoint[1])/2.0;
 80036ec:	4b28      	ldr	r3, [pc, #160]	; (8003790 <HAL_GPIO_EXTI_Callback+0x120>)
 80036ee:	ed93 7a00 	vldr	s14, [r3]
 80036f2:	4b27      	ldr	r3, [pc, #156]	; (8003790 <HAL_GPIO_EXTI_Callback+0x120>)
 80036f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80036f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003700:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003704:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <HAL_GPIO_EXTI_Callback+0x114>)
 8003706:	edc3 7a05 	vstr	s15, [r3, #20]
				}
				Robot.flagSethome = 2;
 800370a:	4b1e      	ldr	r3, [pc, #120]	; (8003784 <HAL_GPIO_EXTI_Callback+0x114>)
 800370c:	2202      	movs	r2, #2
 800370e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			}
		}
	}
	if(GPIO_Pin == GPIO_PIN_5)
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	2b20      	cmp	r3, #32
 8003716:	d12e      	bne.n	8003776 <HAL_GPIO_EXTI_Callback+0x106>
	{
		if(EmertimeoutFlag == 0)
 8003718:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <HAL_GPIO_EXTI_Callback+0x128>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <HAL_GPIO_EXTI_Callback+0xb6>
		{
			EmertimeoutFlag = 1;
 8003720:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_GPIO_EXTI_Callback+0x128>)
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
		}

		if(Micros() - EmergencycalloutTime > 100000 && EmertimeoutFlag == 1)
 8003726:	f000 f9a1 	bl	8003a6c <Micros>
 800372a:	4b1c      	ldr	r3, [pc, #112]	; (800379c <HAL_GPIO_EXTI_Callback+0x12c>)
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	1a84      	subs	r4, r0, r2
 8003732:	eb61 0503 	sbc.w	r5, r1, r3
 8003736:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <HAL_GPIO_EXTI_Callback+0x130>)
 8003738:	429c      	cmp	r4, r3
 800373a:	f175 0300 	sbcs.w	r3, r5, #0
 800373e:	d31a      	bcc.n	8003776 <HAL_GPIO_EXTI_Callback+0x106>
 8003740:	4b15      	ldr	r3, [pc, #84]	; (8003798 <HAL_GPIO_EXTI_Callback+0x128>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d116      	bne.n	8003776 <HAL_GPIO_EXTI_Callback+0x106>
		{
			check[6]++;
 8003748:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <HAL_GPIO_EXTI_Callback+0x134>)
 800374a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800374e:	f112 0801 	adds.w	r8, r2, #1
 8003752:	f143 0900 	adc.w	r9, r3, #0
 8003756:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <HAL_GPIO_EXTI_Callback+0x134>)
 8003758:	e9c3 890c 	strd	r8, r9, [r3, #48]	; 0x30
			EmergencycalloutTime = Micros();
 800375c:	f000 f986 	bl	8003a6c <Micros>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	490d      	ldr	r1, [pc, #52]	; (800379c <HAL_GPIO_EXTI_Callback+0x12c>)
 8003766:	e9c1 2300 	strd	r2, r3, [r1]
			EmertimeoutFlag = 0;
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_GPIO_EXTI_Callback+0x128>)
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]
			//Docode
			HAL_TIM_Base_Start_IT(&htim5);
 8003770:	480d      	ldr	r0, [pc, #52]	; (80037a8 <HAL_GPIO_EXTI_Callback+0x138>)
 8003772:	f004 f87b 	bl	800786c <HAL_TIM_Base_Start_IT>
		}
	}
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003780:	40020400 	.word	0x40020400
 8003784:	200006cc 	.word	0x200006cc
 8003788:	200006f4 	.word	0x200006f4
 800378c:	200007e8 	.word	0x200007e8
 8003790:	200006f8 	.word	0x200006f8
 8003794:	43340000 	.word	0x43340000
 8003798:	20000ac0 	.word	0x20000ac0
 800379c:	20000ab8 	.word	0x20000ab8
 80037a0:	000186a1 	.word	0x000186a1
 80037a4:	20000788 	.word	0x20000788
 80037a8:	20000538 	.word	0x20000538

080037ac <RobotRunToPositon>:
void RobotRunToPositon(float Destination , float VeloInput)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80037b6:	edc7 0a00 	vstr	s1, [r7]
	Robot.GoalPositon = Destination;
 80037ba:	4a16      	ldr	r2, [pc, #88]	; (8003814 <RobotRunToPositon+0x68>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	60d3      	str	r3, [r2, #12]
	Robot.QVMax = VeloInput;
 80037c0:	4a14      	ldr	r2, [pc, #80]	; (8003814 <RobotRunToPositon+0x68>)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6213      	str	r3, [r2, #32]
	CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 80037c6:	4b13      	ldr	r3, [pc, #76]	; (8003814 <RobotRunToPositon+0x68>)
 80037c8:	edd3 7a00 	vldr	s15, [r3]
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <RobotRunToPositon+0x68>)
 80037ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80037d2:	4b10      	ldr	r3, [pc, #64]	; (8003814 <RobotRunToPositon+0x68>)
 80037d4:	edd3 6a08 	vldr	s13, [r3, #32]
 80037d8:	eeb0 1a66 	vmov.f32	s2, s13
 80037dc:	eef0 0a47 	vmov.f32	s1, s14
 80037e0:	eeb0 0a67 	vmov.f32	s0, s15
 80037e4:	480c      	ldr	r0, [pc, #48]	; (8003818 <RobotRunToPositon+0x6c>)
 80037e6:	f7fd fe87 	bl	80014f8 <CoefficientAndTimeCalculation>
	// Start Trajectory Evaluator
	Robot.MotorIsOn = 1;
 80037ea:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <RobotRunToPositon+0x68>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Robot.flagStartTime = 1;
 80037f2:	4b08      	ldr	r3, [pc, #32]	; (8003814 <RobotRunToPositon+0x68>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Robot.RunningFlag = 1;
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <RobotRunToPositon+0x68>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8003802:	2201      	movs	r2, #1
 8003804:	2108      	movs	r1, #8
 8003806:	4805      	ldr	r0, [pc, #20]	; (800381c <RobotRunToPositon+0x70>)
 8003808:	f001 fb88 	bl	8004f1c <HAL_GPIO_WritePin>
}
 800380c:	bf00      	nop
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	200006cc 	.word	0x200006cc
 8003818:	2000085c 	.word	0x2000085c
 800381c:	40020400 	.word	0x40020400

08003820 <RobotResetAll>:

void RobotResetAll()
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
	// Reset Encoder
	TIM_ResetCounter(TIM2);
 8003824:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003828:	f000 f866 	bl	80038f8 <TIM_ResetCounter>
	EncoderRawData[0] = 0;
 800382c:	4b23      	ldr	r3, [pc, #140]	; (80038bc <RobotResetAll+0x9c>)
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
	EncoderRawData[1] = 0;
 8003832:	4b22      	ldr	r3, [pc, #136]	; (80038bc <RobotResetAll+0x9c>)
 8003834:	2200      	movs	r2, #0
 8003836:	605a      	str	r2, [r3, #4]
	WrappingStep = 0;
 8003838:	4b21      	ldr	r3, [pc, #132]	; (80038c0 <RobotResetAll+0xa0>)
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
	// Reset Trajectory
	CoefficientAndTimeCalculation(&traject,0.0,0.0,60);
 800383e:	ed9f 1a21 	vldr	s2, [pc, #132]	; 80038c4 <RobotResetAll+0xa4>
 8003842:	eddf 0a21 	vldr	s1, [pc, #132]	; 80038c8 <RobotResetAll+0xa8>
 8003846:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80038c8 <RobotResetAll+0xa8>
 800384a:	4820      	ldr	r0, [pc, #128]	; (80038cc <RobotResetAll+0xac>)
 800384c:	f7fd fe54 	bl	80014f8 <CoefficientAndTimeCalculation>
	Robot.flagStartTime = 1;
 8003850:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <RobotResetAll+0xb0>)
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	StartTime = 0;
 8003858:	491e      	ldr	r1, [pc, #120]	; (80038d4 <RobotResetAll+0xb4>)
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	e9c1 2300 	strd	r2, r3, [r1]
	CurrentTime = 0;
 8003866:	491c      	ldr	r1, [pc, #112]	; (80038d8 <RobotResetAll+0xb8>)
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	e9c1 2300 	strd	r2, r3, [r1]
	// Reset Position
	PositionDeg[0] = 0;
 8003874:	4b19      	ldr	r3, [pc, #100]	; (80038dc <RobotResetAll+0xbc>)
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
	PositionDeg[1] = 0;
 800387c:	4b17      	ldr	r3, [pc, #92]	; (80038dc <RobotResetAll+0xbc>)
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	605a      	str	r2, [r3, #4]
	KalmanMatrixReset(&KalmanVar, Pvar);
 8003884:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80038e0 <RobotResetAll+0xc0>
 8003888:	4816      	ldr	r0, [pc, #88]	; (80038e4 <RobotResetAll+0xc4>)
 800388a:	f7fd fbcd 	bl	8001028 <KalmanMatrixReset>
	Robotinit(&Robot);
 800388e:	4810      	ldr	r0, [pc, #64]	; (80038d0 <RobotResetAll+0xb0>)
 8003890:	f7fd fda8 	bl	80013e4 <Robotinit>
	// Reset Pid
	PIDAController_Init(&PidVelo);
 8003894:	4814      	ldr	r0, [pc, #80]	; (80038e8 <RobotResetAll+0xc8>)
 8003896:	f7fd fd75 	bl	8001384 <PIDAController_Init>
	PIDAController_Init(&PidPos);
 800389a:	4814      	ldr	r0, [pc, #80]	; (80038ec <RobotResetAll+0xcc>)
 800389c:	f7fd fd72 	bl	8001384 <PIDAController_Init>
	// Reset Home Buffer
	homePoint[0] = 0;
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <RobotResetAll+0xd0>)
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
	homePoint[1] = 0;
 80038a8:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <RobotResetAll+0xd0>)
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	605a      	str	r2, [r3, #4]
	homeFF = 0;
 80038b0:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <RobotResetAll+0xd4>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	200007d8 	.word	0x200007d8
 80038c0:	200007e0 	.word	0x200007e0
 80038c4:	42700000 	.word	0x42700000
 80038c8:	00000000 	.word	0x00000000
 80038cc:	2000085c 	.word	0x2000085c
 80038d0:	200006cc 	.word	0x200006cc
 80038d4:	20000a90 	.word	0x20000a90
 80038d8:	20000a98 	.word	0x20000a98
 80038dc:	200007e8 	.word	0x200007e8
 80038e0:	447a0000 	.word	0x447a0000
 80038e4:	20000034 	.word	0x20000034
 80038e8:	200007f4 	.word	0x200007f4
 80038ec:	20000828 	.word	0x20000828
 80038f0:	200006f8 	.word	0x200006f8
 80038f4:	200006f4 	.word	0x200006f4

080038f8 <TIM_ResetCounter>:

void TIM_ResetCounter(TIM_TypeDef* TIMx)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Reset the Counter Register value */
  TIMx->CNT = 0;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a47      	ldr	r2, [pc, #284]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d10b      	bne.n	800393e <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micro += 65535;
 8003926:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003930:	eb12 0a01 	adds.w	sl, r2, r1
 8003934:	f143 0b00 	adc.w	fp, r3, #0
 8003938:	4b42      	ldr	r3, [pc, #264]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800393a:	e9c3 ab00 	strd	sl, fp, [r3]
	}
	if (htim == &htim5){
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a41      	ldr	r2, [pc, #260]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d177      	bne.n	8003a36 <HAL_TIM_PeriodElapsedCallback+0x122>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET)
 8003946:	2120      	movs	r1, #32
 8003948:	4840      	ldr	r0, [pc, #256]	; (8003a4c <HAL_TIM_PeriodElapsedCallback+0x138>)
 800394a:	f001 facf 	bl	8004eec <HAL_GPIO_ReadPin>
 800394e:	4603      	mov	r3, r0
 8003950:	2b01      	cmp	r3, #1
 8003952:	d15b      	bne.n	8003a0c <HAL_TIM_PeriodElapsedCallback+0xf8>
		{
			check[7]++;
 8003954:	4b3e      	ldr	r3, [pc, #248]	; (8003a50 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003956:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800395a:	f112 0801 	adds.w	r8, r2, #1
 800395e:	f143 0900 	adc.w	r9, r3, #0
 8003962:	4b3b      	ldr	r3, [pc, #236]	; (8003a50 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003964:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
			if(EndEffState != idle)
 8003968:	4b3a      	ldr	r3, [pc, #232]	; (8003a54 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_TIM_PeriodElapsedCallback+0x64>
			{
				RobotState = EndEff;
 8003970:	4b39      	ldr	r3, [pc, #228]	; (8003a58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003972:	2203      	movs	r2, #3
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	e002      	b.n	800397e <HAL_TIM_PeriodElapsedCallback+0x6a>
			}
			else
			{
				RobotState = NormalOperation;
 8003978:	4b37      	ldr	r3, [pc, #220]	; (8003a58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800397a:	2202      	movs	r2, #2
 800397c:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800397e:	2200      	movs	r2, #0
 8003980:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003984:	4831      	ldr	r0, [pc, #196]	; (8003a4c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003986:	f001 fac9 	bl	8004f1c <HAL_GPIO_WritePin>
			if((doingTaskFlag == 1 && goingToGoalFlag == 1) || homingFlag == 1)
 800398a:	4b34      	ldr	r3, [pc, #208]	; (8003a5c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d103      	bne.n	800399a <HAL_TIM_PeriodElapsedCallback+0x86>
 8003992:	4b33      	ldr	r3, [pc, #204]	; (8003a60 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d003      	beq.n	80039a2 <HAL_TIM_PeriodElapsedCallback+0x8e>
 800399a:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d10b      	bne.n	80039ba <HAL_TIM_PeriodElapsedCallback+0xa6>
			{
				RobotRunToPositon(Robot.GoalPositon,Robot.QVMax);
 80039a2:	4b31      	ldr	r3, [pc, #196]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80039a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80039a8:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80039aa:	ed93 7a08 	vldr	s14, [r3, #32]
 80039ae:	eef0 0a47 	vmov.f32	s1, s14
 80039b2:	eeb0 0a67 	vmov.f32	s0, s15
 80039b6:	f7ff fef9 	bl	80037ac <RobotRunToPositon>
			}
			if(Robot.flagSethome == 1){
 80039ba:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80039bc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d105      	bne.n	80039d0 <HAL_TIM_PeriodElapsedCallback+0xbc>
				RobotResetAll();
 80039c4:	f7ff ff2c 	bl	8003820 <RobotResetAll>
				RobotState = init;
 80039c8:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	e02f      	b.n	8003a30 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
			else if(Robot.flagSethome == 2 || Robot.flagSethome == 3)
 80039d0:	4b25      	ldr	r3, [pc, #148]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80039d2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d004      	beq.n	80039e4 <HAL_TIM_PeriodElapsedCallback+0xd0>
 80039da:	4b23      	ldr	r3, [pc, #140]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80039dc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d125      	bne.n	8003a30 <HAL_TIM_PeriodElapsedCallback+0x11c>
			{
				Robot.flagSethome = 3;
 80039e4:	4b20      	ldr	r3, [pc, #128]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80039e6:	2203      	movs	r2, #3
 80039e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				RobotRunToPositon(Robot.HomePositon,Robot.QVMax);
 80039ec:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80039ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80039f2:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80039f4:	ed93 7a08 	vldr	s14, [r3, #32]
 80039f8:	eef0 0a47 	vmov.f32	s1, s14
 80039fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003a00:	f7ff fed4 	bl	80037ac <RobotRunToPositon>
				RobotState = FindHome;
 8003a04:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	701a      	strb	r2, [r3, #0]
 8003a0a:	e011      	b.n	8003a30 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
		}
		else
		{
			check[8]++;
 8003a0c:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003a0e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003a12:	1c54      	adds	r4, r2, #1
 8003a14:	f143 0500 	adc.w	r5, r3, #0
 8003a18:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003a1a:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
			RobotState = Emergency;
 8003a1e:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003a20:	2204      	movs	r2, #4
 8003a22:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8003a24:	2201      	movs	r2, #1
 8003a26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a2a:	4808      	ldr	r0, [pc, #32]	; (8003a4c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003a2c:	f001 fa76 	bl	8004f1c <HAL_GPIO_WritePin>
		}
		HAL_TIM_Base_Stop_IT(&htim5);
 8003a30:	4805      	ldr	r0, [pc, #20]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003a32:	f003 ff7d 	bl	8007930 <HAL_TIM_Base_Stop_IT>
	}
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a40:	20000580 	.word	0x20000580
 8003a44:	20000768 	.word	0x20000768
 8003a48:	20000538 	.word	0x20000538
 8003a4c:	40020400 	.word	0x40020400
 8003a50:	20000788 	.word	0x20000788
 8003a54:	20000000 	.word	0x20000000
 8003a58:	20000701 	.word	0x20000701
 8003a5c:	2000075c 	.word	0x2000075c
 8003a60:	2000075d 	.word	0x2000075d
 8003a64:	2000075b 	.word	0x2000075b
 8003a68:	200006cc 	.word	0x200006cc

08003a6c <Micros>:

uint64_t Micros(){
 8003a6c:	b4b0      	push	{r4, r5, r7}
 8003a6e:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8003a70:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <Micros+0x28>)
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	2200      	movs	r2, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <Micros+0x2c>)
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	1884      	adds	r4, r0, r2
 8003a82:	eb41 0503 	adc.w	r5, r1, r3
 8003a86:	4622      	mov	r2, r4
 8003a88:	462b      	mov	r3, r5
}
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bcb0      	pop	{r4, r5, r7}
 8003a92:	4770      	bx	lr
 8003a94:	40014800 	.word	0x40014800
 8003a98:	20000768 	.word	0x20000768

08003a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003aa0:	b672      	cpsid	i
}
 8003aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003aa4:	e7fe      	b.n	8003aa4 <Error_Handler+0x8>
	...

08003aa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	607b      	str	r3, [r7, #4]
 8003ab2:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <HAL_MspInit+0x4c>)
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	4a0f      	ldr	r2, [pc, #60]	; (8003af4 <HAL_MspInit+0x4c>)
 8003ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003abc:	6453      	str	r3, [r2, #68]	; 0x44
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <HAL_MspInit+0x4c>)
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	603b      	str	r3, [r7, #0]
 8003ace:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <HAL_MspInit+0x4c>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	4a08      	ldr	r2, [pc, #32]	; (8003af4 <HAL_MspInit+0x4c>)
 8003ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_MspInit+0x4c>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003ae6:	2007      	movs	r0, #7
 8003ae8:	f000 fc2a 	bl	8004340 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40023800 	.word	0x40023800

08003af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	; 0x28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b00:	f107 0314 	add.w	r3, r7, #20
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	60da      	str	r2, [r3, #12]
 8003b0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a21      	ldr	r2, [pc, #132]	; (8003b9c <HAL_I2C_MspInit+0xa4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d13c      	bne.n	8003b94 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <HAL_I2C_MspInit+0xa8>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <HAL_I2C_MspInit+0xa8>)
 8003b24:	f043 0302 	orr.w	r3, r3, #2
 8003b28:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <HAL_I2C_MspInit+0xa8>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b3c:	2312      	movs	r3, #18
 8003b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b44:	2303      	movs	r3, #3
 8003b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b48:	2304      	movs	r3, #4
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	4619      	mov	r1, r3
 8003b52:	4814      	ldr	r0, [pc, #80]	; (8003ba4 <HAL_I2C_MspInit+0xac>)
 8003b54:	f001 f846 	bl	8004be4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <HAL_I2C_MspInit+0xa8>)
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	4a0f      	ldr	r2, [pc, #60]	; (8003ba0 <HAL_I2C_MspInit+0xa8>)
 8003b62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b66:	6413      	str	r3, [r2, #64]	; 0x40
 8003b68:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <HAL_I2C_MspInit+0xa8>)
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003b74:	2200      	movs	r2, #0
 8003b76:	2100      	movs	r1, #0
 8003b78:	201f      	movs	r0, #31
 8003b7a:	f000 fbec 	bl	8004356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003b7e:	201f      	movs	r0, #31
 8003b80:	f000 fc05 	bl	800438e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003b84:	2200      	movs	r2, #0
 8003b86:	2100      	movs	r1, #0
 8003b88:	2020      	movs	r0, #32
 8003b8a:	f000 fbe4 	bl	8004356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003b8e:	2020      	movs	r0, #32
 8003b90:	f000 fbfd 	bl	800438e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b94:	bf00      	nop
 8003b96:	3728      	adds	r7, #40	; 0x28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40005400 	.word	0x40005400
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	40020400 	.word	0x40020400

08003ba8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a0e      	ldr	r2, [pc, #56]	; (8003bf0 <HAL_TIM_PWM_MspInit+0x48>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d115      	bne.n	8003be6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <HAL_TIM_PWM_MspInit+0x4c>)
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	4a0c      	ldr	r2, [pc, #48]	; (8003bf4 <HAL_TIM_PWM_MspInit+0x4c>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <HAL_TIM_PWM_MspInit+0x4c>)
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2100      	movs	r1, #0
 8003bda:	201a      	movs	r0, #26
 8003bdc:	f000 fbbb 	bl	8004356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003be0:	201a      	movs	r0, #26
 8003be2:	f000 fbd4 	bl	800438e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	40023800 	.word	0x40023800

08003bf8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08a      	sub	sp, #40	; 0x28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c00:	f107 0314 	add.w	r3, r7, #20
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	60da      	str	r2, [r3, #12]
 8003c0e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c18:	d12b      	bne.n	8003c72 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x84>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	4a16      	ldr	r2, [pc, #88]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x84>)
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	6413      	str	r3, [r2, #64]	; 0x40
 8003c2a:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x84>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x84>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	4a0f      	ldr	r2, [pc, #60]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x84>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	6313      	str	r3, [r2, #48]	; 0x30
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <HAL_TIM_Encoder_MspInit+0x84>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c52:	2303      	movs	r3, #3
 8003c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c56:	2302      	movs	r3, #2
 8003c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c62:	2301      	movs	r3, #1
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c66:	f107 0314 	add.w	r3, r7, #20
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4804      	ldr	r0, [pc, #16]	; (8003c80 <HAL_TIM_Encoder_MspInit+0x88>)
 8003c6e:	f000 ffb9 	bl	8004be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003c72:	bf00      	nop
 8003c74:	3728      	adds	r7, #40	; 0x28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40020000 	.word	0x40020000

08003c84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1c      	ldr	r2, [pc, #112]	; (8003d04 <HAL_TIM_Base_MspInit+0x80>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d116      	bne.n	8003cc4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <HAL_TIM_Base_MspInit+0x84>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	4a1a      	ldr	r2, [pc, #104]	; (8003d08 <HAL_TIM_Base_MspInit+0x84>)
 8003ca0:	f043 0308 	orr.w	r3, r3, #8
 8003ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ca6:	4b18      	ldr	r3, [pc, #96]	; (8003d08 <HAL_TIM_Base_MspInit+0x84>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	2032      	movs	r0, #50	; 0x32
 8003cb8:	f000 fb4d 	bl	8004356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003cbc:	2032      	movs	r0, #50	; 0x32
 8003cbe:	f000 fb66 	bl	800438e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003cc2:	e01a      	b.n	8003cfa <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a10      	ldr	r2, [pc, #64]	; (8003d0c <HAL_TIM_Base_MspInit+0x88>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d115      	bne.n	8003cfa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <HAL_TIM_Base_MspInit+0x84>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	4a0c      	ldr	r2, [pc, #48]	; (8003d08 <HAL_TIM_Base_MspInit+0x84>)
 8003cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cde:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <HAL_TIM_Base_MspInit+0x84>)
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003cea:	2200      	movs	r2, #0
 8003cec:	2100      	movs	r1, #0
 8003cee:	201a      	movs	r0, #26
 8003cf0:	f000 fb31 	bl	8004356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003cf4:	201a      	movs	r0, #26
 8003cf6:	f000 fb4a 	bl	800438e <HAL_NVIC_EnableIRQ>
}
 8003cfa:	bf00      	nop
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40000c00 	.word	0x40000c00
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40014800 	.word	0x40014800

08003d10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d18:	f107 030c 	add.w	r3, r7, #12
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <HAL_TIM_MspPostInit+0x68>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d11e      	bne.n	8003d70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <HAL_TIM_MspPostInit+0x6c>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <HAL_TIM_MspPostInit+0x6c>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	6313      	str	r3, [r2, #48]	; 0x30
 8003d42:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <HAL_TIM_MspPostInit+0x6c>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d54:	2302      	movs	r3, #2
 8003d56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d60:	2301      	movs	r3, #1
 8003d62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d64:	f107 030c 	add.w	r3, r7, #12
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4805      	ldr	r0, [pc, #20]	; (8003d80 <HAL_TIM_MspPostInit+0x70>)
 8003d6c:	f000 ff3a 	bl	8004be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003d70:	bf00      	nop
 8003d72:	3720      	adds	r7, #32
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40010000 	.word	0x40010000
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	40020000 	.word	0x40020000

08003d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d8c:	f107 0314 	add.w	r3, r7, #20
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	609a      	str	r2, [r3, #8]
 8003d98:	60da      	str	r2, [r3, #12]
 8003d9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a4b      	ldr	r2, [pc, #300]	; (8003ed0 <HAL_UART_MspInit+0x14c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	f040 8090 	bne.w	8003ec8 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003da8:	2300      	movs	r3, #0
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	4b49      	ldr	r3, [pc, #292]	; (8003ed4 <HAL_UART_MspInit+0x150>)
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	4a48      	ldr	r2, [pc, #288]	; (8003ed4 <HAL_UART_MspInit+0x150>)
 8003db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db6:	6413      	str	r3, [r2, #64]	; 0x40
 8003db8:	4b46      	ldr	r3, [pc, #280]	; (8003ed4 <HAL_UART_MspInit+0x150>)
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	4b42      	ldr	r3, [pc, #264]	; (8003ed4 <HAL_UART_MspInit+0x150>)
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	4a41      	ldr	r2, [pc, #260]	; (8003ed4 <HAL_UART_MspInit+0x150>)
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd4:	4b3f      	ldr	r3, [pc, #252]	; (8003ed4 <HAL_UART_MspInit+0x150>)
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003de0:	230c      	movs	r3, #12
 8003de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de4:	2302      	movs	r3, #2
 8003de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dec:	2303      	movs	r3, #3
 8003dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003df0:	2307      	movs	r3, #7
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df4:	f107 0314 	add.w	r3, r7, #20
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4837      	ldr	r0, [pc, #220]	; (8003ed8 <HAL_UART_MspInit+0x154>)
 8003dfc:	f000 fef2 	bl	8004be4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003e00:	4b36      	ldr	r3, [pc, #216]	; (8003edc <HAL_UART_MspInit+0x158>)
 8003e02:	4a37      	ldr	r2, [pc, #220]	; (8003ee0 <HAL_UART_MspInit+0x15c>)
 8003e04:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003e06:	4b35      	ldr	r3, [pc, #212]	; (8003edc <HAL_UART_MspInit+0x158>)
 8003e08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e0c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e0e:	4b33      	ldr	r3, [pc, #204]	; (8003edc <HAL_UART_MspInit+0x158>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e14:	4b31      	ldr	r3, [pc, #196]	; (8003edc <HAL_UART_MspInit+0x158>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e1a:	4b30      	ldr	r3, [pc, #192]	; (8003edc <HAL_UART_MspInit+0x158>)
 8003e1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e20:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e22:	4b2e      	ldr	r3, [pc, #184]	; (8003edc <HAL_UART_MspInit+0x158>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e28:	4b2c      	ldr	r3, [pc, #176]	; (8003edc <HAL_UART_MspInit+0x158>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003e2e:	4b2b      	ldr	r3, [pc, #172]	; (8003edc <HAL_UART_MspInit+0x158>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e34:	4b29      	ldr	r3, [pc, #164]	; (8003edc <HAL_UART_MspInit+0x158>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e3a:	4b28      	ldr	r3, [pc, #160]	; (8003edc <HAL_UART_MspInit+0x158>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003e40:	4826      	ldr	r0, [pc, #152]	; (8003edc <HAL_UART_MspInit+0x158>)
 8003e42:	f000 fabf 	bl	80043c4 <HAL_DMA_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003e4c:	f7ff fe26 	bl	8003a9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a22      	ldr	r2, [pc, #136]	; (8003edc <HAL_UART_MspInit+0x158>)
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38
 8003e56:	4a21      	ldr	r2, [pc, #132]	; (8003edc <HAL_UART_MspInit+0x158>)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003e5c:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <HAL_UART_MspInit+0x160>)
 8003e5e:	4a22      	ldr	r2, [pc, #136]	; (8003ee8 <HAL_UART_MspInit+0x164>)
 8003e60:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003e62:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <HAL_UART_MspInit+0x160>)
 8003e64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e68:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <HAL_UART_MspInit+0x160>)
 8003e6c:	2240      	movs	r2, #64	; 0x40
 8003e6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e70:	4b1c      	ldr	r3, [pc, #112]	; (8003ee4 <HAL_UART_MspInit+0x160>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e76:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <HAL_UART_MspInit+0x160>)
 8003e78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e7e:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <HAL_UART_MspInit+0x160>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e84:	4b17      	ldr	r3, [pc, #92]	; (8003ee4 <HAL_UART_MspInit+0x160>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <HAL_UART_MspInit+0x160>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e90:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <HAL_UART_MspInit+0x160>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e96:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <HAL_UART_MspInit+0x160>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003e9c:	4811      	ldr	r0, [pc, #68]	; (8003ee4 <HAL_UART_MspInit+0x160>)
 8003e9e:	f000 fa91 	bl	80043c4 <HAL_DMA_Init>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8003ea8:	f7ff fdf8 	bl	8003a9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a0d      	ldr	r2, [pc, #52]	; (8003ee4 <HAL_UART_MspInit+0x160>)
 8003eb0:	635a      	str	r2, [r3, #52]	; 0x34
 8003eb2:	4a0c      	ldr	r2, [pc, #48]	; (8003ee4 <HAL_UART_MspInit+0x160>)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2100      	movs	r1, #0
 8003ebc:	2026      	movs	r0, #38	; 0x26
 8003ebe:	f000 fa4a 	bl	8004356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ec2:	2026      	movs	r0, #38	; 0x26
 8003ec4:	f000 fa63 	bl	800438e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ec8:	bf00      	nop
 8003eca:	3728      	adds	r7, #40	; 0x28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40004400 	.word	0x40004400
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	40020000 	.word	0x40020000
 8003edc:	2000060c 	.word	0x2000060c
 8003ee0:	40026088 	.word	0x40026088
 8003ee4:	2000066c 	.word	0x2000066c
 8003ee8:	400260a0 	.word	0x400260a0

08003eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ef0:	e7fe      	b.n	8003ef0 <NMI_Handler+0x4>

08003ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ef6:	e7fe      	b.n	8003ef6 <HardFault_Handler+0x4>

08003ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003efc:	e7fe      	b.n	8003efc <MemManage_Handler+0x4>

08003efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003efe:	b480      	push	{r7}
 8003f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f02:	e7fe      	b.n	8003f02 <BusFault_Handler+0x4>

08003f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f08:	e7fe      	b.n	8003f08 <UsageFault_Handler+0x4>

08003f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f26:	b480      	push	{r7}
 8003f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f2a:	bf00      	nop
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f38:	f000 f8ee 	bl	8004118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f3c:	bf00      	nop
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003f44:	4802      	ldr	r0, [pc, #8]	; (8003f50 <DMA1_Stream5_IRQHandler+0x10>)
 8003f46:	f000 fbd5 	bl	80046f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	2000060c 	.word	0x2000060c

08003f54 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003f58:	4802      	ldr	r0, [pc, #8]	; (8003f64 <DMA1_Stream6_IRQHandler+0x10>)
 8003f5a:	f000 fbcb 	bl	80046f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	2000066c 	.word	0x2000066c

08003f68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Emer_Pin);
 8003f6c:	2020      	movs	r0, #32
 8003f6e:	f001 f809 	bl	8004f84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f7c:	4803      	ldr	r0, [pc, #12]	; (8003f8c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003f7e:	f003 ff39 	bl	8007df4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003f82:	4803      	ldr	r0, [pc, #12]	; (8003f90 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003f84:	f003 ff36 	bl	8007df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003f88:	bf00      	nop
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	200004a8 	.word	0x200004a8
 8003f90:	20000580 	.word	0x20000580

08003f94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003f98:	4802      	ldr	r0, [pc, #8]	; (8003fa4 <I2C1_EV_IRQHandler+0x10>)
 8003f9a:	f001 faa3 	bl	80054e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000454 	.word	0x20000454

08003fa8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003fac:	4802      	ldr	r0, [pc, #8]	; (8003fb8 <I2C1_ER_IRQHandler+0x10>)
 8003fae:	f001 fc0a 	bl	80057c6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003fb2:	bf00      	nop
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000454 	.word	0x20000454

08003fbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003fc0:	4802      	ldr	r0, [pc, #8]	; (8003fcc <USART2_IRQHandler+0x10>)
 8003fc2:	f004 fea3 	bl	8008d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003fc6:	bf00      	nop
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	200005c8 	.word	0x200005c8

08003fd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Proxi_Pin);
 8003fd4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003fd8:	f000 ffd4 	bl	8004f84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003fdc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003fe0:	f000 ffd0 	bl	8004f84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fe4:	bf00      	nop
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003fec:	4802      	ldr	r0, [pc, #8]	; (8003ff8 <TIM5_IRQHandler+0x10>)
 8003fee:	f003 ff01 	bl	8007df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000538 	.word	0x20000538

08003ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <SystemInit+0x20>)
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004006:	4a05      	ldr	r2, [pc, #20]	; (800401c <SystemInit+0x20>)
 8004008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800400c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004058 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004024:	480d      	ldr	r0, [pc, #52]	; (800405c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004026:	490e      	ldr	r1, [pc, #56]	; (8004060 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004028:	4a0e      	ldr	r2, [pc, #56]	; (8004064 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800402a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800402c:	e002      	b.n	8004034 <LoopCopyDataInit>

0800402e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800402e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004032:	3304      	adds	r3, #4

08004034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004038:	d3f9      	bcc.n	800402e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800403a:	4a0b      	ldr	r2, [pc, #44]	; (8004068 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800403c:	4c0b      	ldr	r4, [pc, #44]	; (800406c <LoopFillZerobss+0x26>)
  movs r3, #0
 800403e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004040:	e001      	b.n	8004046 <LoopFillZerobss>

08004042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004044:	3204      	adds	r2, #4

08004046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004048:	d3fb      	bcc.n	8004042 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800404a:	f7ff ffd7 	bl	8003ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800404e:	f006 fa1f 	bl	800a490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004052:	f7fd feb5 	bl	8001dc0 <main>
  bx  lr    
 8004056:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004058:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800405c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004060:	20000438 	.word	0x20000438
  ldr r2, =_sidata
 8004064:	0800a54c 	.word	0x0800a54c
  ldr r2, =_sbss
 8004068:	20000438 	.word	0x20000438
  ldr r4, =_ebss
 800406c:	20000aec 	.word	0x20000aec

08004070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004070:	e7fe      	b.n	8004070 <ADC_IRQHandler>
	...

08004074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004078:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <HAL_Init+0x40>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a0d      	ldr	r2, [pc, #52]	; (80040b4 <HAL_Init+0x40>)
 800407e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_Init+0x40>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <HAL_Init+0x40>)
 800408a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800408e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004090:	4b08      	ldr	r3, [pc, #32]	; (80040b4 <HAL_Init+0x40>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a07      	ldr	r2, [pc, #28]	; (80040b4 <HAL_Init+0x40>)
 8004096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800409c:	2003      	movs	r0, #3
 800409e:	f000 f94f 	bl	8004340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040a2:	2000      	movs	r0, #0
 80040a4:	f000 f808 	bl	80040b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040a8:	f7ff fcfe 	bl	8003aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40023c00 	.word	0x40023c00

080040b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040c0:	4b12      	ldr	r3, [pc, #72]	; (800410c <HAL_InitTick+0x54>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4b12      	ldr	r3, [pc, #72]	; (8004110 <HAL_InitTick+0x58>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	4619      	mov	r1, r3
 80040ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80040d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f967 	bl	80043aa <HAL_SYSTICK_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e00e      	b.n	8004104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b0f      	cmp	r3, #15
 80040ea:	d80a      	bhi.n	8004102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040ec:	2200      	movs	r2, #0
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295
 80040f4:	f000 f92f 	bl	8004356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040f8:	4a06      	ldr	r2, [pc, #24]	; (8004114 <HAL_InitTick+0x5c>)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	e000      	b.n	8004104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	2000042c 	.word	0x2000042c
 8004110:	20000434 	.word	0x20000434
 8004114:	20000430 	.word	0x20000430

08004118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <HAL_IncTick+0x20>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	4b06      	ldr	r3, [pc, #24]	; (800413c <HAL_IncTick+0x24>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4413      	add	r3, r2
 8004128:	4a04      	ldr	r2, [pc, #16]	; (800413c <HAL_IncTick+0x24>)
 800412a:	6013      	str	r3, [r2, #0]
}
 800412c:	bf00      	nop
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	20000434 	.word	0x20000434
 800413c:	20000ae8 	.word	0x20000ae8

08004140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return uwTick;
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <HAL_GetTick+0x14>)
 8004146:	681b      	ldr	r3, [r3, #0]
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000ae8 	.word	0x20000ae8

08004158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004160:	f7ff ffee 	bl	8004140 <HAL_GetTick>
 8004164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004170:	d005      	beq.n	800417e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004172:	4b0a      	ldr	r3, [pc, #40]	; (800419c <HAL_Delay+0x44>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800417e:	bf00      	nop
 8004180:	f7ff ffde 	bl	8004140 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	429a      	cmp	r2, r3
 800418e:	d8f7      	bhi.n	8004180 <HAL_Delay+0x28>
  {
  }
}
 8004190:	bf00      	nop
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000434 	.word	0x20000434

080041a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041b0:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <__NVIC_SetPriorityGrouping+0x44>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041bc:	4013      	ands	r3, r2
 80041be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041d2:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <__NVIC_SetPriorityGrouping+0x44>)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	60d3      	str	r3, [r2, #12]
}
 80041d8:	bf00      	nop
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	e000ed00 	.word	0xe000ed00

080041e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041ec:	4b04      	ldr	r3, [pc, #16]	; (8004200 <__NVIC_GetPriorityGrouping+0x18>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	0a1b      	lsrs	r3, r3, #8
 80041f2:	f003 0307 	and.w	r3, r3, #7
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	e000ed00 	.word	0xe000ed00

08004204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800420e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004212:	2b00      	cmp	r3, #0
 8004214:	db0b      	blt.n	800422e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	f003 021f 	and.w	r2, r3, #31
 800421c:	4907      	ldr	r1, [pc, #28]	; (800423c <__NVIC_EnableIRQ+0x38>)
 800421e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	2001      	movs	r0, #1
 8004226:	fa00 f202 	lsl.w	r2, r0, r2
 800422a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	e000e100 	.word	0xe000e100

08004240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	6039      	str	r1, [r7, #0]
 800424a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800424c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004250:	2b00      	cmp	r3, #0
 8004252:	db0a      	blt.n	800426a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	b2da      	uxtb	r2, r3
 8004258:	490c      	ldr	r1, [pc, #48]	; (800428c <__NVIC_SetPriority+0x4c>)
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	0112      	lsls	r2, r2, #4
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	440b      	add	r3, r1
 8004264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004268:	e00a      	b.n	8004280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	b2da      	uxtb	r2, r3
 800426e:	4908      	ldr	r1, [pc, #32]	; (8004290 <__NVIC_SetPriority+0x50>)
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	3b04      	subs	r3, #4
 8004278:	0112      	lsls	r2, r2, #4
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	440b      	add	r3, r1
 800427e:	761a      	strb	r2, [r3, #24]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	e000e100 	.word	0xe000e100
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004294:	b480      	push	{r7}
 8004296:	b089      	sub	sp, #36	; 0x24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f1c3 0307 	rsb	r3, r3, #7
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	bf28      	it	cs
 80042b2:	2304      	movcs	r3, #4
 80042b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	3304      	adds	r3, #4
 80042ba:	2b06      	cmp	r3, #6
 80042bc:	d902      	bls.n	80042c4 <NVIC_EncodePriority+0x30>
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3b03      	subs	r3, #3
 80042c2:	e000      	b.n	80042c6 <NVIC_EncodePriority+0x32>
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c8:	f04f 32ff 	mov.w	r2, #4294967295
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43da      	mvns	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	401a      	ands	r2, r3
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042dc:	f04f 31ff 	mov.w	r1, #4294967295
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	fa01 f303 	lsl.w	r3, r1, r3
 80042e6:	43d9      	mvns	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042ec:	4313      	orrs	r3, r2
         );
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3724      	adds	r7, #36	; 0x24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3b01      	subs	r3, #1
 8004308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800430c:	d301      	bcc.n	8004312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800430e:	2301      	movs	r3, #1
 8004310:	e00f      	b.n	8004332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004312:	4a0a      	ldr	r2, [pc, #40]	; (800433c <SysTick_Config+0x40>)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3b01      	subs	r3, #1
 8004318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800431a:	210f      	movs	r1, #15
 800431c:	f04f 30ff 	mov.w	r0, #4294967295
 8004320:	f7ff ff8e 	bl	8004240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004324:	4b05      	ldr	r3, [pc, #20]	; (800433c <SysTick_Config+0x40>)
 8004326:	2200      	movs	r2, #0
 8004328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800432a:	4b04      	ldr	r3, [pc, #16]	; (800433c <SysTick_Config+0x40>)
 800432c:	2207      	movs	r2, #7
 800432e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	e000e010 	.word	0xe000e010

08004340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff ff29 	bl	80041a0 <__NVIC_SetPriorityGrouping>
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004356:	b580      	push	{r7, lr}
 8004358:	b086      	sub	sp, #24
 800435a:	af00      	add	r7, sp, #0
 800435c:	4603      	mov	r3, r0
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
 8004362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004368:	f7ff ff3e 	bl	80041e8 <__NVIC_GetPriorityGrouping>
 800436c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	6978      	ldr	r0, [r7, #20]
 8004374:	f7ff ff8e 	bl	8004294 <NVIC_EncodePriority>
 8004378:	4602      	mov	r2, r0
 800437a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800437e:	4611      	mov	r1, r2
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff ff5d 	bl	8004240 <__NVIC_SetPriority>
}
 8004386:	bf00      	nop
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	4603      	mov	r3, r0
 8004396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff ff31 	bl	8004204 <__NVIC_EnableIRQ>
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff ffa2 	bl	80042fc <SysTick_Config>
 80043b8:	4603      	mov	r3, r0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80043d0:	f7ff feb6 	bl	8004140 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e099      	b.n	8004514 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0201 	bic.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004400:	e00f      	b.n	8004422 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004402:	f7ff fe9d 	bl	8004140 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b05      	cmp	r3, #5
 800440e:	d908      	bls.n	8004422 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2203      	movs	r2, #3
 800441a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e078      	b.n	8004514 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e8      	bne.n	8004402 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4b38      	ldr	r3, [pc, #224]	; (800451c <HAL_DMA_Init+0x158>)
 800443c:	4013      	ands	r3, r2
 800443e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800444e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800445a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004466:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	2b04      	cmp	r3, #4
 800447a:	d107      	bne.n	800448c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004484:	4313      	orrs	r3, r2
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f023 0307 	bic.w	r3, r3, #7
 80044a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d117      	bne.n	80044e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00e      	beq.n	80044e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fb0f 	bl	8004aec <DMA_CheckFifoParam>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2240      	movs	r2, #64	; 0x40
 80044d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80044e2:	2301      	movs	r3, #1
 80044e4:	e016      	b.n	8004514 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fac6 	bl	8004a80 <DMA_CalcBaseAndBitshift>
 80044f4:	4603      	mov	r3, r0
 80044f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fc:	223f      	movs	r2, #63	; 0x3f
 80044fe:	409a      	lsls	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	f010803f 	.word	0xf010803f

08004520 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_DMA_Start_IT+0x26>
 8004542:	2302      	movs	r3, #2
 8004544:	e040      	b.n	80045c8 <HAL_DMA_Start_IT+0xa8>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b01      	cmp	r3, #1
 8004558:	d12f      	bne.n	80045ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2202      	movs	r2, #2
 800455e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	68b9      	ldr	r1, [r7, #8]
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 fa58 	bl	8004a24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004578:	223f      	movs	r2, #63	; 0x3f
 800457a:	409a      	lsls	r2, r3
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0216 	orr.w	r2, r2, #22
 800458e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0208 	orr.w	r2, r2, #8
 80045a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e005      	b.n	80045c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80045c2:	2302      	movs	r3, #2
 80045c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80045de:	f7ff fdaf 	bl	8004140 <HAL_GetTick>
 80045e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d008      	beq.n	8004602 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2280      	movs	r2, #128	; 0x80
 80045f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e052      	b.n	80046a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0216 	bic.w	r2, r2, #22
 8004610:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695a      	ldr	r2, [r3, #20]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004620:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d103      	bne.n	8004632 <HAL_DMA_Abort+0x62>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462e:	2b00      	cmp	r3, #0
 8004630:	d007      	beq.n	8004642 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0208 	bic.w	r2, r2, #8
 8004640:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0201 	bic.w	r2, r2, #1
 8004650:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004652:	e013      	b.n	800467c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004654:	f7ff fd74 	bl	8004140 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b05      	cmp	r3, #5
 8004660:	d90c      	bls.n	800467c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2203      	movs	r2, #3
 800466c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e015      	b.n	80046a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e4      	bne.n	8004654 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468e:	223f      	movs	r2, #63	; 0x3f
 8004690:	409a      	lsls	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d004      	beq.n	80046ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2280      	movs	r2, #128	; 0x80
 80046c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e00c      	b.n	80046e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2205      	movs	r2, #5
 80046d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0201 	bic.w	r2, r2, #1
 80046e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004700:	4b8e      	ldr	r3, [pc, #568]	; (800493c <HAL_DMA_IRQHandler+0x248>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a8e      	ldr	r2, [pc, #568]	; (8004940 <HAL_DMA_IRQHandler+0x24c>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	0a9b      	lsrs	r3, r3, #10
 800470c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004712:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471e:	2208      	movs	r2, #8
 8004720:	409a      	lsls	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4013      	ands	r3, r2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d01a      	beq.n	8004760 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d013      	beq.n	8004760 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0204 	bic.w	r2, r2, #4
 8004746:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474c:	2208      	movs	r2, #8
 800474e:	409a      	lsls	r2, r3
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004758:	f043 0201 	orr.w	r2, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004764:	2201      	movs	r2, #1
 8004766:	409a      	lsls	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d012      	beq.n	8004796 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00b      	beq.n	8004796 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004782:	2201      	movs	r2, #1
 8004784:	409a      	lsls	r2, r3
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478e:	f043 0202 	orr.w	r2, r3, #2
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479a:	2204      	movs	r2, #4
 800479c:	409a      	lsls	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4013      	ands	r3, r2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d012      	beq.n	80047cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00b      	beq.n	80047cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b8:	2204      	movs	r2, #4
 80047ba:	409a      	lsls	r2, r3
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c4:	f043 0204 	orr.w	r2, r3, #4
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d0:	2210      	movs	r2, #16
 80047d2:	409a      	lsls	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d043      	beq.n	8004864 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d03c      	beq.n	8004864 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ee:	2210      	movs	r2, #16
 80047f0:	409a      	lsls	r2, r3
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d018      	beq.n	8004836 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d108      	bne.n	8004824 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d024      	beq.n	8004864 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	4798      	blx	r3
 8004822:	e01f      	b.n	8004864 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004828:	2b00      	cmp	r3, #0
 800482a:	d01b      	beq.n	8004864 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	4798      	blx	r3
 8004834:	e016      	b.n	8004864 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004840:	2b00      	cmp	r3, #0
 8004842:	d107      	bne.n	8004854 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0208 	bic.w	r2, r2, #8
 8004852:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004868:	2220      	movs	r2, #32
 800486a:	409a      	lsls	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 808f 	beq.w	8004994 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 8087 	beq.w	8004994 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488a:	2220      	movs	r2, #32
 800488c:	409a      	lsls	r2, r3
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b05      	cmp	r3, #5
 800489c:	d136      	bne.n	800490c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0216 	bic.w	r2, r2, #22
 80048ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695a      	ldr	r2, [r3, #20]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d103      	bne.n	80048ce <HAL_DMA_IRQHandler+0x1da>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d007      	beq.n	80048de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0208 	bic.w	r2, r2, #8
 80048dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e2:	223f      	movs	r2, #63	; 0x3f
 80048e4:	409a      	lsls	r2, r3
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d07e      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	4798      	blx	r3
        }
        return;
 800490a:	e079      	b.n	8004a00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d01d      	beq.n	8004956 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10d      	bne.n	8004944 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492c:	2b00      	cmp	r3, #0
 800492e:	d031      	beq.n	8004994 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	4798      	blx	r3
 8004938:	e02c      	b.n	8004994 <HAL_DMA_IRQHandler+0x2a0>
 800493a:	bf00      	nop
 800493c:	2000042c 	.word	0x2000042c
 8004940:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004948:	2b00      	cmp	r3, #0
 800494a:	d023      	beq.n	8004994 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	4798      	blx	r3
 8004954:	e01e      	b.n	8004994 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10f      	bne.n	8004984 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0210 	bic.w	r2, r2, #16
 8004972:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004998:	2b00      	cmp	r3, #0
 800499a:	d032      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d022      	beq.n	80049ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2205      	movs	r2, #5
 80049ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0201 	bic.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	3301      	adds	r3, #1
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d307      	bcc.n	80049dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f2      	bne.n	80049c0 <HAL_DMA_IRQHandler+0x2cc>
 80049da:	e000      	b.n	80049de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80049dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	4798      	blx	r3
 80049fe:	e000      	b.n	8004a02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a00:	bf00      	nop
    }
  }
}
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a16:	b2db      	uxtb	r3, r3
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b40      	cmp	r3, #64	; 0x40
 8004a50:	d108      	bne.n	8004a64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a62:	e007      	b.n	8004a74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	60da      	str	r2, [r3, #12]
}
 8004a74:	bf00      	nop
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	3b10      	subs	r3, #16
 8004a90:	4a14      	ldr	r2, [pc, #80]	; (8004ae4 <DMA_CalcBaseAndBitshift+0x64>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	091b      	lsrs	r3, r3, #4
 8004a98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a9a:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <DMA_CalcBaseAndBitshift+0x68>)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d909      	bls.n	8004ac2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ab6:	f023 0303 	bic.w	r3, r3, #3
 8004aba:	1d1a      	adds	r2, r3, #4
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	659a      	str	r2, [r3, #88]	; 0x58
 8004ac0:	e007      	b.n	8004ad2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004aca:	f023 0303 	bic.w	r3, r3, #3
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	aaaaaaab 	.word	0xaaaaaaab
 8004ae8:	0800a534 	.word	0x0800a534

08004aec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d11f      	bne.n	8004b46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d856      	bhi.n	8004bba <DMA_CheckFifoParam+0xce>
 8004b0c:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <DMA_CheckFifoParam+0x28>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004b25 	.word	0x08004b25
 8004b18:	08004b37 	.word	0x08004b37
 8004b1c:	08004b25 	.word	0x08004b25
 8004b20:	08004bbb 	.word	0x08004bbb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d046      	beq.n	8004bbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b34:	e043      	b.n	8004bbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b3e:	d140      	bne.n	8004bc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b44:	e03d      	b.n	8004bc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b4e:	d121      	bne.n	8004b94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d837      	bhi.n	8004bc6 <DMA_CheckFifoParam+0xda>
 8004b56:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <DMA_CheckFifoParam+0x70>)
 8004b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5c:	08004b6d 	.word	0x08004b6d
 8004b60:	08004b73 	.word	0x08004b73
 8004b64:	08004b6d 	.word	0x08004b6d
 8004b68:	08004b85 	.word	0x08004b85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b70:	e030      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d025      	beq.n	8004bca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b82:	e022      	b.n	8004bca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b8c:	d11f      	bne.n	8004bce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b92:	e01c      	b.n	8004bce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d903      	bls.n	8004ba2 <DMA_CheckFifoParam+0xb6>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d003      	beq.n	8004ba8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ba0:	e018      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba6:	e015      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00e      	beq.n	8004bd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb8:	e00b      	b.n	8004bd2 <DMA_CheckFifoParam+0xe6>
      break;
 8004bba:	bf00      	nop
 8004bbc:	e00a      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bbe:	bf00      	nop
 8004bc0:	e008      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bc2:	bf00      	nop
 8004bc4:	e006      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bc6:	bf00      	nop
 8004bc8:	e004      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bca:	bf00      	nop
 8004bcc:	e002      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004bce:	bf00      	nop
 8004bd0:	e000      	b.n	8004bd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bd2:	bf00      	nop
    }
  } 
  
  return status; 
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop

08004be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b089      	sub	sp, #36	; 0x24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
 8004bfe:	e159      	b.n	8004eb4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c00:	2201      	movs	r2, #1
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	4013      	ands	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	f040 8148 	bne.w	8004eae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d005      	beq.n	8004c36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d130      	bne.n	8004c98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	2203      	movs	r2, #3
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	43db      	mvns	r3, r3
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	091b      	lsrs	r3, r3, #4
 8004c82:	f003 0201 	and.w	r2, r3, #1
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f003 0303 	and.w	r3, r3, #3
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d017      	beq.n	8004cd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	2203      	movs	r2, #3
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d123      	bne.n	8004d28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	08da      	lsrs	r2, r3, #3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3208      	adds	r2, #8
 8004ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	220f      	movs	r2, #15
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4013      	ands	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	08da      	lsrs	r2, r3, #3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	3208      	adds	r2, #8
 8004d22:	69b9      	ldr	r1, [r7, #24]
 8004d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	2203      	movs	r2, #3
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f003 0203 	and.w	r2, r3, #3
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 80a2 	beq.w	8004eae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	4b57      	ldr	r3, [pc, #348]	; (8004ecc <HAL_GPIO_Init+0x2e8>)
 8004d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d72:	4a56      	ldr	r2, [pc, #344]	; (8004ecc <HAL_GPIO_Init+0x2e8>)
 8004d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d78:	6453      	str	r3, [r2, #68]	; 0x44
 8004d7a:	4b54      	ldr	r3, [pc, #336]	; (8004ecc <HAL_GPIO_Init+0x2e8>)
 8004d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d86:	4a52      	ldr	r2, [pc, #328]	; (8004ed0 <HAL_GPIO_Init+0x2ec>)
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	089b      	lsrs	r3, r3, #2
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	220f      	movs	r2, #15
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	43db      	mvns	r3, r3
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	4013      	ands	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a49      	ldr	r2, [pc, #292]	; (8004ed4 <HAL_GPIO_Init+0x2f0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d019      	beq.n	8004de6 <HAL_GPIO_Init+0x202>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a48      	ldr	r2, [pc, #288]	; (8004ed8 <HAL_GPIO_Init+0x2f4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d013      	beq.n	8004de2 <HAL_GPIO_Init+0x1fe>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a47      	ldr	r2, [pc, #284]	; (8004edc <HAL_GPIO_Init+0x2f8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00d      	beq.n	8004dde <HAL_GPIO_Init+0x1fa>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a46      	ldr	r2, [pc, #280]	; (8004ee0 <HAL_GPIO_Init+0x2fc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d007      	beq.n	8004dda <HAL_GPIO_Init+0x1f6>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a45      	ldr	r2, [pc, #276]	; (8004ee4 <HAL_GPIO_Init+0x300>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d101      	bne.n	8004dd6 <HAL_GPIO_Init+0x1f2>
 8004dd2:	2304      	movs	r3, #4
 8004dd4:	e008      	b.n	8004de8 <HAL_GPIO_Init+0x204>
 8004dd6:	2307      	movs	r3, #7
 8004dd8:	e006      	b.n	8004de8 <HAL_GPIO_Init+0x204>
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e004      	b.n	8004de8 <HAL_GPIO_Init+0x204>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e002      	b.n	8004de8 <HAL_GPIO_Init+0x204>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <HAL_GPIO_Init+0x204>
 8004de6:	2300      	movs	r3, #0
 8004de8:	69fa      	ldr	r2, [r7, #28]
 8004dea:	f002 0203 	and.w	r2, r2, #3
 8004dee:	0092      	lsls	r2, r2, #2
 8004df0:	4093      	lsls	r3, r2
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004df8:	4935      	ldr	r1, [pc, #212]	; (8004ed0 <HAL_GPIO_Init+0x2ec>)
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	089b      	lsrs	r3, r3, #2
 8004dfe:	3302      	adds	r3, #2
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e06:	4b38      	ldr	r3, [pc, #224]	; (8004ee8 <HAL_GPIO_Init+0x304>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4013      	ands	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e2a:	4a2f      	ldr	r2, [pc, #188]	; (8004ee8 <HAL_GPIO_Init+0x304>)
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e30:	4b2d      	ldr	r3, [pc, #180]	; (8004ee8 <HAL_GPIO_Init+0x304>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e54:	4a24      	ldr	r2, [pc, #144]	; (8004ee8 <HAL_GPIO_Init+0x304>)
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e5a:	4b23      	ldr	r3, [pc, #140]	; (8004ee8 <HAL_GPIO_Init+0x304>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	43db      	mvns	r3, r3
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	4013      	ands	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ee8 <HAL_GPIO_Init+0x304>)
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e84:	4b18      	ldr	r3, [pc, #96]	; (8004ee8 <HAL_GPIO_Init+0x304>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4013      	ands	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ea8:	4a0f      	ldr	r2, [pc, #60]	; (8004ee8 <HAL_GPIO_Init+0x304>)
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	61fb      	str	r3, [r7, #28]
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	2b0f      	cmp	r3, #15
 8004eb8:	f67f aea2 	bls.w	8004c00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ebc:	bf00      	nop
 8004ebe:	bf00      	nop
 8004ec0:	3724      	adds	r7, #36	; 0x24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	40013800 	.word	0x40013800
 8004ed4:	40020000 	.word	0x40020000
 8004ed8:	40020400 	.word	0x40020400
 8004edc:	40020800 	.word	0x40020800
 8004ee0:	40020c00 	.word	0x40020c00
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	40013c00 	.word	0x40013c00

08004eec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	887b      	ldrh	r3, [r7, #2]
 8004efe:	4013      	ands	r3, r2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
 8004f08:	e001      	b.n	8004f0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	807b      	strh	r3, [r7, #2]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f2c:	787b      	ldrb	r3, [r7, #1]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f32:	887a      	ldrh	r2, [r7, #2]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f38:	e003      	b.n	8004f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f3a:	887b      	ldrh	r3, [r7, #2]
 8004f3c:	041a      	lsls	r2, r3, #16
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	619a      	str	r2, [r3, #24]
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	460b      	mov	r3, r1
 8004f58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f60:	887a      	ldrh	r2, [r7, #2]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4013      	ands	r3, r2
 8004f66:	041a      	lsls	r2, r3, #16
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	43d9      	mvns	r1, r3
 8004f6c:	887b      	ldrh	r3, [r7, #2]
 8004f6e:	400b      	ands	r3, r1
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	619a      	str	r2, [r3, #24]
}
 8004f76:	bf00      	nop
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
	...

08004f84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f8e:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f90:	695a      	ldr	r2, [r3, #20]
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	4013      	ands	r3, r2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d006      	beq.n	8004fa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f9a:	4a05      	ldr	r2, [pc, #20]	; (8004fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f9c:	88fb      	ldrh	r3, [r7, #6]
 8004f9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fa0:	88fb      	ldrh	r3, [r7, #6]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fe fb64 	bl	8003670 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fa8:	bf00      	nop
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40013c00 	.word	0x40013c00

08004fb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e12b      	b.n	800521e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fe fd8c 	bl	8003af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2224      	movs	r2, #36	; 0x24
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005006:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005016:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005018:	f002 fbb0 	bl	800777c <HAL_RCC_GetPCLK1Freq>
 800501c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	4a81      	ldr	r2, [pc, #516]	; (8005228 <HAL_I2C_Init+0x274>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d807      	bhi.n	8005038 <HAL_I2C_Init+0x84>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4a80      	ldr	r2, [pc, #512]	; (800522c <HAL_I2C_Init+0x278>)
 800502c:	4293      	cmp	r3, r2
 800502e:	bf94      	ite	ls
 8005030:	2301      	movls	r3, #1
 8005032:	2300      	movhi	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	e006      	b.n	8005046 <HAL_I2C_Init+0x92>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4a7d      	ldr	r2, [pc, #500]	; (8005230 <HAL_I2C_Init+0x27c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	bf94      	ite	ls
 8005040:	2301      	movls	r3, #1
 8005042:	2300      	movhi	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e0e7      	b.n	800521e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4a78      	ldr	r2, [pc, #480]	; (8005234 <HAL_I2C_Init+0x280>)
 8005052:	fba2 2303 	umull	r2, r3, r2, r3
 8005056:	0c9b      	lsrs	r3, r3, #18
 8005058:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4a6a      	ldr	r2, [pc, #424]	; (8005228 <HAL_I2C_Init+0x274>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d802      	bhi.n	8005088 <HAL_I2C_Init+0xd4>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	3301      	adds	r3, #1
 8005086:	e009      	b.n	800509c <HAL_I2C_Init+0xe8>
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800508e:	fb02 f303 	mul.w	r3, r2, r3
 8005092:	4a69      	ldr	r2, [pc, #420]	; (8005238 <HAL_I2C_Init+0x284>)
 8005094:	fba2 2303 	umull	r2, r3, r2, r3
 8005098:	099b      	lsrs	r3, r3, #6
 800509a:	3301      	adds	r3, #1
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	430b      	orrs	r3, r1
 80050a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	495c      	ldr	r1, [pc, #368]	; (8005228 <HAL_I2C_Init+0x274>)
 80050b8:	428b      	cmp	r3, r1
 80050ba:	d819      	bhi.n	80050f0 <HAL_I2C_Init+0x13c>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	1e59      	subs	r1, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80050ca:	1c59      	adds	r1, r3, #1
 80050cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050d0:	400b      	ands	r3, r1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <HAL_I2C_Init+0x138>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	1e59      	subs	r1, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80050e4:	3301      	adds	r3, #1
 80050e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ea:	e051      	b.n	8005190 <HAL_I2C_Init+0x1dc>
 80050ec:	2304      	movs	r3, #4
 80050ee:	e04f      	b.n	8005190 <HAL_I2C_Init+0x1dc>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d111      	bne.n	800511c <HAL_I2C_Init+0x168>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	1e58      	subs	r0, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6859      	ldr	r1, [r3, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	440b      	add	r3, r1
 8005106:	fbb0 f3f3 	udiv	r3, r0, r3
 800510a:	3301      	adds	r3, #1
 800510c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005110:	2b00      	cmp	r3, #0
 8005112:	bf0c      	ite	eq
 8005114:	2301      	moveq	r3, #1
 8005116:	2300      	movne	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	e012      	b.n	8005142 <HAL_I2C_Init+0x18e>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	1e58      	subs	r0, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6859      	ldr	r1, [r3, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	0099      	lsls	r1, r3, #2
 800512c:	440b      	add	r3, r1
 800512e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005132:	3301      	adds	r3, #1
 8005134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005138:	2b00      	cmp	r3, #0
 800513a:	bf0c      	ite	eq
 800513c:	2301      	moveq	r3, #1
 800513e:	2300      	movne	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_I2C_Init+0x196>
 8005146:	2301      	movs	r3, #1
 8005148:	e022      	b.n	8005190 <HAL_I2C_Init+0x1dc>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10e      	bne.n	8005170 <HAL_I2C_Init+0x1bc>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1e58      	subs	r0, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6859      	ldr	r1, [r3, #4]
 800515a:	460b      	mov	r3, r1
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	440b      	add	r3, r1
 8005160:	fbb0 f3f3 	udiv	r3, r0, r3
 8005164:	3301      	adds	r3, #1
 8005166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800516a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800516e:	e00f      	b.n	8005190 <HAL_I2C_Init+0x1dc>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	1e58      	subs	r0, r3, #1
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6859      	ldr	r1, [r3, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	0099      	lsls	r1, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	fbb0 f3f3 	udiv	r3, r0, r3
 8005186:	3301      	adds	r3, #1
 8005188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800518c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	6809      	ldr	r1, [r1, #0]
 8005194:	4313      	orrs	r3, r2
 8005196:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69da      	ldr	r2, [r3, #28]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6911      	ldr	r1, [r2, #16]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	68d2      	ldr	r2, [r2, #12]
 80051ca:	4311      	orrs	r1, r2
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	430b      	orrs	r3, r1
 80051d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695a      	ldr	r2, [r3, #20]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	000186a0 	.word	0x000186a0
 800522c:	001e847f 	.word	0x001e847f
 8005230:	003d08ff 	.word	0x003d08ff
 8005234:	431bde83 	.word	0x431bde83
 8005238:	10624dd3 	.word	0x10624dd3

0800523c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	607a      	str	r2, [r7, #4]
 8005246:	461a      	mov	r2, r3
 8005248:	460b      	mov	r3, r1
 800524a:	817b      	strh	r3, [r7, #10]
 800524c:	4613      	mov	r3, r2
 800524e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b20      	cmp	r3, #32
 800525e:	f040 8085 	bne.w	800536c <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005262:	4b46      	ldr	r3, [pc, #280]	; (800537c <HAL_I2C_Master_Transmit_IT+0x140>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	08db      	lsrs	r3, r3, #3
 8005268:	4a45      	ldr	r2, [pc, #276]	; (8005380 <HAL_I2C_Master_Transmit_IT+0x144>)
 800526a:	fba2 2303 	umull	r2, r3, r2, r3
 800526e:	0a1a      	lsrs	r2, r3, #8
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	009a      	lsls	r2, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	3b01      	subs	r3, #1
 8005280:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d116      	bne.n	80052b6 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	f043 0220 	orr.w	r2, r3, #32
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e05b      	b.n	800536e <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d0db      	beq.n	800527c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_I2C_Master_Transmit_IT+0x96>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e04d      	b.n	800536e <HAL_I2C_Master_Transmit_IT+0x132>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d007      	beq.n	80052f8 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005306:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2221      	movs	r2, #33	; 0x21
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2210      	movs	r2, #16
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	893a      	ldrh	r2, [r7, #8]
 8005328:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4a13      	ldr	r2, [pc, #76]	; (8005384 <HAL_I2C_Master_Transmit_IT+0x148>)
 8005338:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800533a:	897a      	ldrh	r2, [r7, #10]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005356:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005366:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	e000      	b.n	800536e <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800536c:	2302      	movs	r3, #2
  }
}
 800536e:	4618      	mov	r0, r3
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	2000042c 	.word	0x2000042c
 8005380:	14f8b589 	.word	0x14f8b589
 8005384:	ffff0000 	.word	0xffff0000

08005388 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	461a      	mov	r2, r3
 8005394:	460b      	mov	r3, r1
 8005396:	817b      	strh	r3, [r7, #10]
 8005398:	4613      	mov	r3, r2
 800539a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	f040 808d 	bne.w	80054c8 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80053ae:	4b4a      	ldr	r3, [pc, #296]	; (80054d8 <HAL_I2C_Master_Receive_IT+0x150>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	08db      	lsrs	r3, r3, #3
 80053b4:	4a49      	ldr	r2, [pc, #292]	; (80054dc <HAL_I2C_Master_Receive_IT+0x154>)
 80053b6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ba:	0a1a      	lsrs	r2, r3, #8
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	009a      	lsls	r2, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d116      	bne.n	8005402 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2220      	movs	r2, #32
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	f043 0220 	orr.w	r2, r3, #32
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e063      	b.n	80054ca <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b02      	cmp	r3, #2
 800540e:	d0db      	beq.n	80053c8 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <HAL_I2C_Master_Receive_IT+0x96>
 800541a:	2302      	movs	r3, #2
 800541c:	e055      	b.n	80054ca <HAL_I2C_Master_Receive_IT+0x142>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b01      	cmp	r3, #1
 8005432:	d007      	beq.n	8005444 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005452:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2222      	movs	r2, #34	; 0x22
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2210      	movs	r2, #16
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	893a      	ldrh	r2, [r7, #8]
 8005474:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4a17      	ldr	r2, [pc, #92]	; (80054e0 <HAL_I2C_Master_Receive_IT+0x158>)
 8005484:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005486:	897a      	ldrh	r2, [r7, #10]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80054a2:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054b2:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054c2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	e000      	b.n	80054ca <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80054c8:	2302      	movs	r3, #2
  }
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	2000042c 	.word	0x2000042c
 80054dc:	14f8b589 	.word	0x14f8b589
 80054e0:	ffff0000 	.word	0xffff0000

080054e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005504:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800550e:	7bfb      	ldrb	r3, [r7, #15]
 8005510:	2b10      	cmp	r3, #16
 8005512:	d003      	beq.n	800551c <HAL_I2C_EV_IRQHandler+0x38>
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	2b40      	cmp	r3, #64	; 0x40
 8005518:	f040 80c1 	bne.w	800569e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10d      	bne.n	8005552 <HAL_I2C_EV_IRQHandler+0x6e>
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800553c:	d003      	beq.n	8005546 <HAL_I2C_EV_IRQHandler+0x62>
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005544:	d101      	bne.n	800554a <HAL_I2C_EV_IRQHandler+0x66>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <HAL_I2C_EV_IRQHandler+0x68>
 800554a:	2300      	movs	r3, #0
 800554c:	2b01      	cmp	r3, #1
 800554e:	f000 8132 	beq.w	80057b6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00c      	beq.n	8005576 <HAL_I2C_EV_IRQHandler+0x92>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	0a5b      	lsrs	r3, r3, #9
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d006      	beq.n	8005576 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f001 fc7b 	bl	8006e64 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fd83 	bl	800607a <I2C_Master_SB>
 8005574:	e092      	b.n	800569c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	08db      	lsrs	r3, r3, #3
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <HAL_I2C_EV_IRQHandler+0xb2>
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	0a5b      	lsrs	r3, r3, #9
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fdf9 	bl	8006186 <I2C_Master_ADD10>
 8005594:	e082      	b.n	800569c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	085b      	lsrs	r3, r3, #1
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <HAL_I2C_EV_IRQHandler+0xd2>
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	0a5b      	lsrs	r3, r3, #9
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fe13 	bl	80061da <I2C_Master_ADDR>
 80055b4:	e072      	b.n	800569c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	089b      	lsrs	r3, r3, #2
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d03b      	beq.n	800563a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d0:	f000 80f3 	beq.w	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	09db      	lsrs	r3, r3, #7
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00f      	beq.n	8005600 <HAL_I2C_EV_IRQHandler+0x11c>
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	0a9b      	lsrs	r3, r3, #10
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d009      	beq.n	8005600 <HAL_I2C_EV_IRQHandler+0x11c>
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	089b      	lsrs	r3, r3, #2
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d103      	bne.n	8005600 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f9f3 	bl	80059e4 <I2C_MasterTransmit_TXE>
 80055fe:	e04d      	b.n	800569c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	089b      	lsrs	r3, r3, #2
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80d6 	beq.w	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	0a5b      	lsrs	r3, r3, #9
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 80cf 	beq.w	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800561c:	7bbb      	ldrb	r3, [r7, #14]
 800561e:	2b21      	cmp	r3, #33	; 0x21
 8005620:	d103      	bne.n	800562a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa7a 	bl	8005b1c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005628:	e0c7      	b.n	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	f040 80c4 	bne.w	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fae8 	bl	8005c08 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005638:	e0bf      	b.n	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005648:	f000 80b7 	beq.w	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	099b      	lsrs	r3, r3, #6
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00f      	beq.n	8005678 <HAL_I2C_EV_IRQHandler+0x194>
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	0a9b      	lsrs	r3, r3, #10
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d009      	beq.n	8005678 <HAL_I2C_EV_IRQHandler+0x194>
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	089b      	lsrs	r3, r3, #2
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d103      	bne.n	8005678 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fb5d 	bl	8005d30 <I2C_MasterReceive_RXNE>
 8005676:	e011      	b.n	800569c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	089b      	lsrs	r3, r3, #2
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 809a 	beq.w	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	0a5b      	lsrs	r3, r3, #9
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 8093 	beq.w	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fc06 	bl	8005ea6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800569a:	e08e      	b.n	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800569c:	e08d      	b.n	80057ba <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d004      	beq.n	80056b0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	61fb      	str	r3, [r7, #28]
 80056ae:	e007      	b.n	80056c0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d012      	beq.n	80056f2 <HAL_I2C_EV_IRQHandler+0x20e>
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	0a5b      	lsrs	r3, r3, #9
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00c      	beq.n	80056f2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80056e8:	69b9      	ldr	r1, [r7, #24]
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 ffc4 	bl	8006678 <I2C_Slave_ADDR>
 80056f0:	e066      	b.n	80057c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	091b      	lsrs	r3, r3, #4
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d009      	beq.n	8005712 <HAL_I2C_EV_IRQHandler+0x22e>
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	0a5b      	lsrs	r3, r3, #9
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fffe 	bl	800670c <I2C_Slave_STOPF>
 8005710:	e056      	b.n	80057c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005712:	7bbb      	ldrb	r3, [r7, #14]
 8005714:	2b21      	cmp	r3, #33	; 0x21
 8005716:	d002      	beq.n	800571e <HAL_I2C_EV_IRQHandler+0x23a>
 8005718:	7bbb      	ldrb	r3, [r7, #14]
 800571a:	2b29      	cmp	r3, #41	; 0x29
 800571c:	d125      	bne.n	800576a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	09db      	lsrs	r3, r3, #7
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00f      	beq.n	800574a <HAL_I2C_EV_IRQHandler+0x266>
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	0a9b      	lsrs	r3, r3, #10
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d009      	beq.n	800574a <HAL_I2C_EV_IRQHandler+0x266>
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	089b      	lsrs	r3, r3, #2
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d103      	bne.n	800574a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 feda 	bl	80064fc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005748:	e039      	b.n	80057be <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	089b      	lsrs	r3, r3, #2
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d033      	beq.n	80057be <HAL_I2C_EV_IRQHandler+0x2da>
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	0a5b      	lsrs	r3, r3, #9
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d02d      	beq.n	80057be <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 ff07 	bl	8006576 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005768:	e029      	b.n	80057be <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	099b      	lsrs	r3, r3, #6
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00f      	beq.n	8005796 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	0a9b      	lsrs	r3, r3, #10
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d009      	beq.n	8005796 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	089b      	lsrs	r3, r3, #2
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 ff12 	bl	80065b8 <I2C_SlaveReceive_RXNE>
 8005794:	e014      	b.n	80057c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	089b      	lsrs	r3, r3, #2
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00e      	beq.n	80057c0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	0a5b      	lsrs	r3, r3, #9
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d008      	beq.n	80057c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 ff40 	bl	8006634 <I2C_SlaveReceive_BTF>
 80057b4:	e004      	b.n	80057c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80057b6:	bf00      	nop
 80057b8:	e002      	b.n	80057c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057ba:	bf00      	nop
 80057bc:	e000      	b.n	80057c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057be:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80057c0:	3720      	adds	r7, #32
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b08a      	sub	sp, #40	; 0x28
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80057de:	2300      	movs	r3, #0
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057e8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	0a1b      	lsrs	r3, r3, #8
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00e      	beq.n	8005814 <HAL_I2C_ER_IRQHandler+0x4e>
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	0a1b      	lsrs	r3, r3, #8
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d008      	beq.n	8005814 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	f043 0301 	orr.w	r3, r3, #1
 8005808:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005812:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	0a5b      	lsrs	r3, r3, #9
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00e      	beq.n	800583e <HAL_I2C_ER_IRQHandler+0x78>
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	0a1b      	lsrs	r3, r3, #8
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d008      	beq.n	800583e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	f043 0302 	orr.w	r3, r3, #2
 8005832:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800583c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	0a9b      	lsrs	r3, r3, #10
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d03f      	beq.n	80058ca <HAL_I2C_ER_IRQHandler+0x104>
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	0a1b      	lsrs	r3, r3, #8
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d039      	beq.n	80058ca <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005856:	7efb      	ldrb	r3, [r7, #27]
 8005858:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585e:	b29b      	uxth	r3, r3
 8005860:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005868:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005870:	7ebb      	ldrb	r3, [r7, #26]
 8005872:	2b20      	cmp	r3, #32
 8005874:	d112      	bne.n	800589c <HAL_I2C_ER_IRQHandler+0xd6>
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10f      	bne.n	800589c <HAL_I2C_ER_IRQHandler+0xd6>
 800587c:	7cfb      	ldrb	r3, [r7, #19]
 800587e:	2b21      	cmp	r3, #33	; 0x21
 8005880:	d008      	beq.n	8005894 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005882:	7cfb      	ldrb	r3, [r7, #19]
 8005884:	2b29      	cmp	r3, #41	; 0x29
 8005886:	d005      	beq.n	8005894 <HAL_I2C_ER_IRQHandler+0xce>
 8005888:	7cfb      	ldrb	r3, [r7, #19]
 800588a:	2b28      	cmp	r3, #40	; 0x28
 800588c:	d106      	bne.n	800589c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b21      	cmp	r3, #33	; 0x21
 8005892:	d103      	bne.n	800589c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 f869 	bl	800696c <I2C_Slave_AF>
 800589a:	e016      	b.n	80058ca <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058a4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	f043 0304 	orr.w	r3, r3, #4
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80058ae:	7efb      	ldrb	r3, [r7, #27]
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d002      	beq.n	80058ba <HAL_I2C_ER_IRQHandler+0xf4>
 80058b4:	7efb      	ldrb	r3, [r7, #27]
 80058b6:	2b40      	cmp	r3, #64	; 0x40
 80058b8:	d107      	bne.n	80058ca <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	0adb      	lsrs	r3, r3, #11
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00e      	beq.n	80058f4 <HAL_I2C_ER_IRQHandler+0x12e>
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	0a1b      	lsrs	r3, r3, #8
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	f043 0308 	orr.w	r3, r3, #8
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80058f2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d008      	beq.n	800590c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f001 f8a0 	bl	8006a4c <I2C_ITError>
  }
}
 800590c:	bf00      	nop
 800590e:	3728      	adds	r7, #40	; 0x28
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	70fb      	strb	r3, [r7, #3]
 8005970:	4613      	mov	r3, r2
 8005972:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d150      	bne.n	8005aac <I2C_MasterTransmit_TXE+0xc8>
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	2b21      	cmp	r3, #33	; 0x21
 8005a0e:	d14d      	bne.n	8005aac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d01d      	beq.n	8005a52 <I2C_MasterTransmit_TXE+0x6e>
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d01a      	beq.n	8005a52 <I2C_MasterTransmit_TXE+0x6e>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a22:	d016      	beq.n	8005a52 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a32:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2211      	movs	r2, #17
 8005a38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7ff ff62 	bl	8005914 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a50:	e060      	b.n	8005b14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a60:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a70:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b40      	cmp	r3, #64	; 0x40
 8005a8a:	d107      	bne.n	8005a9c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff ff7d 	bl	8005994 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a9a:	e03b      	b.n	8005b14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff ff35 	bl	8005914 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005aaa:	e033      	b.n	8005b14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2b21      	cmp	r3, #33	; 0x21
 8005ab0:	d005      	beq.n	8005abe <I2C_MasterTransmit_TXE+0xda>
 8005ab2:	7bbb      	ldrb	r3, [r7, #14]
 8005ab4:	2b40      	cmp	r3, #64	; 0x40
 8005ab6:	d12d      	bne.n	8005b14 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	2b22      	cmp	r3, #34	; 0x22
 8005abc:	d12a      	bne.n	8005b14 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d108      	bne.n	8005ada <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005ad8:	e01c      	b.n	8005b14 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b40      	cmp	r3, #64	; 0x40
 8005ae4:	d103      	bne.n	8005aee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f88e 	bl	8005c08 <I2C_MemoryTransmit_TXE_BTF>
}
 8005aec:	e012      	b.n	8005b14 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	781a      	ldrb	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b12:	e7ff      	b.n	8005b14 <I2C_MasterTransmit_TXE+0x130>
 8005b14:	bf00      	nop
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b21      	cmp	r3, #33	; 0x21
 8005b34:	d164      	bne.n	8005c00 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d012      	beq.n	8005b66 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	781a      	ldrb	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005b64:	e04c      	b.n	8005c00 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d01d      	beq.n	8005ba8 <I2C_MasterTransmit_BTF+0x8c>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d01a      	beq.n	8005ba8 <I2C_MasterTransmit_BTF+0x8c>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b78:	d016      	beq.n	8005ba8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b88:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2211      	movs	r2, #17
 8005b8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7ff feb7 	bl	8005914 <HAL_I2C_MasterTxCpltCallback>
}
 8005ba6:	e02b      	b.n	8005c00 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bb6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bc6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b40      	cmp	r3, #64	; 0x40
 8005be0:	d107      	bne.n	8005bf2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff fed2 	bl	8005994 <HAL_I2C_MemTxCpltCallback>
}
 8005bf0:	e006      	b.n	8005c00 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff fe8a 	bl	8005914 <HAL_I2C_MasterTxCpltCallback>
}
 8005c00:	bf00      	nop
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d11d      	bne.n	8005c5c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d10b      	bne.n	8005c40 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c38:	1c9a      	adds	r2, r3, #2
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005c3e:	e073      	b.n	8005d28 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	121b      	asrs	r3, r3, #8
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005c5a:	e065      	b.n	8005d28 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d10b      	bne.n	8005c7c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005c7a:	e055      	b.n	8005d28 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d151      	bne.n	8005d28 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	2b22      	cmp	r3, #34	; 0x22
 8005c88:	d10d      	bne.n	8005ca6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c98:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005ca4:	e040      	b.n	8005d28 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d015      	beq.n	8005cdc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	2b21      	cmp	r3, #33	; 0x21
 8005cb4:	d112      	bne.n	8005cdc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	781a      	ldrb	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005cda:	e025      	b.n	8005d28 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d120      	bne.n	8005d28 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	2b21      	cmp	r3, #33	; 0x21
 8005cea:	d11d      	bne.n	8005d28 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cfa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d0a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff fe36 	bl	8005994 <HAL_I2C_MemTxCpltCallback>
}
 8005d28:	bf00      	nop
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b22      	cmp	r3, #34	; 0x22
 8005d42:	f040 80ac 	bne.w	8005e9e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d921      	bls.n	8005d98 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691a      	ldr	r2, [r3, #16]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	f040 808c 	bne.w	8005e9e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d94:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005d96:	e082      	b.n	8005e9e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d075      	beq.n	8005e8c <I2C_MasterReceive_RXNE+0x15c>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d002      	beq.n	8005dac <I2C_MasterReceive_RXNE+0x7c>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d16f      	bne.n	8005e8c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f001 f827 	bl	8006e00 <I2C_WaitOnSTOPRequestThroughIT>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d142      	bne.n	8005e3e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005dd6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691a      	ldr	r2, [r3, #16]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b40      	cmp	r3, #64	; 0x40
 8005e10:	d10a      	bne.n	8005e28 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff fdc1 	bl	80059a8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005e26:	e03a      	b.n	8005e9e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2212      	movs	r2, #18
 8005e34:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff fd76 	bl	8005928 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005e3c:	e02f      	b.n	8005e9e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e4c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff fd99 	bl	80059bc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005e8a:	e008      	b.n	8005e9e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e9a:	605a      	str	r2, [r3, #4]
}
 8005e9c:	e7ff      	b.n	8005e9e <I2C_MasterReceive_RXNE+0x16e>
 8005e9e:	bf00      	nop
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d11b      	bne.n	8005ef6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ecc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	b2d2      	uxtb	r2, r2
 8005eda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005ef4:	e0bd      	b.n	8006072 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d129      	bne.n	8005f54 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f0e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d00a      	beq.n	8005f2c <I2C_MasterReceive_BTF+0x86>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d007      	beq.n	8005f2c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691a      	ldr	r2, [r3, #16]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f52:	e08e      	b.n	8006072 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d176      	bne.n	800604c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d002      	beq.n	8005f6a <I2C_MasterReceive_BTF+0xc4>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b10      	cmp	r3, #16
 8005f68:	d108      	bne.n	8005f7c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	e019      	b.n	8005fb0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d002      	beq.n	8005f88 <I2C_MasterReceive_BTF+0xe2>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d108      	bne.n	8005f9a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	e00a      	b.n	8005fb0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b10      	cmp	r3, #16
 8005f9e:	d007      	beq.n	8005fb0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691a      	ldr	r2, [r3, #16]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	b2d2      	uxtb	r2, r2
 8005fe2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800600a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b40      	cmp	r3, #64	; 0x40
 800601e:	d10a      	bne.n	8006036 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff fcba 	bl	80059a8 <HAL_I2C_MemRxCpltCallback>
}
 8006034:	e01d      	b.n	8006072 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2212      	movs	r2, #18
 8006042:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff fc6f 	bl	8005928 <HAL_I2C_MasterRxCpltCallback>
}
 800604a:	e012      	b.n	8006072 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691a      	ldr	r2, [r3, #16]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006072:	bf00      	nop
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b40      	cmp	r3, #64	; 0x40
 800608c:	d117      	bne.n	80060be <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006092:	2b00      	cmp	r3, #0
 8006094:	d109      	bne.n	80060aa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609a:	b2db      	uxtb	r3, r3
 800609c:	461a      	mov	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80060a6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80060a8:	e067      	b.n	800617a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	f043 0301 	orr.w	r3, r3, #1
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	611a      	str	r2, [r3, #16]
}
 80060bc:	e05d      	b.n	800617a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060c6:	d133      	bne.n	8006130 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b21      	cmp	r3, #33	; 0x21
 80060d2:	d109      	bne.n	80060e8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80060e4:	611a      	str	r2, [r3, #16]
 80060e6:	e008      	b.n	80060fa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	f043 0301 	orr.w	r3, r3, #1
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d004      	beq.n	800610c <I2C_Master_SB+0x92>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d108      	bne.n	800611e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	2b00      	cmp	r3, #0
 8006112:	d032      	beq.n	800617a <I2C_Master_SB+0x100>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d02d      	beq.n	800617a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800612c:	605a      	str	r2, [r3, #4]
}
 800612e:	e024      	b.n	800617a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10e      	bne.n	8006156 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613c:	b29b      	uxth	r3, r3
 800613e:	11db      	asrs	r3, r3, #7
 8006140:	b2db      	uxtb	r3, r3
 8006142:	f003 0306 	and.w	r3, r3, #6
 8006146:	b2db      	uxtb	r3, r3
 8006148:	f063 030f 	orn	r3, r3, #15
 800614c:	b2da      	uxtb	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	611a      	str	r2, [r3, #16]
}
 8006154:	e011      	b.n	800617a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800615a:	2b01      	cmp	r3, #1
 800615c:	d10d      	bne.n	800617a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006162:	b29b      	uxth	r3, r3
 8006164:	11db      	asrs	r3, r3, #7
 8006166:	b2db      	uxtb	r3, r3
 8006168:	f003 0306 	and.w	r3, r3, #6
 800616c:	b2db      	uxtb	r3, r3
 800616e:	f063 030e 	orn	r3, r3, #14
 8006172:	b2da      	uxtb	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	611a      	str	r2, [r3, #16]
}
 800617a:	bf00      	nop
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006192:	b2da      	uxtb	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d004      	beq.n	80061ac <I2C_Master_ADD10+0x26>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d108      	bne.n	80061be <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00c      	beq.n	80061ce <I2C_Master_ADD10+0x48>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061cc:	605a      	str	r2, [r3, #4]
  }
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80061da:	b480      	push	{r7}
 80061dc:	b091      	sub	sp, #68	; 0x44
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b22      	cmp	r3, #34	; 0x22
 8006202:	f040 8169 	bne.w	80064d8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10f      	bne.n	800622e <I2C_Master_ADDR+0x54>
 800620e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006212:	2b40      	cmp	r3, #64	; 0x40
 8006214:	d10b      	bne.n	800622e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006216:	2300      	movs	r3, #0
 8006218:	633b      	str	r3, [r7, #48]	; 0x30
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	633b      	str	r3, [r7, #48]	; 0x30
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	633b      	str	r3, [r7, #48]	; 0x30
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	e160      	b.n	80064f0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006232:	2b00      	cmp	r3, #0
 8006234:	d11d      	bne.n	8006272 <I2C_Master_ADDR+0x98>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800623e:	d118      	bne.n	8006272 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006240:	2300      	movs	r3, #0
 8006242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006264:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	651a      	str	r2, [r3, #80]	; 0x50
 8006270:	e13e      	b.n	80064f0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006276:	b29b      	uxth	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d113      	bne.n	80062a4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800627c:	2300      	movs	r3, #0
 800627e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	62bb      	str	r3, [r7, #40]	; 0x28
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006290:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	e115      	b.n	80064d0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	f040 808a 	bne.w	80063c4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80062b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062b6:	d137      	bne.n	8006328 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062d6:	d113      	bne.n	8006300 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062e8:	2300      	movs	r3, #0
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	e0e7      	b.n	80064d0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006300:	2300      	movs	r3, #0
 8006302:	623b      	str	r3, [r7, #32]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	623b      	str	r3, [r7, #32]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	623b      	str	r3, [r7, #32]
 8006314:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	e0d3      	b.n	80064d0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632a:	2b08      	cmp	r3, #8
 800632c:	d02e      	beq.n	800638c <I2C_Master_ADDR+0x1b2>
 800632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006330:	2b20      	cmp	r3, #32
 8006332:	d02b      	beq.n	800638c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006336:	2b12      	cmp	r3, #18
 8006338:	d102      	bne.n	8006340 <I2C_Master_ADDR+0x166>
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	2b01      	cmp	r3, #1
 800633e:	d125      	bne.n	800638c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006342:	2b04      	cmp	r3, #4
 8006344:	d00e      	beq.n	8006364 <I2C_Master_ADDR+0x18a>
 8006346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006348:	2b02      	cmp	r3, #2
 800634a:	d00b      	beq.n	8006364 <I2C_Master_ADDR+0x18a>
 800634c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634e:	2b10      	cmp	r3, #16
 8006350:	d008      	beq.n	8006364 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	e007      	b.n	8006374 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006372:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006374:	2300      	movs	r3, #0
 8006376:	61fb      	str	r3, [r7, #28]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	61fb      	str	r3, [r7, #28]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	61fb      	str	r3, [r7, #28]
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	e0a1      	b.n	80064d0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800639a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639c:	2300      	movs	r3, #0
 800639e:	61bb      	str	r3, [r7, #24]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	61bb      	str	r3, [r7, #24]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	61bb      	str	r3, [r7, #24]
 80063b0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	e085      	b.n	80064d0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d14d      	bne.n	800646a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80063ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d016      	beq.n	8006402 <I2C_Master_ADDR+0x228>
 80063d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d013      	beq.n	8006402 <I2C_Master_ADDR+0x228>
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063dc:	2b10      	cmp	r3, #16
 80063de:	d010      	beq.n	8006402 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	e007      	b.n	8006412 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006410:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800641c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006420:	d117      	bne.n	8006452 <I2C_Master_ADDR+0x278>
 8006422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006424:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006428:	d00b      	beq.n	8006442 <I2C_Master_ADDR+0x268>
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	2b01      	cmp	r3, #1
 800642e:	d008      	beq.n	8006442 <I2C_Master_ADDR+0x268>
 8006430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006432:	2b08      	cmp	r3, #8
 8006434:	d005      	beq.n	8006442 <I2C_Master_ADDR+0x268>
 8006436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006438:	2b10      	cmp	r3, #16
 800643a:	d002      	beq.n	8006442 <I2C_Master_ADDR+0x268>
 800643c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643e:	2b20      	cmp	r3, #32
 8006440:	d107      	bne.n	8006452 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006450:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006452:	2300      	movs	r3, #0
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	e032      	b.n	80064d0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006478:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006488:	d117      	bne.n	80064ba <I2C_Master_ADDR+0x2e0>
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006490:	d00b      	beq.n	80064aa <I2C_Master_ADDR+0x2d0>
 8006492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006494:	2b01      	cmp	r3, #1
 8006496:	d008      	beq.n	80064aa <I2C_Master_ADDR+0x2d0>
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	2b08      	cmp	r3, #8
 800649c:	d005      	beq.n	80064aa <I2C_Master_ADDR+0x2d0>
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	2b10      	cmp	r3, #16
 80064a2:	d002      	beq.n	80064aa <I2C_Master_ADDR+0x2d0>
 80064a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	d107      	bne.n	80064ba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ba:	2300      	movs	r3, #0
 80064bc:	613b      	str	r3, [r7, #16]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80064d6:	e00b      	b.n	80064f0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064d8:	2300      	movs	r3, #0
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	68fb      	ldr	r3, [r7, #12]
}
 80064ee:	e7ff      	b.n	80064f0 <I2C_Master_ADDR+0x316>
 80064f0:	bf00      	nop
 80064f2:	3744      	adds	r7, #68	; 0x44
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d02b      	beq.n	800656e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	781a      	ldrb	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d114      	bne.n	800656e <I2C_SlaveTransmit_TXE+0x72>
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	2b29      	cmp	r3, #41	; 0x29
 8006548:	d111      	bne.n	800656e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006558:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2221      	movs	r2, #33	; 0x21
 800655e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2228      	movs	r2, #40	; 0x28
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff f9e7 	bl	800593c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800656e:	bf00      	nop
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006582:	b29b      	uxth	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	d011      	beq.n	80065ac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	781a      	ldrb	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d02c      	beq.n	800662c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	691a      	ldr	r2, [r3, #16]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	b2d2      	uxtb	r2, r2
 80065de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d114      	bne.n	800662c <I2C_SlaveReceive_RXNE+0x74>
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	2b2a      	cmp	r3, #42	; 0x2a
 8006606:	d111      	bne.n	800662c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006616:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2222      	movs	r2, #34	; 0x22
 800661c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2228      	movs	r2, #40	; 0x28
 8006622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff f992 	bl	8005950 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800662c:	bf00      	nop
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006640:	b29b      	uxth	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d012      	beq.n	800666c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006662:	b29b      	uxth	r3, r3
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006682:	2300      	movs	r3, #0
 8006684:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800668c:	b2db      	uxtb	r3, r3
 800668e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006692:	2b28      	cmp	r3, #40	; 0x28
 8006694:	d127      	bne.n	80066e6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	089b      	lsrs	r3, r3, #2
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80066b2:	2301      	movs	r3, #1
 80066b4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	09db      	lsrs	r3, r3, #7
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d103      	bne.n	80066ca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	81bb      	strh	r3, [r7, #12]
 80066c8:	e002      	b.n	80066d0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80066d8:	89ba      	ldrh	r2, [r7, #12]
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff f940 	bl	8005964 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80066e4:	e00e      	b.n	8006704 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066e6:	2300      	movs	r3, #0
 80066e8:	60bb      	str	r3, [r7, #8]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	60bb      	str	r3, [r7, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	60bb      	str	r3, [r7, #8]
 80066fa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006704:	bf00      	nop
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800671a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800672a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800672c:	2300      	movs	r3, #0
 800672e:	60bb      	str	r3, [r7, #8]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	60bb      	str	r3, [r7, #8]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0201 	orr.w	r2, r2, #1
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006758:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006768:	d172      	bne.n	8006850 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800676a:	7bfb      	ldrb	r3, [r7, #15]
 800676c:	2b22      	cmp	r3, #34	; 0x22
 800676e:	d002      	beq.n	8006776 <I2C_Slave_STOPF+0x6a>
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	2b2a      	cmp	r3, #42	; 0x2a
 8006774:	d135      	bne.n	80067e2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	b29a      	uxth	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d005      	beq.n	800679a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	f043 0204 	orr.w	r2, r3, #4
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe f92a 	bl	8004a08 <HAL_DMA_GetState>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d049      	beq.n	800684e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067be:	4a69      	ldr	r2, [pc, #420]	; (8006964 <I2C_Slave_STOPF+0x258>)
 80067c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fd ff72 	bl	80046b0 <HAL_DMA_Abort_IT>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d03d      	beq.n	800684e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80067dc:	4610      	mov	r0, r2
 80067de:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80067e0:	e035      	b.n	800684e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d005      	beq.n	8006806 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	f043 0204 	orr.w	r2, r3, #4
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006814:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681a:	4618      	mov	r0, r3
 800681c:	f7fe f8f4 	bl	8004a08 <HAL_DMA_GetState>
 8006820:	4603      	mov	r3, r0
 8006822:	2b01      	cmp	r3, #1
 8006824:	d014      	beq.n	8006850 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682a:	4a4e      	ldr	r2, [pc, #312]	; (8006964 <I2C_Slave_STOPF+0x258>)
 800682c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006832:	4618      	mov	r0, r3
 8006834:	f7fd ff3c 	bl	80046b0 <HAL_DMA_Abort_IT>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d008      	beq.n	8006850 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006848:	4610      	mov	r0, r2
 800684a:	4798      	blx	r3
 800684c:	e000      	b.n	8006850 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800684e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006854:	b29b      	uxth	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d03e      	beq.n	80068d8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b04      	cmp	r3, #4
 8006866:	d112      	bne.n	800688e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006884:	b29b      	uxth	r3, r3
 8006886:	3b01      	subs	r3, #1
 8006888:	b29a      	uxth	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006898:	2b40      	cmp	r3, #64	; 0x40
 800689a:	d112      	bne.n	80068c2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691a      	ldr	r2, [r3, #16]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	3b01      	subs	r3, #1
 80068bc:	b29a      	uxth	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	f043 0204 	orr.w	r2, r3, #4
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f8b3 	bl	8006a4c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80068e6:	e039      	b.n	800695c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	2b2a      	cmp	r3, #42	; 0x2a
 80068ec:	d109      	bne.n	8006902 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2228      	movs	r2, #40	; 0x28
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff f827 	bl	8005950 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b28      	cmp	r3, #40	; 0x28
 800690c:	d111      	bne.n	8006932 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a15      	ldr	r2, [pc, #84]	; (8006968 <I2C_Slave_STOPF+0x25c>)
 8006912:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7ff f828 	bl	8005980 <HAL_I2C_ListenCpltCallback>
}
 8006930:	e014      	b.n	800695c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006936:	2b22      	cmp	r3, #34	; 0x22
 8006938:	d002      	beq.n	8006940 <I2C_Slave_STOPF+0x234>
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	2b22      	cmp	r3, #34	; 0x22
 800693e:	d10d      	bne.n	800695c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2220      	movs	r2, #32
 800694a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fe fffa 	bl	8005950 <HAL_I2C_SlaveRxCpltCallback>
}
 800695c:	bf00      	nop
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	08006cb1 	.word	0x08006cb1
 8006968:	ffff0000 	.word	0xffff0000

0800696c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800697a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006980:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b08      	cmp	r3, #8
 8006986:	d002      	beq.n	800698e <I2C_Slave_AF+0x22>
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b20      	cmp	r3, #32
 800698c:	d129      	bne.n	80069e2 <I2C_Slave_AF+0x76>
 800698e:	7bfb      	ldrb	r3, [r7, #15]
 8006990:	2b28      	cmp	r3, #40	; 0x28
 8006992:	d126      	bne.n	80069e2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a2c      	ldr	r2, [pc, #176]	; (8006a48 <I2C_Slave_AF+0xdc>)
 8006998:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069a8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069b2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069c2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7fe ffd0 	bl	8005980 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80069e0:	e02e      	b.n	8006a40 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
 80069e4:	2b21      	cmp	r3, #33	; 0x21
 80069e6:	d126      	bne.n	8006a36 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a17      	ldr	r2, [pc, #92]	; (8006a48 <I2C_Slave_AF+0xdc>)
 80069ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2221      	movs	r2, #33	; 0x21
 80069f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a12:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a1c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a2c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fe ff84 	bl	800593c <HAL_I2C_SlaveTxCpltCallback>
}
 8006a34:	e004      	b.n	8006a40 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a3e:	615a      	str	r2, [r3, #20]
}
 8006a40:	bf00      	nop
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	ffff0000 	.word	0xffff0000

08006a4c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006a64:	7bbb      	ldrb	r3, [r7, #14]
 8006a66:	2b10      	cmp	r3, #16
 8006a68:	d002      	beq.n	8006a70 <I2C_ITError+0x24>
 8006a6a:	7bbb      	ldrb	r3, [r7, #14]
 8006a6c:	2b40      	cmp	r3, #64	; 0x40
 8006a6e:	d10a      	bne.n	8006a86 <I2C_ITError+0x3a>
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	2b22      	cmp	r3, #34	; 0x22
 8006a74:	d107      	bne.n	8006a86 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a84:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a8c:	2b28      	cmp	r3, #40	; 0x28
 8006a8e:	d107      	bne.n	8006aa0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2228      	movs	r2, #40	; 0x28
 8006a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a9e:	e015      	b.n	8006acc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aae:	d00a      	beq.n	8006ac6 <I2C_ITError+0x7a>
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	2b60      	cmp	r3, #96	; 0x60
 8006ab4:	d007      	beq.n	8006ac6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ada:	d162      	bne.n	8006ba2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006aea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d020      	beq.n	8006b3c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afe:	4a6a      	ldr	r2, [pc, #424]	; (8006ca8 <I2C_ITError+0x25c>)
 8006b00:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fd fdd2 	bl	80046b0 <HAL_DMA_Abort_IT>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 8089 	beq.w	8006c26 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0201 	bic.w	r2, r2, #1
 8006b22:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b36:	4610      	mov	r0, r2
 8006b38:	4798      	blx	r3
 8006b3a:	e074      	b.n	8006c26 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	4a59      	ldr	r2, [pc, #356]	; (8006ca8 <I2C_ITError+0x25c>)
 8006b42:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fd fdb1 	bl	80046b0 <HAL_DMA_Abort_IT>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d068      	beq.n	8006c26 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5e:	2b40      	cmp	r3, #64	; 0x40
 8006b60:	d10b      	bne.n	8006b7a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	691a      	ldr	r2, [r3, #16]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0201 	bic.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	4798      	blx	r3
 8006ba0:	e041      	b.n	8006c26 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b60      	cmp	r3, #96	; 0x60
 8006bac:	d125      	bne.n	8006bfa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc6:	2b40      	cmp	r3, #64	; 0x40
 8006bc8:	d10b      	bne.n	8006be2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	691a      	ldr	r2, [r3, #16]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	b2d2      	uxtb	r2, r2
 8006bd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	1c5a      	adds	r2, r3, #1
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0201 	bic.w	r2, r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7fe feec 	bl	80059d0 <HAL_I2C_AbortCpltCallback>
 8006bf8:	e015      	b.n	8006c26 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c04:	2b40      	cmp	r3, #64	; 0x40
 8006c06:	d10b      	bne.n	8006c20 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	691a      	ldr	r2, [r3, #16]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7fe fecb 	bl	80059bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10e      	bne.n	8006c54 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d109      	bne.n	8006c54 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d104      	bne.n	8006c54 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d007      	beq.n	8006c64 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c62:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c6a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	d113      	bne.n	8006ca0 <I2C_ITError+0x254>
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	2b28      	cmp	r3, #40	; 0x28
 8006c7c:	d110      	bne.n	8006ca0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <I2C_ITError+0x260>)
 8006c82:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7fe fe70 	bl	8005980 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ca0:	bf00      	nop
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	08006cb1 	.word	0x08006cb1
 8006cac:	ffff0000 	.word	0xffff0000

08006cb0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006cca:	4b4b      	ldr	r3, [pc, #300]	; (8006df8 <I2C_DMAAbort+0x148>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	08db      	lsrs	r3, r3, #3
 8006cd0:	4a4a      	ldr	r2, [pc, #296]	; (8006dfc <I2C_DMAAbort+0x14c>)
 8006cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd6:	0a1a      	lsrs	r2, r3, #8
 8006cd8:	4613      	mov	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	00da      	lsls	r2, r3, #3
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cee:	f043 0220 	orr.w	r2, r3, #32
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006cf6:	e00a      	b.n	8006d0e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d0c:	d0ea      	beq.n	8006ce4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d3c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2200      	movs	r2, #0
 8006d42:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d50:	2200      	movs	r2, #0
 8006d52:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d60:	2200      	movs	r2, #0
 8006d62:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 0201 	bic.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b60      	cmp	r3, #96	; 0x60
 8006d7e:	d10e      	bne.n	8006d9e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	2220      	movs	r2, #32
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2200      	movs	r2, #0
 8006d94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d96:	6978      	ldr	r0, [r7, #20]
 8006d98:	f7fe fe1a 	bl	80059d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d9c:	e027      	b.n	8006dee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d9e:	7cfb      	ldrb	r3, [r7, #19]
 8006da0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006da4:	2b28      	cmp	r3, #40	; 0x28
 8006da6:	d117      	bne.n	8006dd8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f042 0201 	orr.w	r2, r2, #1
 8006db6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006dc6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2228      	movs	r2, #40	; 0x28
 8006dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006dd6:	e007      	b.n	8006de8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006de8:	6978      	ldr	r0, [r7, #20]
 8006dea:	f7fe fde7 	bl	80059bc <HAL_I2C_ErrorCallback>
}
 8006dee:	bf00      	nop
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	2000042c 	.word	0x2000042c
 8006dfc:	14f8b589 	.word	0x14f8b589

08006e00 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e0c:	4b13      	ldr	r3, [pc, #76]	; (8006e5c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	08db      	lsrs	r3, r3, #3
 8006e12:	4a13      	ldr	r2, [pc, #76]	; (8006e60 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006e14:	fba2 2303 	umull	r2, r3, r2, r3
 8006e18:	0a1a      	lsrs	r2, r3, #8
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d107      	bne.n	8006e3e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e32:	f043 0220 	orr.w	r2, r3, #32
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e008      	b.n	8006e50 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e4c:	d0e9      	beq.n	8006e22 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	2000042c 	.word	0x2000042c
 8006e60:	14f8b589 	.word	0x14f8b589

08006e64 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006e74:	d103      	bne.n	8006e7e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e7c:	e007      	b.n	8006e8e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e82:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006e86:	d102      	bne.n	8006e8e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2208      	movs	r2, #8
 8006e8c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
	...

08006e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e267      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d075      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006eba:	4b88      	ldr	r3, [pc, #544]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f003 030c 	and.w	r3, r3, #12
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d00c      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ec6:	4b85      	ldr	r3, [pc, #532]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ece:	2b08      	cmp	r3, #8
 8006ed0:	d112      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ed2:	4b82      	ldr	r3, [pc, #520]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ede:	d10b      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee0:	4b7e      	ldr	r3, [pc, #504]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d05b      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x108>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d157      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e242      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f00:	d106      	bne.n	8006f10 <HAL_RCC_OscConfig+0x74>
 8006f02:	4b76      	ldr	r3, [pc, #472]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a75      	ldr	r2, [pc, #468]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	e01d      	b.n	8006f4c <HAL_RCC_OscConfig+0xb0>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f18:	d10c      	bne.n	8006f34 <HAL_RCC_OscConfig+0x98>
 8006f1a:	4b70      	ldr	r3, [pc, #448]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a6f      	ldr	r2, [pc, #444]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	4b6d      	ldr	r3, [pc, #436]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a6c      	ldr	r2, [pc, #432]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	e00b      	b.n	8006f4c <HAL_RCC_OscConfig+0xb0>
 8006f34:	4b69      	ldr	r3, [pc, #420]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a68      	ldr	r2, [pc, #416]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	4b66      	ldr	r3, [pc, #408]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a65      	ldr	r2, [pc, #404]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d013      	beq.n	8006f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f54:	f7fd f8f4 	bl	8004140 <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f5c:	f7fd f8f0 	bl	8004140 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b64      	cmp	r3, #100	; 0x64
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e207      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f6e:	4b5b      	ldr	r3, [pc, #364]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0f0      	beq.n	8006f5c <HAL_RCC_OscConfig+0xc0>
 8006f7a:	e014      	b.n	8006fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f7c:	f7fd f8e0 	bl	8004140 <HAL_GetTick>
 8006f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f82:	e008      	b.n	8006f96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f84:	f7fd f8dc 	bl	8004140 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b64      	cmp	r3, #100	; 0x64
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e1f3      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f96:	4b51      	ldr	r3, [pc, #324]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1f0      	bne.n	8006f84 <HAL_RCC_OscConfig+0xe8>
 8006fa2:	e000      	b.n	8006fa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d063      	beq.n	800707a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006fb2:	4b4a      	ldr	r3, [pc, #296]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f003 030c 	and.w	r3, r3, #12
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fbe:	4b47      	ldr	r3, [pc, #284]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006fc6:	2b08      	cmp	r3, #8
 8006fc8:	d11c      	bne.n	8007004 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fca:	4b44      	ldr	r3, [pc, #272]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d116      	bne.n	8007004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fd6:	4b41      	ldr	r3, [pc, #260]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d005      	beq.n	8006fee <HAL_RCC_OscConfig+0x152>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d001      	beq.n	8006fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e1c7      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fee:	4b3b      	ldr	r3, [pc, #236]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	4937      	ldr	r1, [pc, #220]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007002:	e03a      	b.n	800707a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d020      	beq.n	800704e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800700c:	4b34      	ldr	r3, [pc, #208]	; (80070e0 <HAL_RCC_OscConfig+0x244>)
 800700e:	2201      	movs	r2, #1
 8007010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007012:	f7fd f895 	bl	8004140 <HAL_GetTick>
 8007016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007018:	e008      	b.n	800702c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800701a:	f7fd f891 	bl	8004140 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d901      	bls.n	800702c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e1a8      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800702c:	4b2b      	ldr	r3, [pc, #172]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0f0      	beq.n	800701a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007038:	4b28      	ldr	r3, [pc, #160]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	4925      	ldr	r1, [pc, #148]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8007048:	4313      	orrs	r3, r2
 800704a:	600b      	str	r3, [r1, #0]
 800704c:	e015      	b.n	800707a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800704e:	4b24      	ldr	r3, [pc, #144]	; (80070e0 <HAL_RCC_OscConfig+0x244>)
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007054:	f7fd f874 	bl	8004140 <HAL_GetTick>
 8007058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800705c:	f7fd f870 	bl	8004140 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b02      	cmp	r3, #2
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e187      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800706e:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1f0      	bne.n	800705c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0308 	and.w	r3, r3, #8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d036      	beq.n	80070f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d016      	beq.n	80070bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800708e:	4b15      	ldr	r3, [pc, #84]	; (80070e4 <HAL_RCC_OscConfig+0x248>)
 8007090:	2201      	movs	r2, #1
 8007092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007094:	f7fd f854 	bl	8004140 <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800709c:	f7fd f850 	bl	8004140 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e167      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070ae:	4b0b      	ldr	r3, [pc, #44]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 80070b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0f0      	beq.n	800709c <HAL_RCC_OscConfig+0x200>
 80070ba:	e01b      	b.n	80070f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070bc:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <HAL_RCC_OscConfig+0x248>)
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070c2:	f7fd f83d 	bl	8004140 <HAL_GetTick>
 80070c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070c8:	e00e      	b.n	80070e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070ca:	f7fd f839 	bl	8004140 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d907      	bls.n	80070e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e150      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
 80070dc:	40023800 	.word	0x40023800
 80070e0:	42470000 	.word	0x42470000
 80070e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070e8:	4b88      	ldr	r3, [pc, #544]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80070ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1ea      	bne.n	80070ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8097 	beq.w	8007230 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007106:	4b81      	ldr	r3, [pc, #516]	; (800730c <HAL_RCC_OscConfig+0x470>)
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10f      	bne.n	8007132 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007112:	2300      	movs	r3, #0
 8007114:	60bb      	str	r3, [r7, #8]
 8007116:	4b7d      	ldr	r3, [pc, #500]	; (800730c <HAL_RCC_OscConfig+0x470>)
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	4a7c      	ldr	r2, [pc, #496]	; (800730c <HAL_RCC_OscConfig+0x470>)
 800711c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007120:	6413      	str	r3, [r2, #64]	; 0x40
 8007122:	4b7a      	ldr	r3, [pc, #488]	; (800730c <HAL_RCC_OscConfig+0x470>)
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800712a:	60bb      	str	r3, [r7, #8]
 800712c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800712e:	2301      	movs	r3, #1
 8007130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007132:	4b77      	ldr	r3, [pc, #476]	; (8007310 <HAL_RCC_OscConfig+0x474>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713a:	2b00      	cmp	r3, #0
 800713c:	d118      	bne.n	8007170 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800713e:	4b74      	ldr	r3, [pc, #464]	; (8007310 <HAL_RCC_OscConfig+0x474>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a73      	ldr	r2, [pc, #460]	; (8007310 <HAL_RCC_OscConfig+0x474>)
 8007144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800714a:	f7fc fff9 	bl	8004140 <HAL_GetTick>
 800714e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007150:	e008      	b.n	8007164 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007152:	f7fc fff5 	bl	8004140 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d901      	bls.n	8007164 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e10c      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007164:	4b6a      	ldr	r3, [pc, #424]	; (8007310 <HAL_RCC_OscConfig+0x474>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0f0      	beq.n	8007152 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d106      	bne.n	8007186 <HAL_RCC_OscConfig+0x2ea>
 8007178:	4b64      	ldr	r3, [pc, #400]	; (800730c <HAL_RCC_OscConfig+0x470>)
 800717a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717c:	4a63      	ldr	r2, [pc, #396]	; (800730c <HAL_RCC_OscConfig+0x470>)
 800717e:	f043 0301 	orr.w	r3, r3, #1
 8007182:	6713      	str	r3, [r2, #112]	; 0x70
 8007184:	e01c      	b.n	80071c0 <HAL_RCC_OscConfig+0x324>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	2b05      	cmp	r3, #5
 800718c:	d10c      	bne.n	80071a8 <HAL_RCC_OscConfig+0x30c>
 800718e:	4b5f      	ldr	r3, [pc, #380]	; (800730c <HAL_RCC_OscConfig+0x470>)
 8007190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007192:	4a5e      	ldr	r2, [pc, #376]	; (800730c <HAL_RCC_OscConfig+0x470>)
 8007194:	f043 0304 	orr.w	r3, r3, #4
 8007198:	6713      	str	r3, [r2, #112]	; 0x70
 800719a:	4b5c      	ldr	r3, [pc, #368]	; (800730c <HAL_RCC_OscConfig+0x470>)
 800719c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719e:	4a5b      	ldr	r2, [pc, #364]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80071a0:	f043 0301 	orr.w	r3, r3, #1
 80071a4:	6713      	str	r3, [r2, #112]	; 0x70
 80071a6:	e00b      	b.n	80071c0 <HAL_RCC_OscConfig+0x324>
 80071a8:	4b58      	ldr	r3, [pc, #352]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80071aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ac:	4a57      	ldr	r2, [pc, #348]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80071ae:	f023 0301 	bic.w	r3, r3, #1
 80071b2:	6713      	str	r3, [r2, #112]	; 0x70
 80071b4:	4b55      	ldr	r3, [pc, #340]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80071b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b8:	4a54      	ldr	r2, [pc, #336]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80071ba:	f023 0304 	bic.w	r3, r3, #4
 80071be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d015      	beq.n	80071f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c8:	f7fc ffba 	bl	8004140 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ce:	e00a      	b.n	80071e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071d0:	f7fc ffb6 	bl	8004140 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	f241 3288 	movw	r2, #5000	; 0x1388
 80071de:	4293      	cmp	r3, r2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e0cb      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071e6:	4b49      	ldr	r3, [pc, #292]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80071e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0ee      	beq.n	80071d0 <HAL_RCC_OscConfig+0x334>
 80071f2:	e014      	b.n	800721e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071f4:	f7fc ffa4 	bl	8004140 <HAL_GetTick>
 80071f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071fa:	e00a      	b.n	8007212 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071fc:	f7fc ffa0 	bl	8004140 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	f241 3288 	movw	r2, #5000	; 0x1388
 800720a:	4293      	cmp	r3, r2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e0b5      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007212:	4b3e      	ldr	r3, [pc, #248]	; (800730c <HAL_RCC_OscConfig+0x470>)
 8007214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1ee      	bne.n	80071fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800721e:	7dfb      	ldrb	r3, [r7, #23]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d105      	bne.n	8007230 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007224:	4b39      	ldr	r3, [pc, #228]	; (800730c <HAL_RCC_OscConfig+0x470>)
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	4a38      	ldr	r2, [pc, #224]	; (800730c <HAL_RCC_OscConfig+0x470>)
 800722a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800722e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 80a1 	beq.w	800737c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800723a:	4b34      	ldr	r3, [pc, #208]	; (800730c <HAL_RCC_OscConfig+0x470>)
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f003 030c 	and.w	r3, r3, #12
 8007242:	2b08      	cmp	r3, #8
 8007244:	d05c      	beq.n	8007300 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	2b02      	cmp	r3, #2
 800724c:	d141      	bne.n	80072d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800724e:	4b31      	ldr	r3, [pc, #196]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007254:	f7fc ff74 	bl	8004140 <HAL_GetTick>
 8007258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800725a:	e008      	b.n	800726e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800725c:	f7fc ff70 	bl	8004140 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e087      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800726e:	4b27      	ldr	r3, [pc, #156]	; (800730c <HAL_RCC_OscConfig+0x470>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f0      	bne.n	800725c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69da      	ldr	r2, [r3, #28]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	431a      	orrs	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	019b      	lsls	r3, r3, #6
 800728a:	431a      	orrs	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007290:	085b      	lsrs	r3, r3, #1
 8007292:	3b01      	subs	r3, #1
 8007294:	041b      	lsls	r3, r3, #16
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	061b      	lsls	r3, r3, #24
 800729e:	491b      	ldr	r1, [pc, #108]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072a4:	4b1b      	ldr	r3, [pc, #108]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 80072a6:	2201      	movs	r2, #1
 80072a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072aa:	f7fc ff49 	bl	8004140 <HAL_GetTick>
 80072ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072b0:	e008      	b.n	80072c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072b2:	f7fc ff45 	bl	8004140 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e05c      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072c4:	4b11      	ldr	r3, [pc, #68]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0f0      	beq.n	80072b2 <HAL_RCC_OscConfig+0x416>
 80072d0:	e054      	b.n	800737c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072d2:	4b10      	ldr	r3, [pc, #64]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072d8:	f7fc ff32 	bl	8004140 <HAL_GetTick>
 80072dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072de:	e008      	b.n	80072f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072e0:	f7fc ff2e 	bl	8004140 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e045      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072f2:	4b06      	ldr	r3, [pc, #24]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1f0      	bne.n	80072e0 <HAL_RCC_OscConfig+0x444>
 80072fe:	e03d      	b.n	800737c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d107      	bne.n	8007318 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e038      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
 800730c:	40023800 	.word	0x40023800
 8007310:	40007000 	.word	0x40007000
 8007314:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007318:	4b1b      	ldr	r3, [pc, #108]	; (8007388 <HAL_RCC_OscConfig+0x4ec>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d028      	beq.n	8007378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007330:	429a      	cmp	r2, r3
 8007332:	d121      	bne.n	8007378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800733e:	429a      	cmp	r2, r3
 8007340:	d11a      	bne.n	8007378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007348:	4013      	ands	r3, r2
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800734e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007350:	4293      	cmp	r3, r2
 8007352:	d111      	bne.n	8007378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735e:	085b      	lsrs	r3, r3, #1
 8007360:	3b01      	subs	r3, #1
 8007362:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007364:	429a      	cmp	r2, r3
 8007366:	d107      	bne.n	8007378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007372:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007374:	429a      	cmp	r2, r3
 8007376:	d001      	beq.n	800737c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e000      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	40023800 	.word	0x40023800

0800738c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e0cc      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073a0:	4b68      	ldr	r3, [pc, #416]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0307 	and.w	r3, r3, #7
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d90c      	bls.n	80073c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ae:	4b65      	ldr	r3, [pc, #404]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	b2d2      	uxtb	r2, r2
 80073b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073b6:	4b63      	ldr	r3, [pc, #396]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0307 	and.w	r3, r3, #7
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d001      	beq.n	80073c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e0b8      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d020      	beq.n	8007416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d005      	beq.n	80073ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073e0:	4b59      	ldr	r3, [pc, #356]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	4a58      	ldr	r2, [pc, #352]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80073e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80073ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0308 	and.w	r3, r3, #8
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d005      	beq.n	8007404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073f8:	4b53      	ldr	r3, [pc, #332]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	4a52      	ldr	r2, [pc, #328]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80073fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007404:	4b50      	ldr	r3, [pc, #320]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	494d      	ldr	r1, [pc, #308]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 8007412:	4313      	orrs	r3, r2
 8007414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d044      	beq.n	80074ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d107      	bne.n	800743a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800742a:	4b47      	ldr	r3, [pc, #284]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d119      	bne.n	800746a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e07f      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d003      	beq.n	800744a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007446:	2b03      	cmp	r3, #3
 8007448:	d107      	bne.n	800745a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800744a:	4b3f      	ldr	r3, [pc, #252]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d109      	bne.n	800746a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e06f      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800745a:	4b3b      	ldr	r3, [pc, #236]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e067      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800746a:	4b37      	ldr	r3, [pc, #220]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f023 0203 	bic.w	r2, r3, #3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	4934      	ldr	r1, [pc, #208]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 8007478:	4313      	orrs	r3, r2
 800747a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800747c:	f7fc fe60 	bl	8004140 <HAL_GetTick>
 8007480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007482:	e00a      	b.n	800749a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007484:	f7fc fe5c 	bl	8004140 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007492:	4293      	cmp	r3, r2
 8007494:	d901      	bls.n	800749a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e04f      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800749a:	4b2b      	ldr	r3, [pc, #172]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f003 020c 	and.w	r2, r3, #12
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d1eb      	bne.n	8007484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074ac:	4b25      	ldr	r3, [pc, #148]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0307 	and.w	r3, r3, #7
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d20c      	bcs.n	80074d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ba:	4b22      	ldr	r3, [pc, #136]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	b2d2      	uxtb	r2, r2
 80074c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074c2:	4b20      	ldr	r3, [pc, #128]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d001      	beq.n	80074d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e032      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d008      	beq.n	80074f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074e0:	4b19      	ldr	r3, [pc, #100]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	4916      	ldr	r1, [pc, #88]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d009      	beq.n	8007512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074fe:	4b12      	ldr	r3, [pc, #72]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	490e      	ldr	r1, [pc, #56]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800750e:	4313      	orrs	r3, r2
 8007510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007512:	f000 f821 	bl	8007558 <HAL_RCC_GetSysClockFreq>
 8007516:	4602      	mov	r2, r0
 8007518:	4b0b      	ldr	r3, [pc, #44]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	091b      	lsrs	r3, r3, #4
 800751e:	f003 030f 	and.w	r3, r3, #15
 8007522:	490a      	ldr	r1, [pc, #40]	; (800754c <HAL_RCC_ClockConfig+0x1c0>)
 8007524:	5ccb      	ldrb	r3, [r1, r3]
 8007526:	fa22 f303 	lsr.w	r3, r2, r3
 800752a:	4a09      	ldr	r2, [pc, #36]	; (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 800752c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800752e:	4b09      	ldr	r3, [pc, #36]	; (8007554 <HAL_RCC_ClockConfig+0x1c8>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4618      	mov	r0, r3
 8007534:	f7fc fdc0 	bl	80040b8 <HAL_InitTick>

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	40023c00 	.word	0x40023c00
 8007548:	40023800 	.word	0x40023800
 800754c:	0800a51c 	.word	0x0800a51c
 8007550:	2000042c 	.word	0x2000042c
 8007554:	20000430 	.word	0x20000430

08007558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800755c:	b094      	sub	sp, #80	; 0x50
 800755e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	647b      	str	r3, [r7, #68]	; 0x44
 8007564:	2300      	movs	r3, #0
 8007566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007568:	2300      	movs	r3, #0
 800756a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007570:	4b79      	ldr	r3, [pc, #484]	; (8007758 <HAL_RCC_GetSysClockFreq+0x200>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f003 030c 	and.w	r3, r3, #12
 8007578:	2b08      	cmp	r3, #8
 800757a:	d00d      	beq.n	8007598 <HAL_RCC_GetSysClockFreq+0x40>
 800757c:	2b08      	cmp	r3, #8
 800757e:	f200 80e1 	bhi.w	8007744 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <HAL_RCC_GetSysClockFreq+0x34>
 8007586:	2b04      	cmp	r3, #4
 8007588:	d003      	beq.n	8007592 <HAL_RCC_GetSysClockFreq+0x3a>
 800758a:	e0db      	b.n	8007744 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800758c:	4b73      	ldr	r3, [pc, #460]	; (800775c <HAL_RCC_GetSysClockFreq+0x204>)
 800758e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007590:	e0db      	b.n	800774a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007592:	4b73      	ldr	r3, [pc, #460]	; (8007760 <HAL_RCC_GetSysClockFreq+0x208>)
 8007594:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007596:	e0d8      	b.n	800774a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007598:	4b6f      	ldr	r3, [pc, #444]	; (8007758 <HAL_RCC_GetSysClockFreq+0x200>)
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80075a2:	4b6d      	ldr	r3, [pc, #436]	; (8007758 <HAL_RCC_GetSysClockFreq+0x200>)
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d063      	beq.n	8007676 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075ae:	4b6a      	ldr	r3, [pc, #424]	; (8007758 <HAL_RCC_GetSysClockFreq+0x200>)
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	099b      	lsrs	r3, r3, #6
 80075b4:	2200      	movs	r2, #0
 80075b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80075b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c0:	633b      	str	r3, [r7, #48]	; 0x30
 80075c2:	2300      	movs	r3, #0
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34
 80075c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80075ca:	4622      	mov	r2, r4
 80075cc:	462b      	mov	r3, r5
 80075ce:	f04f 0000 	mov.w	r0, #0
 80075d2:	f04f 0100 	mov.w	r1, #0
 80075d6:	0159      	lsls	r1, r3, #5
 80075d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075dc:	0150      	lsls	r0, r2, #5
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4621      	mov	r1, r4
 80075e4:	1a51      	subs	r1, r2, r1
 80075e6:	6139      	str	r1, [r7, #16]
 80075e8:	4629      	mov	r1, r5
 80075ea:	eb63 0301 	sbc.w	r3, r3, r1
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075fc:	4659      	mov	r1, fp
 80075fe:	018b      	lsls	r3, r1, #6
 8007600:	4651      	mov	r1, sl
 8007602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007606:	4651      	mov	r1, sl
 8007608:	018a      	lsls	r2, r1, #6
 800760a:	4651      	mov	r1, sl
 800760c:	ebb2 0801 	subs.w	r8, r2, r1
 8007610:	4659      	mov	r1, fp
 8007612:	eb63 0901 	sbc.w	r9, r3, r1
 8007616:	f04f 0200 	mov.w	r2, #0
 800761a:	f04f 0300 	mov.w	r3, #0
 800761e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800762a:	4690      	mov	r8, r2
 800762c:	4699      	mov	r9, r3
 800762e:	4623      	mov	r3, r4
 8007630:	eb18 0303 	adds.w	r3, r8, r3
 8007634:	60bb      	str	r3, [r7, #8]
 8007636:	462b      	mov	r3, r5
 8007638:	eb49 0303 	adc.w	r3, r9, r3
 800763c:	60fb      	str	r3, [r7, #12]
 800763e:	f04f 0200 	mov.w	r2, #0
 8007642:	f04f 0300 	mov.w	r3, #0
 8007646:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800764a:	4629      	mov	r1, r5
 800764c:	024b      	lsls	r3, r1, #9
 800764e:	4621      	mov	r1, r4
 8007650:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007654:	4621      	mov	r1, r4
 8007656:	024a      	lsls	r2, r1, #9
 8007658:	4610      	mov	r0, r2
 800765a:	4619      	mov	r1, r3
 800765c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800765e:	2200      	movs	r2, #0
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
 8007662:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007664:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007668:	f7f9 f9f4 	bl	8000a54 <__aeabi_uldivmod>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	4613      	mov	r3, r2
 8007672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007674:	e058      	b.n	8007728 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007676:	4b38      	ldr	r3, [pc, #224]	; (8007758 <HAL_RCC_GetSysClockFreq+0x200>)
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	099b      	lsrs	r3, r3, #6
 800767c:	2200      	movs	r2, #0
 800767e:	4618      	mov	r0, r3
 8007680:	4611      	mov	r1, r2
 8007682:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007686:	623b      	str	r3, [r7, #32]
 8007688:	2300      	movs	r3, #0
 800768a:	627b      	str	r3, [r7, #36]	; 0x24
 800768c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007690:	4642      	mov	r2, r8
 8007692:	464b      	mov	r3, r9
 8007694:	f04f 0000 	mov.w	r0, #0
 8007698:	f04f 0100 	mov.w	r1, #0
 800769c:	0159      	lsls	r1, r3, #5
 800769e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076a2:	0150      	lsls	r0, r2, #5
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	4641      	mov	r1, r8
 80076aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80076ae:	4649      	mov	r1, r9
 80076b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	f04f 0300 	mov.w	r3, #0
 80076bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80076c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80076c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80076c8:	ebb2 040a 	subs.w	r4, r2, sl
 80076cc:	eb63 050b 	sbc.w	r5, r3, fp
 80076d0:	f04f 0200 	mov.w	r2, #0
 80076d4:	f04f 0300 	mov.w	r3, #0
 80076d8:	00eb      	lsls	r3, r5, #3
 80076da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076de:	00e2      	lsls	r2, r4, #3
 80076e0:	4614      	mov	r4, r2
 80076e2:	461d      	mov	r5, r3
 80076e4:	4643      	mov	r3, r8
 80076e6:	18e3      	adds	r3, r4, r3
 80076e8:	603b      	str	r3, [r7, #0]
 80076ea:	464b      	mov	r3, r9
 80076ec:	eb45 0303 	adc.w	r3, r5, r3
 80076f0:	607b      	str	r3, [r7, #4]
 80076f2:	f04f 0200 	mov.w	r2, #0
 80076f6:	f04f 0300 	mov.w	r3, #0
 80076fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80076fe:	4629      	mov	r1, r5
 8007700:	028b      	lsls	r3, r1, #10
 8007702:	4621      	mov	r1, r4
 8007704:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007708:	4621      	mov	r1, r4
 800770a:	028a      	lsls	r2, r1, #10
 800770c:	4610      	mov	r0, r2
 800770e:	4619      	mov	r1, r3
 8007710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007712:	2200      	movs	r2, #0
 8007714:	61bb      	str	r3, [r7, #24]
 8007716:	61fa      	str	r2, [r7, #28]
 8007718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800771c:	f7f9 f99a 	bl	8000a54 <__aeabi_uldivmod>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4613      	mov	r3, r2
 8007726:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007728:	4b0b      	ldr	r3, [pc, #44]	; (8007758 <HAL_RCC_GetSysClockFreq+0x200>)
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	0c1b      	lsrs	r3, r3, #16
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	3301      	adds	r3, #1
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007738:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800773a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800773c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007740:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007742:	e002      	b.n	800774a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007744:	4b05      	ldr	r3, [pc, #20]	; (800775c <HAL_RCC_GetSysClockFreq+0x204>)
 8007746:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800774a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800774c:	4618      	mov	r0, r3
 800774e:	3750      	adds	r7, #80	; 0x50
 8007750:	46bd      	mov	sp, r7
 8007752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007756:	bf00      	nop
 8007758:	40023800 	.word	0x40023800
 800775c:	00f42400 	.word	0x00f42400
 8007760:	007a1200 	.word	0x007a1200

08007764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007764:	b480      	push	{r7}
 8007766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007768:	4b03      	ldr	r3, [pc, #12]	; (8007778 <HAL_RCC_GetHCLKFreq+0x14>)
 800776a:	681b      	ldr	r3, [r3, #0]
}
 800776c:	4618      	mov	r0, r3
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	2000042c 	.word	0x2000042c

0800777c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007780:	f7ff fff0 	bl	8007764 <HAL_RCC_GetHCLKFreq>
 8007784:	4602      	mov	r2, r0
 8007786:	4b05      	ldr	r3, [pc, #20]	; (800779c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	0a9b      	lsrs	r3, r3, #10
 800778c:	f003 0307 	and.w	r3, r3, #7
 8007790:	4903      	ldr	r1, [pc, #12]	; (80077a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007792:	5ccb      	ldrb	r3, [r1, r3]
 8007794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007798:	4618      	mov	r0, r3
 800779a:	bd80      	pop	{r7, pc}
 800779c:	40023800 	.word	0x40023800
 80077a0:	0800a52c 	.word	0x0800a52c

080077a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80077a8:	f7ff ffdc 	bl	8007764 <HAL_RCC_GetHCLKFreq>
 80077ac:	4602      	mov	r2, r0
 80077ae:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	0b5b      	lsrs	r3, r3, #13
 80077b4:	f003 0307 	and.w	r3, r3, #7
 80077b8:	4903      	ldr	r1, [pc, #12]	; (80077c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077ba:	5ccb      	ldrb	r3, [r1, r3]
 80077bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	40023800 	.word	0x40023800
 80077c8:	0800a52c 	.word	0x0800a52c

080077cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e041      	b.n	8007862 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d106      	bne.n	80077f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7fc fa46 	bl	8003c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3304      	adds	r3, #4
 8007808:	4619      	mov	r1, r3
 800780a:	4610      	mov	r0, r2
 800780c:	f000 fdac 	bl	8008368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
	...

0800786c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b01      	cmp	r3, #1
 800787e:	d001      	beq.n	8007884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e044      	b.n	800790e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 0201 	orr.w	r2, r2, #1
 800789a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a1e      	ldr	r2, [pc, #120]	; (800791c <HAL_TIM_Base_Start_IT+0xb0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d018      	beq.n	80078d8 <HAL_TIM_Base_Start_IT+0x6c>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ae:	d013      	beq.n	80078d8 <HAL_TIM_Base_Start_IT+0x6c>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a1a      	ldr	r2, [pc, #104]	; (8007920 <HAL_TIM_Base_Start_IT+0xb4>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d00e      	beq.n	80078d8 <HAL_TIM_Base_Start_IT+0x6c>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a19      	ldr	r2, [pc, #100]	; (8007924 <HAL_TIM_Base_Start_IT+0xb8>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d009      	beq.n	80078d8 <HAL_TIM_Base_Start_IT+0x6c>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a17      	ldr	r2, [pc, #92]	; (8007928 <HAL_TIM_Base_Start_IT+0xbc>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d004      	beq.n	80078d8 <HAL_TIM_Base_Start_IT+0x6c>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a16      	ldr	r2, [pc, #88]	; (800792c <HAL_TIM_Base_Start_IT+0xc0>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d111      	bne.n	80078fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b06      	cmp	r3, #6
 80078e8:	d010      	beq.n	800790c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f042 0201 	orr.w	r2, r2, #1
 80078f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078fa:	e007      	b.n	800790c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0201 	orr.w	r2, r2, #1
 800790a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40010000 	.word	0x40010000
 8007920:	40000400 	.word	0x40000400
 8007924:	40000800 	.word	0x40000800
 8007928:	40000c00 	.word	0x40000c00
 800792c:	40014000 	.word	0x40014000

08007930 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 0201 	bic.w	r2, r2, #1
 8007946:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6a1a      	ldr	r2, [r3, #32]
 800794e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007952:	4013      	ands	r3, r2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10f      	bne.n	8007978 <HAL_TIM_Base_Stop_IT+0x48>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6a1a      	ldr	r2, [r3, #32]
 800795e:	f240 4344 	movw	r3, #1092	; 0x444
 8007962:	4013      	ands	r3, r2
 8007964:	2b00      	cmp	r3, #0
 8007966:	d107      	bne.n	8007978 <HAL_TIM_Base_Stop_IT+0x48>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0201 	bic.w	r2, r2, #1
 8007976:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e041      	b.n	8007a24 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d106      	bne.n	80079ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7fc f8f7 	bl	8003ba8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2202      	movs	r2, #2
 80079be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	3304      	adds	r3, #4
 80079ca:	4619      	mov	r1, r3
 80079cc:	4610      	mov	r0, r2
 80079ce:	f000 fccb 	bl	8008368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d109      	bne.n	8007a50 <HAL_TIM_PWM_Start+0x24>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	bf14      	ite	ne
 8007a48:	2301      	movne	r3, #1
 8007a4a:	2300      	moveq	r3, #0
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	e022      	b.n	8007a96 <HAL_TIM_PWM_Start+0x6a>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	d109      	bne.n	8007a6a <HAL_TIM_PWM_Start+0x3e>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	bf14      	ite	ne
 8007a62:	2301      	movne	r3, #1
 8007a64:	2300      	moveq	r3, #0
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	e015      	b.n	8007a96 <HAL_TIM_PWM_Start+0x6a>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d109      	bne.n	8007a84 <HAL_TIM_PWM_Start+0x58>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	bf14      	ite	ne
 8007a7c:	2301      	movne	r3, #1
 8007a7e:	2300      	moveq	r3, #0
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	e008      	b.n	8007a96 <HAL_TIM_PWM_Start+0x6a>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	bf14      	ite	ne
 8007a90:	2301      	movne	r3, #1
 8007a92:	2300      	moveq	r3, #0
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e068      	b.n	8007b70 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d104      	bne.n	8007aae <HAL_TIM_PWM_Start+0x82>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007aac:	e013      	b.n	8007ad6 <HAL_TIM_PWM_Start+0xaa>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d104      	bne.n	8007abe <HAL_TIM_PWM_Start+0x92>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007abc:	e00b      	b.n	8007ad6 <HAL_TIM_PWM_Start+0xaa>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b08      	cmp	r3, #8
 8007ac2:	d104      	bne.n	8007ace <HAL_TIM_PWM_Start+0xa2>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007acc:	e003      	b.n	8007ad6 <HAL_TIM_PWM_Start+0xaa>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2201      	movs	r2, #1
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 fee8 	bl	80088b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a23      	ldr	r2, [pc, #140]	; (8007b78 <HAL_TIM_PWM_Start+0x14c>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d107      	bne.n	8007afe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007afc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a1d      	ldr	r2, [pc, #116]	; (8007b78 <HAL_TIM_PWM_Start+0x14c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d018      	beq.n	8007b3a <HAL_TIM_PWM_Start+0x10e>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b10:	d013      	beq.n	8007b3a <HAL_TIM_PWM_Start+0x10e>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a19      	ldr	r2, [pc, #100]	; (8007b7c <HAL_TIM_PWM_Start+0x150>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d00e      	beq.n	8007b3a <HAL_TIM_PWM_Start+0x10e>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a17      	ldr	r2, [pc, #92]	; (8007b80 <HAL_TIM_PWM_Start+0x154>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d009      	beq.n	8007b3a <HAL_TIM_PWM_Start+0x10e>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a16      	ldr	r2, [pc, #88]	; (8007b84 <HAL_TIM_PWM_Start+0x158>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d004      	beq.n	8007b3a <HAL_TIM_PWM_Start+0x10e>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a14      	ldr	r2, [pc, #80]	; (8007b88 <HAL_TIM_PWM_Start+0x15c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d111      	bne.n	8007b5e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f003 0307 	and.w	r3, r3, #7
 8007b44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2b06      	cmp	r3, #6
 8007b4a:	d010      	beq.n	8007b6e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0201 	orr.w	r2, r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5c:	e007      	b.n	8007b6e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f042 0201 	orr.w	r2, r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	40010000 	.word	0x40010000
 8007b7c:	40000400 	.word	0x40000400
 8007b80:	40000800 	.word	0x40000800
 8007b84:	40000c00 	.word	0x40000c00
 8007b88:	40014000 	.word	0x40014000

08007b8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e097      	b.n	8007cd0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d106      	bne.n	8007bba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7fc f81f 	bl	8003bf8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	6812      	ldr	r2, [r2, #0]
 8007bcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bd0:	f023 0307 	bic.w	r3, r3, #7
 8007bd4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	3304      	adds	r3, #4
 8007bde:	4619      	mov	r1, r3
 8007be0:	4610      	mov	r0, r2
 8007be2:	f000 fbc1 	bl	8008368 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c0e:	f023 0303 	bic.w	r3, r3, #3
 8007c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	689a      	ldr	r2, [r3, #8]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	021b      	lsls	r3, r3, #8
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007c2c:	f023 030c 	bic.w	r3, r3, #12
 8007c30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	68da      	ldr	r2, [r3, #12]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	021b      	lsls	r3, r3, #8
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	011a      	lsls	r2, r3, #4
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	031b      	lsls	r3, r3, #12
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007c6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007c72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	011b      	lsls	r3, r3, #4
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ce8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007cf0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cf8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d00:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d110      	bne.n	8007d2a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d102      	bne.n	8007d14 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d0e:	7b7b      	ldrb	r3, [r7, #13]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d001      	beq.n	8007d18 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e069      	b.n	8007dec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d28:	e031      	b.n	8007d8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d110      	bne.n	8007d52 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d30:	7bbb      	ldrb	r3, [r7, #14]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d102      	bne.n	8007d3c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d36:	7b3b      	ldrb	r3, [r7, #12]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d001      	beq.n	8007d40 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e055      	b.n	8007dec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d50:	e01d      	b.n	8007d8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d108      	bne.n	8007d6a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d105      	bne.n	8007d6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d5e:	7b7b      	ldrb	r3, [r7, #13]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d102      	bne.n	8007d6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d64:	7b3b      	ldrb	r3, [r7, #12]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d001      	beq.n	8007d6e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e03e      	b.n	8007dec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2202      	movs	r2, #2
 8007d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2202      	movs	r2, #2
 8007d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d003      	beq.n	8007d9c <HAL_TIM_Encoder_Start+0xc4>
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	d008      	beq.n	8007dac <HAL_TIM_Encoder_Start+0xd4>
 8007d9a:	e00f      	b.n	8007dbc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2201      	movs	r2, #1
 8007da2:	2100      	movs	r1, #0
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 fd85 	bl	80088b4 <TIM_CCxChannelCmd>
      break;
 8007daa:	e016      	b.n	8007dda <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2201      	movs	r2, #1
 8007db2:	2104      	movs	r1, #4
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 fd7d 	bl	80088b4 <TIM_CCxChannelCmd>
      break;
 8007dba:	e00e      	b.n	8007dda <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 fd75 	bl	80088b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	2104      	movs	r1, #4
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fd6e 	bl	80088b4 <TIM_CCxChannelCmd>
      break;
 8007dd8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f042 0201 	orr.w	r2, r2, #1
 8007de8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d122      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d11b      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f06f 0202 	mvn.w	r2, #2
 8007e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa77 	bl	800832a <HAL_TIM_IC_CaptureCallback>
 8007e3c:	e005      	b.n	8007e4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa69 	bl	8008316 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fa7a 	bl	800833e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	f003 0304 	and.w	r3, r3, #4
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	d122      	bne.n	8007ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f003 0304 	and.w	r3, r3, #4
 8007e68:	2b04      	cmp	r3, #4
 8007e6a:	d11b      	bne.n	8007ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f06f 0204 	mvn.w	r2, #4
 8007e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2202      	movs	r2, #2
 8007e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fa4d 	bl	800832a <HAL_TIM_IC_CaptureCallback>
 8007e90:	e005      	b.n	8007e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fa3f 	bl	8008316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fa50 	bl	800833e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	f003 0308 	and.w	r3, r3, #8
 8007eae:	2b08      	cmp	r3, #8
 8007eb0:	d122      	bne.n	8007ef8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f003 0308 	and.w	r3, r3, #8
 8007ebc:	2b08      	cmp	r3, #8
 8007ebe:	d11b      	bne.n	8007ef8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f06f 0208 	mvn.w	r2, #8
 8007ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2204      	movs	r2, #4
 8007ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	f003 0303 	and.w	r3, r3, #3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fa23 	bl	800832a <HAL_TIM_IC_CaptureCallback>
 8007ee4:	e005      	b.n	8007ef2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fa15 	bl	8008316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fa26 	bl	800833e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	f003 0310 	and.w	r3, r3, #16
 8007f02:	2b10      	cmp	r3, #16
 8007f04:	d122      	bne.n	8007f4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f003 0310 	and.w	r3, r3, #16
 8007f10:	2b10      	cmp	r3, #16
 8007f12:	d11b      	bne.n	8007f4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f06f 0210 	mvn.w	r2, #16
 8007f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2208      	movs	r2, #8
 8007f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f9f9 	bl	800832a <HAL_TIM_IC_CaptureCallback>
 8007f38:	e005      	b.n	8007f46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f9eb 	bl	8008316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f9fc 	bl	800833e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d10e      	bne.n	8007f78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d107      	bne.n	8007f78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f06f 0201 	mvn.w	r2, #1
 8007f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7fb fcce 	bl	8003914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f82:	2b80      	cmp	r3, #128	; 0x80
 8007f84:	d10e      	bne.n	8007fa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f90:	2b80      	cmp	r3, #128	; 0x80
 8007f92:	d107      	bne.n	8007fa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fd78 	bl	8008a94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fae:	2b40      	cmp	r3, #64	; 0x40
 8007fb0:	d10e      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fbc:	2b40      	cmp	r3, #64	; 0x40
 8007fbe:	d107      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f9c1 	bl	8008352 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f003 0320 	and.w	r3, r3, #32
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	d10e      	bne.n	8007ffc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f003 0320 	and.w	r3, r3, #32
 8007fe8:	2b20      	cmp	r3, #32
 8007fea:	d107      	bne.n	8007ffc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f06f 0220 	mvn.w	r2, #32
 8007ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fd42 	bl	8008a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ffc:	bf00      	nop
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800801a:	2b01      	cmp	r3, #1
 800801c:	d101      	bne.n	8008022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800801e:	2302      	movs	r3, #2
 8008020:	e0ae      	b.n	8008180 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b0c      	cmp	r3, #12
 800802e:	f200 809f 	bhi.w	8008170 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008032:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008038:	0800806d 	.word	0x0800806d
 800803c:	08008171 	.word	0x08008171
 8008040:	08008171 	.word	0x08008171
 8008044:	08008171 	.word	0x08008171
 8008048:	080080ad 	.word	0x080080ad
 800804c:	08008171 	.word	0x08008171
 8008050:	08008171 	.word	0x08008171
 8008054:	08008171 	.word	0x08008171
 8008058:	080080ef 	.word	0x080080ef
 800805c:	08008171 	.word	0x08008171
 8008060:	08008171 	.word	0x08008171
 8008064:	08008171 	.word	0x08008171
 8008068:	0800812f 	.word	0x0800812f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68b9      	ldr	r1, [r7, #8]
 8008072:	4618      	mov	r0, r3
 8008074:	f000 f9f8 	bl	8008468 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699a      	ldr	r2, [r3, #24]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0208 	orr.w	r2, r2, #8
 8008086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	699a      	ldr	r2, [r3, #24]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0204 	bic.w	r2, r2, #4
 8008096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6999      	ldr	r1, [r3, #24]
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	691a      	ldr	r2, [r3, #16]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	619a      	str	r2, [r3, #24]
      break;
 80080aa:	e064      	b.n	8008176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68b9      	ldr	r1, [r7, #8]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 fa3e 	bl	8008534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	699a      	ldr	r2, [r3, #24]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	699a      	ldr	r2, [r3, #24]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6999      	ldr	r1, [r3, #24]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	021a      	lsls	r2, r3, #8
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	430a      	orrs	r2, r1
 80080ea:	619a      	str	r2, [r3, #24]
      break;
 80080ec:	e043      	b.n	8008176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68b9      	ldr	r1, [r7, #8]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 fa89 	bl	800860c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	69da      	ldr	r2, [r3, #28]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f042 0208 	orr.w	r2, r2, #8
 8008108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	69da      	ldr	r2, [r3, #28]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 0204 	bic.w	r2, r2, #4
 8008118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69d9      	ldr	r1, [r3, #28]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	691a      	ldr	r2, [r3, #16]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	61da      	str	r2, [r3, #28]
      break;
 800812c:	e023      	b.n	8008176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68b9      	ldr	r1, [r7, #8]
 8008134:	4618      	mov	r0, r3
 8008136:	f000 fad3 	bl	80086e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	69da      	ldr	r2, [r3, #28]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	69da      	ldr	r2, [r3, #28]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	69d9      	ldr	r1, [r3, #28]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	021a      	lsls	r2, r3, #8
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	430a      	orrs	r2, r1
 800816c:	61da      	str	r2, [r3, #28]
      break;
 800816e:	e002      	b.n	8008176 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	75fb      	strb	r3, [r7, #23]
      break;
 8008174:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800817e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3718      	adds	r7, #24
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800819c:	2b01      	cmp	r3, #1
 800819e:	d101      	bne.n	80081a4 <HAL_TIM_ConfigClockSource+0x1c>
 80081a0:	2302      	movs	r3, #2
 80081a2:	e0b4      	b.n	800830e <HAL_TIM_ConfigClockSource+0x186>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2202      	movs	r2, #2
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80081c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081dc:	d03e      	beq.n	800825c <HAL_TIM_ConfigClockSource+0xd4>
 80081de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081e2:	f200 8087 	bhi.w	80082f4 <HAL_TIM_ConfigClockSource+0x16c>
 80081e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ea:	f000 8086 	beq.w	80082fa <HAL_TIM_ConfigClockSource+0x172>
 80081ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081f2:	d87f      	bhi.n	80082f4 <HAL_TIM_ConfigClockSource+0x16c>
 80081f4:	2b70      	cmp	r3, #112	; 0x70
 80081f6:	d01a      	beq.n	800822e <HAL_TIM_ConfigClockSource+0xa6>
 80081f8:	2b70      	cmp	r3, #112	; 0x70
 80081fa:	d87b      	bhi.n	80082f4 <HAL_TIM_ConfigClockSource+0x16c>
 80081fc:	2b60      	cmp	r3, #96	; 0x60
 80081fe:	d050      	beq.n	80082a2 <HAL_TIM_ConfigClockSource+0x11a>
 8008200:	2b60      	cmp	r3, #96	; 0x60
 8008202:	d877      	bhi.n	80082f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008204:	2b50      	cmp	r3, #80	; 0x50
 8008206:	d03c      	beq.n	8008282 <HAL_TIM_ConfigClockSource+0xfa>
 8008208:	2b50      	cmp	r3, #80	; 0x50
 800820a:	d873      	bhi.n	80082f4 <HAL_TIM_ConfigClockSource+0x16c>
 800820c:	2b40      	cmp	r3, #64	; 0x40
 800820e:	d058      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x13a>
 8008210:	2b40      	cmp	r3, #64	; 0x40
 8008212:	d86f      	bhi.n	80082f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008214:	2b30      	cmp	r3, #48	; 0x30
 8008216:	d064      	beq.n	80082e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008218:	2b30      	cmp	r3, #48	; 0x30
 800821a:	d86b      	bhi.n	80082f4 <HAL_TIM_ConfigClockSource+0x16c>
 800821c:	2b20      	cmp	r3, #32
 800821e:	d060      	beq.n	80082e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008220:	2b20      	cmp	r3, #32
 8008222:	d867      	bhi.n	80082f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008224:	2b00      	cmp	r3, #0
 8008226:	d05c      	beq.n	80082e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008228:	2b10      	cmp	r3, #16
 800822a:	d05a      	beq.n	80082e2 <HAL_TIM_ConfigClockSource+0x15a>
 800822c:	e062      	b.n	80082f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	6899      	ldr	r1, [r3, #8]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	f000 fb19 	bl	8008874 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	609a      	str	r2, [r3, #8]
      break;
 800825a:	e04f      	b.n	80082fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	6899      	ldr	r1, [r3, #8]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f000 fb02 	bl	8008874 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689a      	ldr	r2, [r3, #8]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800827e:	609a      	str	r2, [r3, #8]
      break;
 8008280:	e03c      	b.n	80082fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	6859      	ldr	r1, [r3, #4]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	461a      	mov	r2, r3
 8008290:	f000 fa76 	bl	8008780 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2150      	movs	r1, #80	; 0x50
 800829a:	4618      	mov	r0, r3
 800829c:	f000 facf 	bl	800883e <TIM_ITRx_SetConfig>
      break;
 80082a0:	e02c      	b.n	80082fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	6859      	ldr	r1, [r3, #4]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	461a      	mov	r2, r3
 80082b0:	f000 fa95 	bl	80087de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2160      	movs	r1, #96	; 0x60
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 fabf 	bl	800883e <TIM_ITRx_SetConfig>
      break;
 80082c0:	e01c      	b.n	80082fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6818      	ldr	r0, [r3, #0]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	6859      	ldr	r1, [r3, #4]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	461a      	mov	r2, r3
 80082d0:	f000 fa56 	bl	8008780 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2140      	movs	r1, #64	; 0x40
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 faaf 	bl	800883e <TIM_ITRx_SetConfig>
      break;
 80082e0:	e00c      	b.n	80082fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4619      	mov	r1, r3
 80082ec:	4610      	mov	r0, r2
 80082ee:	f000 faa6 	bl	800883e <TIM_ITRx_SetConfig>
      break;
 80082f2:	e003      	b.n	80082fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	73fb      	strb	r3, [r7, #15]
      break;
 80082f8:	e000      	b.n	80082fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80082fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800830c:	7bfb      	ldrb	r3, [r7, #15]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008332:	bf00      	nop
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008346:	bf00      	nop
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008352:	b480      	push	{r7}
 8008354:	b083      	sub	sp, #12
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800835a:	bf00      	nop
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
	...

08008368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a34      	ldr	r2, [pc, #208]	; (800844c <TIM_Base_SetConfig+0xe4>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d00f      	beq.n	80083a0 <TIM_Base_SetConfig+0x38>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008386:	d00b      	beq.n	80083a0 <TIM_Base_SetConfig+0x38>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a31      	ldr	r2, [pc, #196]	; (8008450 <TIM_Base_SetConfig+0xe8>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d007      	beq.n	80083a0 <TIM_Base_SetConfig+0x38>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a30      	ldr	r2, [pc, #192]	; (8008454 <TIM_Base_SetConfig+0xec>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d003      	beq.n	80083a0 <TIM_Base_SetConfig+0x38>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a2f      	ldr	r2, [pc, #188]	; (8008458 <TIM_Base_SetConfig+0xf0>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d108      	bne.n	80083b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a25      	ldr	r2, [pc, #148]	; (800844c <TIM_Base_SetConfig+0xe4>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d01b      	beq.n	80083f2 <TIM_Base_SetConfig+0x8a>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083c0:	d017      	beq.n	80083f2 <TIM_Base_SetConfig+0x8a>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a22      	ldr	r2, [pc, #136]	; (8008450 <TIM_Base_SetConfig+0xe8>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d013      	beq.n	80083f2 <TIM_Base_SetConfig+0x8a>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a21      	ldr	r2, [pc, #132]	; (8008454 <TIM_Base_SetConfig+0xec>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d00f      	beq.n	80083f2 <TIM_Base_SetConfig+0x8a>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a20      	ldr	r2, [pc, #128]	; (8008458 <TIM_Base_SetConfig+0xf0>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d00b      	beq.n	80083f2 <TIM_Base_SetConfig+0x8a>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a1f      	ldr	r2, [pc, #124]	; (800845c <TIM_Base_SetConfig+0xf4>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d007      	beq.n	80083f2 <TIM_Base_SetConfig+0x8a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a1e      	ldr	r2, [pc, #120]	; (8008460 <TIM_Base_SetConfig+0xf8>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d003      	beq.n	80083f2 <TIM_Base_SetConfig+0x8a>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a1d      	ldr	r2, [pc, #116]	; (8008464 <TIM_Base_SetConfig+0xfc>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d108      	bne.n	8008404 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	4313      	orrs	r3, r2
 8008402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	4313      	orrs	r3, r2
 8008410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a08      	ldr	r2, [pc, #32]	; (800844c <TIM_Base_SetConfig+0xe4>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d103      	bne.n	8008438 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	691a      	ldr	r2, [r3, #16]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	615a      	str	r2, [r3, #20]
}
 800843e:	bf00      	nop
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	40010000 	.word	0x40010000
 8008450:	40000400 	.word	0x40000400
 8008454:	40000800 	.word	0x40000800
 8008458:	40000c00 	.word	0x40000c00
 800845c:	40014000 	.word	0x40014000
 8008460:	40014400 	.word	0x40014400
 8008464:	40014800 	.word	0x40014800

08008468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	f023 0201 	bic.w	r2, r3, #1
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0303 	bic.w	r3, r3, #3
 800849e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f023 0302 	bic.w	r3, r3, #2
 80084b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a1c      	ldr	r2, [pc, #112]	; (8008530 <TIM_OC1_SetConfig+0xc8>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d10c      	bne.n	80084de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f023 0308 	bic.w	r3, r3, #8
 80084ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f023 0304 	bic.w	r3, r3, #4
 80084dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a13      	ldr	r2, [pc, #76]	; (8008530 <TIM_OC1_SetConfig+0xc8>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d111      	bne.n	800850a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	4313      	orrs	r3, r2
 8008508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	693a      	ldr	r2, [r7, #16]
 800850e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	621a      	str	r2, [r3, #32]
}
 8008524:	bf00      	nop
 8008526:	371c      	adds	r7, #28
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	40010000 	.word	0x40010000

08008534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	f023 0210 	bic.w	r2, r3, #16
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800856a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	021b      	lsls	r3, r3, #8
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	4313      	orrs	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	f023 0320 	bic.w	r3, r3, #32
 800857e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	011b      	lsls	r3, r3, #4
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	4313      	orrs	r3, r2
 800858a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a1e      	ldr	r2, [pc, #120]	; (8008608 <TIM_OC2_SetConfig+0xd4>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d10d      	bne.n	80085b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800859a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	011b      	lsls	r3, r3, #4
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a15      	ldr	r2, [pc, #84]	; (8008608 <TIM_OC2_SetConfig+0xd4>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d113      	bne.n	80085e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	4313      	orrs	r3, r2
 80085de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	685a      	ldr	r2, [r3, #4]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	621a      	str	r2, [r3, #32]
}
 80085fa:	bf00      	nop
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	40010000 	.word	0x40010000

0800860c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	69db      	ldr	r3, [r3, #28]
 8008632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800863a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f023 0303 	bic.w	r3, r3, #3
 8008642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	4313      	orrs	r3, r2
 800864c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	021b      	lsls	r3, r3, #8
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	4313      	orrs	r3, r2
 8008660:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a1d      	ldr	r2, [pc, #116]	; (80086dc <TIM_OC3_SetConfig+0xd0>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d10d      	bne.n	8008686 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	021b      	lsls	r3, r3, #8
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	4313      	orrs	r3, r2
 800867c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a14      	ldr	r2, [pc, #80]	; (80086dc <TIM_OC3_SetConfig+0xd0>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d113      	bne.n	80086b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800869c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	011b      	lsls	r3, r3, #4
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	011b      	lsls	r3, r3, #4
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	697a      	ldr	r2, [r7, #20]
 80086ce:	621a      	str	r2, [r3, #32]
}
 80086d0:	bf00      	nop
 80086d2:	371c      	adds	r7, #28
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	40010000 	.word	0x40010000

080086e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800870e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	021b      	lsls	r3, r3, #8
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	4313      	orrs	r3, r2
 8008722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800872a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	031b      	lsls	r3, r3, #12
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	4313      	orrs	r3, r2
 8008736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a10      	ldr	r2, [pc, #64]	; (800877c <TIM_OC4_SetConfig+0x9c>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d109      	bne.n	8008754 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	695b      	ldr	r3, [r3, #20]
 800874c:	019b      	lsls	r3, r3, #6
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	4313      	orrs	r3, r2
 8008752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	685a      	ldr	r2, [r3, #4]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	621a      	str	r2, [r3, #32]
}
 800876e:	bf00      	nop
 8008770:	371c      	adds	r7, #28
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	40010000 	.word	0x40010000

08008780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6a1b      	ldr	r3, [r3, #32]
 8008790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	f023 0201 	bic.w	r2, r3, #1
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	011b      	lsls	r3, r3, #4
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f023 030a 	bic.w	r3, r3, #10
 80087bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	621a      	str	r2, [r3, #32]
}
 80087d2:	bf00      	nop
 80087d4:	371c      	adds	r7, #28
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087de:	b480      	push	{r7}
 80087e0:	b087      	sub	sp, #28
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	f023 0210 	bic.w	r2, r3, #16
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008808:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	031b      	lsls	r3, r3, #12
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	4313      	orrs	r3, r2
 8008812:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800881a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	011b      	lsls	r3, r3, #4
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	4313      	orrs	r3, r2
 8008824:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	621a      	str	r2, [r3, #32]
}
 8008832:	bf00      	nop
 8008834:	371c      	adds	r7, #28
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800883e:	b480      	push	{r7}
 8008840:	b085      	sub	sp, #20
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008854:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4313      	orrs	r3, r2
 800885c:	f043 0307 	orr.w	r3, r3, #7
 8008860:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	609a      	str	r2, [r3, #8]
}
 8008868:	bf00      	nop
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
 8008880:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800888e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	021a      	lsls	r2, r3, #8
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	431a      	orrs	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	4313      	orrs	r3, r2
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	4313      	orrs	r3, r2
 80088a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	609a      	str	r2, [r3, #8]
}
 80088a8:	bf00      	nop
 80088aa:	371c      	adds	r7, #28
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	f003 031f 	and.w	r3, r3, #31
 80088c6:	2201      	movs	r2, #1
 80088c8:	fa02 f303 	lsl.w	r3, r2, r3
 80088cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6a1a      	ldr	r2, [r3, #32]
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	43db      	mvns	r3, r3
 80088d6:	401a      	ands	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6a1a      	ldr	r2, [r3, #32]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f003 031f 	and.w	r3, r3, #31
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	fa01 f303 	lsl.w	r3, r1, r3
 80088ec:	431a      	orrs	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	621a      	str	r2, [r3, #32]
}
 80088f2:	bf00      	nop
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
	...

08008900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008910:	2b01      	cmp	r3, #1
 8008912:	d101      	bne.n	8008918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008914:	2302      	movs	r3, #2
 8008916:	e050      	b.n	80089ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2202      	movs	r2, #2
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	4313      	orrs	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a1c      	ldr	r2, [pc, #112]	; (80089c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d018      	beq.n	800898e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008964:	d013      	beq.n	800898e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a18      	ldr	r2, [pc, #96]	; (80089cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d00e      	beq.n	800898e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a16      	ldr	r2, [pc, #88]	; (80089d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d009      	beq.n	800898e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a15      	ldr	r2, [pc, #84]	; (80089d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d004      	beq.n	800898e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a13      	ldr	r2, [pc, #76]	; (80089d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d10c      	bne.n	80089a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	4313      	orrs	r3, r2
 800899e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	40010000 	.word	0x40010000
 80089cc:	40000400 	.word	0x40000400
 80089d0:	40000800 	.word	0x40000800
 80089d4:	40000c00 	.word	0x40000c00
 80089d8:	40014000 	.word	0x40014000

080089dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80089e6:	2300      	movs	r3, #0
 80089e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d101      	bne.n	80089f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80089f4:	2302      	movs	r3, #2
 80089f6:	e03d      	b.n	8008a74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	69db      	ldr	r3, [r3, #28]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a9c:	bf00      	nop
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e03f      	b.n	8008b3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d106      	bne.n	8008ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7fb f958 	bl	8003d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2224      	movs	r2, #36	; 0x24
 8008ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68da      	ldr	r2, [r3, #12]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 ff81 	bl	80099f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	691a      	ldr	r2, [r3, #16]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	695a      	ldr	r2, [r3, #20]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68da      	ldr	r2, [r3, #12]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2220      	movs	r2, #32
 8008b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08c      	sub	sp, #48	; 0x30
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2b20      	cmp	r3, #32
 8008b5c:	d165      	bne.n	8008c2a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <HAL_UART_Transmit_DMA+0x26>
 8008b64:	88fb      	ldrh	r3, [r7, #6]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e05e      	b.n	8008c2c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d101      	bne.n	8008b7c <HAL_UART_Transmit_DMA+0x38>
 8008b78:	2302      	movs	r3, #2
 8008b7a:	e057      	b.n	8008c2c <HAL_UART_Transmit_DMA+0xe8>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	88fa      	ldrh	r2, [r7, #6]
 8008b8e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	88fa      	ldrh	r2, [r7, #6]
 8008b94:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2221      	movs	r2, #33	; 0x21
 8008ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba8:	4a22      	ldr	r2, [pc, #136]	; (8008c34 <HAL_UART_Transmit_DMA+0xf0>)
 8008baa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb0:	4a21      	ldr	r2, [pc, #132]	; (8008c38 <HAL_UART_Transmit_DMA+0xf4>)
 8008bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb8:	4a20      	ldr	r2, [pc, #128]	; (8008c3c <HAL_UART_Transmit_DMA+0xf8>)
 8008bba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008bc4:	f107 0308 	add.w	r3, r7, #8
 8008bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd0:	6819      	ldr	r1, [r3, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	461a      	mov	r2, r3
 8008bda:	88fb      	ldrh	r3, [r7, #6]
 8008bdc:	f7fb fca0 	bl	8004520 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008be8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3314      	adds	r3, #20
 8008bf8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	e853 3f00 	ldrex	r3, [r3]
 8008c00:	617b      	str	r3, [r7, #20]
   return(result);
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	3314      	adds	r3, #20
 8008c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c12:	627a      	str	r2, [r7, #36]	; 0x24
 8008c14:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c16:	6a39      	ldr	r1, [r7, #32]
 8008c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c1a:	e841 2300 	strex	r3, r2, [r1]
 8008c1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1e5      	bne.n	8008bf2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	e000      	b.n	8008c2c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008c2a:	2302      	movs	r3, #2
  }
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3730      	adds	r7, #48	; 0x30
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	0800928d 	.word	0x0800928d
 8008c38:	08009327 	.word	0x08009327
 8008c3c:	0800949f 	.word	0x0800949f

08008c40 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08c      	sub	sp, #48	; 0x30
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b20      	cmp	r3, #32
 8008c58:	d152      	bne.n	8008d00 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d002      	beq.n	8008c66 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008c60:	88fb      	ldrh	r3, [r7, #6]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e04b      	b.n	8008d02 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d101      	bne.n	8008c78 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8008c74:	2302      	movs	r3, #2
 8008c76:	e044      	b.n	8008d02 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2201      	movs	r2, #1
 8008c84:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008c86:	88fb      	ldrh	r3, [r7, #6]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	68b9      	ldr	r1, [r7, #8]
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f000 fc51 	bl	8009534 <UART_Start_Receive_DMA>
 8008c92:	4603      	mov	r3, r0
 8008c94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008c98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d12c      	bne.n	8008cfa <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d125      	bne.n	8008cf4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ca8:	2300      	movs	r3, #0
 8008caa:	613b      	str	r3, [r7, #16]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	613b      	str	r3, [r7, #16]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	613b      	str	r3, [r7, #16]
 8008cbc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	330c      	adds	r3, #12
 8008cc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f043 0310 	orr.w	r3, r3, #16
 8008cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	330c      	adds	r3, #12
 8008cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cde:	627a      	str	r2, [r7, #36]	; 0x24
 8008ce0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce2:	6a39      	ldr	r1, [r7, #32]
 8008ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ce6:	e841 2300 	strex	r3, r2, [r1]
 8008cea:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1e5      	bne.n	8008cbe <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8008cf2:	e002      	b.n	8008cfa <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cfe:	e000      	b.n	8008d02 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8008d00:	2302      	movs	r3, #2
  }
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3730      	adds	r7, #48	; 0x30
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
	...

08008d0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b0ba      	sub	sp, #232	; 0xe8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d42:	f003 030f 	and.w	r3, r3, #15
 8008d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10f      	bne.n	8008d72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d56:	f003 0320 	and.w	r3, r3, #32
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d009      	beq.n	8008d72 <HAL_UART_IRQHandler+0x66>
 8008d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d62:	f003 0320 	and.w	r3, r3, #32
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fd87 	bl	800987e <UART_Receive_IT>
      return;
 8008d70:	e256      	b.n	8009220 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008d72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f000 80de 	beq.w	8008f38 <HAL_UART_IRQHandler+0x22c>
 8008d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d106      	bne.n	8008d96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f000 80d1 	beq.w	8008f38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00b      	beq.n	8008dba <HAL_UART_IRQHandler+0xae>
 8008da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d005      	beq.n	8008dba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db2:	f043 0201 	orr.w	r2, r3, #1
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dbe:	f003 0304 	and.w	r3, r3, #4
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00b      	beq.n	8008dde <HAL_UART_IRQHandler+0xd2>
 8008dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d005      	beq.n	8008dde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd6:	f043 0202 	orr.w	r2, r3, #2
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008de2:	f003 0302 	and.w	r3, r3, #2
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00b      	beq.n	8008e02 <HAL_UART_IRQHandler+0xf6>
 8008dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d005      	beq.n	8008e02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfa:	f043 0204 	orr.w	r2, r3, #4
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e06:	f003 0308 	and.w	r3, r3, #8
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d011      	beq.n	8008e32 <HAL_UART_IRQHandler+0x126>
 8008e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e12:	f003 0320 	and.w	r3, r3, #32
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d105      	bne.n	8008e26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d005      	beq.n	8008e32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2a:	f043 0208 	orr.w	r2, r3, #8
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 81ed 	beq.w	8009216 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e40:	f003 0320 	and.w	r3, r3, #32
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d008      	beq.n	8008e5a <HAL_UART_IRQHandler+0x14e>
 8008e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e4c:	f003 0320 	and.w	r3, r3, #32
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fd12 	bl	800987e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	695b      	ldr	r3, [r3, #20]
 8008e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e64:	2b40      	cmp	r3, #64	; 0x40
 8008e66:	bf0c      	ite	eq
 8008e68:	2301      	moveq	r3, #1
 8008e6a:	2300      	movne	r3, #0
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e76:	f003 0308 	and.w	r3, r3, #8
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d103      	bne.n	8008e86 <HAL_UART_IRQHandler+0x17a>
 8008e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d04f      	beq.n	8008f26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fc1a 	bl	80096c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e96:	2b40      	cmp	r3, #64	; 0x40
 8008e98:	d141      	bne.n	8008f1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	3314      	adds	r3, #20
 8008ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ea8:	e853 3f00 	ldrex	r3, [r3]
 8008eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3314      	adds	r3, #20
 8008ec2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008ec6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008eca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ece:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ed2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ed6:	e841 2300 	strex	r3, r2, [r1]
 8008eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1d9      	bne.n	8008e9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d013      	beq.n	8008f16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef2:	4a7d      	ldr	r2, [pc, #500]	; (80090e8 <HAL_UART_IRQHandler+0x3dc>)
 8008ef4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7fb fbd8 	bl	80046b0 <HAL_DMA_Abort_IT>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d016      	beq.n	8008f34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008f10:	4610      	mov	r0, r2
 8008f12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f14:	e00e      	b.n	8008f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f9ae 	bl	8009278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f1c:	e00a      	b.n	8008f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f9aa 	bl	8009278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f24:	e006      	b.n	8008f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f9a6 	bl	8009278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008f32:	e170      	b.n	8009216 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f34:	bf00      	nop
    return;
 8008f36:	e16e      	b.n	8009216 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	f040 814a 	bne.w	80091d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f46:	f003 0310 	and.w	r3, r3, #16
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f000 8143 	beq.w	80091d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f54:	f003 0310 	and.w	r3, r3, #16
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 813c 	beq.w	80091d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60bb      	str	r3, [r7, #8]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	60bb      	str	r3, [r7, #8]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	60bb      	str	r3, [r7, #8]
 8008f72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	695b      	ldr	r3, [r3, #20]
 8008f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f7e:	2b40      	cmp	r3, #64	; 0x40
 8008f80:	f040 80b4 	bne.w	80090ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 8140 	beq.w	800921a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	f080 8139 	bcs.w	800921a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fba:	f000 8088 	beq.w	80090ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	330c      	adds	r3, #12
 8008fc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fcc:	e853 3f00 	ldrex	r3, [r3]
 8008fd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	330c      	adds	r3, #12
 8008fe6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008fea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008fee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008ff6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008ffa:	e841 2300 	strex	r3, r2, [r1]
 8008ffe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009002:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1d9      	bne.n	8008fbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	3314      	adds	r3, #20
 8009010:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009014:	e853 3f00 	ldrex	r3, [r3]
 8009018:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800901a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800901c:	f023 0301 	bic.w	r3, r3, #1
 8009020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3314      	adds	r3, #20
 800902a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800902e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009032:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009034:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009036:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800903a:	e841 2300 	strex	r3, r2, [r1]
 800903e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1e1      	bne.n	800900a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3314      	adds	r3, #20
 800904c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009050:	e853 3f00 	ldrex	r3, [r3]
 8009054:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800905c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3314      	adds	r3, #20
 8009066:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800906a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800906c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009070:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e3      	bne.n	8009046 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2220      	movs	r2, #32
 8009082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	330c      	adds	r3, #12
 8009092:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009096:	e853 3f00 	ldrex	r3, [r3]
 800909a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800909c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800909e:	f023 0310 	bic.w	r3, r3, #16
 80090a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	330c      	adds	r3, #12
 80090ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80090b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80090b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090b8:	e841 2300 	strex	r3, r2, [r1]
 80090bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e3      	bne.n	800908c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fb fa81 	bl	80045d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	b29b      	uxth	r3, r3
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7f9 fbcc 	bl	800287c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80090e4:	e099      	b.n	800921a <HAL_UART_IRQHandler+0x50e>
 80090e6:	bf00      	nop
 80090e8:	08009787 	.word	0x08009787
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009100:	b29b      	uxth	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 808b 	beq.w	800921e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009108:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800910c:	2b00      	cmp	r3, #0
 800910e:	f000 8086 	beq.w	800921e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	330c      	adds	r3, #12
 8009118:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911c:	e853 3f00 	ldrex	r3, [r3]
 8009120:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009124:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009128:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	330c      	adds	r3, #12
 8009132:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009136:	647a      	str	r2, [r7, #68]	; 0x44
 8009138:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800913c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800913e:	e841 2300 	strex	r3, r2, [r1]
 8009142:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1e3      	bne.n	8009112 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3314      	adds	r3, #20
 8009150:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	e853 3f00 	ldrex	r3, [r3]
 8009158:	623b      	str	r3, [r7, #32]
   return(result);
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	f023 0301 	bic.w	r3, r3, #1
 8009160:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3314      	adds	r3, #20
 800916a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800916e:	633a      	str	r2, [r7, #48]	; 0x30
 8009170:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009176:	e841 2300 	strex	r3, r2, [r1]
 800917a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800917c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1e3      	bne.n	800914a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2220      	movs	r2, #32
 8009186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	330c      	adds	r3, #12
 8009196:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	e853 3f00 	ldrex	r3, [r3]
 800919e:	60fb      	str	r3, [r7, #12]
   return(result);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f023 0310 	bic.w	r3, r3, #16
 80091a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	330c      	adds	r3, #12
 80091b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80091b4:	61fa      	str	r2, [r7, #28]
 80091b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	69b9      	ldr	r1, [r7, #24]
 80091ba:	69fa      	ldr	r2, [r7, #28]
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	617b      	str	r3, [r7, #20]
   return(result);
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e3      	bne.n	8009190 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7f9 fb54 	bl	800287c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091d4:	e023      	b.n	800921e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80091d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d009      	beq.n	80091f6 <HAL_UART_IRQHandler+0x4ea>
 80091e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d003      	beq.n	80091f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fadd 	bl	80097ae <UART_Transmit_IT>
    return;
 80091f4:	e014      	b.n	8009220 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80091f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00e      	beq.n	8009220 <HAL_UART_IRQHandler+0x514>
 8009202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800920a:	2b00      	cmp	r3, #0
 800920c:	d008      	beq.n	8009220 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fb1d 	bl	800984e <UART_EndTransmit_IT>
    return;
 8009214:	e004      	b.n	8009220 <HAL_UART_IRQHandler+0x514>
    return;
 8009216:	bf00      	nop
 8009218:	e002      	b.n	8009220 <HAL_UART_IRQHandler+0x514>
      return;
 800921a:	bf00      	nop
 800921c:	e000      	b.n	8009220 <HAL_UART_IRQHandler+0x514>
      return;
 800921e:	bf00      	nop
  }
}
 8009220:	37e8      	adds	r7, #232	; 0xe8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop

08009228 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b090      	sub	sp, #64	; 0x40
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009298:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d137      	bne.n	8009318 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80092a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092aa:	2200      	movs	r2, #0
 80092ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3314      	adds	r3, #20
 80092b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	623b      	str	r3, [r7, #32]
   return(result);
 80092be:	6a3b      	ldr	r3, [r7, #32]
 80092c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80092c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3314      	adds	r3, #20
 80092cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ce:	633a      	str	r2, [r7, #48]	; 0x30
 80092d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092d6:	e841 2300 	strex	r3, r2, [r1]
 80092da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1e5      	bne.n	80092ae <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	330c      	adds	r3, #12
 80092e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	e853 3f00 	ldrex	r3, [r3]
 80092f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092f8:	637b      	str	r3, [r7, #52]	; 0x34
 80092fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	330c      	adds	r3, #12
 8009300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009302:	61fa      	str	r2, [r7, #28]
 8009304:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009306:	69b9      	ldr	r1, [r7, #24]
 8009308:	69fa      	ldr	r2, [r7, #28]
 800930a:	e841 2300 	strex	r3, r2, [r1]
 800930e:	617b      	str	r3, [r7, #20]
   return(result);
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1e5      	bne.n	80092e2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009316:	e002      	b.n	800931e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009318:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800931a:	f7ff ff85 	bl	8009228 <HAL_UART_TxCpltCallback>
}
 800931e:	bf00      	nop
 8009320:	3740      	adds	r7, #64	; 0x40
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b084      	sub	sp, #16
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009332:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f7ff ff81 	bl	800923c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800933a:	bf00      	nop
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b09c      	sub	sp, #112	; 0x70
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800935a:	2b00      	cmp	r3, #0
 800935c:	d172      	bne.n	8009444 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800935e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009360:	2200      	movs	r2, #0
 8009362:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	330c      	adds	r3, #12
 800936a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800937a:	66bb      	str	r3, [r7, #104]	; 0x68
 800937c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	330c      	adds	r3, #12
 8009382:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009384:	65ba      	str	r2, [r7, #88]	; 0x58
 8009386:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800938a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e5      	bne.n	8009364 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3314      	adds	r3, #20
 800939e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80093a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093aa:	f023 0301 	bic.w	r3, r3, #1
 80093ae:	667b      	str	r3, [r7, #100]	; 0x64
 80093b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3314      	adds	r3, #20
 80093b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80093b8:	647a      	str	r2, [r7, #68]	; 0x44
 80093ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e5      	bne.n	8009398 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3314      	adds	r3, #20
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	e853 3f00 	ldrex	r3, [r3]
 80093da:	623b      	str	r3, [r7, #32]
   return(result);
 80093dc:	6a3b      	ldr	r3, [r7, #32]
 80093de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093e2:	663b      	str	r3, [r7, #96]	; 0x60
 80093e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3314      	adds	r3, #20
 80093ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093ec:	633a      	str	r2, [r7, #48]	; 0x30
 80093ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093f4:	e841 2300 	strex	r3, r2, [r1]
 80093f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1e5      	bne.n	80093cc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009402:	2220      	movs	r2, #32
 8009404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800940a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800940c:	2b01      	cmp	r3, #1
 800940e:	d119      	bne.n	8009444 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	330c      	adds	r3, #12
 8009416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	e853 3f00 	ldrex	r3, [r3]
 800941e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f023 0310 	bic.w	r3, r3, #16
 8009426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	330c      	adds	r3, #12
 800942e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009430:	61fa      	str	r2, [r7, #28]
 8009432:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009434:	69b9      	ldr	r1, [r7, #24]
 8009436:	69fa      	ldr	r2, [r7, #28]
 8009438:	e841 2300 	strex	r3, r2, [r1]
 800943c:	617b      	str	r3, [r7, #20]
   return(result);
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1e5      	bne.n	8009410 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009448:	2b01      	cmp	r3, #1
 800944a:	d106      	bne.n	800945a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800944c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800944e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009450:	4619      	mov	r1, r3
 8009452:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009454:	f7f9 fa12 	bl	800287c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009458:	e002      	b.n	8009460 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800945a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800945c:	f7ff fef8 	bl	8009250 <HAL_UART_RxCpltCallback>
}
 8009460:	bf00      	nop
 8009462:	3770      	adds	r7, #112	; 0x70
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009474:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947a:	2b01      	cmp	r3, #1
 800947c:	d108      	bne.n	8009490 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009482:	085b      	lsrs	r3, r3, #1
 8009484:	b29b      	uxth	r3, r3
 8009486:	4619      	mov	r1, r3
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f7f9 f9f7 	bl	800287c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800948e:	e002      	b.n	8009496 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f7ff fee7 	bl	8009264 <HAL_UART_RxHalfCpltCallback>
}
 8009496:	bf00      	nop
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80094a6:	2300      	movs	r3, #0
 80094a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ba:	2b80      	cmp	r3, #128	; 0x80
 80094bc:	bf0c      	ite	eq
 80094be:	2301      	moveq	r3, #1
 80094c0:	2300      	movne	r3, #0
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b21      	cmp	r3, #33	; 0x21
 80094d0:	d108      	bne.n	80094e4 <UART_DMAError+0x46>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d005      	beq.n	80094e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	2200      	movs	r2, #0
 80094dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80094de:	68b8      	ldr	r0, [r7, #8]
 80094e0:	f000 f8c6 	bl	8009670 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	695b      	ldr	r3, [r3, #20]
 80094ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ee:	2b40      	cmp	r3, #64	; 0x40
 80094f0:	bf0c      	ite	eq
 80094f2:	2301      	moveq	r3, #1
 80094f4:	2300      	movne	r3, #0
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009500:	b2db      	uxtb	r3, r3
 8009502:	2b22      	cmp	r3, #34	; 0x22
 8009504:	d108      	bne.n	8009518 <UART_DMAError+0x7a>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d005      	beq.n	8009518 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2200      	movs	r2, #0
 8009510:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009512:	68b8      	ldr	r0, [r7, #8]
 8009514:	f000 f8d4 	bl	80096c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951c:	f043 0210 	orr.w	r2, r3, #16
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009524:	68b8      	ldr	r0, [r7, #8]
 8009526:	f7ff fea7 	bl	8009278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800952a:	bf00      	nop
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b098      	sub	sp, #96	; 0x60
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	4613      	mov	r3, r2
 8009540:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	88fa      	ldrh	r2, [r7, #6]
 800954c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2222      	movs	r2, #34	; 0x22
 8009558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009560:	4a40      	ldr	r2, [pc, #256]	; (8009664 <UART_Start_Receive_DMA+0x130>)
 8009562:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009568:	4a3f      	ldr	r2, [pc, #252]	; (8009668 <UART_Start_Receive_DMA+0x134>)
 800956a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009570:	4a3e      	ldr	r2, [pc, #248]	; (800966c <UART_Start_Receive_DMA+0x138>)
 8009572:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009578:	2200      	movs	r2, #0
 800957a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800957c:	f107 0308 	add.w	r3, r7, #8
 8009580:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3304      	adds	r3, #4
 800958c:	4619      	mov	r1, r3
 800958e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	88fb      	ldrh	r3, [r7, #6]
 8009594:	f7fa ffc4 	bl	8004520 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009598:	2300      	movs	r3, #0
 800959a:	613b      	str	r3, [r7, #16]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	613b      	str	r3, [r7, #16]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	613b      	str	r3, [r7, #16]
 80095ac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d019      	beq.n	80095f2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	330c      	adds	r3, #12
 80095c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095c8:	e853 3f00 	ldrex	r3, [r3]
 80095cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	330c      	adds	r3, #12
 80095dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80095e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80095e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095e6:	e841 2300 	strex	r3, r2, [r1]
 80095ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80095ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1e5      	bne.n	80095be <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3314      	adds	r3, #20
 80095f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	f043 0301 	orr.w	r3, r3, #1
 8009608:	657b      	str	r3, [r7, #84]	; 0x54
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3314      	adds	r3, #20
 8009610:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009612:	63ba      	str	r2, [r7, #56]	; 0x38
 8009614:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e5      	bne.n	80095f2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3314      	adds	r3, #20
 800962c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	e853 3f00 	ldrex	r3, [r3]
 8009634:	617b      	str	r3, [r7, #20]
   return(result);
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800963c:	653b      	str	r3, [r7, #80]	; 0x50
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	3314      	adds	r3, #20
 8009644:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009646:	627a      	str	r2, [r7, #36]	; 0x24
 8009648:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964a:	6a39      	ldr	r1, [r7, #32]
 800964c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800964e:	e841 2300 	strex	r3, r2, [r1]
 8009652:	61fb      	str	r3, [r7, #28]
   return(result);
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1e5      	bne.n	8009626 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3760      	adds	r7, #96	; 0x60
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	08009343 	.word	0x08009343
 8009668:	08009469 	.word	0x08009469
 800966c:	0800949f 	.word	0x0800949f

08009670 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009670:	b480      	push	{r7}
 8009672:	b089      	sub	sp, #36	; 0x24
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	330c      	adds	r3, #12
 800967e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	e853 3f00 	ldrex	r3, [r3]
 8009686:	60bb      	str	r3, [r7, #8]
   return(result);
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800968e:	61fb      	str	r3, [r7, #28]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	330c      	adds	r3, #12
 8009696:	69fa      	ldr	r2, [r7, #28]
 8009698:	61ba      	str	r2, [r7, #24]
 800969a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969c:	6979      	ldr	r1, [r7, #20]
 800969e:	69ba      	ldr	r2, [r7, #24]
 80096a0:	e841 2300 	strex	r3, r2, [r1]
 80096a4:	613b      	str	r3, [r7, #16]
   return(result);
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1e5      	bne.n	8009678 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2220      	movs	r2, #32
 80096b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80096b4:	bf00      	nop
 80096b6:	3724      	adds	r7, #36	; 0x24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b095      	sub	sp, #84	; 0x54
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	330c      	adds	r3, #12
 80096ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d2:	e853 3f00 	ldrex	r3, [r3]
 80096d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	330c      	adds	r3, #12
 80096e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096e8:	643a      	str	r2, [r7, #64]	; 0x40
 80096ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096f0:	e841 2300 	strex	r3, r2, [r1]
 80096f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d1e5      	bne.n	80096c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	3314      	adds	r3, #20
 8009702:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009704:	6a3b      	ldr	r3, [r7, #32]
 8009706:	e853 3f00 	ldrex	r3, [r3]
 800970a:	61fb      	str	r3, [r7, #28]
   return(result);
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	f023 0301 	bic.w	r3, r3, #1
 8009712:	64bb      	str	r3, [r7, #72]	; 0x48
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	3314      	adds	r3, #20
 800971a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800971c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800971e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009724:	e841 2300 	strex	r3, r2, [r1]
 8009728:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e5      	bne.n	80096fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009734:	2b01      	cmp	r3, #1
 8009736:	d119      	bne.n	800976c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	330c      	adds	r3, #12
 800973e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	e853 3f00 	ldrex	r3, [r3]
 8009746:	60bb      	str	r3, [r7, #8]
   return(result);
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	f023 0310 	bic.w	r3, r3, #16
 800974e:	647b      	str	r3, [r7, #68]	; 0x44
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	330c      	adds	r3, #12
 8009756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009758:	61ba      	str	r2, [r7, #24]
 800975a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975c:	6979      	ldr	r1, [r7, #20]
 800975e:	69ba      	ldr	r2, [r7, #24]
 8009760:	e841 2300 	strex	r3, r2, [r1]
 8009764:	613b      	str	r3, [r7, #16]
   return(result);
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1e5      	bne.n	8009738 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2220      	movs	r2, #32
 8009770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	631a      	str	r2, [r3, #48]	; 0x30
}
 800977a:	bf00      	nop
 800977c:	3754      	adds	r7, #84	; 0x54
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b084      	sub	sp, #16
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009792:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f7ff fd69 	bl	8009278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097a6:	bf00      	nop
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b085      	sub	sp, #20
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b21      	cmp	r3, #33	; 0x21
 80097c0:	d13e      	bne.n	8009840 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ca:	d114      	bne.n	80097f6 <UART_Transmit_IT+0x48>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d110      	bne.n	80097f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	881b      	ldrh	r3, [r3, #0]
 80097de:	461a      	mov	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a1b      	ldr	r3, [r3, #32]
 80097ee:	1c9a      	adds	r2, r3, #2
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	621a      	str	r2, [r3, #32]
 80097f4:	e008      	b.n	8009808 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a1b      	ldr	r3, [r3, #32]
 80097fa:	1c59      	adds	r1, r3, #1
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	6211      	str	r1, [r2, #32]
 8009800:	781a      	ldrb	r2, [r3, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800980c:	b29b      	uxth	r3, r3
 800980e:	3b01      	subs	r3, #1
 8009810:	b29b      	uxth	r3, r3
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	4619      	mov	r1, r3
 8009816:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10f      	bne.n	800983c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800982a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68da      	ldr	r2, [r3, #12]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800983a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	e000      	b.n	8009842 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009840:	2302      	movs	r3, #2
  }
}
 8009842:	4618      	mov	r0, r3
 8009844:	3714      	adds	r7, #20
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b082      	sub	sp, #8
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68da      	ldr	r2, [r3, #12]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009864:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2220      	movs	r2, #32
 800986a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7ff fcda 	bl	8009228 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b08c      	sub	sp, #48	; 0x30
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800988c:	b2db      	uxtb	r3, r3
 800988e:	2b22      	cmp	r3, #34	; 0x22
 8009890:	f040 80ab 	bne.w	80099ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800989c:	d117      	bne.n	80098ce <UART_Receive_IT+0x50>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d113      	bne.n	80098ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80098a6:	2300      	movs	r3, #0
 80098a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098bc:	b29a      	uxth	r2, r3
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c6:	1c9a      	adds	r2, r3, #2
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	629a      	str	r2, [r3, #40]	; 0x28
 80098cc:	e026      	b.n	800991c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80098d4:	2300      	movs	r3, #0
 80098d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098e0:	d007      	beq.n	80098f2 <UART_Receive_IT+0x74>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10a      	bne.n	8009900 <UART_Receive_IT+0x82>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d106      	bne.n	8009900 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fc:	701a      	strb	r2, [r3, #0]
 80098fe:	e008      	b.n	8009912 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	b2db      	uxtb	r3, r3
 8009908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800990c:	b2da      	uxtb	r2, r3
 800990e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009910:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009916:	1c5a      	adds	r2, r3, #1
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009920:	b29b      	uxth	r3, r3
 8009922:	3b01      	subs	r3, #1
 8009924:	b29b      	uxth	r3, r3
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	4619      	mov	r1, r3
 800992a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800992c:	2b00      	cmp	r3, #0
 800992e:	d15a      	bne.n	80099e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68da      	ldr	r2, [r3, #12]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f022 0220 	bic.w	r2, r2, #32
 800993e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68da      	ldr	r2, [r3, #12]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800994e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	695a      	ldr	r2, [r3, #20]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f022 0201 	bic.w	r2, r2, #1
 800995e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2220      	movs	r2, #32
 8009964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800996c:	2b01      	cmp	r3, #1
 800996e:	d135      	bne.n	80099dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	330c      	adds	r3, #12
 800997c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	e853 3f00 	ldrex	r3, [r3]
 8009984:	613b      	str	r3, [r7, #16]
   return(result);
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f023 0310 	bic.w	r3, r3, #16
 800998c:	627b      	str	r3, [r7, #36]	; 0x24
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	330c      	adds	r3, #12
 8009994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009996:	623a      	str	r2, [r7, #32]
 8009998:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999a:	69f9      	ldr	r1, [r7, #28]
 800999c:	6a3a      	ldr	r2, [r7, #32]
 800999e:	e841 2300 	strex	r3, r2, [r1]
 80099a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1e5      	bne.n	8009976 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 0310 	and.w	r3, r3, #16
 80099b4:	2b10      	cmp	r3, #16
 80099b6:	d10a      	bne.n	80099ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80099b8:	2300      	movs	r3, #0
 80099ba:	60fb      	str	r3, [r7, #12]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	60fb      	str	r3, [r7, #12]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	60fb      	str	r3, [r7, #12]
 80099cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7f8 ff51 	bl	800287c <HAL_UARTEx_RxEventCallback>
 80099da:	e002      	b.n	80099e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f7ff fc37 	bl	8009250 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	e002      	b.n	80099ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	e000      	b.n	80099ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80099ea:	2302      	movs	r3, #2
  }
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3730      	adds	r7, #48	; 0x30
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099f8:	b0c0      	sub	sp, #256	; 0x100
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a10:	68d9      	ldr	r1, [r3, #12]
 8009a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	ea40 0301 	orr.w	r3, r0, r1
 8009a1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a22:	689a      	ldr	r2, [r3, #8]
 8009a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	431a      	orrs	r2, r3
 8009a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a38:	69db      	ldr	r3, [r3, #28]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009a4c:	f021 010c 	bic.w	r1, r1, #12
 8009a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a5a:	430b      	orrs	r3, r1
 8009a5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a6e:	6999      	ldr	r1, [r3, #24]
 8009a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	ea40 0301 	orr.w	r3, r0, r1
 8009a7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	4b8f      	ldr	r3, [pc, #572]	; (8009cc0 <UART_SetConfig+0x2cc>)
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d005      	beq.n	8009a94 <UART_SetConfig+0xa0>
 8009a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	4b8d      	ldr	r3, [pc, #564]	; (8009cc4 <UART_SetConfig+0x2d0>)
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d104      	bne.n	8009a9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a94:	f7fd fe86 	bl	80077a4 <HAL_RCC_GetPCLK2Freq>
 8009a98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009a9c:	e003      	b.n	8009aa6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a9e:	f7fd fe6d 	bl	800777c <HAL_RCC_GetPCLK1Freq>
 8009aa2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aaa:	69db      	ldr	r3, [r3, #28]
 8009aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ab0:	f040 810c 	bne.w	8009ccc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009abe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009ac2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009ac6:	4622      	mov	r2, r4
 8009ac8:	462b      	mov	r3, r5
 8009aca:	1891      	adds	r1, r2, r2
 8009acc:	65b9      	str	r1, [r7, #88]	; 0x58
 8009ace:	415b      	adcs	r3, r3
 8009ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ad2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	eb12 0801 	adds.w	r8, r2, r1
 8009adc:	4629      	mov	r1, r5
 8009ade:	eb43 0901 	adc.w	r9, r3, r1
 8009ae2:	f04f 0200 	mov.w	r2, #0
 8009ae6:	f04f 0300 	mov.w	r3, #0
 8009aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009af6:	4690      	mov	r8, r2
 8009af8:	4699      	mov	r9, r3
 8009afa:	4623      	mov	r3, r4
 8009afc:	eb18 0303 	adds.w	r3, r8, r3
 8009b00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b04:	462b      	mov	r3, r5
 8009b06:	eb49 0303 	adc.w	r3, r9, r3
 8009b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009b1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009b1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009b22:	460b      	mov	r3, r1
 8009b24:	18db      	adds	r3, r3, r3
 8009b26:	653b      	str	r3, [r7, #80]	; 0x50
 8009b28:	4613      	mov	r3, r2
 8009b2a:	eb42 0303 	adc.w	r3, r2, r3
 8009b2e:	657b      	str	r3, [r7, #84]	; 0x54
 8009b30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009b34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009b38:	f7f6 ff8c 	bl	8000a54 <__aeabi_uldivmod>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4b61      	ldr	r3, [pc, #388]	; (8009cc8 <UART_SetConfig+0x2d4>)
 8009b42:	fba3 2302 	umull	r2, r3, r3, r2
 8009b46:	095b      	lsrs	r3, r3, #5
 8009b48:	011c      	lsls	r4, r3, #4
 8009b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009b58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009b5c:	4642      	mov	r2, r8
 8009b5e:	464b      	mov	r3, r9
 8009b60:	1891      	adds	r1, r2, r2
 8009b62:	64b9      	str	r1, [r7, #72]	; 0x48
 8009b64:	415b      	adcs	r3, r3
 8009b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009b6c:	4641      	mov	r1, r8
 8009b6e:	eb12 0a01 	adds.w	sl, r2, r1
 8009b72:	4649      	mov	r1, r9
 8009b74:	eb43 0b01 	adc.w	fp, r3, r1
 8009b78:	f04f 0200 	mov.w	r2, #0
 8009b7c:	f04f 0300 	mov.w	r3, #0
 8009b80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009b88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b8c:	4692      	mov	sl, r2
 8009b8e:	469b      	mov	fp, r3
 8009b90:	4643      	mov	r3, r8
 8009b92:	eb1a 0303 	adds.w	r3, sl, r3
 8009b96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b9a:	464b      	mov	r3, r9
 8009b9c:	eb4b 0303 	adc.w	r3, fp, r3
 8009ba0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009bb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009bb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	18db      	adds	r3, r3, r3
 8009bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	eb42 0303 	adc.w	r3, r2, r3
 8009bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8009bc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009bca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009bce:	f7f6 ff41 	bl	8000a54 <__aeabi_uldivmod>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	4611      	mov	r1, r2
 8009bd8:	4b3b      	ldr	r3, [pc, #236]	; (8009cc8 <UART_SetConfig+0x2d4>)
 8009bda:	fba3 2301 	umull	r2, r3, r3, r1
 8009bde:	095b      	lsrs	r3, r3, #5
 8009be0:	2264      	movs	r2, #100	; 0x64
 8009be2:	fb02 f303 	mul.w	r3, r2, r3
 8009be6:	1acb      	subs	r3, r1, r3
 8009be8:	00db      	lsls	r3, r3, #3
 8009bea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009bee:	4b36      	ldr	r3, [pc, #216]	; (8009cc8 <UART_SetConfig+0x2d4>)
 8009bf0:	fba3 2302 	umull	r2, r3, r3, r2
 8009bf4:	095b      	lsrs	r3, r3, #5
 8009bf6:	005b      	lsls	r3, r3, #1
 8009bf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009bfc:	441c      	add	r4, r3
 8009bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c02:	2200      	movs	r2, #0
 8009c04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009c0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009c10:	4642      	mov	r2, r8
 8009c12:	464b      	mov	r3, r9
 8009c14:	1891      	adds	r1, r2, r2
 8009c16:	63b9      	str	r1, [r7, #56]	; 0x38
 8009c18:	415b      	adcs	r3, r3
 8009c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009c20:	4641      	mov	r1, r8
 8009c22:	1851      	adds	r1, r2, r1
 8009c24:	6339      	str	r1, [r7, #48]	; 0x30
 8009c26:	4649      	mov	r1, r9
 8009c28:	414b      	adcs	r3, r1
 8009c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c2c:	f04f 0200 	mov.w	r2, #0
 8009c30:	f04f 0300 	mov.w	r3, #0
 8009c34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009c38:	4659      	mov	r1, fp
 8009c3a:	00cb      	lsls	r3, r1, #3
 8009c3c:	4651      	mov	r1, sl
 8009c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c42:	4651      	mov	r1, sl
 8009c44:	00ca      	lsls	r2, r1, #3
 8009c46:	4610      	mov	r0, r2
 8009c48:	4619      	mov	r1, r3
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	4642      	mov	r2, r8
 8009c4e:	189b      	adds	r3, r3, r2
 8009c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c54:	464b      	mov	r3, r9
 8009c56:	460a      	mov	r2, r1
 8009c58:	eb42 0303 	adc.w	r3, r2, r3
 8009c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009c6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009c70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009c74:	460b      	mov	r3, r1
 8009c76:	18db      	adds	r3, r3, r3
 8009c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	eb42 0303 	adc.w	r3, r2, r3
 8009c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009c8a:	f7f6 fee3 	bl	8000a54 <__aeabi_uldivmod>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	460b      	mov	r3, r1
 8009c92:	4b0d      	ldr	r3, [pc, #52]	; (8009cc8 <UART_SetConfig+0x2d4>)
 8009c94:	fba3 1302 	umull	r1, r3, r3, r2
 8009c98:	095b      	lsrs	r3, r3, #5
 8009c9a:	2164      	movs	r1, #100	; 0x64
 8009c9c:	fb01 f303 	mul.w	r3, r1, r3
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	00db      	lsls	r3, r3, #3
 8009ca4:	3332      	adds	r3, #50	; 0x32
 8009ca6:	4a08      	ldr	r2, [pc, #32]	; (8009cc8 <UART_SetConfig+0x2d4>)
 8009ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8009cac:	095b      	lsrs	r3, r3, #5
 8009cae:	f003 0207 	and.w	r2, r3, #7
 8009cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4422      	add	r2, r4
 8009cba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009cbc:	e105      	b.n	8009eca <UART_SetConfig+0x4d6>
 8009cbe:	bf00      	nop
 8009cc0:	40011000 	.word	0x40011000
 8009cc4:	40011400 	.word	0x40011400
 8009cc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009cd6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009cda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009cde:	4642      	mov	r2, r8
 8009ce0:	464b      	mov	r3, r9
 8009ce2:	1891      	adds	r1, r2, r2
 8009ce4:	6239      	str	r1, [r7, #32]
 8009ce6:	415b      	adcs	r3, r3
 8009ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8009cea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009cee:	4641      	mov	r1, r8
 8009cf0:	1854      	adds	r4, r2, r1
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	eb43 0501 	adc.w	r5, r3, r1
 8009cf8:	f04f 0200 	mov.w	r2, #0
 8009cfc:	f04f 0300 	mov.w	r3, #0
 8009d00:	00eb      	lsls	r3, r5, #3
 8009d02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d06:	00e2      	lsls	r2, r4, #3
 8009d08:	4614      	mov	r4, r2
 8009d0a:	461d      	mov	r5, r3
 8009d0c:	4643      	mov	r3, r8
 8009d0e:	18e3      	adds	r3, r4, r3
 8009d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d14:	464b      	mov	r3, r9
 8009d16:	eb45 0303 	adc.w	r3, r5, r3
 8009d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009d2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009d2e:	f04f 0200 	mov.w	r2, #0
 8009d32:	f04f 0300 	mov.w	r3, #0
 8009d36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009d3a:	4629      	mov	r1, r5
 8009d3c:	008b      	lsls	r3, r1, #2
 8009d3e:	4621      	mov	r1, r4
 8009d40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d44:	4621      	mov	r1, r4
 8009d46:	008a      	lsls	r2, r1, #2
 8009d48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009d4c:	f7f6 fe82 	bl	8000a54 <__aeabi_uldivmod>
 8009d50:	4602      	mov	r2, r0
 8009d52:	460b      	mov	r3, r1
 8009d54:	4b60      	ldr	r3, [pc, #384]	; (8009ed8 <UART_SetConfig+0x4e4>)
 8009d56:	fba3 2302 	umull	r2, r3, r3, r2
 8009d5a:	095b      	lsrs	r3, r3, #5
 8009d5c:	011c      	lsls	r4, r3, #4
 8009d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d62:	2200      	movs	r2, #0
 8009d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009d68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009d6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009d70:	4642      	mov	r2, r8
 8009d72:	464b      	mov	r3, r9
 8009d74:	1891      	adds	r1, r2, r2
 8009d76:	61b9      	str	r1, [r7, #24]
 8009d78:	415b      	adcs	r3, r3
 8009d7a:	61fb      	str	r3, [r7, #28]
 8009d7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d80:	4641      	mov	r1, r8
 8009d82:	1851      	adds	r1, r2, r1
 8009d84:	6139      	str	r1, [r7, #16]
 8009d86:	4649      	mov	r1, r9
 8009d88:	414b      	adcs	r3, r1
 8009d8a:	617b      	str	r3, [r7, #20]
 8009d8c:	f04f 0200 	mov.w	r2, #0
 8009d90:	f04f 0300 	mov.w	r3, #0
 8009d94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d98:	4659      	mov	r1, fp
 8009d9a:	00cb      	lsls	r3, r1, #3
 8009d9c:	4651      	mov	r1, sl
 8009d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009da2:	4651      	mov	r1, sl
 8009da4:	00ca      	lsls	r2, r1, #3
 8009da6:	4610      	mov	r0, r2
 8009da8:	4619      	mov	r1, r3
 8009daa:	4603      	mov	r3, r0
 8009dac:	4642      	mov	r2, r8
 8009dae:	189b      	adds	r3, r3, r2
 8009db0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009db4:	464b      	mov	r3, r9
 8009db6:	460a      	mov	r2, r1
 8009db8:	eb42 0303 	adc.w	r3, r2, r3
 8009dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8009dca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009dcc:	f04f 0200 	mov.w	r2, #0
 8009dd0:	f04f 0300 	mov.w	r3, #0
 8009dd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009dd8:	4649      	mov	r1, r9
 8009dda:	008b      	lsls	r3, r1, #2
 8009ddc:	4641      	mov	r1, r8
 8009dde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009de2:	4641      	mov	r1, r8
 8009de4:	008a      	lsls	r2, r1, #2
 8009de6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009dea:	f7f6 fe33 	bl	8000a54 <__aeabi_uldivmod>
 8009dee:	4602      	mov	r2, r0
 8009df0:	460b      	mov	r3, r1
 8009df2:	4b39      	ldr	r3, [pc, #228]	; (8009ed8 <UART_SetConfig+0x4e4>)
 8009df4:	fba3 1302 	umull	r1, r3, r3, r2
 8009df8:	095b      	lsrs	r3, r3, #5
 8009dfa:	2164      	movs	r1, #100	; 0x64
 8009dfc:	fb01 f303 	mul.w	r3, r1, r3
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	011b      	lsls	r3, r3, #4
 8009e04:	3332      	adds	r3, #50	; 0x32
 8009e06:	4a34      	ldr	r2, [pc, #208]	; (8009ed8 <UART_SetConfig+0x4e4>)
 8009e08:	fba2 2303 	umull	r2, r3, r2, r3
 8009e0c:	095b      	lsrs	r3, r3, #5
 8009e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e12:	441c      	add	r4, r3
 8009e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e18:	2200      	movs	r2, #0
 8009e1a:	673b      	str	r3, [r7, #112]	; 0x70
 8009e1c:	677a      	str	r2, [r7, #116]	; 0x74
 8009e1e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009e22:	4642      	mov	r2, r8
 8009e24:	464b      	mov	r3, r9
 8009e26:	1891      	adds	r1, r2, r2
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	415b      	adcs	r3, r3
 8009e2c:	60fb      	str	r3, [r7, #12]
 8009e2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e32:	4641      	mov	r1, r8
 8009e34:	1851      	adds	r1, r2, r1
 8009e36:	6039      	str	r1, [r7, #0]
 8009e38:	4649      	mov	r1, r9
 8009e3a:	414b      	adcs	r3, r1
 8009e3c:	607b      	str	r3, [r7, #4]
 8009e3e:	f04f 0200 	mov.w	r2, #0
 8009e42:	f04f 0300 	mov.w	r3, #0
 8009e46:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009e4a:	4659      	mov	r1, fp
 8009e4c:	00cb      	lsls	r3, r1, #3
 8009e4e:	4651      	mov	r1, sl
 8009e50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e54:	4651      	mov	r1, sl
 8009e56:	00ca      	lsls	r2, r1, #3
 8009e58:	4610      	mov	r0, r2
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	4642      	mov	r2, r8
 8009e60:	189b      	adds	r3, r3, r2
 8009e62:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e64:	464b      	mov	r3, r9
 8009e66:	460a      	mov	r2, r1
 8009e68:	eb42 0303 	adc.w	r3, r2, r3
 8009e6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	663b      	str	r3, [r7, #96]	; 0x60
 8009e78:	667a      	str	r2, [r7, #100]	; 0x64
 8009e7a:	f04f 0200 	mov.w	r2, #0
 8009e7e:	f04f 0300 	mov.w	r3, #0
 8009e82:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009e86:	4649      	mov	r1, r9
 8009e88:	008b      	lsls	r3, r1, #2
 8009e8a:	4641      	mov	r1, r8
 8009e8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e90:	4641      	mov	r1, r8
 8009e92:	008a      	lsls	r2, r1, #2
 8009e94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009e98:	f7f6 fddc 	bl	8000a54 <__aeabi_uldivmod>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4b0d      	ldr	r3, [pc, #52]	; (8009ed8 <UART_SetConfig+0x4e4>)
 8009ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8009ea6:	095b      	lsrs	r3, r3, #5
 8009ea8:	2164      	movs	r1, #100	; 0x64
 8009eaa:	fb01 f303 	mul.w	r3, r1, r3
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	011b      	lsls	r3, r3, #4
 8009eb2:	3332      	adds	r3, #50	; 0x32
 8009eb4:	4a08      	ldr	r2, [pc, #32]	; (8009ed8 <UART_SetConfig+0x4e4>)
 8009eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8009eba:	095b      	lsrs	r3, r3, #5
 8009ebc:	f003 020f 	and.w	r2, r3, #15
 8009ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4422      	add	r2, r4
 8009ec8:	609a      	str	r2, [r3, #8]
}
 8009eca:	bf00      	nop
 8009ecc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ed6:	bf00      	nop
 8009ed8:	51eb851f 	.word	0x51eb851f

08009edc <arm_mat_trans_f32>:
 8009edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee0:	8802      	ldrh	r2, [r0, #0]
 8009ee2:	884b      	ldrh	r3, [r1, #2]
 8009ee4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8009ee8:	684f      	ldr	r7, [r1, #4]
 8009eea:	8840      	ldrh	r0, [r0, #2]
 8009eec:	4293      	cmp	r3, r2
 8009eee:	b083      	sub	sp, #12
 8009ef0:	d14c      	bne.n	8009f8c <arm_mat_trans_f32+0xb0>
 8009ef2:	f8b1 e000 	ldrh.w	lr, [r1]
 8009ef6:	4586      	cmp	lr, r0
 8009ef8:	d148      	bne.n	8009f8c <arm_mat_trans_f32+0xb0>
 8009efa:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8009efe:	009c      	lsls	r4, r3, #2
 8009f00:	f00e 0e03 	and.w	lr, lr, #3
 8009f04:	fb08 f904 	mul.w	r9, r8, r4
 8009f08:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8009f0c:	011d      	lsls	r5, r3, #4
 8009f0e:	00db      	lsls	r3, r3, #3
 8009f10:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8009f14:	eb07 0a04 	add.w	sl, r7, r4
 8009f18:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8009f1c:	9201      	str	r2, [sp, #4]
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	463b      	mov	r3, r7
 8009f22:	f1b8 0f00 	cmp.w	r8, #0
 8009f26:	d01d      	beq.n	8009f64 <arm_mat_trans_f32+0x88>
 8009f28:	9900      	ldr	r1, [sp, #0]
 8009f2a:	f10c 0210 	add.w	r2, ip, #16
 8009f2e:	4439      	add	r1, r7
 8009f30:	4640      	mov	r0, r8
 8009f32:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8009f36:	601e      	str	r6, [r3, #0]
 8009f38:	ed52 7a03 	vldr	s15, [r2, #-12]
 8009f3c:	191e      	adds	r6, r3, r4
 8009f3e:	edc6 7a00 	vstr	s15, [r6]
 8009f42:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8009f46:	600e      	str	r6, [r1, #0]
 8009f48:	ed52 7a01 	vldr	s15, [r2, #-4]
 8009f4c:	190e      	adds	r6, r1, r4
 8009f4e:	3801      	subs	r0, #1
 8009f50:	442b      	add	r3, r5
 8009f52:	f102 0210 	add.w	r2, r2, #16
 8009f56:	edc6 7a00 	vstr	s15, [r6]
 8009f5a:	4429      	add	r1, r5
 8009f5c:	d1e9      	bne.n	8009f32 <arm_mat_trans_f32+0x56>
 8009f5e:	44dc      	add	ip, fp
 8009f60:	eb09 0307 	add.w	r3, r9, r7
 8009f64:	f1be 0f00 	cmp.w	lr, #0
 8009f68:	d009      	beq.n	8009f7e <arm_mat_trans_f32+0xa2>
 8009f6a:	4672      	mov	r2, lr
 8009f6c:	4661      	mov	r1, ip
 8009f6e:	f851 0b04 	ldr.w	r0, [r1], #4
 8009f72:	6018      	str	r0, [r3, #0]
 8009f74:	3a01      	subs	r2, #1
 8009f76:	4423      	add	r3, r4
 8009f78:	d1f9      	bne.n	8009f6e <arm_mat_trans_f32+0x92>
 8009f7a:	9b01      	ldr	r3, [sp, #4]
 8009f7c:	449c      	add	ip, r3
 8009f7e:	3704      	adds	r7, #4
 8009f80:	4557      	cmp	r7, sl
 8009f82:	d1cd      	bne.n	8009f20 <arm_mat_trans_f32+0x44>
 8009f84:	2000      	movs	r0, #0
 8009f86:	b003      	add	sp, #12
 8009f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8c:	f06f 0002 	mvn.w	r0, #2
 8009f90:	e7f9      	b.n	8009f86 <arm_mat_trans_f32+0xaa>
 8009f92:	bf00      	nop

08009f94 <arm_mat_sub_f32>:
 8009f94:	b4f0      	push	{r4, r5, r6, r7}
 8009f96:	e9d1 4700 	ldrd	r4, r7, [r1]
 8009f9a:	6803      	ldr	r3, [r0, #0]
 8009f9c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8009fa0:	6856      	ldr	r6, [r2, #4]
 8009fa2:	42a3      	cmp	r3, r4
 8009fa4:	d15d      	bne.n	800a062 <arm_mat_sub_f32+0xce>
 8009fa6:	6812      	ldr	r2, [r2, #0]
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d15a      	bne.n	800a062 <arm_mat_sub_f32+0xce>
 8009fac:	8803      	ldrh	r3, [r0, #0]
 8009fae:	8844      	ldrh	r4, [r0, #2]
 8009fb0:	fb04 f403 	mul.w	r4, r4, r3
 8009fb4:	08a5      	lsrs	r5, r4, #2
 8009fb6:	d032      	beq.n	800a01e <arm_mat_sub_f32+0x8a>
 8009fb8:	f10c 0110 	add.w	r1, ip, #16
 8009fbc:	f107 0210 	add.w	r2, r7, #16
 8009fc0:	f106 0310 	add.w	r3, r6, #16
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	ed12 7a04 	vldr	s14, [r2, #-16]
 8009fca:	ed51 7a04 	vldr	s15, [r1, #-16]
 8009fce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009fd2:	3801      	subs	r0, #1
 8009fd4:	ed43 7a04 	vstr	s15, [r3, #-16]
 8009fd8:	ed12 7a03 	vldr	s14, [r2, #-12]
 8009fdc:	ed51 7a03 	vldr	s15, [r1, #-12]
 8009fe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009fe4:	f101 0110 	add.w	r1, r1, #16
 8009fe8:	ed43 7a03 	vstr	s15, [r3, #-12]
 8009fec:	ed12 7a02 	vldr	s14, [r2, #-8]
 8009ff0:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8009ff4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ff8:	f102 0210 	add.w	r2, r2, #16
 8009ffc:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a000:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800a004:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800a008:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a00c:	f103 0310 	add.w	r3, r3, #16
 800a010:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800a014:	d1d7      	bne.n	8009fc6 <arm_mat_sub_f32+0x32>
 800a016:	012b      	lsls	r3, r5, #4
 800a018:	449c      	add	ip, r3
 800a01a:	441f      	add	r7, r3
 800a01c:	441e      	add	r6, r3
 800a01e:	f014 0403 	ands.w	r4, r4, #3
 800a022:	d01b      	beq.n	800a05c <arm_mat_sub_f32+0xc8>
 800a024:	eddc 7a00 	vldr	s15, [ip]
 800a028:	ed97 7a00 	vldr	s14, [r7]
 800a02c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a030:	3c01      	subs	r4, #1
 800a032:	edc6 7a00 	vstr	s15, [r6]
 800a036:	d011      	beq.n	800a05c <arm_mat_sub_f32+0xc8>
 800a038:	eddc 7a01 	vldr	s15, [ip, #4]
 800a03c:	ed97 7a01 	vldr	s14, [r7, #4]
 800a040:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a044:	2c01      	cmp	r4, #1
 800a046:	edc6 7a01 	vstr	s15, [r6, #4]
 800a04a:	d007      	beq.n	800a05c <arm_mat_sub_f32+0xc8>
 800a04c:	eddc 7a02 	vldr	s15, [ip, #8]
 800a050:	ed97 7a02 	vldr	s14, [r7, #8]
 800a054:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a058:	edc6 7a02 	vstr	s15, [r6, #8]
 800a05c:	2000      	movs	r0, #0
 800a05e:	bcf0      	pop	{r4, r5, r6, r7}
 800a060:	4770      	bx	lr
 800a062:	f06f 0002 	mvn.w	r0, #2
 800a066:	e7fa      	b.n	800a05e <arm_mat_sub_f32+0xca>

0800a068 <arm_mat_mult_f32>:
 800a068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06c:	8845      	ldrh	r5, [r0, #2]
 800a06e:	880b      	ldrh	r3, [r1, #0]
 800a070:	8806      	ldrh	r6, [r0, #0]
 800a072:	6847      	ldr	r7, [r0, #4]
 800a074:	6854      	ldr	r4, [r2, #4]
 800a076:	6848      	ldr	r0, [r1, #4]
 800a078:	b08b      	sub	sp, #44	; 0x2c
 800a07a:	42ab      	cmp	r3, r5
 800a07c:	9109      	str	r1, [sp, #36]	; 0x24
 800a07e:	9604      	str	r6, [sp, #16]
 800a080:	8849      	ldrh	r1, [r1, #2]
 800a082:	f040 808a 	bne.w	800a19a <arm_mat_mult_f32+0x132>
 800a086:	8815      	ldrh	r5, [r2, #0]
 800a088:	42b5      	cmp	r5, r6
 800a08a:	f040 8086 	bne.w	800a19a <arm_mat_mult_f32+0x132>
 800a08e:	8852      	ldrh	r2, [r2, #2]
 800a090:	428a      	cmp	r2, r1
 800a092:	f040 8082 	bne.w	800a19a <arm_mat_mult_f32+0x132>
 800a096:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800a09a:	1d01      	adds	r1, r0, #4
 800a09c:	0116      	lsls	r6, r2, #4
 800a09e:	9108      	str	r1, [sp, #32]
 800a0a0:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800a0a4:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800a0a8:	9101      	str	r1, [sp, #4]
 800a0aa:	fb06 f108 	mul.w	r1, r6, r8
 800a0ae:	0095      	lsls	r5, r2, #2
 800a0b0:	9103      	str	r1, [sp, #12]
 800a0b2:	00d2      	lsls	r2, r2, #3
 800a0b4:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800a0b8:	f003 0903 	and.w	r9, r3, #3
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	f107 0b10 	add.w	fp, r7, #16
 800a0c2:	eb04 0a05 	add.w	sl, r4, r5
 800a0c6:	9107      	str	r1, [sp, #28]
 800a0c8:	9202      	str	r2, [sp, #8]
 800a0ca:	9306      	str	r3, [sp, #24]
 800a0cc:	f1ab 0310 	sub.w	r3, fp, #16
 800a0d0:	9305      	str	r3, [sp, #20]
 800a0d2:	9b07      	ldr	r3, [sp, #28]
 800a0d4:	f8dd e020 	ldr.w	lr, [sp, #32]
 800a0d8:	eb03 0c0a 	add.w	ip, r3, sl
 800a0dc:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a1a4 <arm_mat_mult_f32+0x13c>
 800a0e0:	f1b8 0f00 	cmp.w	r8, #0
 800a0e4:	d053      	beq.n	800a18e <arm_mat_mult_f32+0x126>
 800a0e6:	9b02      	ldr	r3, [sp, #8]
 800a0e8:	4644      	mov	r4, r8
 800a0ea:	18c1      	adds	r1, r0, r3
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	465b      	mov	r3, fp
 800a0f0:	ed92 6a00 	vldr	s12, [r2]
 800a0f4:	ed13 7a04 	vldr	s14, [r3, #-16]
 800a0f8:	ed53 4a03 	vldr	s9, [r3, #-12]
 800a0fc:	ed53 6a02 	vldr	s13, [r3, #-8]
 800a100:	ed91 5a00 	vldr	s10, [r1]
 800a104:	ed53 5a01 	vldr	s11, [r3, #-4]
 800a108:	1957      	adds	r7, r2, r5
 800a10a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a10e:	ed97 6a00 	vldr	s12, [r7]
 800a112:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a116:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a11a:	194f      	adds	r7, r1, r5
 800a11c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a120:	ee26 7a85 	vmul.f32	s14, s13, s10
 800a124:	edd7 7a00 	vldr	s15, [r7]
 800a128:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a12c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a130:	3c01      	subs	r4, #1
 800a132:	4432      	add	r2, r6
 800a134:	4431      	add	r1, r6
 800a136:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a13a:	f103 0310 	add.w	r3, r3, #16
 800a13e:	d1d7      	bne.n	800a0f0 <arm_mat_mult_f32+0x88>
 800a140:	9b03      	ldr	r3, [sp, #12]
 800a142:	9a01      	ldr	r2, [sp, #4]
 800a144:	4418      	add	r0, r3
 800a146:	f1b9 0f00 	cmp.w	r9, #0
 800a14a:	d00b      	beq.n	800a164 <arm_mat_mult_f32+0xfc>
 800a14c:	464b      	mov	r3, r9
 800a14e:	edd0 6a00 	vldr	s13, [r0]
 800a152:	ecb2 7a01 	vldmia	r2!, {s14}
 800a156:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a15a:	3b01      	subs	r3, #1
 800a15c:	4428      	add	r0, r5
 800a15e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a162:	d1f4      	bne.n	800a14e <arm_mat_mult_f32+0xe6>
 800a164:	ecec 7a01 	vstmia	ip!, {s15}
 800a168:	45d4      	cmp	ip, sl
 800a16a:	4670      	mov	r0, lr
 800a16c:	f10e 0e04 	add.w	lr, lr, #4
 800a170:	d1b4      	bne.n	800a0dc <arm_mat_mult_f32+0x74>
 800a172:	9a01      	ldr	r2, [sp, #4]
 800a174:	9b06      	ldr	r3, [sp, #24]
 800a176:	4611      	mov	r1, r2
 800a178:	4419      	add	r1, r3
 800a17a:	449b      	add	fp, r3
 800a17c:	9b04      	ldr	r3, [sp, #16]
 800a17e:	9101      	str	r1, [sp, #4]
 800a180:	3b01      	subs	r3, #1
 800a182:	44aa      	add	sl, r5
 800a184:	9304      	str	r3, [sp, #16]
 800a186:	d004      	beq.n	800a192 <arm_mat_mult_f32+0x12a>
 800a188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a18a:	6858      	ldr	r0, [r3, #4]
 800a18c:	e79e      	b.n	800a0cc <arm_mat_mult_f32+0x64>
 800a18e:	9a05      	ldr	r2, [sp, #20]
 800a190:	e7d9      	b.n	800a146 <arm_mat_mult_f32+0xde>
 800a192:	4618      	mov	r0, r3
 800a194:	b00b      	add	sp, #44	; 0x2c
 800a196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a19a:	f06f 0002 	mvn.w	r0, #2
 800a19e:	b00b      	add	sp, #44	; 0x2c
 800a1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a4:	00000000 	.word	0x00000000

0800a1a8 <arm_mat_inverse_f32>:
 800a1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ac:	8843      	ldrh	r3, [r0, #2]
 800a1ae:	8804      	ldrh	r4, [r0, #0]
 800a1b0:	684e      	ldr	r6, [r1, #4]
 800a1b2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800a1b6:	b087      	sub	sp, #28
 800a1b8:	429c      	cmp	r4, r3
 800a1ba:	9301      	str	r3, [sp, #4]
 800a1bc:	9603      	str	r6, [sp, #12]
 800a1be:	f040 80ea 	bne.w	800a396 <arm_mat_inverse_f32+0x1ee>
 800a1c2:	880a      	ldrh	r2, [r1, #0]
 800a1c4:	884b      	ldrh	r3, [r1, #2]
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	f040 80e5 	bne.w	800a396 <arm_mat_inverse_f32+0x1ee>
 800a1cc:	429c      	cmp	r4, r3
 800a1ce:	f040 80e2 	bne.w	800a396 <arm_mat_inverse_f32+0x1ee>
 800a1d2:	9005      	str	r0, [sp, #20]
 800a1d4:	b30c      	cbz	r4, 800a21a <arm_mat_inverse_f32+0x72>
 800a1d6:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800a1da:	1e67      	subs	r7, r4, #1
 800a1dc:	f846 bb04 	str.w	fp, [r6], #4
 800a1e0:	d01b      	beq.n	800a21a <arm_mat_inverse_f32+0x72>
 800a1e2:	f04f 0801 	mov.w	r8, #1
 800a1e6:	00ba      	lsls	r2, r7, #2
 800a1e8:	eb06 0a02 	add.w	sl, r6, r2
 800a1ec:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	f000 f97e 	bl	800a4f4 <memset>
 800a1f8:	eb0a 0605 	add.w	r6, sl, r5
 800a1fc:	462a      	mov	r2, r5
 800a1fe:	2100      	movs	r1, #0
 800a200:	4650      	mov	r0, sl
 800a202:	f1b8 0f00 	cmp.w	r8, #0
 800a206:	f000 80cb 	beq.w	800a3a0 <arm_mat_inverse_f32+0x1f8>
 800a20a:	f000 f973 	bl	800a4f4 <memset>
 800a20e:	3f01      	subs	r7, #1
 800a210:	f108 0801 	add.w	r8, r8, #1
 800a214:	f846 bb04 	str.w	fp, [r6], #4
 800a218:	d1e5      	bne.n	800a1e6 <arm_mat_inverse_f32+0x3e>
 800a21a:	9b01      	ldr	r3, [sp, #4]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f000 80b5 	beq.w	800a38c <arm_mat_inverse_f32+0x1e4>
 800a222:	009d      	lsls	r5, r3, #2
 800a224:	eb09 0205 	add.w	r2, r9, r5
 800a228:	46cc      	mov	ip, r9
 800a22a:	9202      	str	r2, [sp, #8]
 800a22c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a230:	1d2a      	adds	r2, r5, #4
 800a232:	9204      	str	r2, [sp, #16]
 800a234:	462f      	mov	r7, r5
 800a236:	469e      	mov	lr, r3
 800a238:	2600      	movs	r6, #0
 800a23a:	9b02      	ldr	r3, [sp, #8]
 800a23c:	eddc 6a00 	vldr	s13, [ip]
 800a240:	42b4      	cmp	r4, r6
 800a242:	eba3 0b07 	sub.w	fp, r3, r7
 800a246:	f000 80a1 	beq.w	800a38c <arm_mat_inverse_f32+0x1e4>
 800a24a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800a3b0 <arm_mat_inverse_f32+0x208>
 800a24e:	4632      	mov	r2, r6
 800a250:	4663      	mov	r3, ip
 800a252:	e00b      	b.n	800a26c <arm_mat_inverse_f32+0xc4>
 800a254:	eef4 7a47 	vcmp.f32	s15, s14
 800a258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a25c:	f102 0201 	add.w	r2, r2, #1
 800a260:	bfc8      	it	gt
 800a262:	eeb0 7a67 	vmovgt.f32	s14, s15
 800a266:	42a2      	cmp	r2, r4
 800a268:	442b      	add	r3, r5
 800a26a:	d014      	beq.n	800a296 <arm_mat_inverse_f32+0xee>
 800a26c:	edd3 7a00 	vldr	s15, [r3]
 800a270:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a278:	eeb1 6a67 	vneg.f32	s12, s15
 800a27c:	dcea      	bgt.n	800a254 <arm_mat_inverse_f32+0xac>
 800a27e:	eeb4 6a47 	vcmp.f32	s12, s14
 800a282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a286:	f102 0201 	add.w	r2, r2, #1
 800a28a:	bfc8      	it	gt
 800a28c:	eeb0 7a46 	vmovgt.f32	s14, s12
 800a290:	42a2      	cmp	r2, r4
 800a292:	442b      	add	r3, r5
 800a294:	d1ea      	bne.n	800a26c <arm_mat_inverse_f32+0xc4>
 800a296:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a29e:	d075      	beq.n	800a38c <arm_mat_inverse_f32+0x1e4>
 800a2a0:	eef5 6a40 	vcmp.f32	s13, #0.0
 800a2a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2a8:	d070      	beq.n	800a38c <arm_mat_inverse_f32+0x1e4>
 800a2aa:	4672      	mov	r2, lr
 800a2ac:	4663      	mov	r3, ip
 800a2ae:	ed93 7a00 	vldr	s14, [r3]
 800a2b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a2b6:	3a01      	subs	r2, #1
 800a2b8:	ece3 7a01 	vstmia	r3!, {s15}
 800a2bc:	d1f7      	bne.n	800a2ae <arm_mat_inverse_f32+0x106>
 800a2be:	9901      	ldr	r1, [sp, #4]
 800a2c0:	464b      	mov	r3, r9
 800a2c2:	ed93 7a00 	vldr	s14, [r3]
 800a2c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a2ca:	3901      	subs	r1, #1
 800a2cc:	ece3 7a01 	vstmia	r3!, {s15}
 800a2d0:	d1f7      	bne.n	800a2c2 <arm_mat_inverse_f32+0x11a>
 800a2d2:	9803      	ldr	r0, [sp, #12]
 800a2d4:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800a2d8:	42b1      	cmp	r1, r6
 800a2da:	d039      	beq.n	800a350 <arm_mat_inverse_f32+0x1a8>
 800a2dc:	eddb 6a00 	vldr	s13, [fp]
 800a2e0:	465a      	mov	r2, fp
 800a2e2:	4673      	mov	r3, lr
 800a2e4:	46e2      	mov	sl, ip
 800a2e6:	ecba 7a01 	vldmia	sl!, {s14}
 800a2ea:	edd2 7a00 	vldr	s15, [r2]
 800a2ee:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a2f8:	ece2 7a01 	vstmia	r2!, {s15}
 800a2fc:	d1f3      	bne.n	800a2e6 <arm_mat_inverse_f32+0x13e>
 800a2fe:	9b01      	ldr	r3, [sp, #4]
 800a300:	44bb      	add	fp, r7
 800a302:	4602      	mov	r2, r0
 800a304:	46ca      	mov	sl, r9
 800a306:	ecba 7a01 	vldmia	sl!, {s14}
 800a30a:	edd2 7a00 	vldr	s15, [r2]
 800a30e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a312:	3b01      	subs	r3, #1
 800a314:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a318:	ece2 7a01 	vstmia	r2!, {s15}
 800a31c:	d1f3      	bne.n	800a306 <arm_mat_inverse_f32+0x15e>
 800a31e:	4428      	add	r0, r5
 800a320:	3101      	adds	r1, #1
 800a322:	428c      	cmp	r4, r1
 800a324:	44c3      	add	fp, r8
 800a326:	d1d7      	bne.n	800a2d8 <arm_mat_inverse_f32+0x130>
 800a328:	9b04      	ldr	r3, [sp, #16]
 800a32a:	f1be 0e01 	subs.w	lr, lr, #1
 800a32e:	f106 0601 	add.w	r6, r6, #1
 800a332:	449c      	add	ip, r3
 800a334:	f1a7 0704 	sub.w	r7, r7, #4
 800a338:	44a9      	add	r9, r5
 800a33a:	f47f af7e 	bne.w	800a23a <arm_mat_inverse_f32+0x92>
 800a33e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800a342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a346:	d006      	beq.n	800a356 <arm_mat_inverse_f32+0x1ae>
 800a348:	2000      	movs	r0, #0
 800a34a:	b007      	add	sp, #28
 800a34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a350:	44bb      	add	fp, r7
 800a352:	4428      	add	r0, r5
 800a354:	e7e4      	b.n	800a320 <arm_mat_inverse_f32+0x178>
 800a356:	9b05      	ldr	r3, [sp, #20]
 800a358:	9a01      	ldr	r2, [sp, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	edd3 7a00 	vldr	s15, [r3]
 800a360:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a364:	fb02 f204 	mul.w	r2, r2, r4
 800a368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a36c:	4614      	mov	r4, r2
 800a36e:	bf08      	it	eq
 800a370:	3304      	addeq	r3, #4
 800a372:	d007      	beq.n	800a384 <arm_mat_inverse_f32+0x1dc>
 800a374:	e7e8      	b.n	800a348 <arm_mat_inverse_f32+0x1a0>
 800a376:	ecf3 7a01 	vldmia	r3!, {s15}
 800a37a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a382:	d1e1      	bne.n	800a348 <arm_mat_inverse_f32+0x1a0>
 800a384:	f10e 0e01 	add.w	lr, lr, #1
 800a388:	4574      	cmp	r4, lr
 800a38a:	d1f4      	bne.n	800a376 <arm_mat_inverse_f32+0x1ce>
 800a38c:	f06f 0004 	mvn.w	r0, #4
 800a390:	b007      	add	sp, #28
 800a392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a396:	f06f 0002 	mvn.w	r0, #2
 800a39a:	b007      	add	sp, #28
 800a39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a0:	4656      	mov	r6, sl
 800a3a2:	3f01      	subs	r7, #1
 800a3a4:	f846 bb04 	str.w	fp, [r6], #4
 800a3a8:	f47f af1b 	bne.w	800a1e2 <arm_mat_inverse_f32+0x3a>
 800a3ac:	e735      	b.n	800a21a <arm_mat_inverse_f32+0x72>
 800a3ae:	bf00      	nop
 800a3b0:	00000000 	.word	0x00000000

0800a3b4 <arm_mat_init_f32>:
 800a3b4:	8001      	strh	r1, [r0, #0]
 800a3b6:	8042      	strh	r2, [r0, #2]
 800a3b8:	6043      	str	r3, [r0, #4]
 800a3ba:	4770      	bx	lr

0800a3bc <arm_mat_add_f32>:
 800a3bc:	b4f0      	push	{r4, r5, r6, r7}
 800a3be:	e9d1 4700 	ldrd	r4, r7, [r1]
 800a3c2:	6803      	ldr	r3, [r0, #0]
 800a3c4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800a3c8:	6856      	ldr	r6, [r2, #4]
 800a3ca:	42a3      	cmp	r3, r4
 800a3cc:	d15d      	bne.n	800a48a <arm_mat_add_f32+0xce>
 800a3ce:	6812      	ldr	r2, [r2, #0]
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d15a      	bne.n	800a48a <arm_mat_add_f32+0xce>
 800a3d4:	8803      	ldrh	r3, [r0, #0]
 800a3d6:	8844      	ldrh	r4, [r0, #2]
 800a3d8:	fb04 f403 	mul.w	r4, r4, r3
 800a3dc:	08a5      	lsrs	r5, r4, #2
 800a3de:	d032      	beq.n	800a446 <arm_mat_add_f32+0x8a>
 800a3e0:	f10c 0110 	add.w	r1, ip, #16
 800a3e4:	f107 0210 	add.w	r2, r7, #16
 800a3e8:	f106 0310 	add.w	r3, r6, #16
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	ed12 7a04 	vldr	s14, [r2, #-16]
 800a3f2:	ed51 7a04 	vldr	s15, [r1, #-16]
 800a3f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3fa:	3801      	subs	r0, #1
 800a3fc:	ed43 7a04 	vstr	s15, [r3, #-16]
 800a400:	ed12 7a03 	vldr	s14, [r2, #-12]
 800a404:	ed51 7a03 	vldr	s15, [r1, #-12]
 800a408:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a40c:	f101 0110 	add.w	r1, r1, #16
 800a410:	ed43 7a03 	vstr	s15, [r3, #-12]
 800a414:	ed12 7a02 	vldr	s14, [r2, #-8]
 800a418:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800a41c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a420:	f102 0210 	add.w	r2, r2, #16
 800a424:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a428:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800a42c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800a430:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a434:	f103 0310 	add.w	r3, r3, #16
 800a438:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800a43c:	d1d7      	bne.n	800a3ee <arm_mat_add_f32+0x32>
 800a43e:	012b      	lsls	r3, r5, #4
 800a440:	449c      	add	ip, r3
 800a442:	441f      	add	r7, r3
 800a444:	441e      	add	r6, r3
 800a446:	f014 0403 	ands.w	r4, r4, #3
 800a44a:	d01b      	beq.n	800a484 <arm_mat_add_f32+0xc8>
 800a44c:	edd7 7a00 	vldr	s15, [r7]
 800a450:	ed9c 7a00 	vldr	s14, [ip]
 800a454:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a458:	3c01      	subs	r4, #1
 800a45a:	edc6 7a00 	vstr	s15, [r6]
 800a45e:	d011      	beq.n	800a484 <arm_mat_add_f32+0xc8>
 800a460:	eddc 7a01 	vldr	s15, [ip, #4]
 800a464:	ed97 7a01 	vldr	s14, [r7, #4]
 800a468:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a46c:	2c01      	cmp	r4, #1
 800a46e:	edc6 7a01 	vstr	s15, [r6, #4]
 800a472:	d007      	beq.n	800a484 <arm_mat_add_f32+0xc8>
 800a474:	eddc 7a02 	vldr	s15, [ip, #8]
 800a478:	ed97 7a02 	vldr	s14, [r7, #8]
 800a47c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a480:	edc6 7a02 	vstr	s15, [r6, #8]
 800a484:	2000      	movs	r0, #0
 800a486:	bcf0      	pop	{r4, r5, r6, r7}
 800a488:	4770      	bx	lr
 800a48a:	f06f 0002 	mvn.w	r0, #2
 800a48e:	e7fa      	b.n	800a486 <arm_mat_add_f32+0xca>

0800a490 <__libc_init_array>:
 800a490:	b570      	push	{r4, r5, r6, lr}
 800a492:	4d0d      	ldr	r5, [pc, #52]	; (800a4c8 <__libc_init_array+0x38>)
 800a494:	4c0d      	ldr	r4, [pc, #52]	; (800a4cc <__libc_init_array+0x3c>)
 800a496:	1b64      	subs	r4, r4, r5
 800a498:	10a4      	asrs	r4, r4, #2
 800a49a:	2600      	movs	r6, #0
 800a49c:	42a6      	cmp	r6, r4
 800a49e:	d109      	bne.n	800a4b4 <__libc_init_array+0x24>
 800a4a0:	4d0b      	ldr	r5, [pc, #44]	; (800a4d0 <__libc_init_array+0x40>)
 800a4a2:	4c0c      	ldr	r4, [pc, #48]	; (800a4d4 <__libc_init_array+0x44>)
 800a4a4:	f000 f82e 	bl	800a504 <_init>
 800a4a8:	1b64      	subs	r4, r4, r5
 800a4aa:	10a4      	asrs	r4, r4, #2
 800a4ac:	2600      	movs	r6, #0
 800a4ae:	42a6      	cmp	r6, r4
 800a4b0:	d105      	bne.n	800a4be <__libc_init_array+0x2e>
 800a4b2:	bd70      	pop	{r4, r5, r6, pc}
 800a4b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4b8:	4798      	blx	r3
 800a4ba:	3601      	adds	r6, #1
 800a4bc:	e7ee      	b.n	800a49c <__libc_init_array+0xc>
 800a4be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4c2:	4798      	blx	r3
 800a4c4:	3601      	adds	r6, #1
 800a4c6:	e7f2      	b.n	800a4ae <__libc_init_array+0x1e>
 800a4c8:	0800a544 	.word	0x0800a544
 800a4cc:	0800a544 	.word	0x0800a544
 800a4d0:	0800a544 	.word	0x0800a544
 800a4d4:	0800a548 	.word	0x0800a548

0800a4d8 <memcpy>:
 800a4d8:	440a      	add	r2, r1
 800a4da:	4291      	cmp	r1, r2
 800a4dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4e0:	d100      	bne.n	800a4e4 <memcpy+0xc>
 800a4e2:	4770      	bx	lr
 800a4e4:	b510      	push	{r4, lr}
 800a4e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4ee:	4291      	cmp	r1, r2
 800a4f0:	d1f9      	bne.n	800a4e6 <memcpy+0xe>
 800a4f2:	bd10      	pop	{r4, pc}

0800a4f4 <memset>:
 800a4f4:	4402      	add	r2, r0
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d100      	bne.n	800a4fe <memset+0xa>
 800a4fc:	4770      	bx	lr
 800a4fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a502:	e7f9      	b.n	800a4f8 <memset+0x4>

0800a504 <_init>:
 800a504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a506:	bf00      	nop
 800a508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a50a:	bc08      	pop	{r3}
 800a50c:	469e      	mov	lr, r3
 800a50e:	4770      	bx	lr

0800a510 <_fini>:
 800a510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a512:	bf00      	nop
 800a514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a516:	bc08      	pop	{r3}
 800a518:	469e      	mov	lr, r3
 800a51a:	4770      	bx	lr
