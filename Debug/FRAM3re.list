
FRAM3re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7d4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800a96c  0800a96c  0001a96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a98c  0800a98c  0002043c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a98c  0800a98c  0001a98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a994  0800a994  0002043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a994  0800a994  0001a994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a998  0800a998  0001a998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000043c  20000000  0800a99c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  20000440  0800add8  00020440  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  0800add8  00020b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178b8  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003081  00000000  00000000  00037d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  0003ada8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  0003bef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001789a  00000000  00000000  0003cf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015806  00000000  00000000  000547b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092fee  00000000  00000000  00069fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000fcfa6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004964  00000000  00000000  000fd06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  001019d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000440 	.word	0x20000440
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a954 	.word	0x0800a954

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000444 	.word	0x20000444
 80001d4:	0800a954 	.word	0x0800a954

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	f009 fd4a 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	f009 fd41 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 2, 3, KalmanVar ->MatC_Data);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	2102      	movs	r1, #2
 8000d90:	f009 fd38 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3348      	adds	r3, #72	; 0x48
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2101      	movs	r1, #1
 8000da2:	f009 fd2f 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f503 7047 	add.w	r0, r3, #796	; 0x31c
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	334c      	adds	r3, #76	; 0x4c
 8000db0:	2203      	movs	r2, #3
 8000db2:	2103      	movs	r1, #3
 8000db4:	f009 fd26 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 2, 2, KalmanVar ->MatR_Data);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3370      	adds	r3, #112	; 0x70
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	f009 fd1d 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3380      	adds	r3, #128	; 0x80
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	f009 fd14 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f503 704d 	add.w	r0, r3, #820	; 0x334
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	33a4      	adds	r3, #164	; 0xa4
 8000de6:	2201      	movs	r2, #1
 8000de8:	2103      	movs	r1, #3
 8000dea:	f009 fd0b 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	33b0      	adds	r3, #176	; 0xb0
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	f009 fd02 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	33bc      	adds	r3, #188	; 0xbc
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	f009 fcf9 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f503 7053 	add.w	r0, r3, #844	; 0x34c
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	33e0      	adds	r3, #224	; 0xe0
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	2103      	movs	r1, #3
 8000e20:	f009 fcf0 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 2, 1, KalmanVar ->MatY_Data);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f503 7055 	add.w	r0, r3, #852	; 0x354
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e30:	2201      	movs	r2, #1
 8000e32:	2102      	movs	r1, #2
 8000e34:	f009 fce6 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 2, 1, KalmanVar ->MatZ_Data);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000e44:	2201      	movs	r2, #1
 8000e46:	2102      	movs	r1, #2
 8000e48:	f009 fcdc 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 2, 2, KalmanVar ->MatS_Data);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8000e58:	2202      	movs	r2, #2
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	f009 fcd2 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 2, KalmanVar ->MatK_Data);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	2103      	movs	r1, #3
 8000e70:	f009 fcc8 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f503 705d 	add.w	r0, r3, #884	; 0x374
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000e80:	2203      	movs	r2, #3
 8000e82:	2103      	movs	r1, #3
 8000e84:	f009 fcbe 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f503 705f 	add.w	r0, r3, #892	; 0x37c
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000e94:	2203      	movs	r2, #3
 8000e96:	2103      	movs	r1, #3
 8000e98:	f009 fcb4 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f503 7061 	add.w	r0, r3, #900	; 0x384
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	2103      	movs	r1, #3
 8000eac:	f009 fcaa 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQ), 3, 3, KalmanVar ->MatGQ_Data);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f503 7063 	add.w	r0, r3, #908	; 0x38c
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	f009 fca0 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 2, KalmanVar ->MatCt_Data);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f503 7065 	add.w	r0, r3, #916	; 0x394
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	2103      	movs	r1, #3
 8000ed4:	f009 fc96 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f503 7069 	add.w	r0, r3, #932	; 0x3a4
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	2103      	movs	r1, #3
 8000ee8:	f009 fc8c 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 2, 2, KalmanVar ->MatSinv_Data);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8000ef8:	2202      	movs	r2, #2
 8000efa:	2102      	movs	r1, #2
 8000efc:	f009 fc82 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 2, 3, KalmanVar ->MatCPk_Data);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f503 706b 	add.w	r0, r3, #940	; 0x3ac
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	2102      	movs	r1, #2
 8000f10:	f009 fc78 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f503 706d 	add.w	r0, r3, #948	; 0x3b4
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000f20:	2203      	movs	r2, #3
 8000f22:	2103      	movs	r1, #3
 8000f24:	f009 fc6e 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f503 706f 	add.w	r0, r3, #956	; 0x3bc
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8000f34:	2203      	movs	r2, #3
 8000f36:	2103      	movs	r1, #3
 8000f38:	f009 fc64 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 2, 1, KalmanVar ->MatCXk_Data);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	f009 fc5a 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 2, 2, KalmanVar ->MatCPkCt_Data);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	2102      	movs	r1, #2
 8000f60:	f009 fc50 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 2, KalmanVar ->MatPkCt_Data);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f503 7075 	add.w	r0, r3, #980	; 0x3d4
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8000f70:	2202      	movs	r2, #2
 8000f72:	2103      	movs	r1, #3
 8000f74:	f009 fc46 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f503 7077 	add.w	r0, r3, #988	; 0x3dc
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8000f84:	2201      	movs	r2, #1
 8000f86:	2103      	movs	r1, #3
 8000f88:	f009 fc3c 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f503 7079 	add.w	r0, r3, #996	; 0x3e4
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8000f98:	2203      	movs	r2, #3
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	f009 fc32 	bl	800a804 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f503 707b 	add.w	r0, r3, #1004	; 0x3ec
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8000fac:	2203      	movs	r2, #3
 8000fae:	2103      	movs	r1, #3
 8000fb0:	f009 fc28 	bl	800a804 <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f503 723f 	add.w	r2, r3, #764	; 0x2fc
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	f009 f9b2 	bl	800a32c <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	f009 f9a8 	bl	800a32c <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f503 7243 	add.w	r2, r3, #780	; 0x30c
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4610      	mov	r0, r2
 8000fec:	f009 f99e 	bl	800a32c <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQ));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8001002:	461a      	mov	r2, r3
 8001004:	f009 fa58 	bl	800a4b8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQ), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f503 7063 	add.w	r0, r3, #908	; 0x38c
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f503 7161 	add.w	r1, r3, #900	; 0x384
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800101a:	461a      	mov	r2, r3
 800101c:	f009 fa4c 	bl	800a4b8 <arm_mat_mult_f32>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <KalmanMatrixReset>:

void KalmanMatrixReset(KalmanFilterVar *KalmanVar , float Pvar)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	ed87 0a00 	vstr	s0, [r7]
	for (int index = 0; index < 3; ++index)
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	e013      	b.n	8001062 <KalmanMatrixReset+0x3a>
	{
		KalmanVar ->MatStateLast_Data[index] = 0.0;
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	332c      	adds	r3, #44	; 0x2c
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
		KalmanVar ->MatState_Data[index] = 0.0;
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3328      	adds	r3, #40	; 0x28
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	3304      	adds	r3, #4
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
	for (int index = 0; index < 3; ++index)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3301      	adds	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2b02      	cmp	r3, #2
 8001066:	dde8      	ble.n	800103a <KalmanMatrixReset+0x12>
	}

	KalmanVar ->MatPredict_Data[0] = Pvar;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	KalmanVar ->MatPredictLast_Data[0] = Pvar;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	KalmanVar ->MatPredict_Data[1] = 0.0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	KalmanVar ->MatPredictLast_Data[1] = 0.0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	KalmanVar ->MatPredict_Data[2] = 0.0;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	KalmanVar ->MatPredictLast_Data[2] = 0.0;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	KalmanVar ->MatPredict_Data[3] = 0.0;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	KalmanVar ->MatPredictLast_Data[3] = 0.0;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	KalmanVar ->MatPredict_Data[4] = Pvar;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	KalmanVar ->MatPredictLast_Data[4] = Pvar;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	KalmanVar ->MatPredict_Data[5] = 0.0;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	KalmanVar ->MatPredictLast_Data[5] = 0.0;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

	KalmanVar ->MatPredict_Data[6] = 0.0;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	KalmanVar ->MatPredictLast_Data[6] = 0.0;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	KalmanVar ->MatPredict_Data[7] = 0.0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	KalmanVar ->MatPredictLast_Data[7] = 0.0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	KalmanVar ->MatPredict_Data[8] = Pvar;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	KalmanVar ->MatPredictLast_Data[8] = Pvar;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg,float32_t VelocityDeg)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	ed87 0a02 	vstr	s0, [r7, #8]
 8001128:	edc7 0a01 	vstr	s1, [r7, #4]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f503 714f 	add.w	r1, r3, #828	; 0x33c
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800113e:	461a      	mov	r2, r3
 8001140:	f009 f9ba 	bl	800a4b8 <arm_mat_mult_f32>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f503 7153 	add.w	r1, r3, #844	; 0x34c
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8001160:	461a      	mov	r2, r3
 8001162:	f009 f9a9 	bl	800a4b8 <arm_mat_mult_f32>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f503 706d 	add.w	r0, r3, #948	; 0x3b4
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f503 715f 	add.w	r1, r3, #892	; 0x37c
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001182:	461a      	mov	r2, r3
 8001184:	f009 f998 	bl	800a4b8 <arm_mat_mult_f32>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f503 706f 	add.w	r0, r3, #956	; 0x3bc
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80011a4:	461a      	mov	r2, r3
 80011a6:	f009 fb31 	bl	800a80c <arm_mat_add_f32>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	KalmanVar -> MatZ_Data[1] = VelocityDeg; // Sensor Input
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f503 714d 	add.w	r1, r3, #820	; 0x334
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80011d6:	461a      	mov	r2, r3
 80011d8:	f009 f96e 	bl	800a4b8 <arm_mat_mult_f32>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f503 7171 	add.w	r1, r3, #964	; 0x3c4
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80011f8:	461a      	mov	r2, r3
 80011fa:	f009 f8f3 	bl	800a3e4 <arm_mat_sub_f32>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f503 7151 	add.w	r1, r3, #836	; 0x344
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 800121a:	461a      	mov	r2, r3
 800121c:	f009 f94c 	bl	800a4b8 <arm_mat_mult_f32>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f503 706b 	add.w	r0, r3, #940	; 0x3ac
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f503 7165 	add.w	r1, r3, #916	; 0x394
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 800123c:	461a      	mov	r2, r3
 800123e:	f009 f93b 	bl	800a4b8 <arm_mat_mult_f32>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f503 7149 	add.w	r1, r3, #804	; 0x324
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800125e:	461a      	mov	r2, r3
 8001260:	f009 fad4 	bl	800a80c <arm_mat_add_f32>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f503 7259 	add.w	r2, r3, #868	; 0x364
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 800127a:	4619      	mov	r1, r3
 800127c:	4610      	mov	r0, r2
 800127e:	f009 f9bb 	bl	800a5f8 <arm_mat_inverse_f32>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f503 7165 	add.w	r1, r3, #916	; 0x394
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 800129e:	461a      	mov	r2, r3
 80012a0:	f009 f90a 	bl	800a4b8 <arm_mat_mult_f32>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f503 7075 	add.w	r0, r3, #980	; 0x3d4
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f503 7167 	add.w	r1, r3, #924	; 0x39c
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80012c0:	461a      	mov	r2, r3
 80012c2:	f009 f8f9 	bl	800a4b8 <arm_mat_mult_f32>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f503 7155 	add.w	r1, r3, #852	; 0x354
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80012e2:	461a      	mov	r2, r3
 80012e4:	f009 f8e8 	bl	800a4b8 <arm_mat_mult_f32>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f503 7077 	add.w	r0, r3, #988	; 0x3dc
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f503 714d 	add.w	r1, r3, #820	; 0x334
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8001304:	461a      	mov	r2, r3
 8001306:	f009 fa81 	bl	800a80c <arm_mat_add_f32>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f503 7143 	add.w	r1, r3, #780	; 0x30c
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8001326:	461a      	mov	r2, r3
 8001328:	f009 f8c6 	bl	800a4b8 <arm_mat_mult_f32>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f503 705d 	add.w	r0, r3, #884	; 0x374
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f503 7179 	add.w	r1, r3, #996	; 0x3e4
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8001348:	461a      	mov	r2, r3
 800134a:	f009 f84b 	bl	800a3e4 <arm_mat_sub_f32>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f503 707b 	add.w	r0, r3, #1004	; 0x3ec
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f503 7151 	add.w	r1, r3, #836	; 0x344
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800136a:	461a      	mov	r2, r3
 800136c:	f009 f8a4 	bl	800a4b8 <arm_mat_mult_f32>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <PIDAController_Init>:

#define PID_LIM_MIN_INT -10000.0f
#define PID_LIM_MAX_INT  10000.0f

void PIDAController_Init(PIDAController *pid)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	pid->Last1Error = 0.0f;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
	pid->Last2Error = 0.0f;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	625a      	str	r2, [r3, #36]	; 0x24

	pid->differentiatorOutput = 0.0f;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
	pid->integratorOutput = 0.0f;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
	pid->proportionalOutput = 0.0f;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	61da      	str	r2, [r3, #28]

	pid->ControllerOut = 0.0f;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
	pid->ControllerLastOut = 0.0f;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c

	pid->OutputMax = PID_LIM_MAX_INT;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <PIDAController_Init+0x58>)
 80013c8:	611a      	str	r2, [r3, #16]
	pid->OutputMin = PID_LIM_MIN_INT;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <PIDAController_Init+0x5c>)
 80013ce:	60da      	str	r2, [r3, #12]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	461c4000 	.word	0x461c4000
 80013e0:	c61c4000 	.word	0xc61c4000

080013e4 <PIDAVelocityController_Update>:
	return pid->ControllerOut;
}



float PIDAVelocityController_Update(PIDAController *pid, float setpoint, float measurement){
 80013e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	ed87 0a02 	vstr	s0, [r7, #8]
 80013f2:	edc7 0a01 	vstr	s1, [r7, #4]

    float error = setpoint - measurement;
 80013f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80013fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001402:	edc7 7a05 	vstr	s15, [r7, #20]
    float errorDZ = error;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	613b      	str	r3, [r7, #16]
//    {
//    	pid->Kp  = 0.2;
//    	pid->Ki  = 0.1;
//    	pid->Kd  = 0;
//    }
		pid->Kp  = 0.24;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4a54      	ldr	r2, [pc, #336]	; (8001560 <PIDAVelocityController_Update+0x17c>)
 800140e:	601a      	str	r2, [r3, #0]
		pid->Ki  = 2.6;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4a54      	ldr	r2, [pc, #336]	; (8001564 <PIDAVelocityController_Update+0x180>)
 8001414:	605a      	str	r2, [r3, #4]
		pid->Kd  = 0.0;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	609a      	str	r2, [r3, #8]

	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	ed93 7a00 	vldr	s14, [r3]
 8001424:	edd7 7a04 	vldr	s15, [r7, #16]
 8001428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	edd3 6a00 	vldr	s13, [r3]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	edd3 7a08 	vldr	s15, [r3, #32]
 8001438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	ed93 7a01 	vldr	s14, [r3, #4]
 800144c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f81e 	bl	80004a0 <__aeabi_f2d>
 8001464:	4604      	mov	r4, r0
 8001466:	460d      	mov	r5, r1
 8001468:	6938      	ldr	r0, [r7, #16]
 800146a:	f7ff f819 	bl	80004a0 <__aeabi_f2d>
 800146e:	4680      	mov	r8, r0
 8001470:	4689      	mov	r9, r1
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f812 	bl	80004a0 <__aeabi_f2d>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	f7fe feb0 	bl	80001e4 <__adddf3>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4640      	mov	r0, r8
 800148a:	4649      	mov	r1, r9
 800148c:	f7fe fea8 	bl	80001e0 <__aeabi_dsub>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4690      	mov	r8, r2
 8001496:	4699      	mov	r9, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe ffff 	bl	80004a0 <__aeabi_f2d>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4640      	mov	r0, r8
 80014a8:	4649      	mov	r1, r9
 80014aa:	f7fe fe9b 	bl	80001e4 <__adddf3>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4620      	mov	r0, r4
 80014b4:	4629      	mov	r1, r5
 80014b6:	f7ff f84b 	bl	8000550 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f7ff fa77 	bl	80009b4 <__aeabi_d2f>
 80014c6:	4602      	mov	r2, r0
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	ed93 7a07 	vldr	s14, [r3, #28]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80014d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	edd3 7a06 	vldr	s15, [r3, #24]
 80014e2:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80014ec:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001502:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150a:	dd04      	ble.n	8001516 <PIDAVelocityController_Update+0x132>

    	pid->ControllerOut = pid->OutputMax;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
 8001514:	e00e      	b.n	8001534 <PIDAVelocityController_Update+0x150>

    } else if (pid->ControllerOut < pid->OutputMin) {
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	d503      	bpl.n	8001534 <PIDAVelocityController_Update+0x150>

    	pid->ControllerOut = pid->OutputMin;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6a1a      	ldr	r2, [r3, #32]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	ee07 3a90 	vmov	s15, r3
}
 8001552:	eeb0 0a67 	vmov.f32	s0, s15
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800155e:	bf00      	nop
 8001560:	3e75c28f 	.word	0x3e75c28f
 8001564:	40266666 	.word	0x40266666

08001568 <Robotinit>:


#include "Trajectory.h"

void Robotinit(RobotManagement *Robot)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	  Robot -> Position = 0.0;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
	  Robot -> Velocity = 0.0;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
	  Robot -> CurrentStation = 0;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	811a      	strh	r2, [r3, #8]
	  Robot -> GoalPositon = 0.0;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
	  Robot -> HomePositon = 0.0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
	  Robot -> QX = 0.0;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
	  Robot -> QV = 0.0;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
	  Robot -> QVMax = 0.0;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]

	  Robot -> flagSethome = 0;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  Robot -> flagStartTime = 0;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  Robot -> RunningFlag = 0;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	  Robot -> MotorIsOn = 0;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <TrajectorInit>:

void TrajectorInit(TrajectoryG *traject)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
	arm_mat_init_f32(&(traject ->MatTime), 6, 6, traject ->MatTime_Data);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f503 7004 	add.w	r0, r3, #528	; 0x210
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2206      	movs	r2, #6
 80015ec:	2106      	movs	r1, #6
 80015ee:	f009 f909 	bl	800a804 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatTimeINV), 6, 6, traject ->MatTimeINV_Data);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f503 7006 	add.w	r0, r3, #536	; 0x218
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3390      	adds	r3, #144	; 0x90
 80015fc:	2206      	movs	r2, #6
 80015fe:	2106      	movs	r1, #6
 8001600:	f009 f900 	bl	800a804 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatCondition), 6, 1, traject ->MatCondition_Data);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f503 7008 	add.w	r0, r3, #544	; 0x220
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001610:	2201      	movs	r2, #1
 8001612:	2106      	movs	r1, #6
 8001614:	f009 f8f6 	bl	800a804 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatA), 6, 1, traject ->MatTA_Data);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f503 700a 	add.w	r0, r3, #552	; 0x228
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001624:	2201      	movs	r2, #1
 8001626:	2106      	movs	r1, #6
 8001628:	f009 f8ec 	bl	800a804 <arm_mat_init_f32>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <AbsVal>:
{
	Robot -> HomePositon = homePoint;
}

float AbsVal(float number)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 800163e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001642:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	d50e      	bpl.n	800166a <AbsVal+0x36>
  {
    return number*-1.0;
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7fe ff27 	bl	80004a0 <__aeabi_f2d>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff f9ab 	bl	80009b4 <__aeabi_d2f>
 800165e:	4603      	mov	r3, r0
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eef1 7a67 	vneg.f32	s15, s15
 8001668:	e001      	b.n	800166e <AbsVal+0x3a>
  }
  else
  {
    return number;
 800166a:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 800166e:	eeb0 0a67 	vmov.f32	s0, s15
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal, float Veloinput){
 8001678:	b5b0      	push	{r4, r5, r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	ed87 0a02 	vstr	s0, [r7, #8]
 8001684:	edc7 0a01 	vstr	s1, [r7, #4]
 8001688:	ed87 1a00 	vstr	s2, [r7]

	traject -> Qin = Qinitial;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	traject -> Qfinal = Qfinal;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	// Set initial = 0;
	traject -> QRelative = traject -> Qfinal - traject -> Qin;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	ed93 7a7c 	vldr	s14, [r3, #496]	; 0x1f0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	edd3 7a7a 	vldr	s15, [r3, #488]	; 0x1e8
 80016a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	edc3 7a7b 	vstr	s15, [r3, #492]	; 0x1ec

	// Set Vmax Amax Jmax
	traject -> Vmax = 0.0;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	traject -> Amax = 21.77;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4a17      	ldr	r2, [pc, #92]	; (800171c <CoefficientAndTimeCalculation+0xa4>)
 80016c0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	traject -> Jmax = 114.59 ;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4a16      	ldr	r2, [pc, #88]	; (8001720 <CoefficientAndTimeCalculation+0xa8>)
 80016c8:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	float gain = 0.0;
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
	if(traject -> QRelative < 0.0)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 80016d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e0:	d502      	bpl.n	80016e8 <CoefficientAndTimeCalculation+0x70>
	{
		gain = -1.0;
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <CoefficientAndTimeCalculation+0xac>)
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	e002      	b.n	80016ee <CoefficientAndTimeCalculation+0x76>
	}
	else
	{
		gain = 1.0;
 80016e8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016ec:	617b      	str	r3, [r7, #20]
	}
	// Find Speed limit
	float DistanceABS = AbsVal(traject -> QRelative);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	f7ff ff9c 	bl	8001634 <AbsVal>
 80016fc:	ed87 0a04 	vstr	s0, [r7, #16]

	if(DistanceABS >= 130)
 8001700:	edd7 7a04 	vldr	s15, [r7, #16]
 8001704:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001728 <CoefficientAndTimeCalculation+0xb0>
 8001708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800170c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001710:	db0e      	blt.n	8001730 <CoefficientAndTimeCalculation+0xb8>
	{
//		traject -> Vmax = 60;
		traject -> Vmax = 51;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4a05      	ldr	r2, [pc, #20]	; (800172c <CoefficientAndTimeCalculation+0xb4>)
 8001716:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800171a:	e07a      	b.n	8001812 <CoefficientAndTimeCalculation+0x19a>
 800171c:	41ae28f6 	.word	0x41ae28f6
 8001720:	42e52e14 	.word	0x42e52e14
 8001724:	bf800000 	.word	0xbf800000
 8001728:	43020000 	.word	0x43020000
 800172c:	424c0000 	.word	0x424c0000
	}
	else
	{
//		traject -> Vmax = (-0.0000003*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00009*(DistanceABS*DistanceABS*DistanceABS))-(0.0115*(DistanceABS*DistanceABS))+(0.995*DistanceABS)+7.1259;
		traject -> Vmax = (-0.0000002*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00007*(DistanceABS*DistanceABS*DistanceABS))-(0.0092*(DistanceABS*DistanceABS))+(0.8419*DistanceABS)+4.8492;
 8001730:	edd7 7a04 	vldr	s15, [r7, #16]
 8001734:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001738:	edd7 7a04 	vldr	s15, [r7, #16]
 800173c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001740:	edd7 7a04 	vldr	s15, [r7, #16]
 8001744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001748:	ee17 0a90 	vmov	r0, s15
 800174c:	f7fe fea8 	bl	80004a0 <__aeabi_f2d>
 8001750:	f20f 5380 	addw	r3, pc, #1408	; 0x580
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe fefa 	bl	8000550 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4614      	mov	r4, r2
 8001762:	461d      	mov	r5, r3
 8001764:	edd7 7a04 	vldr	s15, [r7, #16]
 8001768:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800176c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001774:	ee17 0a90 	vmov	r0, s15
 8001778:	f7fe fe92 	bl	80004a0 <__aeabi_f2d>
 800177c:	f20f 535c 	addw	r3, pc, #1372	; 0x55c
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe fee4 	bl	8000550 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4620      	mov	r0, r4
 800178e:	4629      	mov	r1, r5
 8001790:	f7fe fd28 	bl	80001e4 <__adddf3>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4614      	mov	r4, r2
 800179a:	461d      	mov	r5, r3
 800179c:	edd7 7a04 	vldr	s15, [r7, #16]
 80017a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017a4:	ee17 0a90 	vmov	r0, s15
 80017a8:	f7fe fe7a 	bl	80004a0 <__aeabi_f2d>
 80017ac:	f20f 5334 	addw	r3, pc, #1332	; 0x534
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	f7fe fecc 	bl	8000550 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4620      	mov	r0, r4
 80017be:	4629      	mov	r1, r5
 80017c0:	f7fe fd0e 	bl	80001e0 <__aeabi_dsub>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4614      	mov	r4, r2
 80017ca:	461d      	mov	r5, r3
 80017cc:	6938      	ldr	r0, [r7, #16]
 80017ce:	f7fe fe67 	bl	80004a0 <__aeabi_f2d>
 80017d2:	f20f 5318 	addw	r3, pc, #1304	; 0x518
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe feb9 	bl	8000550 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4620      	mov	r0, r4
 80017e4:	4629      	mov	r1, r5
 80017e6:	f7fe fcfd 	bl	80001e4 <__adddf3>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f20f 5300 	addw	r3, pc, #1280	; 0x500
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f7fe fcf3 	bl	80001e4 <__adddf3>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff f8d5 	bl	80009b4 <__aeabi_d2f>
 800180a:	4602      	mov	r2, r0
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}

	if(traject -> Vmax > Veloinput)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8001818:	ed97 7a00 	vldr	s14, [r7]
 800181c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001824:	d503      	bpl.n	800182e <CoefficientAndTimeCalculation+0x1b6>
	{
		traject -> Vmax = Veloinput;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  traject -> Vmax *gain;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	ed93 7a56 	vldr	s14, [r3, #344]	; 0x158
 8001834:	edd7 7a05 	vldr	s15, [r7, #20]
 8001838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
	traject -> Amax =  traject -> Amax *gain;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8001848:	edd7 7a05 	vldr	s15, [r7, #20]
 800184c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
	traject -> Jmax =  traject -> Jmax *gain;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 800185c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154

	// Calculate time
	traject -> TimeInit = 0.0;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	traject -> TimeFinal = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8001880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001890:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	ed93 6a7b 	vldr	s12, [r3, #492]	; 0x1ec
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	edd3 6a56 	vldr	s13, [r3, #344]	; 0x158
 80018a4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80018a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	edc3 7a83 	vstr	s15, [r3, #524]	; 0x20c

	traject -> MatTime_Data[0] = 1.0;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018b8:	601a      	str	r2, [r3, #0]
	traject -> MatTime_Data[1] = traject -> TimeInit;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	605a      	str	r2, [r3, #4]
	traject -> MatTime_Data[2] = traject -> TimeInit*traject -> TimeInit;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80018d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	edc3 7a02 	vstr	s15, [r3, #8]
	traject -> MatTime_Data[3] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80018e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80018f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	edc3 7a03 	vstr	s15, [r3, #12]
	traject -> MatTime_Data[4] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001906:	ee27 7a27 	vmul.f32	s14, s14, s15
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 800191a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	edc3 7a04 	vstr	s15, [r3, #16]
	traject -> MatTime_Data[5] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001930:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 800193a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001944:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 800194e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	edc3 7a05 	vstr	s15, [r3, #20]
	traject -> MatTime_Data[6] = 0.0;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
	traject -> MatTime_Data[7] = 1.0;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001966:	61da      	str	r2, [r3, #28]
	traject -> MatTime_Data[8] = 2.0*traject -> TimeInit;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 800196e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	edc3 7a08 	vstr	s15, [r3, #32]
	traject -> MatTime_Data[9] = 3.0*traject -> TimeInit*traject -> TimeInit;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fd8e 	bl	80004a0 <__aeabi_f2d>
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	4bcd      	ldr	r3, [pc, #820]	; (8001cc0 <CoefficientAndTimeCalculation+0x648>)
 800198a:	f7fe fde1 	bl	8000550 <__aeabi_dmul>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4614      	mov	r4, r2
 8001994:	461d      	mov	r5, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fd7f 	bl	80004a0 <__aeabi_f2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4620      	mov	r0, r4
 80019a8:	4629      	mov	r1, r5
 80019aa:	f7fe fdd1 	bl	8000550 <__aeabi_dmul>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f7fe fffd 	bl	80009b4 <__aeabi_d2f>
 80019ba:	4602      	mov	r2, r0
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	625a      	str	r2, [r3, #36]	; 0x24
	traject -> MatTime_Data[10] = 4.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fd6a 	bl	80004a0 <__aeabi_f2d>
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4bbc      	ldr	r3, [pc, #752]	; (8001cc4 <CoefficientAndTimeCalculation+0x64c>)
 80019d2:	f7fe fdbd 	bl	8000550 <__aeabi_dmul>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4614      	mov	r4, r2
 80019dc:	461d      	mov	r5, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fd5b 	bl	80004a0 <__aeabi_f2d>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4620      	mov	r0, r4
 80019f0:	4629      	mov	r1, r5
 80019f2:	f7fe fdad 	bl	8000550 <__aeabi_dmul>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4614      	mov	r4, r2
 80019fc:	461d      	mov	r5, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fd4b 	bl	80004a0 <__aeabi_f2d>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4620      	mov	r0, r4
 8001a10:	4629      	mov	r1, r5
 8001a12:	f7fe fd9d 	bl	8000550 <__aeabi_dmul>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7fe ffc9 	bl	80009b4 <__aeabi_d2f>
 8001a22:	4602      	mov	r2, r0
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28
	traject -> MatTime_Data[11] = 5.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fd36 	bl	80004a0 <__aeabi_f2d>
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4ba3      	ldr	r3, [pc, #652]	; (8001cc8 <CoefficientAndTimeCalculation+0x650>)
 8001a3a:	f7fe fd89 	bl	8000550 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4614      	mov	r4, r2
 8001a44:	461d      	mov	r5, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fd27 	bl	80004a0 <__aeabi_f2d>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4620      	mov	r0, r4
 8001a58:	4629      	mov	r1, r5
 8001a5a:	f7fe fd79 	bl	8000550 <__aeabi_dmul>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4614      	mov	r4, r2
 8001a64:	461d      	mov	r5, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd17 	bl	80004a0 <__aeabi_f2d>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4620      	mov	r0, r4
 8001a78:	4629      	mov	r1, r5
 8001a7a:	f7fe fd69 	bl	8000550 <__aeabi_dmul>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4614      	mov	r4, r2
 8001a84:	461d      	mov	r5, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fd07 	bl	80004a0 <__aeabi_f2d>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4620      	mov	r0, r4
 8001a98:	4629      	mov	r1, r5
 8001a9a:	f7fe fd59 	bl	8000550 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7fe ff85 	bl	80009b4 <__aeabi_d2f>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
	traject -> MatTime_Data[12] = 0.0;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
	traject -> MatTime_Data[13] = 0.0;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	635a      	str	r2, [r3, #52]	; 0x34
	traject -> MatTime_Data[14] = 2.0;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ac6:	639a      	str	r2, [r3, #56]	; 0x38
	traject -> MatTime_Data[15] = 6.0*traject -> TimeInit;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8001ace:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	traject -> MatTime_Data[16] = 12.0*traject -> TimeInit*traject -> TimeInit;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fcdc 	bl	80004a0 <__aeabi_f2d>
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	4b77      	ldr	r3, [pc, #476]	; (8001ccc <CoefficientAndTimeCalculation+0x654>)
 8001aee:	f7fe fd2f 	bl	8000550 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4614      	mov	r4, r2
 8001af8:	461d      	mov	r5, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fccd 	bl	80004a0 <__aeabi_f2d>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe fd1f 	bl	8000550 <__aeabi_dmul>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7fe ff4b 	bl	80009b4 <__aeabi_d2f>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40
	traject -> MatTime_Data[17] = 20.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fcb8 	bl	80004a0 <__aeabi_f2d>
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	4b66      	ldr	r3, [pc, #408]	; (8001cd0 <CoefficientAndTimeCalculation+0x658>)
 8001b36:	f7fe fd0b 	bl	8000550 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4614      	mov	r4, r2
 8001b40:	461d      	mov	r5, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fca9 	bl	80004a0 <__aeabi_f2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4620      	mov	r0, r4
 8001b54:	4629      	mov	r1, r5
 8001b56:	f7fe fcfb 	bl	8000550 <__aeabi_dmul>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4614      	mov	r4, r2
 8001b60:	461d      	mov	r5, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fc99 	bl	80004a0 <__aeabi_f2d>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4620      	mov	r0, r4
 8001b74:	4629      	mov	r1, r5
 8001b76:	f7fe fceb 	bl	8000550 <__aeabi_dmul>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f7fe ff17 	bl	80009b4 <__aeabi_d2f>
 8001b86:	4602      	mov	r2, r0
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	645a      	str	r2, [r3, #68]	; 0x44
	traject -> MatTime_Data[18] = 1.0;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b92:	649a      	str	r2, [r3, #72]	; 0x48
	traject -> MatTime_Data[19] = traject -> TimeFinal;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	64da      	str	r2, [r3, #76]	; 0x4c
	traject -> MatTime_Data[20] = traject -> TimeFinal*traject -> TimeFinal;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	traject -> MatTime_Data[21] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	traject -> MatTime_Data[22] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001be0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001bea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	traject -> MatTime_Data[23] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001c14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001c1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	traject -> MatTime_Data[24] = 0.0;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	661a      	str	r2, [r3, #96]	; 0x60
	traject -> MatTime_Data[25] = 1.0;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c40:	665a      	str	r2, [r3, #100]	; 0x64
	traject -> MatTime_Data[26] = 2.0*traject -> TimeFinal;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001c48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	traject -> MatTime_Data[27] = 3.0*traject -> TimeFinal*traject -> TimeFinal;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fc21 	bl	80004a0 <__aeabi_f2d>
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <CoefficientAndTimeCalculation+0x648>)
 8001c64:	f7fe fc74 	bl	8000550 <__aeabi_dmul>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4614      	mov	r4, r2
 8001c6e:	461d      	mov	r5, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fc12 	bl	80004a0 <__aeabi_f2d>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4620      	mov	r0, r4
 8001c82:	4629      	mov	r1, r5
 8001c84:	f7fe fc64 	bl	8000550 <__aeabi_dmul>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f7fe fe90 	bl	80009b4 <__aeabi_d2f>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	66da      	str	r2, [r3, #108]	; 0x6c
	traject -> MatTime_Data[28] = 4.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fbfd 	bl	80004a0 <__aeabi_f2d>
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <CoefficientAndTimeCalculation+0x64c>)
 8001cac:	f7fe fc50 	bl	8000550 <__aeabi_dmul>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4614      	mov	r4, r2
 8001cb6:	461d      	mov	r5, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001cbe:	e01d      	b.n	8001cfc <CoefficientAndTimeCalculation+0x684>
 8001cc0:	40080000 	.word	0x40080000
 8001cc4:	40100000 	.word	0x40100000
 8001cc8:	40140000 	.word	0x40140000
 8001ccc:	40280000 	.word	0x40280000
 8001cd0:	40340000 	.word	0x40340000
 8001cd4:	9abcaf48 	.word	0x9abcaf48
 8001cd8:	be8ad7f2 	.word	0xbe8ad7f2
 8001cdc:	d7c6fbd2 	.word	0xd7c6fbd2
 8001ce0:	3f12599e 	.word	0x3f12599e
 8001ce4:	18fc5048 	.word	0x18fc5048
 8001ce8:	3f82d773 	.word	0x3f82d773
 8001cec:	44d013a9 	.word	0x44d013a9
 8001cf0:	3feaf0d8 	.word	0x3feaf0d8
 8001cf4:	af4f0d84 	.word	0xaf4f0d84
 8001cf8:	40136594 	.word	0x40136594
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fbcf 	bl	80004a0 <__aeabi_f2d>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4620      	mov	r0, r4
 8001d08:	4629      	mov	r1, r5
 8001d0a:	f7fe fc21 	bl	8000550 <__aeabi_dmul>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4614      	mov	r4, r2
 8001d14:	461d      	mov	r5, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fbbf 	bl	80004a0 <__aeabi_f2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4620      	mov	r0, r4
 8001d28:	4629      	mov	r1, r5
 8001d2a:	f7fe fc11 	bl	8000550 <__aeabi_dmul>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f7fe fe3d 	bl	80009b4 <__aeabi_d2f>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	671a      	str	r2, [r3, #112]	; 0x70
	traject -> MatTime_Data[29] = 5.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fbaa 	bl	80004a0 <__aeabi_f2d>
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	4b78      	ldr	r3, [pc, #480]	; (8001f34 <CoefficientAndTimeCalculation+0x8bc>)
 8001d52:	f7fe fbfd 	bl	8000550 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4614      	mov	r4, r2
 8001d5c:	461d      	mov	r5, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fb9b 	bl	80004a0 <__aeabi_f2d>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4620      	mov	r0, r4
 8001d70:	4629      	mov	r1, r5
 8001d72:	f7fe fbed 	bl	8000550 <__aeabi_dmul>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4614      	mov	r4, r2
 8001d7c:	461d      	mov	r5, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fb8b 	bl	80004a0 <__aeabi_f2d>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4620      	mov	r0, r4
 8001d90:	4629      	mov	r1, r5
 8001d92:	f7fe fbdd 	bl	8000550 <__aeabi_dmul>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4614      	mov	r4, r2
 8001d9c:	461d      	mov	r5, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fb7b 	bl	80004a0 <__aeabi_f2d>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4620      	mov	r0, r4
 8001db0:	4629      	mov	r1, r5
 8001db2:	f7fe fbcd 	bl	8000550 <__aeabi_dmul>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f7fe fdf9 	bl	80009b4 <__aeabi_d2f>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	675a      	str	r2, [r3, #116]	; 0x74
	traject -> MatTime_Data[30] = 0.0;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	679a      	str	r2, [r3, #120]	; 0x78
	traject -> MatTime_Data[31] = 0.0;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	67da      	str	r2, [r3, #124]	; 0x7c
	traject -> MatTime_Data[32] = 2.0;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	traject -> MatTime_Data[33] = 6.0*traject -> TimeFinal;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8001de8:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	traject -> MatTime_Data[34] = 12.0*traject -> TimeFinal*traject -> TimeFinal;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fb4f 	bl	80004a0 <__aeabi_f2d>
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <CoefficientAndTimeCalculation+0x8c0>)
 8001e08:	f7fe fba2 	bl	8000550 <__aeabi_dmul>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4614      	mov	r4, r2
 8001e12:	461d      	mov	r5, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fb40 	bl	80004a0 <__aeabi_f2d>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4620      	mov	r0, r4
 8001e26:	4629      	mov	r1, r5
 8001e28:	f7fe fb92 	bl	8000550 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	f7fe fdbe 	bl	80009b4 <__aeabi_d2f>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	traject -> MatTime_Data[35] = 20.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fb2a 	bl	80004a0 <__aeabi_f2d>
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	4b3a      	ldr	r3, [pc, #232]	; (8001f3c <CoefficientAndTimeCalculation+0x8c4>)
 8001e52:	f7fe fb7d 	bl	8000550 <__aeabi_dmul>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4614      	mov	r4, r2
 8001e5c:	461d      	mov	r5, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fb1b 	bl	80004a0 <__aeabi_f2d>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4620      	mov	r0, r4
 8001e70:	4629      	mov	r1, r5
 8001e72:	f7fe fb6d 	bl	8000550 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4614      	mov	r4, r2
 8001e7c:	461d      	mov	r5, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fb0b 	bl	80004a0 <__aeabi_f2d>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4620      	mov	r0, r4
 8001e90:	4629      	mov	r1, r5
 8001e92:	f7fe fb5d 	bl	8000550 <__aeabi_dmul>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f7fe fd89 	bl	80009b4 <__aeabi_d2f>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	traject -> MatCondition_Data[0] = traject -> Qin;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	traject -> MatCondition_Data[1] = 0;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	traject -> MatCondition_Data[2] = 0;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	traject -> MatCondition_Data[3] = traject -> Qfinal;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	traject -> MatCondition_Data[4] = 0;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	traject -> MatCondition_Data[5] = 0;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

	traject -> Trajectorystatus = arm_mat_inverse_f32(&(traject ->MatTime), &(traject ->MatTimeINV));
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4610      	mov	r0, r2
 8001efa:	f008 fb7d 	bl	800a5f8 <arm_mat_inverse_f32>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461a      	mov	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
	traject -> Trajectorystatus = arm_mat_mult_f32(&(traject ->MatTimeINV), &(traject ->MatCondition), &(traject ->MatA));
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f503 7006 	add.w	r0, r3, #536	; 0x218
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f503 7108 	add.w	r1, r3, #544	; 0x220
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	f008 facc 	bl	800a4b8 <arm_mat_mult_f32>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
}
 8001f2a:	bf00      	nop
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bdb0      	pop	{r4, r5, r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40140000 	.word	0x40140000
 8001f38:	40280000 	.word	0x40280000
 8001f3c:	40340000 	.word	0x40340000

08001f40 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f44:	f3bf 8f4f 	dsb	sy
}
 8001f48:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <__NVIC_SystemReset+0x24>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f52:	4904      	ldr	r1, [pc, #16]	; (8001f64 <__NVIC_SystemReset+0x24>)
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <__NVIC_SystemReset+0x28>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f5a:	f3bf 8f4f 	dsb	sy
}
 8001f5e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <__NVIC_SystemReset+0x20>
 8001f64:	e000ed00 	.word	0xe000ed00
 8001f68:	05fa0004 	.word	0x05fa0004

08001f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f74:	f002 faa6 	bl	80044c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f78:	f000 f8f0 	bl	800215c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f7c:	f000 fb22 	bl	80025c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f80:	f000 faf8 	bl	8002574 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f84:	f000 faca 	bl	800251c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001f88:	f000 f950 	bl	800222c <MX_I2C1_Init>
  MX_TIM11_Init();
 8001f8c:	f000 faa2 	bl	80024d4 <MX_TIM11_Init>
  MX_TIM1_Init();
 8001f90:	f000 f97a 	bl	8002288 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f94:	f000 f9fc 	bl	8002390 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001f98:	f000 fa4e 	bl	8002438 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8001f9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fa0:	f002 fb02 	bl	80045a8 <HAL_Delay>
  Ringbuf_Init();
 8001fa4:	f000 fd8a 	bl	8002abc <Ringbuf_Init>
  KalmanMatrixInit(&KalmanVar);
 8001fa8:	4856      	ldr	r0, [pc, #344]	; (8002104 <main+0x198>)
 8001faa:	f7fe fed5 	bl	8000d58 <KalmanMatrixInit>
  TrajectorInit(&traject);
 8001fae:	4856      	ldr	r0, [pc, #344]	; (8002108 <main+0x19c>)
 8001fb0:	f7ff fb13 	bl	80015da <TrajectorInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4855      	ldr	r0, [pc, #340]	; (800210c <main+0x1a0>)
 8001fb8:	f005 ff60 	bl	8007e7c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8001fbc:	4854      	ldr	r0, [pc, #336]	; (8002110 <main+0x1a4>)
 8001fbe:	f005 fe7d 	bl	8007cbc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001fc2:	213c      	movs	r1, #60	; 0x3c
 8001fc4:	4853      	ldr	r0, [pc, #332]	; (8002114 <main+0x1a8>)
 8001fc6:	f006 f8af 	bl	8008128 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 8001fca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b51      	ldr	r3, [pc, #324]	; (8002118 <main+0x1ac>)
 8001fd4:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 8001fd6:	4b50      	ldr	r3, [pc, #320]	; (8002118 <main+0x1ac>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a4f      	ldr	r2, [pc, #316]	; (8002118 <main+0x1ac>)
 8001fdc:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 8001fde:	4b4e      	ldr	r3, [pc, #312]	; (8002118 <main+0x1ac>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a4e      	ldr	r2, [pc, #312]	; (800211c <main+0x1b0>)
 8001fe4:	6013      	str	r3, [r2, #0]
  PIDAController_Init(&PidVelo);
 8001fe6:	484e      	ldr	r0, [pc, #312]	; (8002120 <main+0x1b4>)
 8001fe8:	f7ff f9cc 	bl	8001384 <PIDAController_Init>
  PIDAController_Init(&PidPos);
 8001fec:	484d      	ldr	r0, [pc, #308]	; (8002124 <main+0x1b8>)
 8001fee:	f7ff f9c9 	bl	8001384 <PIDAController_Init>
  // Reset all Parameter
  Robotinit(&Robot);
 8001ff2:	484d      	ldr	r0, [pc, #308]	; (8002128 <main+0x1bc>)
 8001ff4:	f7ff fab8 	bl	8001568 <Robotinit>
  RobotRunToPositon(360.0,51.0);
 8001ff8:	eddf 0a4c 	vldr	s1, [pc, #304]	; 800212c <main+0x1c0>
 8001ffc:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8002130 <main+0x1c4>
 8002000:	f001 fdfc 	bl	8003bfc <RobotRunToPositon>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timeElapsed[0] = Micros();
 8002004:	f001 ff5a 	bl	8003ebc <Micros>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4949      	ldr	r1, [pc, #292]	; (8002134 <main+0x1c8>)
 800200e:	e9c1 2300 	strd	r2, r3, [r1]
	  timeElapsed[1] = HAL_GetTick();
 8002012:	f002 fabd 	bl	8004590 <HAL_GetTick>
 8002016:	4603      	mov	r3, r0
 8002018:	2200      	movs	r2, #0
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	4b45      	ldr	r3, [pc, #276]	; (8002134 <main+0x1c8>)
 8002020:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002024:	e9c3 1202 	strd	r1, r2, [r3, #8]
	  RobotstateManagement();
 8002028:	f001 fa4e 	bl	80034c8 <RobotstateManagement>
	  if(Micros() - EndEffLoopTime > 100000)
 800202c:	f001 ff46 	bl	8003ebc <Micros>
 8002030:	4b41      	ldr	r3, [pc, #260]	; (8002138 <main+0x1cc>)
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	1a84      	subs	r4, r0, r2
 8002038:	eb61 0503 	sbc.w	r5, r1, r3
 800203c:	4b3f      	ldr	r3, [pc, #252]	; (800213c <main+0x1d0>)
 800203e:	429c      	cmp	r4, r3
 8002040:	f175 0300 	sbcs.w	r3, r5, #0
 8002044:	d308      	bcc.n	8002058 <main+0xec>
	  {
		  EndEffLoopTime = Micros();
 8002046:	f001 ff39 	bl	8003ebc <Micros>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	493a      	ldr	r1, [pc, #232]	; (8002138 <main+0x1cc>)
 8002050:	e9c1 2300 	strd	r2, r3, [r1]
		  EndEffstateManagement();
 8002054:	f001 fb78 	bl	8003748 <EndEffstateManagement>
	  }
	  if(Micros() - ControlLoopTime >= 10000)
 8002058:	f001 ff30 	bl	8003ebc <Micros>
 800205c:	4b38      	ldr	r3, [pc, #224]	; (8002140 <main+0x1d4>)
 800205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002062:	ebb0 0802 	subs.w	r8, r0, r2
 8002066:	eb61 0903 	sbc.w	r9, r1, r3
 800206a:	f242 7310 	movw	r3, #10000	; 0x2710
 800206e:	4598      	cmp	r8, r3
 8002070:	f179 0300 	sbcs.w	r3, r9, #0
 8002074:	d33b      	bcc.n	80020ee <main+0x182>
	  {
		ControlLoopTime  = Micros();
 8002076:	f001 ff21 	bl	8003ebc <Micros>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4930      	ldr	r1, [pc, #192]	; (8002140 <main+0x1d4>)
 8002080:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStartTime = Micros();
 8002084:	f001 ff1a 	bl	8003ebc <Micros>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	492d      	ldr	r1, [pc, #180]	; (8002144 <main+0x1d8>)
 800208e:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 8002092:	f000 fb5d 	bl	8002750 <EncoderRead>
//		KalmanFilterFunction(&KalmanVar,PositionDeg[0]);
		KalmanFilterFunction(&KalmanVar,PositionDeg[0],VelocityDeg);
 8002096:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <main+0x1dc>)
 8002098:	edd3 7a00 	vldr	s15, [r3]
 800209c:	4b2b      	ldr	r3, [pc, #172]	; (800214c <main+0x1e0>)
 800209e:	ed93 7a00 	vldr	s14, [r3]
 80020a2:	eef0 0a47 	vmov.f32	s1, s14
 80020a6:	eeb0 0a67 	vmov.f32	s0, s15
 80020aa:	4816      	ldr	r0, [pc, #88]	; (8002104 <main+0x198>)
 80020ac:	f7ff f836 	bl	800111c <KalmanFilterFunction>
		Robot.Position = PositionDeg[0];
 80020b0:	4b25      	ldr	r3, [pc, #148]	; (8002148 <main+0x1dc>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <main+0x1bc>)
 80020b6:	6013      	str	r3, [r2, #0]
		Robot.Velocity = KalmanVar.MatState_Data[1];
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <main+0x198>)
 80020ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80020be:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <main+0x1bc>)
 80020c0:	6053      	str	r3, [r2, #4]
		ControllLoopAndErrorHandler();
 80020c2:	f000 fcbb 	bl	8002a3c <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 80020c6:	f001 fef9 	bl	8003ebc <Micros>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4920      	ldr	r1, [pc, #128]	; (8002150 <main+0x1e4>)
 80020d0:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 80020d4:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <main+0x1e4>)
 80020d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020da:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <main+0x1d8>)
 80020dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e0:	ebb0 0a02 	subs.w	sl, r0, r2
 80020e4:	eb61 0b03 	sbc.w	fp, r1, r3
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <main+0x1e8>)
 80020ea:	e9c3 ab00 	strd	sl, fp, [r3]
	  }
	  if(timeElapsed[0] > 12000000){
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <main+0x1c8>)
 80020f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f4:	4918      	ldr	r1, [pc, #96]	; (8002158 <main+0x1ec>)
 80020f6:	428a      	cmp	r2, r1
 80020f8:	f173 0300 	sbcs.w	r3, r3, #0
 80020fc:	d382      	bcc.n	8002004 <main+0x98>
		  NVIC_SystemReset();
 80020fe:	f7ff ff1f 	bl	8001f40 <__NVIC_SystemReset>
 8002102:	bf00      	nop
 8002104:	20000034 	.word	0x20000034
 8002108:	2000086c 	.word	0x2000086c
 800210c:	200004b0 	.word	0x200004b0
 8002110:	20000588 	.word	0x20000588
 8002114:	200004f8 	.word	0x200004f8
 8002118:	200007e0 	.word	0x200007e0
 800211c:	200007ec 	.word	0x200007ec
 8002120:	20000800 	.word	0x20000800
 8002124:	20000834 	.word	0x20000834
 8002128:	200006d4 	.word	0x200006d4
 800212c:	424c0000 	.word	0x424c0000
 8002130:	43b40000 	.word	0x43b40000
 8002134:	20000778 	.word	0x20000778
 8002138:	20000788 	.word	0x20000788
 800213c:	000186a1 	.word	0x000186a1
 8002140:	20000ae0 	.word	0x20000ae0
 8002144:	20000ab0 	.word	0x20000ab0
 8002148:	200007f0 	.word	0x200007f0
 800214c:	200007f8 	.word	0x200007f8
 8002150:	20000ab8 	.word	0x20000ab8
 8002154:	20000ac0 	.word	0x20000ac0
 8002158:	00b71b01 	.word	0x00b71b01

0800215c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b094      	sub	sp, #80	; 0x50
 8002160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002162:	f107 0320 	add.w	r3, r7, #32
 8002166:	2230      	movs	r2, #48	; 0x30
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f008 fbea 	bl	800a944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	4b27      	ldr	r3, [pc, #156]	; (8002224 <SystemClock_Config+0xc8>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	4a26      	ldr	r2, [pc, #152]	; (8002224 <SystemClock_Config+0xc8>)
 800218a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218e:	6413      	str	r3, [r2, #64]	; 0x40
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <SystemClock_Config+0xc8>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800219c:	2300      	movs	r3, #0
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	4b21      	ldr	r3, [pc, #132]	; (8002228 <SystemClock_Config+0xcc>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a20      	ldr	r2, [pc, #128]	; (8002228 <SystemClock_Config+0xcc>)
 80021a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <SystemClock_Config+0xcc>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021b8:	2302      	movs	r3, #2
 80021ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021bc:	2301      	movs	r3, #1
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021c0:	2310      	movs	r3, #16
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c4:	2302      	movs	r3, #2
 80021c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021c8:	2300      	movs	r3, #0
 80021ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021cc:	2308      	movs	r3, #8
 80021ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80021d0:	2364      	movs	r3, #100	; 0x64
 80021d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021d4:	2302      	movs	r3, #2
 80021d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021d8:	2304      	movs	r3, #4
 80021da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021dc:	f107 0320 	add.w	r3, r7, #32
 80021e0:	4618      	mov	r0, r3
 80021e2:	f005 f883 	bl	80072ec <HAL_RCC_OscConfig>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021ec:	f001 fe7e 	bl	8003eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021f0:	230f      	movs	r3, #15
 80021f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021f4:	2302      	movs	r3, #2
 80021f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002200:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	2103      	movs	r1, #3
 800220c:	4618      	mov	r0, r3
 800220e:	f005 fae5 	bl	80077dc <HAL_RCC_ClockConfig>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002218:	f001 fe68 	bl	8003eec <Error_Handler>
  }
}
 800221c:	bf00      	nop
 800221e:	3750      	adds	r7, #80	; 0x50
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40023800 	.word	0x40023800
 8002228:	40007000 	.word	0x40007000

0800222c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <MX_I2C1_Init+0x50>)
 8002232:	4a13      	ldr	r2, [pc, #76]	; (8002280 <MX_I2C1_Init+0x54>)
 8002234:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <MX_I2C1_Init+0x50>)
 8002238:	4a12      	ldr	r2, [pc, #72]	; (8002284 <MX_I2C1_Init+0x58>)
 800223a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <MX_I2C1_Init+0x50>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <MX_I2C1_Init+0x50>)
 8002244:	2200      	movs	r2, #0
 8002246:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <MX_I2C1_Init+0x50>)
 800224a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800224e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <MX_I2C1_Init+0x50>)
 8002252:	2200      	movs	r2, #0
 8002254:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <MX_I2C1_Init+0x50>)
 8002258:	2200      	movs	r2, #0
 800225a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800225c:	4b07      	ldr	r3, [pc, #28]	; (800227c <MX_I2C1_Init+0x50>)
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <MX_I2C1_Init+0x50>)
 8002264:	2200      	movs	r2, #0
 8002266:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002268:	4804      	ldr	r0, [pc, #16]	; (800227c <MX_I2C1_Init+0x50>)
 800226a:	f003 f8cb 	bl	8005404 <HAL_I2C_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002274:	f001 fe3a 	bl	8003eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	2000045c 	.word	0x2000045c
 8002280:	40005400 	.word	0x40005400
 8002284:	00061a80 	.word	0x00061a80

08002288 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b092      	sub	sp, #72	; 0x48
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800228e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
 80022a8:	615a      	str	r2, [r3, #20]
 80022aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	2220      	movs	r2, #32
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f008 fb46 	bl	800a944 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022b8:	4b33      	ldr	r3, [pc, #204]	; (8002388 <MX_TIM1_Init+0x100>)
 80022ba:	4a34      	ldr	r2, [pc, #208]	; (800238c <MX_TIM1_Init+0x104>)
 80022bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80022be:	4b32      	ldr	r3, [pc, #200]	; (8002388 <MX_TIM1_Init+0x100>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c4:	4b30      	ldr	r3, [pc, #192]	; (8002388 <MX_TIM1_Init+0x100>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80022ca:	4b2f      	ldr	r3, [pc, #188]	; (8002388 <MX_TIM1_Init+0x100>)
 80022cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80022d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d2:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <MX_TIM1_Init+0x100>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022d8:	4b2b      	ldr	r3, [pc, #172]	; (8002388 <MX_TIM1_Init+0x100>)
 80022da:	2200      	movs	r2, #0
 80022dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022de:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <MX_TIM1_Init+0x100>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022e4:	4828      	ldr	r0, [pc, #160]	; (8002388 <MX_TIM1_Init+0x100>)
 80022e6:	f005 fd7a 	bl	8007dde <HAL_TIM_PWM_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80022f0:	f001 fdfc 	bl	8003eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f4:	2300      	movs	r3, #0
 80022f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002300:	4619      	mov	r1, r3
 8002302:	4821      	ldr	r0, [pc, #132]	; (8002388 <MX_TIM1_Init+0x100>)
 8002304:	f006 fd24 	bl	8008d50 <HAL_TIMEx_MasterConfigSynchronization>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800230e:	f001 fded 	bl	8003eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002312:	2360      	movs	r3, #96	; 0x60
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800231a:	2300      	movs	r3, #0
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800231e:	2300      	movs	r3, #0
 8002320:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800232e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002332:	2200      	movs	r2, #0
 8002334:	4619      	mov	r1, r3
 8002336:	4814      	ldr	r0, [pc, #80]	; (8002388 <MX_TIM1_Init+0x100>)
 8002338:	f006 f88c 	bl	8008454 <HAL_TIM_PWM_ConfigChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002342:	f001 fdd3 	bl	8003eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800235a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800235e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	4619      	mov	r1, r3
 8002368:	4807      	ldr	r0, [pc, #28]	; (8002388 <MX_TIM1_Init+0x100>)
 800236a:	f006 fd5f 	bl	8008e2c <HAL_TIMEx_ConfigBreakDeadTime>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002374:	f001 fdba 	bl	8003eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002378:	4803      	ldr	r0, [pc, #12]	; (8002388 <MX_TIM1_Init+0x100>)
 800237a:	f001 fef1 	bl	8004160 <HAL_TIM_MspPostInit>

}
 800237e:	bf00      	nop
 8002380:	3748      	adds	r7, #72	; 0x48
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200004b0 	.word	0x200004b0
 800238c:	40010000 	.word	0x40010000

08002390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08c      	sub	sp, #48	; 0x30
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	2224      	movs	r2, #36	; 0x24
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f008 fad0 	bl	800a944 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023ac:	4b21      	ldr	r3, [pc, #132]	; (8002434 <MX_TIM2_Init+0xa4>)
 80023ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023b4:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <MX_TIM2_Init+0xa4>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ba:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <MX_TIM2_Init+0xa4>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 80023c0:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <MX_TIM2_Init+0xa4>)
 80023c2:	f642 62df 	movw	r2, #11999	; 0x2edf
 80023c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c8:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <MX_TIM2_Init+0xa4>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ce:	4b19      	ldr	r3, [pc, #100]	; (8002434 <MX_TIM2_Init+0xa4>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023d4:	2303      	movs	r3, #3
 80023d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023dc:	2301      	movs	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023e8:	2300      	movs	r3, #0
 80023ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023ec:	2301      	movs	r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023f0:	2300      	movs	r3, #0
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80023f8:	f107 030c 	add.w	r3, r7, #12
 80023fc:	4619      	mov	r1, r3
 80023fe:	480d      	ldr	r0, [pc, #52]	; (8002434 <MX_TIM2_Init+0xa4>)
 8002400:	f005 fdec 	bl	8007fdc <HAL_TIM_Encoder_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800240a:	f001 fd6f 	bl	8003eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	4619      	mov	r1, r3
 800241a:	4806      	ldr	r0, [pc, #24]	; (8002434 <MX_TIM2_Init+0xa4>)
 800241c:	f006 fc98 	bl	8008d50 <HAL_TIMEx_MasterConfigSynchronization>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002426:	f001 fd61 	bl	8003eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800242a:	bf00      	nop
 800242c:	3730      	adds	r7, #48	; 0x30
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200004f8 	.word	0x200004f8

08002438 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800243e:	f107 0308 	add.w	r3, r7, #8
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800244c:	463b      	mov	r3, r7
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002454:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <MX_TIM5_Init+0x90>)
 8002456:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <MX_TIM5_Init+0x94>)
 8002458:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 800245a:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <MX_TIM5_Init+0x90>)
 800245c:	2263      	movs	r2, #99	; 0x63
 800245e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <MX_TIM5_Init+0x90>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <MX_TIM5_Init+0x90>)
 8002468:	4a19      	ldr	r2, [pc, #100]	; (80024d0 <MX_TIM5_Init+0x98>)
 800246a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246c:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <MX_TIM5_Init+0x90>)
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002472:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <MX_TIM5_Init+0x90>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002478:	4813      	ldr	r0, [pc, #76]	; (80024c8 <MX_TIM5_Init+0x90>)
 800247a:	f005 fbcf 	bl	8007c1c <HAL_TIM_Base_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8002484:	f001 fd32 	bl	8003eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	4619      	mov	r1, r3
 8002494:	480c      	ldr	r0, [pc, #48]	; (80024c8 <MX_TIM5_Init+0x90>)
 8002496:	f006 f89f 	bl	80085d8 <HAL_TIM_ConfigClockSource>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 80024a0:	f001 fd24 	bl	8003eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024a4:	2320      	movs	r3, #32
 80024a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024ac:	463b      	mov	r3, r7
 80024ae:	4619      	mov	r1, r3
 80024b0:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_TIM5_Init+0x90>)
 80024b2:	f006 fc4d 	bl	8008d50 <HAL_TIMEx_MasterConfigSynchronization>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 80024bc:	f001 fd16 	bl	8003eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80024c0:	bf00      	nop
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000540 	.word	0x20000540
 80024cc:	40000c00 	.word	0x40000c00
 80024d0:	0001869f 	.word	0x0001869f

080024d4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80024d8:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <MX_TIM11_Init+0x40>)
 80024da:	4a0f      	ldr	r2, [pc, #60]	; (8002518 <MX_TIM11_Init+0x44>)
 80024dc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80024de:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <MX_TIM11_Init+0x40>)
 80024e0:	2263      	movs	r2, #99	; 0x63
 80024e2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <MX_TIM11_Init+0x40>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <MX_TIM11_Init+0x40>)
 80024ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024f0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <MX_TIM11_Init+0x40>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <MX_TIM11_Init+0x40>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80024fe:	4805      	ldr	r0, [pc, #20]	; (8002514 <MX_TIM11_Init+0x40>)
 8002500:	f005 fb8c 	bl	8007c1c <HAL_TIM_Base_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800250a:	f001 fcef 	bl	8003eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000588 	.word	0x20000588
 8002518:	40014800 	.word	0x40014800

0800251c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <MX_USART2_UART_Init+0x50>)
 8002522:	4a13      	ldr	r2, [pc, #76]	; (8002570 <MX_USART2_UART_Init+0x54>)
 8002524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <MX_USART2_UART_Init+0x50>)
 8002528:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 800252c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <MX_USART2_UART_Init+0x50>)
 8002530:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002534:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <MX_USART2_UART_Init+0x50>)
 8002538:	2200      	movs	r2, #0
 800253a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <MX_USART2_UART_Init+0x50>)
 800253e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002542:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <MX_USART2_UART_Init+0x50>)
 8002546:	220c      	movs	r2, #12
 8002548:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <MX_USART2_UART_Init+0x50>)
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_USART2_UART_Init+0x50>)
 8002552:	2200      	movs	r2, #0
 8002554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002556:	4805      	ldr	r0, [pc, #20]	; (800256c <MX_USART2_UART_Init+0x50>)
 8002558:	f006 fcce 	bl	8008ef8 <HAL_UART_Init>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8002562:	f001 fcc3 	bl	8003eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200005d0 	.word	0x200005d0
 8002570:	40004400 	.word	0x40004400

08002574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <MX_DMA_Init+0x4c>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a0f      	ldr	r2, [pc, #60]	; (80025c0 <MX_DMA_Init+0x4c>)
 8002584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <MX_DMA_Init+0x4c>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	2010      	movs	r0, #16
 800259c:	f002 f903 	bl	80047a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80025a0:	2010      	movs	r0, #16
 80025a2:	f002 f91c 	bl	80047de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2100      	movs	r1, #0
 80025aa:	2011      	movs	r0, #17
 80025ac:	f002 f8fb 	bl	80047a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80025b0:	2011      	movs	r0, #17
 80025b2:	f002 f914 	bl	80047de <HAL_NVIC_EnableIRQ>

}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023800 	.word	0x40023800

080025c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	; 0x28
 80025c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	4b4e      	ldr	r3, [pc, #312]	; (8002718 <MX_GPIO_Init+0x154>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a4d      	ldr	r2, [pc, #308]	; (8002718 <MX_GPIO_Init+0x154>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ea:	4b4b      	ldr	r3, [pc, #300]	; (8002718 <MX_GPIO_Init+0x154>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <MX_GPIO_Init+0x154>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a46      	ldr	r2, [pc, #280]	; (8002718 <MX_GPIO_Init+0x154>)
 8002600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b44      	ldr	r3, [pc, #272]	; (8002718 <MX_GPIO_Init+0x154>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	4b40      	ldr	r3, [pc, #256]	; (8002718 <MX_GPIO_Init+0x154>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a3f      	ldr	r2, [pc, #252]	; (8002718 <MX_GPIO_Init+0x154>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <MX_GPIO_Init+0x154>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	4b39      	ldr	r3, [pc, #228]	; (8002718 <MX_GPIO_Init+0x154>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a38      	ldr	r2, [pc, #224]	; (8002718 <MX_GPIO_Init+0x154>)
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b36      	ldr	r3, [pc, #216]	; (8002718 <MX_GPIO_Init+0x154>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 800264a:	2200      	movs	r2, #0
 800264c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002650:	4832      	ldr	r0, [pc, #200]	; (800271c <MX_GPIO_Init+0x158>)
 8002652:	f002 fe8b 	bl	800536c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin, GPIO_PIN_RESET);
 8002656:	2200      	movs	r2, #0
 8002658:	f44f 6183 	mov.w	r1, #1048	; 0x418
 800265c:	4830      	ldr	r0, [pc, #192]	; (8002720 <MX_GPIO_Init+0x15c>)
 800265e:	f002 fe85 	bl	800536c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002668:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800266c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002672:	f107 0314 	add.w	r3, r7, #20
 8002676:	4619      	mov	r1, r3
 8002678:	482a      	ldr	r0, [pc, #168]	; (8002724 <MX_GPIO_Init+0x160>)
 800267a:	f002 fcdb 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 800267e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002684:	2301      	movs	r3, #1
 8002686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	4619      	mov	r1, r3
 8002696:	4821      	ldr	r0, [pc, #132]	; (800271c <MX_GPIO_Init+0x158>)
 8002698:	f002 fccc 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_RedLamp_Pin Pin_YelLamp_Pin Pin_BlueLamp_Pin */
  GPIO_InitStruct.Pin = Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin;
 800269c:	f44f 6383 	mov.w	r3, #1048	; 0x418
 80026a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a2:	2301      	movs	r3, #1
 80026a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	4619      	mov	r1, r3
 80026b4:	481a      	ldr	r0, [pc, #104]	; (8002720 <MX_GPIO_Init+0x15c>)
 80026b6:	f002 fcbd 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Proxi_Pin */
  GPIO_InitStruct.Pin = Pin_Proxi_Pin;
 80026ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80026c0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80026c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Proxi_GPIO_Port, &GPIO_InitStruct);
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	4619      	mov	r1, r3
 80026d0:	4812      	ldr	r0, [pc, #72]	; (800271c <MX_GPIO_Init+0x158>)
 80026d2:	f002 fcaf 	bl	8005034 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Emer_Pin */
  GPIO_InitStruct.Pin = Pin_Emer_Pin;
 80026d6:	2320      	movs	r3, #32
 80026d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80026da:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80026de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Emer_GPIO_Port, &GPIO_InitStruct);
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	4619      	mov	r1, r3
 80026ea:	480d      	ldr	r0, [pc, #52]	; (8002720 <MX_GPIO_Init+0x15c>)
 80026ec:	f002 fca2 	bl	8005034 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80026f0:	2200      	movs	r2, #0
 80026f2:	2100      	movs	r1, #0
 80026f4:	2017      	movs	r0, #23
 80026f6:	f002 f856 	bl	80047a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80026fa:	2017      	movs	r0, #23
 80026fc:	f002 f86f 	bl	80047de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002700:	2200      	movs	r2, #0
 8002702:	2100      	movs	r1, #0
 8002704:	2028      	movs	r0, #40	; 0x28
 8002706:	f002 f84e 	bl	80047a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800270a:	2028      	movs	r0, #40	; 0x28
 800270c:	f002 f867 	bl	80047de <HAL_NVIC_EnableIRQ>

}
 8002710:	bf00      	nop
 8002712:	3728      	adds	r7, #40	; 0x28
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40023800 	.word	0x40023800
 800271c:	40020000 	.word	0x40020000
 8002720:	40020400 	.word	0x40020400
 8002724:	40020800 	.word	0x40020800

08002728 <Int32Abs>:

/* USER CODE BEGIN 4 */
uint32_t Int32Abs(int32_t number)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	if(number<0){
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	da02      	bge.n	800273c <Int32Abs+0x14>
		return number*-1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	425b      	negs	r3, r3
 800273a:	e000      	b.n	800273e <Int32Abs+0x16>
	}else{
		return number;
 800273c:	687b      	ldr	r3, [r7, #4]
	}
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	0000      	movs	r0, r0
 800274c:	0000      	movs	r0, r0
	...

08002750 <EncoderRead>:

void EncoderRead()
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 8002754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	461a      	mov	r2, r3
 800275c:	4b32      	ldr	r3, [pc, #200]	; (8002828 <EncoderRead+0xd8>)
 800275e:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 8002760:	4b31      	ldr	r3, [pc, #196]	; (8002828 <EncoderRead+0xd8>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b30      	ldr	r3, [pc, #192]	; (8002828 <EncoderRead+0xd8>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	1ad2      	subs	r2, r2, r3
 800276a:	4b30      	ldr	r3, [pc, #192]	; (800282c <EncoderRead+0xdc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	425b      	negs	r3, r3
 8002770:	429a      	cmp	r2, r3
 8002772:	da07      	bge.n	8002784 <EncoderRead+0x34>
		WrappingStep+=12000;
 8002774:	4b2e      	ldr	r3, [pc, #184]	; (8002830 <EncoderRead+0xe0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 800277c:	3320      	adds	r3, #32
 800277e:	4a2c      	ldr	r2, [pc, #176]	; (8002830 <EncoderRead+0xe0>)
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e00f      	b.n	80027a4 <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 8002784:	4b28      	ldr	r3, [pc, #160]	; (8002828 <EncoderRead+0xd8>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b27      	ldr	r3, [pc, #156]	; (8002828 <EncoderRead+0xd8>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	1ad2      	subs	r2, r2, r3
 800278e:	4b27      	ldr	r3, [pc, #156]	; (800282c <EncoderRead+0xdc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	db06      	blt.n	80027a4 <EncoderRead+0x54>
		WrappingStep-=12000;
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <EncoderRead+0xe0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 800279e:	3b20      	subs	r3, #32
 80027a0:	4a23      	ldr	r2, [pc, #140]	; (8002830 <EncoderRead+0xe0>)
 80027a2:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 80027a4:	4b20      	ldr	r3, [pc, #128]	; (8002828 <EncoderRead+0xd8>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b21      	ldr	r3, [pc, #132]	; (8002830 <EncoderRead+0xe0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4413      	add	r3, r2
 80027ae:	4a21      	ldr	r2, [pc, #132]	; (8002834 <EncoderRead+0xe4>)
 80027b0:	6013      	str	r3, [r2, #0]
	PositionDeg[0] = (PositionRaw/12000.0)*360.0;
 80027b2:	4b20      	ldr	r3, [pc, #128]	; (8002834 <EncoderRead+0xe4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd fe60 	bl	800047c <__aeabi_i2d>
 80027bc:	a318      	add	r3, pc, #96	; (adr r3, 8002820 <EncoderRead+0xd0>)
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c2:	f7fd ffef 	bl	80007a4 <__aeabi_ddiv>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4610      	mov	r0, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <EncoderRead+0xe8>)
 80027d4:	f7fd febc 	bl	8000550 <__aeabi_dmul>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	f7fe f8e8 	bl	80009b4 <__aeabi_d2f>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4a15      	ldr	r2, [pc, #84]	; (800283c <EncoderRead+0xec>)
 80027e8:	6013      	str	r3, [r2, #0]
	VelocityDeg = ((PositionDeg[0] - PositionDeg[1])/dt);
 80027ea:	4b14      	ldr	r3, [pc, #80]	; (800283c <EncoderRead+0xec>)
 80027ec:	ed93 7a00 	vldr	s14, [r3]
 80027f0:	4b12      	ldr	r3, [pc, #72]	; (800283c <EncoderRead+0xec>)
 80027f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80027f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027fa:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002840 <EncoderRead+0xf0>
 80027fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <EncoderRead+0xf4>)
 8002804:	edc3 7a00 	vstr	s15, [r3]
	EncoderRawData[1] = EncoderRawData[0];
 8002808:	4b07      	ldr	r3, [pc, #28]	; (8002828 <EncoderRead+0xd8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a06      	ldr	r2, [pc, #24]	; (8002828 <EncoderRead+0xd8>)
 800280e:	6053      	str	r3, [r2, #4]
	PositionDeg[1] = PositionDeg[0];
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <EncoderRead+0xec>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a09      	ldr	r2, [pc, #36]	; (800283c <EncoderRead+0xec>)
 8002816:	6053      	str	r3, [r2, #4]
}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}
 800281c:	f3af 8000 	nop.w
 8002820:	00000000 	.word	0x00000000
 8002824:	40c77000 	.word	0x40c77000
 8002828:	200007e0 	.word	0x200007e0
 800282c:	2000042c 	.word	0x2000042c
 8002830:	200007e8 	.word	0x200007e8
 8002834:	200007ec 	.word	0x200007ec
 8002838:	40768000 	.word	0x40768000
 800283c:	200007f0 	.word	0x200007f0
 8002840:	3c23d70a 	.word	0x3c23d70a
 8002844:	200007f8 	.word	0x200007f8

08002848 <Drivemotor>:

void Drivemotor(int32_t PWM){
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
		if(PWM<=0 && PWM>=-PWM_MAX){
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	dc11      	bgt.n	800287a <Drivemotor+0x32>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a25      	ldr	r2, [pc, #148]	; (80028f0 <Drivemotor+0xa8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	db0d      	blt.n	800287a <Drivemotor+0x32>
			htim1.Instance->CCR1=Int32Abs(PWM);
 800285e:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <Drivemotor+0xac>)
 8002860:	681c      	ldr	r4, [r3, #0]
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ff60 	bl	8002728 <Int32Abs>
 8002868:	4603      	mov	r3, r0
 800286a:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 800286c:	2200      	movs	r2, #0
 800286e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002872:	4821      	ldr	r0, [pc, #132]	; (80028f8 <Drivemotor+0xb0>)
 8002874:	f002 fd7a 	bl	800536c <HAL_GPIO_WritePin>
 8002878:	e036      	b.n	80028e8 <Drivemotor+0xa0>
		}else if (PWM<-PWM_MAX){
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <Drivemotor+0xa8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	da0b      	bge.n	800289a <Drivemotor+0x52>
			htim1.Instance->CCR1=PWM_MAX;
 8002882:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <Drivemotor+0xac>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f242 7210 	movw	r2, #10000	; 0x2710
 800288a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 800288c:	2200      	movs	r2, #0
 800288e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002892:	4819      	ldr	r0, [pc, #100]	; (80028f8 <Drivemotor+0xb0>)
 8002894:	f002 fd6a 	bl	800536c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}else if(PWM>PWM_MAX){
			htim1.Instance->CCR1=PWM_MAX;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}
}
 8002898:	e026      	b.n	80028e8 <Drivemotor+0xa0>
		}else if(PWM>=0 && PWM<=PWM_MAX){
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	db12      	blt.n	80028c6 <Drivemotor+0x7e>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80028a6:	4293      	cmp	r3, r2
 80028a8:	dc0d      	bgt.n	80028c6 <Drivemotor+0x7e>
			htim1.Instance->CCR1=Int32Abs(PWM);
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <Drivemotor+0xac>)
 80028ac:	681c      	ldr	r4, [r3, #0]
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ff3a 	bl	8002728 <Int32Abs>
 80028b4:	4603      	mov	r3, r0
 80028b6:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 80028b8:	2201      	movs	r2, #1
 80028ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028be:	480e      	ldr	r0, [pc, #56]	; (80028f8 <Drivemotor+0xb0>)
 80028c0:	f002 fd54 	bl	800536c <HAL_GPIO_WritePin>
 80028c4:	e010      	b.n	80028e8 <Drivemotor+0xa0>
		}else if(PWM>PWM_MAX){
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80028cc:	4293      	cmp	r3, r2
 80028ce:	dd0b      	ble.n	80028e8 <Drivemotor+0xa0>
			htim1.Instance->CCR1=PWM_MAX;
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <Drivemotor+0xac>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80028d8:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 80028da:	2201      	movs	r2, #1
 80028dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028e0:	4805      	ldr	r0, [pc, #20]	; (80028f8 <Drivemotor+0xb0>)
 80028e2:	f002 fd43 	bl	800536c <HAL_GPIO_WritePin>
}
 80028e6:	e7ff      	b.n	80028e8 <Drivemotor+0xa0>
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd90      	pop	{r4, r7, pc}
 80028f0:	ffffd8f0 	.word	0xffffd8f0
 80028f4:	200004b0 	.word	0x200004b0
 80028f8:	40020000 	.word	0x40020000
 80028fc:	00000000 	.word	0x00000000

08002900 <InverseTFofMotor>:

float InverseTFofMotor(float Velo, float PredictVelo)
{
 8002900:	b5b0      	push	{r4, r5, r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	ed87 0a01 	vstr	s0, [r7, #4]
 800290a:	edc7 0a00 	vstr	s1, [r7]
	static float VeloLast = 0;
	static float Voltage = 0;
	static float VoltageLast = 0;
	static float Pwm = 0;
	Voltage = (PredictVelo - (1.298649403776808*Velo) + (0.413830007244888*VeloLast) - (0.492093238713741*VoltageLast))/0.660367603263632;
 800290e:	6838      	ldr	r0, [r7, #0]
 8002910:	f7fd fdc6 	bl	80004a0 <__aeabi_f2d>
 8002914:	4604      	mov	r4, r0
 8002916:	460d      	mov	r5, r1
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7fd fdc1 	bl	80004a0 <__aeabi_f2d>
 800291e:	a345      	add	r3, pc, #276	; (adr r3, 8002a34 <InverseTFofMotor+0x134>)
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	f7fd fe14 	bl	8000550 <__aeabi_dmul>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4620      	mov	r0, r4
 800292e:	4629      	mov	r1, r5
 8002930:	f7fd fc56 	bl	80001e0 <__aeabi_dsub>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4614      	mov	r4, r2
 800293a:	461d      	mov	r5, r3
 800293c:	4b38      	ldr	r3, [pc, #224]	; (8002a20 <InverseTFofMotor+0x120>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fdad 	bl	80004a0 <__aeabi_f2d>
 8002946:	a32e      	add	r3, pc, #184	; (adr r3, 8002a00 <InverseTFofMotor+0x100>)
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	f7fd fe00 	bl	8000550 <__aeabi_dmul>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4620      	mov	r0, r4
 8002956:	4629      	mov	r1, r5
 8002958:	f7fd fc44 	bl	80001e4 <__adddf3>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4614      	mov	r4, r2
 8002962:	461d      	mov	r5, r3
 8002964:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <InverseTFofMotor+0x124>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fd99 	bl	80004a0 <__aeabi_f2d>
 800296e:	a326      	add	r3, pc, #152	; (adr r3, 8002a08 <InverseTFofMotor+0x108>)
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	f7fd fdec 	bl	8000550 <__aeabi_dmul>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4620      	mov	r0, r4
 800297e:	4629      	mov	r1, r5
 8002980:	f7fd fc2e 	bl	80001e0 <__aeabi_dsub>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	a320      	add	r3, pc, #128	; (adr r3, 8002a10 <InverseTFofMotor+0x110>)
 800298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002992:	f7fd ff07 	bl	80007a4 <__aeabi_ddiv>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	f7fe f809 	bl	80009b4 <__aeabi_d2f>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4a20      	ldr	r2, [pc, #128]	; (8002a28 <InverseTFofMotor+0x128>)
 80029a6:	6013      	str	r3, [r2, #0]
	Pwm = (Voltage * 10000.0)/12.0;
 80029a8:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <InverseTFofMotor+0x128>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fd fd77 	bl	80004a0 <__aeabi_f2d>
 80029b2:	a319      	add	r3, pc, #100	; (adr r3, 8002a18 <InverseTFofMotor+0x118>)
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	f7fd fdca 	bl	8000550 <__aeabi_dmul>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <InverseTFofMotor+0x12c>)
 80029ca:	f7fd feeb 	bl	80007a4 <__aeabi_ddiv>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	f7fd ffed 	bl	80009b4 <__aeabi_d2f>
 80029da:	4603      	mov	r3, r0
 80029dc:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <InverseTFofMotor+0x130>)
 80029de:	6013      	str	r3, [r2, #0]
	VoltageLast = Voltage;
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <InverseTFofMotor+0x128>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0f      	ldr	r2, [pc, #60]	; (8002a24 <InverseTFofMotor+0x124>)
 80029e6:	6013      	str	r3, [r2, #0]
	VeloLast = Velo;
 80029e8:	4a0d      	ldr	r2, [pc, #52]	; (8002a20 <InverseTFofMotor+0x120>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6013      	str	r3, [r2, #0]
	return Pwm;
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <InverseTFofMotor+0x130>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	ee07 3a90 	vmov	s15, r3
}
 80029f6:	eeb0 0a67 	vmov.f32	s0, s15
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002a00:	dace185d 	.word	0xdace185d
 8002a04:	3fda7c30 	.word	0x3fda7c30
 8002a08:	a3b6ed62 	.word	0xa3b6ed62
 8002a0c:	3fdf7e74 	.word	0x3fdf7e74
 8002a10:	3d6b5dd1 	.word	0x3d6b5dd1
 8002a14:	3fe521bb 	.word	0x3fe521bb
 8002a18:	00000000 	.word	0x00000000
 8002a1c:	40c38800 	.word	0x40c38800
 8002a20:	20000afc 	.word	0x20000afc
 8002a24:	20000b00 	.word	0x20000b00
 8002a28:	20000b04 	.word	0x20000b04
 8002a2c:	40280000 	.word	0x40280000
 8002a30:	20000b08 	.word	0x20000b08
 8002a34:	98e30f85 	.word	0x98e30f85
 8002a38:	3ff4c744 	.word	0x3ff4c744

08002a3c <ControllLoopAndErrorHandler>:


void ControllLoopAndErrorHandler()
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
//	else
//	{
//		setpointLast = 0;
//		setpoint = 0;
//	}
	setpoint = 60.0;
 8002a40:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <ControllLoopAndErrorHandler+0x64>)
 8002a42:	4a18      	ldr	r2, [pc, #96]	; (8002aa4 <ControllLoopAndErrorHandler+0x68>)
 8002a44:	601a      	str	r2, [r3, #0]
	PIDAVelocityController_Update(&PidVelo, setpoint, KalmanVar.MatState_Data[1]);
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <ControllLoopAndErrorHandler+0x64>)
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <ControllLoopAndErrorHandler+0x6c>)
 8002a4e:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002a52:	eef0 0a47 	vmov.f32	s1, s14
 8002a56:	eeb0 0a67 	vmov.f32	s0, s15
 8002a5a:	4814      	ldr	r0, [pc, #80]	; (8002aac <ControllLoopAndErrorHandler+0x70>)
 8002a5c:	f7fe fcc2 	bl	80013e4 <PIDAVelocityController_Update>
	invTFOutput = InverseTFofMotor(setpointLast,setpoint);
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <ControllLoopAndErrorHandler+0x74>)
 8002a62:	edd3 7a00 	vldr	s15, [r3]
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <ControllLoopAndErrorHandler+0x64>)
 8002a68:	ed93 7a00 	vldr	s14, [r3]
 8002a6c:	eef0 0a47 	vmov.f32	s1, s14
 8002a70:	eeb0 0a67 	vmov.f32	s0, s15
 8002a74:	f7ff ff44 	bl	8002900 <InverseTFofMotor>
 8002a78:	eef0 7a40 	vmov.f32	s15, s0
 8002a7c:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <ControllLoopAndErrorHandler+0x78>)
 8002a7e:	edc3 7a00 	vstr	s15, [r3]
	PWMCHECKER = PidVelo.ControllerOut;
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <ControllLoopAndErrorHandler+0x70>)
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	4a0c      	ldr	r2, [pc, #48]	; (8002ab8 <ControllLoopAndErrorHandler+0x7c>)
 8002a88:	6013      	str	r3, [r2, #0]
	Drivemotor(PWMCHECKER);
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <ControllLoopAndErrorHandler+0x7c>)
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a94:	ee17 0a90 	vmov	r0, s15
 8002a98:	f7ff fed6 	bl	8002848 <Drivemotor>
//	else
//	{
//		PWMCHECKER = 0.0;
//		Drivemotor(PWMCHECKER);
//	}
}
 8002a9c:	bf00      	nop
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20000ae8 	.word	0x20000ae8
 8002aa4:	42700000 	.word	0x42700000
 8002aa8:	20000034 	.word	0x20000034
 8002aac:	20000800 	.word	0x20000800
 8002ab0:	20000aec 	.word	0x20000aec
 8002ab4:	200007fc 	.word	0x200007fc
 8002ab8:	20000868 	.word	0x20000868

08002abc <Ringbuf_Init>:

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 8002ac0:	2214      	movs	r2, #20
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	480e      	ldr	r0, [pc, #56]	; (8002b00 <Ringbuf_Init+0x44>)
 8002ac6:	f007 ff3d 	bl	800a944 <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 8002aca:	2214      	movs	r2, #20
 8002acc:	2100      	movs	r1, #0
 8002ace:	480d      	ldr	r0, [pc, #52]	; (8002b04 <Ringbuf_Init+0x48>)
 8002ad0:	f007 ff38 	bl	800a944 <memset>

	oldPos = 0;
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <Ringbuf_Init+0x4c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <Ringbuf_Init+0x50>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 8002ae0:	2214      	movs	r2, #20
 8002ae2:	4907      	ldr	r1, [pc, #28]	; (8002b00 <Ringbuf_Init+0x44>)
 8002ae4:	480a      	ldr	r0, [pc, #40]	; (8002b10 <Ringbuf_Init+0x54>)
 8002ae6:	f006 fad3 	bl	8009090 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <Ringbuf_Init+0x58>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <Ringbuf_Init+0x58>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0208 	bic.w	r2, r2, #8
 8002af8:	601a      	str	r2, [r3, #0]
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	2000070c 	.word	0x2000070c
 8002b04:	20000720 	.word	0x20000720
 8002b08:	2000073e 	.word	0x2000073e
 8002b0c:	20000740 	.word	0x20000740
 8002b10:	200005d0 	.word	0x200005d0
 8002b14:	20000614 	.word	0x20000614

08002b18 <checkSum>:
	oldPos = 0;
	newPos = 0;
}

void checkSum (uint8_t *buffertoCheckSum, uint16_t Size)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
	uint8_t sum = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	73fb      	strb	r3, [r7, #15]
	modeByte = 0;
 8002b28:	4b52      	ldr	r3, [pc, #328]	; (8002c74 <checkSum+0x15c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
	switch(Size){
 8002b2e:	887b      	ldrh	r3, [r7, #2]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d84f      	bhi.n	8002bd6 <checkSum+0xbe>
 8002b36:	a201      	add	r2, pc, #4	; (adr r2, 8002b3c <checkSum+0x24>)
 8002b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3c:	08002c2d 	.word	0x08002c2d
 8002b40:	08002b4d 	.word	0x08002b4d
 8002b44:	08002c2d 	.word	0x08002c2d
 8002b48:	08002b73 	.word	0x08002b73
	case 1:
	case 3:
		break;
	case 2:
		if(!(checkAck(buffertoCheckSum, Size))) modeByte = sum = buffertoCheckSum[oldPos];
 8002b4c:	887b      	ldrh	r3, [r7, #2]
 8002b4e:	4619      	mov	r1, r3
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f897 	bl	8002c84 <checkAck>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d169      	bne.n	8002c30 <checkSum+0x118>
 8002b5c:	4b46      	ldr	r3, [pc, #280]	; (8002c78 <checkSum+0x160>)
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	73fb      	strb	r3, [r7, #15]
 8002b6a:	4a42      	ldr	r2, [pc, #264]	; (8002c74 <checkSum+0x15c>)
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	7013      	strb	r3, [r2, #0]
		break;
 8002b70:	e05e      	b.n	8002c30 <checkSum+0x118>
	case 4:
		if(checkAck(buffertoCheckSum, Size)) modeByte = sum = buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	4619      	mov	r1, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f884 	bl	8002c84 <checkAck>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <checkSum+0x80>
 8002b82:	4b3d      	ldr	r3, [pc, #244]	; (8002c78 <checkSum+0x160>)
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	3302      	adds	r3, #2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	73fb      	strb	r3, [r7, #15]
 8002b90:	4a38      	ldr	r2, [pc, #224]	; (8002c74 <checkSum+0x15c>)
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	7013      	strb	r3, [r2, #0]
		else{
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
			modeByte = buffertoCheckSum[oldPos];
		}
		break;
 8002b96:	e04c      	b.n	8002c32 <checkSum+0x11a>
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8002b98:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <checkSum+0x160>)
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	781a      	ldrb	r2, [r3, #0]
 8002ba4:	4b34      	ldr	r3, [pc, #208]	; (8002c78 <checkSum+0x160>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	440b      	add	r3, r1
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <checkSum+0x160>)
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	3302      	adds	r3, #2
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	440b      	add	r3, r1
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	73fb      	strb	r3, [r7, #15]
			modeByte = buffertoCheckSum[oldPos];
 8002bc4:	4b2c      	ldr	r3, [pc, #176]	; (8002c78 <checkSum+0x160>)
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <checkSum+0x15c>)
 8002bd2:	701a      	strb	r2, [r3, #0]
		break;
 8002bd4:	e02d      	b.n	8002c32 <checkSum+0x11a>
	default:
		modeByte = buffertoCheckSum[oldPos];
 8002bd6:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <checkSum+0x160>)
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4413      	add	r3, r2
 8002be0:	781a      	ldrb	r2, [r3, #0]
 8002be2:	4b24      	ldr	r3, [pc, #144]	; (8002c74 <checkSum+0x15c>)
 8002be4:	701a      	strb	r2, [r3, #0]
		for (int index = 0; index < Size-1; ++index)
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	e019      	b.n	8002c20 <checkSum+0x108>
		{
			sum = sum + buffertoCheckSum[oldPos+index % MainBuf_SIZE];
 8002bec:	4b22      	ldr	r3, [pc, #136]	; (8002c78 <checkSum+0x160>)
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	68b9      	ldr	r1, [r7, #8]
 8002bf4:	4b21      	ldr	r3, [pc, #132]	; (8002c7c <checkSum+0x164>)
 8002bf6:	fb83 2301 	smull	r2, r3, r3, r1
 8002bfa:	10da      	asrs	r2, r3, #3
 8002bfc:	17cb      	asrs	r3, r1, #31
 8002bfe:	1ad2      	subs	r2, r2, r3
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	1aca      	subs	r2, r1, r3
 8002c0a:	1883      	adds	r3, r0, r2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	4413      	add	r3, r2
 8002c18:	73fb      	strb	r3, [r7, #15]
		for (int index = 0; index < Size-1; ++index)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	887b      	ldrh	r3, [r7, #2]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	dbe0      	blt.n	8002bec <checkSum+0xd4>
 8002c2a:	e002      	b.n	8002c32 <checkSum+0x11a>
		break;
 8002c2c:	bf00      	nop
 8002c2e:	e000      	b.n	8002c32 <checkSum+0x11a>
		break;
 8002c30:	bf00      	nop
		}
	}

	if((uint8_t)buffertoCheckSum[oldPos+(Size-1) % MainBuf_SIZE] == (uint8_t)(~sum)) UARTstateManagement(MainBuf);
 8002c32:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <checkSum+0x160>)
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	887b      	ldrh	r3, [r7, #2]
 8002c3a:	1e59      	subs	r1, r3, #1
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <checkSum+0x164>)
 8002c3e:	fb83 2301 	smull	r2, r3, r3, r1
 8002c42:	10da      	asrs	r2, r3, #3
 8002c44:	17cb      	asrs	r3, r1, #31
 8002c46:	1ad2      	subs	r2, r2, r3
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	1aca      	subs	r2, r1, r3
 8002c52:	1883      	adds	r3, r0, r2
 8002c54:	461a      	mov	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	781a      	ldrb	r2, [r3, #0]
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d102      	bne.n	8002c6c <checkSum+0x154>
 8002c66:	4806      	ldr	r0, [pc, #24]	; (8002c80 <checkSum+0x168>)
 8002c68:	f000 f89a 	bl	8002da0 <UARTstateManagement>
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000769 	.word	0x20000769
 8002c78:	2000073e 	.word	0x2000073e
 8002c7c:	66666667 	.word	0x66666667
 8002c80:	20000720 	.word	0x20000720

08002c84 <checkAck>:

uint8_t checkAck (uint8_t *buffertoCheckAck, uint16_t Size)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
	if((buffertoCheckAck[oldPos] == 0b01011000) && (buffertoCheckAck[oldPos+1 % MainBuf_SIZE] == 0b01110101)) return 1;
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <checkAck+0x40>)
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b58      	cmp	r3, #88	; 0x58
 8002c9e:	d109      	bne.n	8002cb4 <checkAck+0x30>
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <checkAck+0x40>)
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b75      	cmp	r3, #117	; 0x75
 8002cae:	d101      	bne.n	8002cb4 <checkAck+0x30>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <checkAck+0x32>
	else return 0;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	2000073e 	.word	0x2000073e

08002cc8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	807b      	strh	r3, [r7, #2]
        if (huart->Instance == USART2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a28      	ldr	r2, [pc, #160]	; (8002d7c <HAL_UARTEx_RxEventCallback+0xb4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d14a      	bne.n	8002d74 <HAL_UARTEx_RxEventCallback+0xac>
        {
                oldPos = newPos;
 8002cde:	4b28      	ldr	r3, [pc, #160]	; (8002d80 <HAL_UARTEx_RxEventCallback+0xb8>)
 8002ce0:	881a      	ldrh	r2, [r3, #0]
 8002ce2:	4b28      	ldr	r3, [pc, #160]	; (8002d84 <HAL_UARTEx_RxEventCallback+0xbc>)
 8002ce4:	801a      	strh	r2, [r3, #0]
                dataSize = Size;
 8002ce6:	4a28      	ldr	r2, [pc, #160]	; (8002d88 <HAL_UARTEx_RxEventCallback+0xc0>)
 8002ce8:	887b      	ldrh	r3, [r7, #2]
 8002cea:	8013      	strh	r3, [r2, #0]
                if (oldPos+dataSize > MainBuf_SIZE)
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_UARTEx_RxEventCallback+0xbc>)
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <HAL_UARTEx_RxEventCallback+0xc0>)
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	2b14      	cmp	r3, #20
 8002cfa:	dd16      	ble.n	8002d2a <HAL_UARTEx_RxEventCallback+0x62>
                {
                        oldPos = 0;
 8002cfc:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <HAL_UARTEx_RxEventCallback+0xbc>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	801a      	strh	r2, [r3, #0]
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_UARTEx_RxEventCallback+0xbc>)
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <HAL_UARTEx_RxEventCallback+0xc4>)
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4a1e      	ldr	r2, [pc, #120]	; (8002d88 <HAL_UARTEx_RxEventCallback+0xc0>)
 8002d0e:	8812      	ldrh	r2, [r2, #0]
 8002d10:	491f      	ldr	r1, [pc, #124]	; (8002d90 <HAL_UARTEx_RxEventCallback+0xc8>)
 8002d12:	4618      	mov	r0, r3
 8002d14:	f007 fe08 	bl	800a928 <memcpy>
                        newPos = dataSize+oldPos;
 8002d18:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <HAL_UARTEx_RxEventCallback+0xc0>)
 8002d1a:	881a      	ldrh	r2, [r3, #0]
 8002d1c:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <HAL_UARTEx_RxEventCallback+0xbc>)
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	4413      	add	r3, r2
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <HAL_UARTEx_RxEventCallback+0xb8>)
 8002d26:	801a      	strh	r2, [r3, #0]
 8002d28:	e012      	b.n	8002d50 <HAL_UARTEx_RxEventCallback+0x88>
                }
                else
                {
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8002d2a:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <HAL_UARTEx_RxEventCallback+0xbc>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <HAL_UARTEx_RxEventCallback+0xc4>)
 8002d32:	4413      	add	r3, r2
 8002d34:	4a14      	ldr	r2, [pc, #80]	; (8002d88 <HAL_UARTEx_RxEventCallback+0xc0>)
 8002d36:	8812      	ldrh	r2, [r2, #0]
 8002d38:	4915      	ldr	r1, [pc, #84]	; (8002d90 <HAL_UARTEx_RxEventCallback+0xc8>)
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f007 fdf4 	bl	800a928 <memcpy>
                        newPos = dataSize+oldPos;
 8002d40:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <HAL_UARTEx_RxEventCallback+0xc0>)
 8002d42:	881a      	ldrh	r2, [r3, #0]
 8002d44:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <HAL_UARTEx_RxEventCallback+0xbc>)
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	4413      	add	r3, r2
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <HAL_UARTEx_RxEventCallback+0xb8>)
 8002d4e:	801a      	strh	r2, [r3, #0]
                }

                checkSum(MainBuf, Size);
 8002d50:	887b      	ldrh	r3, [r7, #2]
 8002d52:	4619      	mov	r1, r3
 8002d54:	480d      	ldr	r0, [pc, #52]	; (8002d8c <HAL_UARTEx_RxEventCallback+0xc4>)
 8002d56:	f7ff fedf 	bl	8002b18 <checkSum>
                HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 8002d5a:	2214      	movs	r2, #20
 8002d5c:	490c      	ldr	r1, [pc, #48]	; (8002d90 <HAL_UARTEx_RxEventCallback+0xc8>)
 8002d5e:	480d      	ldr	r0, [pc, #52]	; (8002d94 <HAL_UARTEx_RxEventCallback+0xcc>)
 8002d60:	f006 f996 	bl	8009090 <HAL_UARTEx_ReceiveToIdle_DMA>
                __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8002d64:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <HAL_UARTEx_RxEventCallback+0xd0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_UARTEx_RxEventCallback+0xd0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0208 	bic.w	r2, r2, #8
 8002d72:	601a      	str	r2, [r3, #0]
        }
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40004400 	.word	0x40004400
 8002d80:	20000740 	.word	0x20000740
 8002d84:	2000073e 	.word	0x2000073e
 8002d88:	20000742 	.word	0x20000742
 8002d8c:	20000720 	.word	0x20000720
 8002d90:	2000070c 	.word	0x2000070c
 8002d94:	200005d0 	.word	0x200005d0
 8002d98:	20000614 	.word	0x20000614
 8002d9c:	00000000 	.word	0x00000000

08002da0 <UARTstateManagement>:

void UARTstateManagement(uint8_t *Mainbuffer)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	switch (UARTState)
 8002da8:	4bad      	ldr	r3, [pc, #692]	; (8003060 <UARTstateManagement+0x2c0>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d01d      	beq.n	8002dec <UARTstateManagement+0x4c>
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	f300 835a 	bgt.w	800346a <UARTstateManagement+0x6ca>
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 8354 	beq.w	8003464 <UARTstateManagement+0x6c4>
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d000      	beq.n	8002dc2 <UARTstateManagement+0x22>
					homingFlag = 1;
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
					break;
				}
	}
}
 8002dc0:	e353      	b.n	800346a <UARTstateManagement+0x6ca>
			if(Mainbuffer[oldPos] == 0b10010010)
 8002dc2:	4ba8      	ldr	r3, [pc, #672]	; (8003064 <UARTstateManagement+0x2c4>)
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4413      	add	r3, r2
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b92      	cmp	r3, #146	; 0x92
 8002dd0:	f040 834a 	bne.w	8003468 <UARTstateManagement+0x6c8>
				modeNo = 2;
 8002dd4:	4ba4      	ldr	r3, [pc, #656]	; (8003068 <UARTstateManagement+0x2c8>)
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	701a      	strb	r2, [r3, #0]
				UARTState = MCUConnect;
 8002dda:	4ba1      	ldr	r3, [pc, #644]	; (8003060 <UARTstateManagement+0x2c0>)
 8002ddc:	2202      	movs	r2, #2
 8002dde:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8002de0:	2202      	movs	r2, #2
 8002de2:	49a2      	ldr	r1, [pc, #648]	; (800306c <UARTstateManagement+0x2cc>)
 8002de4:	48a2      	ldr	r0, [pc, #648]	; (8003070 <UARTstateManagement+0x2d0>)
 8002de6:	f006 f8d5 	bl	8008f94 <HAL_UART_Transmit_DMA>
			break;
 8002dea:	e33d      	b.n	8003468 <UARTstateManagement+0x6c8>
			stateSwitch = modeByte;
 8002dec:	4ba1      	ldr	r3, [pc, #644]	; (8003074 <UARTstateManagement+0x2d4>)
 8002dee:	781a      	ldrb	r2, [r3, #0]
 8002df0:	4ba1      	ldr	r3, [pc, #644]	; (8003078 <UARTstateManagement+0x2d8>)
 8002df2:	701a      	strb	r2, [r3, #0]
			switch (stateSwitch)
 8002df4:	4ba0      	ldr	r3, [pc, #640]	; (8003078 <UARTstateManagement+0x2d8>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	3b91      	subs	r3, #145	; 0x91
 8002dfa:	2b0d      	cmp	r3, #13
 8002dfc:	f200 8335 	bhi.w	800346a <UARTstateManagement+0x6ca>
 8002e00:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <UARTstateManagement+0x68>)
 8002e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e06:	bf00      	nop
 8002e08:	08002e41 	.word	0x08002e41
 8002e0c:	08002e53 	.word	0x08002e53
 8002e10:	08002e6b 	.word	0x08002e6b
 8002e14:	08002e83 	.word	0x08002e83
 8002e18:	08002ee3 	.word	0x08002ee3
 8002e1c:	08002f51 	.word	0x08002f51
 8002e20:	08002f89 	.word	0x08002f89
 8002e24:	0800309d 	.word	0x0800309d
 8002e28:	080030e1 	.word	0x080030e1
 8002e2c:	08003187 	.word	0x08003187
 8002e30:	080032fd 	.word	0x080032fd
 8002e34:	080033f3 	.word	0x080033f3
 8002e38:	08003423 	.word	0x08003423
 8002e3c:	0800343b 	.word	0x0800343b
					modeNo = 1;
 8002e40:	4b89      	ldr	r3, [pc, #548]	; (8003068 <UARTstateManagement+0x2c8>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8002e46:	2202      	movs	r2, #2
 8002e48:	4988      	ldr	r1, [pc, #544]	; (800306c <UARTstateManagement+0x2cc>)
 8002e4a:	4889      	ldr	r0, [pc, #548]	; (8003070 <UARTstateManagement+0x2d0>)
 8002e4c:	f006 f8a2 	bl	8008f94 <HAL_UART_Transmit_DMA>
					break;
 8002e50:	e30b      	b.n	800346a <UARTstateManagement+0x6ca>
					modeNo = 2;
 8002e52:	4b85      	ldr	r3, [pc, #532]	; (8003068 <UARTstateManagement+0x2c8>)
 8002e54:	2202      	movs	r2, #2
 8002e56:	701a      	strb	r2, [r3, #0]
					UARTState = MCUConnect;
 8002e58:	4b81      	ldr	r3, [pc, #516]	; (8003060 <UARTstateManagement+0x2c0>)
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8002e5e:	2202      	movs	r2, #2
 8002e60:	4982      	ldr	r1, [pc, #520]	; (800306c <UARTstateManagement+0x2cc>)
 8002e62:	4883      	ldr	r0, [pc, #524]	; (8003070 <UARTstateManagement+0x2d0>)
 8002e64:	f006 f896 	bl	8008f94 <HAL_UART_Transmit_DMA>
					break;
 8002e68:	e2ff      	b.n	800346a <UARTstateManagement+0x6ca>
					modeNo = 3;
 8002e6a:	4b7f      	ldr	r3, [pc, #508]	; (8003068 <UARTstateManagement+0x2c8>)
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	701a      	strb	r2, [r3, #0]
					UARTState = MCUDisconnect;
 8002e70:	4b7b      	ldr	r3, [pc, #492]	; (8003060 <UARTstateManagement+0x2c0>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8002e76:	2202      	movs	r2, #2
 8002e78:	497c      	ldr	r1, [pc, #496]	; (800306c <UARTstateManagement+0x2cc>)
 8002e7a:	487d      	ldr	r0, [pc, #500]	; (8003070 <UARTstateManagement+0x2d0>)
 8002e7c:	f006 f88a 	bl	8008f94 <HAL_UART_Transmit_DMA>
					break;
 8002e80:	e2f3      	b.n	800346a <UARTstateManagement+0x6ca>
					modeNo = 4;
 8002e82:	4b79      	ldr	r3, [pc, #484]	; (8003068 <UARTstateManagement+0x2c8>)
 8002e84:	2204      	movs	r2, #4
 8002e86:	701a      	strb	r2, [r3, #0]
					uartVelo = (float)((Mainbuffer[oldPos + 2 % MainBuf_SIZE])/255.0)*10.0;
 8002e88:	4b76      	ldr	r3, [pc, #472]	; (8003064 <UARTstateManagement+0x2c4>)
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd faf1 	bl	800047c <__aeabi_i2d>
 8002e9a:	a36d      	add	r3, pc, #436	; (adr r3, 8003050 <UARTstateManagement+0x2b0>)
 8002e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea0:	f7fd fc80 	bl	80007a4 <__aeabi_ddiv>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f7fd fd82 	bl	80009b4 <__aeabi_d2f>
 8002eb0:	ee07 0a10 	vmov	s14, r0
 8002eb4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ebc:	4b6f      	ldr	r3, [pc, #444]	; (800307c <UARTstateManagement+0x2dc>)
 8002ebe:	edc3 7a00 	vstr	s15, [r3]
					Robot.QVMax = uartVelo*6.0;
 8002ec2:	4b6e      	ldr	r3, [pc, #440]	; (800307c <UARTstateManagement+0x2dc>)
 8002ec4:	edd3 7a00 	vldr	s15, [r3]
 8002ec8:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ed0:	4b6b      	ldr	r3, [pc, #428]	; (8003080 <UARTstateManagement+0x2e0>)
 8002ed2:	edc3 7a08 	vstr	s15, [r3, #32]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	4964      	ldr	r1, [pc, #400]	; (800306c <UARTstateManagement+0x2cc>)
 8002eda:	4865      	ldr	r0, [pc, #404]	; (8003070 <UARTstateManagement+0x2d0>)
 8002edc:	f006 f85a 	bl	8008f94 <HAL_UART_Transmit_DMA>
					break;
 8002ee0:	e2c3      	b.n	800346a <UARTstateManagement+0x6ca>
					modeNo = 5;
 8002ee2:	4b61      	ldr	r3, [pc, #388]	; (8003068 <UARTstateManagement+0x2c8>)
 8002ee4:	2205      	movs	r2, #5
 8002ee6:	701a      	strb	r2, [r3, #0]
					goalFlag = 1;
 8002ee8:	4b66      	ldr	r3, [pc, #408]	; (8003084 <UARTstateManagement+0x2e4>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]
					goalAmount = 1;
 8002eee:	4b66      	ldr	r3, [pc, #408]	; (8003088 <UARTstateManagement+0x2e8>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
					uartPos = (float)((((Mainbuffer[oldPos + 1 % MainBuf_SIZE] << 8) | Mainbuffer[oldPos + 2 % MainBuf_SIZE])*360.0)/62800);
 8002ef4:	4b5b      	ldr	r3, [pc, #364]	; (8003064 <UARTstateManagement+0x2c4>)
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	4a58      	ldr	r2, [pc, #352]	; (8003064 <UARTstateManagement+0x2c4>)
 8002f04:	8812      	ldrh	r2, [r2, #0]
 8002f06:	3202      	adds	r2, #2
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	440a      	add	r2, r1
 8002f0c:	7812      	ldrb	r2, [r2, #0]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fd fab3 	bl	800047c <__aeabi_i2d>
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	4b5c      	ldr	r3, [pc, #368]	; (800308c <UARTstateManagement+0x2ec>)
 8002f1c:	f7fd fb18 	bl	8000550 <__aeabi_dmul>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	a34b      	add	r3, pc, #300	; (adr r3, 8003058 <UARTstateManagement+0x2b8>)
 8002f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2e:	f7fd fc39 	bl	80007a4 <__aeabi_ddiv>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f7fd fd3b 	bl	80009b4 <__aeabi_d2f>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4a53      	ldr	r2, [pc, #332]	; (8003090 <UARTstateManagement+0x2f0>)
 8002f42:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8002f44:	2202      	movs	r2, #2
 8002f46:	4949      	ldr	r1, [pc, #292]	; (800306c <UARTstateManagement+0x2cc>)
 8002f48:	4849      	ldr	r0, [pc, #292]	; (8003070 <UARTstateManagement+0x2d0>)
 8002f4a:	f006 f823 	bl	8008f94 <HAL_UART_Transmit_DMA>
					break;
 8002f4e:	e28c      	b.n	800346a <UARTstateManagement+0x6ca>
					modeNo = 6;
 8002f50:	4b45      	ldr	r3, [pc, #276]	; (8003068 <UARTstateManagement+0x2c8>)
 8002f52:	2206      	movs	r2, #6
 8002f54:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8002f56:	4b4b      	ldr	r3, [pc, #300]	; (8003084 <UARTstateManagement+0x2e4>)
 8002f58:	2202      	movs	r2, #2
 8002f5a:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	2100      	movs	r1, #0
 8002f60:	484c      	ldr	r0, [pc, #304]	; (8003094 <UARTstateManagement+0x2f4>)
 8002f62:	f007 fcef 	bl	800a944 <memset>
					goalAmount = 1;
 8002f66:	4b48      	ldr	r3, [pc, #288]	; (8003088 <UARTstateManagement+0x2e8>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
					uartGoal[0] = Mainbuffer[oldPos + 2 % MainBuf_SIZE];
 8002f6c:	4b3d      	ldr	r3, [pc, #244]	; (8003064 <UARTstateManagement+0x2c4>)
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	3302      	adds	r3, #2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	781a      	ldrb	r2, [r3, #0]
 8002f78:	4b46      	ldr	r3, [pc, #280]	; (8003094 <UARTstateManagement+0x2f4>)
 8002f7a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	493b      	ldr	r1, [pc, #236]	; (800306c <UARTstateManagement+0x2cc>)
 8002f80:	483b      	ldr	r0, [pc, #236]	; (8003070 <UARTstateManagement+0x2d0>)
 8002f82:	f006 f807 	bl	8008f94 <HAL_UART_Transmit_DMA>
					break;
 8002f86:	e270      	b.n	800346a <UARTstateManagement+0x6ca>
					modeNo = 7;
 8002f88:	4b37      	ldr	r3, [pc, #220]	; (8003068 <UARTstateManagement+0x2c8>)
 8002f8a:	2207      	movs	r2, #7
 8002f8c:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <UARTstateManagement+0x2e4>)
 8002f90:	2202      	movs	r2, #2
 8002f92:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8002f94:	220f      	movs	r2, #15
 8002f96:	2100      	movs	r1, #0
 8002f98:	483e      	ldr	r0, [pc, #248]	; (8003094 <UARTstateManagement+0x2f4>)
 8002f9a:	f007 fcd3 	bl	800a944 <memset>
					goalAmount = Mainbuffer[oldPos + 1 % MainBuf_SIZE];
 8002f9e:	4b31      	ldr	r3, [pc, #196]	; (8003064 <UARTstateManagement+0x2c4>)
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	781a      	ldrb	r2, [r3, #0]
 8002faa:	4b37      	ldr	r3, [pc, #220]	; (8003088 <UARTstateManagement+0x2e8>)
 8002fac:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	e03a      	b.n	800302a <UARTstateManagement+0x28a>
						uartGoal[0+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] & 15; // low 8 bit (last 4 bit)
 8002fb4:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <UARTstateManagement+0x2c4>)
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1c99      	adds	r1, r3, #2
 8002fbe:	4b36      	ldr	r3, [pc, #216]	; (8003098 <UARTstateManagement+0x2f8>)
 8002fc0:	fb83 2301 	smull	r2, r3, r3, r1
 8002fc4:	10da      	asrs	r2, r3, #3
 8002fc6:	17cb      	asrs	r3, r1, #31
 8002fc8:	1ad2      	subs	r2, r2, r3
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	1aca      	subs	r2, r1, r3
 8002fd4:	1883      	adds	r3, r0, r2
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	f002 020f 	and.w	r2, r2, #15
 8002fe6:	b2d1      	uxtb	r1, r2
 8002fe8:	4a2a      	ldr	r2, [pc, #168]	; (8003094 <UARTstateManagement+0x2f4>)
 8002fea:	54d1      	strb	r1, [r2, r3]
						uartGoal[1+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] >> 4; // high 8 bit (first 4 bit)
 8002fec:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <UARTstateManagement+0x2c4>)
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1c99      	adds	r1, r3, #2
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <UARTstateManagement+0x2f8>)
 8002ff8:	fb83 2301 	smull	r2, r3, r3, r1
 8002ffc:	10da      	asrs	r2, r3, #3
 8002ffe:	17cb      	asrs	r3, r1, #31
 8003000:	1ad2      	subs	r2, r2, r3
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	1aca      	subs	r2, r1, r3
 800300c:	1883      	adds	r3, r0, r2
 800300e:	461a      	mov	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	3301      	adds	r3, #1
 800301c:	0912      	lsrs	r2, r2, #4
 800301e:	b2d1      	uxtb	r1, r2
 8003020:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <UARTstateManagement+0x2f4>)
 8003022:	54d1      	strb	r1, [r2, r3]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3301      	adds	r3, #1
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	4b17      	ldr	r3, [pc, #92]	; (8003088 <UARTstateManagement+0x2e8>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	3301      	adds	r3, #1
 8003030:	0fda      	lsrs	r2, r3, #31
 8003032:	4413      	add	r3, r2
 8003034:	105b      	asrs	r3, r3, #1
 8003036:	461a      	mov	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4293      	cmp	r3, r2
 800303c:	dbba      	blt.n	8002fb4 <UARTstateManagement+0x214>
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800303e:	2202      	movs	r2, #2
 8003040:	490a      	ldr	r1, [pc, #40]	; (800306c <UARTstateManagement+0x2cc>)
 8003042:	480b      	ldr	r0, [pc, #44]	; (8003070 <UARTstateManagement+0x2d0>)
 8003044:	f005 ffa6 	bl	8008f94 <HAL_UART_Transmit_DMA>
					break;
 8003048:	e20f      	b.n	800346a <UARTstateManagement+0x6ca>
 800304a:	bf00      	nop
 800304c:	f3af 8000 	nop.w
 8003050:	00000000 	.word	0x00000000
 8003054:	406fe000 	.word	0x406fe000
 8003058:	00000000 	.word	0x00000000
 800305c:	40eeaa00 	.word	0x40eeaa00
 8003060:	20000708 	.word	0x20000708
 8003064:	2000073e 	.word	0x2000073e
 8003068:	20000768 	.word	0x20000768
 800306c:	2000002c 	.word	0x2000002c
 8003070:	200005d0 	.word	0x200005d0
 8003074:	20000769 	.word	0x20000769
 8003078:	2000073c 	.word	0x2000073c
 800307c:	20000748 	.word	0x20000748
 8003080:	200006d4 	.word	0x200006d4
 8003084:	20000761 	.word	0x20000761
 8003088:	2000075f 	.word	0x2000075f
 800308c:	40768000 	.word	0x40768000
 8003090:	2000074c 	.word	0x2000074c
 8003094:	20000750 	.word	0x20000750
 8003098:	66666667 	.word	0x66666667
					modeNo = 8;
 800309c:	4b8a      	ldr	r3, [pc, #552]	; (80032c8 <UARTstateManagement+0x528>)
 800309e:	2208      	movs	r2, #8
 80030a0:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 0){
 80030a2:	4b8a      	ldr	r3, [pc, #552]	; (80032cc <UARTstateManagement+0x52c>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d114      	bne.n	80030d4 <UARTstateManagement+0x334>
					goingToGoalFlag = 0;
 80030aa:	4b89      	ldr	r3, [pc, #548]	; (80032d0 <UARTstateManagement+0x530>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
					Robot.MotorIsOn = 1;
 80030b0:	4b88      	ldr	r3, [pc, #544]	; (80032d4 <UARTstateManagement+0x534>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					Robot.flagStartTime = 1;
 80030b8:	4b86      	ldr	r3, [pc, #536]	; (80032d4 <UARTstateManagement+0x534>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					Robot.RunningFlag = 1;
 80030c0:	4b84      	ldr	r3, [pc, #528]	; (80032d4 <UARTstateManagement+0x534>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					doingTaskFlag = 1;
 80030c8:	4b80      	ldr	r3, [pc, #512]	; (80032cc <UARTstateManagement+0x52c>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	701a      	strb	r2, [r3, #0]
					goalIDX = 0;
 80030ce:	4b82      	ldr	r3, [pc, #520]	; (80032d8 <UARTstateManagement+0x538>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80030d4:	2202      	movs	r2, #2
 80030d6:	4981      	ldr	r1, [pc, #516]	; (80032dc <UARTstateManagement+0x53c>)
 80030d8:	4881      	ldr	r0, [pc, #516]	; (80032e0 <UARTstateManagement+0x540>)
 80030da:	f005 ff5b 	bl	8008f94 <HAL_UART_Transmit_DMA>
					break;
 80030de:	e1c4      	b.n	800346a <UARTstateManagement+0x6ca>
					modeNo = 9;
 80030e0:	4b79      	ldr	r3, [pc, #484]	; (80032c8 <UARTstateManagement+0x528>)
 80030e2:	2209      	movs	r2, #9
 80030e4:	701a      	strb	r2, [r3, #0]
					Robot.CurrentStation = 0;
 80030e6:	4b7b      	ldr	r3, [pc, #492]	; (80032d4 <UARTstateManagement+0x534>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	811a      	strh	r2, [r3, #8]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 80030ec:	4b77      	ldr	r3, [pc, #476]	; (80032cc <UARTstateManagement+0x52c>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d004      	beq.n	80030fe <UARTstateManagement+0x35e>
 80030f4:	4b77      	ldr	r3, [pc, #476]	; (80032d4 <UARTstateManagement+0x534>)
 80030f6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d11f      	bne.n	800313e <UARTstateManagement+0x39e>
 80030fe:	4b77      	ldr	r3, [pc, #476]	; (80032dc <UARTstateManagement+0x53c>)
 8003100:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 8003102:	4b78      	ldr	r3, [pc, #480]	; (80032e4 <UARTstateManagement+0x544>)
 8003104:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 153; // start-mode
 8003106:	4b77      	ldr	r3, [pc, #476]	; (80032e4 <UARTstateManagement+0x544>)
 8003108:	2299      	movs	r2, #153	; 0x99
 800310a:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = Robot.CurrentStation; // set current goal
 800310c:	4b71      	ldr	r3, [pc, #452]	; (80032d4 <UARTstateManagement+0x534>)
 800310e:	891b      	ldrh	r3, [r3, #8]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	4b74      	ldr	r3, [pc, #464]	; (80032e4 <UARTstateManagement+0x544>)
 8003114:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 8003116:	4b73      	ldr	r3, [pc, #460]	; (80032e4 <UARTstateManagement+0x544>)
 8003118:	789a      	ldrb	r2, [r3, #2]
 800311a:	4b72      	ldr	r3, [pc, #456]	; (80032e4 <UARTstateManagement+0x544>)
 800311c:	78db      	ldrb	r3, [r3, #3]
 800311e:	4413      	add	r3, r2
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4b70      	ldr	r3, [pc, #448]	; (80032e4 <UARTstateManagement+0x544>)
 8003124:	791b      	ldrb	r3, [r3, #4]
 8003126:	4413      	add	r3, r2
 8003128:	b2db      	uxtb	r3, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	b2da      	uxtb	r2, r3
 800312e:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <UARTstateManagement+0x544>)
 8003130:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8003132:	2206      	movs	r2, #6
 8003134:	496b      	ldr	r1, [pc, #428]	; (80032e4 <UARTstateManagement+0x544>)
 8003136:	486a      	ldr	r0, [pc, #424]	; (80032e0 <UARTstateManagement+0x540>)
 8003138:	f005 ff2c 	bl	8008f94 <HAL_UART_Transmit_DMA>
					break;
 800313c:	e195      	b.n	800346a <UARTstateManagement+0x6ca>
 800313e:	4b6a      	ldr	r3, [pc, #424]	; (80032e8 <UARTstateManagement+0x548>)
 8003140:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8003142:	4b68      	ldr	r3, [pc, #416]	; (80032e4 <UARTstateManagement+0x544>)
 8003144:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 8003146:	4a69      	ldr	r2, [pc, #420]	; (80032ec <UARTstateManagement+0x54c>)
 8003148:	4b64      	ldr	r3, [pc, #400]	; (80032dc <UARTstateManagement+0x53c>)
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 153; // start-mode
 800314e:	4b65      	ldr	r3, [pc, #404]	; (80032e4 <UARTstateManagement+0x544>)
 8003150:	2299      	movs	r2, #153	; 0x99
 8003152:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = Robot.CurrentStation; // set currentStation
 8003154:	4b5f      	ldr	r3, [pc, #380]	; (80032d4 <UARTstateManagement+0x534>)
 8003156:	891b      	ldrh	r3, [r3, #8]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4b62      	ldr	r3, [pc, #392]	; (80032e4 <UARTstateManagement+0x544>)
 800315c:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 800315e:	4b61      	ldr	r3, [pc, #388]	; (80032e4 <UARTstateManagement+0x544>)
 8003160:	791a      	ldrb	r2, [r3, #4]
 8003162:	4b60      	ldr	r3, [pc, #384]	; (80032e4 <UARTstateManagement+0x544>)
 8003164:	795b      	ldrb	r3, [r3, #5]
 8003166:	4413      	add	r3, r2
 8003168:	b2da      	uxtb	r2, r3
 800316a:	4b5e      	ldr	r3, [pc, #376]	; (80032e4 <UARTstateManagement+0x544>)
 800316c:	799b      	ldrb	r3, [r3, #6]
 800316e:	4413      	add	r3, r2
 8003170:	b2db      	uxtb	r3, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4b5b      	ldr	r3, [pc, #364]	; (80032e4 <UARTstateManagement+0x544>)
 8003178:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 800317a:	2208      	movs	r2, #8
 800317c:	4959      	ldr	r1, [pc, #356]	; (80032e4 <UARTstateManagement+0x544>)
 800317e:	4858      	ldr	r0, [pc, #352]	; (80032e0 <UARTstateManagement+0x540>)
 8003180:	f005 ff08 	bl	8008f94 <HAL_UART_Transmit_DMA>
					break;
 8003184:	e171      	b.n	800346a <UARTstateManagement+0x6ca>
					modeNo = 10;
 8003186:	4b50      	ldr	r3, [pc, #320]	; (80032c8 <UARTstateManagement+0x528>)
 8003188:	220a      	movs	r2, #10
 800318a:	701a      	strb	r2, [r3, #0]
					posData = (uint16_t)(((((Robot.Position)*10000.0)*M_PI)/180.0));
 800318c:	4b51      	ldr	r3, [pc, #324]	; (80032d4 <UARTstateManagement+0x534>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd f985 	bl	80004a0 <__aeabi_f2d>
 8003196:	a348      	add	r3, pc, #288	; (adr r3, 80032b8 <UARTstateManagement+0x518>)
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	f7fd f9d8 	bl	8000550 <__aeabi_dmul>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	a345      	add	r3, pc, #276	; (adr r3, 80032c0 <UARTstateManagement+0x520>)
 80031aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ae:	f7fd f9cf 	bl	8000550 <__aeabi_dmul>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4610      	mov	r0, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	4b4c      	ldr	r3, [pc, #304]	; (80032f0 <UARTstateManagement+0x550>)
 80031c0:	f7fd faf0 	bl	80007a4 <__aeabi_ddiv>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	f7fd fbd2 	bl	8000974 <__aeabi_d2uiz>
 80031d0:	4603      	mov	r3, r0
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <UARTstateManagement+0x554>)
 80031d6:	801a      	strh	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 80031d8:	4b3c      	ldr	r3, [pc, #240]	; (80032cc <UARTstateManagement+0x52c>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d004      	beq.n	80031ea <UARTstateManagement+0x44a>
 80031e0:	4b3c      	ldr	r3, [pc, #240]	; (80032d4 <UARTstateManagement+0x534>)
 80031e2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d126      	bne.n	8003238 <UARTstateManagement+0x498>
 80031ea:	4b3c      	ldr	r3, [pc, #240]	; (80032dc <UARTstateManagement+0x53c>)
 80031ec:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 80031ee:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <UARTstateManagement+0x544>)
 80031f0:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 154; // start-mode
 80031f2:	4b3c      	ldr	r3, [pc, #240]	; (80032e4 <UARTstateManagement+0x544>)
 80031f4:	229a      	movs	r2, #154	; 0x9a
 80031f6:	709a      	strb	r2, [r3, #2]
						TxBuf[3] = (posData) >> 8 ; // set high byte posData
 80031f8:	4b3e      	ldr	r3, [pc, #248]	; (80032f4 <UARTstateManagement+0x554>)
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	b29b      	uxth	r3, r3
 8003200:	b2da      	uxtb	r2, r3
 8003202:	4b38      	ldr	r3, [pc, #224]	; (80032e4 <UARTstateManagement+0x544>)
 8003204:	70da      	strb	r2, [r3, #3]
						TxBuf[4] = (posData) & 0xff; // set low byte posData
 8003206:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <UARTstateManagement+0x554>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	b2da      	uxtb	r2, r3
 800320c:	4b35      	ldr	r3, [pc, #212]	; (80032e4 <UARTstateManagement+0x544>)
 800320e:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 8003210:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <UARTstateManagement+0x544>)
 8003212:	789a      	ldrb	r2, [r3, #2]
 8003214:	4b33      	ldr	r3, [pc, #204]	; (80032e4 <UARTstateManagement+0x544>)
 8003216:	78db      	ldrb	r3, [r3, #3]
 8003218:	4413      	add	r3, r2
 800321a:	b2da      	uxtb	r2, r3
 800321c:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <UARTstateManagement+0x544>)
 800321e:	791b      	ldrb	r3, [r3, #4]
 8003220:	4413      	add	r3, r2
 8003222:	b2db      	uxtb	r3, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	b2da      	uxtb	r2, r3
 8003228:	4b2e      	ldr	r3, [pc, #184]	; (80032e4 <UARTstateManagement+0x544>)
 800322a:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 800322c:	2206      	movs	r2, #6
 800322e:	492d      	ldr	r1, [pc, #180]	; (80032e4 <UARTstateManagement+0x544>)
 8003230:	482b      	ldr	r0, [pc, #172]	; (80032e0 <UARTstateManagement+0x540>)
 8003232:	f005 feaf 	bl	8008f94 <HAL_UART_Transmit_DMA>
					break;
 8003236:	e118      	b.n	800346a <UARTstateManagement+0x6ca>
 8003238:	4b2b      	ldr	r3, [pc, #172]	; (80032e8 <UARTstateManagement+0x548>)
 800323a:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 800323c:	4b29      	ldr	r3, [pc, #164]	; (80032e4 <UARTstateManagement+0x544>)
 800323e:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 8003240:	4a2a      	ldr	r2, [pc, #168]	; (80032ec <UARTstateManagement+0x54c>)
 8003242:	4b26      	ldr	r3, [pc, #152]	; (80032dc <UARTstateManagement+0x53c>)
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 154; // start-mode
 8003248:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <UARTstateManagement+0x544>)
 800324a:	229a      	movs	r2, #154	; 0x9a
 800324c:	711a      	strb	r2, [r3, #4]
						if(homingFlag == 1 && Robot.Position <= 0.5){
 800324e:	4b2a      	ldr	r3, [pc, #168]	; (80032f8 <UARTstateManagement+0x558>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d110      	bne.n	8003278 <UARTstateManagement+0x4d8>
 8003256:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <UARTstateManagement+0x534>)
 8003258:	edd3 7a00 	vldr	s15, [r3]
 800325c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003268:	d806      	bhi.n	8003278 <UARTstateManagement+0x4d8>
							TxBuf[5] = 0; // set high byte posData
 800326a:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <UARTstateManagement+0x544>)
 800326c:	2200      	movs	r2, #0
 800326e:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = 0; // set low byte posData
 8003270:	4b1c      	ldr	r3, [pc, #112]	; (80032e4 <UARTstateManagement+0x544>)
 8003272:	2200      	movs	r2, #0
 8003274:	719a      	strb	r2, [r3, #6]
 8003276:	e00b      	b.n	8003290 <UARTstateManagement+0x4f0>
							TxBuf[5] = (posData) >> 8 ; // set high byte posData
 8003278:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <UARTstateManagement+0x554>)
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	b29b      	uxth	r3, r3
 8003280:	b2da      	uxtb	r2, r3
 8003282:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <UARTstateManagement+0x544>)
 8003284:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = (posData) & 0xff; // set low byte posData
 8003286:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <UARTstateManagement+0x554>)
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	b2da      	uxtb	r2, r3
 800328c:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <UARTstateManagement+0x544>)
 800328e:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8003290:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <UARTstateManagement+0x544>)
 8003292:	791a      	ldrb	r2, [r3, #4]
 8003294:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <UARTstateManagement+0x544>)
 8003296:	795b      	ldrb	r3, [r3, #5]
 8003298:	4413      	add	r3, r2
 800329a:	b2da      	uxtb	r2, r3
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <UARTstateManagement+0x544>)
 800329e:	799b      	ldrb	r3, [r3, #6]
 80032a0:	4413      	add	r3, r2
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <UARTstateManagement+0x544>)
 80032aa:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 80032ac:	2208      	movs	r2, #8
 80032ae:	490d      	ldr	r1, [pc, #52]	; (80032e4 <UARTstateManagement+0x544>)
 80032b0:	480b      	ldr	r0, [pc, #44]	; (80032e0 <UARTstateManagement+0x540>)
 80032b2:	f005 fe6f 	bl	8008f94 <HAL_UART_Transmit_DMA>
					break;
 80032b6:	e0d8      	b.n	800346a <UARTstateManagement+0x6ca>
 80032b8:	00000000 	.word	0x00000000
 80032bc:	40c38800 	.word	0x40c38800
 80032c0:	54442d18 	.word	0x54442d18
 80032c4:	400921fb 	.word	0x400921fb
 80032c8:	20000768 	.word	0x20000768
 80032cc:	20000764 	.word	0x20000764
 80032d0:	20000765 	.word	0x20000765
 80032d4:	200006d4 	.word	0x200006d4
 80032d8:	20000760 	.word	0x20000760
 80032dc:	2000002c 	.word	0x2000002c
 80032e0:	200005d0 	.word	0x200005d0
 80032e4:	20000734 	.word	0x20000734
 80032e8:	20000030 	.word	0x20000030
 80032ec:	20000736 	.word	0x20000736
 80032f0:	40668000 	.word	0x40668000
 80032f4:	20000744 	.word	0x20000744
 80032f8:	20000763 	.word	0x20000763
					modeNo = 11;
 80032fc:	4b60      	ldr	r3, [pc, #384]	; (8003480 <UARTstateManagement+0x6e0>)
 80032fe:	220b      	movs	r2, #11
 8003300:	701a      	strb	r2, [r3, #0]
					veloData = (((AbsVal(Robot.Velocity)/6.0)*255.0)/10.0);
 8003302:	4b60      	ldr	r3, [pc, #384]	; (8003484 <UARTstateManagement+0x6e4>)
 8003304:	edd3 7a01 	vldr	s15, [r3, #4]
 8003308:	eeb0 0a67 	vmov.f32	s0, s15
 800330c:	f7fe f992 	bl	8001634 <AbsVal>
 8003310:	ee10 3a10 	vmov	r3, s0
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd f8c3 	bl	80004a0 <__aeabi_f2d>
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	4b5a      	ldr	r3, [pc, #360]	; (8003488 <UARTstateManagement+0x6e8>)
 8003320:	f7fd fa40 	bl	80007a4 <__aeabi_ddiv>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4610      	mov	r0, r2
 800332a:	4619      	mov	r1, r3
 800332c:	a352      	add	r3, pc, #328	; (adr r3, 8003478 <UARTstateManagement+0x6d8>)
 800332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003332:	f7fd f90d 	bl	8000550 <__aeabi_dmul>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4610      	mov	r0, r2
 800333c:	4619      	mov	r1, r3
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	4b52      	ldr	r3, [pc, #328]	; (800348c <UARTstateManagement+0x6ec>)
 8003344:	f7fd fa2e 	bl	80007a4 <__aeabi_ddiv>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	f7fd fb10 	bl	8000974 <__aeabi_d2uiz>
 8003354:	4603      	mov	r3, r0
 8003356:	b2da      	uxtb	r2, r3
 8003358:	4b4d      	ldr	r3, [pc, #308]	; (8003490 <UARTstateManagement+0x6f0>)
 800335a:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 800335c:	4b4d      	ldr	r3, [pc, #308]	; (8003494 <UARTstateManagement+0x6f4>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d004      	beq.n	800336e <UARTstateManagement+0x5ce>
 8003364:	4b47      	ldr	r3, [pc, #284]	; (8003484 <UARTstateManagement+0x6e4>)
 8003366:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800336a:	2b01      	cmp	r3, #1
 800336c:	d11e      	bne.n	80033ac <UARTstateManagement+0x60c>
 800336e:	4b4a      	ldr	r3, [pc, #296]	; (8003498 <UARTstateManagement+0x6f8>)
 8003370:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 8003372:	4b4a      	ldr	r3, [pc, #296]	; (800349c <UARTstateManagement+0x6fc>)
 8003374:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 155;
 8003376:	4b49      	ldr	r3, [pc, #292]	; (800349c <UARTstateManagement+0x6fc>)
 8003378:	229b      	movs	r2, #155	; 0x9b
 800337a:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = veloData; // set low byte posData
 800337c:	4b44      	ldr	r3, [pc, #272]	; (8003490 <UARTstateManagement+0x6f0>)
 800337e:	781a      	ldrb	r2, [r3, #0]
 8003380:	4b46      	ldr	r3, [pc, #280]	; (800349c <UARTstateManagement+0x6fc>)
 8003382:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 8003384:	4b45      	ldr	r3, [pc, #276]	; (800349c <UARTstateManagement+0x6fc>)
 8003386:	789a      	ldrb	r2, [r3, #2]
 8003388:	4b44      	ldr	r3, [pc, #272]	; (800349c <UARTstateManagement+0x6fc>)
 800338a:	78db      	ldrb	r3, [r3, #3]
 800338c:	4413      	add	r3, r2
 800338e:	b2da      	uxtb	r2, r3
 8003390:	4b42      	ldr	r3, [pc, #264]	; (800349c <UARTstateManagement+0x6fc>)
 8003392:	791b      	ldrb	r3, [r3, #4]
 8003394:	4413      	add	r3, r2
 8003396:	b2db      	uxtb	r3, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	b2da      	uxtb	r2, r3
 800339c:	4b3f      	ldr	r3, [pc, #252]	; (800349c <UARTstateManagement+0x6fc>)
 800339e:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 80033a0:	2206      	movs	r2, #6
 80033a2:	493e      	ldr	r1, [pc, #248]	; (800349c <UARTstateManagement+0x6fc>)
 80033a4:	483e      	ldr	r0, [pc, #248]	; (80034a0 <UARTstateManagement+0x700>)
 80033a6:	f005 fdf5 	bl	8008f94 <HAL_UART_Transmit_DMA>
					break;
 80033aa:	e05e      	b.n	800346a <UARTstateManagement+0x6ca>
 80033ac:	4b3d      	ldr	r3, [pc, #244]	; (80034a4 <UARTstateManagement+0x704>)
 80033ae:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 80033b0:	4b3a      	ldr	r3, [pc, #232]	; (800349c <UARTstateManagement+0x6fc>)
 80033b2:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 80033b4:	4a3c      	ldr	r2, [pc, #240]	; (80034a8 <UARTstateManagement+0x708>)
 80033b6:	4b38      	ldr	r3, [pc, #224]	; (8003498 <UARTstateManagement+0x6f8>)
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 155; // start-mode
 80033bc:	4b37      	ldr	r3, [pc, #220]	; (800349c <UARTstateManagement+0x6fc>)
 80033be:	229b      	movs	r2, #155	; 0x9b
 80033c0:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = veloData; // set low byte posData
 80033c2:	4b33      	ldr	r3, [pc, #204]	; (8003490 <UARTstateManagement+0x6f0>)
 80033c4:	781a      	ldrb	r2, [r3, #0]
 80033c6:	4b35      	ldr	r3, [pc, #212]	; (800349c <UARTstateManagement+0x6fc>)
 80033c8:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 80033ca:	4b34      	ldr	r3, [pc, #208]	; (800349c <UARTstateManagement+0x6fc>)
 80033cc:	791a      	ldrb	r2, [r3, #4]
 80033ce:	4b33      	ldr	r3, [pc, #204]	; (800349c <UARTstateManagement+0x6fc>)
 80033d0:	795b      	ldrb	r3, [r3, #5]
 80033d2:	4413      	add	r3, r2
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4b31      	ldr	r3, [pc, #196]	; (800349c <UARTstateManagement+0x6fc>)
 80033d8:	799b      	ldrb	r3, [r3, #6]
 80033da:	4413      	add	r3, r2
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4b2e      	ldr	r3, [pc, #184]	; (800349c <UARTstateManagement+0x6fc>)
 80033e4:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 80033e6:	2208      	movs	r2, #8
 80033e8:	492c      	ldr	r1, [pc, #176]	; (800349c <UARTstateManagement+0x6fc>)
 80033ea:	482d      	ldr	r0, [pc, #180]	; (80034a0 <UARTstateManagement+0x700>)
 80033ec:	f005 fdd2 	bl	8008f94 <HAL_UART_Transmit_DMA>
					break;
 80033f0:	e03b      	b.n	800346a <UARTstateManagement+0x6ca>
					modeNo = 12;
 80033f2:	4b23      	ldr	r3, [pc, #140]	; (8003480 <UARTstateManagement+0x6e0>)
 80033f4:	220c      	movs	r2, #12
 80033f6:	701a      	strb	r2, [r3, #0]
					RobotState = EndEff;
 80033f8:	4b2c      	ldr	r3, [pc, #176]	; (80034ac <UARTstateManagement+0x70c>)
 80033fa:	2203      	movs	r2, #3
 80033fc:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 80033fe:	4b2c      	ldr	r3, [pc, #176]	; (80034b0 <UARTstateManagement+0x710>)
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorReadFlag =  1;
 8003404:	4b2b      	ldr	r3, [pc, #172]	; (80034b4 <UARTstateManagement+0x714>)
 8003406:	2201      	movs	r2, #1
 8003408:	701a      	strb	r2, [r3, #0]
					EndEffState = CheckBeforRun;
 800340a:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <UARTstateManagement+0x718>)
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
					endEffFlag = 1;
 8003410:	4b2a      	ldr	r3, [pc, #168]	; (80034bc <UARTstateManagement+0x71c>)
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003416:	2202      	movs	r2, #2
 8003418:	491f      	ldr	r1, [pc, #124]	; (8003498 <UARTstateManagement+0x6f8>)
 800341a:	4821      	ldr	r0, [pc, #132]	; (80034a0 <UARTstateManagement+0x700>)
 800341c:	f005 fdba 	bl	8008f94 <HAL_UART_Transmit_DMA>
					break;
 8003420:	e023      	b.n	800346a <UARTstateManagement+0x6ca>
					modeNo = 13;
 8003422:	4b17      	ldr	r3, [pc, #92]	; (8003480 <UARTstateManagement+0x6e0>)
 8003424:	220d      	movs	r2, #13
 8003426:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 8003428:	4b24      	ldr	r3, [pc, #144]	; (80034bc <UARTstateManagement+0x71c>)
 800342a:	2200      	movs	r2, #0
 800342c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800342e:	2202      	movs	r2, #2
 8003430:	4919      	ldr	r1, [pc, #100]	; (8003498 <UARTstateManagement+0x6f8>)
 8003432:	481b      	ldr	r0, [pc, #108]	; (80034a0 <UARTstateManagement+0x700>)
 8003434:	f005 fdae 	bl	8008f94 <HAL_UART_Transmit_DMA>
					break;
 8003438:	e017      	b.n	800346a <UARTstateManagement+0x6ca>
					modeNo = 14;
 800343a:	4b11      	ldr	r3, [pc, #68]	; (8003480 <UARTstateManagement+0x6e0>)
 800343c:	220e      	movs	r2, #14
 800343e:	701a      	strb	r2, [r3, #0]
					RobotRunToPositon(Robot.HomePositon,51.0);
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <UARTstateManagement+0x6e4>)
 8003442:	edd3 7a05 	vldr	s15, [r3, #20]
 8003446:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80034c0 <UARTstateManagement+0x720>
 800344a:	eeb0 0a67 	vmov.f32	s0, s15
 800344e:	f000 fbd5 	bl	8003bfc <RobotRunToPositon>
					homingFlag = 1;
 8003452:	4b1c      	ldr	r3, [pc, #112]	; (80034c4 <UARTstateManagement+0x724>)
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003458:	2202      	movs	r2, #2
 800345a:	490f      	ldr	r1, [pc, #60]	; (8003498 <UARTstateManagement+0x6f8>)
 800345c:	4810      	ldr	r0, [pc, #64]	; (80034a0 <UARTstateManagement+0x700>)
 800345e:	f005 fd99 	bl	8008f94 <HAL_UART_Transmit_DMA>
					break;
 8003462:	e002      	b.n	800346a <UARTstateManagement+0x6ca>
			break;
 8003464:	bf00      	nop
 8003466:	e000      	b.n	800346a <UARTstateManagement+0x6ca>
			break;
 8003468:	bf00      	nop
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	f3af 8000 	nop.w
 8003478:	00000000 	.word	0x00000000
 800347c:	406fe000 	.word	0x406fe000
 8003480:	20000768 	.word	0x20000768
 8003484:	200006d4 	.word	0x200006d4
 8003488:	40180000 	.word	0x40180000
 800348c:	40240000 	.word	0x40240000
 8003490:	20000746 	.word	0x20000746
 8003494:	20000764 	.word	0x20000764
 8003498:	2000002c 	.word	0x2000002c
 800349c:	20000734 	.word	0x20000734
 80034a0:	200005d0 	.word	0x200005d0
 80034a4:	20000030 	.word	0x20000030
 80034a8:	20000736 	.word	0x20000736
 80034ac:	20000709 	.word	0x20000709
 80034b0:	20000af1 	.word	0x20000af1
 80034b4:	20000af0 	.word	0x20000af0
 80034b8:	20000000 	.word	0x20000000
 80034bc:	20000762 	.word	0x20000762
 80034c0:	424c0000 	.word	0x424c0000
 80034c4:	20000763 	.word	0x20000763

080034c8 <RobotstateManagement>:

void RobotstateManagement()
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
	switch (RobotState)
 80034cc:	4b8a      	ldr	r3, [pc, #552]	; (80036f8 <RobotstateManagement+0x230>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	f200 810f 	bhi.w	80036f4 <RobotstateManagement+0x22c>
 80034d6:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <RobotstateManagement+0x14>)
 80034d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034dc:	080036eb 	.word	0x080036eb
 80034e0:	080034f1 	.word	0x080034f1
 80034e4:	08003549 	.word	0x08003549
 80034e8:	080036eb 	.word	0x080036eb
 80034ec:	080036d5 	.word	0x080036d5
//			RobotRunToPositon(360.0,51.0);
//			// Goto next State
//			RobotState = FindHome;
			break;
		case FindHome:
			if(Robot.RunningFlag == 0)
 80034f0:	4b82      	ldr	r3, [pc, #520]	; (80036fc <RobotstateManagement+0x234>)
 80034f2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f040 80f9 	bne.w	80036ee <RobotstateManagement+0x226>
			{
				if(Robot.flagSethome == 2)
 80034fc:	4b7f      	ldr	r3, [pc, #508]	; (80036fc <RobotstateManagement+0x234>)
 80034fe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003502:	2b02      	cmp	r3, #2
 8003504:	d111      	bne.n	800352a <RobotstateManagement+0x62>
				{
					RobotRunToPositon(Robot.HomePositon,51.0);
 8003506:	4b7d      	ldr	r3, [pc, #500]	; (80036fc <RobotstateManagement+0x234>)
 8003508:	edd3 7a05 	vldr	s15, [r3, #20]
 800350c:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8003700 <RobotstateManagement+0x238>
 8003510:	eeb0 0a67 	vmov.f32	s0, s15
 8003514:	f000 fb72 	bl	8003bfc <RobotRunToPositon>
					Robot.RunningFlag = 1;
 8003518:	4b78      	ldr	r3, [pc, #480]	; (80036fc <RobotstateManagement+0x234>)
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					Robot.flagSethome = 3;
 8003520:	4b76      	ldr	r3, [pc, #472]	; (80036fc <RobotstateManagement+0x234>)
 8003522:	2203      	movs	r2, #3
 8003524:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					RobotResetAll();
					UARTState = MCUConnect;
					RobotState = NormalOperation;
				}
			}
			break;
 8003528:	e0e1      	b.n	80036ee <RobotstateManagement+0x226>
				else if(Robot.flagSethome == 3)
 800352a:	4b74      	ldr	r3, [pc, #464]	; (80036fc <RobotstateManagement+0x234>)
 800352c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003530:	2b03      	cmp	r3, #3
 8003532:	f040 80dc 	bne.w	80036ee <RobotstateManagement+0x226>
					RobotResetAll();
 8003536:	f000 fb9b 	bl	8003c70 <RobotResetAll>
					UARTState = MCUConnect;
 800353a:	4b72      	ldr	r3, [pc, #456]	; (8003704 <RobotstateManagement+0x23c>)
 800353c:	2202      	movs	r2, #2
 800353e:	701a      	strb	r2, [r3, #0]
					RobotState = NormalOperation;
 8003540:	4b6d      	ldr	r3, [pc, #436]	; (80036f8 <RobotstateManagement+0x230>)
 8003542:	2202      	movs	r2, #2
 8003544:	701a      	strb	r2, [r3, #0]
			break;
 8003546:	e0d2      	b.n	80036ee <RobotstateManagement+0x226>
		case NormalOperation:
			if(notContinueFlag == 1){
 8003548:	4b6f      	ldr	r3, [pc, #444]	; (8003708 <RobotstateManagement+0x240>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d10e      	bne.n	800356e <RobotstateManagement+0xa6>
				Robot.MotorIsOn = 1;
 8003550:	4b6a      	ldr	r3, [pc, #424]	; (80036fc <RobotstateManagement+0x234>)
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				Robot.RunningFlag = 1;
 8003558:	4b68      	ldr	r3, [pc, #416]	; (80036fc <RobotstateManagement+0x234>)
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				Robot.flagStartTime = 1;
 8003560:	4b66      	ldr	r3, [pc, #408]	; (80036fc <RobotstateManagement+0x234>)
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				notContinueFlag = 0;
 8003568:	4b67      	ldr	r3, [pc, #412]	; (8003708 <RobotstateManagement+0x240>)
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
			}
			if(doingTaskFlag == 1 && Robot.RunningFlag == 1 && endEffFlag == 0){
 800356e:	4b67      	ldr	r3, [pc, #412]	; (800370c <RobotstateManagement+0x244>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d159      	bne.n	800362a <RobotstateManagement+0x162>
 8003576:	4b61      	ldr	r3, [pc, #388]	; (80036fc <RobotstateManagement+0x234>)
 8003578:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800357c:	2b01      	cmp	r3, #1
 800357e:	d154      	bne.n	800362a <RobotstateManagement+0x162>
 8003580:	4b63      	ldr	r3, [pc, #396]	; (8003710 <RobotstateManagement+0x248>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d150      	bne.n	800362a <RobotstateManagement+0x162>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8003588:	2201      	movs	r2, #1
 800358a:	2108      	movs	r1, #8
 800358c:	4861      	ldr	r0, [pc, #388]	; (8003714 <RobotstateManagement+0x24c>)
 800358e:	f001 feed 	bl	800536c <HAL_GPIO_WritePin>
				if(goalFlag == 1 && goingToGoalFlag == 0){
 8003592:	4b61      	ldr	r3, [pc, #388]	; (8003718 <RobotstateManagement+0x250>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d11d      	bne.n	80035d6 <RobotstateManagement+0x10e>
 800359a:	4b60      	ldr	r3, [pc, #384]	; (800371c <RobotstateManagement+0x254>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d119      	bne.n	80035d6 <RobotstateManagement+0x10e>
					goingToGoalFlag = 1;
 80035a2:	4b5e      	ldr	r3, [pc, #376]	; (800371c <RobotstateManagement+0x254>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = uartPos;
 80035a8:	4b5d      	ldr	r3, [pc, #372]	; (8003720 <RobotstateManagement+0x258>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a53      	ldr	r2, [pc, #332]	; (80036fc <RobotstateManagement+0x234>)
 80035ae:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 80035b0:	4b52      	ldr	r3, [pc, #328]	; (80036fc <RobotstateManagement+0x234>)
 80035b2:	edd3 7a00 	vldr	s15, [r3]
 80035b6:	4b51      	ldr	r3, [pc, #324]	; (80036fc <RobotstateManagement+0x234>)
 80035b8:	ed93 7a03 	vldr	s14, [r3, #12]
 80035bc:	4b4f      	ldr	r3, [pc, #316]	; (80036fc <RobotstateManagement+0x234>)
 80035be:	edd3 6a08 	vldr	s13, [r3, #32]
 80035c2:	eeb0 1a66 	vmov.f32	s2, s13
 80035c6:	eef0 0a47 	vmov.f32	s1, s14
 80035ca:	eeb0 0a67 	vmov.f32	s0, s15
 80035ce:	4855      	ldr	r0, [pc, #340]	; (8003724 <RobotstateManagement+0x25c>)
 80035d0:	f7fe f852 	bl	8001678 <CoefficientAndTimeCalculation>
 80035d4:	e029      	b.n	800362a <RobotstateManagement+0x162>
				}
				else if(goalFlag == 2 && goingToGoalFlag == 0){
 80035d6:	4b50      	ldr	r3, [pc, #320]	; (8003718 <RobotstateManagement+0x250>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d125      	bne.n	800362a <RobotstateManagement+0x162>
 80035de:	4b4f      	ldr	r3, [pc, #316]	; (800371c <RobotstateManagement+0x254>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d121      	bne.n	800362a <RobotstateManagement+0x162>
					goingToGoalFlag = 1;
 80035e6:	4b4d      	ldr	r3, [pc, #308]	; (800371c <RobotstateManagement+0x254>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = goalDeg[uartGoal[goalIDX]-1];
 80035ec:	4b4e      	ldr	r3, [pc, #312]	; (8003728 <RobotstateManagement+0x260>)
 80035ee:	f993 3000 	ldrsb.w	r3, [r3]
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b4d      	ldr	r3, [pc, #308]	; (800372c <RobotstateManagement+0x264>)
 80035f6:	5c9b      	ldrb	r3, [r3, r2]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	4a4d      	ldr	r2, [pc, #308]	; (8003730 <RobotstateManagement+0x268>)
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a3e      	ldr	r2, [pc, #248]	; (80036fc <RobotstateManagement+0x234>)
 8003604:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 8003606:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <RobotstateManagement+0x234>)
 8003608:	edd3 7a00 	vldr	s15, [r3]
 800360c:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <RobotstateManagement+0x234>)
 800360e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003612:	4b3a      	ldr	r3, [pc, #232]	; (80036fc <RobotstateManagement+0x234>)
 8003614:	edd3 6a08 	vldr	s13, [r3, #32]
 8003618:	eeb0 1a66 	vmov.f32	s2, s13
 800361c:	eef0 0a47 	vmov.f32	s1, s14
 8003620:	eeb0 0a67 	vmov.f32	s0, s15
 8003624:	483f      	ldr	r0, [pc, #252]	; (8003724 <RobotstateManagement+0x25c>)
 8003626:	f7fe f827 	bl	8001678 <CoefficientAndTimeCalculation>
				}
			}

			if(endEffFlag == 0 && goingToGoalFlag == 1 && doingTaskFlag == 1){
 800362a:	4b39      	ldr	r3, [pc, #228]	; (8003710 <RobotstateManagement+0x248>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d132      	bne.n	8003698 <RobotstateManagement+0x1d0>
 8003632:	4b3a      	ldr	r3, [pc, #232]	; (800371c <RobotstateManagement+0x254>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d12e      	bne.n	8003698 <RobotstateManagement+0x1d0>
 800363a:	4b34      	ldr	r3, [pc, #208]	; (800370c <RobotstateManagement+0x244>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d12a      	bne.n	8003698 <RobotstateManagement+0x1d0>
				if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0){
 8003642:	4b2e      	ldr	r3, [pc, #184]	; (80036fc <RobotstateManagement+0x234>)
 8003644:	ed93 7a03 	vldr	s14, [r3, #12]
 8003648:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <RobotstateManagement+0x234>)
 800364a:	edd3 7a00 	vldr	s15, [r3]
 800364e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003652:	eeb0 0a67 	vmov.f32	s0, s15
 8003656:	f7fd ffed 	bl	8001634 <AbsVal>
 800365a:	eef0 7a40 	vmov.f32	s15, s0
 800365e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366a:	d515      	bpl.n	8003698 <RobotstateManagement+0x1d0>
 800366c:	4b23      	ldr	r3, [pc, #140]	; (80036fc <RobotstateManagement+0x234>)
 800366e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003672:	eeb0 0a67 	vmov.f32	s0, s15
 8003676:	f7fd ffdd 	bl	8001634 <AbsVal>
 800367a:	eef0 7a40 	vmov.f32	s15, s0
 800367e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368a:	d505      	bpl.n	8003698 <RobotstateManagement+0x1d0>
					endEffFlag = 1;
 800368c:	4b20      	ldr	r3, [pc, #128]	; (8003710 <RobotstateManagement+0x248>)
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
					goingToGoalFlag = 0;
 8003692:	4b22      	ldr	r3, [pc, #136]	; (800371c <RobotstateManagement+0x254>)
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
				}
			}

			if(goingToGoalFlag == 0 && doingTaskFlag == 1 && Robot.RunningFlag == 0 && endEffFlag == 1){
 8003698:	4b20      	ldr	r3, [pc, #128]	; (800371c <RobotstateManagement+0x254>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d128      	bne.n	80036f2 <RobotstateManagement+0x22a>
 80036a0:	4b1a      	ldr	r3, [pc, #104]	; (800370c <RobotstateManagement+0x244>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d124      	bne.n	80036f2 <RobotstateManagement+0x22a>
 80036a8:	4b14      	ldr	r3, [pc, #80]	; (80036fc <RobotstateManagement+0x234>)
 80036aa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d11f      	bne.n	80036f2 <RobotstateManagement+0x22a>
 80036b2:	4b17      	ldr	r3, [pc, #92]	; (8003710 <RobotstateManagement+0x248>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d11b      	bne.n	80036f2 <RobotstateManagement+0x22a>
				RobotState = EndEff;
 80036ba:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <RobotstateManagement+0x230>)
 80036bc:	2203      	movs	r2, #3
 80036be:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 80036c0:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <RobotstateManagement+0x26c>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 80036c6:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <RobotstateManagement+0x270>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	701a      	strb	r2, [r3, #0]
				EndEffState = CheckBeforRun;
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <RobotstateManagement+0x274>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80036d2:	e00e      	b.n	80036f2 <RobotstateManagement+0x22a>
		case EndEff:
			break;
		case Emergency:
			Robot.MotorIsOn = 0;
 80036d4:	4b09      	ldr	r3, [pc, #36]	; (80036fc <RobotstateManagement+0x234>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PIDAController_Init(&PidVelo);
 80036dc:	4818      	ldr	r0, [pc, #96]	; (8003740 <RobotstateManagement+0x278>)
 80036de:	f7fd fe51 	bl	8001384 <PIDAController_Init>
			PIDAController_Init(&PidPos);
 80036e2:	4818      	ldr	r0, [pc, #96]	; (8003744 <RobotstateManagement+0x27c>)
 80036e4:	f7fd fe4e 	bl	8001384 <PIDAController_Init>
			// Luv u pls pass
			break;
 80036e8:	e004      	b.n	80036f4 <RobotstateManagement+0x22c>
			break;
 80036ea:	bf00      	nop
 80036ec:	e002      	b.n	80036f4 <RobotstateManagement+0x22c>
			break;
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <RobotstateManagement+0x22c>
			break;
 80036f2:	bf00      	nop
	}
}
 80036f4:	bf00      	nop
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20000709 	.word	0x20000709
 80036fc:	200006d4 	.word	0x200006d4
 8003700:	424c0000 	.word	0x424c0000
 8003704:	20000708 	.word	0x20000708
 8003708:	20000767 	.word	0x20000767
 800370c:	20000764 	.word	0x20000764
 8003710:	20000762 	.word	0x20000762
 8003714:	40020400 	.word	0x40020400
 8003718:	20000761 	.word	0x20000761
 800371c:	20000765 	.word	0x20000765
 8003720:	2000074c 	.word	0x2000074c
 8003724:	2000086c 	.word	0x2000086c
 8003728:	20000760 	.word	0x20000760
 800372c:	20000750 	.word	0x20000750
 8003730:	20000004 	.word	0x20000004
 8003734:	20000af1 	.word	0x20000af1
 8003738:	20000af0 	.word	0x20000af0
 800373c:	20000000 	.word	0x20000000
 8003740:	20000800 	.word	0x20000800
 8003744:	20000834 	.word	0x20000834

08003748 <EndEffstateManagement>:

void EndEffstateManagement()
{
 8003748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
	switch (EndEffState)
 8003750:	4ba6      	ldr	r3, [pc, #664]	; (80039ec <EndEffstateManagement+0x2a4>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b04      	cmp	r3, #4
 8003756:	f200 8144 	bhi.w	80039e2 <EndEffstateManagement+0x29a>
 800375a:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <EndEffstateManagement+0x18>)
 800375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003760:	08003775 	.word	0x08003775
 8003764:	0800377d 	.word	0x0800377d
 8003768:	08003837 	.word	0x08003837
 800376c:	080038b5 	.word	0x080038b5
 8003770:	080038dd 	.word	0x080038dd
	{
		case idle:
			// Do not thing wait for command
			EndEffStatus = AwaitCommand;
 8003774:	4b9e      	ldr	r3, [pc, #632]	; (80039f0 <EndEffstateManagement+0x2a8>)
 8003776:	2203      	movs	r2, #3
 8003778:	701a      	strb	r2, [r3, #0]
//			I2CEndEffectorWriteFlag = 1;
			break;
 800377a:	e132      	b.n	80039e2 <EndEffstateManagement+0x29a>
		case CheckBeforRun:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 800377c:	4b9d      	ldr	r3, [pc, #628]	; (80039f4 <EndEffstateManagement+0x2ac>)
 800377e:	2223      	movs	r2, #35	; 0x23
 8003780:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 8003782:	489c      	ldr	r0, [pc, #624]	; (80039f4 <EndEffstateManagement+0x2ac>)
 8003784:	f000 f956 	bl	8003a34 <I2CWriteFcn>
			check[0]++;
 8003788:	4b9b      	ldr	r3, [pc, #620]	; (80039f8 <EndEffstateManagement+0x2b0>)
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	1c51      	adds	r1, r2, #1
 8003790:	6139      	str	r1, [r7, #16]
 8003792:	f143 0300 	adc.w	r3, r3, #0
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	4b97      	ldr	r3, [pc, #604]	; (80039f8 <EndEffstateManagement+0x2b0>)
 800379a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800379e:	e9c3 1200 	strd	r1, r2, [r3]
			if(hi2c1.State == HAL_I2C_STATE_READY)
 80037a2:	4b96      	ldr	r3, [pc, #600]	; (80039fc <EndEffstateManagement+0x2b4>)
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	f040 8112 	bne.w	80039d4 <EndEffstateManagement+0x28c>
			{
				I2CReadFcn(I2CRxDataBuffer);
 80037b0:	4893      	ldr	r0, [pc, #588]	; (8003a00 <EndEffstateManagement+0x2b8>)
 80037b2:	f000 f965 	bl	8003a80 <I2CReadFcn>
				check[1]++;
 80037b6:	4b90      	ldr	r3, [pc, #576]	; (80039f8 <EndEffstateManagement+0x2b0>)
 80037b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80037bc:	1c51      	adds	r1, r2, #1
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	f143 0300 	adc.w	r3, r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	4b8c      	ldr	r3, [pc, #560]	; (80039f8 <EndEffstateManagement+0x2b0>)
 80037c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80037cc:	e9c3 1202 	strd	r1, r2, [r3, #8]
				if(hi2c1.State == HAL_I2C_STATE_READY)
 80037d0:	4b8a      	ldr	r3, [pc, #552]	; (80039fc <EndEffstateManagement+0x2b4>)
 80037d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b20      	cmp	r3, #32
 80037da:	f040 80fb 	bne.w	80039d4 <EndEffstateManagement+0x28c>
				{
					if(I2CRxDataBuffer[0] == 0x78)
 80037de:	4b88      	ldr	r3, [pc, #544]	; (8003a00 <EndEffstateManagement+0x2b8>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b78      	cmp	r3, #120	; 0x78
 80037e4:	d119      	bne.n	800381a <EndEffstateManagement+0xd2>
					{
						check[2]++;
 80037e6:	4b84      	ldr	r3, [pc, #528]	; (80039f8 <EndEffstateManagement+0x2b0>)
 80037e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80037ec:	1c51      	adds	r1, r2, #1
 80037ee:	6039      	str	r1, [r7, #0]
 80037f0:	f143 0300 	adc.w	r3, r3, #0
 80037f4:	607b      	str	r3, [r7, #4]
 80037f6:	4b80      	ldr	r3, [pc, #512]	; (80039f8 <EndEffstateManagement+0x2b0>)
 80037f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80037fc:	e9c3 1204 	strd	r1, r2, [r3, #16]
						EndEffState = OpenLaser;
 8003800:	4b7a      	ldr	r3, [pc, #488]	; (80039ec <EndEffstateManagement+0x2a4>)
 8003802:	2202      	movs	r2, #2
 8003804:	701a      	strb	r2, [r3, #0]
						openLaserWriteFlag = 1;
 8003806:	4b7f      	ldr	r3, [pc, #508]	; (8003a04 <EndEffstateManagement+0x2bc>)
 8003808:	2201      	movs	r2, #1
 800380a:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorWriteFlag = 1;
 800380c:	4b7e      	ldr	r3, [pc, #504]	; (8003a08 <EndEffstateManagement+0x2c0>)
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorReadFlag =  0;
 8003812:	4b7e      	ldr	r3, [pc, #504]	; (8003a0c <EndEffstateManagement+0x2c4>)
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
						EndEffState = idle;
					}
				}
			}

		break;
 8003818:	e0dc      	b.n	80039d4 <EndEffstateManagement+0x28c>
						check[3]++;
 800381a:	4b77      	ldr	r3, [pc, #476]	; (80039f8 <EndEffstateManagement+0x2b0>)
 800381c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003820:	f112 0a01 	adds.w	sl, r2, #1
 8003824:	f143 0b00 	adc.w	fp, r3, #0
 8003828:	4b73      	ldr	r3, [pc, #460]	; (80039f8 <EndEffstateManagement+0x2b0>)
 800382a:	e9c3 ab06 	strd	sl, fp, [r3, #24]
						EndEffState = idle;
 800382e:	4b6f      	ldr	r3, [pc, #444]	; (80039ec <EndEffstateManagement+0x2a4>)
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
		break;
 8003834:	e0ce      	b.n	80039d4 <EndEffstateManagement+0x28c>
		case OpenLaser:
			// Open Laser
			if(openLaserWriteFlag == 1){
 8003836:	4b73      	ldr	r3, [pc, #460]	; (8003a04 <EndEffstateManagement+0x2bc>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d11d      	bne.n	800387a <EndEffstateManagement+0x132>
				check[4]++;
 800383e:	4b6e      	ldr	r3, [pc, #440]	; (80039f8 <EndEffstateManagement+0x2b0>)
 8003840:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003844:	1c50      	adds	r0, r2, #1
 8003846:	f143 0100 	adc.w	r1, r3, #0
 800384a:	4b6b      	ldr	r3, [pc, #428]	; (80039f8 <EndEffstateManagement+0x2b0>)
 800384c:	e9c3 0108 	strd	r0, r1, [r3, #32]
				I2CTxDataBuffer[0] = 0x45;
 8003850:	4b68      	ldr	r3, [pc, #416]	; (80039f4 <EndEffstateManagement+0x2ac>)
 8003852:	2245      	movs	r2, #69	; 0x45
 8003854:	701a      	strb	r2, [r3, #0]
				I2CWriteFcn(I2CTxDataBuffer);
 8003856:	4867      	ldr	r0, [pc, #412]	; (80039f4 <EndEffstateManagement+0x2ac>)
 8003858:	f000 f8ec 	bl	8003a34 <I2CWriteFcn>
				openLaserWriteFlag = 0;
 800385c:	4b69      	ldr	r3, [pc, #420]	; (8003a04 <EndEffstateManagement+0x2bc>)
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
				endEffLoopTime = Micros();
 8003862:	f000 fb2b 	bl	8003ebc <Micros>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	4969      	ldr	r1, [pc, #420]	; (8003a10 <EndEffstateManagement+0x2c8>)
 800386c:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003870:	2201      	movs	r2, #1
 8003872:	2110      	movs	r1, #16
 8003874:	4867      	ldr	r0, [pc, #412]	; (8003a14 <EndEffstateManagement+0x2cc>)
 8003876:	f001 fd79 	bl	800536c <HAL_GPIO_WritePin>
			}
			if(hi2c1.State == HAL_I2C_STATE_READY && Micros() - endEffLoopTime > 50000)
 800387a:	4b60      	ldr	r3, [pc, #384]	; (80039fc <EndEffstateManagement+0x2b4>)
 800387c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b20      	cmp	r3, #32
 8003884:	f040 80a8 	bne.w	80039d8 <EndEffstateManagement+0x290>
 8003888:	f000 fb18 	bl	8003ebc <Micros>
 800388c:	4b60      	ldr	r3, [pc, #384]	; (8003a10 <EndEffstateManagement+0x2c8>)
 800388e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003892:	1a84      	subs	r4, r0, r2
 8003894:	eb61 0503 	sbc.w	r5, r1, r3
 8003898:	f24c 3351 	movw	r3, #50001	; 0xc351
 800389c:	429c      	cmp	r4, r3
 800389e:	f175 0300 	sbcs.w	r3, r5, #0
 80038a2:	f0c0 8099 	bcc.w	80039d8 <EndEffstateManagement+0x290>
			{
				EndEffState = SetupReadStatus;
 80038a6:	4b51      	ldr	r3, [pc, #324]	; (80039ec <EndEffstateManagement+0x2a4>)
 80038a8:	2203      	movs	r2, #3
 80038aa:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 80038ac:	4b56      	ldr	r3, [pc, #344]	; (8003a08 <EndEffstateManagement+0x2c0>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80038b2:	e091      	b.n	80039d8 <EndEffstateManagement+0x290>
		case SetupReadStatus:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 80038b4:	4b4f      	ldr	r3, [pc, #316]	; (80039f4 <EndEffstateManagement+0x2ac>)
 80038b6:	2223      	movs	r2, #35	; 0x23
 80038b8:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 80038ba:	484e      	ldr	r0, [pc, #312]	; (80039f4 <EndEffstateManagement+0x2ac>)
 80038bc:	f000 f8ba 	bl	8003a34 <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 80038c0:	4b4e      	ldr	r3, [pc, #312]	; (80039fc <EndEffstateManagement+0x2b4>)
 80038c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	f040 8087 	bne.w	80039dc <EndEffstateManagement+0x294>
			{
				EndEffState = ReadStatus;
 80038ce:	4b47      	ldr	r3, [pc, #284]	; (80039ec <EndEffstateManagement+0x2a4>)
 80038d0:	2204      	movs	r2, #4
 80038d2:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 80038d4:	4b4d      	ldr	r3, [pc, #308]	; (8003a0c <EndEffstateManagement+0x2c4>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80038da:	e07f      	b.n	80039dc <EndEffstateManagement+0x294>
		case ReadStatus:
			I2CReadFcn(I2CRxDataBuffer);
 80038dc:	4848      	ldr	r0, [pc, #288]	; (8003a00 <EndEffstateManagement+0x2b8>)
 80038de:	f000 f8cf 	bl	8003a80 <I2CReadFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 80038e2:	4b46      	ldr	r3, [pc, #280]	; (80039fc <EndEffstateManagement+0x2b4>)
 80038e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d178      	bne.n	80039e0 <EndEffstateManagement+0x298>
			{
				I2CEndEffectorReadFlag =  1;
 80038ee:	4b47      	ldr	r3, [pc, #284]	; (8003a0c <EndEffstateManagement+0x2c4>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	701a      	strb	r2, [r3, #0]
				if(I2CRxDataBuffer[0] == 0x78)
 80038f4:	4b42      	ldr	r3, [pc, #264]	; (8003a00 <EndEffstateManagement+0x2b8>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b78      	cmp	r3, #120	; 0x78
 80038fa:	d141      	bne.n	8003980 <EndEffstateManagement+0x238>
				{
					check[5]++;
 80038fc:	4b3e      	ldr	r3, [pc, #248]	; (80039f8 <EndEffstateManagement+0x2b0>)
 80038fe:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003902:	f112 0801 	adds.w	r8, r2, #1
 8003906:	f143 0900 	adc.w	r9, r3, #0
 800390a:	4b3b      	ldr	r3, [pc, #236]	; (80039f8 <EndEffstateManagement+0x2b0>)
 800390c:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003910:	2200      	movs	r2, #0
 8003912:	2110      	movs	r1, #16
 8003914:	483f      	ldr	r0, [pc, #252]	; (8003a14 <EndEffstateManagement+0x2cc>)
 8003916:	f001 fd29 	bl	800536c <HAL_GPIO_WritePin>
					EndEffState = idle;
 800391a:	4b34      	ldr	r3, [pc, #208]	; (80039ec <EndEffstateManagement+0x2a4>)
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
					EndEffStatus = AwaitCommand;
 8003920:	4b33      	ldr	r3, [pc, #204]	; (80039f0 <EndEffstateManagement+0x2a8>)
 8003922:	2203      	movs	r2, #3
 8003924:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 8003926:	4b3c      	ldr	r3, [pc, #240]	; (8003a18 <EndEffstateManagement+0x2d0>)
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
					if(RobotState != Emergency){
 800392c:	4b3b      	ldr	r3, [pc, #236]	; (8003a1c <EndEffstateManagement+0x2d4>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b04      	cmp	r3, #4
 8003932:	d002      	beq.n	800393a <EndEffstateManagement+0x1f2>
						RobotState = NormalOperation;
 8003934:	4b39      	ldr	r3, [pc, #228]	; (8003a1c <EndEffstateManagement+0x2d4>)
 8003936:	2202      	movs	r2, #2
 8003938:	701a      	strb	r2, [r3, #0]
					}
					if(doingTaskFlag == 1){
 800393a:	4b39      	ldr	r3, [pc, #228]	; (8003a20 <EndEffstateManagement+0x2d8>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d14e      	bne.n	80039e0 <EndEffstateManagement+0x298>
						goalIDX++;
 8003942:	4b38      	ldr	r3, [pc, #224]	; (8003a24 <EndEffstateManagement+0x2dc>)
 8003944:	f993 3000 	ldrsb.w	r3, [r3]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	3301      	adds	r3, #1
 800394c:	b2db      	uxtb	r3, r3
 800394e:	b25a      	sxtb	r2, r3
 8003950:	4b34      	ldr	r3, [pc, #208]	; (8003a24 <EndEffstateManagement+0x2dc>)
 8003952:	701a      	strb	r2, [r3, #0]
						if(goalIDX > goalAmount-1){
 8003954:	4b34      	ldr	r3, [pc, #208]	; (8003a28 <EndEffstateManagement+0x2e0>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	4b32      	ldr	r3, [pc, #200]	; (8003a24 <EndEffstateManagement+0x2dc>)
 800395c:	f993 3000 	ldrsb.w	r3, [r3]
 8003960:	429a      	cmp	r2, r3
 8003962:	dc09      	bgt.n	8003978 <EndEffstateManagement+0x230>
							goalIDX = 0;
 8003964:	4b2f      	ldr	r3, [pc, #188]	; (8003a24 <EndEffstateManagement+0x2dc>)
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
							goalFlag = 0;
 800396a:	4b30      	ldr	r3, [pc, #192]	; (8003a2c <EndEffstateManagement+0x2e4>)
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]
							doingTaskFlag = 0;
 8003970:	4b2b      	ldr	r3, [pc, #172]	; (8003a20 <EndEffstateManagement+0x2d8>)
 8003972:	2200      	movs	r2, #0
 8003974:	701a      	strb	r2, [r3, #0]
					EndEffStatus = Closing;
					EndEffState = SetupReadStatus;
					I2CEndEffectorWriteFlag = 1;
				}
			}
			break;
 8003976:	e033      	b.n	80039e0 <EndEffstateManagement+0x298>
							notContinueFlag = 1;
 8003978:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <EndEffstateManagement+0x2e8>)
 800397a:	2201      	movs	r2, #1
 800397c:	701a      	strb	r2, [r3, #0]
			break;
 800397e:	e02f      	b.n	80039e0 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x12)
 8003980:	4b1f      	ldr	r3, [pc, #124]	; (8003a00 <EndEffstateManagement+0x2b8>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b12      	cmp	r3, #18
 8003986:	d109      	bne.n	800399c <EndEffstateManagement+0x254>
					EndEffStatus = Opening;
 8003988:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <EndEffstateManagement+0x2a8>)
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 800398e:	4b17      	ldr	r3, [pc, #92]	; (80039ec <EndEffstateManagement+0x2a4>)
 8003990:	2203      	movs	r2, #3
 8003992:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8003994:	4b1c      	ldr	r3, [pc, #112]	; (8003a08 <EndEffstateManagement+0x2c0>)
 8003996:	2201      	movs	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]
			break;
 800399a:	e021      	b.n	80039e0 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x34)
 800399c:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <EndEffstateManagement+0x2b8>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b34      	cmp	r3, #52	; 0x34
 80039a2:	d109      	bne.n	80039b8 <EndEffstateManagement+0x270>
					EndEffStatus = Working;
 80039a4:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <EndEffstateManagement+0x2a8>)
 80039a6:	2202      	movs	r2, #2
 80039a8:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 80039aa:	4b10      	ldr	r3, [pc, #64]	; (80039ec <EndEffstateManagement+0x2a4>)
 80039ac:	2203      	movs	r2, #3
 80039ae:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 80039b0:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <EndEffstateManagement+0x2c0>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	701a      	strb	r2, [r3, #0]
			break;
 80039b6:	e013      	b.n	80039e0 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x56)
 80039b8:	4b11      	ldr	r3, [pc, #68]	; (8003a00 <EndEffstateManagement+0x2b8>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b56      	cmp	r3, #86	; 0x56
 80039be:	d10f      	bne.n	80039e0 <EndEffstateManagement+0x298>
					EndEffStatus = Closing;
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <EndEffstateManagement+0x2a8>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 80039c6:	4b09      	ldr	r3, [pc, #36]	; (80039ec <EndEffstateManagement+0x2a4>)
 80039c8:	2203      	movs	r2, #3
 80039ca:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 80039cc:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <EndEffstateManagement+0x2c0>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	701a      	strb	r2, [r3, #0]
			break;
 80039d2:	e005      	b.n	80039e0 <EndEffstateManagement+0x298>
		break;
 80039d4:	bf00      	nop
 80039d6:	e004      	b.n	80039e2 <EndEffstateManagement+0x29a>
			break;
 80039d8:	bf00      	nop
 80039da:	e002      	b.n	80039e2 <EndEffstateManagement+0x29a>
			break;
 80039dc:	bf00      	nop
 80039de:	e000      	b.n	80039e2 <EndEffstateManagement+0x29a>
			break;
 80039e0:	bf00      	nop
	}
}
 80039e2:	bf00      	nop
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ec:	20000000 	.word	0x20000000
 80039f0:	20000001 	.word	0x20000001
 80039f4:	20000af8 	.word	0x20000af8
 80039f8:	20000790 	.word	0x20000790
 80039fc:	2000045c 	.word	0x2000045c
 8003a00:	20000af4 	.word	0x20000af4
 8003a04:	20000766 	.word	0x20000766
 8003a08:	20000af1 	.word	0x20000af1
 8003a0c:	20000af0 	.word	0x20000af0
 8003a10:	20000ad8 	.word	0x20000ad8
 8003a14:	40020400 	.word	0x40020400
 8003a18:	20000762 	.word	0x20000762
 8003a1c:	20000709 	.word	0x20000709
 8003a20:	20000764 	.word	0x20000764
 8003a24:	20000760 	.word	0x20000760
 8003a28:	2000075f 	.word	0x2000075f
 8003a2c:	20000761 	.word	0x20000761
 8003a30:	20000767 	.word	0x20000767

08003a34 <I2CWriteFcn>:

void I2CWriteFcn(uint8_t *Wdata) {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorWriteFlag == 1  && hi2c1.State == HAL_I2C_STATE_READY) {
 8003a3c:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <I2CWriteFcn+0x40>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d112      	bne.n	8003a6a <I2CWriteFcn+0x36>
 8003a44:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <I2CWriteFcn+0x44>)
 8003a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d10c      	bne.n	8003a6a <I2CWriteFcn+0x36>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	781a      	ldrb	r2, [r3, #0]
		static uint8_t data[EndEffRxBuf_SIZE];
		memcpy ((uint8_t *)data, (uint8_t *)Wdata, EndEffRxBuf_SIZE);
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <I2CWriteFcn+0x48>)
 8003a56:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, Endeff_ADDR, data, I2CTxDataLen);
 8003a58:	2301      	movs	r3, #1
 8003a5a:	4a08      	ldr	r2, [pc, #32]	; (8003a7c <I2CWriteFcn+0x48>)
 8003a5c:	2146      	movs	r1, #70	; 0x46
 8003a5e:	4806      	ldr	r0, [pc, #24]	; (8003a78 <I2CWriteFcn+0x44>)
 8003a60:	f001 fe14 	bl	800568c <HAL_I2C_Master_Transmit_IT>
		I2CEndEffectorWriteFlag = 0;
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <I2CWriteFcn+0x40>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]
	}
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20000af1 	.word	0x20000af1
 8003a78:	2000045c 	.word	0x2000045c
 8003a7c:	20000b0c 	.word	0x20000b0c

08003a80 <I2CReadFcn>:
void I2CReadFcn(uint8_t *Rdata) {
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY) {
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <I2CReadFcn+0x38>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d10e      	bne.n	8003aae <I2CReadFcn+0x2e>
 8003a90:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <I2CReadFcn+0x3c>)
 8003a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	d108      	bne.n	8003aae <I2CReadFcn+0x2e>
		HAL_I2C_Master_Receive_IT(&hi2c1, Endeff_ADDR, Rdata, I2CRxDataLen);
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	2146      	movs	r1, #70	; 0x46
 8003aa2:	4806      	ldr	r0, [pc, #24]	; (8003abc <I2CReadFcn+0x3c>)
 8003aa4:	f001 fe98 	bl	80057d8 <HAL_I2C_Master_Receive_IT>
		I2CEndEffectorReadFlag =  0;
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <I2CReadFcn+0x38>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
	}
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000af0 	.word	0x20000af0
 8003abc:	2000045c 	.word	0x2000045c

08003ac0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ac0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	4603      	mov	r3, r0
 8003aca:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ad2:	d103      	bne.n	8003adc <HAL_GPIO_EXTI_Callback+0x1c>
	{
//		I2CEndEffectorWriteFlag = 1;
//		I2CEndEffectorReadFlag =  1;
//		EndEffState = CheckBeforRun;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8003ad4:	2108      	movs	r1, #8
 8003ad6:	483e      	ldr	r0, [pc, #248]	; (8003bd0 <HAL_GPIO_EXTI_Callback+0x110>)
 8003ad8:	f001 fc61 	bl	800539e <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_10)
 8003adc:	88fb      	ldrh	r3, [r7, #6]
 8003ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae2:	d13e      	bne.n	8003b62 <HAL_GPIO_EXTI_Callback+0xa2>
	{
		// Proxi Sensor
		if(Robot.flagSethome == 1)
 8003ae4:	4b3b      	ldr	r3, [pc, #236]	; (8003bd4 <HAL_GPIO_EXTI_Callback+0x114>)
 8003ae6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d139      	bne.n	8003b62 <HAL_GPIO_EXTI_Callback+0xa2>
		{
			homePoint[homeFF] = PositionDeg[0];
 8003aee:	4b3a      	ldr	r3, [pc, #232]	; (8003bd8 <HAL_GPIO_EXTI_Callback+0x118>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <HAL_GPIO_EXTI_Callback+0x11c>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4939      	ldr	r1, [pc, #228]	; (8003be0 <HAL_GPIO_EXTI_Callback+0x120>)
 8003afa:	0083      	lsls	r3, r0, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	601a      	str	r2, [r3, #0]
			homeFF++;
 8003b00:	4b35      	ldr	r3, [pc, #212]	; (8003bd8 <HAL_GPIO_EXTI_Callback+0x118>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	3301      	adds	r3, #1
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	4b33      	ldr	r3, [pc, #204]	; (8003bd8 <HAL_GPIO_EXTI_Callback+0x118>)
 8003b0a:	701a      	strb	r2, [r3, #0]
			if(homeFF == 2)
 8003b0c:	4b32      	ldr	r3, [pc, #200]	; (8003bd8 <HAL_GPIO_EXTI_Callback+0x118>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d126      	bne.n	8003b62 <HAL_GPIO_EXTI_Callback+0xa2>
			{
				if(homePoint[1]-homePoint[0] > 180.0)
 8003b14:	4b32      	ldr	r3, [pc, #200]	; (8003be0 <HAL_GPIO_EXTI_Callback+0x120>)
 8003b16:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b1a:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <HAL_GPIO_EXTI_Callback+0x120>)
 8003b1c:	edd3 7a00 	vldr	s15, [r3]
 8003b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b24:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003be4 <HAL_GPIO_EXTI_Callback+0x124>
 8003b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b30:	dd04      	ble.n	8003b3c <HAL_GPIO_EXTI_Callback+0x7c>
				{
					Robot.HomePositon =  0;
 8003b32:	4b28      	ldr	r3, [pc, #160]	; (8003bd4 <HAL_GPIO_EXTI_Callback+0x114>)
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	615a      	str	r2, [r3, #20]
 8003b3a:	e00e      	b.n	8003b5a <HAL_GPIO_EXTI_Callback+0x9a>
				}
				else
				{
					Robot.HomePositon = (homePoint[0]+homePoint[1])/2.0;
 8003b3c:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <HAL_GPIO_EXTI_Callback+0x120>)
 8003b3e:	ed93 7a00 	vldr	s14, [r3]
 8003b42:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <HAL_GPIO_EXTI_Callback+0x120>)
 8003b44:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b4c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003b50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b54:	4b1f      	ldr	r3, [pc, #124]	; (8003bd4 <HAL_GPIO_EXTI_Callback+0x114>)
 8003b56:	edc3 7a05 	vstr	s15, [r3, #20]
				}
				Robot.flagSethome = 2;
 8003b5a:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <HAL_GPIO_EXTI_Callback+0x114>)
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			}
		}
	}
	if(GPIO_Pin == GPIO_PIN_5)
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d12e      	bne.n	8003bc6 <HAL_GPIO_EXTI_Callback+0x106>
	{
		if(EmertimeoutFlag == 0)
 8003b68:	4b1f      	ldr	r3, [pc, #124]	; (8003be8 <HAL_GPIO_EXTI_Callback+0x128>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d102      	bne.n	8003b76 <HAL_GPIO_EXTI_Callback+0xb6>
		{
			EmertimeoutFlag = 1;
 8003b70:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <HAL_GPIO_EXTI_Callback+0x128>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	701a      	strb	r2, [r3, #0]
		}

		if(Micros() - EmergencycalloutTime > 100000 && EmertimeoutFlag == 1)
 8003b76:	f000 f9a1 	bl	8003ebc <Micros>
 8003b7a:	4b1c      	ldr	r3, [pc, #112]	; (8003bec <HAL_GPIO_EXTI_Callback+0x12c>)
 8003b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b80:	1a84      	subs	r4, r0, r2
 8003b82:	eb61 0503 	sbc.w	r5, r1, r3
 8003b86:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <HAL_GPIO_EXTI_Callback+0x130>)
 8003b88:	429c      	cmp	r4, r3
 8003b8a:	f175 0300 	sbcs.w	r3, r5, #0
 8003b8e:	d31a      	bcc.n	8003bc6 <HAL_GPIO_EXTI_Callback+0x106>
 8003b90:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <HAL_GPIO_EXTI_Callback+0x128>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d116      	bne.n	8003bc6 <HAL_GPIO_EXTI_Callback+0x106>
		{
			check[6]++;
 8003b98:	4b16      	ldr	r3, [pc, #88]	; (8003bf4 <HAL_GPIO_EXTI_Callback+0x134>)
 8003b9a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003b9e:	f112 0801 	adds.w	r8, r2, #1
 8003ba2:	f143 0900 	adc.w	r9, r3, #0
 8003ba6:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <HAL_GPIO_EXTI_Callback+0x134>)
 8003ba8:	e9c3 890c 	strd	r8, r9, [r3, #48]	; 0x30
			EmergencycalloutTime = Micros();
 8003bac:	f000 f986 	bl	8003ebc <Micros>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	490d      	ldr	r1, [pc, #52]	; (8003bec <HAL_GPIO_EXTI_Callback+0x12c>)
 8003bb6:	e9c1 2300 	strd	r2, r3, [r1]
			EmertimeoutFlag = 0;
 8003bba:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_GPIO_EXTI_Callback+0x128>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	701a      	strb	r2, [r3, #0]
			//Docode
			HAL_TIM_Base_Start_IT(&htim5);
 8003bc0:	480d      	ldr	r0, [pc, #52]	; (8003bf8 <HAL_GPIO_EXTI_Callback+0x138>)
 8003bc2:	f004 f87b 	bl	8007cbc <HAL_TIM_Base_Start_IT>
		}
	}
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003bd0:	40020400 	.word	0x40020400
 8003bd4:	200006d4 	.word	0x200006d4
 8003bd8:	200006fc 	.word	0x200006fc
 8003bdc:	200007f0 	.word	0x200007f0
 8003be0:	20000700 	.word	0x20000700
 8003be4:	43340000 	.word	0x43340000
 8003be8:	20000ad0 	.word	0x20000ad0
 8003bec:	20000ac8 	.word	0x20000ac8
 8003bf0:	000186a1 	.word	0x000186a1
 8003bf4:	20000790 	.word	0x20000790
 8003bf8:	20000540 	.word	0x20000540

08003bfc <RobotRunToPositon>:
void RobotRunToPositon(float Destination , float VeloInput)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	ed87 0a01 	vstr	s0, [r7, #4]
 8003c06:	edc7 0a00 	vstr	s1, [r7]
	Robot.GoalPositon = Destination;
 8003c0a:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <RobotRunToPositon+0x68>)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	60d3      	str	r3, [r2, #12]
	Robot.QVMax = VeloInput;
 8003c10:	4a14      	ldr	r2, [pc, #80]	; (8003c64 <RobotRunToPositon+0x68>)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6213      	str	r3, [r2, #32]
	CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 8003c16:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <RobotRunToPositon+0x68>)
 8003c18:	edd3 7a00 	vldr	s15, [r3]
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <RobotRunToPositon+0x68>)
 8003c1e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <RobotRunToPositon+0x68>)
 8003c24:	edd3 6a08 	vldr	s13, [r3, #32]
 8003c28:	eeb0 1a66 	vmov.f32	s2, s13
 8003c2c:	eef0 0a47 	vmov.f32	s1, s14
 8003c30:	eeb0 0a67 	vmov.f32	s0, s15
 8003c34:	480c      	ldr	r0, [pc, #48]	; (8003c68 <RobotRunToPositon+0x6c>)
 8003c36:	f7fd fd1f 	bl	8001678 <CoefficientAndTimeCalculation>
	// Start Trajectory Evaluator
	Robot.MotorIsOn = 1;
 8003c3a:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <RobotRunToPositon+0x68>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Robot.flagStartTime = 1;
 8003c42:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <RobotRunToPositon+0x68>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Robot.RunningFlag = 1;
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <RobotRunToPositon+0x68>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8003c52:	2201      	movs	r2, #1
 8003c54:	2108      	movs	r1, #8
 8003c56:	4805      	ldr	r0, [pc, #20]	; (8003c6c <RobotRunToPositon+0x70>)
 8003c58:	f001 fb88 	bl	800536c <HAL_GPIO_WritePin>
}
 8003c5c:	bf00      	nop
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	200006d4 	.word	0x200006d4
 8003c68:	2000086c 	.word	0x2000086c
 8003c6c:	40020400 	.word	0x40020400

08003c70 <RobotResetAll>:

void RobotResetAll()
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
	// Reset Encoder
	TIM_ResetCounter(TIM2);
 8003c74:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003c78:	f000 f866 	bl	8003d48 <TIM_ResetCounter>
	EncoderRawData[0] = 0;
 8003c7c:	4b23      	ldr	r3, [pc, #140]	; (8003d0c <RobotResetAll+0x9c>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
	EncoderRawData[1] = 0;
 8003c82:	4b22      	ldr	r3, [pc, #136]	; (8003d0c <RobotResetAll+0x9c>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	605a      	str	r2, [r3, #4]
	WrappingStep = 0;
 8003c88:	4b21      	ldr	r3, [pc, #132]	; (8003d10 <RobotResetAll+0xa0>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
	// Reset Trajectory
	CoefficientAndTimeCalculation(&traject,0.0,0.0,60);
 8003c8e:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8003d14 <RobotResetAll+0xa4>
 8003c92:	eddf 0a21 	vldr	s1, [pc, #132]	; 8003d18 <RobotResetAll+0xa8>
 8003c96:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8003d18 <RobotResetAll+0xa8>
 8003c9a:	4820      	ldr	r0, [pc, #128]	; (8003d1c <RobotResetAll+0xac>)
 8003c9c:	f7fd fcec 	bl	8001678 <CoefficientAndTimeCalculation>
	Robot.flagStartTime = 1;
 8003ca0:	4b1f      	ldr	r3, [pc, #124]	; (8003d20 <RobotResetAll+0xb0>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	StartTime = 0;
 8003ca8:	491e      	ldr	r1, [pc, #120]	; (8003d24 <RobotResetAll+0xb4>)
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	e9c1 2300 	strd	r2, r3, [r1]
	CurrentTime = 0;
 8003cb6:	491c      	ldr	r1, [pc, #112]	; (8003d28 <RobotResetAll+0xb8>)
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	e9c1 2300 	strd	r2, r3, [r1]
	// Reset Position
	PositionDeg[0] = 0;
 8003cc4:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <RobotResetAll+0xbc>)
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
	PositionDeg[1] = 0;
 8003ccc:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <RobotResetAll+0xbc>)
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	605a      	str	r2, [r3, #4]
	KalmanMatrixReset(&KalmanVar, Pvar);
 8003cd4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8003d30 <RobotResetAll+0xc0>
 8003cd8:	4816      	ldr	r0, [pc, #88]	; (8003d34 <RobotResetAll+0xc4>)
 8003cda:	f7fd f9a5 	bl	8001028 <KalmanMatrixReset>
	Robotinit(&Robot);
 8003cde:	4810      	ldr	r0, [pc, #64]	; (8003d20 <RobotResetAll+0xb0>)
 8003ce0:	f7fd fc42 	bl	8001568 <Robotinit>
	// Reset Pid
	PIDAController_Init(&PidVelo);
 8003ce4:	4814      	ldr	r0, [pc, #80]	; (8003d38 <RobotResetAll+0xc8>)
 8003ce6:	f7fd fb4d 	bl	8001384 <PIDAController_Init>
	PIDAController_Init(&PidPos);
 8003cea:	4814      	ldr	r0, [pc, #80]	; (8003d3c <RobotResetAll+0xcc>)
 8003cec:	f7fd fb4a 	bl	8001384 <PIDAController_Init>
	// Reset Home Buffer
	homePoint[0] = 0;
 8003cf0:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <RobotResetAll+0xd0>)
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
	homePoint[1] = 0;
 8003cf8:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <RobotResetAll+0xd0>)
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	605a      	str	r2, [r3, #4]
	homeFF = 0;
 8003d00:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <RobotResetAll+0xd4>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200007e0 	.word	0x200007e0
 8003d10:	200007e8 	.word	0x200007e8
 8003d14:	42700000 	.word	0x42700000
 8003d18:	00000000 	.word	0x00000000
 8003d1c:	2000086c 	.word	0x2000086c
 8003d20:	200006d4 	.word	0x200006d4
 8003d24:	20000aa0 	.word	0x20000aa0
 8003d28:	20000aa8 	.word	0x20000aa8
 8003d2c:	200007f0 	.word	0x200007f0
 8003d30:	447a0000 	.word	0x447a0000
 8003d34:	20000034 	.word	0x20000034
 8003d38:	20000800 	.word	0x20000800
 8003d3c:	20000834 	.word	0x20000834
 8003d40:	20000700 	.word	0x20000700
 8003d44:	200006fc 	.word	0x200006fc

08003d48 <TIM_ResetCounter>:

void TIM_ResetCounter(TIM_TypeDef* TIMx)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Reset the Counter Register value */
  TIMx->CNT = 0;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a47      	ldr	r2, [pc, #284]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d10b      	bne.n	8003d8e <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micro += 65535;
 8003d76:	4b47      	ldr	r3, [pc, #284]	; (8003e94 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d80:	eb12 0a01 	adds.w	sl, r2, r1
 8003d84:	f143 0b00 	adc.w	fp, r3, #0
 8003d88:	4b42      	ldr	r3, [pc, #264]	; (8003e94 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003d8a:	e9c3 ab00 	strd	sl, fp, [r3]
	}
	if (htim == &htim5){
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a41      	ldr	r2, [pc, #260]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d177      	bne.n	8003e86 <HAL_TIM_PeriodElapsedCallback+0x122>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET)
 8003d96:	2120      	movs	r1, #32
 8003d98:	4840      	ldr	r0, [pc, #256]	; (8003e9c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003d9a:	f001 facf 	bl	800533c <HAL_GPIO_ReadPin>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d15b      	bne.n	8003e5c <HAL_TIM_PeriodElapsedCallback+0xf8>
		{
			check[7]++;
 8003da4:	4b3e      	ldr	r3, [pc, #248]	; (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003da6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003daa:	f112 0801 	adds.w	r8, r2, #1
 8003dae:	f143 0900 	adc.w	r9, r3, #0
 8003db2:	4b3b      	ldr	r3, [pc, #236]	; (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003db4:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
			if(EndEffState != idle)
 8003db8:	4b3a      	ldr	r3, [pc, #232]	; (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_TIM_PeriodElapsedCallback+0x64>
			{
				RobotState = EndEff;
 8003dc0:	4b39      	ldr	r3, [pc, #228]	; (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	e002      	b.n	8003dce <HAL_TIM_PeriodElapsedCallback+0x6a>
			}
			else
			{
				RobotState = NormalOperation;
 8003dc8:	4b37      	ldr	r3, [pc, #220]	; (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003dca:	2202      	movs	r2, #2
 8003dcc:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003dd4:	4831      	ldr	r0, [pc, #196]	; (8003e9c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003dd6:	f001 fac9 	bl	800536c <HAL_GPIO_WritePin>
			if((doingTaskFlag == 1 && goingToGoalFlag == 1) || homingFlag == 1)
 8003dda:	4b34      	ldr	r3, [pc, #208]	; (8003eac <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d103      	bne.n	8003dea <HAL_TIM_PeriodElapsedCallback+0x86>
 8003de2:	4b33      	ldr	r3, [pc, #204]	; (8003eb0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d003      	beq.n	8003df2 <HAL_TIM_PeriodElapsedCallback+0x8e>
 8003dea:	4b32      	ldr	r3, [pc, #200]	; (8003eb4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d10b      	bne.n	8003e0a <HAL_TIM_PeriodElapsedCallback+0xa6>
			{
				RobotRunToPositon(Robot.GoalPositon,Robot.QVMax);
 8003df2:	4b31      	ldr	r3, [pc, #196]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003df4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003df8:	4b2f      	ldr	r3, [pc, #188]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003dfa:	ed93 7a08 	vldr	s14, [r3, #32]
 8003dfe:	eef0 0a47 	vmov.f32	s1, s14
 8003e02:	eeb0 0a67 	vmov.f32	s0, s15
 8003e06:	f7ff fef9 	bl	8003bfc <RobotRunToPositon>
			}
			if(Robot.flagSethome == 1){
 8003e0a:	4b2b      	ldr	r3, [pc, #172]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003e0c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d105      	bne.n	8003e20 <HAL_TIM_PeriodElapsedCallback+0xbc>
				RobotResetAll();
 8003e14:	f7ff ff2c 	bl	8003c70 <RobotResetAll>
				RobotState = init;
 8003e18:	4b23      	ldr	r3, [pc, #140]	; (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e02f      	b.n	8003e80 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
			else if(Robot.flagSethome == 2 || Robot.flagSethome == 3)
 8003e20:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003e22:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d004      	beq.n	8003e34 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8003e2a:	4b23      	ldr	r3, [pc, #140]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003e2c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d125      	bne.n	8003e80 <HAL_TIM_PeriodElapsedCallback+0x11c>
			{
				Robot.flagSethome = 3;
 8003e34:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003e36:	2203      	movs	r2, #3
 8003e38:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				RobotRunToPositon(Robot.HomePositon,Robot.QVMax);
 8003e3c:	4b1e      	ldr	r3, [pc, #120]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003e3e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e42:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003e44:	ed93 7a08 	vldr	s14, [r3, #32]
 8003e48:	eef0 0a47 	vmov.f32	s1, s14
 8003e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e50:	f7ff fed4 	bl	8003bfc <RobotRunToPositon>
				RobotState = FindHome;
 8003e54:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e011      	b.n	8003e80 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
		}
		else
		{
			check[8]++;
 8003e5c:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003e5e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003e62:	1c54      	adds	r4, r2, #1
 8003e64:	f143 0500 	adc.w	r5, r3, #0
 8003e68:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003e6a:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
			RobotState = Emergency;
 8003e6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003e70:	2204      	movs	r2, #4
 8003e72:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8003e74:	2201      	movs	r2, #1
 8003e76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e7a:	4808      	ldr	r0, [pc, #32]	; (8003e9c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003e7c:	f001 fa76 	bl	800536c <HAL_GPIO_WritePin>
		}
		HAL_TIM_Base_Stop_IT(&htim5);
 8003e80:	4805      	ldr	r0, [pc, #20]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003e82:	f003 ff7d 	bl	8007d80 <HAL_TIM_Base_Stop_IT>
	}
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e90:	20000588 	.word	0x20000588
 8003e94:	20000770 	.word	0x20000770
 8003e98:	20000540 	.word	0x20000540
 8003e9c:	40020400 	.word	0x40020400
 8003ea0:	20000790 	.word	0x20000790
 8003ea4:	20000000 	.word	0x20000000
 8003ea8:	20000709 	.word	0x20000709
 8003eac:	20000764 	.word	0x20000764
 8003eb0:	20000765 	.word	0x20000765
 8003eb4:	20000763 	.word	0x20000763
 8003eb8:	200006d4 	.word	0x200006d4

08003ebc <Micros>:

uint64_t Micros(){
 8003ebc:	b4b0      	push	{r4, r5, r7}
 8003ebe:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8003ec0:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <Micros+0x28>)
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	4611      	mov	r1, r2
 8003eca:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <Micros+0x2c>)
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	1884      	adds	r4, r0, r2
 8003ed2:	eb41 0503 	adc.w	r5, r1, r3
 8003ed6:	4622      	mov	r2, r4
 8003ed8:	462b      	mov	r3, r5
}
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bcb0      	pop	{r4, r5, r7}
 8003ee2:	4770      	bx	lr
 8003ee4:	40014800 	.word	0x40014800
 8003ee8:	20000770 	.word	0x20000770

08003eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003ef0:	b672      	cpsid	i
}
 8003ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ef4:	e7fe      	b.n	8003ef4 <Error_Handler+0x8>
	...

08003ef8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	4b10      	ldr	r3, [pc, #64]	; (8003f44 <HAL_MspInit+0x4c>)
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	4a0f      	ldr	r2, [pc, #60]	; (8003f44 <HAL_MspInit+0x4c>)
 8003f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <HAL_MspInit+0x4c>)
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f16:	607b      	str	r3, [r7, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	603b      	str	r3, [r7, #0]
 8003f1e:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <HAL_MspInit+0x4c>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	4a08      	ldr	r2, [pc, #32]	; (8003f44 <HAL_MspInit+0x4c>)
 8003f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f28:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <HAL_MspInit+0x4c>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003f36:	2007      	movs	r0, #7
 8003f38:	f000 fc2a 	bl	8004790 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f3c:	bf00      	nop
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40023800 	.word	0x40023800

08003f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	; 0x28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f50:	f107 0314 	add.w	r3, r7, #20
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a21      	ldr	r2, [pc, #132]	; (8003fec <HAL_I2C_MspInit+0xa4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d13c      	bne.n	8003fe4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <HAL_I2C_MspInit+0xa8>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	4a1f      	ldr	r2, [pc, #124]	; (8003ff0 <HAL_I2C_MspInit+0xa8>)
 8003f74:	f043 0302 	orr.w	r3, r3, #2
 8003f78:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7a:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <HAL_I2C_MspInit+0xa8>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f8c:	2312      	movs	r3, #18
 8003f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f94:	2303      	movs	r3, #3
 8003f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f98:	2304      	movs	r3, #4
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9c:	f107 0314 	add.w	r3, r7, #20
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4814      	ldr	r0, [pc, #80]	; (8003ff4 <HAL_I2C_MspInit+0xac>)
 8003fa4:	f001 f846 	bl	8005034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <HAL_I2C_MspInit+0xa8>)
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	4a0f      	ldr	r2, [pc, #60]	; (8003ff0 <HAL_I2C_MspInit+0xa8>)
 8003fb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb8:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <HAL_I2C_MspInit+0xa8>)
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	201f      	movs	r0, #31
 8003fca:	f000 fbec 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003fce:	201f      	movs	r0, #31
 8003fd0:	f000 fc05 	bl	80047de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	2020      	movs	r0, #32
 8003fda:	f000 fbe4 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003fde:	2020      	movs	r0, #32
 8003fe0:	f000 fbfd 	bl	80047de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003fe4:	bf00      	nop
 8003fe6:	3728      	adds	r7, #40	; 0x28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40005400 	.word	0x40005400
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40020400 	.word	0x40020400

08003ff8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a0e      	ldr	r2, [pc, #56]	; (8004040 <HAL_TIM_PWM_MspInit+0x48>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d115      	bne.n	8004036 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	4b0d      	ldr	r3, [pc, #52]	; (8004044 <HAL_TIM_PWM_MspInit+0x4c>)
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	4a0c      	ldr	r2, [pc, #48]	; (8004044 <HAL_TIM_PWM_MspInit+0x4c>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	6453      	str	r3, [r2, #68]	; 0x44
 800401a:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <HAL_TIM_PWM_MspInit+0x4c>)
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004026:	2200      	movs	r2, #0
 8004028:	2100      	movs	r1, #0
 800402a:	201a      	movs	r0, #26
 800402c:	f000 fbbb 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004030:	201a      	movs	r0, #26
 8004032:	f000 fbd4 	bl	80047de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40010000 	.word	0x40010000
 8004044:	40023800 	.word	0x40023800

08004048 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08a      	sub	sp, #40	; 0x28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004050:	f107 0314 	add.w	r3, r7, #20
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	60da      	str	r2, [r3, #12]
 800405e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004068:	d12b      	bne.n	80040c2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	4b17      	ldr	r3, [pc, #92]	; (80040cc <HAL_TIM_Encoder_MspInit+0x84>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	4a16      	ldr	r2, [pc, #88]	; (80040cc <HAL_TIM_Encoder_MspInit+0x84>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	6413      	str	r3, [r2, #64]	; 0x40
 800407a:	4b14      	ldr	r3, [pc, #80]	; (80040cc <HAL_TIM_Encoder_MspInit+0x84>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	4b10      	ldr	r3, [pc, #64]	; (80040cc <HAL_TIM_Encoder_MspInit+0x84>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	4a0f      	ldr	r2, [pc, #60]	; (80040cc <HAL_TIM_Encoder_MspInit+0x84>)
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	6313      	str	r3, [r2, #48]	; 0x30
 8004096:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <HAL_TIM_Encoder_MspInit+0x84>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80040a2:	2303      	movs	r3, #3
 80040a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a6:	2302      	movs	r3, #2
 80040a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ae:	2300      	movs	r3, #0
 80040b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80040b2:	2301      	movs	r3, #1
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b6:	f107 0314 	add.w	r3, r7, #20
 80040ba:	4619      	mov	r1, r3
 80040bc:	4804      	ldr	r0, [pc, #16]	; (80040d0 <HAL_TIM_Encoder_MspInit+0x88>)
 80040be:	f000 ffb9 	bl	8005034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80040c2:	bf00      	nop
 80040c4:	3728      	adds	r7, #40	; 0x28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40020000 	.word	0x40020000

080040d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1c      	ldr	r2, [pc, #112]	; (8004154 <HAL_TIM_Base_MspInit+0x80>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d116      	bne.n	8004114 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	4b1b      	ldr	r3, [pc, #108]	; (8004158 <HAL_TIM_Base_MspInit+0x84>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	4a1a      	ldr	r2, [pc, #104]	; (8004158 <HAL_TIM_Base_MspInit+0x84>)
 80040f0:	f043 0308 	orr.w	r3, r3, #8
 80040f4:	6413      	str	r3, [r2, #64]	; 0x40
 80040f6:	4b18      	ldr	r3, [pc, #96]	; (8004158 <HAL_TIM_Base_MspInit+0x84>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004102:	2200      	movs	r2, #0
 8004104:	2100      	movs	r1, #0
 8004106:	2032      	movs	r0, #50	; 0x32
 8004108:	f000 fb4d 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800410c:	2032      	movs	r0, #50	; 0x32
 800410e:	f000 fb66 	bl	80047de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004112:	e01a      	b.n	800414a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a10      	ldr	r2, [pc, #64]	; (800415c <HAL_TIM_Base_MspInit+0x88>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d115      	bne.n	800414a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	4b0d      	ldr	r3, [pc, #52]	; (8004158 <HAL_TIM_Base_MspInit+0x84>)
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	4a0c      	ldr	r2, [pc, #48]	; (8004158 <HAL_TIM_Base_MspInit+0x84>)
 8004128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800412c:	6453      	str	r3, [r2, #68]	; 0x44
 800412e:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <HAL_TIM_Base_MspInit+0x84>)
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800413a:	2200      	movs	r2, #0
 800413c:	2100      	movs	r1, #0
 800413e:	201a      	movs	r0, #26
 8004140:	f000 fb31 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004144:	201a      	movs	r0, #26
 8004146:	f000 fb4a 	bl	80047de <HAL_NVIC_EnableIRQ>
}
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40000c00 	.word	0x40000c00
 8004158:	40023800 	.word	0x40023800
 800415c:	40014800 	.word	0x40014800

08004160 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004168:	f107 030c 	add.w	r3, r7, #12
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	60da      	str	r2, [r3, #12]
 8004176:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <HAL_TIM_MspPostInit+0x68>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d11e      	bne.n	80041c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	4b11      	ldr	r3, [pc, #68]	; (80041cc <HAL_TIM_MspPostInit+0x6c>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	4a10      	ldr	r2, [pc, #64]	; (80041cc <HAL_TIM_MspPostInit+0x6c>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	6313      	str	r3, [r2, #48]	; 0x30
 8004192:	4b0e      	ldr	r3, [pc, #56]	; (80041cc <HAL_TIM_MspPostInit+0x6c>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800419e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a4:	2302      	movs	r3, #2
 80041a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80041b0:	2301      	movs	r3, #1
 80041b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b4:	f107 030c 	add.w	r3, r7, #12
 80041b8:	4619      	mov	r1, r3
 80041ba:	4805      	ldr	r0, [pc, #20]	; (80041d0 <HAL_TIM_MspPostInit+0x70>)
 80041bc:	f000 ff3a 	bl	8005034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80041c0:	bf00      	nop
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40010000 	.word	0x40010000
 80041cc:	40023800 	.word	0x40023800
 80041d0:	40020000 	.word	0x40020000

080041d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	; 0x28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041dc:	f107 0314 	add.w	r3, r7, #20
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	609a      	str	r2, [r3, #8]
 80041e8:	60da      	str	r2, [r3, #12]
 80041ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a4b      	ldr	r2, [pc, #300]	; (8004320 <HAL_UART_MspInit+0x14c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	f040 8090 	bne.w	8004318 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	4b49      	ldr	r3, [pc, #292]	; (8004324 <HAL_UART_MspInit+0x150>)
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	4a48      	ldr	r2, [pc, #288]	; (8004324 <HAL_UART_MspInit+0x150>)
 8004202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004206:	6413      	str	r3, [r2, #64]	; 0x40
 8004208:	4b46      	ldr	r3, [pc, #280]	; (8004324 <HAL_UART_MspInit+0x150>)
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	4b42      	ldr	r3, [pc, #264]	; (8004324 <HAL_UART_MspInit+0x150>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	4a41      	ldr	r2, [pc, #260]	; (8004324 <HAL_UART_MspInit+0x150>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6313      	str	r3, [r2, #48]	; 0x30
 8004224:	4b3f      	ldr	r3, [pc, #252]	; (8004324 <HAL_UART_MspInit+0x150>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004230:	230c      	movs	r3, #12
 8004232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004234:	2302      	movs	r3, #2
 8004236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004238:	2300      	movs	r3, #0
 800423a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800423c:	2303      	movs	r3, #3
 800423e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004240:	2307      	movs	r3, #7
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004244:	f107 0314 	add.w	r3, r7, #20
 8004248:	4619      	mov	r1, r3
 800424a:	4837      	ldr	r0, [pc, #220]	; (8004328 <HAL_UART_MspInit+0x154>)
 800424c:	f000 fef2 	bl	8005034 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004250:	4b36      	ldr	r3, [pc, #216]	; (800432c <HAL_UART_MspInit+0x158>)
 8004252:	4a37      	ldr	r2, [pc, #220]	; (8004330 <HAL_UART_MspInit+0x15c>)
 8004254:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004256:	4b35      	ldr	r3, [pc, #212]	; (800432c <HAL_UART_MspInit+0x158>)
 8004258:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800425c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800425e:	4b33      	ldr	r3, [pc, #204]	; (800432c <HAL_UART_MspInit+0x158>)
 8004260:	2200      	movs	r2, #0
 8004262:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004264:	4b31      	ldr	r3, [pc, #196]	; (800432c <HAL_UART_MspInit+0x158>)
 8004266:	2200      	movs	r2, #0
 8004268:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800426a:	4b30      	ldr	r3, [pc, #192]	; (800432c <HAL_UART_MspInit+0x158>)
 800426c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004270:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004272:	4b2e      	ldr	r3, [pc, #184]	; (800432c <HAL_UART_MspInit+0x158>)
 8004274:	2200      	movs	r2, #0
 8004276:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004278:	4b2c      	ldr	r3, [pc, #176]	; (800432c <HAL_UART_MspInit+0x158>)
 800427a:	2200      	movs	r2, #0
 800427c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800427e:	4b2b      	ldr	r3, [pc, #172]	; (800432c <HAL_UART_MspInit+0x158>)
 8004280:	2200      	movs	r2, #0
 8004282:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004284:	4b29      	ldr	r3, [pc, #164]	; (800432c <HAL_UART_MspInit+0x158>)
 8004286:	2200      	movs	r2, #0
 8004288:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800428a:	4b28      	ldr	r3, [pc, #160]	; (800432c <HAL_UART_MspInit+0x158>)
 800428c:	2200      	movs	r2, #0
 800428e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004290:	4826      	ldr	r0, [pc, #152]	; (800432c <HAL_UART_MspInit+0x158>)
 8004292:	f000 fabf 	bl	8004814 <HAL_DMA_Init>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800429c:	f7ff fe26 	bl	8003eec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a22      	ldr	r2, [pc, #136]	; (800432c <HAL_UART_MspInit+0x158>)
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38
 80042a6:	4a21      	ldr	r2, [pc, #132]	; (800432c <HAL_UART_MspInit+0x158>)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80042ac:	4b21      	ldr	r3, [pc, #132]	; (8004334 <HAL_UART_MspInit+0x160>)
 80042ae:	4a22      	ldr	r2, [pc, #136]	; (8004338 <HAL_UART_MspInit+0x164>)
 80042b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80042b2:	4b20      	ldr	r3, [pc, #128]	; (8004334 <HAL_UART_MspInit+0x160>)
 80042b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042ba:	4b1e      	ldr	r3, [pc, #120]	; (8004334 <HAL_UART_MspInit+0x160>)
 80042bc:	2240      	movs	r2, #64	; 0x40
 80042be:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042c0:	4b1c      	ldr	r3, [pc, #112]	; (8004334 <HAL_UART_MspInit+0x160>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042c6:	4b1b      	ldr	r3, [pc, #108]	; (8004334 <HAL_UART_MspInit+0x160>)
 80042c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042ce:	4b19      	ldr	r3, [pc, #100]	; (8004334 <HAL_UART_MspInit+0x160>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042d4:	4b17      	ldr	r3, [pc, #92]	; (8004334 <HAL_UART_MspInit+0x160>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80042da:	4b16      	ldr	r3, [pc, #88]	; (8004334 <HAL_UART_MspInit+0x160>)
 80042dc:	2200      	movs	r2, #0
 80042de:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80042e0:	4b14      	ldr	r3, [pc, #80]	; (8004334 <HAL_UART_MspInit+0x160>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042e6:	4b13      	ldr	r3, [pc, #76]	; (8004334 <HAL_UART_MspInit+0x160>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80042ec:	4811      	ldr	r0, [pc, #68]	; (8004334 <HAL_UART_MspInit+0x160>)
 80042ee:	f000 fa91 	bl	8004814 <HAL_DMA_Init>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80042f8:	f7ff fdf8 	bl	8003eec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a0d      	ldr	r2, [pc, #52]	; (8004334 <HAL_UART_MspInit+0x160>)
 8004300:	635a      	str	r2, [r3, #52]	; 0x34
 8004302:	4a0c      	ldr	r2, [pc, #48]	; (8004334 <HAL_UART_MspInit+0x160>)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004308:	2200      	movs	r2, #0
 800430a:	2100      	movs	r1, #0
 800430c:	2026      	movs	r0, #38	; 0x26
 800430e:	f000 fa4a 	bl	80047a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004312:	2026      	movs	r0, #38	; 0x26
 8004314:	f000 fa63 	bl	80047de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004318:	bf00      	nop
 800431a:	3728      	adds	r7, #40	; 0x28
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40004400 	.word	0x40004400
 8004324:	40023800 	.word	0x40023800
 8004328:	40020000 	.word	0x40020000
 800432c:	20000614 	.word	0x20000614
 8004330:	40026088 	.word	0x40026088
 8004334:	20000674 	.word	0x20000674
 8004338:	400260a0 	.word	0x400260a0

0800433c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004340:	e7fe      	b.n	8004340 <NMI_Handler+0x4>

08004342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004342:	b480      	push	{r7}
 8004344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004346:	e7fe      	b.n	8004346 <HardFault_Handler+0x4>

08004348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800434c:	e7fe      	b.n	800434c <MemManage_Handler+0x4>

0800434e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800434e:	b480      	push	{r7}
 8004350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004352:	e7fe      	b.n	8004352 <BusFault_Handler+0x4>

08004354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004358:	e7fe      	b.n	8004358 <UsageFault_Handler+0x4>

0800435a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800435a:	b480      	push	{r7}
 800435c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800435e:	bf00      	nop
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800436c:	bf00      	nop
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004376:	b480      	push	{r7}
 8004378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800437a:	bf00      	nop
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004388:	f000 f8ee 	bl	8004568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800438c:	bf00      	nop
 800438e:	bd80      	pop	{r7, pc}

08004390 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004394:	4802      	ldr	r0, [pc, #8]	; (80043a0 <DMA1_Stream5_IRQHandler+0x10>)
 8004396:	f000 fbd5 	bl	8004b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000614 	.word	0x20000614

080043a4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80043a8:	4802      	ldr	r0, [pc, #8]	; (80043b4 <DMA1_Stream6_IRQHandler+0x10>)
 80043aa:	f000 fbcb 	bl	8004b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80043ae:	bf00      	nop
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20000674 	.word	0x20000674

080043b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Emer_Pin);
 80043bc:	2020      	movs	r0, #32
 80043be:	f001 f809 	bl	80053d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80043c2:	bf00      	nop
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80043cc:	4803      	ldr	r0, [pc, #12]	; (80043dc <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80043ce:	f003 ff39 	bl	8008244 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80043d2:	4803      	ldr	r0, [pc, #12]	; (80043e0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80043d4:	f003 ff36 	bl	8008244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80043d8:	bf00      	nop
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	200004b0 	.word	0x200004b0
 80043e0:	20000588 	.word	0x20000588

080043e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80043e8:	4802      	ldr	r0, [pc, #8]	; (80043f4 <I2C1_EV_IRQHandler+0x10>)
 80043ea:	f001 faa3 	bl	8005934 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80043ee:	bf00      	nop
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	2000045c 	.word	0x2000045c

080043f8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80043fc:	4802      	ldr	r0, [pc, #8]	; (8004408 <I2C1_ER_IRQHandler+0x10>)
 80043fe:	f001 fc0a 	bl	8005c16 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004402:	bf00      	nop
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	2000045c 	.word	0x2000045c

0800440c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004410:	4802      	ldr	r0, [pc, #8]	; (800441c <USART2_IRQHandler+0x10>)
 8004412:	f004 fea3 	bl	800915c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004416:	bf00      	nop
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	200005d0 	.word	0x200005d0

08004420 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Proxi_Pin);
 8004424:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004428:	f000 ffd4 	bl	80053d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800442c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004430:	f000 ffd0 	bl	80053d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004434:	bf00      	nop
 8004436:	bd80      	pop	{r7, pc}

08004438 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800443c:	4802      	ldr	r0, [pc, #8]	; (8004448 <TIM5_IRQHandler+0x10>)
 800443e:	f003 ff01 	bl	8008244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004442:	bf00      	nop
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000540 	.word	0x20000540

0800444c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <SystemInit+0x20>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	4a05      	ldr	r2, [pc, #20]	; (800446c <SystemInit+0x20>)
 8004458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800445c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004460:	bf00      	nop
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	e000ed00 	.word	0xe000ed00

08004470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004474:	480d      	ldr	r0, [pc, #52]	; (80044ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004476:	490e      	ldr	r1, [pc, #56]	; (80044b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004478:	4a0e      	ldr	r2, [pc, #56]	; (80044b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800447a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800447c:	e002      	b.n	8004484 <LoopCopyDataInit>

0800447e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800447e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004482:	3304      	adds	r3, #4

08004484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004488:	d3f9      	bcc.n	800447e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800448a:	4a0b      	ldr	r2, [pc, #44]	; (80044b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800448c:	4c0b      	ldr	r4, [pc, #44]	; (80044bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800448e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004490:	e001      	b.n	8004496 <LoopFillZerobss>

08004492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004494:	3204      	adds	r2, #4

08004496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004498:	d3fb      	bcc.n	8004492 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800449a:	f7ff ffd7 	bl	800444c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800449e:	f006 fa1f 	bl	800a8e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044a2:	f7fd fd63 	bl	8001f6c <main>
  bx  lr    
 80044a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80044a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80044ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044b0:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 80044b4:	0800a99c 	.word	0x0800a99c
  ldr r2, =_sbss
 80044b8:	20000440 	.word	0x20000440
  ldr r4, =_ebss
 80044bc:	20000b14 	.word	0x20000b14

080044c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044c0:	e7fe      	b.n	80044c0 <ADC_IRQHandler>
	...

080044c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044c8:	4b0e      	ldr	r3, [pc, #56]	; (8004504 <HAL_Init+0x40>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a0d      	ldr	r2, [pc, #52]	; (8004504 <HAL_Init+0x40>)
 80044ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <HAL_Init+0x40>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a0a      	ldr	r2, [pc, #40]	; (8004504 <HAL_Init+0x40>)
 80044da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044e0:	4b08      	ldr	r3, [pc, #32]	; (8004504 <HAL_Init+0x40>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a07      	ldr	r2, [pc, #28]	; (8004504 <HAL_Init+0x40>)
 80044e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044ec:	2003      	movs	r0, #3
 80044ee:	f000 f94f 	bl	8004790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044f2:	2000      	movs	r0, #0
 80044f4:	f000 f808 	bl	8004508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044f8:	f7ff fcfe 	bl	8003ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40023c00 	.word	0x40023c00

08004508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004510:	4b12      	ldr	r3, [pc, #72]	; (800455c <HAL_InitTick+0x54>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	4b12      	ldr	r3, [pc, #72]	; (8004560 <HAL_InitTick+0x58>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	4619      	mov	r1, r3
 800451a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800451e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004522:	fbb2 f3f3 	udiv	r3, r2, r3
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f967 	bl	80047fa <HAL_SYSTICK_Config>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e00e      	b.n	8004554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b0f      	cmp	r3, #15
 800453a:	d80a      	bhi.n	8004552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800453c:	2200      	movs	r2, #0
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	f04f 30ff 	mov.w	r0, #4294967295
 8004544:	f000 f92f 	bl	80047a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004548:	4a06      	ldr	r2, [pc, #24]	; (8004564 <HAL_InitTick+0x5c>)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	e000      	b.n	8004554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	20000430 	.word	0x20000430
 8004560:	20000438 	.word	0x20000438
 8004564:	20000434 	.word	0x20000434

08004568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <HAL_IncTick+0x20>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	4b06      	ldr	r3, [pc, #24]	; (800458c <HAL_IncTick+0x24>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4413      	add	r3, r2
 8004578:	4a04      	ldr	r2, [pc, #16]	; (800458c <HAL_IncTick+0x24>)
 800457a:	6013      	str	r3, [r2, #0]
}
 800457c:	bf00      	nop
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	20000438 	.word	0x20000438
 800458c:	20000b10 	.word	0x20000b10

08004590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  return uwTick;
 8004594:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <HAL_GetTick+0x14>)
 8004596:	681b      	ldr	r3, [r3, #0]
}
 8004598:	4618      	mov	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000b10 	.word	0x20000b10

080045a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045b0:	f7ff ffee 	bl	8004590 <HAL_GetTick>
 80045b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d005      	beq.n	80045ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045c2:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <HAL_Delay+0x44>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045ce:	bf00      	nop
 80045d0:	f7ff ffde 	bl	8004590 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d8f7      	bhi.n	80045d0 <HAL_Delay+0x28>
  {
  }
}
 80045e0:	bf00      	nop
 80045e2:	bf00      	nop
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20000438 	.word	0x20000438

080045f0 <__NVIC_SetPriorityGrouping>:
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <__NVIC_SetPriorityGrouping+0x44>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800460c:	4013      	ands	r3, r2
 800460e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800461c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004622:	4a04      	ldr	r2, [pc, #16]	; (8004634 <__NVIC_SetPriorityGrouping+0x44>)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	60d3      	str	r3, [r2, #12]
}
 8004628:	bf00      	nop
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	e000ed00 	.word	0xe000ed00

08004638 <__NVIC_GetPriorityGrouping>:
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <__NVIC_GetPriorityGrouping+0x18>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	0a1b      	lsrs	r3, r3, #8
 8004642:	f003 0307 	and.w	r3, r3, #7
}
 8004646:	4618      	mov	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	e000ed00 	.word	0xe000ed00

08004654 <__NVIC_EnableIRQ>:
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800465e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004662:	2b00      	cmp	r3, #0
 8004664:	db0b      	blt.n	800467e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	f003 021f 	and.w	r2, r3, #31
 800466c:	4907      	ldr	r1, [pc, #28]	; (800468c <__NVIC_EnableIRQ+0x38>)
 800466e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	2001      	movs	r0, #1
 8004676:	fa00 f202 	lsl.w	r2, r0, r2
 800467a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	e000e100 	.word	0xe000e100

08004690 <__NVIC_SetPriority>:
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	6039      	str	r1, [r7, #0]
 800469a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800469c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	db0a      	blt.n	80046ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	490c      	ldr	r1, [pc, #48]	; (80046dc <__NVIC_SetPriority+0x4c>)
 80046aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ae:	0112      	lsls	r2, r2, #4
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	440b      	add	r3, r1
 80046b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046b8:	e00a      	b.n	80046d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	4908      	ldr	r1, [pc, #32]	; (80046e0 <__NVIC_SetPriority+0x50>)
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	3b04      	subs	r3, #4
 80046c8:	0112      	lsls	r2, r2, #4
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	440b      	add	r3, r1
 80046ce:	761a      	strb	r2, [r3, #24]
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	e000e100 	.word	0xe000e100
 80046e0:	e000ed00 	.word	0xe000ed00

080046e4 <NVIC_EncodePriority>:
{
 80046e4:	b480      	push	{r7}
 80046e6:	b089      	sub	sp, #36	; 0x24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f1c3 0307 	rsb	r3, r3, #7
 80046fe:	2b04      	cmp	r3, #4
 8004700:	bf28      	it	cs
 8004702:	2304      	movcs	r3, #4
 8004704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	3304      	adds	r3, #4
 800470a:	2b06      	cmp	r3, #6
 800470c:	d902      	bls.n	8004714 <NVIC_EncodePriority+0x30>
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	3b03      	subs	r3, #3
 8004712:	e000      	b.n	8004716 <NVIC_EncodePriority+0x32>
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004718:	f04f 32ff 	mov.w	r2, #4294967295
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43da      	mvns	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	401a      	ands	r2, r3
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800472c:	f04f 31ff 	mov.w	r1, #4294967295
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	fa01 f303 	lsl.w	r3, r1, r3
 8004736:	43d9      	mvns	r1, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800473c:	4313      	orrs	r3, r2
}
 800473e:	4618      	mov	r0, r3
 8004740:	3724      	adds	r7, #36	; 0x24
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3b01      	subs	r3, #1
 8004758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800475c:	d301      	bcc.n	8004762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800475e:	2301      	movs	r3, #1
 8004760:	e00f      	b.n	8004782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004762:	4a0a      	ldr	r2, [pc, #40]	; (800478c <SysTick_Config+0x40>)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3b01      	subs	r3, #1
 8004768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800476a:	210f      	movs	r1, #15
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	f7ff ff8e 	bl	8004690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004774:	4b05      	ldr	r3, [pc, #20]	; (800478c <SysTick_Config+0x40>)
 8004776:	2200      	movs	r2, #0
 8004778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800477a:	4b04      	ldr	r3, [pc, #16]	; (800478c <SysTick_Config+0x40>)
 800477c:	2207      	movs	r2, #7
 800477e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	e000e010 	.word	0xe000e010

08004790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ff29 	bl	80045f0 <__NVIC_SetPriorityGrouping>
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b086      	sub	sp, #24
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	4603      	mov	r3, r0
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047b8:	f7ff ff3e 	bl	8004638 <__NVIC_GetPriorityGrouping>
 80047bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	6978      	ldr	r0, [r7, #20]
 80047c4:	f7ff ff8e 	bl	80046e4 <NVIC_EncodePriority>
 80047c8:	4602      	mov	r2, r0
 80047ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ce:	4611      	mov	r1, r2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff ff5d 	bl	8004690 <__NVIC_SetPriority>
}
 80047d6:	bf00      	nop
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b082      	sub	sp, #8
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	4603      	mov	r3, r0
 80047e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff ff31 	bl	8004654 <__NVIC_EnableIRQ>
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff ffa2 	bl	800474c <SysTick_Config>
 8004808:	4603      	mov	r3, r0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004820:	f7ff feb6 	bl	8004590 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e099      	b.n	8004964 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0201 	bic.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004850:	e00f      	b.n	8004872 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004852:	f7ff fe9d 	bl	8004590 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b05      	cmp	r3, #5
 800485e:	d908      	bls.n	8004872 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2203      	movs	r2, #3
 800486a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e078      	b.n	8004964 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1e8      	bne.n	8004852 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	4b38      	ldr	r3, [pc, #224]	; (800496c <HAL_DMA_Init+0x158>)
 800488c:	4013      	ands	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800489e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d107      	bne.n	80048dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	4313      	orrs	r3, r2
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f023 0307 	bic.w	r3, r3, #7
 80048f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	2b04      	cmp	r3, #4
 8004904:	d117      	bne.n	8004936 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00e      	beq.n	8004936 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fb0f 	bl	8004f3c <DMA_CheckFifoParam>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2240      	movs	r2, #64	; 0x40
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004932:	2301      	movs	r3, #1
 8004934:	e016      	b.n	8004964 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fac6 	bl	8004ed0 <DMA_CalcBaseAndBitshift>
 8004944:	4603      	mov	r3, r0
 8004946:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494c:	223f      	movs	r2, #63	; 0x3f
 800494e:	409a      	lsls	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	f010803f 	.word	0xf010803f

08004970 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004986:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_DMA_Start_IT+0x26>
 8004992:	2302      	movs	r3, #2
 8004994:	e040      	b.n	8004a18 <HAL_DMA_Start_IT+0xa8>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d12f      	bne.n	8004a0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2202      	movs	r2, #2
 80049ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	68b9      	ldr	r1, [r7, #8]
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 fa58 	bl	8004e74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c8:	223f      	movs	r2, #63	; 0x3f
 80049ca:	409a      	lsls	r2, r3
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0216 	orr.w	r2, r2, #22
 80049de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d007      	beq.n	80049f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0208 	orr.w	r2, r2, #8
 80049f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	e005      	b.n	8004a16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a12:	2302      	movs	r3, #2
 8004a14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a2e:	f7ff fdaf 	bl	8004590 <HAL_GetTick>
 8004a32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d008      	beq.n	8004a52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2280      	movs	r2, #128	; 0x80
 8004a44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e052      	b.n	8004af8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0216 	bic.w	r2, r2, #22
 8004a60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695a      	ldr	r2, [r3, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d103      	bne.n	8004a82 <HAL_DMA_Abort+0x62>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d007      	beq.n	8004a92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0208 	bic.w	r2, r2, #8
 8004a90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0201 	bic.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004aa2:	e013      	b.n	8004acc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004aa4:	f7ff fd74 	bl	8004590 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b05      	cmp	r3, #5
 8004ab0:	d90c      	bls.n	8004acc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2203      	movs	r2, #3
 8004abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e015      	b.n	8004af8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e4      	bne.n	8004aa4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ade:	223f      	movs	r2, #63	; 0x3f
 8004ae0:	409a      	lsls	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d004      	beq.n	8004b1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2280      	movs	r2, #128	; 0x80
 8004b18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e00c      	b.n	8004b38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2205      	movs	r2, #5
 8004b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0201 	bic.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b50:	4b8e      	ldr	r3, [pc, #568]	; (8004d8c <HAL_DMA_IRQHandler+0x248>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a8e      	ldr	r2, [pc, #568]	; (8004d90 <HAL_DMA_IRQHandler+0x24c>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	0a9b      	lsrs	r3, r3, #10
 8004b5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6e:	2208      	movs	r2, #8
 8004b70:	409a      	lsls	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01a      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d013      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0204 	bic.w	r2, r2, #4
 8004b96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9c:	2208      	movs	r2, #8
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba8:	f043 0201 	orr.w	r2, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	409a      	lsls	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d012      	beq.n	8004be6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	409a      	lsls	r2, r3
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	f043 0202 	orr.w	r2, r3, #2
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bea:	2204      	movs	r2, #4
 8004bec:	409a      	lsls	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d012      	beq.n	8004c1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00b      	beq.n	8004c1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c08:	2204      	movs	r2, #4
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c14:	f043 0204 	orr.w	r2, r3, #4
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c20:	2210      	movs	r2, #16
 8004c22:	409a      	lsls	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d043      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d03c      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3e:	2210      	movs	r2, #16
 8004c40:	409a      	lsls	r2, r3
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d018      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d024      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	4798      	blx	r3
 8004c72:	e01f      	b.n	8004cb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01b      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
 8004c84:	e016      	b.n	8004cb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d107      	bne.n	8004ca4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0208 	bic.w	r2, r2, #8
 8004ca2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb8:	2220      	movs	r2, #32
 8004cba:	409a      	lsls	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 808f 	beq.w	8004de4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8087 	beq.w	8004de4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cda:	2220      	movs	r2, #32
 8004cdc:	409a      	lsls	r2, r3
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b05      	cmp	r3, #5
 8004cec:	d136      	bne.n	8004d5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0216 	bic.w	r2, r2, #22
 8004cfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d103      	bne.n	8004d1e <HAL_DMA_IRQHandler+0x1da>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d007      	beq.n	8004d2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0208 	bic.w	r2, r2, #8
 8004d2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d32:	223f      	movs	r2, #63	; 0x3f
 8004d34:	409a      	lsls	r2, r3
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d07e      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	4798      	blx	r3
        }
        return;
 8004d5a:	e079      	b.n	8004e50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d01d      	beq.n	8004da6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10d      	bne.n	8004d94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d031      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	4798      	blx	r3
 8004d88:	e02c      	b.n	8004de4 <HAL_DMA_IRQHandler+0x2a0>
 8004d8a:	bf00      	nop
 8004d8c:	20000430 	.word	0x20000430
 8004d90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d023      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	4798      	blx	r3
 8004da4:	e01e      	b.n	8004de4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10f      	bne.n	8004dd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0210 	bic.w	r2, r2, #16
 8004dc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d032      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d022      	beq.n	8004e3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2205      	movs	r2, #5
 8004dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0201 	bic.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	3301      	adds	r3, #1
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d307      	bcc.n	8004e2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f2      	bne.n	8004e10 <HAL_DMA_IRQHandler+0x2cc>
 8004e2a:	e000      	b.n	8004e2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d005      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	4798      	blx	r3
 8004e4e:	e000      	b.n	8004e52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e50:	bf00      	nop
    }
  }
}
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e66:	b2db      	uxtb	r3, r3
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d108      	bne.n	8004eb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004eb2:	e007      	b.n	8004ec4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	60da      	str	r2, [r3, #12]
}
 8004ec4:	bf00      	nop
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	3b10      	subs	r3, #16
 8004ee0:	4a14      	ldr	r2, [pc, #80]	; (8004f34 <DMA_CalcBaseAndBitshift+0x64>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	091b      	lsrs	r3, r3, #4
 8004ee8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004eea:	4a13      	ldr	r2, [pc, #76]	; (8004f38 <DMA_CalcBaseAndBitshift+0x68>)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d909      	bls.n	8004f12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f06:	f023 0303 	bic.w	r3, r3, #3
 8004f0a:	1d1a      	adds	r2, r3, #4
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	659a      	str	r2, [r3, #88]	; 0x58
 8004f10:	e007      	b.n	8004f22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f1a:	f023 0303 	bic.w	r3, r3, #3
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	aaaaaaab 	.word	0xaaaaaaab
 8004f38:	0800a984 	.word	0x0800a984

08004f3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d11f      	bne.n	8004f96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d856      	bhi.n	800500a <DMA_CheckFifoParam+0xce>
 8004f5c:	a201      	add	r2, pc, #4	; (adr r2, 8004f64 <DMA_CheckFifoParam+0x28>)
 8004f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f62:	bf00      	nop
 8004f64:	08004f75 	.word	0x08004f75
 8004f68:	08004f87 	.word	0x08004f87
 8004f6c:	08004f75 	.word	0x08004f75
 8004f70:	0800500b 	.word	0x0800500b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d046      	beq.n	800500e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f84:	e043      	b.n	800500e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f8e:	d140      	bne.n	8005012 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f94:	e03d      	b.n	8005012 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f9e:	d121      	bne.n	8004fe4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d837      	bhi.n	8005016 <DMA_CheckFifoParam+0xda>
 8004fa6:	a201      	add	r2, pc, #4	; (adr r2, 8004fac <DMA_CheckFifoParam+0x70>)
 8004fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fac:	08004fbd 	.word	0x08004fbd
 8004fb0:	08004fc3 	.word	0x08004fc3
 8004fb4:	08004fbd 	.word	0x08004fbd
 8004fb8:	08004fd5 	.word	0x08004fd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004fc0:	e030      	b.n	8005024 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d025      	beq.n	800501a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fd2:	e022      	b.n	800501a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fdc:	d11f      	bne.n	800501e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004fe2:	e01c      	b.n	800501e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d903      	bls.n	8004ff2 <DMA_CheckFifoParam+0xb6>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d003      	beq.n	8004ff8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ff0:	e018      	b.n	8005024 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff6:	e015      	b.n	8005024 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00e      	beq.n	8005022 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	73fb      	strb	r3, [r7, #15]
      break;
 8005008:	e00b      	b.n	8005022 <DMA_CheckFifoParam+0xe6>
      break;
 800500a:	bf00      	nop
 800500c:	e00a      	b.n	8005024 <DMA_CheckFifoParam+0xe8>
      break;
 800500e:	bf00      	nop
 8005010:	e008      	b.n	8005024 <DMA_CheckFifoParam+0xe8>
      break;
 8005012:	bf00      	nop
 8005014:	e006      	b.n	8005024 <DMA_CheckFifoParam+0xe8>
      break;
 8005016:	bf00      	nop
 8005018:	e004      	b.n	8005024 <DMA_CheckFifoParam+0xe8>
      break;
 800501a:	bf00      	nop
 800501c:	e002      	b.n	8005024 <DMA_CheckFifoParam+0xe8>
      break;   
 800501e:	bf00      	nop
 8005020:	e000      	b.n	8005024 <DMA_CheckFifoParam+0xe8>
      break;
 8005022:	bf00      	nop
    }
  } 
  
  return status; 
 8005024:	7bfb      	ldrb	r3, [r7, #15]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop

08005034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005034:	b480      	push	{r7}
 8005036:	b089      	sub	sp, #36	; 0x24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005042:	2300      	movs	r3, #0
 8005044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800504a:	2300      	movs	r3, #0
 800504c:	61fb      	str	r3, [r7, #28]
 800504e:	e159      	b.n	8005304 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005050:	2201      	movs	r2, #1
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4013      	ands	r3, r2
 8005062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	429a      	cmp	r2, r3
 800506a:	f040 8148 	bne.w	80052fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	2b01      	cmp	r3, #1
 8005078:	d005      	beq.n	8005086 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005082:	2b02      	cmp	r3, #2
 8005084:	d130      	bne.n	80050e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	2203      	movs	r2, #3
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	43db      	mvns	r3, r3
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	4013      	ands	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050bc:	2201      	movs	r2, #1
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	43db      	mvns	r3, r3
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	4013      	ands	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	f003 0201 	and.w	r2, r3, #1
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4313      	orrs	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d017      	beq.n	8005124 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	2203      	movs	r2, #3
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	43db      	mvns	r3, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4013      	ands	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4313      	orrs	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d123      	bne.n	8005178 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	08da      	lsrs	r2, r3, #3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3208      	adds	r2, #8
 8005138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800513c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	220f      	movs	r2, #15
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	43db      	mvns	r3, r3
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	4013      	ands	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4313      	orrs	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	08da      	lsrs	r2, r3, #3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3208      	adds	r2, #8
 8005172:	69b9      	ldr	r1, [r7, #24]
 8005174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	2203      	movs	r2, #3
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	43db      	mvns	r3, r3
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4013      	ands	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f003 0203 	and.w	r2, r3, #3
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 80a2 	beq.w	80052fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	4b57      	ldr	r3, [pc, #348]	; (800531c <HAL_GPIO_Init+0x2e8>)
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	4a56      	ldr	r2, [pc, #344]	; (800531c <HAL_GPIO_Init+0x2e8>)
 80051c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051c8:	6453      	str	r3, [r2, #68]	; 0x44
 80051ca:	4b54      	ldr	r3, [pc, #336]	; (800531c <HAL_GPIO_Init+0x2e8>)
 80051cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051d6:	4a52      	ldr	r2, [pc, #328]	; (8005320 <HAL_GPIO_Init+0x2ec>)
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	089b      	lsrs	r3, r3, #2
 80051dc:	3302      	adds	r3, #2
 80051de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	220f      	movs	r2, #15
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	43db      	mvns	r3, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4013      	ands	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a49      	ldr	r2, [pc, #292]	; (8005324 <HAL_GPIO_Init+0x2f0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d019      	beq.n	8005236 <HAL_GPIO_Init+0x202>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a48      	ldr	r2, [pc, #288]	; (8005328 <HAL_GPIO_Init+0x2f4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <HAL_GPIO_Init+0x1fe>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a47      	ldr	r2, [pc, #284]	; (800532c <HAL_GPIO_Init+0x2f8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00d      	beq.n	800522e <HAL_GPIO_Init+0x1fa>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a46      	ldr	r2, [pc, #280]	; (8005330 <HAL_GPIO_Init+0x2fc>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d007      	beq.n	800522a <HAL_GPIO_Init+0x1f6>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a45      	ldr	r2, [pc, #276]	; (8005334 <HAL_GPIO_Init+0x300>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d101      	bne.n	8005226 <HAL_GPIO_Init+0x1f2>
 8005222:	2304      	movs	r3, #4
 8005224:	e008      	b.n	8005238 <HAL_GPIO_Init+0x204>
 8005226:	2307      	movs	r3, #7
 8005228:	e006      	b.n	8005238 <HAL_GPIO_Init+0x204>
 800522a:	2303      	movs	r3, #3
 800522c:	e004      	b.n	8005238 <HAL_GPIO_Init+0x204>
 800522e:	2302      	movs	r3, #2
 8005230:	e002      	b.n	8005238 <HAL_GPIO_Init+0x204>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <HAL_GPIO_Init+0x204>
 8005236:	2300      	movs	r3, #0
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	f002 0203 	and.w	r2, r2, #3
 800523e:	0092      	lsls	r2, r2, #2
 8005240:	4093      	lsls	r3, r2
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4313      	orrs	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005248:	4935      	ldr	r1, [pc, #212]	; (8005320 <HAL_GPIO_Init+0x2ec>)
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	089b      	lsrs	r3, r3, #2
 800524e:	3302      	adds	r3, #2
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005256:	4b38      	ldr	r3, [pc, #224]	; (8005338 <HAL_GPIO_Init+0x304>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	43db      	mvns	r3, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4013      	ands	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800527a:	4a2f      	ldr	r2, [pc, #188]	; (8005338 <HAL_GPIO_Init+0x304>)
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005280:	4b2d      	ldr	r3, [pc, #180]	; (8005338 <HAL_GPIO_Init+0x304>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	43db      	mvns	r3, r3
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	4013      	ands	r3, r2
 800528e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052a4:	4a24      	ldr	r2, [pc, #144]	; (8005338 <HAL_GPIO_Init+0x304>)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052aa:	4b23      	ldr	r3, [pc, #140]	; (8005338 <HAL_GPIO_Init+0x304>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	43db      	mvns	r3, r3
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	4013      	ands	r3, r2
 80052b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052ce:	4a1a      	ldr	r2, [pc, #104]	; (8005338 <HAL_GPIO_Init+0x304>)
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052d4:	4b18      	ldr	r3, [pc, #96]	; (8005338 <HAL_GPIO_Init+0x304>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	43db      	mvns	r3, r3
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	4013      	ands	r3, r2
 80052e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052f8:	4a0f      	ldr	r2, [pc, #60]	; (8005338 <HAL_GPIO_Init+0x304>)
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	3301      	adds	r3, #1
 8005302:	61fb      	str	r3, [r7, #28]
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	2b0f      	cmp	r3, #15
 8005308:	f67f aea2 	bls.w	8005050 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	3724      	adds	r7, #36	; 0x24
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40023800 	.word	0x40023800
 8005320:	40013800 	.word	0x40013800
 8005324:	40020000 	.word	0x40020000
 8005328:	40020400 	.word	0x40020400
 800532c:	40020800 	.word	0x40020800
 8005330:	40020c00 	.word	0x40020c00
 8005334:	40021000 	.word	0x40021000
 8005338:	40013c00 	.word	0x40013c00

0800533c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	887b      	ldrh	r3, [r7, #2]
 800534e:	4013      	ands	r3, r2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005354:	2301      	movs	r3, #1
 8005356:	73fb      	strb	r3, [r7, #15]
 8005358:	e001      	b.n	800535e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800535a:	2300      	movs	r3, #0
 800535c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800535e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	807b      	strh	r3, [r7, #2]
 8005378:	4613      	mov	r3, r2
 800537a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800537c:	787b      	ldrb	r3, [r7, #1]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005382:	887a      	ldrh	r2, [r7, #2]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005388:	e003      	b.n	8005392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800538a:	887b      	ldrh	r3, [r7, #2]
 800538c:	041a      	lsls	r2, r3, #16
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	619a      	str	r2, [r3, #24]
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800539e:	b480      	push	{r7}
 80053a0:	b085      	sub	sp, #20
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	460b      	mov	r3, r1
 80053a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053b0:	887a      	ldrh	r2, [r7, #2]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4013      	ands	r3, r2
 80053b6:	041a      	lsls	r2, r3, #16
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	43d9      	mvns	r1, r3
 80053bc:	887b      	ldrh	r3, [r7, #2]
 80053be:	400b      	ands	r3, r1
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	619a      	str	r2, [r3, #24]
}
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80053de:	4b08      	ldr	r3, [pc, #32]	; (8005400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053e0:	695a      	ldr	r2, [r3, #20]
 80053e2:	88fb      	ldrh	r3, [r7, #6]
 80053e4:	4013      	ands	r3, r2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d006      	beq.n	80053f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053ea:	4a05      	ldr	r2, [pc, #20]	; (8005400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053ec:	88fb      	ldrh	r3, [r7, #6]
 80053ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fe fb64 	bl	8003ac0 <HAL_GPIO_EXTI_Callback>
  }
}
 80053f8:	bf00      	nop
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40013c00 	.word	0x40013c00

08005404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e12b      	b.n	800566e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fe fd8c 	bl	8003f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2224      	movs	r2, #36	; 0x24
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005456:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005466:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005468:	f002 fbb0 	bl	8007bcc <HAL_RCC_GetPCLK1Freq>
 800546c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	4a81      	ldr	r2, [pc, #516]	; (8005678 <HAL_I2C_Init+0x274>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d807      	bhi.n	8005488 <HAL_I2C_Init+0x84>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4a80      	ldr	r2, [pc, #512]	; (800567c <HAL_I2C_Init+0x278>)
 800547c:	4293      	cmp	r3, r2
 800547e:	bf94      	ite	ls
 8005480:	2301      	movls	r3, #1
 8005482:	2300      	movhi	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	e006      	b.n	8005496 <HAL_I2C_Init+0x92>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4a7d      	ldr	r2, [pc, #500]	; (8005680 <HAL_I2C_Init+0x27c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	bf94      	ite	ls
 8005490:	2301      	movls	r3, #1
 8005492:	2300      	movhi	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e0e7      	b.n	800566e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4a78      	ldr	r2, [pc, #480]	; (8005684 <HAL_I2C_Init+0x280>)
 80054a2:	fba2 2303 	umull	r2, r3, r2, r3
 80054a6:	0c9b      	lsrs	r3, r3, #18
 80054a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	4a6a      	ldr	r2, [pc, #424]	; (8005678 <HAL_I2C_Init+0x274>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d802      	bhi.n	80054d8 <HAL_I2C_Init+0xd4>
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	3301      	adds	r3, #1
 80054d6:	e009      	b.n	80054ec <HAL_I2C_Init+0xe8>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054de:	fb02 f303 	mul.w	r3, r2, r3
 80054e2:	4a69      	ldr	r2, [pc, #420]	; (8005688 <HAL_I2C_Init+0x284>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	099b      	lsrs	r3, r3, #6
 80054ea:	3301      	adds	r3, #1
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6812      	ldr	r2, [r2, #0]
 80054f0:	430b      	orrs	r3, r1
 80054f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	495c      	ldr	r1, [pc, #368]	; (8005678 <HAL_I2C_Init+0x274>)
 8005508:	428b      	cmp	r3, r1
 800550a:	d819      	bhi.n	8005540 <HAL_I2C_Init+0x13c>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	1e59      	subs	r1, r3, #1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	fbb1 f3f3 	udiv	r3, r1, r3
 800551a:	1c59      	adds	r1, r3, #1
 800551c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005520:	400b      	ands	r3, r1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <HAL_I2C_Init+0x138>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1e59      	subs	r1, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	fbb1 f3f3 	udiv	r3, r1, r3
 8005534:	3301      	adds	r3, #1
 8005536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553a:	e051      	b.n	80055e0 <HAL_I2C_Init+0x1dc>
 800553c:	2304      	movs	r3, #4
 800553e:	e04f      	b.n	80055e0 <HAL_I2C_Init+0x1dc>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d111      	bne.n	800556c <HAL_I2C_Init+0x168>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	1e58      	subs	r0, r3, #1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6859      	ldr	r1, [r3, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	440b      	add	r3, r1
 8005556:	fbb0 f3f3 	udiv	r3, r0, r3
 800555a:	3301      	adds	r3, #1
 800555c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005560:	2b00      	cmp	r3, #0
 8005562:	bf0c      	ite	eq
 8005564:	2301      	moveq	r3, #1
 8005566:	2300      	movne	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	e012      	b.n	8005592 <HAL_I2C_Init+0x18e>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	1e58      	subs	r0, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6859      	ldr	r1, [r3, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	0099      	lsls	r1, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005582:	3301      	adds	r3, #1
 8005584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005588:	2b00      	cmp	r3, #0
 800558a:	bf0c      	ite	eq
 800558c:	2301      	moveq	r3, #1
 800558e:	2300      	movne	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <HAL_I2C_Init+0x196>
 8005596:	2301      	movs	r3, #1
 8005598:	e022      	b.n	80055e0 <HAL_I2C_Init+0x1dc>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10e      	bne.n	80055c0 <HAL_I2C_Init+0x1bc>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	1e58      	subs	r0, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6859      	ldr	r1, [r3, #4]
 80055aa:	460b      	mov	r3, r1
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	440b      	add	r3, r1
 80055b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80055b4:	3301      	adds	r3, #1
 80055b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055be:	e00f      	b.n	80055e0 <HAL_I2C_Init+0x1dc>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	1e58      	subs	r0, r3, #1
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6859      	ldr	r1, [r3, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	0099      	lsls	r1, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80055d6:	3301      	adds	r3, #1
 80055d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	6809      	ldr	r1, [r1, #0]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69da      	ldr	r2, [r3, #28]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800560e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6911      	ldr	r1, [r2, #16]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	68d2      	ldr	r2, [r2, #12]
 800561a:	4311      	orrs	r1, r2
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	430b      	orrs	r3, r1
 8005622:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695a      	ldr	r2, [r3, #20]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	000186a0 	.word	0x000186a0
 800567c:	001e847f 	.word	0x001e847f
 8005680:	003d08ff 	.word	0x003d08ff
 8005684:	431bde83 	.word	0x431bde83
 8005688:	10624dd3 	.word	0x10624dd3

0800568c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	607a      	str	r2, [r7, #4]
 8005696:	461a      	mov	r2, r3
 8005698:	460b      	mov	r3, r1
 800569a:	817b      	strh	r3, [r7, #10]
 800569c:	4613      	mov	r3, r2
 800569e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	f040 8085 	bne.w	80057bc <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80056b2:	4b46      	ldr	r3, [pc, #280]	; (80057cc <HAL_I2C_Master_Transmit_IT+0x140>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	08db      	lsrs	r3, r3, #3
 80056b8:	4a45      	ldr	r2, [pc, #276]	; (80057d0 <HAL_I2C_Master_Transmit_IT+0x144>)
 80056ba:	fba2 2303 	umull	r2, r3, r2, r3
 80056be:	0a1a      	lsrs	r2, r3, #8
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	009a      	lsls	r2, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d116      	bne.n	8005706 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f043 0220 	orr.w	r2, r3, #32
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e05b      	b.n	80057be <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b02      	cmp	r3, #2
 8005712:	d0db      	beq.n	80056cc <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_I2C_Master_Transmit_IT+0x96>
 800571e:	2302      	movs	r3, #2
 8005720:	e04d      	b.n	80057be <HAL_I2C_Master_Transmit_IT+0x132>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d007      	beq.n	8005748 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005756:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2221      	movs	r2, #33	; 0x21
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2210      	movs	r2, #16
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	893a      	ldrh	r2, [r7, #8]
 8005778:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4a13      	ldr	r2, [pc, #76]	; (80057d4 <HAL_I2C_Master_Transmit_IT+0x148>)
 8005788:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800578a:	897a      	ldrh	r2, [r7, #10]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80057a6:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	e000      	b.n	80057be <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80057bc:	2302      	movs	r3, #2
  }
}
 80057be:	4618      	mov	r0, r3
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	20000430 	.word	0x20000430
 80057d0:	14f8b589 	.word	0x14f8b589
 80057d4:	ffff0000 	.word	0xffff0000

080057d8 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	461a      	mov	r2, r3
 80057e4:	460b      	mov	r3, r1
 80057e6:	817b      	strh	r3, [r7, #10]
 80057e8:	4613      	mov	r3, r2
 80057ea:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	f040 808d 	bne.w	8005918 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80057fe:	4b4a      	ldr	r3, [pc, #296]	; (8005928 <HAL_I2C_Master_Receive_IT+0x150>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	08db      	lsrs	r3, r3, #3
 8005804:	4a49      	ldr	r2, [pc, #292]	; (800592c <HAL_I2C_Master_Receive_IT+0x154>)
 8005806:	fba2 2303 	umull	r2, r3, r2, r3
 800580a:	0a1a      	lsrs	r2, r3, #8
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	009a      	lsls	r2, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	3b01      	subs	r3, #1
 800581c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d116      	bne.n	8005852 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	f043 0220 	orr.w	r2, r3, #32
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e063      	b.n	800591a <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b02      	cmp	r3, #2
 800585e:	d0db      	beq.n	8005818 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <HAL_I2C_Master_Receive_IT+0x96>
 800586a:	2302      	movs	r3, #2
 800586c:	e055      	b.n	800591a <HAL_I2C_Master_Receive_IT+0x142>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b01      	cmp	r3, #1
 8005882:	d007      	beq.n	8005894 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2222      	movs	r2, #34	; 0x22
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2210      	movs	r2, #16
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	893a      	ldrh	r2, [r7, #8]
 80058c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4a17      	ldr	r2, [pc, #92]	; (8005930 <HAL_I2C_Master_Receive_IT+0x158>)
 80058d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80058d6:	897a      	ldrh	r2, [r7, #10]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80058f2:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005902:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005912:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	e000      	b.n	800591a <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8005918:	2302      	movs	r3, #2
  }
}
 800591a:	4618      	mov	r0, r3
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	20000430 	.word	0x20000430
 800592c:	14f8b589 	.word	0x14f8b589
 8005930:	ffff0000 	.word	0xffff0000

08005934 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005954:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800595c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800595e:	7bfb      	ldrb	r3, [r7, #15]
 8005960:	2b10      	cmp	r3, #16
 8005962:	d003      	beq.n	800596c <HAL_I2C_EV_IRQHandler+0x38>
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	2b40      	cmp	r3, #64	; 0x40
 8005968:	f040 80c1 	bne.w	8005aee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10d      	bne.n	80059a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800598c:	d003      	beq.n	8005996 <HAL_I2C_EV_IRQHandler+0x62>
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005994:	d101      	bne.n	800599a <HAL_I2C_EV_IRQHandler+0x66>
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <HAL_I2C_EV_IRQHandler+0x68>
 800599a:	2300      	movs	r3, #0
 800599c:	2b01      	cmp	r3, #1
 800599e:	f000 8132 	beq.w	8005c06 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00c      	beq.n	80059c6 <HAL_I2C_EV_IRQHandler+0x92>
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	0a5b      	lsrs	r3, r3, #9
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d006      	beq.n	80059c6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f001 fc7b 	bl	80072b4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fd83 	bl	80064ca <I2C_Master_SB>
 80059c4:	e092      	b.n	8005aec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	08db      	lsrs	r3, r3, #3
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d009      	beq.n	80059e6 <HAL_I2C_EV_IRQHandler+0xb2>
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	0a5b      	lsrs	r3, r3, #9
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fdf9 	bl	80065d6 <I2C_Master_ADD10>
 80059e4:	e082      	b.n	8005aec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <HAL_I2C_EV_IRQHandler+0xd2>
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	0a5b      	lsrs	r3, r3, #9
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fe13 	bl	800662a <I2C_Master_ADDR>
 8005a04:	e072      	b.n	8005aec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	089b      	lsrs	r3, r3, #2
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d03b      	beq.n	8005a8a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a20:	f000 80f3 	beq.w	8005c0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	09db      	lsrs	r3, r3, #7
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00f      	beq.n	8005a50 <HAL_I2C_EV_IRQHandler+0x11c>
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	0a9b      	lsrs	r3, r3, #10
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d009      	beq.n	8005a50 <HAL_I2C_EV_IRQHandler+0x11c>
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	089b      	lsrs	r3, r3, #2
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d103      	bne.n	8005a50 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f9f3 	bl	8005e34 <I2C_MasterTransmit_TXE>
 8005a4e:	e04d      	b.n	8005aec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	089b      	lsrs	r3, r3, #2
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80d6 	beq.w	8005c0a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	0a5b      	lsrs	r3, r3, #9
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 80cf 	beq.w	8005c0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005a6c:	7bbb      	ldrb	r3, [r7, #14]
 8005a6e:	2b21      	cmp	r3, #33	; 0x21
 8005a70:	d103      	bne.n	8005a7a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fa7a 	bl	8005f6c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a78:	e0c7      	b.n	8005c0a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
 8005a7c:	2b40      	cmp	r3, #64	; 0x40
 8005a7e:	f040 80c4 	bne.w	8005c0a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fae8 	bl	8006058 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a88:	e0bf      	b.n	8005c0a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a98:	f000 80b7 	beq.w	8005c0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	099b      	lsrs	r3, r3, #6
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00f      	beq.n	8005ac8 <HAL_I2C_EV_IRQHandler+0x194>
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	0a9b      	lsrs	r3, r3, #10
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d009      	beq.n	8005ac8 <HAL_I2C_EV_IRQHandler+0x194>
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	089b      	lsrs	r3, r3, #2
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d103      	bne.n	8005ac8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fb5d 	bl	8006180 <I2C_MasterReceive_RXNE>
 8005ac6:	e011      	b.n	8005aec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	089b      	lsrs	r3, r3, #2
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 809a 	beq.w	8005c0a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	0a5b      	lsrs	r3, r3, #9
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 8093 	beq.w	8005c0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fc06 	bl	80062f6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005aea:	e08e      	b.n	8005c0a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005aec:	e08d      	b.n	8005c0a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d004      	beq.n	8005b00 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	61fb      	str	r3, [r7, #28]
 8005afe:	e007      	b.n	8005b10 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	085b      	lsrs	r3, r3, #1
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d012      	beq.n	8005b42 <HAL_I2C_EV_IRQHandler+0x20e>
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	0a5b      	lsrs	r3, r3, #9
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00c      	beq.n	8005b42 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005b38:	69b9      	ldr	r1, [r7, #24]
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 ffc4 	bl	8006ac8 <I2C_Slave_ADDR>
 8005b40:	e066      	b.n	8005c10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	091b      	lsrs	r3, r3, #4
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <HAL_I2C_EV_IRQHandler+0x22e>
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	0a5b      	lsrs	r3, r3, #9
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fffe 	bl	8006b5c <I2C_Slave_STOPF>
 8005b60:	e056      	b.n	8005c10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b62:	7bbb      	ldrb	r3, [r7, #14]
 8005b64:	2b21      	cmp	r3, #33	; 0x21
 8005b66:	d002      	beq.n	8005b6e <HAL_I2C_EV_IRQHandler+0x23a>
 8005b68:	7bbb      	ldrb	r3, [r7, #14]
 8005b6a:	2b29      	cmp	r3, #41	; 0x29
 8005b6c:	d125      	bne.n	8005bba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	09db      	lsrs	r3, r3, #7
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00f      	beq.n	8005b9a <HAL_I2C_EV_IRQHandler+0x266>
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	0a9b      	lsrs	r3, r3, #10
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d009      	beq.n	8005b9a <HAL_I2C_EV_IRQHandler+0x266>
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	089b      	lsrs	r3, r3, #2
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d103      	bne.n	8005b9a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 feda 	bl	800694c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b98:	e039      	b.n	8005c0e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	089b      	lsrs	r3, r3, #2
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d033      	beq.n	8005c0e <HAL_I2C_EV_IRQHandler+0x2da>
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	0a5b      	lsrs	r3, r3, #9
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d02d      	beq.n	8005c0e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 ff07 	bl	80069c6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bb8:	e029      	b.n	8005c0e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	099b      	lsrs	r3, r3, #6
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00f      	beq.n	8005be6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	0a9b      	lsrs	r3, r3, #10
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d009      	beq.n	8005be6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	089b      	lsrs	r3, r3, #2
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d103      	bne.n	8005be6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 ff12 	bl	8006a08 <I2C_SlaveReceive_RXNE>
 8005be4:	e014      	b.n	8005c10 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	089b      	lsrs	r3, r3, #2
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00e      	beq.n	8005c10 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	0a5b      	lsrs	r3, r3, #9
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d008      	beq.n	8005c10 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 ff40 	bl	8006a84 <I2C_SlaveReceive_BTF>
 8005c04:	e004      	b.n	8005c10 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005c06:	bf00      	nop
 8005c08:	e002      	b.n	8005c10 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c0a:	bf00      	nop
 8005c0c:	e000      	b.n	8005c10 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c0e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005c10:	3720      	adds	r7, #32
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b08a      	sub	sp, #40	; 0x28
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c38:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	0a1b      	lsrs	r3, r3, #8
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00e      	beq.n	8005c64 <HAL_I2C_ER_IRQHandler+0x4e>
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	0a1b      	lsrs	r3, r3, #8
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d008      	beq.n	8005c64 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	f043 0301 	orr.w	r3, r3, #1
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c62:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	0a5b      	lsrs	r3, r3, #9
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00e      	beq.n	8005c8e <HAL_I2C_ER_IRQHandler+0x78>
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	0a1b      	lsrs	r3, r3, #8
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d008      	beq.n	8005c8e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	f043 0302 	orr.w	r3, r3, #2
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005c8c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	0a9b      	lsrs	r3, r3, #10
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d03f      	beq.n	8005d1a <HAL_I2C_ER_IRQHandler+0x104>
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	0a1b      	lsrs	r3, r3, #8
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d039      	beq.n	8005d1a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005ca6:	7efb      	ldrb	r3, [r7, #27]
 8005ca8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005cc0:	7ebb      	ldrb	r3, [r7, #26]
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d112      	bne.n	8005cec <HAL_I2C_ER_IRQHandler+0xd6>
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10f      	bne.n	8005cec <HAL_I2C_ER_IRQHandler+0xd6>
 8005ccc:	7cfb      	ldrb	r3, [r7, #19]
 8005cce:	2b21      	cmp	r3, #33	; 0x21
 8005cd0:	d008      	beq.n	8005ce4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005cd2:	7cfb      	ldrb	r3, [r7, #19]
 8005cd4:	2b29      	cmp	r3, #41	; 0x29
 8005cd6:	d005      	beq.n	8005ce4 <HAL_I2C_ER_IRQHandler+0xce>
 8005cd8:	7cfb      	ldrb	r3, [r7, #19]
 8005cda:	2b28      	cmp	r3, #40	; 0x28
 8005cdc:	d106      	bne.n	8005cec <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b21      	cmp	r3, #33	; 0x21
 8005ce2:	d103      	bne.n	8005cec <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 f869 	bl	8006dbc <I2C_Slave_AF>
 8005cea:	e016      	b.n	8005d1a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cf4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	f043 0304 	orr.w	r3, r3, #4
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005cfe:	7efb      	ldrb	r3, [r7, #27]
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d002      	beq.n	8005d0a <HAL_I2C_ER_IRQHandler+0xf4>
 8005d04:	7efb      	ldrb	r3, [r7, #27]
 8005d06:	2b40      	cmp	r3, #64	; 0x40
 8005d08:	d107      	bne.n	8005d1a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d18:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	0adb      	lsrs	r3, r3, #11
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00e      	beq.n	8005d44 <HAL_I2C_ER_IRQHandler+0x12e>
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	0a1b      	lsrs	r3, r3, #8
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d008      	beq.n	8005d44 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	f043 0308 	orr.w	r3, r3, #8
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005d42:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d008      	beq.n	8005d5c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	431a      	orrs	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f001 f8a0 	bl	8006e9c <I2C_ITError>
  }
}
 8005d5c:	bf00      	nop
 8005d5e:	3728      	adds	r7, #40	; 0x28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e42:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e4a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d150      	bne.n	8005efc <I2C_MasterTransmit_TXE+0xc8>
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	2b21      	cmp	r3, #33	; 0x21
 8005e5e:	d14d      	bne.n	8005efc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d01d      	beq.n	8005ea2 <I2C_MasterTransmit_TXE+0x6e>
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2b20      	cmp	r3, #32
 8005e6a:	d01a      	beq.n	8005ea2 <I2C_MasterTransmit_TXE+0x6e>
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e72:	d016      	beq.n	8005ea2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e82:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2211      	movs	r2, #17
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff ff62 	bl	8005d64 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ea0:	e060      	b.n	8005f64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005eb0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b40      	cmp	r3, #64	; 0x40
 8005eda:	d107      	bne.n	8005eec <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff ff7d 	bl	8005de4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005eea:	e03b      	b.n	8005f64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff ff35 	bl	8005d64 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005efa:	e033      	b.n	8005f64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	2b21      	cmp	r3, #33	; 0x21
 8005f00:	d005      	beq.n	8005f0e <I2C_MasterTransmit_TXE+0xda>
 8005f02:	7bbb      	ldrb	r3, [r7, #14]
 8005f04:	2b40      	cmp	r3, #64	; 0x40
 8005f06:	d12d      	bne.n	8005f64 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	2b22      	cmp	r3, #34	; 0x22
 8005f0c:	d12a      	bne.n	8005f64 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d108      	bne.n	8005f2a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f26:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005f28:	e01c      	b.n	8005f64 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b40      	cmp	r3, #64	; 0x40
 8005f34:	d103      	bne.n	8005f3e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f88e 	bl	8006058 <I2C_MemoryTransmit_TXE_BTF>
}
 8005f3c:	e012      	b.n	8005f64 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	781a      	ldrb	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f62:	e7ff      	b.n	8005f64 <I2C_MasterTransmit_TXE+0x130>
 8005f64:	bf00      	nop
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b21      	cmp	r3, #33	; 0x21
 8005f84:	d164      	bne.n	8006050 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d012      	beq.n	8005fb6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	781a      	ldrb	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005fb4:	e04c      	b.n	8006050 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d01d      	beq.n	8005ff8 <I2C_MasterTransmit_BTF+0x8c>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d01a      	beq.n	8005ff8 <I2C_MasterTransmit_BTF+0x8c>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fc8:	d016      	beq.n	8005ff8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fd8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2211      	movs	r2, #17
 8005fde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff feb7 	bl	8005d64 <HAL_I2C_MasterTxCpltCallback>
}
 8005ff6:	e02b      	b.n	8006050 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006006:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006016:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2220      	movs	r2, #32
 8006022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b40      	cmp	r3, #64	; 0x40
 8006030:	d107      	bne.n	8006042 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff fed2 	bl	8005de4 <HAL_I2C_MemTxCpltCallback>
}
 8006040:	e006      	b.n	8006050 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff fe8a 	bl	8005d64 <HAL_I2C_MasterTxCpltCallback>
}
 8006050:	bf00      	nop
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006066:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606c:	2b00      	cmp	r3, #0
 800606e:	d11d      	bne.n	80060ac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006074:	2b01      	cmp	r3, #1
 8006076:	d10b      	bne.n	8006090 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800607c:	b2da      	uxtb	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006088:	1c9a      	adds	r2, r3, #2
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800608e:	e073      	b.n	8006178 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006094:	b29b      	uxth	r3, r3
 8006096:	121b      	asrs	r3, r3, #8
 8006098:	b2da      	uxtb	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80060aa:	e065      	b.n	8006178 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d10b      	bne.n	80060cc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80060ca:	e055      	b.n	8006178 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d151      	bne.n	8006178 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
 80060d6:	2b22      	cmp	r3, #34	; 0x22
 80060d8:	d10d      	bne.n	80060f6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060e8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80060f4:	e040      	b.n	8006178 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d015      	beq.n	800612c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	2b21      	cmp	r3, #33	; 0x21
 8006104:	d112      	bne.n	800612c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	781a      	ldrb	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006120:	b29b      	uxth	r3, r3
 8006122:	3b01      	subs	r3, #1
 8006124:	b29a      	uxth	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800612a:	e025      	b.n	8006178 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d120      	bne.n	8006178 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006136:	7bfb      	ldrb	r3, [r7, #15]
 8006138:	2b21      	cmp	r3, #33	; 0x21
 800613a:	d11d      	bne.n	8006178 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800614a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800615a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7ff fe36 	bl	8005de4 <HAL_I2C_MemTxCpltCallback>
}
 8006178:	bf00      	nop
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b22      	cmp	r3, #34	; 0x22
 8006192:	f040 80ac 	bne.w	80062ee <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619a:	b29b      	uxth	r3, r3
 800619c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d921      	bls.n	80061e8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691a      	ldr	r2, [r3, #16]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	f040 808c 	bne.w	80062ee <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80061e6:	e082      	b.n	80062ee <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d075      	beq.n	80062dc <I2C_MasterReceive_RXNE+0x15c>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d002      	beq.n	80061fc <I2C_MasterReceive_RXNE+0x7c>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d16f      	bne.n	80062dc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f001 f827 	bl	8007250 <I2C_WaitOnSTOPRequestThroughIT>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d142      	bne.n	800628e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006216:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006226:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691a      	ldr	r2, [r3, #16]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006244:	b29b      	uxth	r3, r3
 8006246:	3b01      	subs	r3, #1
 8006248:	b29a      	uxth	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b40      	cmp	r3, #64	; 0x40
 8006260:	d10a      	bne.n	8006278 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff fdc1 	bl	8005df8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006276:	e03a      	b.n	80062ee <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2212      	movs	r2, #18
 8006284:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff fd76 	bl	8005d78 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800628c:	e02f      	b.n	80062ee <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800629c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	3b01      	subs	r3, #1
 80062be:	b29a      	uxth	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff fd99 	bl	8005e0c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80062da:	e008      	b.n	80062ee <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ea:	605a      	str	r2, [r3, #4]
}
 80062ec:	e7ff      	b.n	80062ee <I2C_MasterReceive_RXNE+0x16e>
 80062ee:	bf00      	nop
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b04      	cmp	r3, #4
 800630c:	d11b      	bne.n	8006346 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800631c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006344:	e0bd      	b.n	80064c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634a:	b29b      	uxth	r3, r3
 800634c:	2b03      	cmp	r3, #3
 800634e:	d129      	bne.n	80063a4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800635e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2b04      	cmp	r3, #4
 8006364:	d00a      	beq.n	800637c <I2C_MasterReceive_BTF+0x86>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b02      	cmp	r3, #2
 800636a:	d007      	beq.n	800637c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800637a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80063a2:	e08e      	b.n	80064c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d176      	bne.n	800649c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d002      	beq.n	80063ba <I2C_MasterReceive_BTF+0xc4>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b10      	cmp	r3, #16
 80063b8:	d108      	bne.n	80063cc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	e019      	b.n	8006400 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d002      	beq.n	80063d8 <I2C_MasterReceive_BTF+0xe2>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d108      	bne.n	80063ea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	e00a      	b.n	8006400 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b10      	cmp	r3, #16
 80063ee:	d007      	beq.n	8006400 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641c:	b29b      	uxth	r3, r3
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	691a      	ldr	r2, [r3, #16]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	b2d2      	uxtb	r2, r2
 8006432:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800645a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2220      	movs	r2, #32
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b40      	cmp	r3, #64	; 0x40
 800646e:	d10a      	bne.n	8006486 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff fcba 	bl	8005df8 <HAL_I2C_MemRxCpltCallback>
}
 8006484:	e01d      	b.n	80064c2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2212      	movs	r2, #18
 8006492:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff fc6f 	bl	8005d78 <HAL_I2C_MasterRxCpltCallback>
}
 800649a:	e012      	b.n	80064c2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691a      	ldr	r2, [r3, #16]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80064c2:	bf00      	nop
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b40      	cmp	r3, #64	; 0x40
 80064dc:	d117      	bne.n	800650e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d109      	bne.n	80064fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80064f8:	e067      	b.n	80065ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	f043 0301 	orr.w	r3, r3, #1
 8006504:	b2da      	uxtb	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	611a      	str	r2, [r3, #16]
}
 800650c:	e05d      	b.n	80065ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006516:	d133      	bne.n	8006580 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b21      	cmp	r3, #33	; 0x21
 8006522:	d109      	bne.n	8006538 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006528:	b2db      	uxtb	r3, r3
 800652a:	461a      	mov	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006534:	611a      	str	r2, [r3, #16]
 8006536:	e008      	b.n	800654a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653c:	b2db      	uxtb	r3, r3
 800653e:	f043 0301 	orr.w	r3, r3, #1
 8006542:	b2da      	uxtb	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654e:	2b00      	cmp	r3, #0
 8006550:	d004      	beq.n	800655c <I2C_Master_SB+0x92>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006558:	2b00      	cmp	r3, #0
 800655a:	d108      	bne.n	800656e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	2b00      	cmp	r3, #0
 8006562:	d032      	beq.n	80065ca <I2C_Master_SB+0x100>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656a:	2b00      	cmp	r3, #0
 800656c:	d02d      	beq.n	80065ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800657c:	605a      	str	r2, [r3, #4]
}
 800657e:	e024      	b.n	80065ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10e      	bne.n	80065a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800658c:	b29b      	uxth	r3, r3
 800658e:	11db      	asrs	r3, r3, #7
 8006590:	b2db      	uxtb	r3, r3
 8006592:	f003 0306 	and.w	r3, r3, #6
 8006596:	b2db      	uxtb	r3, r3
 8006598:	f063 030f 	orn	r3, r3, #15
 800659c:	b2da      	uxtb	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	611a      	str	r2, [r3, #16]
}
 80065a4:	e011      	b.n	80065ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d10d      	bne.n	80065ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	11db      	asrs	r3, r3, #7
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	f003 0306 	and.w	r3, r3, #6
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	f063 030e 	orn	r3, r3, #14
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	611a      	str	r2, [r3, #16]
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b083      	sub	sp, #12
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d004      	beq.n	80065fc <I2C_Master_ADD10+0x26>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d108      	bne.n	800660e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00c      	beq.n	800661e <I2C_Master_ADD10+0x48>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660a:	2b00      	cmp	r3, #0
 800660c:	d007      	beq.n	800661e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800661c:	605a      	str	r2, [r3, #4]
  }
}
 800661e:	bf00      	nop
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800662a:	b480      	push	{r7}
 800662c:	b091      	sub	sp, #68	; 0x44
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006638:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b22      	cmp	r3, #34	; 0x22
 8006652:	f040 8169 	bne.w	8006928 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10f      	bne.n	800667e <I2C_Master_ADDR+0x54>
 800665e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d10b      	bne.n	800667e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006666:	2300      	movs	r3, #0
 8006668:	633b      	str	r3, [r7, #48]	; 0x30
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	633b      	str	r3, [r7, #48]	; 0x30
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	633b      	str	r3, [r7, #48]	; 0x30
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	e160      	b.n	8006940 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006682:	2b00      	cmp	r3, #0
 8006684:	d11d      	bne.n	80066c2 <I2C_Master_ADDR+0x98>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800668e:	d118      	bne.n	80066c2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006690:	2300      	movs	r3, #0
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066b4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	651a      	str	r2, [r3, #80]	; 0x50
 80066c0:	e13e      	b.n	8006940 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d113      	bne.n	80066f4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066cc:	2300      	movs	r3, #0
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	e115      	b.n	8006920 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	f040 808a 	bne.w	8006814 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006702:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006706:	d137      	bne.n	8006778 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006716:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006726:	d113      	bne.n	8006750 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006736:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006738:	2300      	movs	r3, #0
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	e0e7      	b.n	8006920 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006750:	2300      	movs	r3, #0
 8006752:	623b      	str	r3, [r7, #32]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	623b      	str	r3, [r7, #32]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	623b      	str	r3, [r7, #32]
 8006764:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	e0d3      	b.n	8006920 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677a:	2b08      	cmp	r3, #8
 800677c:	d02e      	beq.n	80067dc <I2C_Master_ADDR+0x1b2>
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	2b20      	cmp	r3, #32
 8006782:	d02b      	beq.n	80067dc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006786:	2b12      	cmp	r3, #18
 8006788:	d102      	bne.n	8006790 <I2C_Master_ADDR+0x166>
 800678a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678c:	2b01      	cmp	r3, #1
 800678e:	d125      	bne.n	80067dc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006792:	2b04      	cmp	r3, #4
 8006794:	d00e      	beq.n	80067b4 <I2C_Master_ADDR+0x18a>
 8006796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006798:	2b02      	cmp	r3, #2
 800679a:	d00b      	beq.n	80067b4 <I2C_Master_ADDR+0x18a>
 800679c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679e:	2b10      	cmp	r3, #16
 80067a0:	d008      	beq.n	80067b4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	e007      	b.n	80067c4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067c2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067c4:	2300      	movs	r3, #0
 80067c6:	61fb      	str	r3, [r7, #28]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	61fb      	str	r3, [r7, #28]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	61fb      	str	r3, [r7, #28]
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	e0a1      	b.n	8006920 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ec:	2300      	movs	r3, #0
 80067ee:	61bb      	str	r3, [r7, #24]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	61bb      	str	r3, [r7, #24]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	61bb      	str	r3, [r7, #24]
 8006800:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	e085      	b.n	8006920 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b02      	cmp	r3, #2
 800681c:	d14d      	bne.n	80068ba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800681e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006820:	2b04      	cmp	r3, #4
 8006822:	d016      	beq.n	8006852 <I2C_Master_ADDR+0x228>
 8006824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006826:	2b02      	cmp	r3, #2
 8006828:	d013      	beq.n	8006852 <I2C_Master_ADDR+0x228>
 800682a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682c:	2b10      	cmp	r3, #16
 800682e:	d010      	beq.n	8006852 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800683e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	e007      	b.n	8006862 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006860:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800686c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006870:	d117      	bne.n	80068a2 <I2C_Master_ADDR+0x278>
 8006872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006874:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006878:	d00b      	beq.n	8006892 <I2C_Master_ADDR+0x268>
 800687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687c:	2b01      	cmp	r3, #1
 800687e:	d008      	beq.n	8006892 <I2C_Master_ADDR+0x268>
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	2b08      	cmp	r3, #8
 8006884:	d005      	beq.n	8006892 <I2C_Master_ADDR+0x268>
 8006886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006888:	2b10      	cmp	r3, #16
 800688a:	d002      	beq.n	8006892 <I2C_Master_ADDR+0x268>
 800688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688e:	2b20      	cmp	r3, #32
 8006890:	d107      	bne.n	80068a2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068a0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068a2:	2300      	movs	r3, #0
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	e032      	b.n	8006920 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068c8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068d8:	d117      	bne.n	800690a <I2C_Master_ADDR+0x2e0>
 80068da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068e0:	d00b      	beq.n	80068fa <I2C_Master_ADDR+0x2d0>
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d008      	beq.n	80068fa <I2C_Master_ADDR+0x2d0>
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d005      	beq.n	80068fa <I2C_Master_ADDR+0x2d0>
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	2b10      	cmp	r3, #16
 80068f2:	d002      	beq.n	80068fa <I2C_Master_ADDR+0x2d0>
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	2b20      	cmp	r3, #32
 80068f8:	d107      	bne.n	800690a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006908:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800690a:	2300      	movs	r3, #0
 800690c:	613b      	str	r3, [r7, #16]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	613b      	str	r3, [r7, #16]
 800691e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006926:	e00b      	b.n	8006940 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
}
 800693e:	e7ff      	b.n	8006940 <I2C_Master_ADDR+0x316>
 8006940:	bf00      	nop
 8006942:	3744      	adds	r7, #68	; 0x44
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006960:	b29b      	uxth	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d02b      	beq.n	80069be <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	781a      	ldrb	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006980:	b29b      	uxth	r3, r3
 8006982:	3b01      	subs	r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698e:	b29b      	uxth	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d114      	bne.n	80069be <I2C_SlaveTransmit_TXE+0x72>
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	2b29      	cmp	r3, #41	; 0x29
 8006998:	d111      	bne.n	80069be <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2221      	movs	r2, #33	; 0x21
 80069ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2228      	movs	r2, #40	; 0x28
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff f9e7 	bl	8005d8c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80069be:	bf00      	nop
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d011      	beq.n	80069fc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	781a      	ldrb	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d02c      	beq.n	8006a7c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	691a      	ldr	r2, [r3, #16]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	b2d2      	uxtb	r2, r2
 8006a2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d114      	bne.n	8006a7c <I2C_SlaveReceive_RXNE+0x74>
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
 8006a54:	2b2a      	cmp	r3, #42	; 0x2a
 8006a56:	d111      	bne.n	8006a7c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a66:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2222      	movs	r2, #34	; 0x22
 8006a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2228      	movs	r2, #40	; 0x28
 8006a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff f992 	bl	8005da0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006a7c:	bf00      	nop
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d012      	beq.n	8006abc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ae2:	2b28      	cmp	r3, #40	; 0x28
 8006ae4:	d127      	bne.n	8006b36 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006af4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	089b      	lsrs	r3, r3, #2
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006b02:	2301      	movs	r3, #1
 8006b04:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	09db      	lsrs	r3, r3, #7
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d103      	bne.n	8006b1a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	81bb      	strh	r3, [r7, #12]
 8006b18:	e002      	b.n	8006b20 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006b28:	89ba      	ldrh	r2, [r7, #12]
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff f940 	bl	8005db4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006b34:	e00e      	b.n	8006b54 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b36:	2300      	movs	r3, #0
 8006b38:	60bb      	str	r3, [r7, #8]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	60bb      	str	r3, [r7, #8]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	60bb      	str	r3, [r7, #8]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006b54:	bf00      	nop
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60bb      	str	r3, [r7, #8]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	60bb      	str	r3, [r7, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0201 	orr.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ba8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb8:	d172      	bne.n	8006ca0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	2b22      	cmp	r3, #34	; 0x22
 8006bbe:	d002      	beq.n	8006bc6 <I2C_Slave_STOPF+0x6a>
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8006bc4:	d135      	bne.n	8006c32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d005      	beq.n	8006bea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	f043 0204 	orr.w	r2, r3, #4
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bf8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fe f92a 	bl	8004e58 <HAL_DMA_GetState>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d049      	beq.n	8006c9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0e:	4a69      	ldr	r2, [pc, #420]	; (8006db4 <I2C_Slave_STOPF+0x258>)
 8006c10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fd ff72 	bl	8004b00 <HAL_DMA_Abort_IT>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d03d      	beq.n	8006c9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c2c:	4610      	mov	r0, r2
 8006c2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c30:	e035      	b.n	8006c9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d005      	beq.n	8006c56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	f043 0204 	orr.w	r2, r3, #4
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe f8f4 	bl	8004e58 <HAL_DMA_GetState>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d014      	beq.n	8006ca0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7a:	4a4e      	ldr	r2, [pc, #312]	; (8006db4 <I2C_Slave_STOPF+0x258>)
 8006c7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fd ff3c 	bl	8004b00 <HAL_DMA_Abort_IT>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d008      	beq.n	8006ca0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4798      	blx	r3
 8006c9c:	e000      	b.n	8006ca0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d03e      	beq.n	8006d28 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	d112      	bne.n	8006cde <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	691a      	ldr	r2, [r3, #16]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	b2d2      	uxtb	r2, r2
 8006cc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce8:	2b40      	cmp	r3, #64	; 0x40
 8006cea:	d112      	bne.n	8006d12 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691a      	ldr	r2, [r3, #16]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d20:	f043 0204 	orr.w	r2, r3, #4
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f8b3 	bl	8006e9c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006d36:	e039      	b.n	8006dac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d3c:	d109      	bne.n	8006d52 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2228      	movs	r2, #40	; 0x28
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff f827 	bl	8005da0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b28      	cmp	r3, #40	; 0x28
 8006d5c:	d111      	bne.n	8006d82 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a15      	ldr	r2, [pc, #84]	; (8006db8 <I2C_Slave_STOPF+0x25c>)
 8006d62:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7ff f828 	bl	8005dd0 <HAL_I2C_ListenCpltCallback>
}
 8006d80:	e014      	b.n	8006dac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	2b22      	cmp	r3, #34	; 0x22
 8006d88:	d002      	beq.n	8006d90 <I2C_Slave_STOPF+0x234>
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
 8006d8c:	2b22      	cmp	r3, #34	; 0x22
 8006d8e:	d10d      	bne.n	8006dac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7fe fffa 	bl	8005da0 <HAL_I2C_SlaveRxCpltCallback>
}
 8006dac:	bf00      	nop
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	08007101 	.word	0x08007101
 8006db8:	ffff0000 	.word	0xffff0000

08006dbc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2b08      	cmp	r3, #8
 8006dd6:	d002      	beq.n	8006dde <I2C_Slave_AF+0x22>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	d129      	bne.n	8006e32 <I2C_Slave_AF+0x76>
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
 8006de0:	2b28      	cmp	r3, #40	; 0x28
 8006de2:	d126      	bne.n	8006e32 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a2c      	ldr	r2, [pc, #176]	; (8006e98 <I2C_Slave_AF+0xdc>)
 8006de8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006df8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e02:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e12:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fe ffd0 	bl	8005dd0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006e30:	e02e      	b.n	8006e90 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
 8006e34:	2b21      	cmp	r3, #33	; 0x21
 8006e36:	d126      	bne.n	8006e86 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a17      	ldr	r2, [pc, #92]	; (8006e98 <I2C_Slave_AF+0xdc>)
 8006e3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2221      	movs	r2, #33	; 0x21
 8006e42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2220      	movs	r2, #32
 8006e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e62:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e6c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e7c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7fe ff84 	bl	8005d8c <HAL_I2C_SlaveTxCpltCallback>
}
 8006e84:	e004      	b.n	8006e90 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e8e:	615a      	str	r2, [r3, #20]
}
 8006e90:	bf00      	nop
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	ffff0000 	.word	0xffff0000

08006e9c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eaa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eb2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006eb4:	7bbb      	ldrb	r3, [r7, #14]
 8006eb6:	2b10      	cmp	r3, #16
 8006eb8:	d002      	beq.n	8006ec0 <I2C_ITError+0x24>
 8006eba:	7bbb      	ldrb	r3, [r7, #14]
 8006ebc:	2b40      	cmp	r3, #64	; 0x40
 8006ebe:	d10a      	bne.n	8006ed6 <I2C_ITError+0x3a>
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	2b22      	cmp	r3, #34	; 0x22
 8006ec4:	d107      	bne.n	8006ed6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ed4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
 8006ed8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006edc:	2b28      	cmp	r3, #40	; 0x28
 8006ede:	d107      	bne.n	8006ef0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2228      	movs	r2, #40	; 0x28
 8006eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006eee:	e015      	b.n	8006f1c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006efe:	d00a      	beq.n	8006f16 <I2C_ITError+0x7a>
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	2b60      	cmp	r3, #96	; 0x60
 8006f04:	d007      	beq.n	8006f16 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f2a:	d162      	bne.n	8006ff2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f3a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d020      	beq.n	8006f8c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4e:	4a6a      	ldr	r2, [pc, #424]	; (80070f8 <I2C_ITError+0x25c>)
 8006f50:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fd fdd2 	bl	8004b00 <HAL_DMA_Abort_IT>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f000 8089 	beq.w	8007076 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 0201 	bic.w	r2, r2, #1
 8006f72:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f86:	4610      	mov	r0, r2
 8006f88:	4798      	blx	r3
 8006f8a:	e074      	b.n	8007076 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	4a59      	ldr	r2, [pc, #356]	; (80070f8 <I2C_ITError+0x25c>)
 8006f92:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fd fdb1 	bl	8004b00 <HAL_DMA_Abort_IT>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d068      	beq.n	8007076 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fae:	2b40      	cmp	r3, #64	; 0x40
 8006fb0:	d10b      	bne.n	8006fca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	691a      	ldr	r2, [r3, #16]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	b2d2      	uxtb	r2, r2
 8006fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0201 	bic.w	r2, r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006fec:	4610      	mov	r0, r2
 8006fee:	4798      	blx	r3
 8006ff0:	e041      	b.n	8007076 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b60      	cmp	r3, #96	; 0x60
 8006ffc:	d125      	bne.n	800704a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2220      	movs	r2, #32
 8007002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007016:	2b40      	cmp	r3, #64	; 0x40
 8007018:	d10b      	bne.n	8007032 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 0201 	bic.w	r2, r2, #1
 8007040:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7fe feec 	bl	8005e20 <HAL_I2C_AbortCpltCallback>
 8007048:	e015      	b.n	8007076 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007054:	2b40      	cmp	r3, #64	; 0x40
 8007056:	d10b      	bne.n	8007070 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691a      	ldr	r2, [r3, #16]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	b2d2      	uxtb	r2, r2
 8007064:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7fe fecb 	bl	8005e0c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10e      	bne.n	80070a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800708c:	2b00      	cmp	r3, #0
 800708e:	d109      	bne.n	80070a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007096:	2b00      	cmp	r3, #0
 8007098:	d104      	bne.n	80070a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d007      	beq.n	80070b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	d113      	bne.n	80070f0 <I2C_ITError+0x254>
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	2b28      	cmp	r3, #40	; 0x28
 80070cc:	d110      	bne.n	80070f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a0a      	ldr	r2, [pc, #40]	; (80070fc <I2C_ITError+0x260>)
 80070d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2220      	movs	r2, #32
 80070de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fe fe70 	bl	8005dd0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80070f0:	bf00      	nop
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	08007101 	.word	0x08007101
 80070fc:	ffff0000 	.word	0xffff0000

08007100 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007108:	2300      	movs	r3, #0
 800710a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007110:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007118:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800711a:	4b4b      	ldr	r3, [pc, #300]	; (8007248 <I2C_DMAAbort+0x148>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	08db      	lsrs	r3, r3, #3
 8007120:	4a4a      	ldr	r2, [pc, #296]	; (800724c <I2C_DMAAbort+0x14c>)
 8007122:	fba2 2303 	umull	r2, r3, r2, r3
 8007126:	0a1a      	lsrs	r2, r3, #8
 8007128:	4613      	mov	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	00da      	lsls	r2, r3, #3
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d106      	bne.n	8007148 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	f043 0220 	orr.w	r2, r3, #32
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007146:	e00a      	b.n	800715e <I2C_DMAAbort+0x5e>
    }
    count--;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3b01      	subs	r3, #1
 800714c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800715c:	d0ea      	beq.n	8007134 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716a:	2200      	movs	r2, #0
 800716c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	2200      	movs	r2, #0
 800717c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800718c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2200      	movs	r2, #0
 8007192:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a0:	2200      	movs	r2, #0
 80071a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	2200      	movs	r2, #0
 80071b2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0201 	bic.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b60      	cmp	r3, #96	; 0x60
 80071ce:	d10e      	bne.n	80071ee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2200      	movs	r2, #0
 80071e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80071e6:	6978      	ldr	r0, [r7, #20]
 80071e8:	f7fe fe1a 	bl	8005e20 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071ec:	e027      	b.n	800723e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071ee:	7cfb      	ldrb	r3, [r7, #19]
 80071f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071f4:	2b28      	cmp	r3, #40	; 0x28
 80071f6:	d117      	bne.n	8007228 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0201 	orr.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007216:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2200      	movs	r2, #0
 800721c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2228      	movs	r2, #40	; 0x28
 8007222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007226:	e007      	b.n	8007238 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2220      	movs	r2, #32
 800722c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007238:	6978      	ldr	r0, [r7, #20]
 800723a:	f7fe fde7 	bl	8005e0c <HAL_I2C_ErrorCallback>
}
 800723e:	bf00      	nop
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20000430 	.word	0x20000430
 800724c:	14f8b589 	.word	0x14f8b589

08007250 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800725c:	4b13      	ldr	r3, [pc, #76]	; (80072ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	08db      	lsrs	r3, r3, #3
 8007262:	4a13      	ldr	r2, [pc, #76]	; (80072b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007264:	fba2 2303 	umull	r2, r3, r2, r3
 8007268:	0a1a      	lsrs	r2, r3, #8
 800726a:	4613      	mov	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3b01      	subs	r3, #1
 8007276:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d107      	bne.n	800728e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	f043 0220 	orr.w	r2, r3, #32
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e008      	b.n	80072a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800729c:	d0e9      	beq.n	8007272 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	20000430 	.word	0x20000430
 80072b0:	14f8b589 	.word	0x14f8b589

080072b4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80072c4:	d103      	bne.n	80072ce <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80072cc:	e007      	b.n	80072de <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80072d6:	d102      	bne.n	80072de <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2208      	movs	r2, #8
 80072dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80072de:	bf00      	nop
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
	...

080072ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e267      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d075      	beq.n	80073f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800730a:	4b88      	ldr	r3, [pc, #544]	; (800752c <HAL_RCC_OscConfig+0x240>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f003 030c 	and.w	r3, r3, #12
 8007312:	2b04      	cmp	r3, #4
 8007314:	d00c      	beq.n	8007330 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007316:	4b85      	ldr	r3, [pc, #532]	; (800752c <HAL_RCC_OscConfig+0x240>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800731e:	2b08      	cmp	r3, #8
 8007320:	d112      	bne.n	8007348 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007322:	4b82      	ldr	r3, [pc, #520]	; (800752c <HAL_RCC_OscConfig+0x240>)
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800732a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800732e:	d10b      	bne.n	8007348 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007330:	4b7e      	ldr	r3, [pc, #504]	; (800752c <HAL_RCC_OscConfig+0x240>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d05b      	beq.n	80073f4 <HAL_RCC_OscConfig+0x108>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d157      	bne.n	80073f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e242      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007350:	d106      	bne.n	8007360 <HAL_RCC_OscConfig+0x74>
 8007352:	4b76      	ldr	r3, [pc, #472]	; (800752c <HAL_RCC_OscConfig+0x240>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a75      	ldr	r2, [pc, #468]	; (800752c <HAL_RCC_OscConfig+0x240>)
 8007358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	e01d      	b.n	800739c <HAL_RCC_OscConfig+0xb0>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007368:	d10c      	bne.n	8007384 <HAL_RCC_OscConfig+0x98>
 800736a:	4b70      	ldr	r3, [pc, #448]	; (800752c <HAL_RCC_OscConfig+0x240>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a6f      	ldr	r2, [pc, #444]	; (800752c <HAL_RCC_OscConfig+0x240>)
 8007370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	4b6d      	ldr	r3, [pc, #436]	; (800752c <HAL_RCC_OscConfig+0x240>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a6c      	ldr	r2, [pc, #432]	; (800752c <HAL_RCC_OscConfig+0x240>)
 800737c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	e00b      	b.n	800739c <HAL_RCC_OscConfig+0xb0>
 8007384:	4b69      	ldr	r3, [pc, #420]	; (800752c <HAL_RCC_OscConfig+0x240>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a68      	ldr	r2, [pc, #416]	; (800752c <HAL_RCC_OscConfig+0x240>)
 800738a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	4b66      	ldr	r3, [pc, #408]	; (800752c <HAL_RCC_OscConfig+0x240>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a65      	ldr	r2, [pc, #404]	; (800752c <HAL_RCC_OscConfig+0x240>)
 8007396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800739a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d013      	beq.n	80073cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a4:	f7fd f8f4 	bl	8004590 <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073aa:	e008      	b.n	80073be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073ac:	f7fd f8f0 	bl	8004590 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b64      	cmp	r3, #100	; 0x64
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e207      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073be:	4b5b      	ldr	r3, [pc, #364]	; (800752c <HAL_RCC_OscConfig+0x240>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f0      	beq.n	80073ac <HAL_RCC_OscConfig+0xc0>
 80073ca:	e014      	b.n	80073f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073cc:	f7fd f8e0 	bl	8004590 <HAL_GetTick>
 80073d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073d4:	f7fd f8dc 	bl	8004590 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b64      	cmp	r3, #100	; 0x64
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e1f3      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073e6:	4b51      	ldr	r3, [pc, #324]	; (800752c <HAL_RCC_OscConfig+0x240>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1f0      	bne.n	80073d4 <HAL_RCC_OscConfig+0xe8>
 80073f2:	e000      	b.n	80073f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d063      	beq.n	80074ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007402:	4b4a      	ldr	r3, [pc, #296]	; (800752c <HAL_RCC_OscConfig+0x240>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f003 030c 	and.w	r3, r3, #12
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00b      	beq.n	8007426 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800740e:	4b47      	ldr	r3, [pc, #284]	; (800752c <HAL_RCC_OscConfig+0x240>)
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007416:	2b08      	cmp	r3, #8
 8007418:	d11c      	bne.n	8007454 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800741a:	4b44      	ldr	r3, [pc, #272]	; (800752c <HAL_RCC_OscConfig+0x240>)
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d116      	bne.n	8007454 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007426:	4b41      	ldr	r3, [pc, #260]	; (800752c <HAL_RCC_OscConfig+0x240>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d005      	beq.n	800743e <HAL_RCC_OscConfig+0x152>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d001      	beq.n	800743e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e1c7      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800743e:	4b3b      	ldr	r3, [pc, #236]	; (800752c <HAL_RCC_OscConfig+0x240>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	4937      	ldr	r1, [pc, #220]	; (800752c <HAL_RCC_OscConfig+0x240>)
 800744e:	4313      	orrs	r3, r2
 8007450:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007452:	e03a      	b.n	80074ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d020      	beq.n	800749e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800745c:	4b34      	ldr	r3, [pc, #208]	; (8007530 <HAL_RCC_OscConfig+0x244>)
 800745e:	2201      	movs	r2, #1
 8007460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007462:	f7fd f895 	bl	8004590 <HAL_GetTick>
 8007466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007468:	e008      	b.n	800747c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800746a:	f7fd f891 	bl	8004590 <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	2b02      	cmp	r3, #2
 8007476:	d901      	bls.n	800747c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e1a8      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800747c:	4b2b      	ldr	r3, [pc, #172]	; (800752c <HAL_RCC_OscConfig+0x240>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0f0      	beq.n	800746a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007488:	4b28      	ldr	r3, [pc, #160]	; (800752c <HAL_RCC_OscConfig+0x240>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	4925      	ldr	r1, [pc, #148]	; (800752c <HAL_RCC_OscConfig+0x240>)
 8007498:	4313      	orrs	r3, r2
 800749a:	600b      	str	r3, [r1, #0]
 800749c:	e015      	b.n	80074ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800749e:	4b24      	ldr	r3, [pc, #144]	; (8007530 <HAL_RCC_OscConfig+0x244>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a4:	f7fd f874 	bl	8004590 <HAL_GetTick>
 80074a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074ac:	f7fd f870 	bl	8004590 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e187      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074be:	4b1b      	ldr	r3, [pc, #108]	; (800752c <HAL_RCC_OscConfig+0x240>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1f0      	bne.n	80074ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0308 	and.w	r3, r3, #8
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d036      	beq.n	8007544 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d016      	beq.n	800750c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074de:	4b15      	ldr	r3, [pc, #84]	; (8007534 <HAL_RCC_OscConfig+0x248>)
 80074e0:	2201      	movs	r2, #1
 80074e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e4:	f7fd f854 	bl	8004590 <HAL_GetTick>
 80074e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074ea:	e008      	b.n	80074fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074ec:	f7fd f850 	bl	8004590 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d901      	bls.n	80074fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e167      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074fe:	4b0b      	ldr	r3, [pc, #44]	; (800752c <HAL_RCC_OscConfig+0x240>)
 8007500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0f0      	beq.n	80074ec <HAL_RCC_OscConfig+0x200>
 800750a:	e01b      	b.n	8007544 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800750c:	4b09      	ldr	r3, [pc, #36]	; (8007534 <HAL_RCC_OscConfig+0x248>)
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007512:	f7fd f83d 	bl	8004590 <HAL_GetTick>
 8007516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007518:	e00e      	b.n	8007538 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800751a:	f7fd f839 	bl	8004590 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d907      	bls.n	8007538 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e150      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
 800752c:	40023800 	.word	0x40023800
 8007530:	42470000 	.word	0x42470000
 8007534:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007538:	4b88      	ldr	r3, [pc, #544]	; (800775c <HAL_RCC_OscConfig+0x470>)
 800753a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1ea      	bne.n	800751a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 8097 	beq.w	8007680 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007552:	2300      	movs	r3, #0
 8007554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007556:	4b81      	ldr	r3, [pc, #516]	; (800775c <HAL_RCC_OscConfig+0x470>)
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10f      	bne.n	8007582 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007562:	2300      	movs	r3, #0
 8007564:	60bb      	str	r3, [r7, #8]
 8007566:	4b7d      	ldr	r3, [pc, #500]	; (800775c <HAL_RCC_OscConfig+0x470>)
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	4a7c      	ldr	r2, [pc, #496]	; (800775c <HAL_RCC_OscConfig+0x470>)
 800756c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007570:	6413      	str	r3, [r2, #64]	; 0x40
 8007572:	4b7a      	ldr	r3, [pc, #488]	; (800775c <HAL_RCC_OscConfig+0x470>)
 8007574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800757a:	60bb      	str	r3, [r7, #8]
 800757c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800757e:	2301      	movs	r3, #1
 8007580:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007582:	4b77      	ldr	r3, [pc, #476]	; (8007760 <HAL_RCC_OscConfig+0x474>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758a:	2b00      	cmp	r3, #0
 800758c:	d118      	bne.n	80075c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800758e:	4b74      	ldr	r3, [pc, #464]	; (8007760 <HAL_RCC_OscConfig+0x474>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a73      	ldr	r2, [pc, #460]	; (8007760 <HAL_RCC_OscConfig+0x474>)
 8007594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800759a:	f7fc fff9 	bl	8004590 <HAL_GetTick>
 800759e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075a0:	e008      	b.n	80075b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075a2:	f7fc fff5 	bl	8004590 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e10c      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075b4:	4b6a      	ldr	r3, [pc, #424]	; (8007760 <HAL_RCC_OscConfig+0x474>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d0f0      	beq.n	80075a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d106      	bne.n	80075d6 <HAL_RCC_OscConfig+0x2ea>
 80075c8:	4b64      	ldr	r3, [pc, #400]	; (800775c <HAL_RCC_OscConfig+0x470>)
 80075ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075cc:	4a63      	ldr	r2, [pc, #396]	; (800775c <HAL_RCC_OscConfig+0x470>)
 80075ce:	f043 0301 	orr.w	r3, r3, #1
 80075d2:	6713      	str	r3, [r2, #112]	; 0x70
 80075d4:	e01c      	b.n	8007610 <HAL_RCC_OscConfig+0x324>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	2b05      	cmp	r3, #5
 80075dc:	d10c      	bne.n	80075f8 <HAL_RCC_OscConfig+0x30c>
 80075de:	4b5f      	ldr	r3, [pc, #380]	; (800775c <HAL_RCC_OscConfig+0x470>)
 80075e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e2:	4a5e      	ldr	r2, [pc, #376]	; (800775c <HAL_RCC_OscConfig+0x470>)
 80075e4:	f043 0304 	orr.w	r3, r3, #4
 80075e8:	6713      	str	r3, [r2, #112]	; 0x70
 80075ea:	4b5c      	ldr	r3, [pc, #368]	; (800775c <HAL_RCC_OscConfig+0x470>)
 80075ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ee:	4a5b      	ldr	r2, [pc, #364]	; (800775c <HAL_RCC_OscConfig+0x470>)
 80075f0:	f043 0301 	orr.w	r3, r3, #1
 80075f4:	6713      	str	r3, [r2, #112]	; 0x70
 80075f6:	e00b      	b.n	8007610 <HAL_RCC_OscConfig+0x324>
 80075f8:	4b58      	ldr	r3, [pc, #352]	; (800775c <HAL_RCC_OscConfig+0x470>)
 80075fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fc:	4a57      	ldr	r2, [pc, #348]	; (800775c <HAL_RCC_OscConfig+0x470>)
 80075fe:	f023 0301 	bic.w	r3, r3, #1
 8007602:	6713      	str	r3, [r2, #112]	; 0x70
 8007604:	4b55      	ldr	r3, [pc, #340]	; (800775c <HAL_RCC_OscConfig+0x470>)
 8007606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007608:	4a54      	ldr	r2, [pc, #336]	; (800775c <HAL_RCC_OscConfig+0x470>)
 800760a:	f023 0304 	bic.w	r3, r3, #4
 800760e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d015      	beq.n	8007644 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007618:	f7fc ffba 	bl	8004590 <HAL_GetTick>
 800761c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800761e:	e00a      	b.n	8007636 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007620:	f7fc ffb6 	bl	8004590 <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	f241 3288 	movw	r2, #5000	; 0x1388
 800762e:	4293      	cmp	r3, r2
 8007630:	d901      	bls.n	8007636 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e0cb      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007636:	4b49      	ldr	r3, [pc, #292]	; (800775c <HAL_RCC_OscConfig+0x470>)
 8007638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0ee      	beq.n	8007620 <HAL_RCC_OscConfig+0x334>
 8007642:	e014      	b.n	800766e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007644:	f7fc ffa4 	bl	8004590 <HAL_GetTick>
 8007648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800764a:	e00a      	b.n	8007662 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800764c:	f7fc ffa0 	bl	8004590 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	f241 3288 	movw	r2, #5000	; 0x1388
 800765a:	4293      	cmp	r3, r2
 800765c:	d901      	bls.n	8007662 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e0b5      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007662:	4b3e      	ldr	r3, [pc, #248]	; (800775c <HAL_RCC_OscConfig+0x470>)
 8007664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1ee      	bne.n	800764c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800766e:	7dfb      	ldrb	r3, [r7, #23]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d105      	bne.n	8007680 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007674:	4b39      	ldr	r3, [pc, #228]	; (800775c <HAL_RCC_OscConfig+0x470>)
 8007676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007678:	4a38      	ldr	r2, [pc, #224]	; (800775c <HAL_RCC_OscConfig+0x470>)
 800767a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800767e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 80a1 	beq.w	80077cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800768a:	4b34      	ldr	r3, [pc, #208]	; (800775c <HAL_RCC_OscConfig+0x470>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f003 030c 	and.w	r3, r3, #12
 8007692:	2b08      	cmp	r3, #8
 8007694:	d05c      	beq.n	8007750 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	2b02      	cmp	r3, #2
 800769c:	d141      	bne.n	8007722 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800769e:	4b31      	ldr	r3, [pc, #196]	; (8007764 <HAL_RCC_OscConfig+0x478>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076a4:	f7fc ff74 	bl	8004590 <HAL_GetTick>
 80076a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076aa:	e008      	b.n	80076be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076ac:	f7fc ff70 	bl	8004590 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e087      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076be:	4b27      	ldr	r3, [pc, #156]	; (800775c <HAL_RCC_OscConfig+0x470>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1f0      	bne.n	80076ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	69da      	ldr	r2, [r3, #28]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	019b      	lsls	r3, r3, #6
 80076da:	431a      	orrs	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e0:	085b      	lsrs	r3, r3, #1
 80076e2:	3b01      	subs	r3, #1
 80076e4:	041b      	lsls	r3, r3, #16
 80076e6:	431a      	orrs	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	061b      	lsls	r3, r3, #24
 80076ee:	491b      	ldr	r1, [pc, #108]	; (800775c <HAL_RCC_OscConfig+0x470>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076f4:	4b1b      	ldr	r3, [pc, #108]	; (8007764 <HAL_RCC_OscConfig+0x478>)
 80076f6:	2201      	movs	r2, #1
 80076f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076fa:	f7fc ff49 	bl	8004590 <HAL_GetTick>
 80076fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007700:	e008      	b.n	8007714 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007702:	f7fc ff45 	bl	8004590 <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	2b02      	cmp	r3, #2
 800770e:	d901      	bls.n	8007714 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e05c      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007714:	4b11      	ldr	r3, [pc, #68]	; (800775c <HAL_RCC_OscConfig+0x470>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d0f0      	beq.n	8007702 <HAL_RCC_OscConfig+0x416>
 8007720:	e054      	b.n	80077cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007722:	4b10      	ldr	r3, [pc, #64]	; (8007764 <HAL_RCC_OscConfig+0x478>)
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007728:	f7fc ff32 	bl	8004590 <HAL_GetTick>
 800772c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800772e:	e008      	b.n	8007742 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007730:	f7fc ff2e 	bl	8004590 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b02      	cmp	r3, #2
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e045      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007742:	4b06      	ldr	r3, [pc, #24]	; (800775c <HAL_RCC_OscConfig+0x470>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1f0      	bne.n	8007730 <HAL_RCC_OscConfig+0x444>
 800774e:	e03d      	b.n	80077cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d107      	bne.n	8007768 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e038      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
 800775c:	40023800 	.word	0x40023800
 8007760:	40007000 	.word	0x40007000
 8007764:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007768:	4b1b      	ldr	r3, [pc, #108]	; (80077d8 <HAL_RCC_OscConfig+0x4ec>)
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d028      	beq.n	80077c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007780:	429a      	cmp	r2, r3
 8007782:	d121      	bne.n	80077c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800778e:	429a      	cmp	r2, r3
 8007790:	d11a      	bne.n	80077c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007798:	4013      	ands	r3, r2
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800779e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d111      	bne.n	80077c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ae:	085b      	lsrs	r3, r3, #1
 80077b0:	3b01      	subs	r3, #1
 80077b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d107      	bne.n	80077c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d001      	beq.n	80077cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e000      	b.n	80077ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	40023800 	.word	0x40023800

080077dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e0cc      	b.n	800798a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077f0:	4b68      	ldr	r3, [pc, #416]	; (8007994 <HAL_RCC_ClockConfig+0x1b8>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0307 	and.w	r3, r3, #7
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d90c      	bls.n	8007818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077fe:	4b65      	ldr	r3, [pc, #404]	; (8007994 <HAL_RCC_ClockConfig+0x1b8>)
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	b2d2      	uxtb	r2, r2
 8007804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007806:	4b63      	ldr	r3, [pc, #396]	; (8007994 <HAL_RCC_ClockConfig+0x1b8>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0307 	and.w	r3, r3, #7
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d001      	beq.n	8007818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e0b8      	b.n	800798a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d020      	beq.n	8007866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007830:	4b59      	ldr	r3, [pc, #356]	; (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	4a58      	ldr	r2, [pc, #352]	; (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 8007836:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800783a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0308 	and.w	r3, r3, #8
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007848:	4b53      	ldr	r3, [pc, #332]	; (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	4a52      	ldr	r2, [pc, #328]	; (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 800784e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007854:	4b50      	ldr	r3, [pc, #320]	; (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	494d      	ldr	r1, [pc, #308]	; (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 8007862:	4313      	orrs	r3, r2
 8007864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d044      	beq.n	80078fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d107      	bne.n	800788a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800787a:	4b47      	ldr	r3, [pc, #284]	; (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d119      	bne.n	80078ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e07f      	b.n	800798a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2b02      	cmp	r3, #2
 8007890:	d003      	beq.n	800789a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007896:	2b03      	cmp	r3, #3
 8007898:	d107      	bne.n	80078aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800789a:	4b3f      	ldr	r3, [pc, #252]	; (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d109      	bne.n	80078ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e06f      	b.n	800798a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078aa:	4b3b      	ldr	r3, [pc, #236]	; (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e067      	b.n	800798a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078ba:	4b37      	ldr	r3, [pc, #220]	; (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f023 0203 	bic.w	r2, r3, #3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	4934      	ldr	r1, [pc, #208]	; (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078cc:	f7fc fe60 	bl	8004590 <HAL_GetTick>
 80078d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078d2:	e00a      	b.n	80078ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078d4:	f7fc fe5c 	bl	8004590 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d901      	bls.n	80078ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e04f      	b.n	800798a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ea:	4b2b      	ldr	r3, [pc, #172]	; (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 020c 	and.w	r2, r3, #12
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d1eb      	bne.n	80078d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078fc:	4b25      	ldr	r3, [pc, #148]	; (8007994 <HAL_RCC_ClockConfig+0x1b8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0307 	and.w	r3, r3, #7
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d20c      	bcs.n	8007924 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800790a:	4b22      	ldr	r3, [pc, #136]	; (8007994 <HAL_RCC_ClockConfig+0x1b8>)
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	b2d2      	uxtb	r2, r2
 8007910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007912:	4b20      	ldr	r3, [pc, #128]	; (8007994 <HAL_RCC_ClockConfig+0x1b8>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	429a      	cmp	r2, r3
 800791e:	d001      	beq.n	8007924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e032      	b.n	800798a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0304 	and.w	r3, r3, #4
 800792c:	2b00      	cmp	r3, #0
 800792e:	d008      	beq.n	8007942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007930:	4b19      	ldr	r3, [pc, #100]	; (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	4916      	ldr	r1, [pc, #88]	; (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 800793e:	4313      	orrs	r3, r2
 8007940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	2b00      	cmp	r3, #0
 800794c:	d009      	beq.n	8007962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800794e:	4b12      	ldr	r3, [pc, #72]	; (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	490e      	ldr	r1, [pc, #56]	; (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 800795e:	4313      	orrs	r3, r2
 8007960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007962:	f000 f821 	bl	80079a8 <HAL_RCC_GetSysClockFreq>
 8007966:	4602      	mov	r2, r0
 8007968:	4b0b      	ldr	r3, [pc, #44]	; (8007998 <HAL_RCC_ClockConfig+0x1bc>)
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	091b      	lsrs	r3, r3, #4
 800796e:	f003 030f 	and.w	r3, r3, #15
 8007972:	490a      	ldr	r1, [pc, #40]	; (800799c <HAL_RCC_ClockConfig+0x1c0>)
 8007974:	5ccb      	ldrb	r3, [r1, r3]
 8007976:	fa22 f303 	lsr.w	r3, r2, r3
 800797a:	4a09      	ldr	r2, [pc, #36]	; (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 800797c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800797e:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f7fc fdc0 	bl	8004508 <HAL_InitTick>

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	40023c00 	.word	0x40023c00
 8007998:	40023800 	.word	0x40023800
 800799c:	0800a96c 	.word	0x0800a96c
 80079a0:	20000430 	.word	0x20000430
 80079a4:	20000434 	.word	0x20000434

080079a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079ac:	b094      	sub	sp, #80	; 0x50
 80079ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	647b      	str	r3, [r7, #68]	; 0x44
 80079b4:	2300      	movs	r3, #0
 80079b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079b8:	2300      	movs	r3, #0
 80079ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079c0:	4b79      	ldr	r3, [pc, #484]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f003 030c 	and.w	r3, r3, #12
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d00d      	beq.n	80079e8 <HAL_RCC_GetSysClockFreq+0x40>
 80079cc:	2b08      	cmp	r3, #8
 80079ce:	f200 80e1 	bhi.w	8007b94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <HAL_RCC_GetSysClockFreq+0x34>
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d003      	beq.n	80079e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80079da:	e0db      	b.n	8007b94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079dc:	4b73      	ldr	r3, [pc, #460]	; (8007bac <HAL_RCC_GetSysClockFreq+0x204>)
 80079de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80079e0:	e0db      	b.n	8007b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079e2:	4b73      	ldr	r3, [pc, #460]	; (8007bb0 <HAL_RCC_GetSysClockFreq+0x208>)
 80079e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80079e6:	e0d8      	b.n	8007b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079e8:	4b6f      	ldr	r3, [pc, #444]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079f2:	4b6d      	ldr	r3, [pc, #436]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d063      	beq.n	8007ac6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079fe:	4b6a      	ldr	r3, [pc, #424]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	099b      	lsrs	r3, r3, #6
 8007a04:	2200      	movs	r2, #0
 8007a06:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a10:	633b      	str	r3, [r7, #48]	; 0x30
 8007a12:	2300      	movs	r3, #0
 8007a14:	637b      	str	r3, [r7, #52]	; 0x34
 8007a16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007a1a:	4622      	mov	r2, r4
 8007a1c:	462b      	mov	r3, r5
 8007a1e:	f04f 0000 	mov.w	r0, #0
 8007a22:	f04f 0100 	mov.w	r1, #0
 8007a26:	0159      	lsls	r1, r3, #5
 8007a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a2c:	0150      	lsls	r0, r2, #5
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	4621      	mov	r1, r4
 8007a34:	1a51      	subs	r1, r2, r1
 8007a36:	6139      	str	r1, [r7, #16]
 8007a38:	4629      	mov	r1, r5
 8007a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8007a3e:	617b      	str	r3, [r7, #20]
 8007a40:	f04f 0200 	mov.w	r2, #0
 8007a44:	f04f 0300 	mov.w	r3, #0
 8007a48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a4c:	4659      	mov	r1, fp
 8007a4e:	018b      	lsls	r3, r1, #6
 8007a50:	4651      	mov	r1, sl
 8007a52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a56:	4651      	mov	r1, sl
 8007a58:	018a      	lsls	r2, r1, #6
 8007a5a:	4651      	mov	r1, sl
 8007a5c:	ebb2 0801 	subs.w	r8, r2, r1
 8007a60:	4659      	mov	r1, fp
 8007a62:	eb63 0901 	sbc.w	r9, r3, r1
 8007a66:	f04f 0200 	mov.w	r2, #0
 8007a6a:	f04f 0300 	mov.w	r3, #0
 8007a6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a7a:	4690      	mov	r8, r2
 8007a7c:	4699      	mov	r9, r3
 8007a7e:	4623      	mov	r3, r4
 8007a80:	eb18 0303 	adds.w	r3, r8, r3
 8007a84:	60bb      	str	r3, [r7, #8]
 8007a86:	462b      	mov	r3, r5
 8007a88:	eb49 0303 	adc.w	r3, r9, r3
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	f04f 0200 	mov.w	r2, #0
 8007a92:	f04f 0300 	mov.w	r3, #0
 8007a96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	024b      	lsls	r3, r1, #9
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	024a      	lsls	r2, r1, #9
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aae:	2200      	movs	r2, #0
 8007ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ab2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ab4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ab8:	f7f8 ffcc 	bl	8000a54 <__aeabi_uldivmod>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ac4:	e058      	b.n	8007b78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ac6:	4b38      	ldr	r3, [pc, #224]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	099b      	lsrs	r3, r3, #6
 8007acc:	2200      	movs	r2, #0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ad6:	623b      	str	r3, [r7, #32]
 8007ad8:	2300      	movs	r3, #0
 8007ada:	627b      	str	r3, [r7, #36]	; 0x24
 8007adc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ae0:	4642      	mov	r2, r8
 8007ae2:	464b      	mov	r3, r9
 8007ae4:	f04f 0000 	mov.w	r0, #0
 8007ae8:	f04f 0100 	mov.w	r1, #0
 8007aec:	0159      	lsls	r1, r3, #5
 8007aee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007af2:	0150      	lsls	r0, r2, #5
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	4641      	mov	r1, r8
 8007afa:	ebb2 0a01 	subs.w	sl, r2, r1
 8007afe:	4649      	mov	r1, r9
 8007b00:	eb63 0b01 	sbc.w	fp, r3, r1
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007b10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007b14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007b18:	ebb2 040a 	subs.w	r4, r2, sl
 8007b1c:	eb63 050b 	sbc.w	r5, r3, fp
 8007b20:	f04f 0200 	mov.w	r2, #0
 8007b24:	f04f 0300 	mov.w	r3, #0
 8007b28:	00eb      	lsls	r3, r5, #3
 8007b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b2e:	00e2      	lsls	r2, r4, #3
 8007b30:	4614      	mov	r4, r2
 8007b32:	461d      	mov	r5, r3
 8007b34:	4643      	mov	r3, r8
 8007b36:	18e3      	adds	r3, r4, r3
 8007b38:	603b      	str	r3, [r7, #0]
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	eb45 0303 	adc.w	r3, r5, r3
 8007b40:	607b      	str	r3, [r7, #4]
 8007b42:	f04f 0200 	mov.w	r2, #0
 8007b46:	f04f 0300 	mov.w	r3, #0
 8007b4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b4e:	4629      	mov	r1, r5
 8007b50:	028b      	lsls	r3, r1, #10
 8007b52:	4621      	mov	r1, r4
 8007b54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b58:	4621      	mov	r1, r4
 8007b5a:	028a      	lsls	r2, r1, #10
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b62:	2200      	movs	r2, #0
 8007b64:	61bb      	str	r3, [r7, #24]
 8007b66:	61fa      	str	r2, [r7, #28]
 8007b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b6c:	f7f8 ff72 	bl	8000a54 <__aeabi_uldivmod>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4613      	mov	r3, r2
 8007b76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b78:	4b0b      	ldr	r3, [pc, #44]	; (8007ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	0c1b      	lsrs	r3, r3, #16
 8007b7e:	f003 0303 	and.w	r3, r3, #3
 8007b82:	3301      	adds	r3, #1
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007b88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b92:	e002      	b.n	8007b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b94:	4b05      	ldr	r3, [pc, #20]	; (8007bac <HAL_RCC_GetSysClockFreq+0x204>)
 8007b96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3750      	adds	r7, #80	; 0x50
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ba6:	bf00      	nop
 8007ba8:	40023800 	.word	0x40023800
 8007bac:	00f42400 	.word	0x00f42400
 8007bb0:	007a1200 	.word	0x007a1200

08007bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007bb8:	4b03      	ldr	r3, [pc, #12]	; (8007bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007bba:	681b      	ldr	r3, [r3, #0]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	20000430 	.word	0x20000430

08007bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007bd0:	f7ff fff0 	bl	8007bb4 <HAL_RCC_GetHCLKFreq>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	4b05      	ldr	r3, [pc, #20]	; (8007bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	0a9b      	lsrs	r3, r3, #10
 8007bdc:	f003 0307 	and.w	r3, r3, #7
 8007be0:	4903      	ldr	r1, [pc, #12]	; (8007bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007be2:	5ccb      	ldrb	r3, [r1, r3]
 8007be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	40023800 	.word	0x40023800
 8007bf0:	0800a97c 	.word	0x0800a97c

08007bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007bf8:	f7ff ffdc 	bl	8007bb4 <HAL_RCC_GetHCLKFreq>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	4b05      	ldr	r3, [pc, #20]	; (8007c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	0b5b      	lsrs	r3, r3, #13
 8007c04:	f003 0307 	and.w	r3, r3, #7
 8007c08:	4903      	ldr	r1, [pc, #12]	; (8007c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c0a:	5ccb      	ldrb	r3, [r1, r3]
 8007c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	40023800 	.word	0x40023800
 8007c18:	0800a97c 	.word	0x0800a97c

08007c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e041      	b.n	8007cb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d106      	bne.n	8007c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7fc fa46 	bl	80040d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3304      	adds	r3, #4
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	f000 fdac 	bl	80087b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d001      	beq.n	8007cd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e044      	b.n	8007d5e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 0201 	orr.w	r2, r2, #1
 8007cea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a1e      	ldr	r2, [pc, #120]	; (8007d6c <HAL_TIM_Base_Start_IT+0xb0>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d018      	beq.n	8007d28 <HAL_TIM_Base_Start_IT+0x6c>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cfe:	d013      	beq.n	8007d28 <HAL_TIM_Base_Start_IT+0x6c>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a1a      	ldr	r2, [pc, #104]	; (8007d70 <HAL_TIM_Base_Start_IT+0xb4>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d00e      	beq.n	8007d28 <HAL_TIM_Base_Start_IT+0x6c>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a19      	ldr	r2, [pc, #100]	; (8007d74 <HAL_TIM_Base_Start_IT+0xb8>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d009      	beq.n	8007d28 <HAL_TIM_Base_Start_IT+0x6c>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a17      	ldr	r2, [pc, #92]	; (8007d78 <HAL_TIM_Base_Start_IT+0xbc>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d004      	beq.n	8007d28 <HAL_TIM_Base_Start_IT+0x6c>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a16      	ldr	r2, [pc, #88]	; (8007d7c <HAL_TIM_Base_Start_IT+0xc0>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d111      	bne.n	8007d4c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 0307 	and.w	r3, r3, #7
 8007d32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b06      	cmp	r3, #6
 8007d38:	d010      	beq.n	8007d5c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f042 0201 	orr.w	r2, r2, #1
 8007d48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d4a:	e007      	b.n	8007d5c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 0201 	orr.w	r2, r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	40010000 	.word	0x40010000
 8007d70:	40000400 	.word	0x40000400
 8007d74:	40000800 	.word	0x40000800
 8007d78:	40000c00 	.word	0x40000c00
 8007d7c:	40014000 	.word	0x40014000

08007d80 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68da      	ldr	r2, [r3, #12]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 0201 	bic.w	r2, r2, #1
 8007d96:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6a1a      	ldr	r2, [r3, #32]
 8007d9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007da2:	4013      	ands	r3, r2
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10f      	bne.n	8007dc8 <HAL_TIM_Base_Stop_IT+0x48>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6a1a      	ldr	r2, [r3, #32]
 8007dae:	f240 4344 	movw	r3, #1092	; 0x444
 8007db2:	4013      	ands	r3, r2
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d107      	bne.n	8007dc8 <HAL_TIM_Base_Stop_IT+0x48>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 0201 	bic.w	r2, r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e041      	b.n	8007e74 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d106      	bne.n	8007e0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7fc f8f7 	bl	8003ff8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3304      	adds	r3, #4
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	f000 fccb 	bl	80087b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d109      	bne.n	8007ea0 <HAL_TIM_PWM_Start+0x24>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	bf14      	ite	ne
 8007e98:	2301      	movne	r3, #1
 8007e9a:	2300      	moveq	r3, #0
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	e022      	b.n	8007ee6 <HAL_TIM_PWM_Start+0x6a>
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	d109      	bne.n	8007eba <HAL_TIM_PWM_Start+0x3e>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	bf14      	ite	ne
 8007eb2:	2301      	movne	r3, #1
 8007eb4:	2300      	moveq	r3, #0
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	e015      	b.n	8007ee6 <HAL_TIM_PWM_Start+0x6a>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b08      	cmp	r3, #8
 8007ebe:	d109      	bne.n	8007ed4 <HAL_TIM_PWM_Start+0x58>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	bf14      	ite	ne
 8007ecc:	2301      	movne	r3, #1
 8007ece:	2300      	moveq	r3, #0
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	e008      	b.n	8007ee6 <HAL_TIM_PWM_Start+0x6a>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	bf14      	ite	ne
 8007ee0:	2301      	movne	r3, #1
 8007ee2:	2300      	moveq	r3, #0
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e068      	b.n	8007fc0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d104      	bne.n	8007efe <HAL_TIM_PWM_Start+0x82>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007efc:	e013      	b.n	8007f26 <HAL_TIM_PWM_Start+0xaa>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b04      	cmp	r3, #4
 8007f02:	d104      	bne.n	8007f0e <HAL_TIM_PWM_Start+0x92>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2202      	movs	r2, #2
 8007f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f0c:	e00b      	b.n	8007f26 <HAL_TIM_PWM_Start+0xaa>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b08      	cmp	r3, #8
 8007f12:	d104      	bne.n	8007f1e <HAL_TIM_PWM_Start+0xa2>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f1c:	e003      	b.n	8007f26 <HAL_TIM_PWM_Start+0xaa>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2202      	movs	r2, #2
 8007f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 fee8 	bl	8008d04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a23      	ldr	r2, [pc, #140]	; (8007fc8 <HAL_TIM_PWM_Start+0x14c>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d107      	bne.n	8007f4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a1d      	ldr	r2, [pc, #116]	; (8007fc8 <HAL_TIM_PWM_Start+0x14c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d018      	beq.n	8007f8a <HAL_TIM_PWM_Start+0x10e>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f60:	d013      	beq.n	8007f8a <HAL_TIM_PWM_Start+0x10e>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a19      	ldr	r2, [pc, #100]	; (8007fcc <HAL_TIM_PWM_Start+0x150>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d00e      	beq.n	8007f8a <HAL_TIM_PWM_Start+0x10e>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a17      	ldr	r2, [pc, #92]	; (8007fd0 <HAL_TIM_PWM_Start+0x154>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d009      	beq.n	8007f8a <HAL_TIM_PWM_Start+0x10e>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a16      	ldr	r2, [pc, #88]	; (8007fd4 <HAL_TIM_PWM_Start+0x158>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d004      	beq.n	8007f8a <HAL_TIM_PWM_Start+0x10e>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a14      	ldr	r2, [pc, #80]	; (8007fd8 <HAL_TIM_PWM_Start+0x15c>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d111      	bne.n	8007fae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f003 0307 	and.w	r3, r3, #7
 8007f94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b06      	cmp	r3, #6
 8007f9a:	d010      	beq.n	8007fbe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f042 0201 	orr.w	r2, r2, #1
 8007faa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fac:	e007      	b.n	8007fbe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f042 0201 	orr.w	r2, r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	40010000 	.word	0x40010000
 8007fcc:	40000400 	.word	0x40000400
 8007fd0:	40000800 	.word	0x40000800
 8007fd4:	40000c00 	.word	0x40000c00
 8007fd8:	40014000 	.word	0x40014000

08007fdc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e097      	b.n	8008120 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d106      	bne.n	800800a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7fc f81f 	bl	8004048 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2202      	movs	r2, #2
 800800e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	6812      	ldr	r2, [r2, #0]
 800801c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008020:	f023 0307 	bic.w	r3, r3, #7
 8008024:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	3304      	adds	r3, #4
 800802e:	4619      	mov	r1, r3
 8008030:	4610      	mov	r0, r2
 8008032:	f000 fbc1 	bl	80087b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	6a1b      	ldr	r3, [r3, #32]
 800804c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	4313      	orrs	r3, r2
 8008056:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800805e:	f023 0303 	bic.w	r3, r3, #3
 8008062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	021b      	lsls	r3, r3, #8
 800806e:	4313      	orrs	r3, r2
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	4313      	orrs	r3, r2
 8008074:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800807c:	f023 030c 	bic.w	r3, r3, #12
 8008080:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008088:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800808c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	021b      	lsls	r3, r3, #8
 8008098:	4313      	orrs	r3, r2
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	4313      	orrs	r3, r2
 800809e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	011a      	lsls	r2, r3, #4
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	031b      	lsls	r3, r3, #12
 80080ac:	4313      	orrs	r3, r2
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80080ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80080c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	011b      	lsls	r3, r3, #4
 80080ce:	4313      	orrs	r3, r2
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008138:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008140:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008148:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008150:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d110      	bne.n	800817a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008158:	7bfb      	ldrb	r3, [r7, #15]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d102      	bne.n	8008164 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800815e:	7b7b      	ldrb	r3, [r7, #13]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d001      	beq.n	8008168 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e069      	b.n	800823c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2202      	movs	r2, #2
 800816c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2202      	movs	r2, #2
 8008174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008178:	e031      	b.n	80081de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	2b04      	cmp	r3, #4
 800817e:	d110      	bne.n	80081a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d102      	bne.n	800818c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008186:	7b3b      	ldrb	r3, [r7, #12]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d001      	beq.n	8008190 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e055      	b.n	800823c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2202      	movs	r2, #2
 8008194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2202      	movs	r2, #2
 800819c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081a0:	e01d      	b.n	80081de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081a2:	7bfb      	ldrb	r3, [r7, #15]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d108      	bne.n	80081ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d105      	bne.n	80081ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081ae:	7b7b      	ldrb	r3, [r7, #13]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d102      	bne.n	80081ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80081b4:	7b3b      	ldrb	r3, [r7, #12]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d001      	beq.n	80081be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e03e      	b.n	800823c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2202      	movs	r2, #2
 80081c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2202      	movs	r2, #2
 80081ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2202      	movs	r2, #2
 80081d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2202      	movs	r2, #2
 80081da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d003      	beq.n	80081ec <HAL_TIM_Encoder_Start+0xc4>
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b04      	cmp	r3, #4
 80081e8:	d008      	beq.n	80081fc <HAL_TIM_Encoder_Start+0xd4>
 80081ea:	e00f      	b.n	800820c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2201      	movs	r2, #1
 80081f2:	2100      	movs	r1, #0
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 fd85 	bl	8008d04 <TIM_CCxChannelCmd>
      break;
 80081fa:	e016      	b.n	800822a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2201      	movs	r2, #1
 8008202:	2104      	movs	r1, #4
 8008204:	4618      	mov	r0, r3
 8008206:	f000 fd7d 	bl	8008d04 <TIM_CCxChannelCmd>
      break;
 800820a:	e00e      	b.n	800822a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2201      	movs	r2, #1
 8008212:	2100      	movs	r1, #0
 8008214:	4618      	mov	r0, r3
 8008216:	f000 fd75 	bl	8008d04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2201      	movs	r2, #1
 8008220:	2104      	movs	r1, #4
 8008222:	4618      	mov	r0, r3
 8008224:	f000 fd6e 	bl	8008d04 <TIM_CCxChannelCmd>
      break;
 8008228:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f042 0201 	orr.w	r2, r2, #1
 8008238:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b02      	cmp	r3, #2
 8008258:	d122      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	2b02      	cmp	r3, #2
 8008266:	d11b      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f06f 0202 	mvn.w	r2, #2
 8008270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	f003 0303 	and.w	r3, r3, #3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fa77 	bl	800877a <HAL_TIM_IC_CaptureCallback>
 800828c:	e005      	b.n	800829a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fa69 	bl	8008766 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fa7a 	bl	800878e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	2b04      	cmp	r3, #4
 80082ac:	d122      	bne.n	80082f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d11b      	bne.n	80082f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f06f 0204 	mvn.w	r2, #4
 80082c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2202      	movs	r2, #2
 80082ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fa4d 	bl	800877a <HAL_TIM_IC_CaptureCallback>
 80082e0:	e005      	b.n	80082ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fa3f 	bl	8008766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fa50 	bl	800878e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	f003 0308 	and.w	r3, r3, #8
 80082fe:	2b08      	cmp	r3, #8
 8008300:	d122      	bne.n	8008348 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	f003 0308 	and.w	r3, r3, #8
 800830c:	2b08      	cmp	r3, #8
 800830e:	d11b      	bne.n	8008348 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f06f 0208 	mvn.w	r2, #8
 8008318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2204      	movs	r2, #4
 800831e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	f003 0303 	and.w	r3, r3, #3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fa23 	bl	800877a <HAL_TIM_IC_CaptureCallback>
 8008334:	e005      	b.n	8008342 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fa15 	bl	8008766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fa26 	bl	800878e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	f003 0310 	and.w	r3, r3, #16
 8008352:	2b10      	cmp	r3, #16
 8008354:	d122      	bne.n	800839c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	f003 0310 	and.w	r3, r3, #16
 8008360:	2b10      	cmp	r3, #16
 8008362:	d11b      	bne.n	800839c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f06f 0210 	mvn.w	r2, #16
 800836c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2208      	movs	r2, #8
 8008372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	69db      	ldr	r3, [r3, #28]
 800837a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f9f9 	bl	800877a <HAL_TIM_IC_CaptureCallback>
 8008388:	e005      	b.n	8008396 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f9eb 	bl	8008766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f9fc 	bl	800878e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d10e      	bne.n	80083c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d107      	bne.n	80083c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f06f 0201 	mvn.w	r2, #1
 80083c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f7fb fcce 	bl	8003d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d2:	2b80      	cmp	r3, #128	; 0x80
 80083d4:	d10e      	bne.n	80083f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e0:	2b80      	cmp	r3, #128	; 0x80
 80083e2:	d107      	bne.n	80083f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fd78 	bl	8008ee4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fe:	2b40      	cmp	r3, #64	; 0x40
 8008400:	d10e      	bne.n	8008420 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840c:	2b40      	cmp	r3, #64	; 0x40
 800840e:	d107      	bne.n	8008420 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f9c1 	bl	80087a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b20      	cmp	r3, #32
 800842c:	d10e      	bne.n	800844c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	f003 0320 	and.w	r3, r3, #32
 8008438:	2b20      	cmp	r3, #32
 800843a:	d107      	bne.n	800844c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f06f 0220 	mvn.w	r2, #32
 8008444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fd42 	bl	8008ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800846a:	2b01      	cmp	r3, #1
 800846c:	d101      	bne.n	8008472 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800846e:	2302      	movs	r3, #2
 8008470:	e0ae      	b.n	80085d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b0c      	cmp	r3, #12
 800847e:	f200 809f 	bhi.w	80085c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008482:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008488:	080084bd 	.word	0x080084bd
 800848c:	080085c1 	.word	0x080085c1
 8008490:	080085c1 	.word	0x080085c1
 8008494:	080085c1 	.word	0x080085c1
 8008498:	080084fd 	.word	0x080084fd
 800849c:	080085c1 	.word	0x080085c1
 80084a0:	080085c1 	.word	0x080085c1
 80084a4:	080085c1 	.word	0x080085c1
 80084a8:	0800853f 	.word	0x0800853f
 80084ac:	080085c1 	.word	0x080085c1
 80084b0:	080085c1 	.word	0x080085c1
 80084b4:	080085c1 	.word	0x080085c1
 80084b8:	0800857f 	.word	0x0800857f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68b9      	ldr	r1, [r7, #8]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 f9f8 	bl	80088b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	699a      	ldr	r2, [r3, #24]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f042 0208 	orr.w	r2, r2, #8
 80084d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	699a      	ldr	r2, [r3, #24]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 0204 	bic.w	r2, r2, #4
 80084e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6999      	ldr	r1, [r3, #24]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	691a      	ldr	r2, [r3, #16]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	430a      	orrs	r2, r1
 80084f8:	619a      	str	r2, [r3, #24]
      break;
 80084fa:	e064      	b.n	80085c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68b9      	ldr	r1, [r7, #8]
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fa3e 	bl	8008984 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	699a      	ldr	r2, [r3, #24]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	699a      	ldr	r2, [r3, #24]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6999      	ldr	r1, [r3, #24]
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	021a      	lsls	r2, r3, #8
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	619a      	str	r2, [r3, #24]
      break;
 800853c:	e043      	b.n	80085c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68b9      	ldr	r1, [r7, #8]
 8008544:	4618      	mov	r0, r3
 8008546:	f000 fa89 	bl	8008a5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69da      	ldr	r2, [r3, #28]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f042 0208 	orr.w	r2, r2, #8
 8008558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	69da      	ldr	r2, [r3, #28]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f022 0204 	bic.w	r2, r2, #4
 8008568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	69d9      	ldr	r1, [r3, #28]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	691a      	ldr	r2, [r3, #16]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	430a      	orrs	r2, r1
 800857a:	61da      	str	r2, [r3, #28]
      break;
 800857c:	e023      	b.n	80085c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	4618      	mov	r0, r3
 8008586:	f000 fad3 	bl	8008b30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	69da      	ldr	r2, [r3, #28]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69da      	ldr	r2, [r3, #28]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	69d9      	ldr	r1, [r3, #28]
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	021a      	lsls	r2, r3, #8
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	430a      	orrs	r2, r1
 80085bc:	61da      	str	r2, [r3, #28]
      break;
 80085be:	e002      	b.n	80085c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	75fb      	strb	r3, [r7, #23]
      break;
 80085c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d101      	bne.n	80085f4 <HAL_TIM_ConfigClockSource+0x1c>
 80085f0:	2302      	movs	r3, #2
 80085f2:	e0b4      	b.n	800875e <HAL_TIM_ConfigClockSource+0x186>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800861a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800862c:	d03e      	beq.n	80086ac <HAL_TIM_ConfigClockSource+0xd4>
 800862e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008632:	f200 8087 	bhi.w	8008744 <HAL_TIM_ConfigClockSource+0x16c>
 8008636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800863a:	f000 8086 	beq.w	800874a <HAL_TIM_ConfigClockSource+0x172>
 800863e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008642:	d87f      	bhi.n	8008744 <HAL_TIM_ConfigClockSource+0x16c>
 8008644:	2b70      	cmp	r3, #112	; 0x70
 8008646:	d01a      	beq.n	800867e <HAL_TIM_ConfigClockSource+0xa6>
 8008648:	2b70      	cmp	r3, #112	; 0x70
 800864a:	d87b      	bhi.n	8008744 <HAL_TIM_ConfigClockSource+0x16c>
 800864c:	2b60      	cmp	r3, #96	; 0x60
 800864e:	d050      	beq.n	80086f2 <HAL_TIM_ConfigClockSource+0x11a>
 8008650:	2b60      	cmp	r3, #96	; 0x60
 8008652:	d877      	bhi.n	8008744 <HAL_TIM_ConfigClockSource+0x16c>
 8008654:	2b50      	cmp	r3, #80	; 0x50
 8008656:	d03c      	beq.n	80086d2 <HAL_TIM_ConfigClockSource+0xfa>
 8008658:	2b50      	cmp	r3, #80	; 0x50
 800865a:	d873      	bhi.n	8008744 <HAL_TIM_ConfigClockSource+0x16c>
 800865c:	2b40      	cmp	r3, #64	; 0x40
 800865e:	d058      	beq.n	8008712 <HAL_TIM_ConfigClockSource+0x13a>
 8008660:	2b40      	cmp	r3, #64	; 0x40
 8008662:	d86f      	bhi.n	8008744 <HAL_TIM_ConfigClockSource+0x16c>
 8008664:	2b30      	cmp	r3, #48	; 0x30
 8008666:	d064      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x15a>
 8008668:	2b30      	cmp	r3, #48	; 0x30
 800866a:	d86b      	bhi.n	8008744 <HAL_TIM_ConfigClockSource+0x16c>
 800866c:	2b20      	cmp	r3, #32
 800866e:	d060      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x15a>
 8008670:	2b20      	cmp	r3, #32
 8008672:	d867      	bhi.n	8008744 <HAL_TIM_ConfigClockSource+0x16c>
 8008674:	2b00      	cmp	r3, #0
 8008676:	d05c      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x15a>
 8008678:	2b10      	cmp	r3, #16
 800867a:	d05a      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x15a>
 800867c:	e062      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6818      	ldr	r0, [r3, #0]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	6899      	ldr	r1, [r3, #8]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	685a      	ldr	r2, [r3, #4]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f000 fb19 	bl	8008cc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80086a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	609a      	str	r2, [r3, #8]
      break;
 80086aa:	e04f      	b.n	800874c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6818      	ldr	r0, [r3, #0]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	6899      	ldr	r1, [r3, #8]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685a      	ldr	r2, [r3, #4]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f000 fb02 	bl	8008cc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	689a      	ldr	r2, [r3, #8]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086ce:	609a      	str	r2, [r3, #8]
      break;
 80086d0:	e03c      	b.n	800874c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	6859      	ldr	r1, [r3, #4]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	461a      	mov	r2, r3
 80086e0:	f000 fa76 	bl	8008bd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2150      	movs	r1, #80	; 0x50
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 facf 	bl	8008c8e <TIM_ITRx_SetConfig>
      break;
 80086f0:	e02c      	b.n	800874c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6818      	ldr	r0, [r3, #0]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	6859      	ldr	r1, [r3, #4]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	461a      	mov	r2, r3
 8008700:	f000 fa95 	bl	8008c2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2160      	movs	r1, #96	; 0x60
 800870a:	4618      	mov	r0, r3
 800870c:	f000 fabf 	bl	8008c8e <TIM_ITRx_SetConfig>
      break;
 8008710:	e01c      	b.n	800874c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6818      	ldr	r0, [r3, #0]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	6859      	ldr	r1, [r3, #4]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	461a      	mov	r2, r3
 8008720:	f000 fa56 	bl	8008bd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2140      	movs	r1, #64	; 0x40
 800872a:	4618      	mov	r0, r3
 800872c:	f000 faaf 	bl	8008c8e <TIM_ITRx_SetConfig>
      break;
 8008730:	e00c      	b.n	800874c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4619      	mov	r1, r3
 800873c:	4610      	mov	r0, r2
 800873e:	f000 faa6 	bl	8008c8e <TIM_ITRx_SetConfig>
      break;
 8008742:	e003      	b.n	800874c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	73fb      	strb	r3, [r7, #15]
      break;
 8008748:	e000      	b.n	800874c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800874a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800875c:	7bfb      	ldrb	r3, [r7, #15]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008766:	b480      	push	{r7}
 8008768:	b083      	sub	sp, #12
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800876e:	bf00      	nop
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008782:	bf00      	nop
 8008784:	370c      	adds	r7, #12
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr

0800878e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800878e:	b480      	push	{r7}
 8008790:	b083      	sub	sp, #12
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008796:	bf00      	nop
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr

080087a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087a2:	b480      	push	{r7}
 80087a4:	b083      	sub	sp, #12
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087aa:	bf00      	nop
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
	...

080087b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a34      	ldr	r2, [pc, #208]	; (800889c <TIM_Base_SetConfig+0xe4>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d00f      	beq.n	80087f0 <TIM_Base_SetConfig+0x38>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d6:	d00b      	beq.n	80087f0 <TIM_Base_SetConfig+0x38>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a31      	ldr	r2, [pc, #196]	; (80088a0 <TIM_Base_SetConfig+0xe8>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d007      	beq.n	80087f0 <TIM_Base_SetConfig+0x38>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a30      	ldr	r2, [pc, #192]	; (80088a4 <TIM_Base_SetConfig+0xec>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d003      	beq.n	80087f0 <TIM_Base_SetConfig+0x38>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a2f      	ldr	r2, [pc, #188]	; (80088a8 <TIM_Base_SetConfig+0xf0>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d108      	bne.n	8008802 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	4313      	orrs	r3, r2
 8008800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a25      	ldr	r2, [pc, #148]	; (800889c <TIM_Base_SetConfig+0xe4>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d01b      	beq.n	8008842 <TIM_Base_SetConfig+0x8a>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008810:	d017      	beq.n	8008842 <TIM_Base_SetConfig+0x8a>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a22      	ldr	r2, [pc, #136]	; (80088a0 <TIM_Base_SetConfig+0xe8>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d013      	beq.n	8008842 <TIM_Base_SetConfig+0x8a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a21      	ldr	r2, [pc, #132]	; (80088a4 <TIM_Base_SetConfig+0xec>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00f      	beq.n	8008842 <TIM_Base_SetConfig+0x8a>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a20      	ldr	r2, [pc, #128]	; (80088a8 <TIM_Base_SetConfig+0xf0>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d00b      	beq.n	8008842 <TIM_Base_SetConfig+0x8a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a1f      	ldr	r2, [pc, #124]	; (80088ac <TIM_Base_SetConfig+0xf4>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d007      	beq.n	8008842 <TIM_Base_SetConfig+0x8a>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a1e      	ldr	r2, [pc, #120]	; (80088b0 <TIM_Base_SetConfig+0xf8>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d003      	beq.n	8008842 <TIM_Base_SetConfig+0x8a>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a1d      	ldr	r2, [pc, #116]	; (80088b4 <TIM_Base_SetConfig+0xfc>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d108      	bne.n	8008854 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	4313      	orrs	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	4313      	orrs	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a08      	ldr	r2, [pc, #32]	; (800889c <TIM_Base_SetConfig+0xe4>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d103      	bne.n	8008888 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	691a      	ldr	r2, [r3, #16]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	615a      	str	r2, [r3, #20]
}
 800888e:	bf00      	nop
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	40010000 	.word	0x40010000
 80088a0:	40000400 	.word	0x40000400
 80088a4:	40000800 	.word	0x40000800
 80088a8:	40000c00 	.word	0x40000c00
 80088ac:	40014000 	.word	0x40014000
 80088b0:	40014400 	.word	0x40014400
 80088b4:	40014800 	.word	0x40014800

080088b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b087      	sub	sp, #28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	f023 0201 	bic.w	r2, r3, #1
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f023 0303 	bic.w	r3, r3, #3
 80088ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f023 0302 	bic.w	r3, r3, #2
 8008900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	4313      	orrs	r3, r2
 800890a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a1c      	ldr	r2, [pc, #112]	; (8008980 <TIM_OC1_SetConfig+0xc8>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d10c      	bne.n	800892e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	f023 0308 	bic.w	r3, r3, #8
 800891a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	4313      	orrs	r3, r2
 8008924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f023 0304 	bic.w	r3, r3, #4
 800892c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a13      	ldr	r2, [pc, #76]	; (8008980 <TIM_OC1_SetConfig+0xc8>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d111      	bne.n	800895a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800893c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	4313      	orrs	r3, r2
 800894e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	4313      	orrs	r3, r2
 8008958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	685a      	ldr	r2, [r3, #4]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	621a      	str	r2, [r3, #32]
}
 8008974:	bf00      	nop
 8008976:	371c      	adds	r7, #28
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	40010000 	.word	0x40010000

08008984 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008984:	b480      	push	{r7}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	f023 0210 	bic.w	r2, r3, #16
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	021b      	lsls	r3, r3, #8
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f023 0320 	bic.w	r3, r3, #32
 80089ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	011b      	lsls	r3, r3, #4
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	4313      	orrs	r3, r2
 80089da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a1e      	ldr	r2, [pc, #120]	; (8008a58 <TIM_OC2_SetConfig+0xd4>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d10d      	bne.n	8008a00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	011b      	lsls	r3, r3, #4
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a15      	ldr	r2, [pc, #84]	; (8008a58 <TIM_OC2_SetConfig+0xd4>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d113      	bne.n	8008a30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	621a      	str	r2, [r3, #32]
}
 8008a4a:	bf00      	nop
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	40010000 	.word	0x40010000

08008a5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b087      	sub	sp, #28
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f023 0303 	bic.w	r3, r3, #3
 8008a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	021b      	lsls	r3, r3, #8
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a1d      	ldr	r2, [pc, #116]	; (8008b2c <TIM_OC3_SetConfig+0xd0>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d10d      	bne.n	8008ad6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	021b      	lsls	r3, r3, #8
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a14      	ldr	r2, [pc, #80]	; (8008b2c <TIM_OC3_SetConfig+0xd0>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d113      	bne.n	8008b06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	695b      	ldr	r3, [r3, #20]
 8008af2:	011b      	lsls	r3, r3, #4
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	011b      	lsls	r3, r3, #4
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	685a      	ldr	r2, [r3, #4]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	621a      	str	r2, [r3, #32]
}
 8008b20:	bf00      	nop
 8008b22:	371c      	adds	r7, #28
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	40010000 	.word	0x40010000

08008b30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	021b      	lsls	r3, r3, #8
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	031b      	lsls	r3, r3, #12
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a10      	ldr	r2, [pc, #64]	; (8008bcc <TIM_OC4_SetConfig+0x9c>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d109      	bne.n	8008ba4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	019b      	lsls	r3, r3, #6
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685a      	ldr	r2, [r3, #4]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	621a      	str	r2, [r3, #32]
}
 8008bbe:	bf00      	nop
 8008bc0:	371c      	adds	r7, #28
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	40010000 	.word	0x40010000

08008bd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b087      	sub	sp, #28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	f023 0201 	bic.w	r2, r3, #1
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	011b      	lsls	r3, r3, #4
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f023 030a 	bic.w	r3, r3, #10
 8008c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	621a      	str	r2, [r3, #32]
}
 8008c22:	bf00      	nop
 8008c24:	371c      	adds	r7, #28
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b087      	sub	sp, #28
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	60f8      	str	r0, [r7, #12]
 8008c36:	60b9      	str	r1, [r7, #8]
 8008c38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	f023 0210 	bic.w	r2, r3, #16
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6a1b      	ldr	r3, [r3, #32]
 8008c50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	031b      	lsls	r3, r3, #12
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	011b      	lsls	r3, r3, #4
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	621a      	str	r2, [r3, #32]
}
 8008c82:	bf00      	nop
 8008c84:	371c      	adds	r7, #28
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b085      	sub	sp, #20
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	f043 0307 	orr.w	r3, r3, #7
 8008cb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	609a      	str	r2, [r3, #8]
}
 8008cb8:	bf00      	nop
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b087      	sub	sp, #28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
 8008cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	021a      	lsls	r2, r3, #8
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	431a      	orrs	r2, r3
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	609a      	str	r2, [r3, #8]
}
 8008cf8:	bf00      	nop
 8008cfa:	371c      	adds	r7, #28
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b087      	sub	sp, #28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	f003 031f 	and.w	r3, r3, #31
 8008d16:	2201      	movs	r2, #1
 8008d18:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6a1a      	ldr	r2, [r3, #32]
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	43db      	mvns	r3, r3
 8008d26:	401a      	ands	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6a1a      	ldr	r2, [r3, #32]
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	f003 031f 	and.w	r3, r3, #31
 8008d36:	6879      	ldr	r1, [r7, #4]
 8008d38:	fa01 f303 	lsl.w	r3, r1, r3
 8008d3c:	431a      	orrs	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	621a      	str	r2, [r3, #32]
}
 8008d42:	bf00      	nop
 8008d44:	371c      	adds	r7, #28
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
	...

08008d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d101      	bne.n	8008d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d64:	2302      	movs	r3, #2
 8008d66:	e050      	b.n	8008e0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2202      	movs	r2, #2
 8008d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a1c      	ldr	r2, [pc, #112]	; (8008e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d018      	beq.n	8008dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008db4:	d013      	beq.n	8008dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a18      	ldr	r2, [pc, #96]	; (8008e1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d00e      	beq.n	8008dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a16      	ldr	r2, [pc, #88]	; (8008e20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d009      	beq.n	8008dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a15      	ldr	r2, [pc, #84]	; (8008e24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d004      	beq.n	8008dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a13      	ldr	r2, [pc, #76]	; (8008e28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d10c      	bne.n	8008df8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	40010000 	.word	0x40010000
 8008e1c:	40000400 	.word	0x40000400
 8008e20:	40000800 	.word	0x40000800
 8008e24:	40000c00 	.word	0x40000c00
 8008e28:	40014000 	.word	0x40014000

08008e2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d101      	bne.n	8008e48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e44:	2302      	movs	r3, #2
 8008e46:	e03d      	b.n	8008ec4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e03f      	b.n	8008f8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d106      	bne.n	8008f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7fb f958 	bl	80041d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2224      	movs	r2, #36	; 0x24
 8008f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68da      	ldr	r2, [r3, #12]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 ff81 	bl	8009e44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	691a      	ldr	r2, [r3, #16]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	695a      	ldr	r2, [r3, #20]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68da      	ldr	r2, [r3, #12]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2220      	movs	r2, #32
 8008f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2220      	movs	r2, #32
 8008f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
	...

08008f94 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b08c      	sub	sp, #48	; 0x30
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b20      	cmp	r3, #32
 8008fac:	d165      	bne.n	800907a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d002      	beq.n	8008fba <HAL_UART_Transmit_DMA+0x26>
 8008fb4:	88fb      	ldrh	r3, [r7, #6]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e05e      	b.n	800907c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d101      	bne.n	8008fcc <HAL_UART_Transmit_DMA+0x38>
 8008fc8:	2302      	movs	r3, #2
 8008fca:	e057      	b.n	800907c <HAL_UART_Transmit_DMA+0xe8>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	88fa      	ldrh	r2, [r7, #6]
 8008fde:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	88fa      	ldrh	r2, [r7, #6]
 8008fe4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2221      	movs	r2, #33	; 0x21
 8008ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff8:	4a22      	ldr	r2, [pc, #136]	; (8009084 <HAL_UART_Transmit_DMA+0xf0>)
 8008ffa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009000:	4a21      	ldr	r2, [pc, #132]	; (8009088 <HAL_UART_Transmit_DMA+0xf4>)
 8009002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009008:	4a20      	ldr	r2, [pc, #128]	; (800908c <HAL_UART_Transmit_DMA+0xf8>)
 800900a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009010:	2200      	movs	r2, #0
 8009012:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009014:	f107 0308 	add.w	r3, r7, #8
 8009018:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800901e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009020:	6819      	ldr	r1, [r3, #0]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3304      	adds	r3, #4
 8009028:	461a      	mov	r2, r3
 800902a:	88fb      	ldrh	r3, [r7, #6]
 800902c:	f7fb fca0 	bl	8004970 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009038:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	3314      	adds	r3, #20
 8009048:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	e853 3f00 	ldrex	r3, [r3]
 8009050:	617b      	str	r3, [r7, #20]
   return(result);
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009058:	62bb      	str	r3, [r7, #40]	; 0x28
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3314      	adds	r3, #20
 8009060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009062:	627a      	str	r2, [r7, #36]	; 0x24
 8009064:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009066:	6a39      	ldr	r1, [r7, #32]
 8009068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800906a:	e841 2300 	strex	r3, r2, [r1]
 800906e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e5      	bne.n	8009042 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	e000      	b.n	800907c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800907a:	2302      	movs	r3, #2
  }
}
 800907c:	4618      	mov	r0, r3
 800907e:	3730      	adds	r7, #48	; 0x30
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	080096dd 	.word	0x080096dd
 8009088:	08009777 	.word	0x08009777
 800908c:	080098ef 	.word	0x080098ef

08009090 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b08c      	sub	sp, #48	; 0x30
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	4613      	mov	r3, r2
 800909c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b20      	cmp	r3, #32
 80090a8:	d152      	bne.n	8009150 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80090b0:	88fb      	ldrh	r3, [r7, #6]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e04b      	b.n	8009152 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d101      	bne.n	80090c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80090c4:	2302      	movs	r3, #2
 80090c6:	e044      	b.n	8009152 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2201      	movs	r2, #1
 80090d4:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80090d6:	88fb      	ldrh	r3, [r7, #6]
 80090d8:	461a      	mov	r2, r3
 80090da:	68b9      	ldr	r1, [r7, #8]
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f000 fc51 	bl	8009984 <UART_Start_Receive_DMA>
 80090e2:	4603      	mov	r3, r0
 80090e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80090e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d12c      	bne.n	800914a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d125      	bne.n	8009144 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090f8:	2300      	movs	r3, #0
 80090fa:	613b      	str	r3, [r7, #16]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	613b      	str	r3, [r7, #16]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	613b      	str	r3, [r7, #16]
 800910c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	330c      	adds	r3, #12
 8009114:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	e853 3f00 	ldrex	r3, [r3]
 800911c:	617b      	str	r3, [r7, #20]
   return(result);
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	f043 0310 	orr.w	r3, r3, #16
 8009124:	62bb      	str	r3, [r7, #40]	; 0x28
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	330c      	adds	r3, #12
 800912c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800912e:	627a      	str	r2, [r7, #36]	; 0x24
 8009130:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009132:	6a39      	ldr	r1, [r7, #32]
 8009134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009136:	e841 2300 	strex	r3, r2, [r1]
 800913a:	61fb      	str	r3, [r7, #28]
   return(result);
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1e5      	bne.n	800910e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8009142:	e002      	b.n	800914a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800914a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800914e:	e000      	b.n	8009152 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8009150:	2302      	movs	r3, #2
  }
}
 8009152:	4618      	mov	r0, r3
 8009154:	3730      	adds	r7, #48	; 0x30
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
	...

0800915c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b0ba      	sub	sp, #232	; 0xe8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009182:	2300      	movs	r3, #0
 8009184:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009188:	2300      	movs	r3, #0
 800918a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800918e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009192:	f003 030f 	and.w	r3, r3, #15
 8009196:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800919a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10f      	bne.n	80091c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091a6:	f003 0320 	and.w	r3, r3, #32
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d009      	beq.n	80091c2 <HAL_UART_IRQHandler+0x66>
 80091ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091b2:	f003 0320 	and.w	r3, r3, #32
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fd87 	bl	8009cce <UART_Receive_IT>
      return;
 80091c0:	e256      	b.n	8009670 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80091c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f000 80de 	beq.w	8009388 <HAL_UART_IRQHandler+0x22c>
 80091cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091d0:	f003 0301 	and.w	r3, r3, #1
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d106      	bne.n	80091e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80091d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 80d1 	beq.w	8009388 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80091e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00b      	beq.n	800920a <HAL_UART_IRQHandler+0xae>
 80091f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d005      	beq.n	800920a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009202:	f043 0201 	orr.w	r2, r3, #1
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800920a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800920e:	f003 0304 	and.w	r3, r3, #4
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00b      	beq.n	800922e <HAL_UART_IRQHandler+0xd2>
 8009216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d005      	beq.n	800922e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009226:	f043 0202 	orr.w	r2, r3, #2
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800922e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009232:	f003 0302 	and.w	r3, r3, #2
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00b      	beq.n	8009252 <HAL_UART_IRQHandler+0xf6>
 800923a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	2b00      	cmp	r3, #0
 8009244:	d005      	beq.n	8009252 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924a:	f043 0204 	orr.w	r2, r3, #4
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009256:	f003 0308 	and.w	r3, r3, #8
 800925a:	2b00      	cmp	r3, #0
 800925c:	d011      	beq.n	8009282 <HAL_UART_IRQHandler+0x126>
 800925e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009262:	f003 0320 	and.w	r3, r3, #32
 8009266:	2b00      	cmp	r3, #0
 8009268:	d105      	bne.n	8009276 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800926a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800926e:	f003 0301 	and.w	r3, r3, #1
 8009272:	2b00      	cmp	r3, #0
 8009274:	d005      	beq.n	8009282 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927a:	f043 0208 	orr.w	r2, r3, #8
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009286:	2b00      	cmp	r3, #0
 8009288:	f000 81ed 	beq.w	8009666 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800928c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009290:	f003 0320 	and.w	r3, r3, #32
 8009294:	2b00      	cmp	r3, #0
 8009296:	d008      	beq.n	80092aa <HAL_UART_IRQHandler+0x14e>
 8009298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800929c:	f003 0320 	and.w	r3, r3, #32
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fd12 	bl	8009cce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	695b      	ldr	r3, [r3, #20]
 80092b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b4:	2b40      	cmp	r3, #64	; 0x40
 80092b6:	bf0c      	ite	eq
 80092b8:	2301      	moveq	r3, #1
 80092ba:	2300      	movne	r3, #0
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c6:	f003 0308 	and.w	r3, r3, #8
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d103      	bne.n	80092d6 <HAL_UART_IRQHandler+0x17a>
 80092ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d04f      	beq.n	8009376 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fc1a 	bl	8009b10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	695b      	ldr	r3, [r3, #20]
 80092e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e6:	2b40      	cmp	r3, #64	; 0x40
 80092e8:	d141      	bne.n	800936e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	3314      	adds	r3, #20
 80092f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009300:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009308:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3314      	adds	r3, #20
 8009312:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009316:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800931a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009322:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009326:	e841 2300 	strex	r3, r2, [r1]
 800932a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800932e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1d9      	bne.n	80092ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933a:	2b00      	cmp	r3, #0
 800933c:	d013      	beq.n	8009366 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009342:	4a7d      	ldr	r2, [pc, #500]	; (8009538 <HAL_UART_IRQHandler+0x3dc>)
 8009344:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934a:	4618      	mov	r0, r3
 800934c:	f7fb fbd8 	bl	8004b00 <HAL_DMA_Abort_IT>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d016      	beq.n	8009384 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009360:	4610      	mov	r0, r2
 8009362:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009364:	e00e      	b.n	8009384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f9ae 	bl	80096c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800936c:	e00a      	b.n	8009384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f9aa 	bl	80096c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009374:	e006      	b.n	8009384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f9a6 	bl	80096c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009382:	e170      	b.n	8009666 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009384:	bf00      	nop
    return;
 8009386:	e16e      	b.n	8009666 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938c:	2b01      	cmp	r3, #1
 800938e:	f040 814a 	bne.w	8009626 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009396:	f003 0310 	and.w	r3, r3, #16
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 8143 	beq.w	8009626 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80093a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093a4:	f003 0310 	and.w	r3, r3, #16
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f000 813c 	beq.w	8009626 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093ae:	2300      	movs	r3, #0
 80093b0:	60bb      	str	r3, [r7, #8]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	60bb      	str	r3, [r7, #8]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	60bb      	str	r3, [r7, #8]
 80093c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	695b      	ldr	r3, [r3, #20]
 80093ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ce:	2b40      	cmp	r3, #64	; 0x40
 80093d0:	f040 80b4 	bne.w	800953c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 8140 	beq.w	800966a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093f2:	429a      	cmp	r2, r3
 80093f4:	f080 8139 	bcs.w	800966a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009404:	69db      	ldr	r3, [r3, #28]
 8009406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800940a:	f000 8088 	beq.w	800951e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	330c      	adds	r3, #12
 8009414:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009418:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800941c:	e853 3f00 	ldrex	r3, [r3]
 8009420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800942c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	330c      	adds	r3, #12
 8009436:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800943a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800943e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009442:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009446:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800944a:	e841 2300 	strex	r3, r2, [r1]
 800944e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1d9      	bne.n	800940e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3314      	adds	r3, #20
 8009460:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009464:	e853 3f00 	ldrex	r3, [r3]
 8009468:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800946a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800946c:	f023 0301 	bic.w	r3, r3, #1
 8009470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3314      	adds	r3, #20
 800947a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800947e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009482:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009484:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009486:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800948a:	e841 2300 	strex	r3, r2, [r1]
 800948e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1e1      	bne.n	800945a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3314      	adds	r3, #20
 800949c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094a0:	e853 3f00 	ldrex	r3, [r3]
 80094a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80094a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3314      	adds	r3, #20
 80094b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80094ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80094bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80094c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80094c2:	e841 2300 	strex	r3, r2, [r1]
 80094c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80094c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1e3      	bne.n	8009496 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2220      	movs	r2, #32
 80094d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	330c      	adds	r3, #12
 80094e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094e6:	e853 3f00 	ldrex	r3, [r3]
 80094ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80094ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094ee:	f023 0310 	bic.w	r3, r3, #16
 80094f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	330c      	adds	r3, #12
 80094fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009500:	65ba      	str	r2, [r7, #88]	; 0x58
 8009502:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009504:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009506:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009508:	e841 2300 	strex	r3, r2, [r1]
 800950c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800950e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1e3      	bne.n	80094dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009518:	4618      	mov	r0, r3
 800951a:	f7fb fa81 	bl	8004a20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009526:	b29b      	uxth	r3, r3
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	b29b      	uxth	r3, r3
 800952c:	4619      	mov	r1, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f7f9 fbca 	bl	8002cc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009534:	e099      	b.n	800966a <HAL_UART_IRQHandler+0x50e>
 8009536:	bf00      	nop
 8009538:	08009bd7 	.word	0x08009bd7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009544:	b29b      	uxth	r3, r3
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009550:	b29b      	uxth	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	f000 808b 	beq.w	800966e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009558:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800955c:	2b00      	cmp	r3, #0
 800955e:	f000 8086 	beq.w	800966e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	330c      	adds	r3, #12
 8009568:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956c:	e853 3f00 	ldrex	r3, [r3]
 8009570:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009578:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	330c      	adds	r3, #12
 8009582:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009586:	647a      	str	r2, [r7, #68]	; 0x44
 8009588:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800958c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800958e:	e841 2300 	strex	r3, r2, [r1]
 8009592:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1e3      	bne.n	8009562 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	3314      	adds	r3, #20
 80095a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	623b      	str	r3, [r7, #32]
   return(result);
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	f023 0301 	bic.w	r3, r3, #1
 80095b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3314      	adds	r3, #20
 80095ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80095be:	633a      	str	r2, [r7, #48]	; 0x30
 80095c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095c6:	e841 2300 	strex	r3, r2, [r1]
 80095ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1e3      	bne.n	800959a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2220      	movs	r2, #32
 80095d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	330c      	adds	r3, #12
 80095e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	e853 3f00 	ldrex	r3, [r3]
 80095ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f023 0310 	bic.w	r3, r3, #16
 80095f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	330c      	adds	r3, #12
 8009600:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009604:	61fa      	str	r2, [r7, #28]
 8009606:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009608:	69b9      	ldr	r1, [r7, #24]
 800960a:	69fa      	ldr	r2, [r7, #28]
 800960c:	e841 2300 	strex	r3, r2, [r1]
 8009610:	617b      	str	r3, [r7, #20]
   return(result);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1e3      	bne.n	80095e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800961c:	4619      	mov	r1, r3
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f7f9 fb52 	bl	8002cc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009624:	e023      	b.n	800966e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800962a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800962e:	2b00      	cmp	r3, #0
 8009630:	d009      	beq.n	8009646 <HAL_UART_IRQHandler+0x4ea>
 8009632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800963a:	2b00      	cmp	r3, #0
 800963c:	d003      	beq.n	8009646 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fadd 	bl	8009bfe <UART_Transmit_IT>
    return;
 8009644:	e014      	b.n	8009670 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800964a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00e      	beq.n	8009670 <HAL_UART_IRQHandler+0x514>
 8009652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800965a:	2b00      	cmp	r3, #0
 800965c:	d008      	beq.n	8009670 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fb1d 	bl	8009c9e <UART_EndTransmit_IT>
    return;
 8009664:	e004      	b.n	8009670 <HAL_UART_IRQHandler+0x514>
    return;
 8009666:	bf00      	nop
 8009668:	e002      	b.n	8009670 <HAL_UART_IRQHandler+0x514>
      return;
 800966a:	bf00      	nop
 800966c:	e000      	b.n	8009670 <HAL_UART_IRQHandler+0x514>
      return;
 800966e:	bf00      	nop
  }
}
 8009670:	37e8      	adds	r7, #232	; 0xe8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop

08009678 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009694:	bf00      	nop
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b090      	sub	sp, #64	; 0x40
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d137      	bne.n	8009768 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80096f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096fa:	2200      	movs	r2, #0
 80096fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3314      	adds	r3, #20
 8009704:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009708:	e853 3f00 	ldrex	r3, [r3]
 800970c:	623b      	str	r3, [r7, #32]
   return(result);
 800970e:	6a3b      	ldr	r3, [r7, #32]
 8009710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009714:	63bb      	str	r3, [r7, #56]	; 0x38
 8009716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3314      	adds	r3, #20
 800971c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800971e:	633a      	str	r2, [r7, #48]	; 0x30
 8009720:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009726:	e841 2300 	strex	r3, r2, [r1]
 800972a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1e5      	bne.n	80096fe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	330c      	adds	r3, #12
 8009738:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	e853 3f00 	ldrex	r3, [r3]
 8009740:	60fb      	str	r3, [r7, #12]
   return(result);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009748:	637b      	str	r3, [r7, #52]	; 0x34
 800974a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	330c      	adds	r3, #12
 8009750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009752:	61fa      	str	r2, [r7, #28]
 8009754:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009756:	69b9      	ldr	r1, [r7, #24]
 8009758:	69fa      	ldr	r2, [r7, #28]
 800975a:	e841 2300 	strex	r3, r2, [r1]
 800975e:	617b      	str	r3, [r7, #20]
   return(result);
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1e5      	bne.n	8009732 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009766:	e002      	b.n	800976e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009768:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800976a:	f7ff ff85 	bl	8009678 <HAL_UART_TxCpltCallback>
}
 800976e:	bf00      	nop
 8009770:	3740      	adds	r7, #64	; 0x40
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009782:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f7ff ff81 	bl	800968c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800978a:	bf00      	nop
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b09c      	sub	sp, #112	; 0x70
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d172      	bne.n	8009894 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80097ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097b0:	2200      	movs	r2, #0
 80097b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	330c      	adds	r3, #12
 80097ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097be:	e853 3f00 	ldrex	r3, [r3]
 80097c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80097cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	330c      	adds	r3, #12
 80097d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80097d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80097d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80097da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097dc:	e841 2300 	strex	r3, r2, [r1]
 80097e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80097e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1e5      	bne.n	80097b4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	3314      	adds	r3, #20
 80097ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f2:	e853 3f00 	ldrex	r3, [r3]
 80097f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097fa:	f023 0301 	bic.w	r3, r3, #1
 80097fe:	667b      	str	r3, [r7, #100]	; 0x64
 8009800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	3314      	adds	r3, #20
 8009806:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009808:	647a      	str	r2, [r7, #68]	; 0x44
 800980a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800980e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009810:	e841 2300 	strex	r3, r2, [r1]
 8009814:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1e5      	bne.n	80097e8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800981c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3314      	adds	r3, #20
 8009822:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	e853 3f00 	ldrex	r3, [r3]
 800982a:	623b      	str	r3, [r7, #32]
   return(result);
 800982c:	6a3b      	ldr	r3, [r7, #32]
 800982e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009832:	663b      	str	r3, [r7, #96]	; 0x60
 8009834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3314      	adds	r3, #20
 800983a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800983c:	633a      	str	r2, [r7, #48]	; 0x30
 800983e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009840:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009844:	e841 2300 	strex	r3, r2, [r1]
 8009848:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800984a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1e5      	bne.n	800981c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009852:	2220      	movs	r2, #32
 8009854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800985a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985c:	2b01      	cmp	r3, #1
 800985e:	d119      	bne.n	8009894 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	330c      	adds	r3, #12
 8009866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	e853 3f00 	ldrex	r3, [r3]
 800986e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f023 0310 	bic.w	r3, r3, #16
 8009876:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	330c      	adds	r3, #12
 800987e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009880:	61fa      	str	r2, [r7, #28]
 8009882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009884:	69b9      	ldr	r1, [r7, #24]
 8009886:	69fa      	ldr	r2, [r7, #28]
 8009888:	e841 2300 	strex	r3, r2, [r1]
 800988c:	617b      	str	r3, [r7, #20]
   return(result);
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1e5      	bne.n	8009860 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009898:	2b01      	cmp	r3, #1
 800989a:	d106      	bne.n	80098aa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800989c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800989e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098a0:	4619      	mov	r1, r3
 80098a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80098a4:	f7f9 fa10 	bl	8002cc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80098a8:	e002      	b.n	80098b0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80098aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80098ac:	f7ff fef8 	bl	80096a0 <HAL_UART_RxCpltCallback>
}
 80098b0:	bf00      	nop
 80098b2:	3770      	adds	r7, #112	; 0x70
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d108      	bne.n	80098e0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098d2:	085b      	lsrs	r3, r3, #1
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	4619      	mov	r1, r3
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f7f9 f9f5 	bl	8002cc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80098de:	e002      	b.n	80098e6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f7ff fee7 	bl	80096b4 <HAL_UART_RxHalfCpltCallback>
}
 80098e6:	bf00      	nop
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80098f6:	2300      	movs	r3, #0
 80098f8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800990a:	2b80      	cmp	r3, #128	; 0x80
 800990c:	bf0c      	ite	eq
 800990e:	2301      	moveq	r3, #1
 8009910:	2300      	movne	r3, #0
 8009912:	b2db      	uxtb	r3, r3
 8009914:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b21      	cmp	r3, #33	; 0x21
 8009920:	d108      	bne.n	8009934 <UART_DMAError+0x46>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d005      	beq.n	8009934 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	2200      	movs	r2, #0
 800992c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800992e:	68b8      	ldr	r0, [r7, #8]
 8009930:	f000 f8c6 	bl	8009ac0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	695b      	ldr	r3, [r3, #20]
 800993a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800993e:	2b40      	cmp	r3, #64	; 0x40
 8009940:	bf0c      	ite	eq
 8009942:	2301      	moveq	r3, #1
 8009944:	2300      	movne	r3, #0
 8009946:	b2db      	uxtb	r3, r3
 8009948:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b22      	cmp	r3, #34	; 0x22
 8009954:	d108      	bne.n	8009968 <UART_DMAError+0x7a>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d005      	beq.n	8009968 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	2200      	movs	r2, #0
 8009960:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009962:	68b8      	ldr	r0, [r7, #8]
 8009964:	f000 f8d4 	bl	8009b10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800996c:	f043 0210 	orr.w	r2, r3, #16
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009974:	68b8      	ldr	r0, [r7, #8]
 8009976:	f7ff fea7 	bl	80096c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800997a:	bf00      	nop
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
	...

08009984 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b098      	sub	sp, #96	; 0x60
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	4613      	mov	r3, r2
 8009990:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	88fa      	ldrh	r2, [r7, #6]
 800999c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2222      	movs	r2, #34	; 0x22
 80099a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b0:	4a40      	ldr	r2, [pc, #256]	; (8009ab4 <UART_Start_Receive_DMA+0x130>)
 80099b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b8:	4a3f      	ldr	r2, [pc, #252]	; (8009ab8 <UART_Start_Receive_DMA+0x134>)
 80099ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c0:	4a3e      	ldr	r2, [pc, #248]	; (8009abc <UART_Start_Receive_DMA+0x138>)
 80099c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c8:	2200      	movs	r2, #0
 80099ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80099cc:	f107 0308 	add.w	r3, r7, #8
 80099d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3304      	adds	r3, #4
 80099dc:	4619      	mov	r1, r3
 80099de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	88fb      	ldrh	r3, [r7, #6]
 80099e4:	f7fa ffc4 	bl	8004970 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80099e8:	2300      	movs	r3, #0
 80099ea:	613b      	str	r3, [r7, #16]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	613b      	str	r3, [r7, #16]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	613b      	str	r3, [r7, #16]
 80099fc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d019      	beq.n	8009a42 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	330c      	adds	r3, #12
 8009a14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a18:	e853 3f00 	ldrex	r3, [r3]
 8009a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a24:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	330c      	adds	r3, #12
 8009a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a2e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009a30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009a34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a36:	e841 2300 	strex	r3, r2, [r1]
 8009a3a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1e5      	bne.n	8009a0e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	3314      	adds	r3, #20
 8009a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4c:	e853 3f00 	ldrex	r3, [r3]
 8009a50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a54:	f043 0301 	orr.w	r3, r3, #1
 8009a58:	657b      	str	r3, [r7, #84]	; 0x54
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	3314      	adds	r3, #20
 8009a60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a62:	63ba      	str	r2, [r7, #56]	; 0x38
 8009a64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a66:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a6a:	e841 2300 	strex	r3, r2, [r1]
 8009a6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1e5      	bne.n	8009a42 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3314      	adds	r3, #20
 8009a7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	e853 3f00 	ldrex	r3, [r3]
 8009a84:	617b      	str	r3, [r7, #20]
   return(result);
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a8c:	653b      	str	r3, [r7, #80]	; 0x50
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	3314      	adds	r3, #20
 8009a94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a96:	627a      	str	r2, [r7, #36]	; 0x24
 8009a98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9a:	6a39      	ldr	r1, [r7, #32]
 8009a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a9e:	e841 2300 	strex	r3, r2, [r1]
 8009aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1e5      	bne.n	8009a76 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3760      	adds	r7, #96	; 0x60
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	08009793 	.word	0x08009793
 8009ab8:	080098b9 	.word	0x080098b9
 8009abc:	080098ef 	.word	0x080098ef

08009ac0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b089      	sub	sp, #36	; 0x24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	330c      	adds	r3, #12
 8009ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	e853 3f00 	ldrex	r3, [r3]
 8009ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ade:	61fb      	str	r3, [r7, #28]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	330c      	adds	r3, #12
 8009ae6:	69fa      	ldr	r2, [r7, #28]
 8009ae8:	61ba      	str	r2, [r7, #24]
 8009aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aec:	6979      	ldr	r1, [r7, #20]
 8009aee:	69ba      	ldr	r2, [r7, #24]
 8009af0:	e841 2300 	strex	r3, r2, [r1]
 8009af4:	613b      	str	r3, [r7, #16]
   return(result);
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1e5      	bne.n	8009ac8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2220      	movs	r2, #32
 8009b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009b04:	bf00      	nop
 8009b06:	3724      	adds	r7, #36	; 0x24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b095      	sub	sp, #84	; 0x54
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	330c      	adds	r3, #12
 8009b1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b22:	e853 3f00 	ldrex	r3, [r3]
 8009b26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	330c      	adds	r3, #12
 8009b36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b38:	643a      	str	r2, [r7, #64]	; 0x40
 8009b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b40:	e841 2300 	strex	r3, r2, [r1]
 8009b44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1e5      	bne.n	8009b18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	3314      	adds	r3, #20
 8009b52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	e853 3f00 	ldrex	r3, [r3]
 8009b5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	f023 0301 	bic.w	r3, r3, #1
 8009b62:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	3314      	adds	r3, #20
 8009b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b74:	e841 2300 	strex	r3, r2, [r1]
 8009b78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d1e5      	bne.n	8009b4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d119      	bne.n	8009bbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	330c      	adds	r3, #12
 8009b8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	e853 3f00 	ldrex	r3, [r3]
 8009b96:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	f023 0310 	bic.w	r3, r3, #16
 8009b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	330c      	adds	r3, #12
 8009ba6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ba8:	61ba      	str	r2, [r7, #24]
 8009baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bac:	6979      	ldr	r1, [r7, #20]
 8009bae:	69ba      	ldr	r2, [r7, #24]
 8009bb0:	e841 2300 	strex	r3, r2, [r1]
 8009bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1e5      	bne.n	8009b88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2220      	movs	r2, #32
 8009bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009bca:	bf00      	nop
 8009bcc:	3754      	adds	r7, #84	; 0x54
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr

08009bd6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b084      	sub	sp, #16
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f7ff fd69 	bl	80096c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bf6:	bf00      	nop
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b085      	sub	sp, #20
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b21      	cmp	r3, #33	; 0x21
 8009c10:	d13e      	bne.n	8009c90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c1a:	d114      	bne.n	8009c46 <UART_Transmit_IT+0x48>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d110      	bne.n	8009c46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a1b      	ldr	r3, [r3, #32]
 8009c28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	1c9a      	adds	r2, r3, #2
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	621a      	str	r2, [r3, #32]
 8009c44:	e008      	b.n	8009c58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a1b      	ldr	r3, [r3, #32]
 8009c4a:	1c59      	adds	r1, r3, #1
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	6211      	str	r1, [r2, #32]
 8009c50:	781a      	ldrb	r2, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	4619      	mov	r1, r3
 8009c66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10f      	bne.n	8009c8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68da      	ldr	r2, [r3, #12]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68da      	ldr	r2, [r3, #12]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	e000      	b.n	8009c92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009c90:	2302      	movs	r3, #2
  }
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3714      	adds	r7, #20
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr

08009c9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	68da      	ldr	r2, [r3, #12]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2220      	movs	r2, #32
 8009cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f7ff fcda 	bl	8009678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b08c      	sub	sp, #48	; 0x30
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2b22      	cmp	r3, #34	; 0x22
 8009ce0:	f040 80ab 	bne.w	8009e3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cec:	d117      	bne.n	8009d1e <UART_Receive_IT+0x50>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d113      	bne.n	8009d1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d16:	1c9a      	adds	r2, r3, #2
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	629a      	str	r2, [r3, #40]	; 0x28
 8009d1c:	e026      	b.n	8009d6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009d24:	2300      	movs	r3, #0
 8009d26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d30:	d007      	beq.n	8009d42 <UART_Receive_IT+0x74>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10a      	bne.n	8009d50 <UART_Receive_IT+0x82>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d106      	bne.n	8009d50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	701a      	strb	r2, [r3, #0]
 8009d4e:	e008      	b.n	8009d62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d66:	1c5a      	adds	r2, r3, #1
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	3b01      	subs	r3, #1
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d15a      	bne.n	8009e36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68da      	ldr	r2, [r3, #12]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f022 0220 	bic.w	r2, r2, #32
 8009d8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68da      	ldr	r2, [r3, #12]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	695a      	ldr	r2, [r3, #20]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f022 0201 	bic.w	r2, r2, #1
 8009dae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2220      	movs	r2, #32
 8009db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d135      	bne.n	8009e2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	330c      	adds	r3, #12
 8009dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	e853 3f00 	ldrex	r3, [r3]
 8009dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	f023 0310 	bic.w	r3, r3, #16
 8009ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	330c      	adds	r3, #12
 8009de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de6:	623a      	str	r2, [r7, #32]
 8009de8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dea:	69f9      	ldr	r1, [r7, #28]
 8009dec:	6a3a      	ldr	r2, [r7, #32]
 8009dee:	e841 2300 	strex	r3, r2, [r1]
 8009df2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1e5      	bne.n	8009dc6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f003 0310 	and.w	r3, r3, #16
 8009e04:	2b10      	cmp	r3, #16
 8009e06:	d10a      	bne.n	8009e1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e08:	2300      	movs	r3, #0
 8009e0a:	60fb      	str	r3, [r7, #12]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	60fb      	str	r3, [r7, #12]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	60fb      	str	r3, [r7, #12]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7f8 ff4f 	bl	8002cc8 <HAL_UARTEx_RxEventCallback>
 8009e2a:	e002      	b.n	8009e32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f7ff fc37 	bl	80096a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	e002      	b.n	8009e3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	e000      	b.n	8009e3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009e3a:	2302      	movs	r3, #2
  }
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3730      	adds	r7, #48	; 0x30
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e48:	b0c0      	sub	sp, #256	; 0x100
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e60:	68d9      	ldr	r1, [r3, #12]
 8009e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	ea40 0301 	orr.w	r3, r0, r1
 8009e6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	431a      	orrs	r2, r3
 8009e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e80:	695b      	ldr	r3, [r3, #20]
 8009e82:	431a      	orrs	r2, r3
 8009e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e88:	69db      	ldr	r3, [r3, #28]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009e9c:	f021 010c 	bic.w	r1, r1, #12
 8009ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009eaa:	430b      	orrs	r3, r1
 8009eac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	695b      	ldr	r3, [r3, #20]
 8009eb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ebe:	6999      	ldr	r1, [r3, #24]
 8009ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	ea40 0301 	orr.w	r3, r0, r1
 8009eca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	4b8f      	ldr	r3, [pc, #572]	; (800a110 <UART_SetConfig+0x2cc>)
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d005      	beq.n	8009ee4 <UART_SetConfig+0xa0>
 8009ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	4b8d      	ldr	r3, [pc, #564]	; (800a114 <UART_SetConfig+0x2d0>)
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d104      	bne.n	8009eee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ee4:	f7fd fe86 	bl	8007bf4 <HAL_RCC_GetPCLK2Freq>
 8009ee8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009eec:	e003      	b.n	8009ef6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009eee:	f7fd fe6d 	bl	8007bcc <HAL_RCC_GetPCLK1Freq>
 8009ef2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009efa:	69db      	ldr	r3, [r3, #28]
 8009efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f00:	f040 810c 	bne.w	800a11c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009f0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009f12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009f16:	4622      	mov	r2, r4
 8009f18:	462b      	mov	r3, r5
 8009f1a:	1891      	adds	r1, r2, r2
 8009f1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8009f1e:	415b      	adcs	r3, r3
 8009f20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009f26:	4621      	mov	r1, r4
 8009f28:	eb12 0801 	adds.w	r8, r2, r1
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	eb43 0901 	adc.w	r9, r3, r1
 8009f32:	f04f 0200 	mov.w	r2, #0
 8009f36:	f04f 0300 	mov.w	r3, #0
 8009f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f46:	4690      	mov	r8, r2
 8009f48:	4699      	mov	r9, r3
 8009f4a:	4623      	mov	r3, r4
 8009f4c:	eb18 0303 	adds.w	r3, r8, r3
 8009f50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f54:	462b      	mov	r3, r5
 8009f56:	eb49 0303 	adc.w	r3, r9, r3
 8009f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009f6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009f72:	460b      	mov	r3, r1
 8009f74:	18db      	adds	r3, r3, r3
 8009f76:	653b      	str	r3, [r7, #80]	; 0x50
 8009f78:	4613      	mov	r3, r2
 8009f7a:	eb42 0303 	adc.w	r3, r2, r3
 8009f7e:	657b      	str	r3, [r7, #84]	; 0x54
 8009f80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009f84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009f88:	f7f6 fd64 	bl	8000a54 <__aeabi_uldivmod>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4b61      	ldr	r3, [pc, #388]	; (800a118 <UART_SetConfig+0x2d4>)
 8009f92:	fba3 2302 	umull	r2, r3, r3, r2
 8009f96:	095b      	lsrs	r3, r3, #5
 8009f98:	011c      	lsls	r4, r3, #4
 8009f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009fa4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009fa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009fac:	4642      	mov	r2, r8
 8009fae:	464b      	mov	r3, r9
 8009fb0:	1891      	adds	r1, r2, r2
 8009fb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8009fb4:	415b      	adcs	r3, r3
 8009fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009fbc:	4641      	mov	r1, r8
 8009fbe:	eb12 0a01 	adds.w	sl, r2, r1
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	eb43 0b01 	adc.w	fp, r3, r1
 8009fc8:	f04f 0200 	mov.w	r2, #0
 8009fcc:	f04f 0300 	mov.w	r3, #0
 8009fd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009fd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009fd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009fdc:	4692      	mov	sl, r2
 8009fde:	469b      	mov	fp, r3
 8009fe0:	4643      	mov	r3, r8
 8009fe2:	eb1a 0303 	adds.w	r3, sl, r3
 8009fe6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fea:	464b      	mov	r3, r9
 8009fec:	eb4b 0303 	adc.w	r3, fp, r3
 8009ff0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a000:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a004:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a008:	460b      	mov	r3, r1
 800a00a:	18db      	adds	r3, r3, r3
 800a00c:	643b      	str	r3, [r7, #64]	; 0x40
 800a00e:	4613      	mov	r3, r2
 800a010:	eb42 0303 	adc.w	r3, r2, r3
 800a014:	647b      	str	r3, [r7, #68]	; 0x44
 800a016:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a01a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a01e:	f7f6 fd19 	bl	8000a54 <__aeabi_uldivmod>
 800a022:	4602      	mov	r2, r0
 800a024:	460b      	mov	r3, r1
 800a026:	4611      	mov	r1, r2
 800a028:	4b3b      	ldr	r3, [pc, #236]	; (800a118 <UART_SetConfig+0x2d4>)
 800a02a:	fba3 2301 	umull	r2, r3, r3, r1
 800a02e:	095b      	lsrs	r3, r3, #5
 800a030:	2264      	movs	r2, #100	; 0x64
 800a032:	fb02 f303 	mul.w	r3, r2, r3
 800a036:	1acb      	subs	r3, r1, r3
 800a038:	00db      	lsls	r3, r3, #3
 800a03a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a03e:	4b36      	ldr	r3, [pc, #216]	; (800a118 <UART_SetConfig+0x2d4>)
 800a040:	fba3 2302 	umull	r2, r3, r3, r2
 800a044:	095b      	lsrs	r3, r3, #5
 800a046:	005b      	lsls	r3, r3, #1
 800a048:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a04c:	441c      	add	r4, r3
 800a04e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a052:	2200      	movs	r2, #0
 800a054:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a058:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a05c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a060:	4642      	mov	r2, r8
 800a062:	464b      	mov	r3, r9
 800a064:	1891      	adds	r1, r2, r2
 800a066:	63b9      	str	r1, [r7, #56]	; 0x38
 800a068:	415b      	adcs	r3, r3
 800a06a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a06c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a070:	4641      	mov	r1, r8
 800a072:	1851      	adds	r1, r2, r1
 800a074:	6339      	str	r1, [r7, #48]	; 0x30
 800a076:	4649      	mov	r1, r9
 800a078:	414b      	adcs	r3, r1
 800a07a:	637b      	str	r3, [r7, #52]	; 0x34
 800a07c:	f04f 0200 	mov.w	r2, #0
 800a080:	f04f 0300 	mov.w	r3, #0
 800a084:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a088:	4659      	mov	r1, fp
 800a08a:	00cb      	lsls	r3, r1, #3
 800a08c:	4651      	mov	r1, sl
 800a08e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a092:	4651      	mov	r1, sl
 800a094:	00ca      	lsls	r2, r1, #3
 800a096:	4610      	mov	r0, r2
 800a098:	4619      	mov	r1, r3
 800a09a:	4603      	mov	r3, r0
 800a09c:	4642      	mov	r2, r8
 800a09e:	189b      	adds	r3, r3, r2
 800a0a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0a4:	464b      	mov	r3, r9
 800a0a6:	460a      	mov	r2, r1
 800a0a8:	eb42 0303 	adc.w	r3, r2, r3
 800a0ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a0bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a0c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	18db      	adds	r3, r3, r3
 800a0c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	eb42 0303 	adc.w	r3, r2, r3
 800a0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a0da:	f7f6 fcbb 	bl	8000a54 <__aeabi_uldivmod>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4b0d      	ldr	r3, [pc, #52]	; (800a118 <UART_SetConfig+0x2d4>)
 800a0e4:	fba3 1302 	umull	r1, r3, r3, r2
 800a0e8:	095b      	lsrs	r3, r3, #5
 800a0ea:	2164      	movs	r1, #100	; 0x64
 800a0ec:	fb01 f303 	mul.w	r3, r1, r3
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	00db      	lsls	r3, r3, #3
 800a0f4:	3332      	adds	r3, #50	; 0x32
 800a0f6:	4a08      	ldr	r2, [pc, #32]	; (800a118 <UART_SetConfig+0x2d4>)
 800a0f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a0fc:	095b      	lsrs	r3, r3, #5
 800a0fe:	f003 0207 	and.w	r2, r3, #7
 800a102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4422      	add	r2, r4
 800a10a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a10c:	e105      	b.n	800a31a <UART_SetConfig+0x4d6>
 800a10e:	bf00      	nop
 800a110:	40011000 	.word	0x40011000
 800a114:	40011400 	.word	0x40011400
 800a118:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a11c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a120:	2200      	movs	r2, #0
 800a122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a126:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a12a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a12e:	4642      	mov	r2, r8
 800a130:	464b      	mov	r3, r9
 800a132:	1891      	adds	r1, r2, r2
 800a134:	6239      	str	r1, [r7, #32]
 800a136:	415b      	adcs	r3, r3
 800a138:	627b      	str	r3, [r7, #36]	; 0x24
 800a13a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a13e:	4641      	mov	r1, r8
 800a140:	1854      	adds	r4, r2, r1
 800a142:	4649      	mov	r1, r9
 800a144:	eb43 0501 	adc.w	r5, r3, r1
 800a148:	f04f 0200 	mov.w	r2, #0
 800a14c:	f04f 0300 	mov.w	r3, #0
 800a150:	00eb      	lsls	r3, r5, #3
 800a152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a156:	00e2      	lsls	r2, r4, #3
 800a158:	4614      	mov	r4, r2
 800a15a:	461d      	mov	r5, r3
 800a15c:	4643      	mov	r3, r8
 800a15e:	18e3      	adds	r3, r4, r3
 800a160:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a164:	464b      	mov	r3, r9
 800a166:	eb45 0303 	adc.w	r3, r5, r3
 800a16a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a16e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a17a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a17e:	f04f 0200 	mov.w	r2, #0
 800a182:	f04f 0300 	mov.w	r3, #0
 800a186:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a18a:	4629      	mov	r1, r5
 800a18c:	008b      	lsls	r3, r1, #2
 800a18e:	4621      	mov	r1, r4
 800a190:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a194:	4621      	mov	r1, r4
 800a196:	008a      	lsls	r2, r1, #2
 800a198:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a19c:	f7f6 fc5a 	bl	8000a54 <__aeabi_uldivmod>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	4b60      	ldr	r3, [pc, #384]	; (800a328 <UART_SetConfig+0x4e4>)
 800a1a6:	fba3 2302 	umull	r2, r3, r3, r2
 800a1aa:	095b      	lsrs	r3, r3, #5
 800a1ac:	011c      	lsls	r4, r3, #4
 800a1ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a1b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a1bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a1c0:	4642      	mov	r2, r8
 800a1c2:	464b      	mov	r3, r9
 800a1c4:	1891      	adds	r1, r2, r2
 800a1c6:	61b9      	str	r1, [r7, #24]
 800a1c8:	415b      	adcs	r3, r3
 800a1ca:	61fb      	str	r3, [r7, #28]
 800a1cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a1d0:	4641      	mov	r1, r8
 800a1d2:	1851      	adds	r1, r2, r1
 800a1d4:	6139      	str	r1, [r7, #16]
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	414b      	adcs	r3, r1
 800a1da:	617b      	str	r3, [r7, #20]
 800a1dc:	f04f 0200 	mov.w	r2, #0
 800a1e0:	f04f 0300 	mov.w	r3, #0
 800a1e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a1e8:	4659      	mov	r1, fp
 800a1ea:	00cb      	lsls	r3, r1, #3
 800a1ec:	4651      	mov	r1, sl
 800a1ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1f2:	4651      	mov	r1, sl
 800a1f4:	00ca      	lsls	r2, r1, #3
 800a1f6:	4610      	mov	r0, r2
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	4642      	mov	r2, r8
 800a1fe:	189b      	adds	r3, r3, r2
 800a200:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a204:	464b      	mov	r3, r9
 800a206:	460a      	mov	r2, r1
 800a208:	eb42 0303 	adc.w	r3, r2, r3
 800a20c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	67bb      	str	r3, [r7, #120]	; 0x78
 800a21a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a21c:	f04f 0200 	mov.w	r2, #0
 800a220:	f04f 0300 	mov.w	r3, #0
 800a224:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a228:	4649      	mov	r1, r9
 800a22a:	008b      	lsls	r3, r1, #2
 800a22c:	4641      	mov	r1, r8
 800a22e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a232:	4641      	mov	r1, r8
 800a234:	008a      	lsls	r2, r1, #2
 800a236:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a23a:	f7f6 fc0b 	bl	8000a54 <__aeabi_uldivmod>
 800a23e:	4602      	mov	r2, r0
 800a240:	460b      	mov	r3, r1
 800a242:	4b39      	ldr	r3, [pc, #228]	; (800a328 <UART_SetConfig+0x4e4>)
 800a244:	fba3 1302 	umull	r1, r3, r3, r2
 800a248:	095b      	lsrs	r3, r3, #5
 800a24a:	2164      	movs	r1, #100	; 0x64
 800a24c:	fb01 f303 	mul.w	r3, r1, r3
 800a250:	1ad3      	subs	r3, r2, r3
 800a252:	011b      	lsls	r3, r3, #4
 800a254:	3332      	adds	r3, #50	; 0x32
 800a256:	4a34      	ldr	r2, [pc, #208]	; (800a328 <UART_SetConfig+0x4e4>)
 800a258:	fba2 2303 	umull	r2, r3, r2, r3
 800a25c:	095b      	lsrs	r3, r3, #5
 800a25e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a262:	441c      	add	r4, r3
 800a264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a268:	2200      	movs	r2, #0
 800a26a:	673b      	str	r3, [r7, #112]	; 0x70
 800a26c:	677a      	str	r2, [r7, #116]	; 0x74
 800a26e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a272:	4642      	mov	r2, r8
 800a274:	464b      	mov	r3, r9
 800a276:	1891      	adds	r1, r2, r2
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	415b      	adcs	r3, r3
 800a27c:	60fb      	str	r3, [r7, #12]
 800a27e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a282:	4641      	mov	r1, r8
 800a284:	1851      	adds	r1, r2, r1
 800a286:	6039      	str	r1, [r7, #0]
 800a288:	4649      	mov	r1, r9
 800a28a:	414b      	adcs	r3, r1
 800a28c:	607b      	str	r3, [r7, #4]
 800a28e:	f04f 0200 	mov.w	r2, #0
 800a292:	f04f 0300 	mov.w	r3, #0
 800a296:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a29a:	4659      	mov	r1, fp
 800a29c:	00cb      	lsls	r3, r1, #3
 800a29e:	4651      	mov	r1, sl
 800a2a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2a4:	4651      	mov	r1, sl
 800a2a6:	00ca      	lsls	r2, r1, #3
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	4642      	mov	r2, r8
 800a2b0:	189b      	adds	r3, r3, r2
 800a2b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2b4:	464b      	mov	r3, r9
 800a2b6:	460a      	mov	r2, r1
 800a2b8:	eb42 0303 	adc.w	r3, r2, r3
 800a2bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a2be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	663b      	str	r3, [r7, #96]	; 0x60
 800a2c8:	667a      	str	r2, [r7, #100]	; 0x64
 800a2ca:	f04f 0200 	mov.w	r2, #0
 800a2ce:	f04f 0300 	mov.w	r3, #0
 800a2d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	008b      	lsls	r3, r1, #2
 800a2da:	4641      	mov	r1, r8
 800a2dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2e0:	4641      	mov	r1, r8
 800a2e2:	008a      	lsls	r2, r1, #2
 800a2e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a2e8:	f7f6 fbb4 	bl	8000a54 <__aeabi_uldivmod>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	4b0d      	ldr	r3, [pc, #52]	; (800a328 <UART_SetConfig+0x4e4>)
 800a2f2:	fba3 1302 	umull	r1, r3, r3, r2
 800a2f6:	095b      	lsrs	r3, r3, #5
 800a2f8:	2164      	movs	r1, #100	; 0x64
 800a2fa:	fb01 f303 	mul.w	r3, r1, r3
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	011b      	lsls	r3, r3, #4
 800a302:	3332      	adds	r3, #50	; 0x32
 800a304:	4a08      	ldr	r2, [pc, #32]	; (800a328 <UART_SetConfig+0x4e4>)
 800a306:	fba2 2303 	umull	r2, r3, r2, r3
 800a30a:	095b      	lsrs	r3, r3, #5
 800a30c:	f003 020f 	and.w	r2, r3, #15
 800a310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4422      	add	r2, r4
 800a318:	609a      	str	r2, [r3, #8]
}
 800a31a:	bf00      	nop
 800a31c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a320:	46bd      	mov	sp, r7
 800a322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a326:	bf00      	nop
 800a328:	51eb851f 	.word	0x51eb851f

0800a32c <arm_mat_trans_f32>:
 800a32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a330:	8802      	ldrh	r2, [r0, #0]
 800a332:	884b      	ldrh	r3, [r1, #2]
 800a334:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800a338:	684f      	ldr	r7, [r1, #4]
 800a33a:	8840      	ldrh	r0, [r0, #2]
 800a33c:	4293      	cmp	r3, r2
 800a33e:	b083      	sub	sp, #12
 800a340:	d14c      	bne.n	800a3dc <arm_mat_trans_f32+0xb0>
 800a342:	f8b1 e000 	ldrh.w	lr, [r1]
 800a346:	4586      	cmp	lr, r0
 800a348:	d148      	bne.n	800a3dc <arm_mat_trans_f32+0xb0>
 800a34a:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800a34e:	009c      	lsls	r4, r3, #2
 800a350:	f00e 0e03 	and.w	lr, lr, #3
 800a354:	fb08 f904 	mul.w	r9, r8, r4
 800a358:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800a35c:	011d      	lsls	r5, r3, #4
 800a35e:	00db      	lsls	r3, r3, #3
 800a360:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800a364:	eb07 0a04 	add.w	sl, r7, r4
 800a368:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800a36c:	9201      	str	r2, [sp, #4]
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	463b      	mov	r3, r7
 800a372:	f1b8 0f00 	cmp.w	r8, #0
 800a376:	d01d      	beq.n	800a3b4 <arm_mat_trans_f32+0x88>
 800a378:	9900      	ldr	r1, [sp, #0]
 800a37a:	f10c 0210 	add.w	r2, ip, #16
 800a37e:	4439      	add	r1, r7
 800a380:	4640      	mov	r0, r8
 800a382:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800a386:	601e      	str	r6, [r3, #0]
 800a388:	ed52 7a03 	vldr	s15, [r2, #-12]
 800a38c:	191e      	adds	r6, r3, r4
 800a38e:	edc6 7a00 	vstr	s15, [r6]
 800a392:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800a396:	600e      	str	r6, [r1, #0]
 800a398:	ed52 7a01 	vldr	s15, [r2, #-4]
 800a39c:	190e      	adds	r6, r1, r4
 800a39e:	3801      	subs	r0, #1
 800a3a0:	442b      	add	r3, r5
 800a3a2:	f102 0210 	add.w	r2, r2, #16
 800a3a6:	edc6 7a00 	vstr	s15, [r6]
 800a3aa:	4429      	add	r1, r5
 800a3ac:	d1e9      	bne.n	800a382 <arm_mat_trans_f32+0x56>
 800a3ae:	44dc      	add	ip, fp
 800a3b0:	eb09 0307 	add.w	r3, r9, r7
 800a3b4:	f1be 0f00 	cmp.w	lr, #0
 800a3b8:	d009      	beq.n	800a3ce <arm_mat_trans_f32+0xa2>
 800a3ba:	4672      	mov	r2, lr
 800a3bc:	4661      	mov	r1, ip
 800a3be:	f851 0b04 	ldr.w	r0, [r1], #4
 800a3c2:	6018      	str	r0, [r3, #0]
 800a3c4:	3a01      	subs	r2, #1
 800a3c6:	4423      	add	r3, r4
 800a3c8:	d1f9      	bne.n	800a3be <arm_mat_trans_f32+0x92>
 800a3ca:	9b01      	ldr	r3, [sp, #4]
 800a3cc:	449c      	add	ip, r3
 800a3ce:	3704      	adds	r7, #4
 800a3d0:	4557      	cmp	r7, sl
 800a3d2:	d1cd      	bne.n	800a370 <arm_mat_trans_f32+0x44>
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	b003      	add	sp, #12
 800a3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3dc:	f06f 0002 	mvn.w	r0, #2
 800a3e0:	e7f9      	b.n	800a3d6 <arm_mat_trans_f32+0xaa>
 800a3e2:	bf00      	nop

0800a3e4 <arm_mat_sub_f32>:
 800a3e4:	b4f0      	push	{r4, r5, r6, r7}
 800a3e6:	e9d1 4700 	ldrd	r4, r7, [r1]
 800a3ea:	6803      	ldr	r3, [r0, #0]
 800a3ec:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800a3f0:	6856      	ldr	r6, [r2, #4]
 800a3f2:	42a3      	cmp	r3, r4
 800a3f4:	d15d      	bne.n	800a4b2 <arm_mat_sub_f32+0xce>
 800a3f6:	6812      	ldr	r2, [r2, #0]
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d15a      	bne.n	800a4b2 <arm_mat_sub_f32+0xce>
 800a3fc:	8803      	ldrh	r3, [r0, #0]
 800a3fe:	8844      	ldrh	r4, [r0, #2]
 800a400:	fb04 f403 	mul.w	r4, r4, r3
 800a404:	08a5      	lsrs	r5, r4, #2
 800a406:	d032      	beq.n	800a46e <arm_mat_sub_f32+0x8a>
 800a408:	f10c 0110 	add.w	r1, ip, #16
 800a40c:	f107 0210 	add.w	r2, r7, #16
 800a410:	f106 0310 	add.w	r3, r6, #16
 800a414:	4628      	mov	r0, r5
 800a416:	ed12 7a04 	vldr	s14, [r2, #-16]
 800a41a:	ed51 7a04 	vldr	s15, [r1, #-16]
 800a41e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a422:	3801      	subs	r0, #1
 800a424:	ed43 7a04 	vstr	s15, [r3, #-16]
 800a428:	ed12 7a03 	vldr	s14, [r2, #-12]
 800a42c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800a430:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a434:	f101 0110 	add.w	r1, r1, #16
 800a438:	ed43 7a03 	vstr	s15, [r3, #-12]
 800a43c:	ed12 7a02 	vldr	s14, [r2, #-8]
 800a440:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800a444:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a448:	f102 0210 	add.w	r2, r2, #16
 800a44c:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a450:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800a454:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800a458:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a45c:	f103 0310 	add.w	r3, r3, #16
 800a460:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800a464:	d1d7      	bne.n	800a416 <arm_mat_sub_f32+0x32>
 800a466:	012b      	lsls	r3, r5, #4
 800a468:	449c      	add	ip, r3
 800a46a:	441f      	add	r7, r3
 800a46c:	441e      	add	r6, r3
 800a46e:	f014 0403 	ands.w	r4, r4, #3
 800a472:	d01b      	beq.n	800a4ac <arm_mat_sub_f32+0xc8>
 800a474:	eddc 7a00 	vldr	s15, [ip]
 800a478:	ed97 7a00 	vldr	s14, [r7]
 800a47c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a480:	3c01      	subs	r4, #1
 800a482:	edc6 7a00 	vstr	s15, [r6]
 800a486:	d011      	beq.n	800a4ac <arm_mat_sub_f32+0xc8>
 800a488:	eddc 7a01 	vldr	s15, [ip, #4]
 800a48c:	ed97 7a01 	vldr	s14, [r7, #4]
 800a490:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a494:	2c01      	cmp	r4, #1
 800a496:	edc6 7a01 	vstr	s15, [r6, #4]
 800a49a:	d007      	beq.n	800a4ac <arm_mat_sub_f32+0xc8>
 800a49c:	eddc 7a02 	vldr	s15, [ip, #8]
 800a4a0:	ed97 7a02 	vldr	s14, [r7, #8]
 800a4a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a4a8:	edc6 7a02 	vstr	s15, [r6, #8]
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	bcf0      	pop	{r4, r5, r6, r7}
 800a4b0:	4770      	bx	lr
 800a4b2:	f06f 0002 	mvn.w	r0, #2
 800a4b6:	e7fa      	b.n	800a4ae <arm_mat_sub_f32+0xca>

0800a4b8 <arm_mat_mult_f32>:
 800a4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4bc:	8845      	ldrh	r5, [r0, #2]
 800a4be:	880b      	ldrh	r3, [r1, #0]
 800a4c0:	8806      	ldrh	r6, [r0, #0]
 800a4c2:	6847      	ldr	r7, [r0, #4]
 800a4c4:	6854      	ldr	r4, [r2, #4]
 800a4c6:	6848      	ldr	r0, [r1, #4]
 800a4c8:	b08b      	sub	sp, #44	; 0x2c
 800a4ca:	42ab      	cmp	r3, r5
 800a4cc:	9109      	str	r1, [sp, #36]	; 0x24
 800a4ce:	9604      	str	r6, [sp, #16]
 800a4d0:	8849      	ldrh	r1, [r1, #2]
 800a4d2:	f040 808a 	bne.w	800a5ea <arm_mat_mult_f32+0x132>
 800a4d6:	8815      	ldrh	r5, [r2, #0]
 800a4d8:	42b5      	cmp	r5, r6
 800a4da:	f040 8086 	bne.w	800a5ea <arm_mat_mult_f32+0x132>
 800a4de:	8852      	ldrh	r2, [r2, #2]
 800a4e0:	428a      	cmp	r2, r1
 800a4e2:	f040 8082 	bne.w	800a5ea <arm_mat_mult_f32+0x132>
 800a4e6:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800a4ea:	1d01      	adds	r1, r0, #4
 800a4ec:	0116      	lsls	r6, r2, #4
 800a4ee:	9108      	str	r1, [sp, #32]
 800a4f0:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800a4f4:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800a4f8:	9101      	str	r1, [sp, #4]
 800a4fa:	fb06 f108 	mul.w	r1, r6, r8
 800a4fe:	0095      	lsls	r5, r2, #2
 800a500:	9103      	str	r1, [sp, #12]
 800a502:	00d2      	lsls	r2, r2, #3
 800a504:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800a508:	f003 0903 	and.w	r9, r3, #3
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	f107 0b10 	add.w	fp, r7, #16
 800a512:	eb04 0a05 	add.w	sl, r4, r5
 800a516:	9107      	str	r1, [sp, #28]
 800a518:	9202      	str	r2, [sp, #8]
 800a51a:	9306      	str	r3, [sp, #24]
 800a51c:	f1ab 0310 	sub.w	r3, fp, #16
 800a520:	9305      	str	r3, [sp, #20]
 800a522:	9b07      	ldr	r3, [sp, #28]
 800a524:	f8dd e020 	ldr.w	lr, [sp, #32]
 800a528:	eb03 0c0a 	add.w	ip, r3, sl
 800a52c:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a5f4 <arm_mat_mult_f32+0x13c>
 800a530:	f1b8 0f00 	cmp.w	r8, #0
 800a534:	d053      	beq.n	800a5de <arm_mat_mult_f32+0x126>
 800a536:	9b02      	ldr	r3, [sp, #8]
 800a538:	4644      	mov	r4, r8
 800a53a:	18c1      	adds	r1, r0, r3
 800a53c:	4602      	mov	r2, r0
 800a53e:	465b      	mov	r3, fp
 800a540:	ed92 6a00 	vldr	s12, [r2]
 800a544:	ed13 7a04 	vldr	s14, [r3, #-16]
 800a548:	ed53 4a03 	vldr	s9, [r3, #-12]
 800a54c:	ed53 6a02 	vldr	s13, [r3, #-8]
 800a550:	ed91 5a00 	vldr	s10, [r1]
 800a554:	ed53 5a01 	vldr	s11, [r3, #-4]
 800a558:	1957      	adds	r7, r2, r5
 800a55a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a55e:	ed97 6a00 	vldr	s12, [r7]
 800a562:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a566:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a56a:	194f      	adds	r7, r1, r5
 800a56c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a570:	ee26 7a85 	vmul.f32	s14, s13, s10
 800a574:	edd7 7a00 	vldr	s15, [r7]
 800a578:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a57c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a580:	3c01      	subs	r4, #1
 800a582:	4432      	add	r2, r6
 800a584:	4431      	add	r1, r6
 800a586:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a58a:	f103 0310 	add.w	r3, r3, #16
 800a58e:	d1d7      	bne.n	800a540 <arm_mat_mult_f32+0x88>
 800a590:	9b03      	ldr	r3, [sp, #12]
 800a592:	9a01      	ldr	r2, [sp, #4]
 800a594:	4418      	add	r0, r3
 800a596:	f1b9 0f00 	cmp.w	r9, #0
 800a59a:	d00b      	beq.n	800a5b4 <arm_mat_mult_f32+0xfc>
 800a59c:	464b      	mov	r3, r9
 800a59e:	edd0 6a00 	vldr	s13, [r0]
 800a5a2:	ecb2 7a01 	vldmia	r2!, {s14}
 800a5a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	4428      	add	r0, r5
 800a5ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5b2:	d1f4      	bne.n	800a59e <arm_mat_mult_f32+0xe6>
 800a5b4:	ecec 7a01 	vstmia	ip!, {s15}
 800a5b8:	45d4      	cmp	ip, sl
 800a5ba:	4670      	mov	r0, lr
 800a5bc:	f10e 0e04 	add.w	lr, lr, #4
 800a5c0:	d1b4      	bne.n	800a52c <arm_mat_mult_f32+0x74>
 800a5c2:	9a01      	ldr	r2, [sp, #4]
 800a5c4:	9b06      	ldr	r3, [sp, #24]
 800a5c6:	4611      	mov	r1, r2
 800a5c8:	4419      	add	r1, r3
 800a5ca:	449b      	add	fp, r3
 800a5cc:	9b04      	ldr	r3, [sp, #16]
 800a5ce:	9101      	str	r1, [sp, #4]
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	44aa      	add	sl, r5
 800a5d4:	9304      	str	r3, [sp, #16]
 800a5d6:	d004      	beq.n	800a5e2 <arm_mat_mult_f32+0x12a>
 800a5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5da:	6858      	ldr	r0, [r3, #4]
 800a5dc:	e79e      	b.n	800a51c <arm_mat_mult_f32+0x64>
 800a5de:	9a05      	ldr	r2, [sp, #20]
 800a5e0:	e7d9      	b.n	800a596 <arm_mat_mult_f32+0xde>
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	b00b      	add	sp, #44	; 0x2c
 800a5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ea:	f06f 0002 	mvn.w	r0, #2
 800a5ee:	b00b      	add	sp, #44	; 0x2c
 800a5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f4:	00000000 	.word	0x00000000

0800a5f8 <arm_mat_inverse_f32>:
 800a5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fc:	8843      	ldrh	r3, [r0, #2]
 800a5fe:	8804      	ldrh	r4, [r0, #0]
 800a600:	684e      	ldr	r6, [r1, #4]
 800a602:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800a606:	b087      	sub	sp, #28
 800a608:	429c      	cmp	r4, r3
 800a60a:	9301      	str	r3, [sp, #4]
 800a60c:	9603      	str	r6, [sp, #12]
 800a60e:	f040 80ea 	bne.w	800a7e6 <arm_mat_inverse_f32+0x1ee>
 800a612:	880a      	ldrh	r2, [r1, #0]
 800a614:	884b      	ldrh	r3, [r1, #2]
 800a616:	4293      	cmp	r3, r2
 800a618:	f040 80e5 	bne.w	800a7e6 <arm_mat_inverse_f32+0x1ee>
 800a61c:	429c      	cmp	r4, r3
 800a61e:	f040 80e2 	bne.w	800a7e6 <arm_mat_inverse_f32+0x1ee>
 800a622:	9005      	str	r0, [sp, #20]
 800a624:	b30c      	cbz	r4, 800a66a <arm_mat_inverse_f32+0x72>
 800a626:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800a62a:	1e67      	subs	r7, r4, #1
 800a62c:	f846 bb04 	str.w	fp, [r6], #4
 800a630:	d01b      	beq.n	800a66a <arm_mat_inverse_f32+0x72>
 800a632:	f04f 0801 	mov.w	r8, #1
 800a636:	00ba      	lsls	r2, r7, #2
 800a638:	eb06 0a02 	add.w	sl, r6, r2
 800a63c:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800a640:	4630      	mov	r0, r6
 800a642:	2100      	movs	r1, #0
 800a644:	f000 f97e 	bl	800a944 <memset>
 800a648:	eb0a 0605 	add.w	r6, sl, r5
 800a64c:	462a      	mov	r2, r5
 800a64e:	2100      	movs	r1, #0
 800a650:	4650      	mov	r0, sl
 800a652:	f1b8 0f00 	cmp.w	r8, #0
 800a656:	f000 80cb 	beq.w	800a7f0 <arm_mat_inverse_f32+0x1f8>
 800a65a:	f000 f973 	bl	800a944 <memset>
 800a65e:	3f01      	subs	r7, #1
 800a660:	f108 0801 	add.w	r8, r8, #1
 800a664:	f846 bb04 	str.w	fp, [r6], #4
 800a668:	d1e5      	bne.n	800a636 <arm_mat_inverse_f32+0x3e>
 800a66a:	9b01      	ldr	r3, [sp, #4]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f000 80b5 	beq.w	800a7dc <arm_mat_inverse_f32+0x1e4>
 800a672:	009d      	lsls	r5, r3, #2
 800a674:	eb09 0205 	add.w	r2, r9, r5
 800a678:	46cc      	mov	ip, r9
 800a67a:	9202      	str	r2, [sp, #8]
 800a67c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a680:	1d2a      	adds	r2, r5, #4
 800a682:	9204      	str	r2, [sp, #16]
 800a684:	462f      	mov	r7, r5
 800a686:	469e      	mov	lr, r3
 800a688:	2600      	movs	r6, #0
 800a68a:	9b02      	ldr	r3, [sp, #8]
 800a68c:	eddc 6a00 	vldr	s13, [ip]
 800a690:	42b4      	cmp	r4, r6
 800a692:	eba3 0b07 	sub.w	fp, r3, r7
 800a696:	f000 80a1 	beq.w	800a7dc <arm_mat_inverse_f32+0x1e4>
 800a69a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800a800 <arm_mat_inverse_f32+0x208>
 800a69e:	4632      	mov	r2, r6
 800a6a0:	4663      	mov	r3, ip
 800a6a2:	e00b      	b.n	800a6bc <arm_mat_inverse_f32+0xc4>
 800a6a4:	eef4 7a47 	vcmp.f32	s15, s14
 800a6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ac:	f102 0201 	add.w	r2, r2, #1
 800a6b0:	bfc8      	it	gt
 800a6b2:	eeb0 7a67 	vmovgt.f32	s14, s15
 800a6b6:	42a2      	cmp	r2, r4
 800a6b8:	442b      	add	r3, r5
 800a6ba:	d014      	beq.n	800a6e6 <arm_mat_inverse_f32+0xee>
 800a6bc:	edd3 7a00 	vldr	s15, [r3]
 800a6c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c8:	eeb1 6a67 	vneg.f32	s12, s15
 800a6cc:	dcea      	bgt.n	800a6a4 <arm_mat_inverse_f32+0xac>
 800a6ce:	eeb4 6a47 	vcmp.f32	s12, s14
 800a6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d6:	f102 0201 	add.w	r2, r2, #1
 800a6da:	bfc8      	it	gt
 800a6dc:	eeb0 7a46 	vmovgt.f32	s14, s12
 800a6e0:	42a2      	cmp	r2, r4
 800a6e2:	442b      	add	r3, r5
 800a6e4:	d1ea      	bne.n	800a6bc <arm_mat_inverse_f32+0xc4>
 800a6e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ee:	d075      	beq.n	800a7dc <arm_mat_inverse_f32+0x1e4>
 800a6f0:	eef5 6a40 	vcmp.f32	s13, #0.0
 800a6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6f8:	d070      	beq.n	800a7dc <arm_mat_inverse_f32+0x1e4>
 800a6fa:	4672      	mov	r2, lr
 800a6fc:	4663      	mov	r3, ip
 800a6fe:	ed93 7a00 	vldr	s14, [r3]
 800a702:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a706:	3a01      	subs	r2, #1
 800a708:	ece3 7a01 	vstmia	r3!, {s15}
 800a70c:	d1f7      	bne.n	800a6fe <arm_mat_inverse_f32+0x106>
 800a70e:	9901      	ldr	r1, [sp, #4]
 800a710:	464b      	mov	r3, r9
 800a712:	ed93 7a00 	vldr	s14, [r3]
 800a716:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a71a:	3901      	subs	r1, #1
 800a71c:	ece3 7a01 	vstmia	r3!, {s15}
 800a720:	d1f7      	bne.n	800a712 <arm_mat_inverse_f32+0x11a>
 800a722:	9803      	ldr	r0, [sp, #12]
 800a724:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800a728:	42b1      	cmp	r1, r6
 800a72a:	d039      	beq.n	800a7a0 <arm_mat_inverse_f32+0x1a8>
 800a72c:	eddb 6a00 	vldr	s13, [fp]
 800a730:	465a      	mov	r2, fp
 800a732:	4673      	mov	r3, lr
 800a734:	46e2      	mov	sl, ip
 800a736:	ecba 7a01 	vldmia	sl!, {s14}
 800a73a:	edd2 7a00 	vldr	s15, [r2]
 800a73e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a742:	3b01      	subs	r3, #1
 800a744:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a748:	ece2 7a01 	vstmia	r2!, {s15}
 800a74c:	d1f3      	bne.n	800a736 <arm_mat_inverse_f32+0x13e>
 800a74e:	9b01      	ldr	r3, [sp, #4]
 800a750:	44bb      	add	fp, r7
 800a752:	4602      	mov	r2, r0
 800a754:	46ca      	mov	sl, r9
 800a756:	ecba 7a01 	vldmia	sl!, {s14}
 800a75a:	edd2 7a00 	vldr	s15, [r2]
 800a75e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a762:	3b01      	subs	r3, #1
 800a764:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a768:	ece2 7a01 	vstmia	r2!, {s15}
 800a76c:	d1f3      	bne.n	800a756 <arm_mat_inverse_f32+0x15e>
 800a76e:	4428      	add	r0, r5
 800a770:	3101      	adds	r1, #1
 800a772:	428c      	cmp	r4, r1
 800a774:	44c3      	add	fp, r8
 800a776:	d1d7      	bne.n	800a728 <arm_mat_inverse_f32+0x130>
 800a778:	9b04      	ldr	r3, [sp, #16]
 800a77a:	f1be 0e01 	subs.w	lr, lr, #1
 800a77e:	f106 0601 	add.w	r6, r6, #1
 800a782:	449c      	add	ip, r3
 800a784:	f1a7 0704 	sub.w	r7, r7, #4
 800a788:	44a9      	add	r9, r5
 800a78a:	f47f af7e 	bne.w	800a68a <arm_mat_inverse_f32+0x92>
 800a78e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800a792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a796:	d006      	beq.n	800a7a6 <arm_mat_inverse_f32+0x1ae>
 800a798:	2000      	movs	r0, #0
 800a79a:	b007      	add	sp, #28
 800a79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a0:	44bb      	add	fp, r7
 800a7a2:	4428      	add	r0, r5
 800a7a4:	e7e4      	b.n	800a770 <arm_mat_inverse_f32+0x178>
 800a7a6:	9b05      	ldr	r3, [sp, #20]
 800a7a8:	9a01      	ldr	r2, [sp, #4]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	edd3 7a00 	vldr	s15, [r3]
 800a7b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a7b4:	fb02 f204 	mul.w	r2, r2, r4
 800a7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7bc:	4614      	mov	r4, r2
 800a7be:	bf08      	it	eq
 800a7c0:	3304      	addeq	r3, #4
 800a7c2:	d007      	beq.n	800a7d4 <arm_mat_inverse_f32+0x1dc>
 800a7c4:	e7e8      	b.n	800a798 <arm_mat_inverse_f32+0x1a0>
 800a7c6:	ecf3 7a01 	vldmia	r3!, {s15}
 800a7ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d2:	d1e1      	bne.n	800a798 <arm_mat_inverse_f32+0x1a0>
 800a7d4:	f10e 0e01 	add.w	lr, lr, #1
 800a7d8:	4574      	cmp	r4, lr
 800a7da:	d1f4      	bne.n	800a7c6 <arm_mat_inverse_f32+0x1ce>
 800a7dc:	f06f 0004 	mvn.w	r0, #4
 800a7e0:	b007      	add	sp, #28
 800a7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e6:	f06f 0002 	mvn.w	r0, #2
 800a7ea:	b007      	add	sp, #28
 800a7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f0:	4656      	mov	r6, sl
 800a7f2:	3f01      	subs	r7, #1
 800a7f4:	f846 bb04 	str.w	fp, [r6], #4
 800a7f8:	f47f af1b 	bne.w	800a632 <arm_mat_inverse_f32+0x3a>
 800a7fc:	e735      	b.n	800a66a <arm_mat_inverse_f32+0x72>
 800a7fe:	bf00      	nop
 800a800:	00000000 	.word	0x00000000

0800a804 <arm_mat_init_f32>:
 800a804:	8001      	strh	r1, [r0, #0]
 800a806:	8042      	strh	r2, [r0, #2]
 800a808:	6043      	str	r3, [r0, #4]
 800a80a:	4770      	bx	lr

0800a80c <arm_mat_add_f32>:
 800a80c:	b4f0      	push	{r4, r5, r6, r7}
 800a80e:	e9d1 4700 	ldrd	r4, r7, [r1]
 800a812:	6803      	ldr	r3, [r0, #0]
 800a814:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800a818:	6856      	ldr	r6, [r2, #4]
 800a81a:	42a3      	cmp	r3, r4
 800a81c:	d15d      	bne.n	800a8da <arm_mat_add_f32+0xce>
 800a81e:	6812      	ldr	r2, [r2, #0]
 800a820:	4293      	cmp	r3, r2
 800a822:	d15a      	bne.n	800a8da <arm_mat_add_f32+0xce>
 800a824:	8803      	ldrh	r3, [r0, #0]
 800a826:	8844      	ldrh	r4, [r0, #2]
 800a828:	fb04 f403 	mul.w	r4, r4, r3
 800a82c:	08a5      	lsrs	r5, r4, #2
 800a82e:	d032      	beq.n	800a896 <arm_mat_add_f32+0x8a>
 800a830:	f10c 0110 	add.w	r1, ip, #16
 800a834:	f107 0210 	add.w	r2, r7, #16
 800a838:	f106 0310 	add.w	r3, r6, #16
 800a83c:	4628      	mov	r0, r5
 800a83e:	ed12 7a04 	vldr	s14, [r2, #-16]
 800a842:	ed51 7a04 	vldr	s15, [r1, #-16]
 800a846:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a84a:	3801      	subs	r0, #1
 800a84c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800a850:	ed12 7a03 	vldr	s14, [r2, #-12]
 800a854:	ed51 7a03 	vldr	s15, [r1, #-12]
 800a858:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a85c:	f101 0110 	add.w	r1, r1, #16
 800a860:	ed43 7a03 	vstr	s15, [r3, #-12]
 800a864:	ed12 7a02 	vldr	s14, [r2, #-8]
 800a868:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800a86c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a870:	f102 0210 	add.w	r2, r2, #16
 800a874:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a878:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800a87c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800a880:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a884:	f103 0310 	add.w	r3, r3, #16
 800a888:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800a88c:	d1d7      	bne.n	800a83e <arm_mat_add_f32+0x32>
 800a88e:	012b      	lsls	r3, r5, #4
 800a890:	449c      	add	ip, r3
 800a892:	441f      	add	r7, r3
 800a894:	441e      	add	r6, r3
 800a896:	f014 0403 	ands.w	r4, r4, #3
 800a89a:	d01b      	beq.n	800a8d4 <arm_mat_add_f32+0xc8>
 800a89c:	edd7 7a00 	vldr	s15, [r7]
 800a8a0:	ed9c 7a00 	vldr	s14, [ip]
 800a8a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8a8:	3c01      	subs	r4, #1
 800a8aa:	edc6 7a00 	vstr	s15, [r6]
 800a8ae:	d011      	beq.n	800a8d4 <arm_mat_add_f32+0xc8>
 800a8b0:	eddc 7a01 	vldr	s15, [ip, #4]
 800a8b4:	ed97 7a01 	vldr	s14, [r7, #4]
 800a8b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8bc:	2c01      	cmp	r4, #1
 800a8be:	edc6 7a01 	vstr	s15, [r6, #4]
 800a8c2:	d007      	beq.n	800a8d4 <arm_mat_add_f32+0xc8>
 800a8c4:	eddc 7a02 	vldr	s15, [ip, #8]
 800a8c8:	ed97 7a02 	vldr	s14, [r7, #8]
 800a8cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8d0:	edc6 7a02 	vstr	s15, [r6, #8]
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	bcf0      	pop	{r4, r5, r6, r7}
 800a8d8:	4770      	bx	lr
 800a8da:	f06f 0002 	mvn.w	r0, #2
 800a8de:	e7fa      	b.n	800a8d6 <arm_mat_add_f32+0xca>

0800a8e0 <__libc_init_array>:
 800a8e0:	b570      	push	{r4, r5, r6, lr}
 800a8e2:	4d0d      	ldr	r5, [pc, #52]	; (800a918 <__libc_init_array+0x38>)
 800a8e4:	4c0d      	ldr	r4, [pc, #52]	; (800a91c <__libc_init_array+0x3c>)
 800a8e6:	1b64      	subs	r4, r4, r5
 800a8e8:	10a4      	asrs	r4, r4, #2
 800a8ea:	2600      	movs	r6, #0
 800a8ec:	42a6      	cmp	r6, r4
 800a8ee:	d109      	bne.n	800a904 <__libc_init_array+0x24>
 800a8f0:	4d0b      	ldr	r5, [pc, #44]	; (800a920 <__libc_init_array+0x40>)
 800a8f2:	4c0c      	ldr	r4, [pc, #48]	; (800a924 <__libc_init_array+0x44>)
 800a8f4:	f000 f82e 	bl	800a954 <_init>
 800a8f8:	1b64      	subs	r4, r4, r5
 800a8fa:	10a4      	asrs	r4, r4, #2
 800a8fc:	2600      	movs	r6, #0
 800a8fe:	42a6      	cmp	r6, r4
 800a900:	d105      	bne.n	800a90e <__libc_init_array+0x2e>
 800a902:	bd70      	pop	{r4, r5, r6, pc}
 800a904:	f855 3b04 	ldr.w	r3, [r5], #4
 800a908:	4798      	blx	r3
 800a90a:	3601      	adds	r6, #1
 800a90c:	e7ee      	b.n	800a8ec <__libc_init_array+0xc>
 800a90e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a912:	4798      	blx	r3
 800a914:	3601      	adds	r6, #1
 800a916:	e7f2      	b.n	800a8fe <__libc_init_array+0x1e>
 800a918:	0800a994 	.word	0x0800a994
 800a91c:	0800a994 	.word	0x0800a994
 800a920:	0800a994 	.word	0x0800a994
 800a924:	0800a998 	.word	0x0800a998

0800a928 <memcpy>:
 800a928:	440a      	add	r2, r1
 800a92a:	4291      	cmp	r1, r2
 800a92c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a930:	d100      	bne.n	800a934 <memcpy+0xc>
 800a932:	4770      	bx	lr
 800a934:	b510      	push	{r4, lr}
 800a936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a93a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a93e:	4291      	cmp	r1, r2
 800a940:	d1f9      	bne.n	800a936 <memcpy+0xe>
 800a942:	bd10      	pop	{r4, pc}

0800a944 <memset>:
 800a944:	4402      	add	r2, r0
 800a946:	4603      	mov	r3, r0
 800a948:	4293      	cmp	r3, r2
 800a94a:	d100      	bne.n	800a94e <memset+0xa>
 800a94c:	4770      	bx	lr
 800a94e:	f803 1b01 	strb.w	r1, [r3], #1
 800a952:	e7f9      	b.n	800a948 <memset+0x4>

0800a954 <_init>:
 800a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a956:	bf00      	nop
 800a958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95a:	bc08      	pop	{r3}
 800a95c:	469e      	mov	lr, r3
 800a95e:	4770      	bx	lr

0800a960 <_fini>:
 800a960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a962:	bf00      	nop
 800a964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a966:	bc08      	pop	{r3}
 800a968:	469e      	mov	lr, r3
 800a96a:	4770      	bx	lr
