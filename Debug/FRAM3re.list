
FRAM3re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9a4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800bb3c  0800bb3c  0001bb3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb5c  0800bb5c  0002043c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb5c  0800bb5c  0001bb5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb64  0800bb64  0002043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb64  0800bb64  0001bb64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb68  0800bb68  0001bb68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000043c  20000000  0800bb6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  20000440  0800bfa8  00020440  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b24  0800bfa8  00020b24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001783b  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030af  00000000  00000000  00037ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0003ad58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  0003bea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001789a  00000000  00000000  0003ced8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016345  00000000  00000000  00054772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009304a  00000000  00000000  0006aab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000fdb01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049d8  00000000  00000000  000fdbc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  001025a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000440 	.word	0x20000440
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800bb24 	.word	0x0800bb24

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000444 	.word	0x20000444
 80001d4:	0800bb24 	.word	0x0800bb24

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	f00a fe32 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	f00a fe29 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 2, 3, KalmanVar ->MatC_Data);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	2102      	movs	r1, #2
 8000d90:	f00a fe20 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3348      	adds	r3, #72	; 0x48
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2101      	movs	r1, #1
 8000da2:	f00a fe17 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f503 7047 	add.w	r0, r3, #796	; 0x31c
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	334c      	adds	r3, #76	; 0x4c
 8000db0:	2203      	movs	r2, #3
 8000db2:	2103      	movs	r1, #3
 8000db4:	f00a fe0e 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 2, 2, KalmanVar ->MatR_Data);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3370      	adds	r3, #112	; 0x70
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	f00a fe05 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3380      	adds	r3, #128	; 0x80
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	f00a fdfc 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f503 704d 	add.w	r0, r3, #820	; 0x334
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	33a4      	adds	r3, #164	; 0xa4
 8000de6:	2201      	movs	r2, #1
 8000de8:	2103      	movs	r1, #3
 8000dea:	f00a fdf3 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	33b0      	adds	r3, #176	; 0xb0
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	f00a fdea 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	33bc      	adds	r3, #188	; 0xbc
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	f00a fde1 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f503 7053 	add.w	r0, r3, #844	; 0x34c
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	33e0      	adds	r3, #224	; 0xe0
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	2103      	movs	r1, #3
 8000e20:	f00a fdd8 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 2, 1, KalmanVar ->MatY_Data);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f503 7055 	add.w	r0, r3, #852	; 0x354
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e30:	2201      	movs	r2, #1
 8000e32:	2102      	movs	r1, #2
 8000e34:	f00a fdce 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 2, 1, KalmanVar ->MatZ_Data);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000e44:	2201      	movs	r2, #1
 8000e46:	2102      	movs	r1, #2
 8000e48:	f00a fdc4 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 2, 2, KalmanVar ->MatS_Data);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8000e58:	2202      	movs	r2, #2
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	f00a fdba 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 2, KalmanVar ->MatK_Data);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	2103      	movs	r1, #3
 8000e70:	f00a fdb0 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f503 705d 	add.w	r0, r3, #884	; 0x374
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000e80:	2203      	movs	r2, #3
 8000e82:	2103      	movs	r1, #3
 8000e84:	f00a fda6 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f503 705f 	add.w	r0, r3, #892	; 0x37c
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000e94:	2203      	movs	r2, #3
 8000e96:	2103      	movs	r1, #3
 8000e98:	f00a fd9c 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f503 7061 	add.w	r0, r3, #900	; 0x384
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	2103      	movs	r1, #3
 8000eac:	f00a fd92 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQ), 3, 3, KalmanVar ->MatGQ_Data);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f503 7063 	add.w	r0, r3, #908	; 0x38c
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	f00a fd88 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 2, KalmanVar ->MatCt_Data);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f503 7065 	add.w	r0, r3, #916	; 0x394
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	2103      	movs	r1, #3
 8000ed4:	f00a fd7e 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f503 7069 	add.w	r0, r3, #932	; 0x3a4
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	2103      	movs	r1, #3
 8000ee8:	f00a fd74 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 2, 2, KalmanVar ->MatSinv_Data);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8000ef8:	2202      	movs	r2, #2
 8000efa:	2102      	movs	r1, #2
 8000efc:	f00a fd6a 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 2, 3, KalmanVar ->MatCPk_Data);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f503 706b 	add.w	r0, r3, #940	; 0x3ac
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	2102      	movs	r1, #2
 8000f10:	f00a fd60 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f503 706d 	add.w	r0, r3, #948	; 0x3b4
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000f20:	2203      	movs	r2, #3
 8000f22:	2103      	movs	r1, #3
 8000f24:	f00a fd56 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f503 706f 	add.w	r0, r3, #956	; 0x3bc
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8000f34:	2203      	movs	r2, #3
 8000f36:	2103      	movs	r1, #3
 8000f38:	f00a fd4c 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 2, 1, KalmanVar ->MatCXk_Data);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	f00a fd42 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 2, 2, KalmanVar ->MatCPkCt_Data);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	2102      	movs	r1, #2
 8000f60:	f00a fd38 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 2, KalmanVar ->MatPkCt_Data);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f503 7075 	add.w	r0, r3, #980	; 0x3d4
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8000f70:	2202      	movs	r2, #2
 8000f72:	2103      	movs	r1, #3
 8000f74:	f00a fd2e 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f503 7077 	add.w	r0, r3, #988	; 0x3dc
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8000f84:	2201      	movs	r2, #1
 8000f86:	2103      	movs	r1, #3
 8000f88:	f00a fd24 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f503 7079 	add.w	r0, r3, #996	; 0x3e4
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8000f98:	2203      	movs	r2, #3
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	f00a fd1a 	bl	800b9d4 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f503 707b 	add.w	r0, r3, #1004	; 0x3ec
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8000fac:	2203      	movs	r2, #3
 8000fae:	2103      	movs	r1, #3
 8000fb0:	f00a fd10 	bl	800b9d4 <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f503 723f 	add.w	r2, r3, #764	; 0x2fc
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	f00a fa9a 	bl	800b4fc <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	f00a fa90 	bl	800b4fc <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f503 7243 	add.w	r2, r3, #780	; 0x30c
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4610      	mov	r0, r2
 8000fec:	f00a fa86 	bl	800b4fc <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQ));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8001002:	461a      	mov	r2, r3
 8001004:	f00a fb40 	bl	800b688 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQ), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f503 7063 	add.w	r0, r3, #908	; 0x38c
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f503 7161 	add.w	r1, r3, #900	; 0x384
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800101a:	461a      	mov	r2, r3
 800101c:	f00a fb34 	bl	800b688 <arm_mat_mult_f32>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <KalmanMatrixReset>:

void KalmanMatrixReset(KalmanFilterVar *KalmanVar , float Pvar)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	ed87 0a00 	vstr	s0, [r7]
	for (int index = 0; index < 3; ++index)
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	e013      	b.n	8001062 <KalmanMatrixReset+0x3a>
	{
		KalmanVar ->MatStateLast_Data[index] = 0.0;
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	332c      	adds	r3, #44	; 0x2c
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
		KalmanVar ->MatState_Data[index] = 0.0;
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3328      	adds	r3, #40	; 0x28
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	3304      	adds	r3, #4
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
	for (int index = 0; index < 3; ++index)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3301      	adds	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2b02      	cmp	r3, #2
 8001066:	dde8      	ble.n	800103a <KalmanMatrixReset+0x12>
	}

	KalmanVar ->MatPredict_Data[0] = Pvar;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	KalmanVar ->MatPredictLast_Data[0] = Pvar;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	KalmanVar ->MatPredict_Data[1] = 0.0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	KalmanVar ->MatPredictLast_Data[1] = 0.0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	KalmanVar ->MatPredict_Data[2] = 0.0;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	KalmanVar ->MatPredictLast_Data[2] = 0.0;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	KalmanVar ->MatPredict_Data[3] = 0.0;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	KalmanVar ->MatPredictLast_Data[3] = 0.0;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	KalmanVar ->MatPredict_Data[4] = Pvar;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	KalmanVar ->MatPredictLast_Data[4] = Pvar;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	KalmanVar ->MatPredict_Data[5] = 0.0;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	KalmanVar ->MatPredictLast_Data[5] = 0.0;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

	KalmanVar ->MatPredict_Data[6] = 0.0;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	KalmanVar ->MatPredictLast_Data[6] = 0.0;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	KalmanVar ->MatPredict_Data[7] = 0.0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	KalmanVar ->MatPredictLast_Data[7] = 0.0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	KalmanVar ->MatPredict_Data[8] = Pvar;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	KalmanVar ->MatPredictLast_Data[8] = Pvar;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg,float32_t VelocityDeg)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	ed87 0a02 	vstr	s0, [r7, #8]
 8001128:	edc7 0a01 	vstr	s1, [r7, #4]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f503 714f 	add.w	r1, r3, #828	; 0x33c
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800113e:	461a      	mov	r2, r3
 8001140:	f00a faa2 	bl	800b688 <arm_mat_mult_f32>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f503 7153 	add.w	r1, r3, #844	; 0x34c
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8001160:	461a      	mov	r2, r3
 8001162:	f00a fa91 	bl	800b688 <arm_mat_mult_f32>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f503 706d 	add.w	r0, r3, #948	; 0x3b4
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f503 715f 	add.w	r1, r3, #892	; 0x37c
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001182:	461a      	mov	r2, r3
 8001184:	f00a fa80 	bl	800b688 <arm_mat_mult_f32>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f503 706f 	add.w	r0, r3, #956	; 0x3bc
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80011a4:	461a      	mov	r2, r3
 80011a6:	f00a fc19 	bl	800b9dc <arm_mat_add_f32>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	KalmanVar -> MatZ_Data[1] = VelocityDeg; // Sensor Input
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f503 714d 	add.w	r1, r3, #820	; 0x334
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80011d6:	461a      	mov	r2, r3
 80011d8:	f00a fa56 	bl	800b688 <arm_mat_mult_f32>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f503 7171 	add.w	r1, r3, #964	; 0x3c4
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80011f8:	461a      	mov	r2, r3
 80011fa:	f00a f9db 	bl	800b5b4 <arm_mat_sub_f32>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f503 7151 	add.w	r1, r3, #836	; 0x344
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 800121a:	461a      	mov	r2, r3
 800121c:	f00a fa34 	bl	800b688 <arm_mat_mult_f32>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f503 706b 	add.w	r0, r3, #940	; 0x3ac
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f503 7165 	add.w	r1, r3, #916	; 0x394
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 800123c:	461a      	mov	r2, r3
 800123e:	f00a fa23 	bl	800b688 <arm_mat_mult_f32>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f503 7149 	add.w	r1, r3, #804	; 0x324
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800125e:	461a      	mov	r2, r3
 8001260:	f00a fbbc 	bl	800b9dc <arm_mat_add_f32>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f503 7259 	add.w	r2, r3, #868	; 0x364
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 800127a:	4619      	mov	r1, r3
 800127c:	4610      	mov	r0, r2
 800127e:	f00a faa3 	bl	800b7c8 <arm_mat_inverse_f32>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f503 7165 	add.w	r1, r3, #916	; 0x394
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 800129e:	461a      	mov	r2, r3
 80012a0:	f00a f9f2 	bl	800b688 <arm_mat_mult_f32>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f503 7075 	add.w	r0, r3, #980	; 0x3d4
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f503 7167 	add.w	r1, r3, #924	; 0x39c
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80012c0:	461a      	mov	r2, r3
 80012c2:	f00a f9e1 	bl	800b688 <arm_mat_mult_f32>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f503 7155 	add.w	r1, r3, #852	; 0x354
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80012e2:	461a      	mov	r2, r3
 80012e4:	f00a f9d0 	bl	800b688 <arm_mat_mult_f32>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f503 7077 	add.w	r0, r3, #988	; 0x3dc
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f503 714d 	add.w	r1, r3, #820	; 0x334
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8001304:	461a      	mov	r2, r3
 8001306:	f00a fb69 	bl	800b9dc <arm_mat_add_f32>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f503 7143 	add.w	r1, r3, #780	; 0x30c
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8001326:	461a      	mov	r2, r3
 8001328:	f00a f9ae 	bl	800b688 <arm_mat_mult_f32>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f503 705d 	add.w	r0, r3, #884	; 0x374
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f503 7179 	add.w	r1, r3, #996	; 0x3e4
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8001348:	461a      	mov	r2, r3
 800134a:	f00a f933 	bl	800b5b4 <arm_mat_sub_f32>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f503 707b 	add.w	r0, r3, #1004	; 0x3ec
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f503 7151 	add.w	r1, r3, #836	; 0x344
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800136a:	461a      	mov	r2, r3
 800136c:	f00a f98c 	bl	800b688 <arm_mat_mult_f32>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <PIDAController_Init>:

#define PID_LIM_MIN_INT -10000.0f
#define PID_LIM_MAX_INT  10000.0f

void PIDAController_Init(PIDAController *pid)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	pid->Last1Error = 0.0f;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
	pid->Last2Error = 0.0f;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	625a      	str	r2, [r3, #36]	; 0x24

	pid->differentiatorOutput = 0.0f;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
	pid->integratorOutput = 0.0f;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
	pid->proportionalOutput = 0.0f;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	61da      	str	r2, [r3, #28]

	pid->ControllerOut = 0.0f;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
	pid->ControllerLastOut = 0.0f;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c

	pid->OutputMax = PID_LIM_MAX_INT;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <PIDAController_Init+0x58>)
 80013c8:	611a      	str	r2, [r3, #16]
	pid->OutputMin = PID_LIM_MIN_INT;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <PIDAController_Init+0x5c>)
 80013ce:	60da      	str	r2, [r3, #12]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	461c4000 	.word	0x461c4000
 80013e0:	c61c4000 	.word	0xc61c4000
 80013e4:	00000000 	.word	0x00000000

080013e8 <PIDAPositonController_Update>:

float PIDAPositonController_Update(PIDAController *pid, float setpoint, float measurement, float Distance)
{
 80013e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013ec:	ed2d 8b02 	vpush	{d8}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	60f8      	str	r0, [r7, #12]
 80013f6:	ed87 0a02 	vstr	s0, [r7, #8]
 80013fa:	edc7 0a01 	vstr	s1, [r7, #4]
 80013fe:	ed87 1a00 	vstr	s2, [r7]
    float error = setpoint - measurement;
 8001402:	ed97 7a02 	vldr	s14, [r7, #8]
 8001406:	edd7 7a01 	vldr	s15, [r7, #4]
 800140a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140e:	edc7 7a05 	vstr	s15, [r7, #20]
    float errorDZ = error;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	613b      	str	r3, [r7, #16]
//	pid->Kp  = 6.0;
//	pid->Ki  = 0.0;
//	pid->Kd  = 0.0;

    // Scurve Trajectory
    if(AbsVal(setpoint) <= AbsVal(0.1*Distance)) // 10 deg/s
 8001416:	ed97 0a02 	vldr	s0, [r7, #8]
 800141a:	f000 fa07 	bl	800182c <AbsVal>
 800141e:	eeb0 8a40 	vmov.f32	s16, s0
 8001422:	6838      	ldr	r0, [r7, #0]
 8001424:	f7ff f83c 	bl	80004a0 <__aeabi_f2d>
 8001428:	a369      	add	r3, pc, #420	; (adr r3, 80015d0 <PIDAPositonController_Update+0x1e8>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff f88f 	bl	8000550 <__aeabi_dmul>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fabb 	bl	80009b4 <__aeabi_d2f>
 800143e:	4603      	mov	r3, r0
 8001440:	ee00 3a10 	vmov	s0, r3
 8001444:	f000 f9f2 	bl	800182c <AbsVal>
 8001448:	eef0 7a40 	vmov.f32	s15, s0
 800144c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001454:	d80a      	bhi.n	800146c <PIDAPositonController_Update+0x84>
    {
//    	pid->Kp  = 0.2;
//    	pid->Ki  = 6.0;
//    	pid->Kd  = 0.0;
    	pid->Kp  = 6.0;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4a5b      	ldr	r2, [pc, #364]	; (80015c8 <PIDAPositonController_Update+0x1e0>)
 800145a:	601a      	str	r2, [r3, #0]
    	pid->Ki  = 0.05;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4a5b      	ldr	r2, [pc, #364]	; (80015cc <PIDAPositonController_Update+0x1e4>)
 8001460:	605a      	str	r2, [r3, #4]
    	pid->Kd  = 0.0;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	e009      	b.n	8001480 <PIDAPositonController_Update+0x98>
    }
    else
    {
    	pid->Kp  = 6.0;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4a56      	ldr	r2, [pc, #344]	; (80015c8 <PIDAPositonController_Update+0x1e0>)
 8001470:	601a      	str	r2, [r3, #0]
    	pid->Ki  = 0.05;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4a55      	ldr	r2, [pc, #340]	; (80015cc <PIDAPositonController_Update+0x1e4>)
 8001476:	605a      	str	r2, [r3, #4]
    	pid->Kd  = 0.0;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
    }
	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	ed93 7a00 	vldr	s14, [r3]
 8001486:	edd7 7a04 	vldr	s15, [r7, #16]
 800148a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	edd3 6a00 	vldr	s13, [r3]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	edd3 7a08 	vldr	s15, [r3, #32]
 800149a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80014ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80014b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe ffed 	bl	80004a0 <__aeabi_f2d>
 80014c6:	4604      	mov	r4, r0
 80014c8:	460d      	mov	r5, r1
 80014ca:	6938      	ldr	r0, [r7, #16]
 80014cc:	f7fe ffe8 	bl	80004a0 <__aeabi_f2d>
 80014d0:	4680      	mov	r8, r0
 80014d2:	4689      	mov	r9, r1
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ffe1 	bl	80004a0 <__aeabi_f2d>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	f7fe fe7f 	bl	80001e4 <__adddf3>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4640      	mov	r0, r8
 80014ec:	4649      	mov	r1, r9
 80014ee:	f7fe fe77 	bl	80001e0 <__aeabi_dsub>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4690      	mov	r8, r2
 80014f8:	4699      	mov	r9, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe ffce 	bl	80004a0 <__aeabi_f2d>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4640      	mov	r0, r8
 800150a:	4649      	mov	r1, r9
 800150c:	f7fe fe6a 	bl	80001e4 <__adddf3>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4620      	mov	r0, r4
 8001516:	4629      	mov	r1, r5
 8001518:	f7ff f81a 	bl	8000550 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fa46 	bl	80009b4 <__aeabi_d2f>
 8001528:	4602      	mov	r2, r0
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	ed93 7a07 	vldr	s14, [r3, #28]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	edd3 7a05 	vldr	s15, [r3, #20]
 800153a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	edd3 7a06 	vldr	s15, [r3, #24]
 8001544:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800154e:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	edd3 7a04 	vldr	s15, [r3, #16]
 8001564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	dd04      	ble.n	8001578 <PIDAPositonController_Update+0x190>

    	pid->ControllerOut = pid->OutputMax;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	629a      	str	r2, [r3, #40]	; 0x28
 8001576:	e00e      	b.n	8001596 <PIDAPositonController_Update+0x1ae>

    } else if (pid->ControllerOut < pid->OutputMin) {
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	edd3 7a03 	vldr	s15, [r3, #12]
 8001584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158c:	d503      	bpl.n	8001596 <PIDAPositonController_Update+0x1ae>

    	pid->ControllerOut = pid->OutputMin;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6a1a      	ldr	r2, [r3, #32]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	ee07 3a90 	vmov	s15, r3
}
 80015b4:	eeb0 0a67 	vmov.f32	s0, s15
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	ecbd 8b02 	vpop	{d8}
 80015c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015c4:	f3af 8000 	nop.w
 80015c8:	40c00000 	.word	0x40c00000
 80015cc:	3d4ccccd 	.word	0x3d4ccccd
 80015d0:	9999999a 	.word	0x9999999a
 80015d4:	3fb99999 	.word	0x3fb99999

080015d8 <PIDAVelocityController_Update>:



float PIDAVelocityController_Update(PIDAController *pid, float setpoint, float measurement,float VMCal){
 80015d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	ed87 0a02 	vstr	s0, [r7, #8]
 80015e6:	edc7 0a01 	vstr	s1, [r7, #4]
 80015ea:	ed87 1a00 	vstr	s2, [r7]

    float error = setpoint - measurement;
 80015ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80015f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fa:	edc7 7a05 	vstr	s15, [r7, #20]
    float errorDZ = error;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	613b      	str	r3, [r7, #16]
//    {
//    	pid->Kp  = 0.2;
//    	pid->Ki  = 0.1;
//    	pid->Kd  = 0;
//    }
	pid->Kp  = 0.160041136848727;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4a54      	ldr	r2, [pc, #336]	; (8001758 <PIDAVelocityController_Update+0x180>)
 8001606:	601a      	str	r2, [r3, #0]
	pid->Ki  = 3.13946329365331;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4a54      	ldr	r2, [pc, #336]	; (800175c <PIDAVelocityController_Update+0x184>)
 800160c:	605a      	str	r2, [r3, #4]
	pid->Kd  = 0.0;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	ed93 7a00 	vldr	s14, [r3]
 800161c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001620:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	edd3 6a00 	vldr	s13, [r3]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	ed93 7a01 	vldr	s14, [r3, #4]
 8001644:	edd7 7a04 	vldr	s15, [r7, #16]
 8001648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff22 	bl	80004a0 <__aeabi_f2d>
 800165c:	4604      	mov	r4, r0
 800165e:	460d      	mov	r5, r1
 8001660:	6938      	ldr	r0, [r7, #16]
 8001662:	f7fe ff1d 	bl	80004a0 <__aeabi_f2d>
 8001666:	4680      	mov	r8, r0
 8001668:	4689      	mov	r9, r1
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff16 	bl	80004a0 <__aeabi_f2d>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	f7fe fdb4 	bl	80001e4 <__adddf3>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4640      	mov	r0, r8
 8001682:	4649      	mov	r1, r9
 8001684:	f7fe fdac 	bl	80001e0 <__aeabi_dsub>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4690      	mov	r8, r2
 800168e:	4699      	mov	r9, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff03 	bl	80004a0 <__aeabi_f2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4640      	mov	r0, r8
 80016a0:	4649      	mov	r1, r9
 80016a2:	f7fe fd9f 	bl	80001e4 <__adddf3>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4620      	mov	r0, r4
 80016ac:	4629      	mov	r1, r5
 80016ae:	f7fe ff4f 	bl	8000550 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f7ff f97b 	bl	80009b4 <__aeabi_d2f>
 80016be:	4602      	mov	r2, r0
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	ed93 7a07 	vldr	s14, [r3, #28]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80016d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80016da:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80016e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	edd3 7a04 	vldr	s15, [r3, #16]
 80016fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	dd04      	ble.n	800170e <PIDAVelocityController_Update+0x136>

    	pid->ControllerOut = pid->OutputMax;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	691a      	ldr	r2, [r3, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
 800170c:	e00e      	b.n	800172c <PIDAVelocityController_Update+0x154>

    } else if (pid->ControllerOut < pid->OutputMin) {
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	edd3 7a03 	vldr	s15, [r3, #12]
 800171a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800171e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001722:	d503      	bpl.n	800172c <PIDAVelocityController_Update+0x154>

    	pid->ControllerOut = pid->OutputMin;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6a1a      	ldr	r2, [r3, #32]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	ee07 3a90 	vmov	s15, r3
}
 800174a:	eeb0 0a67 	vmov.f32	s0, s15
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001756:	bf00      	nop
 8001758:	3e23e1d3 	.word	0x3e23e1d3
 800175c:	4048ecf7 	.word	0x4048ecf7

08001760 <Robotinit>:


#include "Trajectory.h"

void Robotinit(RobotManagement *Robot)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	  Robot -> Position = 0.0;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
	  Robot -> Velocity = 0.0;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	605a      	str	r2, [r3, #4]
	  Robot -> CurrentStation = 0;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	811a      	strh	r2, [r3, #8]
	  Robot -> GoalPositon = 0.0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
	  Robot -> HomePositon = 0.0;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
	  Robot -> QX = 0.0;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
	  Robot -> QV = 0.0;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
	  Robot -> QVMax = 0.0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	621a      	str	r2, [r3, #32]

	  Robot -> flagSethome = 0;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  Robot -> flagStartTime = 0;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  Robot -> RunningFlag = 0;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	  Robot -> MotorIsOn = 0;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <TrajectorInit>:

void TrajectorInit(TrajectoryG *traject)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
	arm_mat_init_f32(&(traject ->MatTime), 6, 6, traject ->MatTime_Data);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f503 7005 	add.w	r0, r3, #532	; 0x214
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2206      	movs	r2, #6
 80017e4:	2106      	movs	r1, #6
 80017e6:	f00a f8f5 	bl	800b9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatTimeINV), 6, 6, traject ->MatTimeINV_Data);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f503 7007 	add.w	r0, r3, #540	; 0x21c
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3390      	adds	r3, #144	; 0x90
 80017f4:	2206      	movs	r2, #6
 80017f6:	2106      	movs	r1, #6
 80017f8:	f00a f8ec 	bl	800b9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatCondition), 6, 1, traject ->MatCondition_Data);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f503 7009 	add.w	r0, r3, #548	; 0x224
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001808:	2201      	movs	r2, #1
 800180a:	2106      	movs	r1, #6
 800180c:	f00a f8e2 	bl	800b9d4 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatA), 6, 1, traject ->MatTA_Data);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f503 700b 	add.w	r0, r3, #556	; 0x22c
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800181c:	2201      	movs	r2, #1
 800181e:	2106      	movs	r1, #6
 8001820:	f00a f8d8 	bl	800b9d4 <arm_mat_init_f32>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <AbsVal>:
{
	Robot -> HomePositon = homePoint;
}

float AbsVal(float number)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 8001836:	edd7 7a01 	vldr	s15, [r7, #4]
 800183a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001842:	d50e      	bpl.n	8001862 <AbsVal+0x36>
  {
    return number*-1.0;
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7fe fe2b 	bl	80004a0 <__aeabi_f2d>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	f7ff f8af 	bl	80009b4 <__aeabi_d2f>
 8001856:	4603      	mov	r3, r0
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eef1 7a67 	vneg.f32	s15, s15
 8001860:	e001      	b.n	8001866 <AbsVal+0x3a>
  }
  else
  {
    return number;
 8001862:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 8001866:	eeb0 0a67 	vmov.f32	s0, s15
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <CoefficientAndTimeCalculationScurve>:
	}

}


void CoefficientAndTimeCalculationScurve(TrajectoryG *traject, float Qinitial, float Qfinal, float Veloinput){
 8001870:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	ed87 0a02 	vstr	s0, [r7, #8]
 800187e:	edc7 0a01 	vstr	s1, [r7, #4]
 8001882:	ed87 1a00 	vstr	s2, [r7]

	traject -> Qin = Qinitial;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	traject -> Qfinal = Qfinal;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	// Set initial = 0;
	traject -> QRelative = traject -> Qfinal - traject -> Qin;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	ed93 7a7c 	vldr	s14, [r3, #496]	; 0x1f0
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	edd3 7a7a 	vldr	s15, [r3, #488]	; 0x1e8
 80018a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	edc3 7a7b 	vstr	s15, [r3, #492]	; 0x1ec

	// Set Vmax Amax Jmax
	traject -> Vmax = 0.0;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
//	traject -> Amax = 28.64789;
//	traject -> Jmax = 572.957795 ;
	traject -> Amax = 21.77;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4a17      	ldr	r2, [pc, #92]	; (8001918 <CoefficientAndTimeCalculationScurve+0xa8>)
 80018ba:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	traject -> Jmax = 114.59 ;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4a16      	ldr	r2, [pc, #88]	; (800191c <CoefficientAndTimeCalculationScurve+0xac>)
 80018c2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	float gain = 0.0;
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
	if(traject -> QRelative < 0.0)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 80018d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	d502      	bpl.n	80018e2 <CoefficientAndTimeCalculationScurve+0x72>
	{
		gain = -1.0;
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <CoefficientAndTimeCalculationScurve+0xb0>)
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e002      	b.n	80018e8 <CoefficientAndTimeCalculationScurve+0x78>
	}
	else
	{
		gain = 1.0;
 80018e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80018e6:	617b      	str	r3, [r7, #20]
	}
	// Find Speed limit
	float DistanceABS = AbsVal(traject -> QRelative);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 80018ee:	eeb0 0a67 	vmov.f32	s0, s15
 80018f2:	f7ff ff9b 	bl	800182c <AbsVal>
 80018f6:	ed87 0a04 	vstr	s0, [r7, #16]

	if(DistanceABS >= 130)
 80018fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80018fe:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001924 <CoefficientAndTimeCalculationScurve+0xb4>
 8001902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	db0f      	blt.n	800192c <CoefficientAndTimeCalculationScurve+0xbc>
	{
//		traject -> Vmax = 60;
		traject -> Vmax = 51;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4a06      	ldr	r2, [pc, #24]	; (8001928 <CoefficientAndTimeCalculationScurve+0xb8>)
 8001910:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8001914:	e07b      	b.n	8001a0e <CoefficientAndTimeCalculationScurve+0x19e>
 8001916:	bf00      	nop
 8001918:	41ae28f6 	.word	0x41ae28f6
 800191c:	42e52e14 	.word	0x42e52e14
 8001920:	bf800000 	.word	0xbf800000
 8001924:	43020000 	.word	0x43020000
 8001928:	424c0000 	.word	0x424c0000
	}
	else
	{
//		traject -> Vmax = (-0.0000003*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00009*(DistanceABS*DistanceABS*DistanceABS))-(0.0115*(DistanceABS*DistanceABS))+(0.995*DistanceABS)+7.1259;
		traject -> Vmax = (-0.0000002*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00007*(DistanceABS*DistanceABS*DistanceABS))-(0.0092*(DistanceABS*DistanceABS))+(0.8419*DistanceABS)+4.8492;
 800192c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001930:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001934:	edd7 7a04 	vldr	s15, [r7, #16]
 8001938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800193c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001944:	ee17 0a90 	vmov	r0, s15
 8001948:	f7fe fdaa 	bl	80004a0 <__aeabi_f2d>
 800194c:	f60f 33a0 	addw	r3, pc, #2976	; 0xba0
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	f7fe fdfc 	bl	8000550 <__aeabi_dmul>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4690      	mov	r8, r2
 800195e:	4699      	mov	r9, r3
 8001960:	edd7 7a04 	vldr	s15, [r7, #16]
 8001964:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001968:	edd7 7a04 	vldr	s15, [r7, #16]
 800196c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001970:	ee17 0a90 	vmov	r0, s15
 8001974:	f7fe fd94 	bl	80004a0 <__aeabi_f2d>
 8001978:	f60f 337c 	addw	r3, pc, #2940	; 0xb7c
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7fe fde6 	bl	8000550 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4640      	mov	r0, r8
 800198a:	4649      	mov	r1, r9
 800198c:	f7fe fc2a 	bl	80001e4 <__adddf3>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4690      	mov	r8, r2
 8001996:	4699      	mov	r9, r3
 8001998:	edd7 7a04 	vldr	s15, [r7, #16]
 800199c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019a0:	ee17 0a90 	vmov	r0, s15
 80019a4:	f7fe fd7c 	bl	80004a0 <__aeabi_f2d>
 80019a8:	f60f 3354 	addw	r3, pc, #2900	; 0xb54
 80019ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b0:	f7fe fdce 	bl	8000550 <__aeabi_dmul>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4640      	mov	r0, r8
 80019ba:	4649      	mov	r1, r9
 80019bc:	f7fe fc10 	bl	80001e0 <__aeabi_dsub>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4690      	mov	r8, r2
 80019c6:	4699      	mov	r9, r3
 80019c8:	6938      	ldr	r0, [r7, #16]
 80019ca:	f7fe fd69 	bl	80004a0 <__aeabi_f2d>
 80019ce:	f60f 3338 	addw	r3, pc, #2872	; 0xb38
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f7fe fdbb 	bl	8000550 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4640      	mov	r0, r8
 80019e0:	4649      	mov	r1, r9
 80019e2:	f7fe fbff 	bl	80001e4 <__adddf3>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f60f 3320 	addw	r3, pc, #2848	; 0xb20
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fbf5 	bl	80001e4 <__adddf3>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f7fe ffd7 	bl	80009b4 <__aeabi_d2f>
 8001a06:	4602      	mov	r2, r0
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}

	if(traject -> Vmax > Veloinput)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8001a14:	ed97 7a00 	vldr	s14, [r7]
 8001a18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a20:	d503      	bpl.n	8001a2a <CoefficientAndTimeCalculationScurve+0x1ba>
	{
		traject -> Vmax = Veloinput;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  traject -> Vmax *gain;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	ed93 7a56 	vldr	s14, [r3, #344]	; 0x158
 8001a30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
	traject -> Amax =  traject -> Amax *gain;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8001a44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
	traject -> Jmax =  traject -> Jmax *gain;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 8001a58:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154

	// Calculate time
	traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8001a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001a82:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	ed93 6a7b 	vldr	s12, [r3, #492]	; 0x1ec
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	edd3 6a56 	vldr	s13, [r3, #344]	; 0x158
 8001a96:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	edc3 7a79 	vstr	s15, [r3, #484]	; 0x1e4
	traject -> T[0] = (traject -> Amax/traject -> Jmax);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 8001ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
	traject -> T[1] = (traject -> Vmax/traject -> Amax);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	edd3 6a56 	vldr	s13, [r3, #344]	; 0x158
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8001ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	edc3 7a74 	vstr	s15, [r3, #464]	; 0x1d0
	traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8001adc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001aec:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	edc3 7a75 	vstr	s15, [r3, #468]	; 0x1d4
	traject -> T[3] = traject -> T[6] - traject -> T[2];
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	ed93 7a79 	vldr	s14, [r3, #484]	; 0x1e4
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	edc3 7a76 	vstr	s15, [r3, #472]	; 0x1d8
	traject -> T[4] = traject -> T[6] - traject -> T[1];
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	ed93 7a79 	vldr	s14, [r3, #484]	; 0x1e4
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	edc3 7a77 	vstr	s15, [r3, #476]	; 0x1dc
	traject -> T[5] = traject -> T[6] - traject -> T[0];
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	ed93 7a79 	vldr	s14, [r3, #484]	; 0x1e4
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	edc3 7a78 	vstr	s15, [r3, #480]	; 0x1e0

	traject -> A[0] = traject -> Jmax;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	traject -> A[1] = 0;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	traject -> A[2] = -1.0 * traject -> Jmax;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fca1 	bl	80004a0 <__aeabi_f2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f7fe ff25 	bl	80009b4 <__aeabi_d2f>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	ee07 3a90 	vmov	s15, r3
 8001b70:	eef1 7a67 	vneg.f32	s15, s15
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	edc3 7a59 	vstr	s15, [r3, #356]	; 0x164
	traject -> A[3] = 0;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	traject -> A[4] = -1.0 * traject -> Jmax;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fc88 	bl	80004a0 <__aeabi_f2d>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7fe ff0c 	bl	80009b4 <__aeabi_d2f>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eef1 7a67 	vneg.f32	s15, s15
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	edc3 7a5b 	vstr	s15, [r3, #364]	; 0x16c
	traject -> A[5] = 0;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	traject -> A[6] = traject -> Jmax;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

	traject -> B[0] = 0;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	traject -> B[1] = traject -> Amax;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	edd3 6a55 	vldr	s13, [r3, #340]	; 0x154
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	edc3 7a60 	vstr	s15, [r3, #384]	; 0x180
	traject -> B[3] = 0;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	traject -> B[4] = traject -> Jmax * traject -> T[3];
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8001c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	edc3 7a62 	vstr	s15, [r3, #392]	; 0x188
	traject -> B[5] = (-1.0 * traject ->Amax);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fc3e 	bl	80004a0 <__aeabi_f2d>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f7fe fec2 	bl	80009b4 <__aeabi_d2f>
 8001c30:	4603      	mov	r3, r0
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eef1 7a67 	vneg.f32	s15, s15
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	edc3 7a63 	vstr	s15, [r3, #396]	; 0x18c
	traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc2a 	bl	80004a0 <__aeabi_f2d>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4614      	mov	r4, r2
 8001c52:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8001c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c66:	ee17 0a90 	vmov	r0, s15
 8001c6a:	f7fe fc19 	bl	80004a0 <__aeabi_f2d>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4620      	mov	r0, r4
 8001c74:	4629      	mov	r1, r5
 8001c76:	f7fe fab3 	bl	80001e0 <__aeabi_dsub>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f7fe fe97 	bl	80009b4 <__aeabi_d2f>
 8001c86:	4602      	mov	r2, r0
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

	traject -> C[0] = 0;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	edd3 6a73 	vldr	s13, [r3, #460]	; 0x1cc
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001cb6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001cc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 8001cd4:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	edd3 6a58 	vldr	s13, [r3, #352]	; 0x160
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	ed93 6a73 	vldr	s12, [r3, #460]	; 0x1cc
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001cea:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cf2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001cf6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	ed93 6a5f 	vldr	s12, [r3, #380]	; 0x17c
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001d06:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	edc3 7a66 	vstr	s15, [r3, #408]	; 0x198
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	edd3 6a74 	vldr	s13, [r3, #464]	; 0x1d0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d32:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	edd3 7a66 	vldr	s15, [r3, #408]	; 0x198
 8001d54:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	edd3 6a59 	vldr	s13, [r3, #356]	; 0x164
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	ed93 6a74 	vldr	s12, [r3, #464]	; 0x1d0
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001d6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d72:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d76:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	ed93 6a60 	vldr	s12, [r3, #384]	; 0x180
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001d86:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	edc3 7a67 	vstr	s15, [r3, #412]	; 0x19c
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	edd3 6a75 	vldr	s13, [r3, #468]	; 0x1d4
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001daa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001db6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001dc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 8001dd4:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	edd3 6a5a 	vldr	s13, [r3, #360]	; 0x168
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	ed93 6a75 	vldr	s12, [r3, #468]	; 0x1d4
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001dea:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001df6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	ed93 6a61 	vldr	s12, [r3, #388]	; 0x184
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001e06:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e0e:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	edc3 7a68 	vstr	s15, [r3, #416]	; 0x1a0
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	edd3 6a76 	vldr	s13, [r3, #472]	; 0x1d8
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8001e2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e32:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8001e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	edd3 7a68 	vldr	s15, [r3, #416]	; 0x1a0
 8001e54:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	edd3 6a5b 	vldr	s13, [r3, #364]	; 0x16c
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	ed93 6a76 	vldr	s12, [r3, #472]	; 0x1d8
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8001e6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e72:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001e76:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	ed93 6a62 	vldr	s12, [r3, #392]	; 0x188
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8001e86:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	edc3 7a69 	vstr	s15, [r3, #420]	; 0x1a4
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	edd3 6a77 	vldr	s13, [r3, #476]	; 0x1dc
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8001eaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001eb6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8001ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 8001ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	edd3 6a5c 	vldr	s13, [r3, #368]	; 0x170
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	ed93 6a77 	vldr	s12, [r3, #476]	; 0x1dc
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8001eea:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001ef6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	ed93 6a63 	vldr	s12, [r3, #396]	; 0x18c
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8001f06:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f0e:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	edc3 7a6a 	vstr	s15, [r3, #424]	; 0x1a8
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	edd3 6a78 	vldr	s13, [r3, #480]	; 0x1e0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8001f2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f32:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8001f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 8001f54:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	edd3 6a5d 	vldr	s13, [r3, #372]	; 0x174
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	ed93 6a78 	vldr	s12, [r3, #480]	; 0x1e0
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8001f6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f72:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f76:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	ed93 6a64 	vldr	s12, [r3, #400]	; 0x190
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8001f86:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	edc3 7a6b 	vstr	s15, [r3, #428]	; 0x1ac

	traject -> D[0] = 0;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	edd3 6a73 	vldr	s13, [r3, #460]	; 0x1cc
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001fb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001fca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	ed93 6a73 	vldr	s12, [r3, #460]	; 0x1cc
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001fe0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fe4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fe8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001fec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ff0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	edd3 6a65 	vldr	s13, [r3, #404]	; 0x194
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8002000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002004:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 800200e:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	edd3 6a58 	vldr	s13, [r3, #352]	; 0x160
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	ed93 6a73 	vldr	s12, [r3, #460]	; 0x1cc
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8002024:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800202e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002036:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800203a:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	ed93 6a5f 	vldr	s12, [r3, #380]	; 0x17c
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	edd3 5a73 	vldr	s11, [r3, #460]	; 0x1cc
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8002050:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002054:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002058:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800205c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002060:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	ed93 6a66 	vldr	s12, [r3, #408]	; 0x198
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8002070:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002074:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8002078:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4

	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	edd3 6a74 	vldr	s13, [r3, #464]	; 0x1d0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8002094:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 800209e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80020aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	ed93 6a74 	vldr	s12, [r3, #464]	; 0x1d0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 80020c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020c8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80020cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80020d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	edd3 6a66 	vldr	s13, [r3, #408]	; 0x198
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 80020e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 80020ee:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	edd3 6a59 	vldr	s13, [r3, #356]	; 0x164
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	ed93 6a74 	vldr	s12, [r3, #464]	; 0x1d0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8002104:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 800210e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002116:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800211a:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	ed93 6a60 	vldr	s12, [r3, #384]	; 0x180
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	edd3 5a74 	vldr	s11, [r3, #464]	; 0x1d0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8002130:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002134:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002138:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800213c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002140:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	ed93 6a67 	vldr	s12, [r3, #412]	; 0x19c
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8002150:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002154:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8002158:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8

	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	edd3 6a75 	vldr	s13, [r3, #468]	; 0x1d4
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8002174:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 800217e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002186:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800218a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	ed93 6a75 	vldr	s12, [r3, #468]	; 0x1d4
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80021a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021a8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80021ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	edd3 6a67 	vldr	s13, [r3, #412]	; 0x19c
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80021c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 80021ce:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	edd3 6a5a 	vldr	s13, [r3, #360]	; 0x168
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	ed93 6a75 	vldr	s12, [r3, #468]	; 0x1d4
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80021e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80021ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021f6:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80021fa:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	ed93 6a61 	vldr	s12, [r3, #388]	; 0x184
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	edd3 5a75 	vldr	s11, [r3, #468]	; 0x1d4
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8002210:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002214:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002218:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800221c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002220:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	ed93 6a68 	vldr	s12, [r3, #416]	; 0x1a0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8002230:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002234:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8002238:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	edc3 7a6f 	vstr	s15, [r3, #444]	; 0x1bc
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	edd3 6a76 	vldr	s13, [r3, #472]	; 0x1d8
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002254:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 800225e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002266:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800226a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	ed93 6a76 	vldr	s12, [r3, #472]	; 0x1d8
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002280:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002284:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002288:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800228c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002290:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	edd3 6a68 	vldr	s13, [r3, #416]	; 0x1a0
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 80022a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	edd3 7a6f 	vldr	s15, [r3, #444]	; 0x1bc
 80022ae:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	edd3 6a5b 	vldr	s13, [r3, #364]	; 0x16c
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	ed93 6a76 	vldr	s12, [r3, #472]	; 0x1d8
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 80022c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 80022ce:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d6:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80022da:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	ed93 6a62 	vldr	s12, [r3, #392]	; 0x188
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	edd3 5a76 	vldr	s11, [r3, #472]	; 0x1d8
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 80022f0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80022f4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022f8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80022fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002300:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	ed93 6a69 	vldr	s12, [r3, #420]	; 0x1a4
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002310:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002314:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8002318:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	edc3 7a70 	vstr	s15, [r3, #448]	; 0x1c0
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	edd3 6a77 	vldr	s13, [r3, #476]	; 0x1dc
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8002334:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 800233e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002346:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800234a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	ed93 6a77 	vldr	s12, [r3, #476]	; 0x1dc
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8002360:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002364:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002368:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800236c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	edd3 6a69 	vldr	s13, [r3, #420]	; 0x1a4
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8002380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002384:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	edd3 7a70 	vldr	s15, [r3, #448]	; 0x1c0
 800238e:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	edd3 6a5c 	vldr	s13, [r3, #368]	; 0x170
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	ed93 6a77 	vldr	s12, [r3, #476]	; 0x1dc
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80023a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80023ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b6:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80023ba:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	ed93 6a63 	vldr	s12, [r3, #396]	; 0x18c
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	edd3 5a77 	vldr	s11, [r3, #476]	; 0x1dc
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80023d0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80023d4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023d8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80023dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	ed93 6a6a 	vldr	s12, [r3, #424]	; 0x1a8
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80023f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80023f8:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	edc3 7a71 	vstr	s15, [r3, #452]	; 0x1c4
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	edd3 6a78 	vldr	s13, [r3, #480]	; 0x1e0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002414:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 800241e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002426:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800242a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	ed93 6a78 	vldr	s12, [r3, #480]	; 0x1e0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002440:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002444:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002448:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800244c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002450:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	edd3 6a6a 	vldr	s13, [r3, #424]	; 0x1a8
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002464:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	edd3 7a71 	vldr	s15, [r3, #452]	; 0x1c4
 800246e:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	edd3 6a5d 	vldr	s13, [r3, #372]	; 0x174
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	ed93 6a78 	vldr	s12, [r3, #480]	; 0x1e0
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002484:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 800248e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002496:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800249a:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	ed93 6a64 	vldr	s12, [r3, #400]	; 0x190
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	edd3 5a78 	vldr	s11, [r3, #480]	; 0x1e0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 80024b0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80024b4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024b8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80024bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	ed93 6a6b 	vldr	s12, [r3, #428]	; 0x1ac
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 80024d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80024d8:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	edc3 7a72 	vstr	s15, [r3, #456]	; 0x1c8
}
 80024e2:	bf00      	nop
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024ec:	f3af 8000 	nop.w
 80024f0:	9abcaf48 	.word	0x9abcaf48
 80024f4:	be8ad7f2 	.word	0xbe8ad7f2
 80024f8:	d7c6fbd2 	.word	0xd7c6fbd2
 80024fc:	3f12599e 	.word	0x3f12599e
 8002500:	18fc5048 	.word	0x18fc5048
 8002504:	3f82d773 	.word	0x3f82d773
 8002508:	44d013a9 	.word	0x44d013a9
 800250c:	3feaf0d8 	.word	0x3feaf0d8
 8002510:	af4f0d84 	.word	0xaf4f0d84
 8002514:	40136594 	.word	0x40136594

08002518 <TrajectoryEvaluationScurve>:


void TrajectoryEvaluationScurve(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime, uint64_t PredictTime){
 8002518:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	e9c7 2300 	strd	r2, r3, [r7]
	// Microsec to sec
	static float t = 0;
	static float tP = 0;
	t  = (CurrentTime - StartTime)/1000000.0;
 8002526:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800252a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800252e:	ebb0 0802 	subs.w	r8, r0, r2
 8002532:	eb61 0903 	sbc.w	r9, r1, r3
 8002536:	4640      	mov	r0, r8
 8002538:	4649      	mov	r1, r9
 800253a:	f7fd ffd3 	bl	80004e4 <__aeabi_ul2d>
 800253e:	a3c8      	add	r3, pc, #800	; (adr r3, 8002860 <TrajectoryEvaluationScurve+0x348>)
 8002540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002544:	f7fe f92e 	bl	80007a4 <__aeabi_ddiv>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	f7fe fa30 	bl	80009b4 <__aeabi_d2f>
 8002554:	4603      	mov	r3, r0
 8002556:	4ac4      	ldr	r2, [pc, #784]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 8002558:	6013      	str	r3, [r2, #0]
	tP = (PredictTime - StartTime)/1000000.0;
 800255a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800255e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002562:	1a84      	subs	r4, r0, r2
 8002564:	eb61 0503 	sbc.w	r5, r1, r3
 8002568:	4620      	mov	r0, r4
 800256a:	4629      	mov	r1, r5
 800256c:	f7fd ffba 	bl	80004e4 <__aeabi_ul2d>
 8002570:	a3bb      	add	r3, pc, #748	; (adr r3, 8002860 <TrajectoryEvaluationScurve+0x348>)
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	f7fe f915 	bl	80007a4 <__aeabi_ddiv>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4610      	mov	r0, r2
 8002580:	4619      	mov	r1, r3
 8002582:	f7fe fa17 	bl	80009b4 <__aeabi_d2f>
 8002586:	4603      	mov	r3, r0
 8002588:	4ab8      	ldr	r2, [pc, #736]	; (800286c <TrajectoryEvaluationScurve+0x354>)
 800258a:	6013      	str	r3, [r2, #0]

	if(t >= 0 && t < traject -> T[0])
 800258c:	4bb6      	ldr	r3, [pc, #728]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259a:	f2c0 80aa 	blt.w	80026f2 <TrajectoryEvaluationScurve+0x1da>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	ed93 7a73 	vldr	s14, [r3, #460]	; 0x1cc
 80025a4:	4bb0      	ldr	r3, [pc, #704]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 80025a6:	edd3 7a00 	vldr	s15, [r3]
 80025aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b2:	f340 809e 	ble.w	80026f2 <TrajectoryEvaluationScurve+0x1da>
	{
		traject -> QJ = traject -> A[0];
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		traject -> QA = traject -> A[0]*t + traject -> B[0];
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 80025c8:	4ba7      	ldr	r3, [pc, #668]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 80025ca:	edd3 7a00 	vldr	s15, [r3]
 80025ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 80025d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 80025e8:	4b9f      	ldr	r3, [pc, #636]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 80025ea:	edd3 6a00 	vldr	s13, [r3]
 80025ee:	4b9e      	ldr	r3, [pc, #632]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 80025f0:	edd3 7a00 	vldr	s15, [r3]
 80025f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002600:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 800260a:	4b97      	ldr	r3, [pc, #604]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 800260c:	edd3 7a00 	vldr	s15, [r3]
 8002610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002614:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 800261e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		traject -> QVP = traject -> A[0]*(tP*tP)/2 + traject -> B[0]*tP + traject -> C[0];
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 800262e:	4b8f      	ldr	r3, [pc, #572]	; (800286c <TrajectoryEvaluationScurve+0x354>)
 8002630:	edd3 6a00 	vldr	s13, [r3]
 8002634:	4b8d      	ldr	r3, [pc, #564]	; (800286c <TrajectoryEvaluationScurve+0x354>)
 8002636:	edd3 7a00 	vldr	s15, [r3]
 800263a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800263e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002642:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002646:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 8002650:	4b86      	ldr	r3, [pc, #536]	; (800286c <TrajectoryEvaluationScurve+0x354>)
 8002652:	edd3 7a00 	vldr	s15, [r3]
 8002656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800265a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 8002664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		traject -> QX = traject -> Qin + traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	edd3 6a57 	vldr	s13, [r3, #348]	; 0x15c
 800267a:	4b7b      	ldr	r3, [pc, #492]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 800267c:	ed93 6a00 	vldr	s12, [r3]
 8002680:	4b79      	ldr	r3, [pc, #484]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 8002682:	edd3 7a00 	vldr	s15, [r3]
 8002686:	ee26 6a27 	vmul.f32	s12, s12, s15
 800268a:	4b77      	ldr	r3, [pc, #476]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 800268c:	edd3 7a00 	vldr	s15, [r3]
 8002690:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002694:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002698:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800269c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80026a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 80026aa:	4b6f      	ldr	r3, [pc, #444]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 80026ac:	ed93 6a00 	vldr	s12, [r3]
 80026b0:	4b6d      	ldr	r3, [pc, #436]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 80026b2:	edd3 7a00 	vldr	s15, [r3]
 80026b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026be:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80026c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80026c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	edd3 6a65 	vldr	s13, [r3, #404]	; 0x194
 80026d0:	4b65      	ldr	r3, [pc, #404]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 80026d2:	edd3 7a00 	vldr	s15, [r3]
 80026d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 80026e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 80026ee:	f000 bc6a 	b.w	8002fc6 <TrajectoryEvaluationScurve+0xaae>
	}
	else if( t >= traject -> T[0] && t < traject -> T[1])
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	ed93 7a73 	vldr	s14, [r3, #460]	; 0x1cc
 80026f8:	4b5b      	ldr	r3, [pc, #364]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 80026fa:	edd3 7a00 	vldr	s15, [r3]
 80026fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002706:	f200 80b3 	bhi.w	8002870 <TrajectoryEvaluationScurve+0x358>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	ed93 7a74 	vldr	s14, [r3, #464]	; 0x1d0
 8002710:	4b55      	ldr	r3, [pc, #340]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 8002712:	edd3 7a00 	vldr	s15, [r3]
 8002716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800271a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271e:	f340 80a7 	ble.w	8002870 <TrajectoryEvaluationScurve+0x358>
	{
		traject -> QJ = traject -> A[1];
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		traject -> QA = traject -> A[1]*t + traject -> B[1];
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 8002734:	4b4c      	ldr	r3, [pc, #304]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 8002736:	edd3 7a00 	vldr	s15, [r3]
 800273a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8002744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 8002754:	4b44      	ldr	r3, [pc, #272]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 8002756:	edd3 6a00 	vldr	s13, [r3]
 800275a:	4b43      	ldr	r3, [pc, #268]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002768:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800276c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 8002776:	4b3c      	ldr	r3, [pc, #240]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002780:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	edd3 7a66 	vldr	s15, [r3, #408]	; 0x198
 800278a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		traject -> QVP = traject -> A[1]*(tP*tP)/2 + traject -> B[1]*tP + traject -> C[1];
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 800279a:	4b34      	ldr	r3, [pc, #208]	; (800286c <TrajectoryEvaluationScurve+0x354>)
 800279c:	edd3 6a00 	vldr	s13, [r3]
 80027a0:	4b32      	ldr	r3, [pc, #200]	; (800286c <TrajectoryEvaluationScurve+0x354>)
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 80027bc:	4b2b      	ldr	r3, [pc, #172]	; (800286c <TrajectoryEvaluationScurve+0x354>)
 80027be:	edd3 7a00 	vldr	s15, [r3]
 80027c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	edd3 7a66 	vldr	s15, [r3, #408]	; 0x198
 80027d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		traject -> QX = traject -> Qin + traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	edd3 6a58 	vldr	s13, [r3, #352]	; 0x160
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 80027e8:	ed93 6a00 	vldr	s12, [r3]
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 80027ee:	edd3 7a00 	vldr	s15, [r3]
 80027f2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027f6:	4b1c      	ldr	r3, [pc, #112]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002800:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002804:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002808:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800280c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 8002816:	4b14      	ldr	r3, [pc, #80]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 8002818:	ed93 6a00 	vldr	s12, [r3]
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 800281e:	edd3 7a00 	vldr	s15, [r3]
 8002822:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002826:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800282a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800282e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002832:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	edd3 6a66 	vldr	s13, [r3, #408]	; 0x198
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <TrajectoryEvaluationScurve+0x350>)
 800283e:	edd3 7a00 	vldr	s15, [r3]
 8002842:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002846:	ee37 7a27 	vadd.f32	s14, s14, s15
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8002850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 800285a:	e3b4      	b.n	8002fc6 <TrajectoryEvaluationScurve+0xaae>
 800285c:	f3af 8000 	nop.w
 8002860:	00000000 	.word	0x00000000
 8002864:	412e8480 	.word	0x412e8480
 8002868:	2000045c 	.word	0x2000045c
 800286c:	20000460 	.word	0x20000460
	}
	else if( t >= traject -> T[1] && t < traject -> T[2])
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	ed93 7a74 	vldr	s14, [r3, #464]	; 0x1d0
 8002876:	4bb3      	ldr	r3, [pc, #716]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 8002878:	edd3 7a00 	vldr	s15, [r3]
 800287c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002884:	f200 80a9 	bhi.w	80029da <TrajectoryEvaluationScurve+0x4c2>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	ed93 7a75 	vldr	s14, [r3, #468]	; 0x1d4
 800288e:	4bad      	ldr	r3, [pc, #692]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289c:	f340 809d 	ble.w	80029da <TrajectoryEvaluationScurve+0x4c2>
	{
		traject -> QJ = traject -> A[2];
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		traject -> QA = traject -> A[2]*t + traject -> B[2];
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 80028b2:	4ba4      	ldr	r3, [pc, #656]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 80028b4:	edd3 7a00 	vldr	s15, [r3]
 80028b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	edd3 7a60 	vldr	s15, [r3, #384]	; 0x180
 80028c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 80028d2:	4b9c      	ldr	r3, [pc, #624]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 80028d4:	edd3 6a00 	vldr	s13, [r3]
 80028d8:	4b9a      	ldr	r3, [pc, #616]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80028ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 80028f4:	4b93      	ldr	r3, [pc, #588]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 80028f6:	edd3 7a00 	vldr	s15, [r3]
 80028fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 8002908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		traject -> QVP = traject -> A[2]*(tP*tP)/2 + traject -> B[2]*tP + traject -> C[2];
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 8002918:	4b8b      	ldr	r3, [pc, #556]	; (8002b48 <TrajectoryEvaluationScurve+0x630>)
 800291a:	edd3 6a00 	vldr	s13, [r3]
 800291e:	4b8a      	ldr	r3, [pc, #552]	; (8002b48 <TrajectoryEvaluationScurve+0x630>)
 8002920:	edd3 7a00 	vldr	s15, [r3]
 8002924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800292c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002930:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 800293a:	4b83      	ldr	r3, [pc, #524]	; (8002b48 <TrajectoryEvaluationScurve+0x630>)
 800293c:	edd3 7a00 	vldr	s15, [r3]
 8002940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 800294e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		traject -> QX = traject -> Qin + traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	edd3 6a59 	vldr	s13, [r3, #356]	; 0x164
 8002964:	4b77      	ldr	r3, [pc, #476]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 8002966:	ed93 6a00 	vldr	s12, [r3]
 800296a:	4b76      	ldr	r3, [pc, #472]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002974:	4b73      	ldr	r3, [pc, #460]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800297e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002982:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002986:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800298a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 8002994:	4b6b      	ldr	r3, [pc, #428]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 8002996:	ed93 6a00 	vldr	s12, [r3]
 800299a:	4b6a      	ldr	r3, [pc, #424]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 800299c:	edd3 7a00 	vldr	s15, [r3]
 80029a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80029a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029a8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80029ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	edd3 6a67 	vldr	s13, [r3, #412]	; 0x19c
 80029ba:	4b62      	ldr	r3, [pc, #392]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 80029bc:	edd3 7a00 	vldr	s15, [r3]
 80029c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 80029ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 80029d8:	e2f5      	b.n	8002fc6 <TrajectoryEvaluationScurve+0xaae>
	}
	else if( t >= traject -> T[2] && t < traject -> T[3])
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	ed93 7a75 	vldr	s14, [r3, #468]	; 0x1d4
 80029e0:	4b58      	ldr	r3, [pc, #352]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 80029e2:	edd3 7a00 	vldr	s15, [r3]
 80029e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ee:	f200 80ad 	bhi.w	8002b4c <TrajectoryEvaluationScurve+0x634>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	ed93 7a76 	vldr	s14, [r3, #472]	; 0x1d8
 80029f8:	4b52      	ldr	r3, [pc, #328]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a06:	f340 80a1 	ble.w	8002b4c <TrajectoryEvaluationScurve+0x634>
	{
		traject -> QJ = traject -> A[3];
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		traject -> QA = traject -> A[3]*t + traject -> B[3];
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 8002a1c:	4b49      	ldr	r3, [pc, #292]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 8002a1e:	edd3 7a00 	vldr	s15, [r3]
 8002a22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	edd3 7a61 	vldr	s15, [r3, #388]	; 0x184
 8002a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 8002a3c:	4b41      	ldr	r3, [pc, #260]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 8002a3e:	edd3 6a00 	vldr	s13, [r3]
 8002a42:	4b40      	ldr	r3, [pc, #256]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 8002a44:	edd3 7a00 	vldr	s15, [r3]
 8002a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002a54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 8002a5e:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 8002a60:	edd3 7a00 	vldr	s15, [r3]
 8002a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	edd3 7a68 	vldr	s15, [r3, #416]	; 0x1a0
 8002a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		traject -> QVP = traject -> A[3]*(tP*tP)/2 + traject -> B[3]*tP + traject -> C[3];
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 8002a82:	4b31      	ldr	r3, [pc, #196]	; (8002b48 <TrajectoryEvaluationScurve+0x630>)
 8002a84:	edd3 6a00 	vldr	s13, [r3]
 8002a88:	4b2f      	ldr	r3, [pc, #188]	; (8002b48 <TrajectoryEvaluationScurve+0x630>)
 8002a8a:	edd3 7a00 	vldr	s15, [r3]
 8002a8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a96:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002a9a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 8002aa4:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <TrajectoryEvaluationScurve+0x630>)
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	edd3 7a68 	vldr	s15, [r3, #416]	; 0x1a0
 8002ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		traject -> QX = traject -> Qin + traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	edd3 6a5a 	vldr	s13, [r3, #360]	; 0x168
 8002ace:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 8002ad0:	ed93 6a00 	vldr	s12, [r3]
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 8002ae0:	edd3 7a00 	vldr	s15, [r3]
 8002ae4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ae8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002aec:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002af0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002af4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 8002afe:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 8002b00:	ed93 6a00 	vldr	s12, [r3]
 8002b04:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 8002b06:	edd3 7a00 	vldr	s15, [r3]
 8002b0a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b12:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002b16:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	edd3 6a68 	vldr	s13, [r3, #416]	; 0x1a0
 8002b24:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <TrajectoryEvaluationScurve+0x62c>)
 8002b26:	edd3 7a00 	vldr	s15, [r3]
 8002b2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	edd3 7a6f 	vldr	s15, [r3, #444]	; 0x1bc
 8002b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 8002b42:	e240      	b.n	8002fc6 <TrajectoryEvaluationScurve+0xaae>
 8002b44:	2000045c 	.word	0x2000045c
 8002b48:	20000460 	.word	0x20000460
	}
	else if( t >= traject -> T[3] && t < traject -> T[4])
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	ed93 7a76 	vldr	s14, [r3, #472]	; 0x1d8
 8002b52:	4bb3      	ldr	r3, [pc, #716]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002b54:	edd3 7a00 	vldr	s15, [r3]
 8002b58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b60:	f200 80a9 	bhi.w	8002cb6 <TrajectoryEvaluationScurve+0x79e>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	ed93 7a77 	vldr	s14, [r3, #476]	; 0x1dc
 8002b6a:	4bad      	ldr	r3, [pc, #692]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002b6c:	edd3 7a00 	vldr	s15, [r3]
 8002b70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b78:	f340 809d 	ble.w	8002cb6 <TrajectoryEvaluationScurve+0x79e>
	{
		traject -> QJ = traject -> A[4];
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		traject -> QA = traject -> A[4]*t + traject -> B[4];
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 8002b8e:	4ba4      	ldr	r3, [pc, #656]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	edd3 7a62 	vldr	s15, [r3, #392]	; 0x188
 8002b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 8002bae:	4b9c      	ldr	r3, [pc, #624]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002bb0:	edd3 6a00 	vldr	s13, [r3]
 8002bb4:	4b9a      	ldr	r3, [pc, #616]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002bb6:	edd3 7a00 	vldr	s15, [r3]
 8002bba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002bc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 8002bd0:	4b93      	ldr	r3, [pc, #588]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002bd2:	edd3 7a00 	vldr	s15, [r3]
 8002bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 8002be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		traject -> QVP = traject -> A[4]*(tP*tP)/2 + traject -> B[4]*tP + traject -> C[4];
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 8002bf4:	4b8b      	ldr	r3, [pc, #556]	; (8002e24 <TrajectoryEvaluationScurve+0x90c>)
 8002bf6:	edd3 6a00 	vldr	s13, [r3]
 8002bfa:	4b8a      	ldr	r3, [pc, #552]	; (8002e24 <TrajectoryEvaluationScurve+0x90c>)
 8002bfc:	edd3 7a00 	vldr	s15, [r3]
 8002c00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c08:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002c0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 8002c16:	4b83      	ldr	r3, [pc, #524]	; (8002e24 <TrajectoryEvaluationScurve+0x90c>)
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 8002c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		traject -> QX = traject -> Qin + traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	edd3 6a5b 	vldr	s13, [r3, #364]	; 0x16c
 8002c40:	4b77      	ldr	r3, [pc, #476]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002c42:	ed93 6a00 	vldr	s12, [r3]
 8002c46:	4b76      	ldr	r3, [pc, #472]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002c48:	edd3 7a00 	vldr	s15, [r3]
 8002c4c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c50:	4b73      	ldr	r3, [pc, #460]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002c52:	edd3 7a00 	vldr	s15, [r3]
 8002c56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c5e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002c62:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 8002c70:	4b6b      	ldr	r3, [pc, #428]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002c72:	ed93 6a00 	vldr	s12, [r3]
 8002c76:	4b6a      	ldr	r3, [pc, #424]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002c78:	edd3 7a00 	vldr	s15, [r3]
 8002c7c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c84:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002c88:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	edd3 6a69 	vldr	s13, [r3, #420]	; 0x1a4
 8002c96:	4b62      	ldr	r3, [pc, #392]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	edd3 7a70 	vldr	s15, [r3, #448]	; 0x1c0
 8002caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 8002cb4:	e187      	b.n	8002fc6 <TrajectoryEvaluationScurve+0xaae>
	}
	else if( t >= traject -> T[4] && t < traject -> T[5])
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	ed93 7a77 	vldr	s14, [r3, #476]	; 0x1dc
 8002cbc:	4b58      	ldr	r3, [pc, #352]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cca:	f200 80ad 	bhi.w	8002e28 <TrajectoryEvaluationScurve+0x910>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	ed93 7a78 	vldr	s14, [r3, #480]	; 0x1e0
 8002cd4:	4b52      	ldr	r3, [pc, #328]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002cd6:	edd3 7a00 	vldr	s15, [r3]
 8002cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce2:	f340 80a1 	ble.w	8002e28 <TrajectoryEvaluationScurve+0x910>
	{
		traject -> QJ = traject -> A[5];
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		traject -> QA = traject -> A[5]*t + traject -> B[5];
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 8002cf8:	4b49      	ldr	r3, [pc, #292]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002cfa:	edd3 7a00 	vldr	s15, [r3]
 8002cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	edd3 7a63 	vldr	s15, [r3, #396]	; 0x18c
 8002d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 8002d18:	4b41      	ldr	r3, [pc, #260]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002d1a:	edd3 6a00 	vldr	s13, [r3]
 8002d1e:	4b40      	ldr	r3, [pc, #256]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002d20:	edd3 7a00 	vldr	s15, [r3]
 8002d24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002d30:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 8002d3a:	4b39      	ldr	r3, [pc, #228]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002d3c:	edd3 7a00 	vldr	s15, [r3]
 8002d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 8002d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		traject -> QVP = traject -> A[5]*(tP*tP)/2 + traject -> B[5]*tP + traject -> C[5];
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 8002d5e:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <TrajectoryEvaluationScurve+0x90c>)
 8002d60:	edd3 6a00 	vldr	s13, [r3]
 8002d64:	4b2f      	ldr	r3, [pc, #188]	; (8002e24 <TrajectoryEvaluationScurve+0x90c>)
 8002d66:	edd3 7a00 	vldr	s15, [r3]
 8002d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d72:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002d76:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 8002d80:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <TrajectoryEvaluationScurve+0x90c>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 8002d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		traject -> QX = traject -> Qin + traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	edd3 6a5c 	vldr	s13, [r3, #368]	; 0x170
 8002daa:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002dac:	ed93 6a00 	vldr	s12, [r3]
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002dba:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002dbc:	edd3 7a00 	vldr	s15, [r3]
 8002dc0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002dc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002dc8:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002dcc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002dd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002ddc:	ed93 6a00 	vldr	s12, [r3]
 8002de0:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002de2:	edd3 7a00 	vldr	s15, [r3]
 8002de6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002dea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002dee:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002df2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002df6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	edd3 6a6a 	vldr	s13, [r3, #424]	; 0x1a8
 8002e00:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <TrajectoryEvaluationScurve+0x908>)
 8002e02:	edd3 7a00 	vldr	s15, [r3]
 8002e06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	edd3 7a71 	vldr	s15, [r3, #452]	; 0x1c4
 8002e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 8002e1e:	e0d2      	b.n	8002fc6 <TrajectoryEvaluationScurve+0xaae>
 8002e20:	2000045c 	.word	0x2000045c
 8002e24:	20000460 	.word	0x20000460
	}
	else if( t >= traject -> T[5] && t < traject -> T[6])
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	ed93 7a78 	vldr	s14, [r3, #480]	; 0x1e0
 8002e2e:	4b68      	ldr	r3, [pc, #416]	; (8002fd0 <TrajectoryEvaluationScurve+0xab8>)
 8002e30:	edd3 7a00 	vldr	s15, [r3]
 8002e34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e3c:	f200 80a9 	bhi.w	8002f92 <TrajectoryEvaluationScurve+0xa7a>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	ed93 7a79 	vldr	s14, [r3, #484]	; 0x1e4
 8002e46:	4b62      	ldr	r3, [pc, #392]	; (8002fd0 <TrajectoryEvaluationScurve+0xab8>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e54:	f340 809d 	ble.w	8002f92 <TrajectoryEvaluationScurve+0xa7a>
	{
		traject -> QJ = traject -> A[6];
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		traject -> QA = traject -> A[6]*t + traject -> B[6];
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	ed93 7a5d 	vldr	s14, [r3, #372]	; 0x174
 8002e6a:	4b59      	ldr	r3, [pc, #356]	; (8002fd0 <TrajectoryEvaluationScurve+0xab8>)
 8002e6c:	edd3 7a00 	vldr	s15, [r3]
 8002e70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	edd3 7a64 	vldr	s15, [r3, #400]	; 0x190
 8002e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	ed93 7a5d 	vldr	s14, [r3, #372]	; 0x174
 8002e8a:	4b51      	ldr	r3, [pc, #324]	; (8002fd0 <TrajectoryEvaluationScurve+0xab8>)
 8002e8c:	edd3 6a00 	vldr	s13, [r3]
 8002e90:	4b4f      	ldr	r3, [pc, #316]	; (8002fd0 <TrajectoryEvaluationScurve+0xab8>)
 8002e92:	edd3 7a00 	vldr	s15, [r3]
 8002e96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e9e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002ea2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	edd3 6a64 	vldr	s13, [r3, #400]	; 0x190
 8002eac:	4b48      	ldr	r3, [pc, #288]	; (8002fd0 <TrajectoryEvaluationScurve+0xab8>)
 8002eae:	edd3 7a00 	vldr	s15, [r3]
 8002eb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 8002ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		traject -> QVP = traject -> A[6]*(tP*tP)/2 + traject -> B[6]*tP + traject -> C[6];
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	ed93 7a5d 	vldr	s14, [r3, #372]	; 0x174
 8002ed0:	4b40      	ldr	r3, [pc, #256]	; (8002fd4 <TrajectoryEvaluationScurve+0xabc>)
 8002ed2:	edd3 6a00 	vldr	s13, [r3]
 8002ed6:	4b3f      	ldr	r3, [pc, #252]	; (8002fd4 <TrajectoryEvaluationScurve+0xabc>)
 8002ed8:	edd3 7a00 	vldr	s15, [r3]
 8002edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002ee8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	edd3 6a64 	vldr	s13, [r3, #400]	; 0x190
 8002ef2:	4b38      	ldr	r3, [pc, #224]	; (8002fd4 <TrajectoryEvaluationScurve+0xabc>)
 8002ef4:	edd3 7a00 	vldr	s15, [r3]
 8002ef8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002efc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 8002f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		traject -> QX = traject -> Qin + traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	edd3 6a5d 	vldr	s13, [r3, #372]	; 0x174
 8002f1c:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <TrajectoryEvaluationScurve+0xab8>)
 8002f1e:	ed93 6a00 	vldr	s12, [r3]
 8002f22:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <TrajectoryEvaluationScurve+0xab8>)
 8002f24:	edd3 7a00 	vldr	s15, [r3]
 8002f28:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002f2c:	4b28      	ldr	r3, [pc, #160]	; (8002fd0 <TrajectoryEvaluationScurve+0xab8>)
 8002f2e:	edd3 7a00 	vldr	s15, [r3]
 8002f32:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002f36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f3a:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002f3e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	edd3 6a64 	vldr	s13, [r3, #400]	; 0x190
 8002f4c:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <TrajectoryEvaluationScurve+0xab8>)
 8002f4e:	ed93 6a00 	vldr	s12, [r3]
 8002f52:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <TrajectoryEvaluationScurve+0xab8>)
 8002f54:	edd3 7a00 	vldr	s15, [r3]
 8002f58:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002f5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f60:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002f64:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	edd3 6a6b 	vldr	s13, [r3, #428]	; 0x1ac
 8002f72:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <TrajectoryEvaluationScurve+0xab8>)
 8002f74:	edd3 7a00 	vldr	s15, [r3]
 8002f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8002f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 8002f90:	e019      	b.n	8002fc6 <TrajectoryEvaluationScurve+0xaae>
	}
	else
	{
		traject -> QJ = 0;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		traject -> QA = 0;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
		traject -> QV = 0;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		traject -> QVP = 0;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		traject -> QX = traject -> Qfinal;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	}

	return 1.0;
 8002fc6:	bf00      	nop
}
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fd0:	2000045c 	.word	0x2000045c
 8002fd4:	20000460 	.word	0x20000460

08002fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fe0:	f002 fb7c 	bl	80056dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fe4:	f000 f8d6 	bl	8003194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fe8:	f000 fb08 	bl	80035fc <MX_GPIO_Init>
  MX_DMA_Init();
 8002fec:	f000 fade 	bl	80035ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002ff0:	f000 fab0 	bl	8003554 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002ff4:	f000 f936 	bl	8003264 <MX_I2C1_Init>
  MX_TIM11_Init();
 8002ff8:	f000 fa88 	bl	800350c <MX_TIM11_Init>
  MX_TIM1_Init();
 8002ffc:	f000 f960 	bl	80032c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003000:	f000 f9e2 	bl	80033c8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8003004:	f000 fa34 	bl	8003470 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
//  HAL_Delay(1000);
  Ringbuf_Init();
 8003008:	f000 fe54 	bl	8003cb4 <Ringbuf_Init>
  KalmanMatrixInit(&KalmanVar);
 800300c:	484e      	ldr	r0, [pc, #312]	; (8003148 <main+0x170>)
 800300e:	f7fd fea3 	bl	8000d58 <KalmanMatrixInit>
  TrajectorInit(&traject);
 8003012:	484e      	ldr	r0, [pc, #312]	; (800314c <main+0x174>)
 8003014:	f7fe fbdd 	bl	80017d2 <TrajectorInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003018:	2100      	movs	r1, #0
 800301a:	484d      	ldr	r0, [pc, #308]	; (8003150 <main+0x178>)
 800301c:	f006 f816 	bl	800904c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8003020:	484c      	ldr	r0, [pc, #304]	; (8003154 <main+0x17c>)
 8003022:	f005 ff33 	bl	8008e8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8003026:	213c      	movs	r1, #60	; 0x3c
 8003028:	484b      	ldr	r0, [pc, #300]	; (8003158 <main+0x180>)
 800302a:	f006 f965 	bl	80092f8 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 800302e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	461a      	mov	r2, r3
 8003036:	4b49      	ldr	r3, [pc, #292]	; (800315c <main+0x184>)
 8003038:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 800303a:	4b48      	ldr	r3, [pc, #288]	; (800315c <main+0x184>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a47      	ldr	r2, [pc, #284]	; (800315c <main+0x184>)
 8003040:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 8003042:	4b46      	ldr	r3, [pc, #280]	; (800315c <main+0x184>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a46      	ldr	r2, [pc, #280]	; (8003160 <main+0x188>)
 8003048:	6013      	str	r3, [r2, #0]
  PIDAController_Init(&PidVelo);
 800304a:	4846      	ldr	r0, [pc, #280]	; (8003164 <main+0x18c>)
 800304c:	f7fe f99a 	bl	8001384 <PIDAController_Init>
  PIDAController_Init(&PidPos);
 8003050:	4845      	ldr	r0, [pc, #276]	; (8003168 <main+0x190>)
 8003052:	f7fe f997 	bl	8001384 <PIDAController_Init>
  // Reset all Parameter
  Robotinit(&Robot);
 8003056:	4845      	ldr	r0, [pc, #276]	; (800316c <main+0x194>)
 8003058:	f7fe fb82 	bl	8001760 <Robotinit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timeElapsed[0] = Micros();
 800305c:	f002 f83a 	bl	80050d4 <Micros>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4942      	ldr	r1, [pc, #264]	; (8003170 <main+0x198>)
 8003066:	e9c1 2300 	strd	r2, r3, [r1]
	  timeElapsed[1] = HAL_GetTick();
 800306a:	f002 fb9d 	bl	80057a8 <HAL_GetTick>
 800306e:	4603      	mov	r3, r0
 8003070:	2200      	movs	r2, #0
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	607a      	str	r2, [r7, #4]
 8003076:	4b3e      	ldr	r3, [pc, #248]	; (8003170 <main+0x198>)
 8003078:	e9d7 1200 	ldrd	r1, r2, [r7]
 800307c:	e9c3 1202 	strd	r1, r2, [r3, #8]
	  RobotstateManagement();
 8003080:	f001 fb1e 	bl	80046c0 <RobotstateManagement>
	  if(Micros() - EndEffLoopTime > 100000)
 8003084:	f002 f826 	bl	80050d4 <Micros>
 8003088:	4b3a      	ldr	r3, [pc, #232]	; (8003174 <main+0x19c>)
 800308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308e:	1a84      	subs	r4, r0, r2
 8003090:	eb61 0503 	sbc.w	r5, r1, r3
 8003094:	4b38      	ldr	r3, [pc, #224]	; (8003178 <main+0x1a0>)
 8003096:	429c      	cmp	r4, r3
 8003098:	f175 0300 	sbcs.w	r3, r5, #0
 800309c:	d308      	bcc.n	80030b0 <main+0xd8>
	  {
		  EndEffLoopTime = Micros();
 800309e:	f002 f819 	bl	80050d4 <Micros>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4933      	ldr	r1, [pc, #204]	; (8003174 <main+0x19c>)
 80030a8:	e9c1 2300 	strd	r2, r3, [r1]
		  EndEffstateManagement();
 80030ac:	f001 fc58 	bl	8004960 <EndEffstateManagement>
	  }
	  if(Micros() - ControlLoopTime >= 10000)
 80030b0:	f002 f810 	bl	80050d4 <Micros>
 80030b4:	4b31      	ldr	r3, [pc, #196]	; (800317c <main+0x1a4>)
 80030b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ba:	ebb0 0802 	subs.w	r8, r0, r2
 80030be:	eb61 0903 	sbc.w	r9, r1, r3
 80030c2:	f242 7310 	movw	r3, #10000	; 0x2710
 80030c6:	4598      	cmp	r8, r3
 80030c8:	f179 0300 	sbcs.w	r3, r9, #0
 80030cc:	d3c6      	bcc.n	800305c <main+0x84>
	  {
		ControlLoopTime  = Micros();
 80030ce:	f002 f801 	bl	80050d4 <Micros>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4929      	ldr	r1, [pc, #164]	; (800317c <main+0x1a4>)
 80030d8:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStartTime = Micros();
 80030dc:	f001 fffa 	bl	80050d4 <Micros>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4926      	ldr	r1, [pc, #152]	; (8003180 <main+0x1a8>)
 80030e6:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 80030ea:	f000 fb4d 	bl	8003788 <EncoderRead>
//		KalmanFilterFunction(&KalmanVar,PositionDeg[0]);
		KalmanFilterFunction(&KalmanVar,PositionDeg[0],VelocityDeg);
 80030ee:	4b25      	ldr	r3, [pc, #148]	; (8003184 <main+0x1ac>)
 80030f0:	edd3 7a00 	vldr	s15, [r3]
 80030f4:	4b24      	ldr	r3, [pc, #144]	; (8003188 <main+0x1b0>)
 80030f6:	ed93 7a00 	vldr	s14, [r3]
 80030fa:	eef0 0a47 	vmov.f32	s1, s14
 80030fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003102:	4811      	ldr	r0, [pc, #68]	; (8003148 <main+0x170>)
 8003104:	f7fe f80a 	bl	800111c <KalmanFilterFunction>
		Robot.Position = PositionDeg[0];
 8003108:	4b1e      	ldr	r3, [pc, #120]	; (8003184 <main+0x1ac>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a17      	ldr	r2, [pc, #92]	; (800316c <main+0x194>)
 800310e:	6013      	str	r3, [r2, #0]
		Robot.Velocity = KalmanVar.MatState_Data[1];
 8003110:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <main+0x170>)
 8003112:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003116:	4a15      	ldr	r2, [pc, #84]	; (800316c <main+0x194>)
 8003118:	6053      	str	r3, [r2, #4]
		ControllLoopAndErrorHandler();
 800311a:	f000 fcab 	bl	8003a74 <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 800311e:	f001 ffd9 	bl	80050d4 <Micros>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4919      	ldr	r1, [pc, #100]	; (800318c <main+0x1b4>)
 8003128:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 800312c:	4b17      	ldr	r3, [pc, #92]	; (800318c <main+0x1b4>)
 800312e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003132:	4b13      	ldr	r3, [pc, #76]	; (8003180 <main+0x1a8>)
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	ebb0 0a02 	subs.w	sl, r0, r2
 800313c:	eb61 0b03 	sbc.w	fp, r1, r3
 8003140:	4b13      	ldr	r3, [pc, #76]	; (8003190 <main+0x1b8>)
 8003142:	e9c3 ab00 	strd	sl, fp, [r3]
	  timeElapsed[0] = Micros();
 8003146:	e789      	b.n	800305c <main+0x84>
 8003148:	20000034 	.word	0x20000034
 800314c:	20000874 	.word	0x20000874
 8003150:	200004b8 	.word	0x200004b8
 8003154:	20000590 	.word	0x20000590
 8003158:	20000500 	.word	0x20000500
 800315c:	200007e8 	.word	0x200007e8
 8003160:	200007f4 	.word	0x200007f4
 8003164:	20000808 	.word	0x20000808
 8003168:	2000083c 	.word	0x2000083c
 800316c:	200006dc 	.word	0x200006dc
 8003170:	20000780 	.word	0x20000780
 8003174:	20000790 	.word	0x20000790
 8003178:	000186a1 	.word	0x000186a1
 800317c:	20000af8 	.word	0x20000af8
 8003180:	20000ac8 	.word	0x20000ac8
 8003184:	200007f8 	.word	0x200007f8
 8003188:	20000800 	.word	0x20000800
 800318c:	20000ad0 	.word	0x20000ad0
 8003190:	20000ad8 	.word	0x20000ad8

08003194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b094      	sub	sp, #80	; 0x50
 8003198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800319a:	f107 0320 	add.w	r3, r7, #32
 800319e:	2230      	movs	r2, #48	; 0x30
 80031a0:	2100      	movs	r1, #0
 80031a2:	4618      	mov	r0, r3
 80031a4:	f008 fcb6 	bl	800bb14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031a8:	f107 030c 	add.w	r3, r7, #12
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	60da      	str	r2, [r3, #12]
 80031b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031b8:	2300      	movs	r3, #0
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	4b27      	ldr	r3, [pc, #156]	; (800325c <SystemClock_Config+0xc8>)
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	4a26      	ldr	r2, [pc, #152]	; (800325c <SystemClock_Config+0xc8>)
 80031c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c6:	6413      	str	r3, [r2, #64]	; 0x40
 80031c8:	4b24      	ldr	r3, [pc, #144]	; (800325c <SystemClock_Config+0xc8>)
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031d4:	2300      	movs	r3, #0
 80031d6:	607b      	str	r3, [r7, #4]
 80031d8:	4b21      	ldr	r3, [pc, #132]	; (8003260 <SystemClock_Config+0xcc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a20      	ldr	r2, [pc, #128]	; (8003260 <SystemClock_Config+0xcc>)
 80031de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <SystemClock_Config+0xcc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031f0:	2302      	movs	r3, #2
 80031f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031f4:	2301      	movs	r3, #1
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031f8:	2310      	movs	r3, #16
 80031fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031fc:	2302      	movs	r3, #2
 80031fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003200:	2300      	movs	r3, #0
 8003202:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003204:	2308      	movs	r3, #8
 8003206:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003208:	2364      	movs	r3, #100	; 0x64
 800320a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800320c:	2302      	movs	r3, #2
 800320e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003210:	2304      	movs	r3, #4
 8003212:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003214:	f107 0320 	add.w	r3, r7, #32
 8003218:	4618      	mov	r0, r3
 800321a:	f005 f94f 	bl	80084bc <HAL_RCC_OscConfig>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003224:	f001 ff6e 	bl	8005104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003228:	230f      	movs	r3, #15
 800322a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800322c:	2302      	movs	r3, #2
 800322e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003238:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800323e:	f107 030c 	add.w	r3, r7, #12
 8003242:	2103      	movs	r1, #3
 8003244:	4618      	mov	r0, r3
 8003246:	f005 fbb1 	bl	80089ac <HAL_RCC_ClockConfig>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003250:	f001 ff58 	bl	8005104 <Error_Handler>
  }
}
 8003254:	bf00      	nop
 8003256:	3750      	adds	r7, #80	; 0x50
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40023800 	.word	0x40023800
 8003260:	40007000 	.word	0x40007000

08003264 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003268:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <MX_I2C1_Init+0x50>)
 800326a:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <MX_I2C1_Init+0x54>)
 800326c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800326e:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <MX_I2C1_Init+0x50>)
 8003270:	4a12      	ldr	r2, [pc, #72]	; (80032bc <MX_I2C1_Init+0x58>)
 8003272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003274:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <MX_I2C1_Init+0x50>)
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800327a:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <MX_I2C1_Init+0x50>)
 800327c:	2200      	movs	r2, #0
 800327e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <MX_I2C1_Init+0x50>)
 8003282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003288:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <MX_I2C1_Init+0x50>)
 800328a:	2200      	movs	r2, #0
 800328c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <MX_I2C1_Init+0x50>)
 8003290:	2200      	movs	r2, #0
 8003292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003294:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <MX_I2C1_Init+0x50>)
 8003296:	2200      	movs	r2, #0
 8003298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <MX_I2C1_Init+0x50>)
 800329c:	2200      	movs	r2, #0
 800329e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032a0:	4804      	ldr	r0, [pc, #16]	; (80032b4 <MX_I2C1_Init+0x50>)
 80032a2:	f003 f997 	bl	80065d4 <HAL_I2C_Init>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80032ac:	f001 ff2a 	bl	8005104 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000464 	.word	0x20000464
 80032b8:	40005400 	.word	0x40005400
 80032bc:	00061a80 	.word	0x00061a80

080032c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b092      	sub	sp, #72	; 0x48
 80032c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
 80032e0:	615a      	str	r2, [r3, #20]
 80032e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032e4:	1d3b      	adds	r3, r7, #4
 80032e6:	2220      	movs	r2, #32
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f008 fc12 	bl	800bb14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80032f0:	4b33      	ldr	r3, [pc, #204]	; (80033c0 <MX_TIM1_Init+0x100>)
 80032f2:	4a34      	ldr	r2, [pc, #208]	; (80033c4 <MX_TIM1_Init+0x104>)
 80032f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80032f6:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <MX_TIM1_Init+0x100>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032fc:	4b30      	ldr	r3, [pc, #192]	; (80033c0 <MX_TIM1_Init+0x100>)
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8003302:	4b2f      	ldr	r3, [pc, #188]	; (80033c0 <MX_TIM1_Init+0x100>)
 8003304:	f242 720f 	movw	r2, #9999	; 0x270f
 8003308:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800330a:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <MX_TIM1_Init+0x100>)
 800330c:	2200      	movs	r2, #0
 800330e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003310:	4b2b      	ldr	r3, [pc, #172]	; (80033c0 <MX_TIM1_Init+0x100>)
 8003312:	2200      	movs	r2, #0
 8003314:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003316:	4b2a      	ldr	r3, [pc, #168]	; (80033c0 <MX_TIM1_Init+0x100>)
 8003318:	2200      	movs	r2, #0
 800331a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800331c:	4828      	ldr	r0, [pc, #160]	; (80033c0 <MX_TIM1_Init+0x100>)
 800331e:	f005 fe46 	bl	8008fae <HAL_TIM_PWM_Init>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003328:	f001 feec 	bl	8005104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800332c:	2300      	movs	r3, #0
 800332e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003330:	2300      	movs	r3, #0
 8003332:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003334:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003338:	4619      	mov	r1, r3
 800333a:	4821      	ldr	r0, [pc, #132]	; (80033c0 <MX_TIM1_Init+0x100>)
 800333c:	f006 fdf0 	bl	8009f20 <HAL_TIMEx_MasterConfigSynchronization>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003346:	f001 fedd 	bl	8005104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800334a:	2360      	movs	r3, #96	; 0x60
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003352:	2300      	movs	r3, #0
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003356:	2300      	movs	r3, #0
 8003358:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800335a:	2300      	movs	r3, #0
 800335c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800335e:	2300      	movs	r3, #0
 8003360:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003362:	2300      	movs	r3, #0
 8003364:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800336a:	2200      	movs	r2, #0
 800336c:	4619      	mov	r1, r3
 800336e:	4814      	ldr	r0, [pc, #80]	; (80033c0 <MX_TIM1_Init+0x100>)
 8003370:	f006 f958 	bl	8009624 <HAL_TIM_PWM_ConfigChannel>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800337a:	f001 fec3 	bl	8005104 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800337e:	2300      	movs	r3, #0
 8003380:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003396:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003398:	2300      	movs	r3, #0
 800339a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800339c:	1d3b      	adds	r3, r7, #4
 800339e:	4619      	mov	r1, r3
 80033a0:	4807      	ldr	r0, [pc, #28]	; (80033c0 <MX_TIM1_Init+0x100>)
 80033a2:	f006 fe2b 	bl	8009ffc <HAL_TIMEx_ConfigBreakDeadTime>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80033ac:	f001 feaa 	bl	8005104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80033b0:	4803      	ldr	r0, [pc, #12]	; (80033c0 <MX_TIM1_Init+0x100>)
 80033b2:	f001 ffe1 	bl	8005378 <HAL_TIM_MspPostInit>

}
 80033b6:	bf00      	nop
 80033b8:	3748      	adds	r7, #72	; 0x48
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200004b8 	.word	0x200004b8
 80033c4:	40010000 	.word	0x40010000

080033c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08c      	sub	sp, #48	; 0x30
 80033cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80033ce:	f107 030c 	add.w	r3, r7, #12
 80033d2:	2224      	movs	r2, #36	; 0x24
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f008 fb9c 	bl	800bb14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033dc:	1d3b      	adds	r3, r7, #4
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80033e4:	4b21      	ldr	r3, [pc, #132]	; (800346c <MX_TIM2_Init+0xa4>)
 80033e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80033ec:	4b1f      	ldr	r3, [pc, #124]	; (800346c <MX_TIM2_Init+0xa4>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f2:	4b1e      	ldr	r3, [pc, #120]	; (800346c <MX_TIM2_Init+0xa4>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 80033f8:	4b1c      	ldr	r3, [pc, #112]	; (800346c <MX_TIM2_Init+0xa4>)
 80033fa:	f642 62df 	movw	r2, #11999	; 0x2edf
 80033fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003400:	4b1a      	ldr	r3, [pc, #104]	; (800346c <MX_TIM2_Init+0xa4>)
 8003402:	2200      	movs	r2, #0
 8003404:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003406:	4b19      	ldr	r3, [pc, #100]	; (800346c <MX_TIM2_Init+0xa4>)
 8003408:	2200      	movs	r2, #0
 800340a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800340c:	2303      	movs	r3, #3
 800340e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003410:	2300      	movs	r3, #0
 8003412:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003414:	2301      	movs	r3, #1
 8003416:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003418:	2300      	movs	r3, #0
 800341a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003420:	2300      	movs	r3, #0
 8003422:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003424:	2301      	movs	r3, #1
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003428:	2300      	movs	r3, #0
 800342a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003430:	f107 030c 	add.w	r3, r7, #12
 8003434:	4619      	mov	r1, r3
 8003436:	480d      	ldr	r0, [pc, #52]	; (800346c <MX_TIM2_Init+0xa4>)
 8003438:	f005 feb8 	bl	80091ac <HAL_TIM_Encoder_Init>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003442:	f001 fe5f 	bl	8005104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003446:	2300      	movs	r3, #0
 8003448:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800344a:	2300      	movs	r3, #0
 800344c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800344e:	1d3b      	adds	r3, r7, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4806      	ldr	r0, [pc, #24]	; (800346c <MX_TIM2_Init+0xa4>)
 8003454:	f006 fd64 	bl	8009f20 <HAL_TIMEx_MasterConfigSynchronization>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800345e:	f001 fe51 	bl	8005104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003462:	bf00      	nop
 8003464:	3730      	adds	r7, #48	; 0x30
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000500 	.word	0x20000500

08003470 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003476:	f107 0308 	add.w	r3, r7, #8
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003484:	463b      	mov	r3, r7
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800348c:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <MX_TIM5_Init+0x90>)
 800348e:	4a1d      	ldr	r2, [pc, #116]	; (8003504 <MX_TIM5_Init+0x94>)
 8003490:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8003492:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <MX_TIM5_Init+0x90>)
 8003494:	2263      	movs	r2, #99	; 0x63
 8003496:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003498:	4b19      	ldr	r3, [pc, #100]	; (8003500 <MX_TIM5_Init+0x90>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 800349e:	4b18      	ldr	r3, [pc, #96]	; (8003500 <MX_TIM5_Init+0x90>)
 80034a0:	4a19      	ldr	r2, [pc, #100]	; (8003508 <MX_TIM5_Init+0x98>)
 80034a2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a4:	4b16      	ldr	r3, [pc, #88]	; (8003500 <MX_TIM5_Init+0x90>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034aa:	4b15      	ldr	r3, [pc, #84]	; (8003500 <MX_TIM5_Init+0x90>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80034b0:	4813      	ldr	r0, [pc, #76]	; (8003500 <MX_TIM5_Init+0x90>)
 80034b2:	f005 fc9b 	bl	8008dec <HAL_TIM_Base_Init>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 80034bc:	f001 fe22 	bl	8005104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80034c6:	f107 0308 	add.w	r3, r7, #8
 80034ca:	4619      	mov	r1, r3
 80034cc:	480c      	ldr	r0, [pc, #48]	; (8003500 <MX_TIM5_Init+0x90>)
 80034ce:	f006 f96b 	bl	80097a8 <HAL_TIM_ConfigClockSource>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 80034d8:	f001 fe14 	bl	8005104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80034dc:	2320      	movs	r3, #32
 80034de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80034e4:	463b      	mov	r3, r7
 80034e6:	4619      	mov	r1, r3
 80034e8:	4805      	ldr	r0, [pc, #20]	; (8003500 <MX_TIM5_Init+0x90>)
 80034ea:	f006 fd19 	bl	8009f20 <HAL_TIMEx_MasterConfigSynchronization>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 80034f4:	f001 fe06 	bl	8005104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80034f8:	bf00      	nop
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20000548 	.word	0x20000548
 8003504:	40000c00 	.word	0x40000c00
 8003508:	0001869f 	.word	0x0001869f

0800350c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003510:	4b0e      	ldr	r3, [pc, #56]	; (800354c <MX_TIM11_Init+0x40>)
 8003512:	4a0f      	ldr	r2, [pc, #60]	; (8003550 <MX_TIM11_Init+0x44>)
 8003514:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8003516:	4b0d      	ldr	r3, [pc, #52]	; (800354c <MX_TIM11_Init+0x40>)
 8003518:	2263      	movs	r2, #99	; 0x63
 800351a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <MX_TIM11_Init+0x40>)
 800351e:	2200      	movs	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <MX_TIM11_Init+0x40>)
 8003524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003528:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800352a:	4b08      	ldr	r3, [pc, #32]	; (800354c <MX_TIM11_Init+0x40>)
 800352c:	2200      	movs	r2, #0
 800352e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <MX_TIM11_Init+0x40>)
 8003532:	2200      	movs	r2, #0
 8003534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003536:	4805      	ldr	r0, [pc, #20]	; (800354c <MX_TIM11_Init+0x40>)
 8003538:	f005 fc58 	bl	8008dec <HAL_TIM_Base_Init>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003542:	f001 fddf 	bl	8005104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000590 	.word	0x20000590
 8003550:	40014800 	.word	0x40014800

08003554 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003558:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <MX_USART2_UART_Init+0x50>)
 800355a:	4a13      	ldr	r2, [pc, #76]	; (80035a8 <MX_USART2_UART_Init+0x54>)
 800355c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <MX_USART2_UART_Init+0x50>)
 8003560:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8003564:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003566:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <MX_USART2_UART_Init+0x50>)
 8003568:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800356c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800356e:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <MX_USART2_UART_Init+0x50>)
 8003570:	2200      	movs	r2, #0
 8003572:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003574:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <MX_USART2_UART_Init+0x50>)
 8003576:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800357a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800357c:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <MX_USART2_UART_Init+0x50>)
 800357e:	220c      	movs	r2, #12
 8003580:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <MX_USART2_UART_Init+0x50>)
 8003584:	2200      	movs	r2, #0
 8003586:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <MX_USART2_UART_Init+0x50>)
 800358a:	2200      	movs	r2, #0
 800358c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800358e:	4805      	ldr	r0, [pc, #20]	; (80035a4 <MX_USART2_UART_Init+0x50>)
 8003590:	f006 fd9a 	bl	800a0c8 <HAL_UART_Init>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800359a:	f001 fdb3 	bl	8005104 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200005d8 	.word	0x200005d8
 80035a8:	40004400 	.word	0x40004400

080035ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	607b      	str	r3, [r7, #4]
 80035b6:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <MX_DMA_Init+0x4c>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	4a0f      	ldr	r2, [pc, #60]	; (80035f8 <MX_DMA_Init+0x4c>)
 80035bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035c0:	6313      	str	r3, [r2, #48]	; 0x30
 80035c2:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <MX_DMA_Init+0x4c>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80035ce:	2200      	movs	r2, #0
 80035d0:	2100      	movs	r1, #0
 80035d2:	2010      	movs	r0, #16
 80035d4:	f002 f9cf 	bl	8005976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80035d8:	2010      	movs	r0, #16
 80035da:	f002 f9e8 	bl	80059ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	2100      	movs	r1, #0
 80035e2:	2011      	movs	r0, #17
 80035e4:	f002 f9c7 	bl	8005976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80035e8:	2011      	movs	r0, #17
 80035ea:	f002 f9e0 	bl	80059ae <HAL_NVIC_EnableIRQ>

}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800

080035fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08a      	sub	sp, #40	; 0x28
 8003600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003602:	f107 0314 	add.w	r3, r7, #20
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	609a      	str	r2, [r3, #8]
 800360e:	60da      	str	r2, [r3, #12]
 8003610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	4b4e      	ldr	r3, [pc, #312]	; (8003750 <MX_GPIO_Init+0x154>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	4a4d      	ldr	r2, [pc, #308]	; (8003750 <MX_GPIO_Init+0x154>)
 800361c:	f043 0304 	orr.w	r3, r3, #4
 8003620:	6313      	str	r3, [r2, #48]	; 0x30
 8003622:	4b4b      	ldr	r3, [pc, #300]	; (8003750 <MX_GPIO_Init+0x154>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	4b47      	ldr	r3, [pc, #284]	; (8003750 <MX_GPIO_Init+0x154>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	4a46      	ldr	r2, [pc, #280]	; (8003750 <MX_GPIO_Init+0x154>)
 8003638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800363c:	6313      	str	r3, [r2, #48]	; 0x30
 800363e:	4b44      	ldr	r3, [pc, #272]	; (8003750 <MX_GPIO_Init+0x154>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	4b40      	ldr	r3, [pc, #256]	; (8003750 <MX_GPIO_Init+0x154>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	4a3f      	ldr	r2, [pc, #252]	; (8003750 <MX_GPIO_Init+0x154>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	6313      	str	r3, [r2, #48]	; 0x30
 800365a:	4b3d      	ldr	r3, [pc, #244]	; (8003750 <MX_GPIO_Init+0x154>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	607b      	str	r3, [r7, #4]
 800366a:	4b39      	ldr	r3, [pc, #228]	; (8003750 <MX_GPIO_Init+0x154>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	4a38      	ldr	r2, [pc, #224]	; (8003750 <MX_GPIO_Init+0x154>)
 8003670:	f043 0302 	orr.w	r3, r3, #2
 8003674:	6313      	str	r3, [r2, #48]	; 0x30
 8003676:	4b36      	ldr	r3, [pc, #216]	; (8003750 <MX_GPIO_Init+0x154>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	607b      	str	r3, [r7, #4]
 8003680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 8003682:	2200      	movs	r2, #0
 8003684:	f44f 7108 	mov.w	r1, #544	; 0x220
 8003688:	4832      	ldr	r0, [pc, #200]	; (8003754 <MX_GPIO_Init+0x158>)
 800368a:	f002 ff57 	bl	800653c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin, GPIO_PIN_RESET);
 800368e:	2200      	movs	r2, #0
 8003690:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8003694:	4830      	ldr	r0, [pc, #192]	; (8003758 <MX_GPIO_Init+0x15c>)
 8003696:	f002 ff51 	bl	800653c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800369a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800369e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80036a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80036a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80036aa:	f107 0314 	add.w	r3, r7, #20
 80036ae:	4619      	mov	r1, r3
 80036b0:	482a      	ldr	r0, [pc, #168]	; (800375c <MX_GPIO_Init+0x160>)
 80036b2:	f002 fda7 	bl	8006204 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 80036b6:	f44f 7308 	mov.w	r3, #544	; 0x220
 80036ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036bc:	2301      	movs	r3, #1
 80036be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c4:	2300      	movs	r3, #0
 80036c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c8:	f107 0314 	add.w	r3, r7, #20
 80036cc:	4619      	mov	r1, r3
 80036ce:	4821      	ldr	r0, [pc, #132]	; (8003754 <MX_GPIO_Init+0x158>)
 80036d0:	f002 fd98 	bl	8006204 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_RedLamp_Pin Pin_YelLamp_Pin Pin_BlueLamp_Pin */
  GPIO_InitStruct.Pin = Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin;
 80036d4:	f44f 6383 	mov.w	r3, #1048	; 0x418
 80036d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036da:	2301      	movs	r3, #1
 80036dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e2:	2300      	movs	r3, #0
 80036e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e6:	f107 0314 	add.w	r3, r7, #20
 80036ea:	4619      	mov	r1, r3
 80036ec:	481a      	ldr	r0, [pc, #104]	; (8003758 <MX_GPIO_Init+0x15c>)
 80036ee:	f002 fd89 	bl	8006204 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Proxi_Pin */
  GPIO_InitStruct.Pin = Pin_Proxi_Pin;
 80036f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80036f8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80036fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Proxi_GPIO_Port, &GPIO_InitStruct);
 8003702:	f107 0314 	add.w	r3, r7, #20
 8003706:	4619      	mov	r1, r3
 8003708:	4812      	ldr	r0, [pc, #72]	; (8003754 <MX_GPIO_Init+0x158>)
 800370a:	f002 fd7b 	bl	8006204 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Emer_Pin */
  GPIO_InitStruct.Pin = Pin_Emer_Pin;
 800370e:	2320      	movs	r3, #32
 8003710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003712:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003718:	2300      	movs	r3, #0
 800371a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Emer_GPIO_Port, &GPIO_InitStruct);
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	4619      	mov	r1, r3
 8003722:	480d      	ldr	r0, [pc, #52]	; (8003758 <MX_GPIO_Init+0x15c>)
 8003724:	f002 fd6e 	bl	8006204 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003728:	2200      	movs	r2, #0
 800372a:	2100      	movs	r1, #0
 800372c:	2017      	movs	r0, #23
 800372e:	f002 f922 	bl	8005976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003732:	2017      	movs	r0, #23
 8003734:	f002 f93b 	bl	80059ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003738:	2200      	movs	r2, #0
 800373a:	2100      	movs	r1, #0
 800373c:	2028      	movs	r0, #40	; 0x28
 800373e:	f002 f91a 	bl	8005976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003742:	2028      	movs	r0, #40	; 0x28
 8003744:	f002 f933 	bl	80059ae <HAL_NVIC_EnableIRQ>

}
 8003748:	bf00      	nop
 800374a:	3728      	adds	r7, #40	; 0x28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40023800 	.word	0x40023800
 8003754:	40020000 	.word	0x40020000
 8003758:	40020400 	.word	0x40020400
 800375c:	40020800 	.word	0x40020800

08003760 <Int32Abs>:

/* USER CODE BEGIN 4 */
uint32_t Int32Abs(int32_t number)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	if(number<0){
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	da02      	bge.n	8003774 <Int32Abs+0x14>
		return number*-1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	425b      	negs	r3, r3
 8003772:	e000      	b.n	8003776 <Int32Abs+0x16>
	}else{
		return number;
 8003774:	687b      	ldr	r3, [r7, #4]
	}
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	0000      	movs	r0, r0
 8003784:	0000      	movs	r0, r0
	...

08003788 <EncoderRead>:

void EncoderRead()
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 800378c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	461a      	mov	r2, r3
 8003794:	4b32      	ldr	r3, [pc, #200]	; (8003860 <EncoderRead+0xd8>)
 8003796:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 8003798:	4b31      	ldr	r3, [pc, #196]	; (8003860 <EncoderRead+0xd8>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4b30      	ldr	r3, [pc, #192]	; (8003860 <EncoderRead+0xd8>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	1ad2      	subs	r2, r2, r3
 80037a2:	4b30      	ldr	r3, [pc, #192]	; (8003864 <EncoderRead+0xdc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	425b      	negs	r3, r3
 80037a8:	429a      	cmp	r2, r3
 80037aa:	da07      	bge.n	80037bc <EncoderRead+0x34>
		WrappingStep+=12000;
 80037ac:	4b2e      	ldr	r3, [pc, #184]	; (8003868 <EncoderRead+0xe0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80037b4:	3320      	adds	r3, #32
 80037b6:	4a2c      	ldr	r2, [pc, #176]	; (8003868 <EncoderRead+0xe0>)
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e00f      	b.n	80037dc <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 80037bc:	4b28      	ldr	r3, [pc, #160]	; (8003860 <EncoderRead+0xd8>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b27      	ldr	r3, [pc, #156]	; (8003860 <EncoderRead+0xd8>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	1ad2      	subs	r2, r2, r3
 80037c6:	4b27      	ldr	r3, [pc, #156]	; (8003864 <EncoderRead+0xdc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	db06      	blt.n	80037dc <EncoderRead+0x54>
		WrappingStep-=12000;
 80037ce:	4b26      	ldr	r3, [pc, #152]	; (8003868 <EncoderRead+0xe0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 80037d6:	3b20      	subs	r3, #32
 80037d8:	4a23      	ldr	r2, [pc, #140]	; (8003868 <EncoderRead+0xe0>)
 80037da:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 80037dc:	4b20      	ldr	r3, [pc, #128]	; (8003860 <EncoderRead+0xd8>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b21      	ldr	r3, [pc, #132]	; (8003868 <EncoderRead+0xe0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4413      	add	r3, r2
 80037e6:	4a21      	ldr	r2, [pc, #132]	; (800386c <EncoderRead+0xe4>)
 80037e8:	6013      	str	r3, [r2, #0]
	PositionDeg[0] = (PositionRaw/12000.0)*360.0;
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <EncoderRead+0xe4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fc fe44 	bl	800047c <__aeabi_i2d>
 80037f4:	a318      	add	r3, pc, #96	; (adr r3, 8003858 <EncoderRead+0xd0>)
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	f7fc ffd3 	bl	80007a4 <__aeabi_ddiv>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4610      	mov	r0, r2
 8003804:	4619      	mov	r1, r3
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	4b19      	ldr	r3, [pc, #100]	; (8003870 <EncoderRead+0xe8>)
 800380c:	f7fc fea0 	bl	8000550 <__aeabi_dmul>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4610      	mov	r0, r2
 8003816:	4619      	mov	r1, r3
 8003818:	f7fd f8cc 	bl	80009b4 <__aeabi_d2f>
 800381c:	4603      	mov	r3, r0
 800381e:	4a15      	ldr	r2, [pc, #84]	; (8003874 <EncoderRead+0xec>)
 8003820:	6013      	str	r3, [r2, #0]
	VelocityDeg = ((PositionDeg[0] - PositionDeg[1])/dt);
 8003822:	4b14      	ldr	r3, [pc, #80]	; (8003874 <EncoderRead+0xec>)
 8003824:	ed93 7a00 	vldr	s14, [r3]
 8003828:	4b12      	ldr	r3, [pc, #72]	; (8003874 <EncoderRead+0xec>)
 800382a:	edd3 7a01 	vldr	s15, [r3, #4]
 800382e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003832:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003878 <EncoderRead+0xf0>
 8003836:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <EncoderRead+0xf4>)
 800383c:	edc3 7a00 	vstr	s15, [r3]
	EncoderRawData[1] = EncoderRawData[0];
 8003840:	4b07      	ldr	r3, [pc, #28]	; (8003860 <EncoderRead+0xd8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a06      	ldr	r2, [pc, #24]	; (8003860 <EncoderRead+0xd8>)
 8003846:	6053      	str	r3, [r2, #4]
	PositionDeg[1] = PositionDeg[0];
 8003848:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <EncoderRead+0xec>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a09      	ldr	r2, [pc, #36]	; (8003874 <EncoderRead+0xec>)
 800384e:	6053      	str	r3, [r2, #4]
}
 8003850:	bf00      	nop
 8003852:	bd80      	pop	{r7, pc}
 8003854:	f3af 8000 	nop.w
 8003858:	00000000 	.word	0x00000000
 800385c:	40c77000 	.word	0x40c77000
 8003860:	200007e8 	.word	0x200007e8
 8003864:	2000042c 	.word	0x2000042c
 8003868:	200007f0 	.word	0x200007f0
 800386c:	200007f4 	.word	0x200007f4
 8003870:	40768000 	.word	0x40768000
 8003874:	200007f8 	.word	0x200007f8
 8003878:	3c23d70a 	.word	0x3c23d70a
 800387c:	20000800 	.word	0x20000800

08003880 <Drivemotor>:

void Drivemotor(int32_t PWM){
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
		if(PWM<=0 && PWM>=-PWM_MAX){
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	dc11      	bgt.n	80038b2 <Drivemotor+0x32>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a25      	ldr	r2, [pc, #148]	; (8003928 <Drivemotor+0xa8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	db0d      	blt.n	80038b2 <Drivemotor+0x32>
			htim1.Instance->CCR1=Int32Abs(PWM);
 8003896:	4b25      	ldr	r3, [pc, #148]	; (800392c <Drivemotor+0xac>)
 8003898:	681c      	ldr	r4, [r3, #0]
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff ff60 	bl	8003760 <Int32Abs>
 80038a0:	4603      	mov	r3, r0
 80038a2:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 80038a4:	2200      	movs	r2, #0
 80038a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038aa:	4821      	ldr	r0, [pc, #132]	; (8003930 <Drivemotor+0xb0>)
 80038ac:	f002 fe46 	bl	800653c <HAL_GPIO_WritePin>
 80038b0:	e036      	b.n	8003920 <Drivemotor+0xa0>
		}else if (PWM<-PWM_MAX){
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a1c      	ldr	r2, [pc, #112]	; (8003928 <Drivemotor+0xa8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	da0b      	bge.n	80038d2 <Drivemotor+0x52>
			htim1.Instance->CCR1=PWM_MAX;
 80038ba:	4b1c      	ldr	r3, [pc, #112]	; (800392c <Drivemotor+0xac>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f242 7210 	movw	r2, #10000	; 0x2710
 80038c2:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 80038c4:	2200      	movs	r2, #0
 80038c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038ca:	4819      	ldr	r0, [pc, #100]	; (8003930 <Drivemotor+0xb0>)
 80038cc:	f002 fe36 	bl	800653c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}else if(PWM>PWM_MAX){
			htim1.Instance->CCR1=PWM_MAX;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}
}
 80038d0:	e026      	b.n	8003920 <Drivemotor+0xa0>
		}else if(PWM>=0 && PWM<=PWM_MAX){
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db12      	blt.n	80038fe <Drivemotor+0x7e>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f242 7210 	movw	r2, #10000	; 0x2710
 80038de:	4293      	cmp	r3, r2
 80038e0:	dc0d      	bgt.n	80038fe <Drivemotor+0x7e>
			htim1.Instance->CCR1=Int32Abs(PWM);
 80038e2:	4b12      	ldr	r3, [pc, #72]	; (800392c <Drivemotor+0xac>)
 80038e4:	681c      	ldr	r4, [r3, #0]
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff ff3a 	bl	8003760 <Int32Abs>
 80038ec:	4603      	mov	r3, r0
 80038ee:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 80038f0:	2201      	movs	r2, #1
 80038f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038f6:	480e      	ldr	r0, [pc, #56]	; (8003930 <Drivemotor+0xb0>)
 80038f8:	f002 fe20 	bl	800653c <HAL_GPIO_WritePin>
 80038fc:	e010      	b.n	8003920 <Drivemotor+0xa0>
		}else if(PWM>PWM_MAX){
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f242 7210 	movw	r2, #10000	; 0x2710
 8003904:	4293      	cmp	r3, r2
 8003906:	dd0b      	ble.n	8003920 <Drivemotor+0xa0>
			htim1.Instance->CCR1=PWM_MAX;
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <Drivemotor+0xac>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003910:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003912:	2201      	movs	r2, #1
 8003914:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003918:	4805      	ldr	r0, [pc, #20]	; (8003930 <Drivemotor+0xb0>)
 800391a:	f002 fe0f 	bl	800653c <HAL_GPIO_WritePin>
}
 800391e:	e7ff      	b.n	8003920 <Drivemotor+0xa0>
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bd90      	pop	{r4, r7, pc}
 8003928:	ffffd8f0 	.word	0xffffd8f0
 800392c:	200004b8 	.word	0x200004b8
 8003930:	40020000 	.word	0x40020000
 8003934:	00000000 	.word	0x00000000

08003938 <InverseTFofMotor>:

float InverseTFofMotor(float Velo, float PredictVelo)
{
 8003938:	b5b0      	push	{r4, r5, r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003942:	edc7 0a00 	vstr	s1, [r7]
	static float VeloLast = 0;
	static float Voltage = 0;
	static float VoltageLast = 0;
	static float Pwm = 0;
	Voltage = (PredictVelo - (1.298649403776808*Velo) + (0.413830007244888*VeloLast) - (0.492093238713741*VoltageLast))/0.660367603263632;
 8003946:	6838      	ldr	r0, [r7, #0]
 8003948:	f7fc fdaa 	bl	80004a0 <__aeabi_f2d>
 800394c:	4604      	mov	r4, r0
 800394e:	460d      	mov	r5, r1
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7fc fda5 	bl	80004a0 <__aeabi_f2d>
 8003956:	a345      	add	r3, pc, #276	; (adr r3, 8003a6c <InverseTFofMotor+0x134>)
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	f7fc fdf8 	bl	8000550 <__aeabi_dmul>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4620      	mov	r0, r4
 8003966:	4629      	mov	r1, r5
 8003968:	f7fc fc3a 	bl	80001e0 <__aeabi_dsub>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4614      	mov	r4, r2
 8003972:	461d      	mov	r5, r3
 8003974:	4b38      	ldr	r3, [pc, #224]	; (8003a58 <InverseTFofMotor+0x120>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f7fc fd91 	bl	80004a0 <__aeabi_f2d>
 800397e:	a32e      	add	r3, pc, #184	; (adr r3, 8003a38 <InverseTFofMotor+0x100>)
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	f7fc fde4 	bl	8000550 <__aeabi_dmul>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4620      	mov	r0, r4
 800398e:	4629      	mov	r1, r5
 8003990:	f7fc fc28 	bl	80001e4 <__adddf3>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4614      	mov	r4, r2
 800399a:	461d      	mov	r5, r3
 800399c:	4b2f      	ldr	r3, [pc, #188]	; (8003a5c <InverseTFofMotor+0x124>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fc fd7d 	bl	80004a0 <__aeabi_f2d>
 80039a6:	a326      	add	r3, pc, #152	; (adr r3, 8003a40 <InverseTFofMotor+0x108>)
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	f7fc fdd0 	bl	8000550 <__aeabi_dmul>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4620      	mov	r0, r4
 80039b6:	4629      	mov	r1, r5
 80039b8:	f7fc fc12 	bl	80001e0 <__aeabi_dsub>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4610      	mov	r0, r2
 80039c2:	4619      	mov	r1, r3
 80039c4:	a320      	add	r3, pc, #128	; (adr r3, 8003a48 <InverseTFofMotor+0x110>)
 80039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ca:	f7fc feeb 	bl	80007a4 <__aeabi_ddiv>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	f7fc ffed 	bl	80009b4 <__aeabi_d2f>
 80039da:	4603      	mov	r3, r0
 80039dc:	4a20      	ldr	r2, [pc, #128]	; (8003a60 <InverseTFofMotor+0x128>)
 80039de:	6013      	str	r3, [r2, #0]
	Pwm = (Voltage * 10000.0)/12.0;
 80039e0:	4b1f      	ldr	r3, [pc, #124]	; (8003a60 <InverseTFofMotor+0x128>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fc fd5b 	bl	80004a0 <__aeabi_f2d>
 80039ea:	a319      	add	r3, pc, #100	; (adr r3, 8003a50 <InverseTFofMotor+0x118>)
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	f7fc fdae 	bl	8000550 <__aeabi_dmul>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4610      	mov	r0, r2
 80039fa:	4619      	mov	r1, r3
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <InverseTFofMotor+0x12c>)
 8003a02:	f7fc fecf 	bl	80007a4 <__aeabi_ddiv>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f7fc ffd1 	bl	80009b4 <__aeabi_d2f>
 8003a12:	4603      	mov	r3, r0
 8003a14:	4a14      	ldr	r2, [pc, #80]	; (8003a68 <InverseTFofMotor+0x130>)
 8003a16:	6013      	str	r3, [r2, #0]
	VoltageLast = Voltage;
 8003a18:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <InverseTFofMotor+0x128>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a0f      	ldr	r2, [pc, #60]	; (8003a5c <InverseTFofMotor+0x124>)
 8003a1e:	6013      	str	r3, [r2, #0]
	VeloLast = Velo;
 8003a20:	4a0d      	ldr	r2, [pc, #52]	; (8003a58 <InverseTFofMotor+0x120>)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6013      	str	r3, [r2, #0]
	return Pwm;
 8003a26:	4b10      	ldr	r3, [pc, #64]	; (8003a68 <InverseTFofMotor+0x130>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	ee07 3a90 	vmov	s15, r3
}
 8003a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bdb0      	pop	{r4, r5, r7, pc}
 8003a38:	dace185d 	.word	0xdace185d
 8003a3c:	3fda7c30 	.word	0x3fda7c30
 8003a40:	a3b6ed62 	.word	0xa3b6ed62
 8003a44:	3fdf7e74 	.word	0x3fdf7e74
 8003a48:	3d6b5dd1 	.word	0x3d6b5dd1
 8003a4c:	3fe521bb 	.word	0x3fe521bb
 8003a50:	00000000 	.word	0x00000000
 8003a54:	40c38800 	.word	0x40c38800
 8003a58:	20000b0c 	.word	0x20000b0c
 8003a5c:	20000b10 	.word	0x20000b10
 8003a60:	20000b14 	.word	0x20000b14
 8003a64:	40280000 	.word	0x40280000
 8003a68:	20000b18 	.word	0x20000b18
 8003a6c:	98e30f85 	.word	0x98e30f85
 8003a70:	3ff4c744 	.word	0x3ff4c744

08003a74 <ControllLoopAndErrorHandler>:


void ControllLoopAndErrorHandler()
{
 8003a74:	b5b0      	push	{r4, r5, r7, lr}
 8003a76:	ed2d 8b02 	vpush	{d8}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af04      	add	r7, sp, #16
//		Robot.flagStartTime = 0;
//	}
//	CurrentTime = Micros();
//	PredictTime = CurrentTime + 10000;
//	TrajectoryEvaluation(&traject,StartTime,CurrentTime,PredictTime);
	if(Robot.MotorIsOn == 1)
 8003a7e:	4b83      	ldr	r3, [pc, #524]	; (8003c8c <ControllLoopAndErrorHandler+0x218>)
 8003a80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	f040 80ef 	bne.w	8003c68 <ControllLoopAndErrorHandler+0x1f4>
	{
		if (Robot.flagStartTime == 1)
 8003a8a:	4b80      	ldr	r3, [pc, #512]	; (8003c8c <ControllLoopAndErrorHandler+0x218>)
 8003a8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d10a      	bne.n	8003aaa <ControllLoopAndErrorHandler+0x36>
		{
			StartTime = Micros();
 8003a94:	f001 fb1e 	bl	80050d4 <Micros>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	497c      	ldr	r1, [pc, #496]	; (8003c90 <ControllLoopAndErrorHandler+0x21c>)
 8003a9e:	e9c1 2300 	strd	r2, r3, [r1]
			Robot.flagStartTime = 0;
 8003aa2:	4b7a      	ldr	r3, [pc, #488]	; (8003c8c <ControllLoopAndErrorHandler+0x218>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}
		CurrentTime = Micros();
 8003aaa:	f001 fb13 	bl	80050d4 <Micros>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4978      	ldr	r1, [pc, #480]	; (8003c94 <ControllLoopAndErrorHandler+0x220>)
 8003ab4:	e9c1 2300 	strd	r2, r3, [r1]
		PredictTime = CurrentTime + 10000;
 8003ab8:	4b76      	ldr	r3, [pc, #472]	; (8003c94 <ControllLoopAndErrorHandler+0x220>)
 8003aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abe:	f242 7110 	movw	r1, #10000	; 0x2710
 8003ac2:	1854      	adds	r4, r2, r1
 8003ac4:	f143 0500 	adc.w	r5, r3, #0
 8003ac8:	4b73      	ldr	r3, [pc, #460]	; (8003c98 <ControllLoopAndErrorHandler+0x224>)
 8003aca:	e9c3 4500 	strd	r4, r5, [r3]
		TrajectoryEvaluationScurve(&traject,StartTime,CurrentTime,PredictTime);
 8003ace:	4b70      	ldr	r3, [pc, #448]	; (8003c90 <ControllLoopAndErrorHandler+0x21c>)
 8003ad0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003ad4:	4b6f      	ldr	r3, [pc, #444]	; (8003c94 <ControllLoopAndErrorHandler+0x220>)
 8003ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ada:	496f      	ldr	r1, [pc, #444]	; (8003c98 <ControllLoopAndErrorHandler+0x224>)
 8003adc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ae4:	e9cd 2300 	strd	r2, r3, [sp]
 8003ae8:	4622      	mov	r2, r4
 8003aea:	462b      	mov	r3, r5
 8003aec:	486b      	ldr	r0, [pc, #428]	; (8003c9c <ControllLoopAndErrorHandler+0x228>)
 8003aee:	f7fe fd13 	bl	8002518 <TrajectoryEvaluationScurve>
		Robot.QX = traject.QX;
 8003af2:	4b6a      	ldr	r3, [pc, #424]	; (8003c9c <ControllLoopAndErrorHandler+0x228>)
 8003af4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003af8:	4a64      	ldr	r2, [pc, #400]	; (8003c8c <ControllLoopAndErrorHandler+0x218>)
 8003afa:	6193      	str	r3, [r2, #24]
		Robot.QV = traject.QV;
 8003afc:	4b67      	ldr	r3, [pc, #412]	; (8003c9c <ControllLoopAndErrorHandler+0x228>)
 8003afe:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8003b02:	4a62      	ldr	r2, [pc, #392]	; (8003c8c <ControllLoopAndErrorHandler+0x218>)
 8003b04:	61d3      	str	r3, [r2, #28]
		if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0 && AbsVal(Robot.GoalPositon) == AbsVal(traject.QX))
 8003b06:	4b61      	ldr	r3, [pc, #388]	; (8003c8c <ControllLoopAndErrorHandler+0x218>)
 8003b08:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b0c:	4b5f      	ldr	r3, [pc, #380]	; (8003c8c <ControllLoopAndErrorHandler+0x218>)
 8003b0e:	edd3 7a00 	vldr	s15, [r3]
 8003b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b16:	eeb0 0a67 	vmov.f32	s0, s15
 8003b1a:	f7fd fe87 	bl	800182c <AbsVal>
 8003b1e:	eef0 7a40 	vmov.f32	s15, s0
 8003b22:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b2e:	d547      	bpl.n	8003bc0 <ControllLoopAndErrorHandler+0x14c>
 8003b30:	4b56      	ldr	r3, [pc, #344]	; (8003c8c <ControllLoopAndErrorHandler+0x218>)
 8003b32:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b36:	eeb0 0a67 	vmov.f32	s0, s15
 8003b3a:	f7fd fe77 	bl	800182c <AbsVal>
 8003b3e:	eef0 7a40 	vmov.f32	s15, s0
 8003b42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4e:	d537      	bpl.n	8003bc0 <ControllLoopAndErrorHandler+0x14c>
 8003b50:	4b4e      	ldr	r3, [pc, #312]	; (8003c8c <ControllLoopAndErrorHandler+0x218>)
 8003b52:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b56:	eeb0 0a67 	vmov.f32	s0, s15
 8003b5a:	f7fd fe67 	bl	800182c <AbsVal>
 8003b5e:	eeb0 8a40 	vmov.f32	s16, s0
 8003b62:	4b4e      	ldr	r3, [pc, #312]	; (8003c9c <ControllLoopAndErrorHandler+0x228>)
 8003b64:	edd3 7a81 	vldr	s15, [r3, #516]	; 0x204
 8003b68:	eeb0 0a67 	vmov.f32	s0, s15
 8003b6c:	f7fd fe5e 	bl	800182c <AbsVal>
 8003b70:	eef0 7a40 	vmov.f32	s15, s0
 8003b74:	eeb4 8a67 	vcmp.f32	s16, s15
 8003b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b7c:	d120      	bne.n	8003bc0 <ControllLoopAndErrorHandler+0x14c>
		{
			PWMCHECKER = 0.0;
 8003b7e:	4b48      	ldr	r3, [pc, #288]	; (8003ca0 <ControllLoopAndErrorHandler+0x22c>)
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
			Drivemotor(PWMCHECKER);
 8003b86:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <ControllLoopAndErrorHandler+0x22c>)
 8003b88:	edd3 7a00 	vldr	s15, [r3]
 8003b8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b90:	ee17 0a90 	vmov	r0, s15
 8003b94:	f7ff fe74 	bl	8003880 <Drivemotor>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2108      	movs	r1, #8
 8003b9c:	4841      	ldr	r0, [pc, #260]	; (8003ca4 <ControllLoopAndErrorHandler+0x230>)
 8003b9e:	f002 fccd 	bl	800653c <HAL_GPIO_WritePin>
			Robot.RunningFlag = 0;
 8003ba2:	4b3a      	ldr	r3, [pc, #232]	; (8003c8c <ControllLoopAndErrorHandler+0x218>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			Robot.MotorIsOn = 0;
 8003baa:	4b38      	ldr	r3, [pc, #224]	; (8003c8c <ControllLoopAndErrorHandler+0x218>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PIDAController_Init(&PidVelo);
 8003bb2:	483d      	ldr	r0, [pc, #244]	; (8003ca8 <ControllLoopAndErrorHandler+0x234>)
 8003bb4:	f7fd fbe6 	bl	8001384 <PIDAController_Init>
			PIDAController_Init(&PidPos);
 8003bb8:	483c      	ldr	r0, [pc, #240]	; (8003cac <ControllLoopAndErrorHandler+0x238>)
 8003bba:	f7fd fbe3 	bl	8001384 <PIDAController_Init>
	else
	{
		PWMCHECKER = 0.0;
		Drivemotor(PWMCHECKER);
	}
}
 8003bbe:	e060      	b.n	8003c82 <ControllLoopAndErrorHandler+0x20e>
			PIDAPositonController_Update(&PidPos, Robot.QX , Robot.Position, Robot.GoalPositon - Robot.Position);
 8003bc0:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <ControllLoopAndErrorHandler+0x218>)
 8003bc2:	edd3 6a06 	vldr	s13, [r3, #24]
 8003bc6:	4b31      	ldr	r3, [pc, #196]	; (8003c8c <ControllLoopAndErrorHandler+0x218>)
 8003bc8:	ed93 6a00 	vldr	s12, [r3]
 8003bcc:	4b2f      	ldr	r3, [pc, #188]	; (8003c8c <ControllLoopAndErrorHandler+0x218>)
 8003bce:	ed93 7a03 	vldr	s14, [r3, #12]
 8003bd2:	4b2e      	ldr	r3, [pc, #184]	; (8003c8c <ControllLoopAndErrorHandler+0x218>)
 8003bd4:	edd3 7a00 	vldr	s15, [r3]
 8003bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bdc:	eeb0 1a67 	vmov.f32	s2, s15
 8003be0:	eef0 0a46 	vmov.f32	s1, s12
 8003be4:	eeb0 0a66 	vmov.f32	s0, s13
 8003be8:	4830      	ldr	r0, [pc, #192]	; (8003cac <ControllLoopAndErrorHandler+0x238>)
 8003bea:	f7fd fbfd 	bl	80013e8 <PIDAPositonController_Update>
			PIDAVelocityController_Update(&PidVelo, Robot.QV + PidPos.ControllerOut , Robot.Velocity,traject.Vmax);
 8003bee:	4b27      	ldr	r3, [pc, #156]	; (8003c8c <ControllLoopAndErrorHandler+0x218>)
 8003bf0:	ed93 7a07 	vldr	s14, [r3, #28]
 8003bf4:	4b2d      	ldr	r3, [pc, #180]	; (8003cac <ControllLoopAndErrorHandler+0x238>)
 8003bf6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bfe:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <ControllLoopAndErrorHandler+0x218>)
 8003c00:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c04:	4b25      	ldr	r3, [pc, #148]	; (8003c9c <ControllLoopAndErrorHandler+0x228>)
 8003c06:	edd3 6a56 	vldr	s13, [r3, #344]	; 0x158
 8003c0a:	eeb0 1a66 	vmov.f32	s2, s13
 8003c0e:	eef0 0a47 	vmov.f32	s1, s14
 8003c12:	eeb0 0a67 	vmov.f32	s0, s15
 8003c16:	4824      	ldr	r0, [pc, #144]	; (8003ca8 <ControllLoopAndErrorHandler+0x234>)
 8003c18:	f7fd fcde 	bl	80015d8 <PIDAVelocityController_Update>
			invTFOutput = InverseTFofMotor(traject.QV,traject.QVP);
 8003c1c:	4b1f      	ldr	r3, [pc, #124]	; (8003c9c <ControllLoopAndErrorHandler+0x228>)
 8003c1e:	edd3 7a7f 	vldr	s15, [r3, #508]	; 0x1fc
 8003c22:	4b1e      	ldr	r3, [pc, #120]	; (8003c9c <ControllLoopAndErrorHandler+0x228>)
 8003c24:	ed93 7a80 	vldr	s14, [r3, #512]	; 0x200
 8003c28:	eef0 0a47 	vmov.f32	s1, s14
 8003c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c30:	f7ff fe82 	bl	8003938 <InverseTFofMotor>
 8003c34:	eef0 7a40 	vmov.f32	s15, s0
 8003c38:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <ControllLoopAndErrorHandler+0x23c>)
 8003c3a:	edc3 7a00 	vstr	s15, [r3]
			PWMCHECKER = PidVelo.ControllerOut + invTFOutput;
 8003c3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ca8 <ControllLoopAndErrorHandler+0x234>)
 8003c40:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003c44:	4b1a      	ldr	r3, [pc, #104]	; (8003cb0 <ControllLoopAndErrorHandler+0x23c>)
 8003c46:	edd3 7a00 	vldr	s15, [r3]
 8003c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c4e:	4b14      	ldr	r3, [pc, #80]	; (8003ca0 <ControllLoopAndErrorHandler+0x22c>)
 8003c50:	edc3 7a00 	vstr	s15, [r3]
			Drivemotor(PWMCHECKER);
 8003c54:	4b12      	ldr	r3, [pc, #72]	; (8003ca0 <ControllLoopAndErrorHandler+0x22c>)
 8003c56:	edd3 7a00 	vldr	s15, [r3]
 8003c5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c5e:	ee17 0a90 	vmov	r0, s15
 8003c62:	f7ff fe0d 	bl	8003880 <Drivemotor>
}
 8003c66:	e00c      	b.n	8003c82 <ControllLoopAndErrorHandler+0x20e>
		PWMCHECKER = 0.0;
 8003c68:	4b0d      	ldr	r3, [pc, #52]	; (8003ca0 <ControllLoopAndErrorHandler+0x22c>)
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
		Drivemotor(PWMCHECKER);
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <ControllLoopAndErrorHandler+0x22c>)
 8003c72:	edd3 7a00 	vldr	s15, [r3]
 8003c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c7a:	ee17 0a90 	vmov	r0, s15
 8003c7e:	f7ff fdff 	bl	8003880 <Drivemotor>
}
 8003c82:	bf00      	nop
 8003c84:	46bd      	mov	sp, r7
 8003c86:	ecbd 8b02 	vpop	{d8}
 8003c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c8c:	200006dc 	.word	0x200006dc
 8003c90:	20000ab0 	.word	0x20000ab0
 8003c94:	20000ab8 	.word	0x20000ab8
 8003c98:	20000ac0 	.word	0x20000ac0
 8003c9c:	20000874 	.word	0x20000874
 8003ca0:	20000870 	.word	0x20000870
 8003ca4:	40020400 	.word	0x40020400
 8003ca8:	20000808 	.word	0x20000808
 8003cac:	2000083c 	.word	0x2000083c
 8003cb0:	20000804 	.word	0x20000804

08003cb4 <Ringbuf_Init>:

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 8003cb8:	2214      	movs	r2, #20
 8003cba:	2100      	movs	r1, #0
 8003cbc:	480e      	ldr	r0, [pc, #56]	; (8003cf8 <Ringbuf_Init+0x44>)
 8003cbe:	f007 ff29 	bl	800bb14 <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 8003cc2:	2214      	movs	r2, #20
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	480d      	ldr	r0, [pc, #52]	; (8003cfc <Ringbuf_Init+0x48>)
 8003cc8:	f007 ff24 	bl	800bb14 <memset>

	oldPos = 0;
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <Ringbuf_Init+0x4c>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <Ringbuf_Init+0x50>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 8003cd8:	2214      	movs	r2, #20
 8003cda:	4907      	ldr	r1, [pc, #28]	; (8003cf8 <Ringbuf_Init+0x44>)
 8003cdc:	480a      	ldr	r0, [pc, #40]	; (8003d08 <Ringbuf_Init+0x54>)
 8003cde:	f006 fabf 	bl	800a260 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <Ringbuf_Init+0x58>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <Ringbuf_Init+0x58>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0208 	bic.w	r2, r2, #8
 8003cf0:	601a      	str	r2, [r3, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000714 	.word	0x20000714
 8003cfc:	20000728 	.word	0x20000728
 8003d00:	20000746 	.word	0x20000746
 8003d04:	20000748 	.word	0x20000748
 8003d08:	200005d8 	.word	0x200005d8
 8003d0c:	2000061c 	.word	0x2000061c

08003d10 <checkSum>:
	oldPos = 0;
	newPos = 0;
}

void checkSum (uint8_t *buffertoCheckSum, uint16_t Size)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	807b      	strh	r3, [r7, #2]
	uint8_t sum = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	73fb      	strb	r3, [r7, #15]
	modeByte = 0;
 8003d20:	4b52      	ldr	r3, [pc, #328]	; (8003e6c <checkSum+0x15c>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
	switch(Size){
 8003d26:	887b      	ldrh	r3, [r7, #2]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d84f      	bhi.n	8003dce <checkSum+0xbe>
 8003d2e:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <checkSum+0x24>)
 8003d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d34:	08003e25 	.word	0x08003e25
 8003d38:	08003d45 	.word	0x08003d45
 8003d3c:	08003e25 	.word	0x08003e25
 8003d40:	08003d6b 	.word	0x08003d6b
	case 1:
	case 3:
		break;
	case 2:
		if(!(checkAck(buffertoCheckSum, Size))) modeByte = sum = buffertoCheckSum[oldPos];
 8003d44:	887b      	ldrh	r3, [r7, #2]
 8003d46:	4619      	mov	r1, r3
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f897 	bl	8003e7c <checkAck>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d169      	bne.n	8003e28 <checkSum+0x118>
 8003d54:	4b46      	ldr	r3, [pc, #280]	; (8003e70 <checkSum+0x160>)
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	73fb      	strb	r3, [r7, #15]
 8003d62:	4a42      	ldr	r2, [pc, #264]	; (8003e6c <checkSum+0x15c>)
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	7013      	strb	r3, [r2, #0]
		break;
 8003d68:	e05e      	b.n	8003e28 <checkSum+0x118>
	case 4:
		if(checkAck(buffertoCheckSum, Size)) modeByte = sum = buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8003d6a:	887b      	ldrh	r3, [r7, #2]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f884 	bl	8003e7c <checkAck>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <checkSum+0x80>
 8003d7a:	4b3d      	ldr	r3, [pc, #244]	; (8003e70 <checkSum+0x160>)
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	3302      	adds	r3, #2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	4413      	add	r3, r2
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	73fb      	strb	r3, [r7, #15]
 8003d88:	4a38      	ldr	r2, [pc, #224]	; (8003e6c <checkSum+0x15c>)
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	7013      	strb	r3, [r2, #0]
		else{
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
			modeByte = buffertoCheckSum[oldPos];
		}
		break;
 8003d8e:	e04c      	b.n	8003e2a <checkSum+0x11a>
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8003d90:	4b37      	ldr	r3, [pc, #220]	; (8003e70 <checkSum+0x160>)
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4413      	add	r3, r2
 8003d9a:	781a      	ldrb	r2, [r3, #0]
 8003d9c:	4b34      	ldr	r3, [pc, #208]	; (8003e70 <checkSum+0x160>)
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	3301      	adds	r3, #1
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	440b      	add	r3, r1
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	4413      	add	r3, r2
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	4b30      	ldr	r3, [pc, #192]	; (8003e70 <checkSum+0x160>)
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	3302      	adds	r3, #2
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	440b      	add	r3, r1
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	4413      	add	r3, r2
 8003dba:	73fb      	strb	r3, [r7, #15]
			modeByte = buffertoCheckSum[oldPos];
 8003dbc:	4b2c      	ldr	r3, [pc, #176]	; (8003e70 <checkSum+0x160>)
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	781a      	ldrb	r2, [r3, #0]
 8003dc8:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <checkSum+0x15c>)
 8003dca:	701a      	strb	r2, [r3, #0]
		break;
 8003dcc:	e02d      	b.n	8003e2a <checkSum+0x11a>
	default:
		modeByte = buffertoCheckSum[oldPos];
 8003dce:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <checkSum+0x160>)
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	781a      	ldrb	r2, [r3, #0]
 8003dda:	4b24      	ldr	r3, [pc, #144]	; (8003e6c <checkSum+0x15c>)
 8003ddc:	701a      	strb	r2, [r3, #0]
		for (int index = 0; index < Size-1; ++index)
 8003dde:	2300      	movs	r3, #0
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	e019      	b.n	8003e18 <checkSum+0x108>
		{
			sum = sum + buffertoCheckSum[oldPos+index % MainBuf_SIZE];
 8003de4:	4b22      	ldr	r3, [pc, #136]	; (8003e70 <checkSum+0x160>)
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <checkSum+0x164>)
 8003dee:	fb83 2301 	smull	r2, r3, r3, r1
 8003df2:	10da      	asrs	r2, r3, #3
 8003df4:	17cb      	asrs	r3, r1, #31
 8003df6:	1ad2      	subs	r2, r2, r3
 8003df8:	4613      	mov	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	1aca      	subs	r2, r1, r3
 8003e02:	1883      	adds	r3, r0, r2
 8003e04:	461a      	mov	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	781a      	ldrb	r2, [r3, #0]
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	4413      	add	r3, r2
 8003e10:	73fb      	strb	r3, [r7, #15]
		for (int index = 0; index < Size-1; ++index)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	3301      	adds	r3, #1
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	887b      	ldrh	r3, [r7, #2]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	dbe0      	blt.n	8003de4 <checkSum+0xd4>
 8003e22:	e002      	b.n	8003e2a <checkSum+0x11a>
		break;
 8003e24:	bf00      	nop
 8003e26:	e000      	b.n	8003e2a <checkSum+0x11a>
		break;
 8003e28:	bf00      	nop
		}
	}

	if((uint8_t)buffertoCheckSum[oldPos+(Size-1) % MainBuf_SIZE] == (uint8_t)(~sum)) UARTstateManagement(MainBuf);
 8003e2a:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <checkSum+0x160>)
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	887b      	ldrh	r3, [r7, #2]
 8003e32:	1e59      	subs	r1, r3, #1
 8003e34:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <checkSum+0x164>)
 8003e36:	fb83 2301 	smull	r2, r3, r3, r1
 8003e3a:	10da      	asrs	r2, r3, #3
 8003e3c:	17cb      	asrs	r3, r1, #31
 8003e3e:	1ad2      	subs	r2, r2, r3
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	1aca      	subs	r2, r1, r3
 8003e4a:	1883      	adds	r3, r0, r2
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4413      	add	r3, r2
 8003e52:	781a      	ldrb	r2, [r3, #0]
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	43db      	mvns	r3, r3
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d102      	bne.n	8003e64 <checkSum+0x154>
 8003e5e:	4806      	ldr	r0, [pc, #24]	; (8003e78 <checkSum+0x168>)
 8003e60:	f000 f89a 	bl	8003f98 <UARTstateManagement>
}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000771 	.word	0x20000771
 8003e70:	20000746 	.word	0x20000746
 8003e74:	66666667 	.word	0x66666667
 8003e78:	20000728 	.word	0x20000728

08003e7c <checkAck>:

uint8_t checkAck (uint8_t *buffertoCheckAck, uint16_t Size)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	807b      	strh	r3, [r7, #2]
	if((buffertoCheckAck[oldPos] == 0b01011000) && (buffertoCheckAck[oldPos+1 % MainBuf_SIZE] == 0b01110101)) return 1;
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <checkAck+0x40>)
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4413      	add	r3, r2
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b58      	cmp	r3, #88	; 0x58
 8003e96:	d109      	bne.n	8003eac <checkAck+0x30>
 8003e98:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <checkAck+0x40>)
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b75      	cmp	r3, #117	; 0x75
 8003ea6:	d101      	bne.n	8003eac <checkAck+0x30>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <checkAck+0x32>
	else return 0;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	20000746 	.word	0x20000746

08003ec0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	807b      	strh	r3, [r7, #2]
        if (huart->Instance == USART2)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a28      	ldr	r2, [pc, #160]	; (8003f74 <HAL_UARTEx_RxEventCallback+0xb4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d14a      	bne.n	8003f6c <HAL_UARTEx_RxEventCallback+0xac>
        {
                oldPos = newPos;
 8003ed6:	4b28      	ldr	r3, [pc, #160]	; (8003f78 <HAL_UARTEx_RxEventCallback+0xb8>)
 8003ed8:	881a      	ldrh	r2, [r3, #0]
 8003eda:	4b28      	ldr	r3, [pc, #160]	; (8003f7c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003edc:	801a      	strh	r2, [r3, #0]
                dataSize = Size;
 8003ede:	4a28      	ldr	r2, [pc, #160]	; (8003f80 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003ee0:	887b      	ldrh	r3, [r7, #2]
 8003ee2:	8013      	strh	r3, [r2, #0]
                if (oldPos+dataSize > MainBuf_SIZE)
 8003ee4:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4b25      	ldr	r3, [pc, #148]	; (8003f80 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	4413      	add	r3, r2
 8003ef0:	2b14      	cmp	r3, #20
 8003ef2:	dd16      	ble.n	8003f22 <HAL_UARTEx_RxEventCallback+0x62>
                {
                        oldPos = 0;
 8003ef4:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	801a      	strh	r2, [r3, #0]
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8003efa:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	4b20      	ldr	r3, [pc, #128]	; (8003f84 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003f02:	4413      	add	r3, r2
 8003f04:	4a1e      	ldr	r2, [pc, #120]	; (8003f80 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003f06:	8812      	ldrh	r2, [r2, #0]
 8003f08:	491f      	ldr	r1, [pc, #124]	; (8003f88 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f007 fdf4 	bl	800baf8 <memcpy>
                        newPos = dataSize+oldPos;
 8003f10:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003f12:	881a      	ldrh	r2, [r3, #0]
 8003f14:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	4413      	add	r3, r2
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <HAL_UARTEx_RxEventCallback+0xb8>)
 8003f1e:	801a      	strh	r2, [r3, #0]
 8003f20:	e012      	b.n	8003f48 <HAL_UARTEx_RxEventCallback+0x88>
                }
                else
                {
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8003f22:	4b16      	ldr	r3, [pc, #88]	; (8003f7c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003f2a:	4413      	add	r3, r2
 8003f2c:	4a14      	ldr	r2, [pc, #80]	; (8003f80 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003f2e:	8812      	ldrh	r2, [r2, #0]
 8003f30:	4915      	ldr	r1, [pc, #84]	; (8003f88 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003f32:	4618      	mov	r0, r3
 8003f34:	f007 fde0 	bl	800baf8 <memcpy>
                        newPos = dataSize+oldPos;
 8003f38:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003f3a:	881a      	ldrh	r2, [r3, #0]
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	4413      	add	r3, r2
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <HAL_UARTEx_RxEventCallback+0xb8>)
 8003f46:	801a      	strh	r2, [r3, #0]
                }

                checkSum(MainBuf, Size);
 8003f48:	887b      	ldrh	r3, [r7, #2]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	480d      	ldr	r0, [pc, #52]	; (8003f84 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003f4e:	f7ff fedf 	bl	8003d10 <checkSum>
                HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 8003f52:	2214      	movs	r2, #20
 8003f54:	490c      	ldr	r1, [pc, #48]	; (8003f88 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003f56:	480d      	ldr	r0, [pc, #52]	; (8003f8c <HAL_UARTEx_RxEventCallback+0xcc>)
 8003f58:	f006 f982 	bl	800a260 <HAL_UARTEx_ReceiveToIdle_DMA>
                __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0208 	bic.w	r2, r2, #8
 8003f6a:	601a      	str	r2, [r3, #0]
        }
}
 8003f6c:	bf00      	nop
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40004400 	.word	0x40004400
 8003f78:	20000748 	.word	0x20000748
 8003f7c:	20000746 	.word	0x20000746
 8003f80:	2000074a 	.word	0x2000074a
 8003f84:	20000728 	.word	0x20000728
 8003f88:	20000714 	.word	0x20000714
 8003f8c:	200005d8 	.word	0x200005d8
 8003f90:	2000061c 	.word	0x2000061c
 8003f94:	00000000 	.word	0x00000000

08003f98 <UARTstateManagement>:

void UARTstateManagement(uint8_t *Mainbuffer)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	switch (UARTState)
 8003fa0:	4bad      	ldr	r3, [pc, #692]	; (8004258 <UARTstateManagement+0x2c0>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d01d      	beq.n	8003fe4 <UARTstateManagement+0x4c>
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	f300 835a 	bgt.w	8004662 <UARTstateManagement+0x6ca>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8354 	beq.w	800465c <UARTstateManagement+0x6c4>
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d000      	beq.n	8003fba <UARTstateManagement+0x22>
					homingFlag = 1;
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
					break;
				}
	}
}
 8003fb8:	e353      	b.n	8004662 <UARTstateManagement+0x6ca>
			if(Mainbuffer[oldPos] == 0b10010010)
 8003fba:	4ba8      	ldr	r3, [pc, #672]	; (800425c <UARTstateManagement+0x2c4>)
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b92      	cmp	r3, #146	; 0x92
 8003fc8:	f040 834a 	bne.w	8004660 <UARTstateManagement+0x6c8>
				modeNo = 2;
 8003fcc:	4ba4      	ldr	r3, [pc, #656]	; (8004260 <UARTstateManagement+0x2c8>)
 8003fce:	2202      	movs	r2, #2
 8003fd0:	701a      	strb	r2, [r3, #0]
				UARTState = MCUConnect;
 8003fd2:	4ba1      	ldr	r3, [pc, #644]	; (8004258 <UARTstateManagement+0x2c0>)
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003fd8:	2202      	movs	r2, #2
 8003fda:	49a2      	ldr	r1, [pc, #648]	; (8004264 <UARTstateManagement+0x2cc>)
 8003fdc:	48a2      	ldr	r0, [pc, #648]	; (8004268 <UARTstateManagement+0x2d0>)
 8003fde:	f006 f8c1 	bl	800a164 <HAL_UART_Transmit_DMA>
			break;
 8003fe2:	e33d      	b.n	8004660 <UARTstateManagement+0x6c8>
			stateSwitch = modeByte;
 8003fe4:	4ba1      	ldr	r3, [pc, #644]	; (800426c <UARTstateManagement+0x2d4>)
 8003fe6:	781a      	ldrb	r2, [r3, #0]
 8003fe8:	4ba1      	ldr	r3, [pc, #644]	; (8004270 <UARTstateManagement+0x2d8>)
 8003fea:	701a      	strb	r2, [r3, #0]
			switch (stateSwitch)
 8003fec:	4ba0      	ldr	r3, [pc, #640]	; (8004270 <UARTstateManagement+0x2d8>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	3b91      	subs	r3, #145	; 0x91
 8003ff2:	2b0d      	cmp	r3, #13
 8003ff4:	f200 8335 	bhi.w	8004662 <UARTstateManagement+0x6ca>
 8003ff8:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <UARTstateManagement+0x68>)
 8003ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffe:	bf00      	nop
 8004000:	08004039 	.word	0x08004039
 8004004:	0800404b 	.word	0x0800404b
 8004008:	08004063 	.word	0x08004063
 800400c:	0800407b 	.word	0x0800407b
 8004010:	080040db 	.word	0x080040db
 8004014:	08004149 	.word	0x08004149
 8004018:	08004181 	.word	0x08004181
 800401c:	08004295 	.word	0x08004295
 8004020:	080042d9 	.word	0x080042d9
 8004024:	0800437f 	.word	0x0800437f
 8004028:	080044f5 	.word	0x080044f5
 800402c:	080045eb 	.word	0x080045eb
 8004030:	0800461b 	.word	0x0800461b
 8004034:	08004633 	.word	0x08004633
					modeNo = 1;
 8004038:	4b89      	ldr	r3, [pc, #548]	; (8004260 <UARTstateManagement+0x2c8>)
 800403a:	2201      	movs	r2, #1
 800403c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800403e:	2202      	movs	r2, #2
 8004040:	4988      	ldr	r1, [pc, #544]	; (8004264 <UARTstateManagement+0x2cc>)
 8004042:	4889      	ldr	r0, [pc, #548]	; (8004268 <UARTstateManagement+0x2d0>)
 8004044:	f006 f88e 	bl	800a164 <HAL_UART_Transmit_DMA>
					break;
 8004048:	e30b      	b.n	8004662 <UARTstateManagement+0x6ca>
					modeNo = 2;
 800404a:	4b85      	ldr	r3, [pc, #532]	; (8004260 <UARTstateManagement+0x2c8>)
 800404c:	2202      	movs	r2, #2
 800404e:	701a      	strb	r2, [r3, #0]
					UARTState = MCUConnect;
 8004050:	4b81      	ldr	r3, [pc, #516]	; (8004258 <UARTstateManagement+0x2c0>)
 8004052:	2202      	movs	r2, #2
 8004054:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004056:	2202      	movs	r2, #2
 8004058:	4982      	ldr	r1, [pc, #520]	; (8004264 <UARTstateManagement+0x2cc>)
 800405a:	4883      	ldr	r0, [pc, #524]	; (8004268 <UARTstateManagement+0x2d0>)
 800405c:	f006 f882 	bl	800a164 <HAL_UART_Transmit_DMA>
					break;
 8004060:	e2ff      	b.n	8004662 <UARTstateManagement+0x6ca>
					modeNo = 3;
 8004062:	4b7f      	ldr	r3, [pc, #508]	; (8004260 <UARTstateManagement+0x2c8>)
 8004064:	2203      	movs	r2, #3
 8004066:	701a      	strb	r2, [r3, #0]
					UARTState = MCUDisconnect;
 8004068:	4b7b      	ldr	r3, [pc, #492]	; (8004258 <UARTstateManagement+0x2c0>)
 800406a:	2201      	movs	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800406e:	2202      	movs	r2, #2
 8004070:	497c      	ldr	r1, [pc, #496]	; (8004264 <UARTstateManagement+0x2cc>)
 8004072:	487d      	ldr	r0, [pc, #500]	; (8004268 <UARTstateManagement+0x2d0>)
 8004074:	f006 f876 	bl	800a164 <HAL_UART_Transmit_DMA>
					break;
 8004078:	e2f3      	b.n	8004662 <UARTstateManagement+0x6ca>
					modeNo = 4;
 800407a:	4b79      	ldr	r3, [pc, #484]	; (8004260 <UARTstateManagement+0x2c8>)
 800407c:	2204      	movs	r2, #4
 800407e:	701a      	strb	r2, [r3, #0]
					uartVelo = (float)((Mainbuffer[oldPos + 2 % MainBuf_SIZE])/255.0)*10.0;
 8004080:	4b76      	ldr	r3, [pc, #472]	; (800425c <UARTstateManagement+0x2c4>)
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	3302      	adds	r3, #2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f7fc f9f5 	bl	800047c <__aeabi_i2d>
 8004092:	a36d      	add	r3, pc, #436	; (adr r3, 8004248 <UARTstateManagement+0x2b0>)
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f7fc fb84 	bl	80007a4 <__aeabi_ddiv>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4610      	mov	r0, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	f7fc fc86 	bl	80009b4 <__aeabi_d2f>
 80040a8:	ee07 0a10 	vmov	s14, r0
 80040ac:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80040b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b4:	4b6f      	ldr	r3, [pc, #444]	; (8004274 <UARTstateManagement+0x2dc>)
 80040b6:	edc3 7a00 	vstr	s15, [r3]
					Robot.QVMax = uartVelo*6.0;
 80040ba:	4b6e      	ldr	r3, [pc, #440]	; (8004274 <UARTstateManagement+0x2dc>)
 80040bc:	edd3 7a00 	vldr	s15, [r3]
 80040c0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80040c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040c8:	4b6b      	ldr	r3, [pc, #428]	; (8004278 <UARTstateManagement+0x2e0>)
 80040ca:	edc3 7a08 	vstr	s15, [r3, #32]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80040ce:	2202      	movs	r2, #2
 80040d0:	4964      	ldr	r1, [pc, #400]	; (8004264 <UARTstateManagement+0x2cc>)
 80040d2:	4865      	ldr	r0, [pc, #404]	; (8004268 <UARTstateManagement+0x2d0>)
 80040d4:	f006 f846 	bl	800a164 <HAL_UART_Transmit_DMA>
					break;
 80040d8:	e2c3      	b.n	8004662 <UARTstateManagement+0x6ca>
					modeNo = 5;
 80040da:	4b61      	ldr	r3, [pc, #388]	; (8004260 <UARTstateManagement+0x2c8>)
 80040dc:	2205      	movs	r2, #5
 80040de:	701a      	strb	r2, [r3, #0]
					goalFlag = 1;
 80040e0:	4b66      	ldr	r3, [pc, #408]	; (800427c <UARTstateManagement+0x2e4>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	701a      	strb	r2, [r3, #0]
					goalAmount = 1;
 80040e6:	4b66      	ldr	r3, [pc, #408]	; (8004280 <UARTstateManagement+0x2e8>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	701a      	strb	r2, [r3, #0]
					uartPos = (float)((((Mainbuffer[oldPos + 1 % MainBuf_SIZE] << 8) | Mainbuffer[oldPos + 2 % MainBuf_SIZE])*360.0)/62800);
 80040ec:	4b5b      	ldr	r3, [pc, #364]	; (800425c <UARTstateManagement+0x2c4>)
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	3301      	adds	r3, #1
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	4413      	add	r3, r2
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	4a58      	ldr	r2, [pc, #352]	; (800425c <UARTstateManagement+0x2c4>)
 80040fc:	8812      	ldrh	r2, [r2, #0]
 80040fe:	3202      	adds	r2, #2
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	440a      	add	r2, r1
 8004104:	7812      	ldrb	r2, [r2, #0]
 8004106:	4313      	orrs	r3, r2
 8004108:	4618      	mov	r0, r3
 800410a:	f7fc f9b7 	bl	800047c <__aeabi_i2d>
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	4b5c      	ldr	r3, [pc, #368]	; (8004284 <UARTstateManagement+0x2ec>)
 8004114:	f7fc fa1c 	bl	8000550 <__aeabi_dmul>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4610      	mov	r0, r2
 800411e:	4619      	mov	r1, r3
 8004120:	a34b      	add	r3, pc, #300	; (adr r3, 8004250 <UARTstateManagement+0x2b8>)
 8004122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004126:	f7fc fb3d 	bl	80007a4 <__aeabi_ddiv>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4610      	mov	r0, r2
 8004130:	4619      	mov	r1, r3
 8004132:	f7fc fc3f 	bl	80009b4 <__aeabi_d2f>
 8004136:	4603      	mov	r3, r0
 8004138:	4a53      	ldr	r2, [pc, #332]	; (8004288 <UARTstateManagement+0x2f0>)
 800413a:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800413c:	2202      	movs	r2, #2
 800413e:	4949      	ldr	r1, [pc, #292]	; (8004264 <UARTstateManagement+0x2cc>)
 8004140:	4849      	ldr	r0, [pc, #292]	; (8004268 <UARTstateManagement+0x2d0>)
 8004142:	f006 f80f 	bl	800a164 <HAL_UART_Transmit_DMA>
					break;
 8004146:	e28c      	b.n	8004662 <UARTstateManagement+0x6ca>
					modeNo = 6;
 8004148:	4b45      	ldr	r3, [pc, #276]	; (8004260 <UARTstateManagement+0x2c8>)
 800414a:	2206      	movs	r2, #6
 800414c:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 800414e:	4b4b      	ldr	r3, [pc, #300]	; (800427c <UARTstateManagement+0x2e4>)
 8004150:	2202      	movs	r2, #2
 8004152:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8004154:	220f      	movs	r2, #15
 8004156:	2100      	movs	r1, #0
 8004158:	484c      	ldr	r0, [pc, #304]	; (800428c <UARTstateManagement+0x2f4>)
 800415a:	f007 fcdb 	bl	800bb14 <memset>
					goalAmount = 1;
 800415e:	4b48      	ldr	r3, [pc, #288]	; (8004280 <UARTstateManagement+0x2e8>)
 8004160:	2201      	movs	r2, #1
 8004162:	701a      	strb	r2, [r3, #0]
					uartGoal[0] = Mainbuffer[oldPos + 2 % MainBuf_SIZE];
 8004164:	4b3d      	ldr	r3, [pc, #244]	; (800425c <UARTstateManagement+0x2c4>)
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	3302      	adds	r3, #2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	781a      	ldrb	r2, [r3, #0]
 8004170:	4b46      	ldr	r3, [pc, #280]	; (800428c <UARTstateManagement+0x2f4>)
 8004172:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004174:	2202      	movs	r2, #2
 8004176:	493b      	ldr	r1, [pc, #236]	; (8004264 <UARTstateManagement+0x2cc>)
 8004178:	483b      	ldr	r0, [pc, #236]	; (8004268 <UARTstateManagement+0x2d0>)
 800417a:	f005 fff3 	bl	800a164 <HAL_UART_Transmit_DMA>
					break;
 800417e:	e270      	b.n	8004662 <UARTstateManagement+0x6ca>
					modeNo = 7;
 8004180:	4b37      	ldr	r3, [pc, #220]	; (8004260 <UARTstateManagement+0x2c8>)
 8004182:	2207      	movs	r2, #7
 8004184:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8004186:	4b3d      	ldr	r3, [pc, #244]	; (800427c <UARTstateManagement+0x2e4>)
 8004188:	2202      	movs	r2, #2
 800418a:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 800418c:	220f      	movs	r2, #15
 800418e:	2100      	movs	r1, #0
 8004190:	483e      	ldr	r0, [pc, #248]	; (800428c <UARTstateManagement+0x2f4>)
 8004192:	f007 fcbf 	bl	800bb14 <memset>
					goalAmount = Mainbuffer[oldPos + 1 % MainBuf_SIZE];
 8004196:	4b31      	ldr	r3, [pc, #196]	; (800425c <UARTstateManagement+0x2c4>)
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	3301      	adds	r3, #1
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	4413      	add	r3, r2
 80041a0:	781a      	ldrb	r2, [r3, #0]
 80041a2:	4b37      	ldr	r3, [pc, #220]	; (8004280 <UARTstateManagement+0x2e8>)
 80041a4:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	e03a      	b.n	8004222 <UARTstateManagement+0x28a>
						uartGoal[0+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] & 15; // low 8 bit (last 4 bit)
 80041ac:	4b2b      	ldr	r3, [pc, #172]	; (800425c <UARTstateManagement+0x2c4>)
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1c99      	adds	r1, r3, #2
 80041b6:	4b36      	ldr	r3, [pc, #216]	; (8004290 <UARTstateManagement+0x2f8>)
 80041b8:	fb83 2301 	smull	r2, r3, r3, r1
 80041bc:	10da      	asrs	r2, r3, #3
 80041be:	17cb      	asrs	r3, r1, #31
 80041c0:	1ad2      	subs	r2, r2, r3
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	1aca      	subs	r2, r1, r3
 80041cc:	1883      	adds	r3, r0, r2
 80041ce:	461a      	mov	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4413      	add	r3, r2
 80041d4:	781a      	ldrb	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	f002 020f 	and.w	r2, r2, #15
 80041de:	b2d1      	uxtb	r1, r2
 80041e0:	4a2a      	ldr	r2, [pc, #168]	; (800428c <UARTstateManagement+0x2f4>)
 80041e2:	54d1      	strb	r1, [r2, r3]
						uartGoal[1+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] >> 4; // high 8 bit (first 4 bit)
 80041e4:	4b1d      	ldr	r3, [pc, #116]	; (800425c <UARTstateManagement+0x2c4>)
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	1c99      	adds	r1, r3, #2
 80041ee:	4b28      	ldr	r3, [pc, #160]	; (8004290 <UARTstateManagement+0x2f8>)
 80041f0:	fb83 2301 	smull	r2, r3, r3, r1
 80041f4:	10da      	asrs	r2, r3, #3
 80041f6:	17cb      	asrs	r3, r1, #31
 80041f8:	1ad2      	subs	r2, r2, r3
 80041fa:	4613      	mov	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	1aca      	subs	r2, r1, r3
 8004204:	1883      	adds	r3, r0, r2
 8004206:	461a      	mov	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4413      	add	r3, r2
 800420c:	781a      	ldrb	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	3301      	adds	r3, #1
 8004214:	0912      	lsrs	r2, r2, #4
 8004216:	b2d1      	uxtb	r1, r2
 8004218:	4a1c      	ldr	r2, [pc, #112]	; (800428c <UARTstateManagement+0x2f4>)
 800421a:	54d1      	strb	r1, [r2, r3]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	3301      	adds	r3, #1
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	4b17      	ldr	r3, [pc, #92]	; (8004280 <UARTstateManagement+0x2e8>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	3301      	adds	r3, #1
 8004228:	0fda      	lsrs	r2, r3, #31
 800422a:	4413      	add	r3, r2
 800422c:	105b      	asrs	r3, r3, #1
 800422e:	461a      	mov	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4293      	cmp	r3, r2
 8004234:	dbba      	blt.n	80041ac <UARTstateManagement+0x214>
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004236:	2202      	movs	r2, #2
 8004238:	490a      	ldr	r1, [pc, #40]	; (8004264 <UARTstateManagement+0x2cc>)
 800423a:	480b      	ldr	r0, [pc, #44]	; (8004268 <UARTstateManagement+0x2d0>)
 800423c:	f005 ff92 	bl	800a164 <HAL_UART_Transmit_DMA>
					break;
 8004240:	e20f      	b.n	8004662 <UARTstateManagement+0x6ca>
 8004242:	bf00      	nop
 8004244:	f3af 8000 	nop.w
 8004248:	00000000 	.word	0x00000000
 800424c:	406fe000 	.word	0x406fe000
 8004250:	00000000 	.word	0x00000000
 8004254:	40eeaa00 	.word	0x40eeaa00
 8004258:	20000710 	.word	0x20000710
 800425c:	20000746 	.word	0x20000746
 8004260:	20000770 	.word	0x20000770
 8004264:	2000002c 	.word	0x2000002c
 8004268:	200005d8 	.word	0x200005d8
 800426c:	20000771 	.word	0x20000771
 8004270:	20000744 	.word	0x20000744
 8004274:	20000750 	.word	0x20000750
 8004278:	200006dc 	.word	0x200006dc
 800427c:	20000769 	.word	0x20000769
 8004280:	20000767 	.word	0x20000767
 8004284:	40768000 	.word	0x40768000
 8004288:	20000754 	.word	0x20000754
 800428c:	20000758 	.word	0x20000758
 8004290:	66666667 	.word	0x66666667
					modeNo = 8;
 8004294:	4b8a      	ldr	r3, [pc, #552]	; (80044c0 <UARTstateManagement+0x528>)
 8004296:	2208      	movs	r2, #8
 8004298:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 0){
 800429a:	4b8a      	ldr	r3, [pc, #552]	; (80044c4 <UARTstateManagement+0x52c>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d114      	bne.n	80042cc <UARTstateManagement+0x334>
					goingToGoalFlag = 0;
 80042a2:	4b89      	ldr	r3, [pc, #548]	; (80044c8 <UARTstateManagement+0x530>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
					Robot.MotorIsOn = 1;
 80042a8:	4b88      	ldr	r3, [pc, #544]	; (80044cc <UARTstateManagement+0x534>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					Robot.flagStartTime = 1;
 80042b0:	4b86      	ldr	r3, [pc, #536]	; (80044cc <UARTstateManagement+0x534>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					Robot.RunningFlag = 1;
 80042b8:	4b84      	ldr	r3, [pc, #528]	; (80044cc <UARTstateManagement+0x534>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					doingTaskFlag = 1;
 80042c0:	4b80      	ldr	r3, [pc, #512]	; (80044c4 <UARTstateManagement+0x52c>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	701a      	strb	r2, [r3, #0]
					goalIDX = 0;
 80042c6:	4b82      	ldr	r3, [pc, #520]	; (80044d0 <UARTstateManagement+0x538>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80042cc:	2202      	movs	r2, #2
 80042ce:	4981      	ldr	r1, [pc, #516]	; (80044d4 <UARTstateManagement+0x53c>)
 80042d0:	4881      	ldr	r0, [pc, #516]	; (80044d8 <UARTstateManagement+0x540>)
 80042d2:	f005 ff47 	bl	800a164 <HAL_UART_Transmit_DMA>
					break;
 80042d6:	e1c4      	b.n	8004662 <UARTstateManagement+0x6ca>
					modeNo = 9;
 80042d8:	4b79      	ldr	r3, [pc, #484]	; (80044c0 <UARTstateManagement+0x528>)
 80042da:	2209      	movs	r2, #9
 80042dc:	701a      	strb	r2, [r3, #0]
					Robot.CurrentStation = 0;
 80042de:	4b7b      	ldr	r3, [pc, #492]	; (80044cc <UARTstateManagement+0x534>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	811a      	strh	r2, [r3, #8]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 80042e4:	4b77      	ldr	r3, [pc, #476]	; (80044c4 <UARTstateManagement+0x52c>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d004      	beq.n	80042f6 <UARTstateManagement+0x35e>
 80042ec:	4b77      	ldr	r3, [pc, #476]	; (80044cc <UARTstateManagement+0x534>)
 80042ee:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d11f      	bne.n	8004336 <UARTstateManagement+0x39e>
 80042f6:	4b77      	ldr	r3, [pc, #476]	; (80044d4 <UARTstateManagement+0x53c>)
 80042f8:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 80042fa:	4b78      	ldr	r3, [pc, #480]	; (80044dc <UARTstateManagement+0x544>)
 80042fc:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 153; // start-mode
 80042fe:	4b77      	ldr	r3, [pc, #476]	; (80044dc <UARTstateManagement+0x544>)
 8004300:	2299      	movs	r2, #153	; 0x99
 8004302:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = Robot.CurrentStation; // set current goal
 8004304:	4b71      	ldr	r3, [pc, #452]	; (80044cc <UARTstateManagement+0x534>)
 8004306:	891b      	ldrh	r3, [r3, #8]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	4b74      	ldr	r3, [pc, #464]	; (80044dc <UARTstateManagement+0x544>)
 800430c:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 800430e:	4b73      	ldr	r3, [pc, #460]	; (80044dc <UARTstateManagement+0x544>)
 8004310:	789a      	ldrb	r2, [r3, #2]
 8004312:	4b72      	ldr	r3, [pc, #456]	; (80044dc <UARTstateManagement+0x544>)
 8004314:	78db      	ldrb	r3, [r3, #3]
 8004316:	4413      	add	r3, r2
 8004318:	b2da      	uxtb	r2, r3
 800431a:	4b70      	ldr	r3, [pc, #448]	; (80044dc <UARTstateManagement+0x544>)
 800431c:	791b      	ldrb	r3, [r3, #4]
 800431e:	4413      	add	r3, r2
 8004320:	b2db      	uxtb	r3, r3
 8004322:	43db      	mvns	r3, r3
 8004324:	b2da      	uxtb	r2, r3
 8004326:	4b6d      	ldr	r3, [pc, #436]	; (80044dc <UARTstateManagement+0x544>)
 8004328:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 800432a:	2206      	movs	r2, #6
 800432c:	496b      	ldr	r1, [pc, #428]	; (80044dc <UARTstateManagement+0x544>)
 800432e:	486a      	ldr	r0, [pc, #424]	; (80044d8 <UARTstateManagement+0x540>)
 8004330:	f005 ff18 	bl	800a164 <HAL_UART_Transmit_DMA>
					break;
 8004334:	e195      	b.n	8004662 <UARTstateManagement+0x6ca>
 8004336:	4b6a      	ldr	r3, [pc, #424]	; (80044e0 <UARTstateManagement+0x548>)
 8004338:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 800433a:	4b68      	ldr	r3, [pc, #416]	; (80044dc <UARTstateManagement+0x544>)
 800433c:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 800433e:	4a69      	ldr	r2, [pc, #420]	; (80044e4 <UARTstateManagement+0x54c>)
 8004340:	4b64      	ldr	r3, [pc, #400]	; (80044d4 <UARTstateManagement+0x53c>)
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 153; // start-mode
 8004346:	4b65      	ldr	r3, [pc, #404]	; (80044dc <UARTstateManagement+0x544>)
 8004348:	2299      	movs	r2, #153	; 0x99
 800434a:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = Robot.CurrentStation; // set currentStation
 800434c:	4b5f      	ldr	r3, [pc, #380]	; (80044cc <UARTstateManagement+0x534>)
 800434e:	891b      	ldrh	r3, [r3, #8]
 8004350:	b2da      	uxtb	r2, r3
 8004352:	4b62      	ldr	r3, [pc, #392]	; (80044dc <UARTstateManagement+0x544>)
 8004354:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8004356:	4b61      	ldr	r3, [pc, #388]	; (80044dc <UARTstateManagement+0x544>)
 8004358:	791a      	ldrb	r2, [r3, #4]
 800435a:	4b60      	ldr	r3, [pc, #384]	; (80044dc <UARTstateManagement+0x544>)
 800435c:	795b      	ldrb	r3, [r3, #5]
 800435e:	4413      	add	r3, r2
 8004360:	b2da      	uxtb	r2, r3
 8004362:	4b5e      	ldr	r3, [pc, #376]	; (80044dc <UARTstateManagement+0x544>)
 8004364:	799b      	ldrb	r3, [r3, #6]
 8004366:	4413      	add	r3, r2
 8004368:	b2db      	uxtb	r3, r3
 800436a:	43db      	mvns	r3, r3
 800436c:	b2da      	uxtb	r2, r3
 800436e:	4b5b      	ldr	r3, [pc, #364]	; (80044dc <UARTstateManagement+0x544>)
 8004370:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 8004372:	2208      	movs	r2, #8
 8004374:	4959      	ldr	r1, [pc, #356]	; (80044dc <UARTstateManagement+0x544>)
 8004376:	4858      	ldr	r0, [pc, #352]	; (80044d8 <UARTstateManagement+0x540>)
 8004378:	f005 fef4 	bl	800a164 <HAL_UART_Transmit_DMA>
					break;
 800437c:	e171      	b.n	8004662 <UARTstateManagement+0x6ca>
					modeNo = 10;
 800437e:	4b50      	ldr	r3, [pc, #320]	; (80044c0 <UARTstateManagement+0x528>)
 8004380:	220a      	movs	r2, #10
 8004382:	701a      	strb	r2, [r3, #0]
					posData = (uint16_t)(((((Robot.Position)*10000.0)*M_PI)/180.0));
 8004384:	4b51      	ldr	r3, [pc, #324]	; (80044cc <UARTstateManagement+0x534>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f7fc f889 	bl	80004a0 <__aeabi_f2d>
 800438e:	a348      	add	r3, pc, #288	; (adr r3, 80044b0 <UARTstateManagement+0x518>)
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f7fc f8dc 	bl	8000550 <__aeabi_dmul>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4610      	mov	r0, r2
 800439e:	4619      	mov	r1, r3
 80043a0:	a345      	add	r3, pc, #276	; (adr r3, 80044b8 <UARTstateManagement+0x520>)
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	f7fc f8d3 	bl	8000550 <__aeabi_dmul>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	4610      	mov	r0, r2
 80043b0:	4619      	mov	r1, r3
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	4b4c      	ldr	r3, [pc, #304]	; (80044e8 <UARTstateManagement+0x550>)
 80043b8:	f7fc f9f4 	bl	80007a4 <__aeabi_ddiv>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4610      	mov	r0, r2
 80043c2:	4619      	mov	r1, r3
 80043c4:	f7fc fad6 	bl	8000974 <__aeabi_d2uiz>
 80043c8:	4603      	mov	r3, r0
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	4b47      	ldr	r3, [pc, #284]	; (80044ec <UARTstateManagement+0x554>)
 80043ce:	801a      	strh	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 80043d0:	4b3c      	ldr	r3, [pc, #240]	; (80044c4 <UARTstateManagement+0x52c>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d004      	beq.n	80043e2 <UARTstateManagement+0x44a>
 80043d8:	4b3c      	ldr	r3, [pc, #240]	; (80044cc <UARTstateManagement+0x534>)
 80043da:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d126      	bne.n	8004430 <UARTstateManagement+0x498>
 80043e2:	4b3c      	ldr	r3, [pc, #240]	; (80044d4 <UARTstateManagement+0x53c>)
 80043e4:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 80043e6:	4b3d      	ldr	r3, [pc, #244]	; (80044dc <UARTstateManagement+0x544>)
 80043e8:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 154; // start-mode
 80043ea:	4b3c      	ldr	r3, [pc, #240]	; (80044dc <UARTstateManagement+0x544>)
 80043ec:	229a      	movs	r2, #154	; 0x9a
 80043ee:	709a      	strb	r2, [r3, #2]
						TxBuf[3] = (posData) >> 8 ; // set high byte posData
 80043f0:	4b3e      	ldr	r3, [pc, #248]	; (80044ec <UARTstateManagement+0x554>)
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	0a1b      	lsrs	r3, r3, #8
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	4b38      	ldr	r3, [pc, #224]	; (80044dc <UARTstateManagement+0x544>)
 80043fc:	70da      	strb	r2, [r3, #3]
						TxBuf[4] = (posData) & 0xff; // set low byte posData
 80043fe:	4b3b      	ldr	r3, [pc, #236]	; (80044ec <UARTstateManagement+0x554>)
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b2da      	uxtb	r2, r3
 8004404:	4b35      	ldr	r3, [pc, #212]	; (80044dc <UARTstateManagement+0x544>)
 8004406:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 8004408:	4b34      	ldr	r3, [pc, #208]	; (80044dc <UARTstateManagement+0x544>)
 800440a:	789a      	ldrb	r2, [r3, #2]
 800440c:	4b33      	ldr	r3, [pc, #204]	; (80044dc <UARTstateManagement+0x544>)
 800440e:	78db      	ldrb	r3, [r3, #3]
 8004410:	4413      	add	r3, r2
 8004412:	b2da      	uxtb	r2, r3
 8004414:	4b31      	ldr	r3, [pc, #196]	; (80044dc <UARTstateManagement+0x544>)
 8004416:	791b      	ldrb	r3, [r3, #4]
 8004418:	4413      	add	r3, r2
 800441a:	b2db      	uxtb	r3, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	b2da      	uxtb	r2, r3
 8004420:	4b2e      	ldr	r3, [pc, #184]	; (80044dc <UARTstateManagement+0x544>)
 8004422:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8004424:	2206      	movs	r2, #6
 8004426:	492d      	ldr	r1, [pc, #180]	; (80044dc <UARTstateManagement+0x544>)
 8004428:	482b      	ldr	r0, [pc, #172]	; (80044d8 <UARTstateManagement+0x540>)
 800442a:	f005 fe9b 	bl	800a164 <HAL_UART_Transmit_DMA>
					break;
 800442e:	e118      	b.n	8004662 <UARTstateManagement+0x6ca>
 8004430:	4b2b      	ldr	r3, [pc, #172]	; (80044e0 <UARTstateManagement+0x548>)
 8004432:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8004434:	4b29      	ldr	r3, [pc, #164]	; (80044dc <UARTstateManagement+0x544>)
 8004436:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 8004438:	4a2a      	ldr	r2, [pc, #168]	; (80044e4 <UARTstateManagement+0x54c>)
 800443a:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <UARTstateManagement+0x53c>)
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 154; // start-mode
 8004440:	4b26      	ldr	r3, [pc, #152]	; (80044dc <UARTstateManagement+0x544>)
 8004442:	229a      	movs	r2, #154	; 0x9a
 8004444:	711a      	strb	r2, [r3, #4]
						if(homingFlag == 1 && Robot.Position <= 0.5){
 8004446:	4b2a      	ldr	r3, [pc, #168]	; (80044f0 <UARTstateManagement+0x558>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d110      	bne.n	8004470 <UARTstateManagement+0x4d8>
 800444e:	4b1f      	ldr	r3, [pc, #124]	; (80044cc <UARTstateManagement+0x534>)
 8004450:	edd3 7a00 	vldr	s15, [r3]
 8004454:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800445c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004460:	d806      	bhi.n	8004470 <UARTstateManagement+0x4d8>
							TxBuf[5] = 0; // set high byte posData
 8004462:	4b1e      	ldr	r3, [pc, #120]	; (80044dc <UARTstateManagement+0x544>)
 8004464:	2200      	movs	r2, #0
 8004466:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = 0; // set low byte posData
 8004468:	4b1c      	ldr	r3, [pc, #112]	; (80044dc <UARTstateManagement+0x544>)
 800446a:	2200      	movs	r2, #0
 800446c:	719a      	strb	r2, [r3, #6]
 800446e:	e00b      	b.n	8004488 <UARTstateManagement+0x4f0>
							TxBuf[5] = (posData) >> 8 ; // set high byte posData
 8004470:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <UARTstateManagement+0x554>)
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	0a1b      	lsrs	r3, r3, #8
 8004476:	b29b      	uxth	r3, r3
 8004478:	b2da      	uxtb	r2, r3
 800447a:	4b18      	ldr	r3, [pc, #96]	; (80044dc <UARTstateManagement+0x544>)
 800447c:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = (posData) & 0xff; // set low byte posData
 800447e:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <UARTstateManagement+0x554>)
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b2da      	uxtb	r2, r3
 8004484:	4b15      	ldr	r3, [pc, #84]	; (80044dc <UARTstateManagement+0x544>)
 8004486:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8004488:	4b14      	ldr	r3, [pc, #80]	; (80044dc <UARTstateManagement+0x544>)
 800448a:	791a      	ldrb	r2, [r3, #4]
 800448c:	4b13      	ldr	r3, [pc, #76]	; (80044dc <UARTstateManagement+0x544>)
 800448e:	795b      	ldrb	r3, [r3, #5]
 8004490:	4413      	add	r3, r2
 8004492:	b2da      	uxtb	r2, r3
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <UARTstateManagement+0x544>)
 8004496:	799b      	ldrb	r3, [r3, #6]
 8004498:	4413      	add	r3, r2
 800449a:	b2db      	uxtb	r3, r3
 800449c:	43db      	mvns	r3, r3
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <UARTstateManagement+0x544>)
 80044a2:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 80044a4:	2208      	movs	r2, #8
 80044a6:	490d      	ldr	r1, [pc, #52]	; (80044dc <UARTstateManagement+0x544>)
 80044a8:	480b      	ldr	r0, [pc, #44]	; (80044d8 <UARTstateManagement+0x540>)
 80044aa:	f005 fe5b 	bl	800a164 <HAL_UART_Transmit_DMA>
					break;
 80044ae:	e0d8      	b.n	8004662 <UARTstateManagement+0x6ca>
 80044b0:	00000000 	.word	0x00000000
 80044b4:	40c38800 	.word	0x40c38800
 80044b8:	54442d18 	.word	0x54442d18
 80044bc:	400921fb 	.word	0x400921fb
 80044c0:	20000770 	.word	0x20000770
 80044c4:	2000076c 	.word	0x2000076c
 80044c8:	2000076d 	.word	0x2000076d
 80044cc:	200006dc 	.word	0x200006dc
 80044d0:	20000768 	.word	0x20000768
 80044d4:	2000002c 	.word	0x2000002c
 80044d8:	200005d8 	.word	0x200005d8
 80044dc:	2000073c 	.word	0x2000073c
 80044e0:	20000030 	.word	0x20000030
 80044e4:	2000073e 	.word	0x2000073e
 80044e8:	40668000 	.word	0x40668000
 80044ec:	2000074c 	.word	0x2000074c
 80044f0:	2000076b 	.word	0x2000076b
					modeNo = 11;
 80044f4:	4b60      	ldr	r3, [pc, #384]	; (8004678 <UARTstateManagement+0x6e0>)
 80044f6:	220b      	movs	r2, #11
 80044f8:	701a      	strb	r2, [r3, #0]
					veloData = (((AbsVal(Robot.Velocity)/6.0)*255.0)/10.0);
 80044fa:	4b60      	ldr	r3, [pc, #384]	; (800467c <UARTstateManagement+0x6e4>)
 80044fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004500:	eeb0 0a67 	vmov.f32	s0, s15
 8004504:	f7fd f992 	bl	800182c <AbsVal>
 8004508:	ee10 3a10 	vmov	r3, s0
 800450c:	4618      	mov	r0, r3
 800450e:	f7fb ffc7 	bl	80004a0 <__aeabi_f2d>
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	4b5a      	ldr	r3, [pc, #360]	; (8004680 <UARTstateManagement+0x6e8>)
 8004518:	f7fc f944 	bl	80007a4 <__aeabi_ddiv>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	a352      	add	r3, pc, #328	; (adr r3, 8004670 <UARTstateManagement+0x6d8>)
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	f7fc f811 	bl	8000550 <__aeabi_dmul>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4610      	mov	r0, r2
 8004534:	4619      	mov	r1, r3
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	4b52      	ldr	r3, [pc, #328]	; (8004684 <UARTstateManagement+0x6ec>)
 800453c:	f7fc f932 	bl	80007a4 <__aeabi_ddiv>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4610      	mov	r0, r2
 8004546:	4619      	mov	r1, r3
 8004548:	f7fc fa14 	bl	8000974 <__aeabi_d2uiz>
 800454c:	4603      	mov	r3, r0
 800454e:	b2da      	uxtb	r2, r3
 8004550:	4b4d      	ldr	r3, [pc, #308]	; (8004688 <UARTstateManagement+0x6f0>)
 8004552:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8004554:	4b4d      	ldr	r3, [pc, #308]	; (800468c <UARTstateManagement+0x6f4>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d004      	beq.n	8004566 <UARTstateManagement+0x5ce>
 800455c:	4b47      	ldr	r3, [pc, #284]	; (800467c <UARTstateManagement+0x6e4>)
 800455e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004562:	2b01      	cmp	r3, #1
 8004564:	d11e      	bne.n	80045a4 <UARTstateManagement+0x60c>
 8004566:	4b4a      	ldr	r3, [pc, #296]	; (8004690 <UARTstateManagement+0x6f8>)
 8004568:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 800456a:	4b4a      	ldr	r3, [pc, #296]	; (8004694 <UARTstateManagement+0x6fc>)
 800456c:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 155;
 800456e:	4b49      	ldr	r3, [pc, #292]	; (8004694 <UARTstateManagement+0x6fc>)
 8004570:	229b      	movs	r2, #155	; 0x9b
 8004572:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = veloData; // set low byte posData
 8004574:	4b44      	ldr	r3, [pc, #272]	; (8004688 <UARTstateManagement+0x6f0>)
 8004576:	781a      	ldrb	r2, [r3, #0]
 8004578:	4b46      	ldr	r3, [pc, #280]	; (8004694 <UARTstateManagement+0x6fc>)
 800457a:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 800457c:	4b45      	ldr	r3, [pc, #276]	; (8004694 <UARTstateManagement+0x6fc>)
 800457e:	789a      	ldrb	r2, [r3, #2]
 8004580:	4b44      	ldr	r3, [pc, #272]	; (8004694 <UARTstateManagement+0x6fc>)
 8004582:	78db      	ldrb	r3, [r3, #3]
 8004584:	4413      	add	r3, r2
 8004586:	b2da      	uxtb	r2, r3
 8004588:	4b42      	ldr	r3, [pc, #264]	; (8004694 <UARTstateManagement+0x6fc>)
 800458a:	791b      	ldrb	r3, [r3, #4]
 800458c:	4413      	add	r3, r2
 800458e:	b2db      	uxtb	r3, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	b2da      	uxtb	r2, r3
 8004594:	4b3f      	ldr	r3, [pc, #252]	; (8004694 <UARTstateManagement+0x6fc>)
 8004596:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8004598:	2206      	movs	r2, #6
 800459a:	493e      	ldr	r1, [pc, #248]	; (8004694 <UARTstateManagement+0x6fc>)
 800459c:	483e      	ldr	r0, [pc, #248]	; (8004698 <UARTstateManagement+0x700>)
 800459e:	f005 fde1 	bl	800a164 <HAL_UART_Transmit_DMA>
					break;
 80045a2:	e05e      	b.n	8004662 <UARTstateManagement+0x6ca>
 80045a4:	4b3d      	ldr	r3, [pc, #244]	; (800469c <UARTstateManagement+0x704>)
 80045a6:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 80045a8:	4b3a      	ldr	r3, [pc, #232]	; (8004694 <UARTstateManagement+0x6fc>)
 80045aa:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 80045ac:	4a3c      	ldr	r2, [pc, #240]	; (80046a0 <UARTstateManagement+0x708>)
 80045ae:	4b38      	ldr	r3, [pc, #224]	; (8004690 <UARTstateManagement+0x6f8>)
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 155; // start-mode
 80045b4:	4b37      	ldr	r3, [pc, #220]	; (8004694 <UARTstateManagement+0x6fc>)
 80045b6:	229b      	movs	r2, #155	; 0x9b
 80045b8:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = veloData; // set low byte posData
 80045ba:	4b33      	ldr	r3, [pc, #204]	; (8004688 <UARTstateManagement+0x6f0>)
 80045bc:	781a      	ldrb	r2, [r3, #0]
 80045be:	4b35      	ldr	r3, [pc, #212]	; (8004694 <UARTstateManagement+0x6fc>)
 80045c0:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 80045c2:	4b34      	ldr	r3, [pc, #208]	; (8004694 <UARTstateManagement+0x6fc>)
 80045c4:	791a      	ldrb	r2, [r3, #4]
 80045c6:	4b33      	ldr	r3, [pc, #204]	; (8004694 <UARTstateManagement+0x6fc>)
 80045c8:	795b      	ldrb	r3, [r3, #5]
 80045ca:	4413      	add	r3, r2
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	4b31      	ldr	r3, [pc, #196]	; (8004694 <UARTstateManagement+0x6fc>)
 80045d0:	799b      	ldrb	r3, [r3, #6]
 80045d2:	4413      	add	r3, r2
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	4b2e      	ldr	r3, [pc, #184]	; (8004694 <UARTstateManagement+0x6fc>)
 80045dc:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 80045de:	2208      	movs	r2, #8
 80045e0:	492c      	ldr	r1, [pc, #176]	; (8004694 <UARTstateManagement+0x6fc>)
 80045e2:	482d      	ldr	r0, [pc, #180]	; (8004698 <UARTstateManagement+0x700>)
 80045e4:	f005 fdbe 	bl	800a164 <HAL_UART_Transmit_DMA>
					break;
 80045e8:	e03b      	b.n	8004662 <UARTstateManagement+0x6ca>
					modeNo = 12;
 80045ea:	4b23      	ldr	r3, [pc, #140]	; (8004678 <UARTstateManagement+0x6e0>)
 80045ec:	220c      	movs	r2, #12
 80045ee:	701a      	strb	r2, [r3, #0]
					RobotState = EndEff;
 80045f0:	4b2c      	ldr	r3, [pc, #176]	; (80046a4 <UARTstateManagement+0x70c>)
 80045f2:	2203      	movs	r2, #3
 80045f4:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 80045f6:	4b2c      	ldr	r3, [pc, #176]	; (80046a8 <UARTstateManagement+0x710>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorReadFlag =  1;
 80045fc:	4b2b      	ldr	r3, [pc, #172]	; (80046ac <UARTstateManagement+0x714>)
 80045fe:	2201      	movs	r2, #1
 8004600:	701a      	strb	r2, [r3, #0]
					EndEffState = CheckBeforRun;
 8004602:	4b2b      	ldr	r3, [pc, #172]	; (80046b0 <UARTstateManagement+0x718>)
 8004604:	2201      	movs	r2, #1
 8004606:	701a      	strb	r2, [r3, #0]
					endEffFlag = 1;
 8004608:	4b2a      	ldr	r3, [pc, #168]	; (80046b4 <UARTstateManagement+0x71c>)
 800460a:	2201      	movs	r2, #1
 800460c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800460e:	2202      	movs	r2, #2
 8004610:	491f      	ldr	r1, [pc, #124]	; (8004690 <UARTstateManagement+0x6f8>)
 8004612:	4821      	ldr	r0, [pc, #132]	; (8004698 <UARTstateManagement+0x700>)
 8004614:	f005 fda6 	bl	800a164 <HAL_UART_Transmit_DMA>
					break;
 8004618:	e023      	b.n	8004662 <UARTstateManagement+0x6ca>
					modeNo = 13;
 800461a:	4b17      	ldr	r3, [pc, #92]	; (8004678 <UARTstateManagement+0x6e0>)
 800461c:	220d      	movs	r2, #13
 800461e:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 8004620:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <UARTstateManagement+0x71c>)
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004626:	2202      	movs	r2, #2
 8004628:	4919      	ldr	r1, [pc, #100]	; (8004690 <UARTstateManagement+0x6f8>)
 800462a:	481b      	ldr	r0, [pc, #108]	; (8004698 <UARTstateManagement+0x700>)
 800462c:	f005 fd9a 	bl	800a164 <HAL_UART_Transmit_DMA>
					break;
 8004630:	e017      	b.n	8004662 <UARTstateManagement+0x6ca>
					modeNo = 14;
 8004632:	4b11      	ldr	r3, [pc, #68]	; (8004678 <UARTstateManagement+0x6e0>)
 8004634:	220e      	movs	r2, #14
 8004636:	701a      	strb	r2, [r3, #0]
					RobotRunToPositon(Robot.HomePositon,51.0);
 8004638:	4b10      	ldr	r3, [pc, #64]	; (800467c <UARTstateManagement+0x6e4>)
 800463a:	edd3 7a05 	vldr	s15, [r3, #20]
 800463e:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80046b8 <UARTstateManagement+0x720>
 8004642:	eeb0 0a67 	vmov.f32	s0, s15
 8004646:	f000 fbe5 	bl	8004e14 <RobotRunToPositon>
					homingFlag = 1;
 800464a:	4b1c      	ldr	r3, [pc, #112]	; (80046bc <UARTstateManagement+0x724>)
 800464c:	2201      	movs	r2, #1
 800464e:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004650:	2202      	movs	r2, #2
 8004652:	490f      	ldr	r1, [pc, #60]	; (8004690 <UARTstateManagement+0x6f8>)
 8004654:	4810      	ldr	r0, [pc, #64]	; (8004698 <UARTstateManagement+0x700>)
 8004656:	f005 fd85 	bl	800a164 <HAL_UART_Transmit_DMA>
					break;
 800465a:	e002      	b.n	8004662 <UARTstateManagement+0x6ca>
			break;
 800465c:	bf00      	nop
 800465e:	e000      	b.n	8004662 <UARTstateManagement+0x6ca>
			break;
 8004660:	bf00      	nop
}
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	f3af 8000 	nop.w
 8004670:	00000000 	.word	0x00000000
 8004674:	406fe000 	.word	0x406fe000
 8004678:	20000770 	.word	0x20000770
 800467c:	200006dc 	.word	0x200006dc
 8004680:	40180000 	.word	0x40180000
 8004684:	40240000 	.word	0x40240000
 8004688:	2000074e 	.word	0x2000074e
 800468c:	2000076c 	.word	0x2000076c
 8004690:	2000002c 	.word	0x2000002c
 8004694:	2000073c 	.word	0x2000073c
 8004698:	200005d8 	.word	0x200005d8
 800469c:	20000030 	.word	0x20000030
 80046a0:	2000073e 	.word	0x2000073e
 80046a4:	20000711 	.word	0x20000711
 80046a8:	20000b01 	.word	0x20000b01
 80046ac:	20000b00 	.word	0x20000b00
 80046b0:	20000000 	.word	0x20000000
 80046b4:	2000076a 	.word	0x2000076a
 80046b8:	424c0000 	.word	0x424c0000
 80046bc:	2000076b 	.word	0x2000076b

080046c0 <RobotstateManagement>:

void RobotstateManagement()
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
	switch (RobotState)
 80046c4:	4b91      	ldr	r3, [pc, #580]	; (800490c <RobotstateManagement+0x24c>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	f200 811d 	bhi.w	8004908 <RobotstateManagement+0x248>
 80046ce:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <RobotstateManagement+0x14>)
 80046d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d4:	080046e9 	.word	0x080046e9
 80046d8:	08004705 	.word	0x08004705
 80046dc:	0800475d 	.word	0x0800475d
 80046e0:	080048ff 	.word	0x080048ff
 80046e4:	080048e9 	.word	0x080048e9
	{
		case init:
			// Start Finding home Position
			Robot.flagSethome = 1;
 80046e8:	4b89      	ldr	r3, [pc, #548]	; (8004910 <RobotstateManagement+0x250>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			// Turn 360 Deg
			RobotRunToPositon(360.0,51.0);
 80046f0:	eddf 0a88 	vldr	s1, [pc, #544]	; 8004914 <RobotstateManagement+0x254>
 80046f4:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8004918 <RobotstateManagement+0x258>
 80046f8:	f000 fb8c 	bl	8004e14 <RobotRunToPositon>
			// Goto next State
			RobotState = FindHome;
 80046fc:	4b83      	ldr	r3, [pc, #524]	; (800490c <RobotstateManagement+0x24c>)
 80046fe:	2201      	movs	r2, #1
 8004700:	701a      	strb	r2, [r3, #0]
			break;
 8004702:	e101      	b.n	8004908 <RobotstateManagement+0x248>
		case FindHome:
			if(Robot.RunningFlag == 0)
 8004704:	4b82      	ldr	r3, [pc, #520]	; (8004910 <RobotstateManagement+0x250>)
 8004706:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800470a:	2b00      	cmp	r3, #0
 800470c:	f040 80f9 	bne.w	8004902 <RobotstateManagement+0x242>
			{
				if(Robot.flagSethome == 2)
 8004710:	4b7f      	ldr	r3, [pc, #508]	; (8004910 <RobotstateManagement+0x250>)
 8004712:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004716:	2b02      	cmp	r3, #2
 8004718:	d111      	bne.n	800473e <RobotstateManagement+0x7e>
				{
					RobotRunToPositon(Robot.HomePositon,51.0);
 800471a:	4b7d      	ldr	r3, [pc, #500]	; (8004910 <RobotstateManagement+0x250>)
 800471c:	edd3 7a05 	vldr	s15, [r3, #20]
 8004720:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8004914 <RobotstateManagement+0x254>
 8004724:	eeb0 0a67 	vmov.f32	s0, s15
 8004728:	f000 fb74 	bl	8004e14 <RobotRunToPositon>
					Robot.RunningFlag = 1;
 800472c:	4b78      	ldr	r3, [pc, #480]	; (8004910 <RobotstateManagement+0x250>)
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					Robot.flagSethome = 3;
 8004734:	4b76      	ldr	r3, [pc, #472]	; (8004910 <RobotstateManagement+0x250>)
 8004736:	2203      	movs	r2, #3
 8004738:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					RobotResetAll();
					UARTState = MCUConnect;
					RobotState = NormalOperation;
				}
			}
			break;
 800473c:	e0e1      	b.n	8004902 <RobotstateManagement+0x242>
				else if(Robot.flagSethome == 3)
 800473e:	4b74      	ldr	r3, [pc, #464]	; (8004910 <RobotstateManagement+0x250>)
 8004740:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004744:	2b03      	cmp	r3, #3
 8004746:	f040 80dc 	bne.w	8004902 <RobotstateManagement+0x242>
					RobotResetAll();
 800474a:	f000 fb9d 	bl	8004e88 <RobotResetAll>
					UARTState = MCUConnect;
 800474e:	4b73      	ldr	r3, [pc, #460]	; (800491c <RobotstateManagement+0x25c>)
 8004750:	2202      	movs	r2, #2
 8004752:	701a      	strb	r2, [r3, #0]
					RobotState = NormalOperation;
 8004754:	4b6d      	ldr	r3, [pc, #436]	; (800490c <RobotstateManagement+0x24c>)
 8004756:	2202      	movs	r2, #2
 8004758:	701a      	strb	r2, [r3, #0]
			break;
 800475a:	e0d2      	b.n	8004902 <RobotstateManagement+0x242>
		case NormalOperation:
			if(notContinueFlag == 1){
 800475c:	4b70      	ldr	r3, [pc, #448]	; (8004920 <RobotstateManagement+0x260>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d10e      	bne.n	8004782 <RobotstateManagement+0xc2>
				Robot.MotorIsOn = 1;
 8004764:	4b6a      	ldr	r3, [pc, #424]	; (8004910 <RobotstateManagement+0x250>)
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				Robot.RunningFlag = 1;
 800476c:	4b68      	ldr	r3, [pc, #416]	; (8004910 <RobotstateManagement+0x250>)
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				Robot.flagStartTime = 1;
 8004774:	4b66      	ldr	r3, [pc, #408]	; (8004910 <RobotstateManagement+0x250>)
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				notContinueFlag = 0;
 800477c:	4b68      	ldr	r3, [pc, #416]	; (8004920 <RobotstateManagement+0x260>)
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
			}
			if(doingTaskFlag == 1 && Robot.RunningFlag == 1 && endEffFlag == 0){
 8004782:	4b68      	ldr	r3, [pc, #416]	; (8004924 <RobotstateManagement+0x264>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d159      	bne.n	800483e <RobotstateManagement+0x17e>
 800478a:	4b61      	ldr	r3, [pc, #388]	; (8004910 <RobotstateManagement+0x250>)
 800478c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004790:	2b01      	cmp	r3, #1
 8004792:	d154      	bne.n	800483e <RobotstateManagement+0x17e>
 8004794:	4b64      	ldr	r3, [pc, #400]	; (8004928 <RobotstateManagement+0x268>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d150      	bne.n	800483e <RobotstateManagement+0x17e>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800479c:	2201      	movs	r2, #1
 800479e:	2108      	movs	r1, #8
 80047a0:	4862      	ldr	r0, [pc, #392]	; (800492c <RobotstateManagement+0x26c>)
 80047a2:	f001 fecb 	bl	800653c <HAL_GPIO_WritePin>
				if(goalFlag == 1 && goingToGoalFlag == 0){
 80047a6:	4b62      	ldr	r3, [pc, #392]	; (8004930 <RobotstateManagement+0x270>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d11d      	bne.n	80047ea <RobotstateManagement+0x12a>
 80047ae:	4b61      	ldr	r3, [pc, #388]	; (8004934 <RobotstateManagement+0x274>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d119      	bne.n	80047ea <RobotstateManagement+0x12a>
					goingToGoalFlag = 1;
 80047b6:	4b5f      	ldr	r3, [pc, #380]	; (8004934 <RobotstateManagement+0x274>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = uartPos;
 80047bc:	4b5e      	ldr	r3, [pc, #376]	; (8004938 <RobotstateManagement+0x278>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a53      	ldr	r2, [pc, #332]	; (8004910 <RobotstateManagement+0x250>)
 80047c2:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculationScurve(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 80047c4:	4b52      	ldr	r3, [pc, #328]	; (8004910 <RobotstateManagement+0x250>)
 80047c6:	edd3 7a00 	vldr	s15, [r3]
 80047ca:	4b51      	ldr	r3, [pc, #324]	; (8004910 <RobotstateManagement+0x250>)
 80047cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80047d0:	4b4f      	ldr	r3, [pc, #316]	; (8004910 <RobotstateManagement+0x250>)
 80047d2:	edd3 6a08 	vldr	s13, [r3, #32]
 80047d6:	eeb0 1a66 	vmov.f32	s2, s13
 80047da:	eef0 0a47 	vmov.f32	s1, s14
 80047de:	eeb0 0a67 	vmov.f32	s0, s15
 80047e2:	4856      	ldr	r0, [pc, #344]	; (800493c <RobotstateManagement+0x27c>)
 80047e4:	f7fd f844 	bl	8001870 <CoefficientAndTimeCalculationScurve>
 80047e8:	e029      	b.n	800483e <RobotstateManagement+0x17e>
				}
				else if(goalFlag == 2 && goingToGoalFlag == 0){
 80047ea:	4b51      	ldr	r3, [pc, #324]	; (8004930 <RobotstateManagement+0x270>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d125      	bne.n	800483e <RobotstateManagement+0x17e>
 80047f2:	4b50      	ldr	r3, [pc, #320]	; (8004934 <RobotstateManagement+0x274>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d121      	bne.n	800483e <RobotstateManagement+0x17e>
					goingToGoalFlag = 1;
 80047fa:	4b4e      	ldr	r3, [pc, #312]	; (8004934 <RobotstateManagement+0x274>)
 80047fc:	2201      	movs	r2, #1
 80047fe:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = goalDeg[uartGoal[goalIDX]-1];
 8004800:	4b4f      	ldr	r3, [pc, #316]	; (8004940 <RobotstateManagement+0x280>)
 8004802:	f993 3000 	ldrsb.w	r3, [r3]
 8004806:	461a      	mov	r2, r3
 8004808:	4b4e      	ldr	r3, [pc, #312]	; (8004944 <RobotstateManagement+0x284>)
 800480a:	5c9b      	ldrb	r3, [r3, r2]
 800480c:	3b01      	subs	r3, #1
 800480e:	4a4e      	ldr	r2, [pc, #312]	; (8004948 <RobotstateManagement+0x288>)
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a3e      	ldr	r2, [pc, #248]	; (8004910 <RobotstateManagement+0x250>)
 8004818:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculationScurve(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 800481a:	4b3d      	ldr	r3, [pc, #244]	; (8004910 <RobotstateManagement+0x250>)
 800481c:	edd3 7a00 	vldr	s15, [r3]
 8004820:	4b3b      	ldr	r3, [pc, #236]	; (8004910 <RobotstateManagement+0x250>)
 8004822:	ed93 7a03 	vldr	s14, [r3, #12]
 8004826:	4b3a      	ldr	r3, [pc, #232]	; (8004910 <RobotstateManagement+0x250>)
 8004828:	edd3 6a08 	vldr	s13, [r3, #32]
 800482c:	eeb0 1a66 	vmov.f32	s2, s13
 8004830:	eef0 0a47 	vmov.f32	s1, s14
 8004834:	eeb0 0a67 	vmov.f32	s0, s15
 8004838:	4840      	ldr	r0, [pc, #256]	; (800493c <RobotstateManagement+0x27c>)
 800483a:	f7fd f819 	bl	8001870 <CoefficientAndTimeCalculationScurve>
				}
			}

			if(endEffFlag == 0 && goingToGoalFlag == 1 && doingTaskFlag == 1){
 800483e:	4b3a      	ldr	r3, [pc, #232]	; (8004928 <RobotstateManagement+0x268>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d132      	bne.n	80048ac <RobotstateManagement+0x1ec>
 8004846:	4b3b      	ldr	r3, [pc, #236]	; (8004934 <RobotstateManagement+0x274>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d12e      	bne.n	80048ac <RobotstateManagement+0x1ec>
 800484e:	4b35      	ldr	r3, [pc, #212]	; (8004924 <RobotstateManagement+0x264>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d12a      	bne.n	80048ac <RobotstateManagement+0x1ec>
				if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0){
 8004856:	4b2e      	ldr	r3, [pc, #184]	; (8004910 <RobotstateManagement+0x250>)
 8004858:	ed93 7a03 	vldr	s14, [r3, #12]
 800485c:	4b2c      	ldr	r3, [pc, #176]	; (8004910 <RobotstateManagement+0x250>)
 800485e:	edd3 7a00 	vldr	s15, [r3]
 8004862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004866:	eeb0 0a67 	vmov.f32	s0, s15
 800486a:	f7fc ffdf 	bl	800182c <AbsVal>
 800486e:	eef0 7a40 	vmov.f32	s15, s0
 8004872:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800487a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487e:	d515      	bpl.n	80048ac <RobotstateManagement+0x1ec>
 8004880:	4b23      	ldr	r3, [pc, #140]	; (8004910 <RobotstateManagement+0x250>)
 8004882:	edd3 7a01 	vldr	s15, [r3, #4]
 8004886:	eeb0 0a67 	vmov.f32	s0, s15
 800488a:	f7fc ffcf 	bl	800182c <AbsVal>
 800488e:	eef0 7a40 	vmov.f32	s15, s0
 8004892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800489a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489e:	d505      	bpl.n	80048ac <RobotstateManagement+0x1ec>
					endEffFlag = 1;
 80048a0:	4b21      	ldr	r3, [pc, #132]	; (8004928 <RobotstateManagement+0x268>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	701a      	strb	r2, [r3, #0]
					goingToGoalFlag = 0;
 80048a6:	4b23      	ldr	r3, [pc, #140]	; (8004934 <RobotstateManagement+0x274>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	701a      	strb	r2, [r3, #0]
				}
			}

			if(goingToGoalFlag == 0 && doingTaskFlag == 1 && Robot.RunningFlag == 0 && endEffFlag == 1){
 80048ac:	4b21      	ldr	r3, [pc, #132]	; (8004934 <RobotstateManagement+0x274>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d128      	bne.n	8004906 <RobotstateManagement+0x246>
 80048b4:	4b1b      	ldr	r3, [pc, #108]	; (8004924 <RobotstateManagement+0x264>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d124      	bne.n	8004906 <RobotstateManagement+0x246>
 80048bc:	4b14      	ldr	r3, [pc, #80]	; (8004910 <RobotstateManagement+0x250>)
 80048be:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d11f      	bne.n	8004906 <RobotstateManagement+0x246>
 80048c6:	4b18      	ldr	r3, [pc, #96]	; (8004928 <RobotstateManagement+0x268>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d11b      	bne.n	8004906 <RobotstateManagement+0x246>
				RobotState = EndEff;
 80048ce:	4b0f      	ldr	r3, [pc, #60]	; (800490c <RobotstateManagement+0x24c>)
 80048d0:	2203      	movs	r2, #3
 80048d2:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 80048d4:	4b1d      	ldr	r3, [pc, #116]	; (800494c <RobotstateManagement+0x28c>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 80048da:	4b1d      	ldr	r3, [pc, #116]	; (8004950 <RobotstateManagement+0x290>)
 80048dc:	2201      	movs	r2, #1
 80048de:	701a      	strb	r2, [r3, #0]
				EndEffState = CheckBeforRun;
 80048e0:	4b1c      	ldr	r3, [pc, #112]	; (8004954 <RobotstateManagement+0x294>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80048e6:	e00e      	b.n	8004906 <RobotstateManagement+0x246>
		case EndEff:
			break;
		case Emergency:
			Robot.MotorIsOn = 0;
 80048e8:	4b09      	ldr	r3, [pc, #36]	; (8004910 <RobotstateManagement+0x250>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PIDAController_Init(&PidVelo);
 80048f0:	4819      	ldr	r0, [pc, #100]	; (8004958 <RobotstateManagement+0x298>)
 80048f2:	f7fc fd47 	bl	8001384 <PIDAController_Init>
			PIDAController_Init(&PidPos);
 80048f6:	4819      	ldr	r0, [pc, #100]	; (800495c <RobotstateManagement+0x29c>)
 80048f8:	f7fc fd44 	bl	8001384 <PIDAController_Init>
			// Luv u pls pass
			break;
 80048fc:	e004      	b.n	8004908 <RobotstateManagement+0x248>
			break;
 80048fe:	bf00      	nop
 8004900:	e002      	b.n	8004908 <RobotstateManagement+0x248>
			break;
 8004902:	bf00      	nop
 8004904:	e000      	b.n	8004908 <RobotstateManagement+0x248>
			break;
 8004906:	bf00      	nop
	}
}
 8004908:	bf00      	nop
 800490a:	bd80      	pop	{r7, pc}
 800490c:	20000711 	.word	0x20000711
 8004910:	200006dc 	.word	0x200006dc
 8004914:	424c0000 	.word	0x424c0000
 8004918:	43b40000 	.word	0x43b40000
 800491c:	20000710 	.word	0x20000710
 8004920:	2000076f 	.word	0x2000076f
 8004924:	2000076c 	.word	0x2000076c
 8004928:	2000076a 	.word	0x2000076a
 800492c:	40020400 	.word	0x40020400
 8004930:	20000769 	.word	0x20000769
 8004934:	2000076d 	.word	0x2000076d
 8004938:	20000754 	.word	0x20000754
 800493c:	20000874 	.word	0x20000874
 8004940:	20000768 	.word	0x20000768
 8004944:	20000758 	.word	0x20000758
 8004948:	20000004 	.word	0x20000004
 800494c:	20000b01 	.word	0x20000b01
 8004950:	20000b00 	.word	0x20000b00
 8004954:	20000000 	.word	0x20000000
 8004958:	20000808 	.word	0x20000808
 800495c:	2000083c 	.word	0x2000083c

08004960 <EndEffstateManagement>:

void EndEffstateManagement()
{
 8004960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004964:	b086      	sub	sp, #24
 8004966:	af00      	add	r7, sp, #0
	switch (EndEffState)
 8004968:	4ba6      	ldr	r3, [pc, #664]	; (8004c04 <EndEffstateManagement+0x2a4>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b04      	cmp	r3, #4
 800496e:	f200 8144 	bhi.w	8004bfa <EndEffstateManagement+0x29a>
 8004972:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <EndEffstateManagement+0x18>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	0800498d 	.word	0x0800498d
 800497c:	08004995 	.word	0x08004995
 8004980:	08004a4f 	.word	0x08004a4f
 8004984:	08004acd 	.word	0x08004acd
 8004988:	08004af5 	.word	0x08004af5
	{
		case idle:
			// Do not thing wait for command
			EndEffStatus = AwaitCommand;
 800498c:	4b9e      	ldr	r3, [pc, #632]	; (8004c08 <EndEffstateManagement+0x2a8>)
 800498e:	2203      	movs	r2, #3
 8004990:	701a      	strb	r2, [r3, #0]
//			I2CEndEffectorWriteFlag = 1;
			break;
 8004992:	e132      	b.n	8004bfa <EndEffstateManagement+0x29a>
		case CheckBeforRun:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 8004994:	4b9d      	ldr	r3, [pc, #628]	; (8004c0c <EndEffstateManagement+0x2ac>)
 8004996:	2223      	movs	r2, #35	; 0x23
 8004998:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 800499a:	489c      	ldr	r0, [pc, #624]	; (8004c0c <EndEffstateManagement+0x2ac>)
 800499c:	f000 f956 	bl	8004c4c <I2CWriteFcn>
			check[0]++;
 80049a0:	4b9b      	ldr	r3, [pc, #620]	; (8004c10 <EndEffstateManagement+0x2b0>)
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	1c51      	adds	r1, r2, #1
 80049a8:	6139      	str	r1, [r7, #16]
 80049aa:	f143 0300 	adc.w	r3, r3, #0
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	4b97      	ldr	r3, [pc, #604]	; (8004c10 <EndEffstateManagement+0x2b0>)
 80049b2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80049b6:	e9c3 1200 	strd	r1, r2, [r3]
			if(hi2c1.State == HAL_I2C_STATE_READY)
 80049ba:	4b96      	ldr	r3, [pc, #600]	; (8004c14 <EndEffstateManagement+0x2b4>)
 80049bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	f040 8112 	bne.w	8004bec <EndEffstateManagement+0x28c>
			{
				I2CReadFcn(I2CRxDataBuffer);
 80049c8:	4893      	ldr	r0, [pc, #588]	; (8004c18 <EndEffstateManagement+0x2b8>)
 80049ca:	f000 f965 	bl	8004c98 <I2CReadFcn>
				check[1]++;
 80049ce:	4b90      	ldr	r3, [pc, #576]	; (8004c10 <EndEffstateManagement+0x2b0>)
 80049d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80049d4:	1c51      	adds	r1, r2, #1
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	f143 0300 	adc.w	r3, r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	4b8c      	ldr	r3, [pc, #560]	; (8004c10 <EndEffstateManagement+0x2b0>)
 80049e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049e4:	e9c3 1202 	strd	r1, r2, [r3, #8]
				if(hi2c1.State == HAL_I2C_STATE_READY)
 80049e8:	4b8a      	ldr	r3, [pc, #552]	; (8004c14 <EndEffstateManagement+0x2b4>)
 80049ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	f040 80fb 	bne.w	8004bec <EndEffstateManagement+0x28c>
				{
					if(I2CRxDataBuffer[0] == 0x78)
 80049f6:	4b88      	ldr	r3, [pc, #544]	; (8004c18 <EndEffstateManagement+0x2b8>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b78      	cmp	r3, #120	; 0x78
 80049fc:	d119      	bne.n	8004a32 <EndEffstateManagement+0xd2>
					{
						check[2]++;
 80049fe:	4b84      	ldr	r3, [pc, #528]	; (8004c10 <EndEffstateManagement+0x2b0>)
 8004a00:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004a04:	1c51      	adds	r1, r2, #1
 8004a06:	6039      	str	r1, [r7, #0]
 8004a08:	f143 0300 	adc.w	r3, r3, #0
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	4b80      	ldr	r3, [pc, #512]	; (8004c10 <EndEffstateManagement+0x2b0>)
 8004a10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a14:	e9c3 1204 	strd	r1, r2, [r3, #16]
						EndEffState = OpenLaser;
 8004a18:	4b7a      	ldr	r3, [pc, #488]	; (8004c04 <EndEffstateManagement+0x2a4>)
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	701a      	strb	r2, [r3, #0]
						openLaserWriteFlag = 1;
 8004a1e:	4b7f      	ldr	r3, [pc, #508]	; (8004c1c <EndEffstateManagement+0x2bc>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorWriteFlag = 1;
 8004a24:	4b7e      	ldr	r3, [pc, #504]	; (8004c20 <EndEffstateManagement+0x2c0>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorReadFlag =  0;
 8004a2a:	4b7e      	ldr	r3, [pc, #504]	; (8004c24 <EndEffstateManagement+0x2c4>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
						EndEffState = idle;
					}
				}
			}

		break;
 8004a30:	e0dc      	b.n	8004bec <EndEffstateManagement+0x28c>
						check[3]++;
 8004a32:	4b77      	ldr	r3, [pc, #476]	; (8004c10 <EndEffstateManagement+0x2b0>)
 8004a34:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004a38:	f112 0a01 	adds.w	sl, r2, #1
 8004a3c:	f143 0b00 	adc.w	fp, r3, #0
 8004a40:	4b73      	ldr	r3, [pc, #460]	; (8004c10 <EndEffstateManagement+0x2b0>)
 8004a42:	e9c3 ab06 	strd	sl, fp, [r3, #24]
						EndEffState = idle;
 8004a46:	4b6f      	ldr	r3, [pc, #444]	; (8004c04 <EndEffstateManagement+0x2a4>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	701a      	strb	r2, [r3, #0]
		break;
 8004a4c:	e0ce      	b.n	8004bec <EndEffstateManagement+0x28c>
		case OpenLaser:
			// Open Laser
			if(openLaserWriteFlag == 1){
 8004a4e:	4b73      	ldr	r3, [pc, #460]	; (8004c1c <EndEffstateManagement+0x2bc>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d11d      	bne.n	8004a92 <EndEffstateManagement+0x132>
				check[4]++;
 8004a56:	4b6e      	ldr	r3, [pc, #440]	; (8004c10 <EndEffstateManagement+0x2b0>)
 8004a58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a5c:	1c50      	adds	r0, r2, #1
 8004a5e:	f143 0100 	adc.w	r1, r3, #0
 8004a62:	4b6b      	ldr	r3, [pc, #428]	; (8004c10 <EndEffstateManagement+0x2b0>)
 8004a64:	e9c3 0108 	strd	r0, r1, [r3, #32]
				I2CTxDataBuffer[0] = 0x45;
 8004a68:	4b68      	ldr	r3, [pc, #416]	; (8004c0c <EndEffstateManagement+0x2ac>)
 8004a6a:	2245      	movs	r2, #69	; 0x45
 8004a6c:	701a      	strb	r2, [r3, #0]
				I2CWriteFcn(I2CTxDataBuffer);
 8004a6e:	4867      	ldr	r0, [pc, #412]	; (8004c0c <EndEffstateManagement+0x2ac>)
 8004a70:	f000 f8ec 	bl	8004c4c <I2CWriteFcn>
				openLaserWriteFlag = 0;
 8004a74:	4b69      	ldr	r3, [pc, #420]	; (8004c1c <EndEffstateManagement+0x2bc>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
				endEffLoopTime = Micros();
 8004a7a:	f000 fb2b 	bl	80050d4 <Micros>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4969      	ldr	r1, [pc, #420]	; (8004c28 <EndEffstateManagement+0x2c8>)
 8004a84:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8004a88:	2201      	movs	r2, #1
 8004a8a:	2110      	movs	r1, #16
 8004a8c:	4867      	ldr	r0, [pc, #412]	; (8004c2c <EndEffstateManagement+0x2cc>)
 8004a8e:	f001 fd55 	bl	800653c <HAL_GPIO_WritePin>
			}
			if(hi2c1.State == HAL_I2C_STATE_READY && Micros() - endEffLoopTime > 50000)
 8004a92:	4b60      	ldr	r3, [pc, #384]	; (8004c14 <EndEffstateManagement+0x2b4>)
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	f040 80a8 	bne.w	8004bf0 <EndEffstateManagement+0x290>
 8004aa0:	f000 fb18 	bl	80050d4 <Micros>
 8004aa4:	4b60      	ldr	r3, [pc, #384]	; (8004c28 <EndEffstateManagement+0x2c8>)
 8004aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aaa:	1a84      	subs	r4, r0, r2
 8004aac:	eb61 0503 	sbc.w	r5, r1, r3
 8004ab0:	f24c 3351 	movw	r3, #50001	; 0xc351
 8004ab4:	429c      	cmp	r4, r3
 8004ab6:	f175 0300 	sbcs.w	r3, r5, #0
 8004aba:	f0c0 8099 	bcc.w	8004bf0 <EndEffstateManagement+0x290>
			{
				EndEffState = SetupReadStatus;
 8004abe:	4b51      	ldr	r3, [pc, #324]	; (8004c04 <EndEffstateManagement+0x2a4>)
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 8004ac4:	4b56      	ldr	r3, [pc, #344]	; (8004c20 <EndEffstateManagement+0x2c0>)
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004aca:	e091      	b.n	8004bf0 <EndEffstateManagement+0x290>
		case SetupReadStatus:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 8004acc:	4b4f      	ldr	r3, [pc, #316]	; (8004c0c <EndEffstateManagement+0x2ac>)
 8004ace:	2223      	movs	r2, #35	; 0x23
 8004ad0:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 8004ad2:	484e      	ldr	r0, [pc, #312]	; (8004c0c <EndEffstateManagement+0x2ac>)
 8004ad4:	f000 f8ba 	bl	8004c4c <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8004ad8:	4b4e      	ldr	r3, [pc, #312]	; (8004c14 <EndEffstateManagement+0x2b4>)
 8004ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	f040 8087 	bne.w	8004bf4 <EndEffstateManagement+0x294>
			{
				EndEffState = ReadStatus;
 8004ae6:	4b47      	ldr	r3, [pc, #284]	; (8004c04 <EndEffstateManagement+0x2a4>)
 8004ae8:	2204      	movs	r2, #4
 8004aea:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 8004aec:	4b4d      	ldr	r3, [pc, #308]	; (8004c24 <EndEffstateManagement+0x2c4>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004af2:	e07f      	b.n	8004bf4 <EndEffstateManagement+0x294>
		case ReadStatus:
			I2CReadFcn(I2CRxDataBuffer);
 8004af4:	4848      	ldr	r0, [pc, #288]	; (8004c18 <EndEffstateManagement+0x2b8>)
 8004af6:	f000 f8cf 	bl	8004c98 <I2CReadFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8004afa:	4b46      	ldr	r3, [pc, #280]	; (8004c14 <EndEffstateManagement+0x2b4>)
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d178      	bne.n	8004bf8 <EndEffstateManagement+0x298>
			{
				I2CEndEffectorReadFlag =  1;
 8004b06:	4b47      	ldr	r3, [pc, #284]	; (8004c24 <EndEffstateManagement+0x2c4>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
				if(I2CRxDataBuffer[0] == 0x78)
 8004b0c:	4b42      	ldr	r3, [pc, #264]	; (8004c18 <EndEffstateManagement+0x2b8>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b78      	cmp	r3, #120	; 0x78
 8004b12:	d141      	bne.n	8004b98 <EndEffstateManagement+0x238>
				{
					check[5]++;
 8004b14:	4b3e      	ldr	r3, [pc, #248]	; (8004c10 <EndEffstateManagement+0x2b0>)
 8004b16:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004b1a:	f112 0801 	adds.w	r8, r2, #1
 8004b1e:	f143 0900 	adc.w	r9, r3, #0
 8004b22:	4b3b      	ldr	r3, [pc, #236]	; (8004c10 <EndEffstateManagement+0x2b0>)
 8004b24:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2110      	movs	r1, #16
 8004b2c:	483f      	ldr	r0, [pc, #252]	; (8004c2c <EndEffstateManagement+0x2cc>)
 8004b2e:	f001 fd05 	bl	800653c <HAL_GPIO_WritePin>
					EndEffState = idle;
 8004b32:	4b34      	ldr	r3, [pc, #208]	; (8004c04 <EndEffstateManagement+0x2a4>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]
					EndEffStatus = AwaitCommand;
 8004b38:	4b33      	ldr	r3, [pc, #204]	; (8004c08 <EndEffstateManagement+0x2a8>)
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 8004b3e:	4b3c      	ldr	r3, [pc, #240]	; (8004c30 <EndEffstateManagement+0x2d0>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	701a      	strb	r2, [r3, #0]
					if(RobotState != Emergency){
 8004b44:	4b3b      	ldr	r3, [pc, #236]	; (8004c34 <EndEffstateManagement+0x2d4>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d002      	beq.n	8004b52 <EndEffstateManagement+0x1f2>
						RobotState = NormalOperation;
 8004b4c:	4b39      	ldr	r3, [pc, #228]	; (8004c34 <EndEffstateManagement+0x2d4>)
 8004b4e:	2202      	movs	r2, #2
 8004b50:	701a      	strb	r2, [r3, #0]
					}
					if(doingTaskFlag == 1){
 8004b52:	4b39      	ldr	r3, [pc, #228]	; (8004c38 <EndEffstateManagement+0x2d8>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d14e      	bne.n	8004bf8 <EndEffstateManagement+0x298>
						goalIDX++;
 8004b5a:	4b38      	ldr	r3, [pc, #224]	; (8004c3c <EndEffstateManagement+0x2dc>)
 8004b5c:	f993 3000 	ldrsb.w	r3, [r3]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	3301      	adds	r3, #1
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	b25a      	sxtb	r2, r3
 8004b68:	4b34      	ldr	r3, [pc, #208]	; (8004c3c <EndEffstateManagement+0x2dc>)
 8004b6a:	701a      	strb	r2, [r3, #0]
						if(goalIDX > goalAmount-1){
 8004b6c:	4b34      	ldr	r3, [pc, #208]	; (8004c40 <EndEffstateManagement+0x2e0>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	4b32      	ldr	r3, [pc, #200]	; (8004c3c <EndEffstateManagement+0x2dc>)
 8004b74:	f993 3000 	ldrsb.w	r3, [r3]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	dc09      	bgt.n	8004b90 <EndEffstateManagement+0x230>
							goalIDX = 0;
 8004b7c:	4b2f      	ldr	r3, [pc, #188]	; (8004c3c <EndEffstateManagement+0x2dc>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	701a      	strb	r2, [r3, #0]
							goalFlag = 0;
 8004b82:	4b30      	ldr	r3, [pc, #192]	; (8004c44 <EndEffstateManagement+0x2e4>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	701a      	strb	r2, [r3, #0]
							doingTaskFlag = 0;
 8004b88:	4b2b      	ldr	r3, [pc, #172]	; (8004c38 <EndEffstateManagement+0x2d8>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	701a      	strb	r2, [r3, #0]
					EndEffStatus = Closing;
					EndEffState = SetupReadStatus;
					I2CEndEffectorWriteFlag = 1;
				}
			}
			break;
 8004b8e:	e033      	b.n	8004bf8 <EndEffstateManagement+0x298>
							notContinueFlag = 1;
 8004b90:	4b2d      	ldr	r3, [pc, #180]	; (8004c48 <EndEffstateManagement+0x2e8>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	701a      	strb	r2, [r3, #0]
			break;
 8004b96:	e02f      	b.n	8004bf8 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x12)
 8004b98:	4b1f      	ldr	r3, [pc, #124]	; (8004c18 <EndEffstateManagement+0x2b8>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b12      	cmp	r3, #18
 8004b9e:	d109      	bne.n	8004bb4 <EndEffstateManagement+0x254>
					EndEffStatus = Opening;
 8004ba0:	4b19      	ldr	r3, [pc, #100]	; (8004c08 <EndEffstateManagement+0x2a8>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004ba6:	4b17      	ldr	r3, [pc, #92]	; (8004c04 <EndEffstateManagement+0x2a4>)
 8004ba8:	2203      	movs	r2, #3
 8004baa:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004bac:	4b1c      	ldr	r3, [pc, #112]	; (8004c20 <EndEffstateManagement+0x2c0>)
 8004bae:	2201      	movs	r2, #1
 8004bb0:	701a      	strb	r2, [r3, #0]
			break;
 8004bb2:	e021      	b.n	8004bf8 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x34)
 8004bb4:	4b18      	ldr	r3, [pc, #96]	; (8004c18 <EndEffstateManagement+0x2b8>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b34      	cmp	r3, #52	; 0x34
 8004bba:	d109      	bne.n	8004bd0 <EndEffstateManagement+0x270>
					EndEffStatus = Working;
 8004bbc:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <EndEffstateManagement+0x2a8>)
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004bc2:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <EndEffstateManagement+0x2a4>)
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004bc8:	4b15      	ldr	r3, [pc, #84]	; (8004c20 <EndEffstateManagement+0x2c0>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]
			break;
 8004bce:	e013      	b.n	8004bf8 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x56)
 8004bd0:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <EndEffstateManagement+0x2b8>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b56      	cmp	r3, #86	; 0x56
 8004bd6:	d10f      	bne.n	8004bf8 <EndEffstateManagement+0x298>
					EndEffStatus = Closing;
 8004bd8:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <EndEffstateManagement+0x2a8>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004bde:	4b09      	ldr	r3, [pc, #36]	; (8004c04 <EndEffstateManagement+0x2a4>)
 8004be0:	2203      	movs	r2, #3
 8004be2:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004be4:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <EndEffstateManagement+0x2c0>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	701a      	strb	r2, [r3, #0]
			break;
 8004bea:	e005      	b.n	8004bf8 <EndEffstateManagement+0x298>
		break;
 8004bec:	bf00      	nop
 8004bee:	e004      	b.n	8004bfa <EndEffstateManagement+0x29a>
			break;
 8004bf0:	bf00      	nop
 8004bf2:	e002      	b.n	8004bfa <EndEffstateManagement+0x29a>
			break;
 8004bf4:	bf00      	nop
 8004bf6:	e000      	b.n	8004bfa <EndEffstateManagement+0x29a>
			break;
 8004bf8:	bf00      	nop
	}
}
 8004bfa:	bf00      	nop
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c04:	20000000 	.word	0x20000000
 8004c08:	20000001 	.word	0x20000001
 8004c0c:	20000b08 	.word	0x20000b08
 8004c10:	20000798 	.word	0x20000798
 8004c14:	20000464 	.word	0x20000464
 8004c18:	20000b04 	.word	0x20000b04
 8004c1c:	2000076e 	.word	0x2000076e
 8004c20:	20000b01 	.word	0x20000b01
 8004c24:	20000b00 	.word	0x20000b00
 8004c28:	20000af0 	.word	0x20000af0
 8004c2c:	40020400 	.word	0x40020400
 8004c30:	2000076a 	.word	0x2000076a
 8004c34:	20000711 	.word	0x20000711
 8004c38:	2000076c 	.word	0x2000076c
 8004c3c:	20000768 	.word	0x20000768
 8004c40:	20000767 	.word	0x20000767
 8004c44:	20000769 	.word	0x20000769
 8004c48:	2000076f 	.word	0x2000076f

08004c4c <I2CWriteFcn>:

void I2CWriteFcn(uint8_t *Wdata) {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorWriteFlag == 1  && hi2c1.State == HAL_I2C_STATE_READY) {
 8004c54:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <I2CWriteFcn+0x40>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d112      	bne.n	8004c82 <I2CWriteFcn+0x36>
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <I2CWriteFcn+0x44>)
 8004c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d10c      	bne.n	8004c82 <I2CWriteFcn+0x36>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	781a      	ldrb	r2, [r3, #0]
		static uint8_t data[EndEffRxBuf_SIZE];
		memcpy ((uint8_t *)data, (uint8_t *)Wdata, EndEffRxBuf_SIZE);
 8004c6c:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <I2CWriteFcn+0x48>)
 8004c6e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, Endeff_ADDR, data, I2CTxDataLen);
 8004c70:	2301      	movs	r3, #1
 8004c72:	4a08      	ldr	r2, [pc, #32]	; (8004c94 <I2CWriteFcn+0x48>)
 8004c74:	2146      	movs	r1, #70	; 0x46
 8004c76:	4806      	ldr	r0, [pc, #24]	; (8004c90 <I2CWriteFcn+0x44>)
 8004c78:	f001 fdf0 	bl	800685c <HAL_I2C_Master_Transmit_IT>
		I2CEndEffectorWriteFlag = 0;
 8004c7c:	4b03      	ldr	r3, [pc, #12]	; (8004c8c <I2CWriteFcn+0x40>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	701a      	strb	r2, [r3, #0]
	}
}
 8004c82:	bf00      	nop
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000b01 	.word	0x20000b01
 8004c90:	20000464 	.word	0x20000464
 8004c94:	20000b1c 	.word	0x20000b1c

08004c98 <I2CReadFcn>:
void I2CReadFcn(uint8_t *Rdata) {
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY) {
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <I2CReadFcn+0x38>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d10e      	bne.n	8004cc6 <I2CReadFcn+0x2e>
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <I2CReadFcn+0x3c>)
 8004caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d108      	bne.n	8004cc6 <I2CReadFcn+0x2e>
		HAL_I2C_Master_Receive_IT(&hi2c1, Endeff_ADDR, Rdata, I2CRxDataLen);
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	2146      	movs	r1, #70	; 0x46
 8004cba:	4806      	ldr	r0, [pc, #24]	; (8004cd4 <I2CReadFcn+0x3c>)
 8004cbc:	f001 fe74 	bl	80069a8 <HAL_I2C_Master_Receive_IT>
		I2CEndEffectorReadFlag =  0;
 8004cc0:	4b03      	ldr	r3, [pc, #12]	; (8004cd0 <I2CReadFcn+0x38>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	701a      	strb	r2, [r3, #0]
	}
}
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000b00 	.word	0x20000b00
 8004cd4:	20000464 	.word	0x20000464

08004cd8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004cd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8004ce4:	88fb      	ldrh	r3, [r7, #6]
 8004ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cea:	d103      	bne.n	8004cf4 <HAL_GPIO_EXTI_Callback+0x1c>
	{
//		I2CEndEffectorWriteFlag = 1;
//		I2CEndEffectorReadFlag =  1;
//		EndEffState = CheckBeforRun;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8004cec:	2108      	movs	r1, #8
 8004cee:	483e      	ldr	r0, [pc, #248]	; (8004de8 <HAL_GPIO_EXTI_Callback+0x110>)
 8004cf0:	f001 fc3d 	bl	800656e <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_10)
 8004cf4:	88fb      	ldrh	r3, [r7, #6]
 8004cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cfa:	d13e      	bne.n	8004d7a <HAL_GPIO_EXTI_Callback+0xa2>
	{
		// Proxi Sensor
		if(Robot.flagSethome == 1)
 8004cfc:	4b3b      	ldr	r3, [pc, #236]	; (8004dec <HAL_GPIO_EXTI_Callback+0x114>)
 8004cfe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d139      	bne.n	8004d7a <HAL_GPIO_EXTI_Callback+0xa2>
		{
			homePoint[homeFF] = PositionDeg[0];
 8004d06:	4b3a      	ldr	r3, [pc, #232]	; (8004df0 <HAL_GPIO_EXTI_Callback+0x118>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	4b39      	ldr	r3, [pc, #228]	; (8004df4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	4939      	ldr	r1, [pc, #228]	; (8004df8 <HAL_GPIO_EXTI_Callback+0x120>)
 8004d12:	0083      	lsls	r3, r0, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	601a      	str	r2, [r3, #0]
			homeFF++;
 8004d18:	4b35      	ldr	r3, [pc, #212]	; (8004df0 <HAL_GPIO_EXTI_Callback+0x118>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	4b33      	ldr	r3, [pc, #204]	; (8004df0 <HAL_GPIO_EXTI_Callback+0x118>)
 8004d22:	701a      	strb	r2, [r3, #0]
			if(homeFF == 2)
 8004d24:	4b32      	ldr	r3, [pc, #200]	; (8004df0 <HAL_GPIO_EXTI_Callback+0x118>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d126      	bne.n	8004d7a <HAL_GPIO_EXTI_Callback+0xa2>
			{
				if(homePoint[1]-homePoint[0] > 180.0)
 8004d2c:	4b32      	ldr	r3, [pc, #200]	; (8004df8 <HAL_GPIO_EXTI_Callback+0x120>)
 8004d2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d32:	4b31      	ldr	r3, [pc, #196]	; (8004df8 <HAL_GPIO_EXTI_Callback+0x120>)
 8004d34:	edd3 7a00 	vldr	s15, [r3]
 8004d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d3c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004dfc <HAL_GPIO_EXTI_Callback+0x124>
 8004d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d48:	dd04      	ble.n	8004d54 <HAL_GPIO_EXTI_Callback+0x7c>
				{
					Robot.HomePositon =  0;
 8004d4a:	4b28      	ldr	r3, [pc, #160]	; (8004dec <HAL_GPIO_EXTI_Callback+0x114>)
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	615a      	str	r2, [r3, #20]
 8004d52:	e00e      	b.n	8004d72 <HAL_GPIO_EXTI_Callback+0x9a>
				}
				else
				{
					Robot.HomePositon = (homePoint[0]+homePoint[1])/2.0;
 8004d54:	4b28      	ldr	r3, [pc, #160]	; (8004df8 <HAL_GPIO_EXTI_Callback+0x120>)
 8004d56:	ed93 7a00 	vldr	s14, [r3]
 8004d5a:	4b27      	ldr	r3, [pc, #156]	; (8004df8 <HAL_GPIO_EXTI_Callback+0x120>)
 8004d5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d64:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004d68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d6c:	4b1f      	ldr	r3, [pc, #124]	; (8004dec <HAL_GPIO_EXTI_Callback+0x114>)
 8004d6e:	edc3 7a05 	vstr	s15, [r3, #20]
				}
				Robot.flagSethome = 2;
 8004d72:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <HAL_GPIO_EXTI_Callback+0x114>)
 8004d74:	2202      	movs	r2, #2
 8004d76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			}
		}
	}
	if(GPIO_Pin == GPIO_PIN_5)
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d12e      	bne.n	8004dde <HAL_GPIO_EXTI_Callback+0x106>
	{
		if(EmertimeoutFlag == 0)
 8004d80:	4b1f      	ldr	r3, [pc, #124]	; (8004e00 <HAL_GPIO_EXTI_Callback+0x128>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <HAL_GPIO_EXTI_Callback+0xb6>
		{
			EmertimeoutFlag = 1;
 8004d88:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <HAL_GPIO_EXTI_Callback+0x128>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	701a      	strb	r2, [r3, #0]
		}

		if(Micros() - EmergencycalloutTime > 100000 && EmertimeoutFlag == 1)
 8004d8e:	f000 f9a1 	bl	80050d4 <Micros>
 8004d92:	4b1c      	ldr	r3, [pc, #112]	; (8004e04 <HAL_GPIO_EXTI_Callback+0x12c>)
 8004d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d98:	1a84      	subs	r4, r0, r2
 8004d9a:	eb61 0503 	sbc.w	r5, r1, r3
 8004d9e:	4b1a      	ldr	r3, [pc, #104]	; (8004e08 <HAL_GPIO_EXTI_Callback+0x130>)
 8004da0:	429c      	cmp	r4, r3
 8004da2:	f175 0300 	sbcs.w	r3, r5, #0
 8004da6:	d31a      	bcc.n	8004dde <HAL_GPIO_EXTI_Callback+0x106>
 8004da8:	4b15      	ldr	r3, [pc, #84]	; (8004e00 <HAL_GPIO_EXTI_Callback+0x128>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d116      	bne.n	8004dde <HAL_GPIO_EXTI_Callback+0x106>
		{
			check[6]++;
 8004db0:	4b16      	ldr	r3, [pc, #88]	; (8004e0c <HAL_GPIO_EXTI_Callback+0x134>)
 8004db2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004db6:	f112 0801 	adds.w	r8, r2, #1
 8004dba:	f143 0900 	adc.w	r9, r3, #0
 8004dbe:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <HAL_GPIO_EXTI_Callback+0x134>)
 8004dc0:	e9c3 890c 	strd	r8, r9, [r3, #48]	; 0x30
			EmergencycalloutTime = Micros();
 8004dc4:	f000 f986 	bl	80050d4 <Micros>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	490d      	ldr	r1, [pc, #52]	; (8004e04 <HAL_GPIO_EXTI_Callback+0x12c>)
 8004dce:	e9c1 2300 	strd	r2, r3, [r1]
			EmertimeoutFlag = 0;
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <HAL_GPIO_EXTI_Callback+0x128>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	701a      	strb	r2, [r3, #0]
			//Docode
			HAL_TIM_Base_Start_IT(&htim5);
 8004dd8:	480d      	ldr	r0, [pc, #52]	; (8004e10 <HAL_GPIO_EXTI_Callback+0x138>)
 8004dda:	f004 f857 	bl	8008e8c <HAL_TIM_Base_Start_IT>
		}
	}
}
 8004dde:	bf00      	nop
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004de8:	40020400 	.word	0x40020400
 8004dec:	200006dc 	.word	0x200006dc
 8004df0:	20000704 	.word	0x20000704
 8004df4:	200007f8 	.word	0x200007f8
 8004df8:	20000708 	.word	0x20000708
 8004dfc:	43340000 	.word	0x43340000
 8004e00:	20000ae8 	.word	0x20000ae8
 8004e04:	20000ae0 	.word	0x20000ae0
 8004e08:	000186a1 	.word	0x000186a1
 8004e0c:	20000798 	.word	0x20000798
 8004e10:	20000548 	.word	0x20000548

08004e14 <RobotRunToPositon>:
void RobotRunToPositon(float Destination , float VeloInput)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8004e1e:	edc7 0a00 	vstr	s1, [r7]
	Robot.GoalPositon = Destination;
 8004e22:	4a16      	ldr	r2, [pc, #88]	; (8004e7c <RobotRunToPositon+0x68>)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	60d3      	str	r3, [r2, #12]
	Robot.QVMax = VeloInput;
 8004e28:	4a14      	ldr	r2, [pc, #80]	; (8004e7c <RobotRunToPositon+0x68>)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	6213      	str	r3, [r2, #32]
	CoefficientAndTimeCalculationScurve(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 8004e2e:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <RobotRunToPositon+0x68>)
 8004e30:	edd3 7a00 	vldr	s15, [r3]
 8004e34:	4b11      	ldr	r3, [pc, #68]	; (8004e7c <RobotRunToPositon+0x68>)
 8004e36:	ed93 7a03 	vldr	s14, [r3, #12]
 8004e3a:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <RobotRunToPositon+0x68>)
 8004e3c:	edd3 6a08 	vldr	s13, [r3, #32]
 8004e40:	eeb0 1a66 	vmov.f32	s2, s13
 8004e44:	eef0 0a47 	vmov.f32	s1, s14
 8004e48:	eeb0 0a67 	vmov.f32	s0, s15
 8004e4c:	480c      	ldr	r0, [pc, #48]	; (8004e80 <RobotRunToPositon+0x6c>)
 8004e4e:	f7fc fd0f 	bl	8001870 <CoefficientAndTimeCalculationScurve>
	// Start Trajectory Evaluator
	Robot.MotorIsOn = 1;
 8004e52:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <RobotRunToPositon+0x68>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Robot.flagStartTime = 1;
 8004e5a:	4b08      	ldr	r3, [pc, #32]	; (8004e7c <RobotRunToPositon+0x68>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Robot.RunningFlag = 1;
 8004e62:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <RobotRunToPositon+0x68>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	2108      	movs	r1, #8
 8004e6e:	4805      	ldr	r0, [pc, #20]	; (8004e84 <RobotRunToPositon+0x70>)
 8004e70:	f001 fb64 	bl	800653c <HAL_GPIO_WritePin>
}
 8004e74:	bf00      	nop
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	200006dc 	.word	0x200006dc
 8004e80:	20000874 	.word	0x20000874
 8004e84:	40020400 	.word	0x40020400

08004e88 <RobotResetAll>:

void RobotResetAll()
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
	// Reset Encoder
	TIM_ResetCounter(TIM2);
 8004e8c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004e90:	f000 f866 	bl	8004f60 <TIM_ResetCounter>
	EncoderRawData[0] = 0;
 8004e94:	4b23      	ldr	r3, [pc, #140]	; (8004f24 <RobotResetAll+0x9c>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
	EncoderRawData[1] = 0;
 8004e9a:	4b22      	ldr	r3, [pc, #136]	; (8004f24 <RobotResetAll+0x9c>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	605a      	str	r2, [r3, #4]
	WrappingStep = 0;
 8004ea0:	4b21      	ldr	r3, [pc, #132]	; (8004f28 <RobotResetAll+0xa0>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
	// Reset Trajectory
	CoefficientAndTimeCalculationScurve(&traject,0.0,0.0,60);
 8004ea6:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8004f2c <RobotResetAll+0xa4>
 8004eaa:	eddf 0a21 	vldr	s1, [pc, #132]	; 8004f30 <RobotResetAll+0xa8>
 8004eae:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8004f30 <RobotResetAll+0xa8>
 8004eb2:	4820      	ldr	r0, [pc, #128]	; (8004f34 <RobotResetAll+0xac>)
 8004eb4:	f7fc fcdc 	bl	8001870 <CoefficientAndTimeCalculationScurve>
	Robot.flagStartTime = 1;
 8004eb8:	4b1f      	ldr	r3, [pc, #124]	; (8004f38 <RobotResetAll+0xb0>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	StartTime = 0;
 8004ec0:	491e      	ldr	r1, [pc, #120]	; (8004f3c <RobotResetAll+0xb4>)
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	e9c1 2300 	strd	r2, r3, [r1]
	CurrentTime = 0;
 8004ece:	491c      	ldr	r1, [pc, #112]	; (8004f40 <RobotResetAll+0xb8>)
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	e9c1 2300 	strd	r2, r3, [r1]
	// Reset Position
	PositionDeg[0] = 0;
 8004edc:	4b19      	ldr	r3, [pc, #100]	; (8004f44 <RobotResetAll+0xbc>)
 8004ede:	f04f 0200 	mov.w	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
	PositionDeg[1] = 0;
 8004ee4:	4b17      	ldr	r3, [pc, #92]	; (8004f44 <RobotResetAll+0xbc>)
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	605a      	str	r2, [r3, #4]
	KalmanMatrixReset(&KalmanVar, Pvar);
 8004eec:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8004f48 <RobotResetAll+0xc0>
 8004ef0:	4816      	ldr	r0, [pc, #88]	; (8004f4c <RobotResetAll+0xc4>)
 8004ef2:	f7fc f899 	bl	8001028 <KalmanMatrixReset>
	Robotinit(&Robot);
 8004ef6:	4810      	ldr	r0, [pc, #64]	; (8004f38 <RobotResetAll+0xb0>)
 8004ef8:	f7fc fc32 	bl	8001760 <Robotinit>
	// Reset Pid
	PIDAController_Init(&PidVelo);
 8004efc:	4814      	ldr	r0, [pc, #80]	; (8004f50 <RobotResetAll+0xc8>)
 8004efe:	f7fc fa41 	bl	8001384 <PIDAController_Init>
	PIDAController_Init(&PidPos);
 8004f02:	4814      	ldr	r0, [pc, #80]	; (8004f54 <RobotResetAll+0xcc>)
 8004f04:	f7fc fa3e 	bl	8001384 <PIDAController_Init>
	// Reset Home Buffer
	homePoint[0] = 0;
 8004f08:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <RobotResetAll+0xd0>)
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
	homePoint[1] = 0;
 8004f10:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <RobotResetAll+0xd0>)
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	605a      	str	r2, [r3, #4]
	homeFF = 0;
 8004f18:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <RobotResetAll+0xd4>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
}
 8004f1e:	bf00      	nop
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	200007e8 	.word	0x200007e8
 8004f28:	200007f0 	.word	0x200007f0
 8004f2c:	42700000 	.word	0x42700000
 8004f30:	00000000 	.word	0x00000000
 8004f34:	20000874 	.word	0x20000874
 8004f38:	200006dc 	.word	0x200006dc
 8004f3c:	20000ab0 	.word	0x20000ab0
 8004f40:	20000ab8 	.word	0x20000ab8
 8004f44:	200007f8 	.word	0x200007f8
 8004f48:	447a0000 	.word	0x447a0000
 8004f4c:	20000034 	.word	0x20000034
 8004f50:	20000808 	.word	0x20000808
 8004f54:	2000083c 	.word	0x2000083c
 8004f58:	20000708 	.word	0x20000708
 8004f5c:	20000704 	.word	0x20000704

08004f60 <TIM_ResetCounter>:

void TIM_ResetCounter(TIM_TypeDef* TIMx)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Reset the Counter Register value */
  TIMx->CNT = 0;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a47      	ldr	r2, [pc, #284]	; (80050a8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d10b      	bne.n	8004fa6 <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micro += 65535;
 8004f8e:	4b47      	ldr	r3, [pc, #284]	; (80050ac <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f98:	eb12 0a01 	adds.w	sl, r2, r1
 8004f9c:	f143 0b00 	adc.w	fp, r3, #0
 8004fa0:	4b42      	ldr	r3, [pc, #264]	; (80050ac <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004fa2:	e9c3 ab00 	strd	sl, fp, [r3]
	}
	if (htim == &htim5){
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a41      	ldr	r2, [pc, #260]	; (80050b0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d177      	bne.n	800509e <HAL_TIM_PeriodElapsedCallback+0x122>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET)
 8004fae:	2120      	movs	r1, #32
 8004fb0:	4840      	ldr	r0, [pc, #256]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004fb2:	f001 faab 	bl	800650c <HAL_GPIO_ReadPin>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d15b      	bne.n	8005074 <HAL_TIM_PeriodElapsedCallback+0xf8>
		{
			check[7]++;
 8004fbc:	4b3e      	ldr	r3, [pc, #248]	; (80050b8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004fbe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004fc2:	f112 0801 	adds.w	r8, r2, #1
 8004fc6:	f143 0900 	adc.w	r9, r3, #0
 8004fca:	4b3b      	ldr	r3, [pc, #236]	; (80050b8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004fcc:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
			if(EndEffState != idle)
 8004fd0:	4b3a      	ldr	r3, [pc, #232]	; (80050bc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_TIM_PeriodElapsedCallback+0x64>
			{
				RobotState = EndEff;
 8004fd8:	4b39      	ldr	r3, [pc, #228]	; (80050c0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004fda:	2203      	movs	r2, #3
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	e002      	b.n	8004fe6 <HAL_TIM_PeriodElapsedCallback+0x6a>
			}
			else
			{
				RobotState = NormalOperation;
 8004fe0:	4b37      	ldr	r3, [pc, #220]	; (80050c0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fec:	4831      	ldr	r0, [pc, #196]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004fee:	f001 faa5 	bl	800653c <HAL_GPIO_WritePin>
			if((doingTaskFlag == 1 && goingToGoalFlag == 1) || homingFlag == 1)
 8004ff2:	4b34      	ldr	r3, [pc, #208]	; (80050c4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d103      	bne.n	8005002 <HAL_TIM_PeriodElapsedCallback+0x86>
 8004ffa:	4b33      	ldr	r3, [pc, #204]	; (80050c8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d003      	beq.n	800500a <HAL_TIM_PeriodElapsedCallback+0x8e>
 8005002:	4b32      	ldr	r3, [pc, #200]	; (80050cc <HAL_TIM_PeriodElapsedCallback+0x150>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d10b      	bne.n	8005022 <HAL_TIM_PeriodElapsedCallback+0xa6>
			{
				RobotRunToPositon(Robot.GoalPositon,Robot.QVMax);
 800500a:	4b31      	ldr	r3, [pc, #196]	; (80050d0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800500c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005010:	4b2f      	ldr	r3, [pc, #188]	; (80050d0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005012:	ed93 7a08 	vldr	s14, [r3, #32]
 8005016:	eef0 0a47 	vmov.f32	s1, s14
 800501a:	eeb0 0a67 	vmov.f32	s0, s15
 800501e:	f7ff fef9 	bl	8004e14 <RobotRunToPositon>
			}
			if(Robot.flagSethome == 1){
 8005022:	4b2b      	ldr	r3, [pc, #172]	; (80050d0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005024:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005028:	2b01      	cmp	r3, #1
 800502a:	d105      	bne.n	8005038 <HAL_TIM_PeriodElapsedCallback+0xbc>
				RobotResetAll();
 800502c:	f7ff ff2c 	bl	8004e88 <RobotResetAll>
				RobotState = init;
 8005030:	4b23      	ldr	r3, [pc, #140]	; (80050c0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005032:	2200      	movs	r2, #0
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	e02f      	b.n	8005098 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
			else if(Robot.flagSethome == 2 || Robot.flagSethome == 3)
 8005038:	4b25      	ldr	r3, [pc, #148]	; (80050d0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800503a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800503e:	2b02      	cmp	r3, #2
 8005040:	d004      	beq.n	800504c <HAL_TIM_PeriodElapsedCallback+0xd0>
 8005042:	4b23      	ldr	r3, [pc, #140]	; (80050d0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005044:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005048:	2b03      	cmp	r3, #3
 800504a:	d125      	bne.n	8005098 <HAL_TIM_PeriodElapsedCallback+0x11c>
			{
				Robot.flagSethome = 3;
 800504c:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800504e:	2203      	movs	r2, #3
 8005050:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				RobotRunToPositon(Robot.HomePositon,Robot.QVMax);
 8005054:	4b1e      	ldr	r3, [pc, #120]	; (80050d0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005056:	edd3 7a05 	vldr	s15, [r3, #20]
 800505a:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800505c:	ed93 7a08 	vldr	s14, [r3, #32]
 8005060:	eef0 0a47 	vmov.f32	s1, s14
 8005064:	eeb0 0a67 	vmov.f32	s0, s15
 8005068:	f7ff fed4 	bl	8004e14 <RobotRunToPositon>
				RobotState = FindHome;
 800506c:	4b14      	ldr	r3, [pc, #80]	; (80050c0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800506e:	2201      	movs	r2, #1
 8005070:	701a      	strb	r2, [r3, #0]
 8005072:	e011      	b.n	8005098 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
		}
		else
		{
			check[8]++;
 8005074:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005076:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800507a:	1c54      	adds	r4, r2, #1
 800507c:	f143 0500 	adc.w	r5, r3, #0
 8005080:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005082:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
			RobotState = Emergency;
 8005086:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005088:	2204      	movs	r2, #4
 800508a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800508c:	2201      	movs	r2, #1
 800508e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005092:	4808      	ldr	r0, [pc, #32]	; (80050b4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005094:	f001 fa52 	bl	800653c <HAL_GPIO_WritePin>
		}
		HAL_TIM_Base_Stop_IT(&htim5);
 8005098:	4805      	ldr	r0, [pc, #20]	; (80050b0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800509a:	f003 ff59 	bl	8008f50 <HAL_TIM_Base_Stop_IT>
	}
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050a8:	20000590 	.word	0x20000590
 80050ac:	20000778 	.word	0x20000778
 80050b0:	20000548 	.word	0x20000548
 80050b4:	40020400 	.word	0x40020400
 80050b8:	20000798 	.word	0x20000798
 80050bc:	20000000 	.word	0x20000000
 80050c0:	20000711 	.word	0x20000711
 80050c4:	2000076c 	.word	0x2000076c
 80050c8:	2000076d 	.word	0x2000076d
 80050cc:	2000076b 	.word	0x2000076b
 80050d0:	200006dc 	.word	0x200006dc

080050d4 <Micros>:

uint64_t Micros(){
 80050d4:	b4b0      	push	{r4, r5, r7}
 80050d6:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 80050d8:	4b08      	ldr	r3, [pc, #32]	; (80050fc <Micros+0x28>)
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	2200      	movs	r2, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	4611      	mov	r1, r2
 80050e2:	4b07      	ldr	r3, [pc, #28]	; (8005100 <Micros+0x2c>)
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	1884      	adds	r4, r0, r2
 80050ea:	eb41 0503 	adc.w	r5, r1, r3
 80050ee:	4622      	mov	r2, r4
 80050f0:	462b      	mov	r3, r5
}
 80050f2:	4610      	mov	r0, r2
 80050f4:	4619      	mov	r1, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bcb0      	pop	{r4, r5, r7}
 80050fa:	4770      	bx	lr
 80050fc:	40014800 	.word	0x40014800
 8005100:	20000778 	.word	0x20000778

08005104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005108:	b672      	cpsid	i
}
 800510a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800510c:	e7fe      	b.n	800510c <Error_Handler+0x8>
	...

08005110 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005116:	2300      	movs	r3, #0
 8005118:	607b      	str	r3, [r7, #4]
 800511a:	4b10      	ldr	r3, [pc, #64]	; (800515c <HAL_MspInit+0x4c>)
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	4a0f      	ldr	r2, [pc, #60]	; (800515c <HAL_MspInit+0x4c>)
 8005120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005124:	6453      	str	r3, [r2, #68]	; 0x44
 8005126:	4b0d      	ldr	r3, [pc, #52]	; (800515c <HAL_MspInit+0x4c>)
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800512e:	607b      	str	r3, [r7, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	4b09      	ldr	r3, [pc, #36]	; (800515c <HAL_MspInit+0x4c>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	4a08      	ldr	r2, [pc, #32]	; (800515c <HAL_MspInit+0x4c>)
 800513c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005140:	6413      	str	r3, [r2, #64]	; 0x40
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <HAL_MspInit+0x4c>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800514e:	2007      	movs	r0, #7
 8005150:	f000 fc06 	bl	8005960 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40023800 	.word	0x40023800

08005160 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08a      	sub	sp, #40	; 0x28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005168:	f107 0314 	add.w	r3, r7, #20
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	605a      	str	r2, [r3, #4]
 8005172:	609a      	str	r2, [r3, #8]
 8005174:	60da      	str	r2, [r3, #12]
 8005176:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a21      	ldr	r2, [pc, #132]	; (8005204 <HAL_I2C_MspInit+0xa4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d13c      	bne.n	80051fc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005182:	2300      	movs	r3, #0
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	4b20      	ldr	r3, [pc, #128]	; (8005208 <HAL_I2C_MspInit+0xa8>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	4a1f      	ldr	r2, [pc, #124]	; (8005208 <HAL_I2C_MspInit+0xa8>)
 800518c:	f043 0302 	orr.w	r3, r3, #2
 8005190:	6313      	str	r3, [r2, #48]	; 0x30
 8005192:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <HAL_I2C_MspInit+0xa8>)
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800519e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80051a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051a4:	2312      	movs	r3, #18
 80051a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ac:	2303      	movs	r3, #3
 80051ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80051b0:	2304      	movs	r3, #4
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051b4:	f107 0314 	add.w	r3, r7, #20
 80051b8:	4619      	mov	r1, r3
 80051ba:	4814      	ldr	r0, [pc, #80]	; (800520c <HAL_I2C_MspInit+0xac>)
 80051bc:	f001 f822 	bl	8006204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80051c0:	2300      	movs	r3, #0
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	4b10      	ldr	r3, [pc, #64]	; (8005208 <HAL_I2C_MspInit+0xa8>)
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	4a0f      	ldr	r2, [pc, #60]	; (8005208 <HAL_I2C_MspInit+0xa8>)
 80051ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051ce:	6413      	str	r3, [r2, #64]	; 0x40
 80051d0:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <HAL_I2C_MspInit+0xa8>)
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80051dc:	2200      	movs	r2, #0
 80051de:	2100      	movs	r1, #0
 80051e0:	201f      	movs	r0, #31
 80051e2:	f000 fbc8 	bl	8005976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80051e6:	201f      	movs	r0, #31
 80051e8:	f000 fbe1 	bl	80059ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80051ec:	2200      	movs	r2, #0
 80051ee:	2100      	movs	r1, #0
 80051f0:	2020      	movs	r0, #32
 80051f2:	f000 fbc0 	bl	8005976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80051f6:	2020      	movs	r0, #32
 80051f8:	f000 fbd9 	bl	80059ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80051fc:	bf00      	nop
 80051fe:	3728      	adds	r7, #40	; 0x28
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40005400 	.word	0x40005400
 8005208:	40023800 	.word	0x40023800
 800520c:	40020400 	.word	0x40020400

08005210 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a0e      	ldr	r2, [pc, #56]	; (8005258 <HAL_TIM_PWM_MspInit+0x48>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d115      	bne.n	800524e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	4b0d      	ldr	r3, [pc, #52]	; (800525c <HAL_TIM_PWM_MspInit+0x4c>)
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	4a0c      	ldr	r2, [pc, #48]	; (800525c <HAL_TIM_PWM_MspInit+0x4c>)
 800522c:	f043 0301 	orr.w	r3, r3, #1
 8005230:	6453      	str	r3, [r2, #68]	; 0x44
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <HAL_TIM_PWM_MspInit+0x4c>)
 8005234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800523e:	2200      	movs	r2, #0
 8005240:	2100      	movs	r1, #0
 8005242:	201a      	movs	r0, #26
 8005244:	f000 fb97 	bl	8005976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005248:	201a      	movs	r0, #26
 800524a:	f000 fbb0 	bl	80059ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800524e:	bf00      	nop
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40010000 	.word	0x40010000
 800525c:	40023800 	.word	0x40023800

08005260 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08a      	sub	sp, #40	; 0x28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005268:	f107 0314 	add.w	r3, r7, #20
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	605a      	str	r2, [r3, #4]
 8005272:	609a      	str	r2, [r3, #8]
 8005274:	60da      	str	r2, [r3, #12]
 8005276:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005280:	d12b      	bne.n	80052da <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005282:	2300      	movs	r3, #0
 8005284:	613b      	str	r3, [r7, #16]
 8005286:	4b17      	ldr	r3, [pc, #92]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x84>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	4a16      	ldr	r2, [pc, #88]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x84>)
 800528c:	f043 0301 	orr.w	r3, r3, #1
 8005290:	6413      	str	r3, [r2, #64]	; 0x40
 8005292:	4b14      	ldr	r3, [pc, #80]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x84>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x84>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	4a0f      	ldr	r2, [pc, #60]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x84>)
 80052a8:	f043 0301 	orr.w	r3, r3, #1
 80052ac:	6313      	str	r3, [r2, #48]	; 0x30
 80052ae:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <HAL_TIM_Encoder_MspInit+0x84>)
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80052ba:	2303      	movs	r3, #3
 80052bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052be:	2302      	movs	r3, #2
 80052c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c6:	2300      	movs	r3, #0
 80052c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80052ca:	2301      	movs	r3, #1
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ce:	f107 0314 	add.w	r3, r7, #20
 80052d2:	4619      	mov	r1, r3
 80052d4:	4804      	ldr	r0, [pc, #16]	; (80052e8 <HAL_TIM_Encoder_MspInit+0x88>)
 80052d6:	f000 ff95 	bl	8006204 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80052da:	bf00      	nop
 80052dc:	3728      	adds	r7, #40	; 0x28
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40023800 	.word	0x40023800
 80052e8:	40020000 	.word	0x40020000

080052ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a1c      	ldr	r2, [pc, #112]	; (800536c <HAL_TIM_Base_MspInit+0x80>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d116      	bne.n	800532c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	4b1b      	ldr	r3, [pc, #108]	; (8005370 <HAL_TIM_Base_MspInit+0x84>)
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	4a1a      	ldr	r2, [pc, #104]	; (8005370 <HAL_TIM_Base_MspInit+0x84>)
 8005308:	f043 0308 	orr.w	r3, r3, #8
 800530c:	6413      	str	r3, [r2, #64]	; 0x40
 800530e:	4b18      	ldr	r3, [pc, #96]	; (8005370 <HAL_TIM_Base_MspInit+0x84>)
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800531a:	2200      	movs	r2, #0
 800531c:	2100      	movs	r1, #0
 800531e:	2032      	movs	r0, #50	; 0x32
 8005320:	f000 fb29 	bl	8005976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005324:	2032      	movs	r0, #50	; 0x32
 8005326:	f000 fb42 	bl	80059ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800532a:	e01a      	b.n	8005362 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a10      	ldr	r2, [pc, #64]	; (8005374 <HAL_TIM_Base_MspInit+0x88>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d115      	bne.n	8005362 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005336:	2300      	movs	r3, #0
 8005338:	60bb      	str	r3, [r7, #8]
 800533a:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <HAL_TIM_Base_MspInit+0x84>)
 800533c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533e:	4a0c      	ldr	r2, [pc, #48]	; (8005370 <HAL_TIM_Base_MspInit+0x84>)
 8005340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005344:	6453      	str	r3, [r2, #68]	; 0x44
 8005346:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <HAL_TIM_Base_MspInit+0x84>)
 8005348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800534e:	60bb      	str	r3, [r7, #8]
 8005350:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005352:	2200      	movs	r2, #0
 8005354:	2100      	movs	r1, #0
 8005356:	201a      	movs	r0, #26
 8005358:	f000 fb0d 	bl	8005976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800535c:	201a      	movs	r0, #26
 800535e:	f000 fb26 	bl	80059ae <HAL_NVIC_EnableIRQ>
}
 8005362:	bf00      	nop
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40000c00 	.word	0x40000c00
 8005370:	40023800 	.word	0x40023800
 8005374:	40014800 	.word	0x40014800

08005378 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005380:	f107 030c 	add.w	r3, r7, #12
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	609a      	str	r2, [r3, #8]
 800538c:	60da      	str	r2, [r3, #12]
 800538e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a12      	ldr	r2, [pc, #72]	; (80053e0 <HAL_TIM_MspPostInit+0x68>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d11e      	bne.n	80053d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800539a:	2300      	movs	r3, #0
 800539c:	60bb      	str	r3, [r7, #8]
 800539e:	4b11      	ldr	r3, [pc, #68]	; (80053e4 <HAL_TIM_MspPostInit+0x6c>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	4a10      	ldr	r2, [pc, #64]	; (80053e4 <HAL_TIM_MspPostInit+0x6c>)
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	6313      	str	r3, [r2, #48]	; 0x30
 80053aa:	4b0e      	ldr	r3, [pc, #56]	; (80053e4 <HAL_TIM_MspPostInit+0x6c>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	60bb      	str	r3, [r7, #8]
 80053b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80053b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053bc:	2302      	movs	r3, #2
 80053be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c0:	2300      	movs	r3, #0
 80053c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80053c8:	2301      	movs	r3, #1
 80053ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053cc:	f107 030c 	add.w	r3, r7, #12
 80053d0:	4619      	mov	r1, r3
 80053d2:	4805      	ldr	r0, [pc, #20]	; (80053e8 <HAL_TIM_MspPostInit+0x70>)
 80053d4:	f000 ff16 	bl	8006204 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80053d8:	bf00      	nop
 80053da:	3720      	adds	r7, #32
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40010000 	.word	0x40010000
 80053e4:	40023800 	.word	0x40023800
 80053e8:	40020000 	.word	0x40020000

080053ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	; 0x28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f4:	f107 0314 	add.w	r3, r7, #20
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	605a      	str	r2, [r3, #4]
 80053fe:	609a      	str	r2, [r3, #8]
 8005400:	60da      	str	r2, [r3, #12]
 8005402:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a4b      	ldr	r2, [pc, #300]	; (8005538 <HAL_UART_MspInit+0x14c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	f040 8090 	bne.w	8005530 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005410:	2300      	movs	r3, #0
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	4b49      	ldr	r3, [pc, #292]	; (800553c <HAL_UART_MspInit+0x150>)
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	4a48      	ldr	r2, [pc, #288]	; (800553c <HAL_UART_MspInit+0x150>)
 800541a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800541e:	6413      	str	r3, [r2, #64]	; 0x40
 8005420:	4b46      	ldr	r3, [pc, #280]	; (800553c <HAL_UART_MspInit+0x150>)
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	4b42      	ldr	r3, [pc, #264]	; (800553c <HAL_UART_MspInit+0x150>)
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	4a41      	ldr	r2, [pc, #260]	; (800553c <HAL_UART_MspInit+0x150>)
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	6313      	str	r3, [r2, #48]	; 0x30
 800543c:	4b3f      	ldr	r3, [pc, #252]	; (800553c <HAL_UART_MspInit+0x150>)
 800543e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005448:	230c      	movs	r3, #12
 800544a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800544c:	2302      	movs	r3, #2
 800544e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005450:	2300      	movs	r3, #0
 8005452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005454:	2303      	movs	r3, #3
 8005456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005458:	2307      	movs	r3, #7
 800545a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800545c:	f107 0314 	add.w	r3, r7, #20
 8005460:	4619      	mov	r1, r3
 8005462:	4837      	ldr	r0, [pc, #220]	; (8005540 <HAL_UART_MspInit+0x154>)
 8005464:	f000 fece 	bl	8006204 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005468:	4b36      	ldr	r3, [pc, #216]	; (8005544 <HAL_UART_MspInit+0x158>)
 800546a:	4a37      	ldr	r2, [pc, #220]	; (8005548 <HAL_UART_MspInit+0x15c>)
 800546c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800546e:	4b35      	ldr	r3, [pc, #212]	; (8005544 <HAL_UART_MspInit+0x158>)
 8005470:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005474:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005476:	4b33      	ldr	r3, [pc, #204]	; (8005544 <HAL_UART_MspInit+0x158>)
 8005478:	2200      	movs	r2, #0
 800547a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800547c:	4b31      	ldr	r3, [pc, #196]	; (8005544 <HAL_UART_MspInit+0x158>)
 800547e:	2200      	movs	r2, #0
 8005480:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005482:	4b30      	ldr	r3, [pc, #192]	; (8005544 <HAL_UART_MspInit+0x158>)
 8005484:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005488:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800548a:	4b2e      	ldr	r3, [pc, #184]	; (8005544 <HAL_UART_MspInit+0x158>)
 800548c:	2200      	movs	r2, #0
 800548e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005490:	4b2c      	ldr	r3, [pc, #176]	; (8005544 <HAL_UART_MspInit+0x158>)
 8005492:	2200      	movs	r2, #0
 8005494:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005496:	4b2b      	ldr	r3, [pc, #172]	; (8005544 <HAL_UART_MspInit+0x158>)
 8005498:	2200      	movs	r2, #0
 800549a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800549c:	4b29      	ldr	r3, [pc, #164]	; (8005544 <HAL_UART_MspInit+0x158>)
 800549e:	2200      	movs	r2, #0
 80054a0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054a2:	4b28      	ldr	r3, [pc, #160]	; (8005544 <HAL_UART_MspInit+0x158>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80054a8:	4826      	ldr	r0, [pc, #152]	; (8005544 <HAL_UART_MspInit+0x158>)
 80054aa:	f000 fa9b 	bl	80059e4 <HAL_DMA_Init>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80054b4:	f7ff fe26 	bl	8005104 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a22      	ldr	r2, [pc, #136]	; (8005544 <HAL_UART_MspInit+0x158>)
 80054bc:	639a      	str	r2, [r3, #56]	; 0x38
 80054be:	4a21      	ldr	r2, [pc, #132]	; (8005544 <HAL_UART_MspInit+0x158>)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80054c4:	4b21      	ldr	r3, [pc, #132]	; (800554c <HAL_UART_MspInit+0x160>)
 80054c6:	4a22      	ldr	r2, [pc, #136]	; (8005550 <HAL_UART_MspInit+0x164>)
 80054c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80054ca:	4b20      	ldr	r3, [pc, #128]	; (800554c <HAL_UART_MspInit+0x160>)
 80054cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80054d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054d2:	4b1e      	ldr	r3, [pc, #120]	; (800554c <HAL_UART_MspInit+0x160>)
 80054d4:	2240      	movs	r2, #64	; 0x40
 80054d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054d8:	4b1c      	ldr	r3, [pc, #112]	; (800554c <HAL_UART_MspInit+0x160>)
 80054da:	2200      	movs	r2, #0
 80054dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80054de:	4b1b      	ldr	r3, [pc, #108]	; (800554c <HAL_UART_MspInit+0x160>)
 80054e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054e6:	4b19      	ldr	r3, [pc, #100]	; (800554c <HAL_UART_MspInit+0x160>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054ec:	4b17      	ldr	r3, [pc, #92]	; (800554c <HAL_UART_MspInit+0x160>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80054f2:	4b16      	ldr	r3, [pc, #88]	; (800554c <HAL_UART_MspInit+0x160>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80054f8:	4b14      	ldr	r3, [pc, #80]	; (800554c <HAL_UART_MspInit+0x160>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054fe:	4b13      	ldr	r3, [pc, #76]	; (800554c <HAL_UART_MspInit+0x160>)
 8005500:	2200      	movs	r2, #0
 8005502:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005504:	4811      	ldr	r0, [pc, #68]	; (800554c <HAL_UART_MspInit+0x160>)
 8005506:	f000 fa6d 	bl	80059e4 <HAL_DMA_Init>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8005510:	f7ff fdf8 	bl	8005104 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a0d      	ldr	r2, [pc, #52]	; (800554c <HAL_UART_MspInit+0x160>)
 8005518:	635a      	str	r2, [r3, #52]	; 0x34
 800551a:	4a0c      	ldr	r2, [pc, #48]	; (800554c <HAL_UART_MspInit+0x160>)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005520:	2200      	movs	r2, #0
 8005522:	2100      	movs	r1, #0
 8005524:	2026      	movs	r0, #38	; 0x26
 8005526:	f000 fa26 	bl	8005976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800552a:	2026      	movs	r0, #38	; 0x26
 800552c:	f000 fa3f 	bl	80059ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005530:	bf00      	nop
 8005532:	3728      	adds	r7, #40	; 0x28
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40004400 	.word	0x40004400
 800553c:	40023800 	.word	0x40023800
 8005540:	40020000 	.word	0x40020000
 8005544:	2000061c 	.word	0x2000061c
 8005548:	40026088 	.word	0x40026088
 800554c:	2000067c 	.word	0x2000067c
 8005550:	400260a0 	.word	0x400260a0

08005554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005558:	e7fe      	b.n	8005558 <NMI_Handler+0x4>

0800555a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800555a:	b480      	push	{r7}
 800555c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800555e:	e7fe      	b.n	800555e <HardFault_Handler+0x4>

08005560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005564:	e7fe      	b.n	8005564 <MemManage_Handler+0x4>

08005566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005566:	b480      	push	{r7}
 8005568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800556a:	e7fe      	b.n	800556a <BusFault_Handler+0x4>

0800556c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005570:	e7fe      	b.n	8005570 <UsageFault_Handler+0x4>

08005572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005572:	b480      	push	{r7}
 8005574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005576:	bf00      	nop
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005584:	bf00      	nop
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800558e:	b480      	push	{r7}
 8005590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005592:	bf00      	nop
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055a0:	f000 f8ee 	bl	8005780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055a4:	bf00      	nop
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80055ac:	4802      	ldr	r0, [pc, #8]	; (80055b8 <DMA1_Stream5_IRQHandler+0x10>)
 80055ae:	f000 fbb1 	bl	8005d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80055b2:	bf00      	nop
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	2000061c 	.word	0x2000061c

080055bc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80055c0:	4802      	ldr	r0, [pc, #8]	; (80055cc <DMA1_Stream6_IRQHandler+0x10>)
 80055c2:	f000 fba7 	bl	8005d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80055c6:	bf00      	nop
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	2000067c 	.word	0x2000067c

080055d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Emer_Pin);
 80055d4:	2020      	movs	r0, #32
 80055d6:	f000 ffe5 	bl	80065a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80055da:	bf00      	nop
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80055e4:	4803      	ldr	r0, [pc, #12]	; (80055f4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80055e6:	f003 ff15 	bl	8009414 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80055ea:	4803      	ldr	r0, [pc, #12]	; (80055f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80055ec:	f003 ff12 	bl	8009414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80055f0:	bf00      	nop
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	200004b8 	.word	0x200004b8
 80055f8:	20000590 	.word	0x20000590

080055fc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005600:	4802      	ldr	r0, [pc, #8]	; (800560c <I2C1_EV_IRQHandler+0x10>)
 8005602:	f001 fa7f 	bl	8006b04 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005606:	bf00      	nop
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000464 	.word	0x20000464

08005610 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005614:	4802      	ldr	r0, [pc, #8]	; (8005620 <I2C1_ER_IRQHandler+0x10>)
 8005616:	f001 fbe6 	bl	8006de6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800561a:	bf00      	nop
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000464 	.word	0x20000464

08005624 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005628:	4802      	ldr	r0, [pc, #8]	; (8005634 <USART2_IRQHandler+0x10>)
 800562a:	f004 fe7f 	bl	800a32c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800562e:	bf00      	nop
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	200005d8 	.word	0x200005d8

08005638 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Proxi_Pin);
 800563c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005640:	f000 ffb0 	bl	80065a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005644:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005648:	f000 ffac 	bl	80065a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800564c:	bf00      	nop
 800564e:	bd80      	pop	{r7, pc}

08005650 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005654:	4802      	ldr	r0, [pc, #8]	; (8005660 <TIM5_IRQHandler+0x10>)
 8005656:	f003 fedd 	bl	8009414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800565a:	bf00      	nop
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000548 	.word	0x20000548

08005664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005668:	4b06      	ldr	r3, [pc, #24]	; (8005684 <SystemInit+0x20>)
 800566a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566e:	4a05      	ldr	r2, [pc, #20]	; (8005684 <SystemInit+0x20>)
 8005670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005678:	bf00      	nop
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	e000ed00 	.word	0xe000ed00

08005688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800568c:	480d      	ldr	r0, [pc, #52]	; (80056c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800568e:	490e      	ldr	r1, [pc, #56]	; (80056c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005690:	4a0e      	ldr	r2, [pc, #56]	; (80056cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005694:	e002      	b.n	800569c <LoopCopyDataInit>

08005696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800569a:	3304      	adds	r3, #4

0800569c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800569c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800569e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056a0:	d3f9      	bcc.n	8005696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056a2:	4a0b      	ldr	r2, [pc, #44]	; (80056d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80056a4:	4c0b      	ldr	r4, [pc, #44]	; (80056d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80056a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056a8:	e001      	b.n	80056ae <LoopFillZerobss>

080056aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056ac:	3204      	adds	r2, #4

080056ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056b0:	d3fb      	bcc.n	80056aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80056b2:	f7ff ffd7 	bl	8005664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056b6:	f006 f9fb 	bl	800bab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056ba:	f7fd fc8d 	bl	8002fd8 <main>
  bx  lr    
 80056be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80056c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80056c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056c8:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 80056cc:	0800bb6c 	.word	0x0800bb6c
  ldr r2, =_sbss
 80056d0:	20000440 	.word	0x20000440
  ldr r4, =_ebss
 80056d4:	20000b24 	.word	0x20000b24

080056d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056d8:	e7fe      	b.n	80056d8 <ADC_IRQHandler>
	...

080056dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80056e0:	4b0e      	ldr	r3, [pc, #56]	; (800571c <HAL_Init+0x40>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a0d      	ldr	r2, [pc, #52]	; (800571c <HAL_Init+0x40>)
 80056e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80056ec:	4b0b      	ldr	r3, [pc, #44]	; (800571c <HAL_Init+0x40>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a0a      	ldr	r2, [pc, #40]	; (800571c <HAL_Init+0x40>)
 80056f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80056f8:	4b08      	ldr	r3, [pc, #32]	; (800571c <HAL_Init+0x40>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a07      	ldr	r2, [pc, #28]	; (800571c <HAL_Init+0x40>)
 80056fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005704:	2003      	movs	r0, #3
 8005706:	f000 f92b 	bl	8005960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800570a:	2000      	movs	r0, #0
 800570c:	f000 f808 	bl	8005720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005710:	f7ff fcfe 	bl	8005110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	40023c00 	.word	0x40023c00

08005720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005728:	4b12      	ldr	r3, [pc, #72]	; (8005774 <HAL_InitTick+0x54>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4b12      	ldr	r3, [pc, #72]	; (8005778 <HAL_InitTick+0x58>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	4619      	mov	r1, r3
 8005732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005736:	fbb3 f3f1 	udiv	r3, r3, r1
 800573a:	fbb2 f3f3 	udiv	r3, r2, r3
 800573e:	4618      	mov	r0, r3
 8005740:	f000 f943 	bl	80059ca <HAL_SYSTICK_Config>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e00e      	b.n	800576c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b0f      	cmp	r3, #15
 8005752:	d80a      	bhi.n	800576a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005754:	2200      	movs	r2, #0
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	f04f 30ff 	mov.w	r0, #4294967295
 800575c:	f000 f90b 	bl	8005976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005760:	4a06      	ldr	r2, [pc, #24]	; (800577c <HAL_InitTick+0x5c>)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	e000      	b.n	800576c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	20000430 	.word	0x20000430
 8005778:	20000438 	.word	0x20000438
 800577c:	20000434 	.word	0x20000434

08005780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005784:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <HAL_IncTick+0x20>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	461a      	mov	r2, r3
 800578a:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <HAL_IncTick+0x24>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4413      	add	r3, r2
 8005790:	4a04      	ldr	r2, [pc, #16]	; (80057a4 <HAL_IncTick+0x24>)
 8005792:	6013      	str	r3, [r2, #0]
}
 8005794:	bf00      	nop
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	20000438 	.word	0x20000438
 80057a4:	20000b20 	.word	0x20000b20

080057a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  return uwTick;
 80057ac:	4b03      	ldr	r3, [pc, #12]	; (80057bc <HAL_GetTick+0x14>)
 80057ae:	681b      	ldr	r3, [r3, #0]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	20000b20 	.word	0x20000b20

080057c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057d0:	4b0c      	ldr	r3, [pc, #48]	; (8005804 <__NVIC_SetPriorityGrouping+0x44>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057dc:	4013      	ands	r3, r2
 80057de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057f2:	4a04      	ldr	r2, [pc, #16]	; (8005804 <__NVIC_SetPriorityGrouping+0x44>)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	60d3      	str	r3, [r2, #12]
}
 80057f8:	bf00      	nop
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	e000ed00 	.word	0xe000ed00

08005808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800580c:	4b04      	ldr	r3, [pc, #16]	; (8005820 <__NVIC_GetPriorityGrouping+0x18>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	0a1b      	lsrs	r3, r3, #8
 8005812:	f003 0307 	and.w	r3, r3, #7
}
 8005816:	4618      	mov	r0, r3
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	e000ed00 	.word	0xe000ed00

08005824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	4603      	mov	r3, r0
 800582c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800582e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005832:	2b00      	cmp	r3, #0
 8005834:	db0b      	blt.n	800584e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	f003 021f 	and.w	r2, r3, #31
 800583c:	4907      	ldr	r1, [pc, #28]	; (800585c <__NVIC_EnableIRQ+0x38>)
 800583e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	2001      	movs	r0, #1
 8005846:	fa00 f202 	lsl.w	r2, r0, r2
 800584a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	e000e100 	.word	0xe000e100

08005860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	4603      	mov	r3, r0
 8005868:	6039      	str	r1, [r7, #0]
 800586a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800586c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005870:	2b00      	cmp	r3, #0
 8005872:	db0a      	blt.n	800588a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	b2da      	uxtb	r2, r3
 8005878:	490c      	ldr	r1, [pc, #48]	; (80058ac <__NVIC_SetPriority+0x4c>)
 800587a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800587e:	0112      	lsls	r2, r2, #4
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	440b      	add	r3, r1
 8005884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005888:	e00a      	b.n	80058a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	4908      	ldr	r1, [pc, #32]	; (80058b0 <__NVIC_SetPriority+0x50>)
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	3b04      	subs	r3, #4
 8005898:	0112      	lsls	r2, r2, #4
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	440b      	add	r3, r1
 800589e:	761a      	strb	r2, [r3, #24]
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	e000e100 	.word	0xe000e100
 80058b0:	e000ed00 	.word	0xe000ed00

080058b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b089      	sub	sp, #36	; 0x24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f1c3 0307 	rsb	r3, r3, #7
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	bf28      	it	cs
 80058d2:	2304      	movcs	r3, #4
 80058d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	3304      	adds	r3, #4
 80058da:	2b06      	cmp	r3, #6
 80058dc:	d902      	bls.n	80058e4 <NVIC_EncodePriority+0x30>
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	3b03      	subs	r3, #3
 80058e2:	e000      	b.n	80058e6 <NVIC_EncodePriority+0x32>
 80058e4:	2300      	movs	r3, #0
 80058e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058e8:	f04f 32ff 	mov.w	r2, #4294967295
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	fa02 f303 	lsl.w	r3, r2, r3
 80058f2:	43da      	mvns	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	401a      	ands	r2, r3
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	fa01 f303 	lsl.w	r3, r1, r3
 8005906:	43d9      	mvns	r1, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800590c:	4313      	orrs	r3, r2
         );
}
 800590e:	4618      	mov	r0, r3
 8005910:	3724      	adds	r7, #36	; 0x24
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
	...

0800591c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3b01      	subs	r3, #1
 8005928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800592c:	d301      	bcc.n	8005932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800592e:	2301      	movs	r3, #1
 8005930:	e00f      	b.n	8005952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005932:	4a0a      	ldr	r2, [pc, #40]	; (800595c <SysTick_Config+0x40>)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3b01      	subs	r3, #1
 8005938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800593a:	210f      	movs	r1, #15
 800593c:	f04f 30ff 	mov.w	r0, #4294967295
 8005940:	f7ff ff8e 	bl	8005860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005944:	4b05      	ldr	r3, [pc, #20]	; (800595c <SysTick_Config+0x40>)
 8005946:	2200      	movs	r2, #0
 8005948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800594a:	4b04      	ldr	r3, [pc, #16]	; (800595c <SysTick_Config+0x40>)
 800594c:	2207      	movs	r2, #7
 800594e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	e000e010 	.word	0xe000e010

08005960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff ff29 	bl	80057c0 <__NVIC_SetPriorityGrouping>
}
 800596e:	bf00      	nop
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005976:	b580      	push	{r7, lr}
 8005978:	b086      	sub	sp, #24
 800597a:	af00      	add	r7, sp, #0
 800597c:	4603      	mov	r3, r0
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
 8005982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005984:	2300      	movs	r3, #0
 8005986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005988:	f7ff ff3e 	bl	8005808 <__NVIC_GetPriorityGrouping>
 800598c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	68b9      	ldr	r1, [r7, #8]
 8005992:	6978      	ldr	r0, [r7, #20]
 8005994:	f7ff ff8e 	bl	80058b4 <NVIC_EncodePriority>
 8005998:	4602      	mov	r2, r0
 800599a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800599e:	4611      	mov	r1, r2
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff ff5d 	bl	8005860 <__NVIC_SetPriority>
}
 80059a6:	bf00      	nop
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	4603      	mov	r3, r0
 80059b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff ff31 	bl	8005824 <__NVIC_EnableIRQ>
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff ffa2 	bl	800591c <SysTick_Config>
 80059d8:	4603      	mov	r3, r0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80059f0:	f7ff feda 	bl	80057a8 <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e099      	b.n	8005b34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0201 	bic.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a20:	e00f      	b.n	8005a42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a22:	f7ff fec1 	bl	80057a8 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b05      	cmp	r3, #5
 8005a2e:	d908      	bls.n	8005a42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2203      	movs	r2, #3
 8005a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e078      	b.n	8005b34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e8      	bne.n	8005a22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4b38      	ldr	r3, [pc, #224]	; (8005b3c <HAL_DMA_Init+0x158>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d107      	bne.n	8005aac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f023 0307 	bic.w	r3, r3, #7
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d117      	bne.n	8005b06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00e      	beq.n	8005b06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fb0f 	bl	800610c <DMA_CheckFifoParam>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2240      	movs	r2, #64	; 0x40
 8005af8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b02:	2301      	movs	r3, #1
 8005b04:	e016      	b.n	8005b34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fac6 	bl	80060a0 <DMA_CalcBaseAndBitshift>
 8005b14:	4603      	mov	r3, r0
 8005b16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1c:	223f      	movs	r2, #63	; 0x3f
 8005b1e:	409a      	lsls	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	f010803f 	.word	0xf010803f

08005b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_DMA_Start_IT+0x26>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e040      	b.n	8005be8 <HAL_DMA_Start_IT+0xa8>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d12f      	bne.n	8005bda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 fa58 	bl	8006044 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b98:	223f      	movs	r2, #63	; 0x3f
 8005b9a:	409a      	lsls	r2, r3
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0216 	orr.w	r2, r2, #22
 8005bae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0208 	orr.w	r2, r2, #8
 8005bc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 0201 	orr.w	r2, r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	e005      	b.n	8005be6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005be2:	2302      	movs	r3, #2
 8005be4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005bfe:	f7ff fdd3 	bl	80057a8 <HAL_GetTick>
 8005c02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d008      	beq.n	8005c22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2280      	movs	r2, #128	; 0x80
 8005c14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e052      	b.n	8005cc8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0216 	bic.w	r2, r2, #22
 8005c30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695a      	ldr	r2, [r3, #20]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d103      	bne.n	8005c52 <HAL_DMA_Abort+0x62>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d007      	beq.n	8005c62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0208 	bic.w	r2, r2, #8
 8005c60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0201 	bic.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c72:	e013      	b.n	8005c9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c74:	f7ff fd98 	bl	80057a8 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b05      	cmp	r3, #5
 8005c80:	d90c      	bls.n	8005c9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e015      	b.n	8005cc8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e4      	bne.n	8005c74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cae:	223f      	movs	r2, #63	; 0x3f
 8005cb0:	409a      	lsls	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d004      	beq.n	8005cee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2280      	movs	r2, #128	; 0x80
 8005ce8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e00c      	b.n	8005d08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2205      	movs	r2, #5
 8005cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0201 	bic.w	r2, r2, #1
 8005d04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d20:	4b8e      	ldr	r3, [pc, #568]	; (8005f5c <HAL_DMA_IRQHandler+0x248>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a8e      	ldr	r2, [pc, #568]	; (8005f60 <HAL_DMA_IRQHandler+0x24c>)
 8005d26:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2a:	0a9b      	lsrs	r3, r3, #10
 8005d2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3e:	2208      	movs	r2, #8
 8005d40:	409a      	lsls	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4013      	ands	r3, r2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d01a      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d013      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 0204 	bic.w	r2, r2, #4
 8005d66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6c:	2208      	movs	r2, #8
 8005d6e:	409a      	lsls	r2, r3
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d78:	f043 0201 	orr.w	r2, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d84:	2201      	movs	r2, #1
 8005d86:	409a      	lsls	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d012      	beq.n	8005db6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00b      	beq.n	8005db6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da2:	2201      	movs	r2, #1
 8005da4:	409a      	lsls	r2, r3
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dae:	f043 0202 	orr.w	r2, r3, #2
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dba:	2204      	movs	r2, #4
 8005dbc:	409a      	lsls	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d012      	beq.n	8005dec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00b      	beq.n	8005dec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd8:	2204      	movs	r2, #4
 8005dda:	409a      	lsls	r2, r3
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de4:	f043 0204 	orr.w	r2, r3, #4
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df0:	2210      	movs	r2, #16
 8005df2:	409a      	lsls	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4013      	ands	r3, r2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d043      	beq.n	8005e84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d03c      	beq.n	8005e84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e0e:	2210      	movs	r2, #16
 8005e10:	409a      	lsls	r2, r3
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d018      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d108      	bne.n	8005e44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d024      	beq.n	8005e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	4798      	blx	r3
 8005e42:	e01f      	b.n	8005e84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01b      	beq.n	8005e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	4798      	blx	r3
 8005e54:	e016      	b.n	8005e84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d107      	bne.n	8005e74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0208 	bic.w	r2, r2, #8
 8005e72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e88:	2220      	movs	r2, #32
 8005e8a:	409a      	lsls	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 808f 	beq.w	8005fb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0310 	and.w	r3, r3, #16
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 8087 	beq.w	8005fb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eaa:	2220      	movs	r2, #32
 8005eac:	409a      	lsls	r2, r3
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b05      	cmp	r3, #5
 8005ebc:	d136      	bne.n	8005f2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0216 	bic.w	r2, r2, #22
 8005ecc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	695a      	ldr	r2, [r3, #20]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005edc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d103      	bne.n	8005eee <HAL_DMA_IRQHandler+0x1da>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d007      	beq.n	8005efe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0208 	bic.w	r2, r2, #8
 8005efc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f02:	223f      	movs	r2, #63	; 0x3f
 8005f04:	409a      	lsls	r2, r3
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d07e      	beq.n	8006020 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	4798      	blx	r3
        }
        return;
 8005f2a:	e079      	b.n	8006020 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d01d      	beq.n	8005f76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10d      	bne.n	8005f64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d031      	beq.n	8005fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	4798      	blx	r3
 8005f58:	e02c      	b.n	8005fb4 <HAL_DMA_IRQHandler+0x2a0>
 8005f5a:	bf00      	nop
 8005f5c:	20000430 	.word	0x20000430
 8005f60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d023      	beq.n	8005fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	4798      	blx	r3
 8005f74:	e01e      	b.n	8005fb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10f      	bne.n	8005fa4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0210 	bic.w	r2, r2, #16
 8005f92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d032      	beq.n	8006022 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d022      	beq.n	800600e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2205      	movs	r2, #5
 8005fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 0201 	bic.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	60bb      	str	r3, [r7, #8]
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d307      	bcc.n	8005ffc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1f2      	bne.n	8005fe0 <HAL_DMA_IRQHandler+0x2cc>
 8005ffa:	e000      	b.n	8005ffe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005ffc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	4798      	blx	r3
 800601e:	e000      	b.n	8006022 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006020:	bf00      	nop
    }
  }
}
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006036:	b2db      	uxtb	r3, r3
}
 8006038:	4618      	mov	r0, r3
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006060:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	2b40      	cmp	r3, #64	; 0x40
 8006070:	d108      	bne.n	8006084 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006082:	e007      	b.n	8006094 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	60da      	str	r2, [r3, #12]
}
 8006094:	bf00      	nop
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	3b10      	subs	r3, #16
 80060b0:	4a14      	ldr	r2, [pc, #80]	; (8006104 <DMA_CalcBaseAndBitshift+0x64>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	091b      	lsrs	r3, r3, #4
 80060b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80060ba:	4a13      	ldr	r2, [pc, #76]	; (8006108 <DMA_CalcBaseAndBitshift+0x68>)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4413      	add	r3, r2
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d909      	bls.n	80060e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060d6:	f023 0303 	bic.w	r3, r3, #3
 80060da:	1d1a      	adds	r2, r3, #4
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	659a      	str	r2, [r3, #88]	; 0x58
 80060e0:	e007      	b.n	80060f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060ea:	f023 0303 	bic.w	r3, r3, #3
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	aaaaaaab 	.word	0xaaaaaaab
 8006108:	0800bb54 	.word	0x0800bb54

0800610c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d11f      	bne.n	8006166 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2b03      	cmp	r3, #3
 800612a:	d856      	bhi.n	80061da <DMA_CheckFifoParam+0xce>
 800612c:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <DMA_CheckFifoParam+0x28>)
 800612e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006132:	bf00      	nop
 8006134:	08006145 	.word	0x08006145
 8006138:	08006157 	.word	0x08006157
 800613c:	08006145 	.word	0x08006145
 8006140:	080061db 	.word	0x080061db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d046      	beq.n	80061de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006154:	e043      	b.n	80061de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800615e:	d140      	bne.n	80061e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006164:	e03d      	b.n	80061e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800616e:	d121      	bne.n	80061b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2b03      	cmp	r3, #3
 8006174:	d837      	bhi.n	80061e6 <DMA_CheckFifoParam+0xda>
 8006176:	a201      	add	r2, pc, #4	; (adr r2, 800617c <DMA_CheckFifoParam+0x70>)
 8006178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617c:	0800618d 	.word	0x0800618d
 8006180:	08006193 	.word	0x08006193
 8006184:	0800618d 	.word	0x0800618d
 8006188:	080061a5 	.word	0x080061a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	73fb      	strb	r3, [r7, #15]
      break;
 8006190:	e030      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d025      	beq.n	80061ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061a2:	e022      	b.n	80061ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061ac:	d11f      	bne.n	80061ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80061b2:	e01c      	b.n	80061ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d903      	bls.n	80061c2 <DMA_CheckFifoParam+0xb6>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d003      	beq.n	80061c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80061c0:	e018      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	73fb      	strb	r3, [r7, #15]
      break;
 80061c6:	e015      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00e      	beq.n	80061f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	73fb      	strb	r3, [r7, #15]
      break;
 80061d8:	e00b      	b.n	80061f2 <DMA_CheckFifoParam+0xe6>
      break;
 80061da:	bf00      	nop
 80061dc:	e00a      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>
      break;
 80061de:	bf00      	nop
 80061e0:	e008      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>
      break;
 80061e2:	bf00      	nop
 80061e4:	e006      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>
      break;
 80061e6:	bf00      	nop
 80061e8:	e004      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>
      break;
 80061ea:	bf00      	nop
 80061ec:	e002      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80061ee:	bf00      	nop
 80061f0:	e000      	b.n	80061f4 <DMA_CheckFifoParam+0xe8>
      break;
 80061f2:	bf00      	nop
    }
  } 
  
  return status; 
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop

08006204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006204:	b480      	push	{r7}
 8006206:	b089      	sub	sp, #36	; 0x24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800620e:	2300      	movs	r3, #0
 8006210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006212:	2300      	movs	r3, #0
 8006214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006216:	2300      	movs	r3, #0
 8006218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800621a:	2300      	movs	r3, #0
 800621c:	61fb      	str	r3, [r7, #28]
 800621e:	e159      	b.n	80064d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006220:	2201      	movs	r2, #1
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4013      	ands	r3, r2
 8006232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	429a      	cmp	r2, r3
 800623a:	f040 8148 	bne.w	80064ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	2b01      	cmp	r3, #1
 8006248:	d005      	beq.n	8006256 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006252:	2b02      	cmp	r3, #2
 8006254:	d130      	bne.n	80062b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	2203      	movs	r2, #3
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	43db      	mvns	r3, r3
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	4013      	ands	r3, r2
 800626c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	fa02 f303 	lsl.w	r3, r2, r3
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	4313      	orrs	r3, r2
 800627e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800628c:	2201      	movs	r2, #1
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	fa02 f303 	lsl.w	r3, r2, r3
 8006294:	43db      	mvns	r3, r3
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	4013      	ands	r3, r2
 800629a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	091b      	lsrs	r3, r3, #4
 80062a2:	f003 0201 	and.w	r2, r3, #1
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f003 0303 	and.w	r3, r3, #3
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d017      	beq.n	80062f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	2203      	movs	r2, #3
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	43db      	mvns	r3, r3
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	4013      	ands	r3, r2
 80062da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d123      	bne.n	8006348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	08da      	lsrs	r2, r3, #3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3208      	adds	r2, #8
 8006308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	220f      	movs	r2, #15
 8006318:	fa02 f303 	lsl.w	r3, r2, r3
 800631c:	43db      	mvns	r3, r3
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	4013      	ands	r3, r2
 8006322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	691a      	ldr	r2, [r3, #16]
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	4313      	orrs	r3, r2
 8006338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	08da      	lsrs	r2, r3, #3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	3208      	adds	r2, #8
 8006342:	69b9      	ldr	r1, [r7, #24]
 8006344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	2203      	movs	r2, #3
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	43db      	mvns	r3, r3
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	4013      	ands	r3, r2
 800635e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f003 0203 	and.w	r2, r3, #3
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	4313      	orrs	r3, r2
 8006374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 80a2 	beq.w	80064ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	4b57      	ldr	r3, [pc, #348]	; (80064ec <HAL_GPIO_Init+0x2e8>)
 8006390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006392:	4a56      	ldr	r2, [pc, #344]	; (80064ec <HAL_GPIO_Init+0x2e8>)
 8006394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006398:	6453      	str	r3, [r2, #68]	; 0x44
 800639a:	4b54      	ldr	r3, [pc, #336]	; (80064ec <HAL_GPIO_Init+0x2e8>)
 800639c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063a6:	4a52      	ldr	r2, [pc, #328]	; (80064f0 <HAL_GPIO_Init+0x2ec>)
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	089b      	lsrs	r3, r3, #2
 80063ac:	3302      	adds	r3, #2
 80063ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	f003 0303 	and.w	r3, r3, #3
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	220f      	movs	r2, #15
 80063be:	fa02 f303 	lsl.w	r3, r2, r3
 80063c2:	43db      	mvns	r3, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4013      	ands	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a49      	ldr	r2, [pc, #292]	; (80064f4 <HAL_GPIO_Init+0x2f0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d019      	beq.n	8006406 <HAL_GPIO_Init+0x202>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a48      	ldr	r2, [pc, #288]	; (80064f8 <HAL_GPIO_Init+0x2f4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d013      	beq.n	8006402 <HAL_GPIO_Init+0x1fe>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a47      	ldr	r2, [pc, #284]	; (80064fc <HAL_GPIO_Init+0x2f8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00d      	beq.n	80063fe <HAL_GPIO_Init+0x1fa>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a46      	ldr	r2, [pc, #280]	; (8006500 <HAL_GPIO_Init+0x2fc>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d007      	beq.n	80063fa <HAL_GPIO_Init+0x1f6>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a45      	ldr	r2, [pc, #276]	; (8006504 <HAL_GPIO_Init+0x300>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d101      	bne.n	80063f6 <HAL_GPIO_Init+0x1f2>
 80063f2:	2304      	movs	r3, #4
 80063f4:	e008      	b.n	8006408 <HAL_GPIO_Init+0x204>
 80063f6:	2307      	movs	r3, #7
 80063f8:	e006      	b.n	8006408 <HAL_GPIO_Init+0x204>
 80063fa:	2303      	movs	r3, #3
 80063fc:	e004      	b.n	8006408 <HAL_GPIO_Init+0x204>
 80063fe:	2302      	movs	r3, #2
 8006400:	e002      	b.n	8006408 <HAL_GPIO_Init+0x204>
 8006402:	2301      	movs	r3, #1
 8006404:	e000      	b.n	8006408 <HAL_GPIO_Init+0x204>
 8006406:	2300      	movs	r3, #0
 8006408:	69fa      	ldr	r2, [r7, #28]
 800640a:	f002 0203 	and.w	r2, r2, #3
 800640e:	0092      	lsls	r2, r2, #2
 8006410:	4093      	lsls	r3, r2
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	4313      	orrs	r3, r2
 8006416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006418:	4935      	ldr	r1, [pc, #212]	; (80064f0 <HAL_GPIO_Init+0x2ec>)
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	089b      	lsrs	r3, r3, #2
 800641e:	3302      	adds	r3, #2
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006426:	4b38      	ldr	r3, [pc, #224]	; (8006508 <HAL_GPIO_Init+0x304>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	43db      	mvns	r3, r3
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	4013      	ands	r3, r2
 8006434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	4313      	orrs	r3, r2
 8006448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800644a:	4a2f      	ldr	r2, [pc, #188]	; (8006508 <HAL_GPIO_Init+0x304>)
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006450:	4b2d      	ldr	r3, [pc, #180]	; (8006508 <HAL_GPIO_Init+0x304>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	43db      	mvns	r3, r3
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	4013      	ands	r3, r2
 800645e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006474:	4a24      	ldr	r2, [pc, #144]	; (8006508 <HAL_GPIO_Init+0x304>)
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800647a:	4b23      	ldr	r3, [pc, #140]	; (8006508 <HAL_GPIO_Init+0x304>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	43db      	mvns	r3, r3
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	4013      	ands	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800649e:	4a1a      	ldr	r2, [pc, #104]	; (8006508 <HAL_GPIO_Init+0x304>)
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064a4:	4b18      	ldr	r3, [pc, #96]	; (8006508 <HAL_GPIO_Init+0x304>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	43db      	mvns	r3, r3
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	4013      	ands	r3, r2
 80064b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80064c8:	4a0f      	ldr	r2, [pc, #60]	; (8006508 <HAL_GPIO_Init+0x304>)
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	3301      	adds	r3, #1
 80064d2:	61fb      	str	r3, [r7, #28]
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	2b0f      	cmp	r3, #15
 80064d8:	f67f aea2 	bls.w	8006220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80064dc:	bf00      	nop
 80064de:	bf00      	nop
 80064e0:	3724      	adds	r7, #36	; 0x24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	40023800 	.word	0x40023800
 80064f0:	40013800 	.word	0x40013800
 80064f4:	40020000 	.word	0x40020000
 80064f8:	40020400 	.word	0x40020400
 80064fc:	40020800 	.word	0x40020800
 8006500:	40020c00 	.word	0x40020c00
 8006504:	40021000 	.word	0x40021000
 8006508:	40013c00 	.word	0x40013c00

0800650c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691a      	ldr	r2, [r3, #16]
 800651c:	887b      	ldrh	r3, [r7, #2]
 800651e:	4013      	ands	r3, r2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006524:	2301      	movs	r3, #1
 8006526:	73fb      	strb	r3, [r7, #15]
 8006528:	e001      	b.n	800652e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800652a:	2300      	movs	r3, #0
 800652c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800652e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	807b      	strh	r3, [r7, #2]
 8006548:	4613      	mov	r3, r2
 800654a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800654c:	787b      	ldrb	r3, [r7, #1]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006552:	887a      	ldrh	r2, [r7, #2]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006558:	e003      	b.n	8006562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800655a:	887b      	ldrh	r3, [r7, #2]
 800655c:	041a      	lsls	r2, r3, #16
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	619a      	str	r2, [r3, #24]
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800656e:	b480      	push	{r7}
 8006570:	b085      	sub	sp, #20
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	460b      	mov	r3, r1
 8006578:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006580:	887a      	ldrh	r2, [r7, #2]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4013      	ands	r3, r2
 8006586:	041a      	lsls	r2, r3, #16
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	43d9      	mvns	r1, r3
 800658c:	887b      	ldrh	r3, [r7, #2]
 800658e:	400b      	ands	r3, r1
 8006590:	431a      	orrs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	619a      	str	r2, [r3, #24]
}
 8006596:	bf00      	nop
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
	...

080065a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4603      	mov	r3, r0
 80065ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80065ae:	4b08      	ldr	r3, [pc, #32]	; (80065d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065b0:	695a      	ldr	r2, [r3, #20]
 80065b2:	88fb      	ldrh	r3, [r7, #6]
 80065b4:	4013      	ands	r3, r2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d006      	beq.n	80065c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065ba:	4a05      	ldr	r2, [pc, #20]	; (80065d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065bc:	88fb      	ldrh	r3, [r7, #6]
 80065be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065c0:	88fb      	ldrh	r3, [r7, #6]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe fb88 	bl	8004cd8 <HAL_GPIO_EXTI_Callback>
  }
}
 80065c8:	bf00      	nop
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	40013c00 	.word	0x40013c00

080065d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e12b      	b.n	800683e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d106      	bne.n	8006600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fe fdb0 	bl	8005160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2224      	movs	r2, #36	; 0x24
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0201 	bic.w	r2, r2, #1
 8006616:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006626:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006636:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006638:	f002 fbb0 	bl	8008d9c <HAL_RCC_GetPCLK1Freq>
 800663c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	4a81      	ldr	r2, [pc, #516]	; (8006848 <HAL_I2C_Init+0x274>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d807      	bhi.n	8006658 <HAL_I2C_Init+0x84>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4a80      	ldr	r2, [pc, #512]	; (800684c <HAL_I2C_Init+0x278>)
 800664c:	4293      	cmp	r3, r2
 800664e:	bf94      	ite	ls
 8006650:	2301      	movls	r3, #1
 8006652:	2300      	movhi	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	e006      	b.n	8006666 <HAL_I2C_Init+0x92>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4a7d      	ldr	r2, [pc, #500]	; (8006850 <HAL_I2C_Init+0x27c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	bf94      	ite	ls
 8006660:	2301      	movls	r3, #1
 8006662:	2300      	movhi	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e0e7      	b.n	800683e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a78      	ldr	r2, [pc, #480]	; (8006854 <HAL_I2C_Init+0x280>)
 8006672:	fba2 2303 	umull	r2, r3, r2, r3
 8006676:	0c9b      	lsrs	r3, r3, #18
 8006678:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	4a6a      	ldr	r2, [pc, #424]	; (8006848 <HAL_I2C_Init+0x274>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d802      	bhi.n	80066a8 <HAL_I2C_Init+0xd4>
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	3301      	adds	r3, #1
 80066a6:	e009      	b.n	80066bc <HAL_I2C_Init+0xe8>
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066ae:	fb02 f303 	mul.w	r3, r2, r3
 80066b2:	4a69      	ldr	r2, [pc, #420]	; (8006858 <HAL_I2C_Init+0x284>)
 80066b4:	fba2 2303 	umull	r2, r3, r2, r3
 80066b8:	099b      	lsrs	r3, r3, #6
 80066ba:	3301      	adds	r3, #1
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6812      	ldr	r2, [r2, #0]
 80066c0:	430b      	orrs	r3, r1
 80066c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80066ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	495c      	ldr	r1, [pc, #368]	; (8006848 <HAL_I2C_Init+0x274>)
 80066d8:	428b      	cmp	r3, r1
 80066da:	d819      	bhi.n	8006710 <HAL_I2C_Init+0x13c>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	1e59      	subs	r1, r3, #1
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80066ea:	1c59      	adds	r1, r3, #1
 80066ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80066f0:	400b      	ands	r3, r1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <HAL_I2C_Init+0x138>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	1e59      	subs	r1, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	fbb1 f3f3 	udiv	r3, r1, r3
 8006704:	3301      	adds	r3, #1
 8006706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800670a:	e051      	b.n	80067b0 <HAL_I2C_Init+0x1dc>
 800670c:	2304      	movs	r3, #4
 800670e:	e04f      	b.n	80067b0 <HAL_I2C_Init+0x1dc>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d111      	bne.n	800673c <HAL_I2C_Init+0x168>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	1e58      	subs	r0, r3, #1
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6859      	ldr	r1, [r3, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	440b      	add	r3, r1
 8006726:	fbb0 f3f3 	udiv	r3, r0, r3
 800672a:	3301      	adds	r3, #1
 800672c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006730:	2b00      	cmp	r3, #0
 8006732:	bf0c      	ite	eq
 8006734:	2301      	moveq	r3, #1
 8006736:	2300      	movne	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	e012      	b.n	8006762 <HAL_I2C_Init+0x18e>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	1e58      	subs	r0, r3, #1
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6859      	ldr	r1, [r3, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	440b      	add	r3, r1
 800674a:	0099      	lsls	r1, r3, #2
 800674c:	440b      	add	r3, r1
 800674e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006752:	3301      	adds	r3, #1
 8006754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006758:	2b00      	cmp	r3, #0
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <HAL_I2C_Init+0x196>
 8006766:	2301      	movs	r3, #1
 8006768:	e022      	b.n	80067b0 <HAL_I2C_Init+0x1dc>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10e      	bne.n	8006790 <HAL_I2C_Init+0x1bc>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	1e58      	subs	r0, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6859      	ldr	r1, [r3, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	440b      	add	r3, r1
 8006780:	fbb0 f3f3 	udiv	r3, r0, r3
 8006784:	3301      	adds	r3, #1
 8006786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800678a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800678e:	e00f      	b.n	80067b0 <HAL_I2C_Init+0x1dc>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	1e58      	subs	r0, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6859      	ldr	r1, [r3, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	440b      	add	r3, r1
 800679e:	0099      	lsls	r1, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067a6:	3301      	adds	r3, #1
 80067a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	6809      	ldr	r1, [r1, #0]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69da      	ldr	r2, [r3, #28]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	431a      	orrs	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80067de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	6911      	ldr	r1, [r2, #16]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	68d2      	ldr	r2, [r2, #12]
 80067ea:	4311      	orrs	r1, r2
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6812      	ldr	r2, [r2, #0]
 80067f0:	430b      	orrs	r3, r1
 80067f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	695a      	ldr	r2, [r3, #20]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	000186a0 	.word	0x000186a0
 800684c:	001e847f 	.word	0x001e847f
 8006850:	003d08ff 	.word	0x003d08ff
 8006854:	431bde83 	.word	0x431bde83
 8006858:	10624dd3 	.word	0x10624dd3

0800685c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	607a      	str	r2, [r7, #4]
 8006866:	461a      	mov	r2, r3
 8006868:	460b      	mov	r3, r1
 800686a:	817b      	strh	r3, [r7, #10]
 800686c:	4613      	mov	r3, r2
 800686e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b20      	cmp	r3, #32
 800687e:	f040 8085 	bne.w	800698c <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006882:	4b46      	ldr	r3, [pc, #280]	; (800699c <HAL_I2C_Master_Transmit_IT+0x140>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	08db      	lsrs	r3, r3, #3
 8006888:	4a45      	ldr	r2, [pc, #276]	; (80069a0 <HAL_I2C_Master_Transmit_IT+0x144>)
 800688a:	fba2 2303 	umull	r2, r3, r2, r3
 800688e:	0a1a      	lsrs	r2, r3, #8
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	009a      	lsls	r2, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	3b01      	subs	r3, #1
 80068a0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d116      	bne.n	80068d6 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	f043 0220 	orr.w	r2, r3, #32
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e05b      	b.n	800698e <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d0db      	beq.n	800689c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d101      	bne.n	80068f2 <HAL_I2C_Master_Transmit_IT+0x96>
 80068ee:	2302      	movs	r3, #2
 80068f0:	e04d      	b.n	800698e <HAL_I2C_Master_Transmit_IT+0x132>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b01      	cmp	r3, #1
 8006906:	d007      	beq.n	8006918 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006926:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2221      	movs	r2, #33	; 0x21
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2210      	movs	r2, #16
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	893a      	ldrh	r2, [r7, #8]
 8006948:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4a13      	ldr	r2, [pc, #76]	; (80069a4 <HAL_I2C_Master_Transmit_IT+0x148>)
 8006958:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800695a:	897a      	ldrh	r2, [r7, #10]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006976:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006986:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	e000      	b.n	800698e <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800698c:	2302      	movs	r3, #2
  }
}
 800698e:	4618      	mov	r0, r3
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	20000430 	.word	0x20000430
 80069a0:	14f8b589 	.word	0x14f8b589
 80069a4:	ffff0000 	.word	0xffff0000

080069a8 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	607a      	str	r2, [r7, #4]
 80069b2:	461a      	mov	r2, r3
 80069b4:	460b      	mov	r3, r1
 80069b6:	817b      	strh	r3, [r7, #10]
 80069b8:	4613      	mov	r3, r2
 80069ba:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b20      	cmp	r3, #32
 80069ca:	f040 808d 	bne.w	8006ae8 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80069ce:	4b4a      	ldr	r3, [pc, #296]	; (8006af8 <HAL_I2C_Master_Receive_IT+0x150>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	08db      	lsrs	r3, r3, #3
 80069d4:	4a49      	ldr	r2, [pc, #292]	; (8006afc <HAL_I2C_Master_Receive_IT+0x154>)
 80069d6:	fba2 2303 	umull	r2, r3, r2, r3
 80069da:	0a1a      	lsrs	r2, r3, #8
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	009a      	lsls	r2, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d116      	bne.n	8006a22 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	f043 0220 	orr.w	r2, r3, #32
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e063      	b.n	8006aea <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d0db      	beq.n	80069e8 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d101      	bne.n	8006a3e <HAL_I2C_Master_Receive_IT+0x96>
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	e055      	b.n	8006aea <HAL_I2C_Master_Receive_IT+0x142>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d007      	beq.n	8006a64 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0201 	orr.w	r2, r2, #1
 8006a62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2222      	movs	r2, #34	; 0x22
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2210      	movs	r2, #16
 8006a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	893a      	ldrh	r2, [r7, #8]
 8006a94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4a17      	ldr	r2, [pc, #92]	; (8006b00 <HAL_I2C_Master_Receive_IT+0x158>)
 8006aa4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006aa6:	897a      	ldrh	r2, [r7, #10]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006ac2:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ad2:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ae2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	e000      	b.n	8006aea <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8006ae8:	2302      	movs	r3, #2
  }
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	371c      	adds	r7, #28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	20000430 	.word	0x20000430
 8006afc:	14f8b589 	.word	0x14f8b589
 8006b00:	ffff0000 	.word	0xffff0000

08006b04 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b24:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b2c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
 8006b30:	2b10      	cmp	r3, #16
 8006b32:	d003      	beq.n	8006b3c <HAL_I2C_EV_IRQHandler+0x38>
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	2b40      	cmp	r3, #64	; 0x40
 8006b38:	f040 80c1 	bne.w	8006cbe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10d      	bne.n	8006b72 <HAL_I2C_EV_IRQHandler+0x6e>
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006b5c:	d003      	beq.n	8006b66 <HAL_I2C_EV_IRQHandler+0x62>
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006b64:	d101      	bne.n	8006b6a <HAL_I2C_EV_IRQHandler+0x66>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <HAL_I2C_EV_IRQHandler+0x68>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	f000 8132 	beq.w	8006dd6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00c      	beq.n	8006b96 <HAL_I2C_EV_IRQHandler+0x92>
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	0a5b      	lsrs	r3, r3, #9
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d006      	beq.n	8006b96 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 fc7b 	bl	8008484 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fd83 	bl	800769a <I2C_Master_SB>
 8006b94:	e092      	b.n	8006cbc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	08db      	lsrs	r3, r3, #3
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <HAL_I2C_EV_IRQHandler+0xb2>
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	0a5b      	lsrs	r3, r3, #9
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fdf9 	bl	80077a6 <I2C_Master_ADD10>
 8006bb4:	e082      	b.n	8006cbc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	085b      	lsrs	r3, r3, #1
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d009      	beq.n	8006bd6 <HAL_I2C_EV_IRQHandler+0xd2>
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	0a5b      	lsrs	r3, r3, #9
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fe13 	bl	80077fa <I2C_Master_ADDR>
 8006bd4:	e072      	b.n	8006cbc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	089b      	lsrs	r3, r3, #2
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d03b      	beq.n	8006c5a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bf0:	f000 80f3 	beq.w	8006dda <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	09db      	lsrs	r3, r3, #7
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00f      	beq.n	8006c20 <HAL_I2C_EV_IRQHandler+0x11c>
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	0a9b      	lsrs	r3, r3, #10
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d009      	beq.n	8006c20 <HAL_I2C_EV_IRQHandler+0x11c>
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	089b      	lsrs	r3, r3, #2
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d103      	bne.n	8006c20 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f9f3 	bl	8007004 <I2C_MasterTransmit_TXE>
 8006c1e:	e04d      	b.n	8006cbc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	089b      	lsrs	r3, r3, #2
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 80d6 	beq.w	8006dda <HAL_I2C_EV_IRQHandler+0x2d6>
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	0a5b      	lsrs	r3, r3, #9
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 80cf 	beq.w	8006dda <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006c3c:	7bbb      	ldrb	r3, [r7, #14]
 8006c3e:	2b21      	cmp	r3, #33	; 0x21
 8006c40:	d103      	bne.n	8006c4a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fa7a 	bl	800713c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c48:	e0c7      	b.n	8006dda <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	2b40      	cmp	r3, #64	; 0x40
 8006c4e:	f040 80c4 	bne.w	8006dda <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fae8 	bl	8007228 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c58:	e0bf      	b.n	8006dda <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c68:	f000 80b7 	beq.w	8006dda <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	099b      	lsrs	r3, r3, #6
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00f      	beq.n	8006c98 <HAL_I2C_EV_IRQHandler+0x194>
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	0a9b      	lsrs	r3, r3, #10
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d009      	beq.n	8006c98 <HAL_I2C_EV_IRQHandler+0x194>
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	089b      	lsrs	r3, r3, #2
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d103      	bne.n	8006c98 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fb5d 	bl	8007350 <I2C_MasterReceive_RXNE>
 8006c96:	e011      	b.n	8006cbc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	089b      	lsrs	r3, r3, #2
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 809a 	beq.w	8006dda <HAL_I2C_EV_IRQHandler+0x2d6>
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	0a5b      	lsrs	r3, r3, #9
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 8093 	beq.w	8006dda <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fc06 	bl	80074c6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cba:	e08e      	b.n	8006dda <HAL_I2C_EV_IRQHandler+0x2d6>
 8006cbc:	e08d      	b.n	8006dda <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d004      	beq.n	8006cd0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	61fb      	str	r3, [r7, #28]
 8006cce:	e007      	b.n	8006ce0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	085b      	lsrs	r3, r3, #1
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d012      	beq.n	8006d12 <HAL_I2C_EV_IRQHandler+0x20e>
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	0a5b      	lsrs	r3, r3, #9
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00c      	beq.n	8006d12 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006d08:	69b9      	ldr	r1, [r7, #24]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 ffc4 	bl	8007c98 <I2C_Slave_ADDR>
 8006d10:	e066      	b.n	8006de0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	091b      	lsrs	r3, r3, #4
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <HAL_I2C_EV_IRQHandler+0x22e>
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	0a5b      	lsrs	r3, r3, #9
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fffe 	bl	8007d2c <I2C_Slave_STOPF>
 8006d30:	e056      	b.n	8006de0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	2b21      	cmp	r3, #33	; 0x21
 8006d36:	d002      	beq.n	8006d3e <HAL_I2C_EV_IRQHandler+0x23a>
 8006d38:	7bbb      	ldrb	r3, [r7, #14]
 8006d3a:	2b29      	cmp	r3, #41	; 0x29
 8006d3c:	d125      	bne.n	8006d8a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	09db      	lsrs	r3, r3, #7
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00f      	beq.n	8006d6a <HAL_I2C_EV_IRQHandler+0x266>
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	0a9b      	lsrs	r3, r3, #10
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d009      	beq.n	8006d6a <HAL_I2C_EV_IRQHandler+0x266>
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	089b      	lsrs	r3, r3, #2
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d103      	bne.n	8006d6a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 feda 	bl	8007b1c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d68:	e039      	b.n	8006dde <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	089b      	lsrs	r3, r3, #2
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d033      	beq.n	8006dde <HAL_I2C_EV_IRQHandler+0x2da>
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	0a5b      	lsrs	r3, r3, #9
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d02d      	beq.n	8006dde <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 ff07 	bl	8007b96 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d88:	e029      	b.n	8006dde <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	099b      	lsrs	r3, r3, #6
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00f      	beq.n	8006db6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	0a9b      	lsrs	r3, r3, #10
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	089b      	lsrs	r3, r3, #2
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d103      	bne.n	8006db6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 ff12 	bl	8007bd8 <I2C_SlaveReceive_RXNE>
 8006db4:	e014      	b.n	8006de0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	089b      	lsrs	r3, r3, #2
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00e      	beq.n	8006de0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	0a5b      	lsrs	r3, r3, #9
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d008      	beq.n	8006de0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 ff40 	bl	8007c54 <I2C_SlaveReceive_BTF>
 8006dd4:	e004      	b.n	8006de0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006dd6:	bf00      	nop
 8006dd8:	e002      	b.n	8006de0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dda:	bf00      	nop
 8006ddc:	e000      	b.n	8006de0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006dde:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006de0:	3720      	adds	r7, #32
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b08a      	sub	sp, #40	; 0x28
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e08:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	0a1b      	lsrs	r3, r3, #8
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00e      	beq.n	8006e34 <HAL_I2C_ER_IRQHandler+0x4e>
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	0a1b      	lsrs	r3, r3, #8
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d008      	beq.n	8006e34 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	f043 0301 	orr.w	r3, r3, #1
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e32:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	0a5b      	lsrs	r3, r3, #9
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00e      	beq.n	8006e5e <HAL_I2C_ER_IRQHandler+0x78>
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	0a1b      	lsrs	r3, r3, #8
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d008      	beq.n	8006e5e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	f043 0302 	orr.w	r3, r3, #2
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006e5c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	0a9b      	lsrs	r3, r3, #10
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d03f      	beq.n	8006eea <HAL_I2C_ER_IRQHandler+0x104>
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	0a1b      	lsrs	r3, r3, #8
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d039      	beq.n	8006eea <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006e76:	7efb      	ldrb	r3, [r7, #27]
 8006e78:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e88:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006e90:	7ebb      	ldrb	r3, [r7, #26]
 8006e92:	2b20      	cmp	r3, #32
 8006e94:	d112      	bne.n	8006ebc <HAL_I2C_ER_IRQHandler+0xd6>
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10f      	bne.n	8006ebc <HAL_I2C_ER_IRQHandler+0xd6>
 8006e9c:	7cfb      	ldrb	r3, [r7, #19]
 8006e9e:	2b21      	cmp	r3, #33	; 0x21
 8006ea0:	d008      	beq.n	8006eb4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006ea2:	7cfb      	ldrb	r3, [r7, #19]
 8006ea4:	2b29      	cmp	r3, #41	; 0x29
 8006ea6:	d005      	beq.n	8006eb4 <HAL_I2C_ER_IRQHandler+0xce>
 8006ea8:	7cfb      	ldrb	r3, [r7, #19]
 8006eaa:	2b28      	cmp	r3, #40	; 0x28
 8006eac:	d106      	bne.n	8006ebc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b21      	cmp	r3, #33	; 0x21
 8006eb2:	d103      	bne.n	8006ebc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f001 f869 	bl	8007f8c <I2C_Slave_AF>
 8006eba:	e016      	b.n	8006eea <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ec4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	f043 0304 	orr.w	r3, r3, #4
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006ece:	7efb      	ldrb	r3, [r7, #27]
 8006ed0:	2b10      	cmp	r3, #16
 8006ed2:	d002      	beq.n	8006eda <HAL_I2C_ER_IRQHandler+0xf4>
 8006ed4:	7efb      	ldrb	r3, [r7, #27]
 8006ed6:	2b40      	cmp	r3, #64	; 0x40
 8006ed8:	d107      	bne.n	8006eea <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ee8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	0adb      	lsrs	r3, r3, #11
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00e      	beq.n	8006f14 <HAL_I2C_ER_IRQHandler+0x12e>
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	0a1b      	lsrs	r3, r3, #8
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d008      	beq.n	8006f14 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	f043 0308 	orr.w	r3, r3, #8
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006f12:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d008      	beq.n	8006f2c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	431a      	orrs	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 f8a0 	bl	800806c <I2C_ITError>
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	3728      	adds	r7, #40	; 0x28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	70fb      	strb	r3, [r7, #3]
 8006f90:	4613      	mov	r3, r2
 8006f92:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007012:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800701a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007026:	2b00      	cmp	r3, #0
 8007028:	d150      	bne.n	80070cc <I2C_MasterTransmit_TXE+0xc8>
 800702a:	7bfb      	ldrb	r3, [r7, #15]
 800702c:	2b21      	cmp	r3, #33	; 0x21
 800702e:	d14d      	bne.n	80070cc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2b08      	cmp	r3, #8
 8007034:	d01d      	beq.n	8007072 <I2C_MasterTransmit_TXE+0x6e>
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2b20      	cmp	r3, #32
 800703a:	d01a      	beq.n	8007072 <I2C_MasterTransmit_TXE+0x6e>
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007042:	d016      	beq.n	8007072 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007052:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2211      	movs	r2, #17
 8007058:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff ff62 	bl	8006f34 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007070:	e060      	b.n	8007134 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007080:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007090:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2220      	movs	r2, #32
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b40      	cmp	r3, #64	; 0x40
 80070aa:	d107      	bne.n	80070bc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7ff ff7d 	bl	8006fb4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80070ba:	e03b      	b.n	8007134 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff ff35 	bl	8006f34 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80070ca:	e033      	b.n	8007134 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
 80070ce:	2b21      	cmp	r3, #33	; 0x21
 80070d0:	d005      	beq.n	80070de <I2C_MasterTransmit_TXE+0xda>
 80070d2:	7bbb      	ldrb	r3, [r7, #14]
 80070d4:	2b40      	cmp	r3, #64	; 0x40
 80070d6:	d12d      	bne.n	8007134 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	2b22      	cmp	r3, #34	; 0x22
 80070dc:	d12a      	bne.n	8007134 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d108      	bne.n	80070fa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070f6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80070f8:	e01c      	b.n	8007134 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b40      	cmp	r3, #64	; 0x40
 8007104:	d103      	bne.n	800710e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f88e 	bl	8007228 <I2C_MemoryTransmit_TXE_BTF>
}
 800710c:	e012      	b.n	8007134 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	781a      	ldrb	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007132:	e7ff      	b.n	8007134 <I2C_MasterTransmit_TXE+0x130>
 8007134:	bf00      	nop
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b21      	cmp	r3, #33	; 0x21
 8007154:	d164      	bne.n	8007220 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715a:	b29b      	uxth	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d012      	beq.n	8007186 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	781a      	ldrb	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717a:	b29b      	uxth	r3, r3
 800717c:	3b01      	subs	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007184:	e04c      	b.n	8007220 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b08      	cmp	r3, #8
 800718a:	d01d      	beq.n	80071c8 <I2C_MasterTransmit_BTF+0x8c>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b20      	cmp	r3, #32
 8007190:	d01a      	beq.n	80071c8 <I2C_MasterTransmit_BTF+0x8c>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007198:	d016      	beq.n	80071c8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071a8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2211      	movs	r2, #17
 80071ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff feb7 	bl	8006f34 <HAL_I2C_MasterTxCpltCallback>
}
 80071c6:	e02b      	b.n	8007220 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071d6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2220      	movs	r2, #32
 80071f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b40      	cmp	r3, #64	; 0x40
 8007200:	d107      	bne.n	8007212 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff fed2 	bl	8006fb4 <HAL_I2C_MemTxCpltCallback>
}
 8007210:	e006      	b.n	8007220 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff fe8a 	bl	8006f34 <HAL_I2C_MasterTxCpltCallback>
}
 8007220:	bf00      	nop
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007236:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800723c:	2b00      	cmp	r3, #0
 800723e:	d11d      	bne.n	800727c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007244:	2b01      	cmp	r3, #1
 8007246:	d10b      	bne.n	8007260 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800724c:	b2da      	uxtb	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007258:	1c9a      	adds	r2, r3, #2
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800725e:	e073      	b.n	8007348 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007264:	b29b      	uxth	r3, r3
 8007266:	121b      	asrs	r3, r3, #8
 8007268:	b2da      	uxtb	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	651a      	str	r2, [r3, #80]	; 0x50
}
 800727a:	e065      	b.n	8007348 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007280:	2b01      	cmp	r3, #1
 8007282:	d10b      	bne.n	800729c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007288:	b2da      	uxtb	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	651a      	str	r2, [r3, #80]	; 0x50
}
 800729a:	e055      	b.n	8007348 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d151      	bne.n	8007348 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	2b22      	cmp	r3, #34	; 0x22
 80072a8:	d10d      	bne.n	80072c6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072b8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80072c4:	e040      	b.n	8007348 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d015      	beq.n	80072fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
 80072d2:	2b21      	cmp	r3, #33	; 0x21
 80072d4:	d112      	bne.n	80072fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	781a      	ldrb	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80072fa:	e025      	b.n	8007348 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007300:	b29b      	uxth	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d120      	bne.n	8007348 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	2b21      	cmp	r3, #33	; 0x21
 800730a:	d11d      	bne.n	8007348 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800731a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800732a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2220      	movs	r2, #32
 8007336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7ff fe36 	bl	8006fb4 <HAL_I2C_MemTxCpltCallback>
}
 8007348:	bf00      	nop
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b22      	cmp	r3, #34	; 0x22
 8007362:	f040 80ac 	bne.w	80074be <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736a:	b29b      	uxth	r3, r3
 800736c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b03      	cmp	r3, #3
 8007372:	d921      	bls.n	80073b8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691a      	ldr	r2, [r3, #16]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007390:	b29b      	uxth	r3, r3
 8007392:	3b01      	subs	r3, #1
 8007394:	b29a      	uxth	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739e:	b29b      	uxth	r3, r3
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	f040 808c 	bne.w	80074be <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80073b6:	e082      	b.n	80074be <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d075      	beq.n	80074ac <I2C_MasterReceive_RXNE+0x15c>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d002      	beq.n	80073cc <I2C_MasterReceive_RXNE+0x7c>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d16f      	bne.n	80074ac <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 f827 	bl	8008420 <I2C_WaitOnSTOPRequestThroughIT>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d142      	bne.n	800745e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073f6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	691a      	ldr	r2, [r3, #16]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007414:	b29b      	uxth	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2220      	movs	r2, #32
 8007422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b40      	cmp	r3, #64	; 0x40
 8007430:	d10a      	bne.n	8007448 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff fdc1 	bl	8006fc8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007446:	e03a      	b.n	80074be <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2212      	movs	r2, #18
 8007454:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff fd76 	bl	8006f48 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800745c:	e02f      	b.n	80074be <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800746c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	691a      	ldr	r2, [r3, #16]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	b2d2      	uxtb	r2, r2
 800747a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	1c5a      	adds	r2, r3, #1
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800748a:	b29b      	uxth	r3, r3
 800748c:	3b01      	subs	r3, #1
 800748e:	b29a      	uxth	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff fd99 	bl	8006fdc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80074aa:	e008      	b.n	80074be <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074ba:	605a      	str	r2, [r3, #4]
}
 80074bc:	e7ff      	b.n	80074be <I2C_MasterReceive_RXNE+0x16e>
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d8:	b29b      	uxth	r3, r3
 80074da:	2b04      	cmp	r3, #4
 80074dc:	d11b      	bne.n	8007516 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074ec:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	691a      	ldr	r2, [r3, #16]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f8:	b2d2      	uxtb	r2, r2
 80074fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750a:	b29b      	uxth	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007514:	e0bd      	b.n	8007692 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751a:	b29b      	uxth	r3, r3
 800751c:	2b03      	cmp	r3, #3
 800751e:	d129      	bne.n	8007574 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800752e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b04      	cmp	r3, #4
 8007534:	d00a      	beq.n	800754c <I2C_MasterReceive_BTF+0x86>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b02      	cmp	r3, #2
 800753a:	d007      	beq.n	800754c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800754a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	691a      	ldr	r2, [r3, #16]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	b2d2      	uxtb	r2, r2
 8007558:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007568:	b29b      	uxth	r3, r3
 800756a:	3b01      	subs	r3, #1
 800756c:	b29a      	uxth	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007572:	e08e      	b.n	8007692 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007578:	b29b      	uxth	r3, r3
 800757a:	2b02      	cmp	r3, #2
 800757c:	d176      	bne.n	800766c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d002      	beq.n	800758a <I2C_MasterReceive_BTF+0xc4>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b10      	cmp	r3, #16
 8007588:	d108      	bne.n	800759c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	e019      	b.n	80075d0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d002      	beq.n	80075a8 <I2C_MasterReceive_BTF+0xe2>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d108      	bne.n	80075ba <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	e00a      	b.n	80075d0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b10      	cmp	r3, #16
 80075be:	d007      	beq.n	80075d0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	691a      	ldr	r2, [r3, #16]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	b2d2      	uxtb	r2, r2
 80075dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	3b01      	subs	r3, #1
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	691a      	ldr	r2, [r3, #16]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	b2d2      	uxtb	r2, r2
 8007602:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	1c5a      	adds	r2, r3, #1
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007612:	b29b      	uxth	r3, r3
 8007614:	3b01      	subs	r3, #1
 8007616:	b29a      	uxth	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800762a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2220      	movs	r2, #32
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b40      	cmp	r3, #64	; 0x40
 800763e:	d10a      	bne.n	8007656 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff fcba 	bl	8006fc8 <HAL_I2C_MemRxCpltCallback>
}
 8007654:	e01d      	b.n	8007692 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2212      	movs	r2, #18
 8007662:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7ff fc6f 	bl	8006f48 <HAL_I2C_MasterRxCpltCallback>
}
 800766a:	e012      	b.n	8007692 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	691a      	ldr	r2, [r3, #16]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	b2d2      	uxtb	r2, r2
 8007678:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	b29a      	uxth	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007692:	bf00      	nop
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b40      	cmp	r3, #64	; 0x40
 80076ac:	d117      	bne.n	80076de <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d109      	bne.n	80076ca <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	461a      	mov	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076c6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80076c8:	e067      	b.n	800779a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	f043 0301 	orr.w	r3, r3, #1
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	611a      	str	r2, [r3, #16]
}
 80076dc:	e05d      	b.n	800779a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076e6:	d133      	bne.n	8007750 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b21      	cmp	r3, #33	; 0x21
 80076f2:	d109      	bne.n	8007708 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	461a      	mov	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007704:	611a      	str	r2, [r3, #16]
 8007706:	e008      	b.n	800771a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770c:	b2db      	uxtb	r3, r3
 800770e:	f043 0301 	orr.w	r3, r3, #1
 8007712:	b2da      	uxtb	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771e:	2b00      	cmp	r3, #0
 8007720:	d004      	beq.n	800772c <I2C_Master_SB+0x92>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d108      	bne.n	800773e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007730:	2b00      	cmp	r3, #0
 8007732:	d032      	beq.n	800779a <I2C_Master_SB+0x100>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773a:	2b00      	cmp	r3, #0
 800773c:	d02d      	beq.n	800779a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800774c:	605a      	str	r2, [r3, #4]
}
 800774e:	e024      	b.n	800779a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10e      	bne.n	8007776 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800775c:	b29b      	uxth	r3, r3
 800775e:	11db      	asrs	r3, r3, #7
 8007760:	b2db      	uxtb	r3, r3
 8007762:	f003 0306 	and.w	r3, r3, #6
 8007766:	b2db      	uxtb	r3, r3
 8007768:	f063 030f 	orn	r3, r3, #15
 800776c:	b2da      	uxtb	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	611a      	str	r2, [r3, #16]
}
 8007774:	e011      	b.n	800779a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800777a:	2b01      	cmp	r3, #1
 800777c:	d10d      	bne.n	800779a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007782:	b29b      	uxth	r3, r3
 8007784:	11db      	asrs	r3, r3, #7
 8007786:	b2db      	uxtb	r3, r3
 8007788:	f003 0306 	and.w	r3, r3, #6
 800778c:	b2db      	uxtb	r3, r3
 800778e:	f063 030e 	orn	r3, r3, #14
 8007792:	b2da      	uxtb	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	611a      	str	r2, [r3, #16]
}
 800779a:	bf00      	nop
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d004      	beq.n	80077cc <I2C_Master_ADD10+0x26>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d108      	bne.n	80077de <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00c      	beq.n	80077ee <I2C_Master_ADD10+0x48>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d007      	beq.n	80077ee <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077ec:	605a      	str	r2, [r3, #4]
  }
}
 80077ee:	bf00      	nop
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b091      	sub	sp, #68	; 0x44
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007808:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007810:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007816:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b22      	cmp	r3, #34	; 0x22
 8007822:	f040 8169 	bne.w	8007af8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10f      	bne.n	800784e <I2C_Master_ADDR+0x54>
 800782e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007832:	2b40      	cmp	r3, #64	; 0x40
 8007834:	d10b      	bne.n	800784e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007836:	2300      	movs	r3, #0
 8007838:	633b      	str	r3, [r7, #48]	; 0x30
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	633b      	str	r3, [r7, #48]	; 0x30
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	633b      	str	r3, [r7, #48]	; 0x30
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	e160      	b.n	8007b10 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007852:	2b00      	cmp	r3, #0
 8007854:	d11d      	bne.n	8007892 <I2C_Master_ADDR+0x98>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800785e:	d118      	bne.n	8007892 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007860:	2300      	movs	r3, #0
 8007862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007874:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007884:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	651a      	str	r2, [r3, #80]	; 0x50
 8007890:	e13e      	b.n	8007b10 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007896:	b29b      	uxth	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d113      	bne.n	80078c4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800789c:	2300      	movs	r3, #0
 800789e:	62bb      	str	r3, [r7, #40]	; 0x28
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	e115      	b.n	8007af0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	f040 808a 	bne.w	80079e4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80078d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078d6:	d137      	bne.n	8007948 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078e6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078f6:	d113      	bne.n	8007920 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007906:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007908:	2300      	movs	r3, #0
 800790a:	627b      	str	r3, [r7, #36]	; 0x24
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	627b      	str	r3, [r7, #36]	; 0x24
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	e0e7      	b.n	8007af0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007920:	2300      	movs	r3, #0
 8007922:	623b      	str	r3, [r7, #32]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	623b      	str	r3, [r7, #32]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	623b      	str	r3, [r7, #32]
 8007934:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	e0d3      	b.n	8007af0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794a:	2b08      	cmp	r3, #8
 800794c:	d02e      	beq.n	80079ac <I2C_Master_ADDR+0x1b2>
 800794e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007950:	2b20      	cmp	r3, #32
 8007952:	d02b      	beq.n	80079ac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007956:	2b12      	cmp	r3, #18
 8007958:	d102      	bne.n	8007960 <I2C_Master_ADDR+0x166>
 800795a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795c:	2b01      	cmp	r3, #1
 800795e:	d125      	bne.n	80079ac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007962:	2b04      	cmp	r3, #4
 8007964:	d00e      	beq.n	8007984 <I2C_Master_ADDR+0x18a>
 8007966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007968:	2b02      	cmp	r3, #2
 800796a:	d00b      	beq.n	8007984 <I2C_Master_ADDR+0x18a>
 800796c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796e:	2b10      	cmp	r3, #16
 8007970:	d008      	beq.n	8007984 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	e007      	b.n	8007994 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007992:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007994:	2300      	movs	r3, #0
 8007996:	61fb      	str	r3, [r7, #28]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	61fb      	str	r3, [r7, #28]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	61fb      	str	r3, [r7, #28]
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	e0a1      	b.n	8007af0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079bc:	2300      	movs	r3, #0
 80079be:	61bb      	str	r3, [r7, #24]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	61bb      	str	r3, [r7, #24]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	61bb      	str	r3, [r7, #24]
 80079d0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	e085      	b.n	8007af0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d14d      	bne.n	8007a8a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80079ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d016      	beq.n	8007a22 <I2C_Master_ADDR+0x228>
 80079f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d013      	beq.n	8007a22 <I2C_Master_ADDR+0x228>
 80079fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fc:	2b10      	cmp	r3, #16
 80079fe:	d010      	beq.n	8007a22 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a0e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	e007      	b.n	8007a32 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a30:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a40:	d117      	bne.n	8007a72 <I2C_Master_ADDR+0x278>
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a48:	d00b      	beq.n	8007a62 <I2C_Master_ADDR+0x268>
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d008      	beq.n	8007a62 <I2C_Master_ADDR+0x268>
 8007a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a52:	2b08      	cmp	r3, #8
 8007a54:	d005      	beq.n	8007a62 <I2C_Master_ADDR+0x268>
 8007a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a58:	2b10      	cmp	r3, #16
 8007a5a:	d002      	beq.n	8007a62 <I2C_Master_ADDR+0x268>
 8007a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5e:	2b20      	cmp	r3, #32
 8007a60:	d107      	bne.n	8007a72 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a70:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a72:	2300      	movs	r3, #0
 8007a74:	617b      	str	r3, [r7, #20]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	617b      	str	r3, [r7, #20]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	617b      	str	r3, [r7, #20]
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	e032      	b.n	8007af0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a98:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aa8:	d117      	bne.n	8007ada <I2C_Master_ADDR+0x2e0>
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ab0:	d00b      	beq.n	8007aca <I2C_Master_ADDR+0x2d0>
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d008      	beq.n	8007aca <I2C_Master_ADDR+0x2d0>
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aba:	2b08      	cmp	r3, #8
 8007abc:	d005      	beq.n	8007aca <I2C_Master_ADDR+0x2d0>
 8007abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac0:	2b10      	cmp	r3, #16
 8007ac2:	d002      	beq.n	8007aca <I2C_Master_ADDR+0x2d0>
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac6:	2b20      	cmp	r3, #32
 8007ac8:	d107      	bne.n	8007ada <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ad8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ada:	2300      	movs	r3, #0
 8007adc:	613b      	str	r3, [r7, #16]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	613b      	str	r3, [r7, #16]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	613b      	str	r3, [r7, #16]
 8007aee:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007af6:	e00b      	b.n	8007b10 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007af8:	2300      	movs	r3, #0
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
}
 8007b0e:	e7ff      	b.n	8007b10 <I2C_Master_ADDR+0x316>
 8007b10:	bf00      	nop
 8007b12:	3744      	adds	r7, #68	; 0x44
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b2a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d02b      	beq.n	8007b8e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3a:	781a      	ldrb	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	3b01      	subs	r3, #1
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d114      	bne.n	8007b8e <I2C_SlaveTransmit_TXE+0x72>
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	2b29      	cmp	r3, #41	; 0x29
 8007b68:	d111      	bne.n	8007b8e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b78:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2221      	movs	r2, #33	; 0x21
 8007b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2228      	movs	r2, #40	; 0x28
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7ff f9e7 	bl	8006f5c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007b8e:	bf00      	nop
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d011      	beq.n	8007bcc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	781a      	ldrb	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007be6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d02c      	beq.n	8007c4c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	691a      	ldr	r2, [r3, #16]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	b2d2      	uxtb	r2, r2
 8007bfe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	1c5a      	adds	r2, r3, #1
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	3b01      	subs	r3, #1
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d114      	bne.n	8007c4c <I2C_SlaveReceive_RXNE+0x74>
 8007c22:	7bfb      	ldrb	r3, [r7, #15]
 8007c24:	2b2a      	cmp	r3, #42	; 0x2a
 8007c26:	d111      	bne.n	8007c4c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c36:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2222      	movs	r2, #34	; 0x22
 8007c3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2228      	movs	r2, #40	; 0x28
 8007c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7ff f992 	bl	8006f70 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007c4c:	bf00      	nop
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d012      	beq.n	8007c8c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	691a      	ldr	r2, [r3, #16]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c70:	b2d2      	uxtb	r2, r2
 8007c72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	3b01      	subs	r3, #1
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007cb2:	2b28      	cmp	r3, #40	; 0x28
 8007cb4:	d127      	bne.n	8007d06 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cc4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	089b      	lsrs	r3, r3, #2
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	09db      	lsrs	r3, r3, #7
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d103      	bne.n	8007cea <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	81bb      	strh	r3, [r7, #12]
 8007ce8:	e002      	b.n	8007cf0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007cf8:	89ba      	ldrh	r2, [r7, #12]
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff f940 	bl	8006f84 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007d04:	e00e      	b.n	8007d24 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d06:	2300      	movs	r3, #0
 8007d08:	60bb      	str	r3, [r7, #8]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	60bb      	str	r3, [r7, #8]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	60bb      	str	r3, [r7, #8]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007d24:	bf00      	nop
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d3a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d4a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60bb      	str	r3, [r7, #8]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	60bb      	str	r3, [r7, #8]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0201 	orr.w	r2, r2, #1
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d78:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d88:	d172      	bne.n	8007e70 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
 8007d8c:	2b22      	cmp	r3, #34	; 0x22
 8007d8e:	d002      	beq.n	8007d96 <I2C_Slave_STOPF+0x6a>
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	2b2a      	cmp	r3, #42	; 0x2a
 8007d94:	d135      	bne.n	8007e02 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d005      	beq.n	8007dba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	f043 0204 	orr.w	r2, r3, #4
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dc8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe f92a 	bl	8006028 <HAL_DMA_GetState>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d049      	beq.n	8007e6e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dde:	4a69      	ldr	r2, [pc, #420]	; (8007f84 <I2C_Slave_STOPF+0x258>)
 8007de0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fd ff72 	bl	8005cd0 <HAL_DMA_Abort_IT>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d03d      	beq.n	8007e6e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e00:	e035      	b.n	8007e6e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d005      	beq.n	8007e26 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	f043 0204 	orr.w	r2, r3, #4
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe f8f4 	bl	8006028 <HAL_DMA_GetState>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d014      	beq.n	8007e70 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4a:	4a4e      	ldr	r2, [pc, #312]	; (8007f84 <I2C_Slave_STOPF+0x258>)
 8007e4c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fd ff3c 	bl	8005cd0 <HAL_DMA_Abort_IT>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d008      	beq.n	8007e70 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e68:	4610      	mov	r0, r2
 8007e6a:	4798      	blx	r3
 8007e6c:	e000      	b.n	8007e70 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e6e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d03e      	beq.n	8007ef8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	f003 0304 	and.w	r3, r3, #4
 8007e84:	2b04      	cmp	r3, #4
 8007e86:	d112      	bne.n	8007eae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	691a      	ldr	r2, [r3, #16]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e92:	b2d2      	uxtb	r2, r2
 8007e94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	1c5a      	adds	r2, r3, #1
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb8:	2b40      	cmp	r3, #64	; 0x40
 8007eba:	d112      	bne.n	8007ee2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	691a      	ldr	r2, [r3, #16]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec6:	b2d2      	uxtb	r2, r2
 8007ec8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	3b01      	subs	r3, #1
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d005      	beq.n	8007ef8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef0:	f043 0204 	orr.w	r2, r3, #4
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d003      	beq.n	8007f08 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f8b3 	bl	800806c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007f06:	e039      	b.n	8007f7c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f0c:	d109      	bne.n	8007f22 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2228      	movs	r2, #40	; 0x28
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff f827 	bl	8006f70 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b28      	cmp	r3, #40	; 0x28
 8007f2c:	d111      	bne.n	8007f52 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a15      	ldr	r2, [pc, #84]	; (8007f88 <I2C_Slave_STOPF+0x25c>)
 8007f32:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7ff f828 	bl	8006fa0 <HAL_I2C_ListenCpltCallback>
}
 8007f50:	e014      	b.n	8007f7c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f56:	2b22      	cmp	r3, #34	; 0x22
 8007f58:	d002      	beq.n	8007f60 <I2C_Slave_STOPF+0x234>
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
 8007f5c:	2b22      	cmp	r3, #34	; 0x22
 8007f5e:	d10d      	bne.n	8007f7c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2220      	movs	r2, #32
 8007f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fe fffa 	bl	8006f70 <HAL_I2C_SlaveRxCpltCallback>
}
 8007f7c:	bf00      	nop
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	080082d1 	.word	0x080082d1
 8007f88:	ffff0000 	.word	0xffff0000

08007f8c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2b08      	cmp	r3, #8
 8007fa6:	d002      	beq.n	8007fae <I2C_Slave_AF+0x22>
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2b20      	cmp	r3, #32
 8007fac:	d129      	bne.n	8008002 <I2C_Slave_AF+0x76>
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	2b28      	cmp	r3, #40	; 0x28
 8007fb2:	d126      	bne.n	8008002 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a2c      	ldr	r2, [pc, #176]	; (8008068 <I2C_Slave_AF+0xdc>)
 8007fb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007fc8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007fd2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fe2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7fe ffd0 	bl	8006fa0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008000:	e02e      	b.n	8008060 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	2b21      	cmp	r3, #33	; 0x21
 8008006:	d126      	bne.n	8008056 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a17      	ldr	r2, [pc, #92]	; (8008068 <I2C_Slave_AF+0xdc>)
 800800c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2221      	movs	r2, #33	; 0x21
 8008012:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2220      	movs	r2, #32
 8008018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685a      	ldr	r2, [r3, #4]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008032:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800803c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800804c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7fe ff84 	bl	8006f5c <HAL_I2C_SlaveTxCpltCallback>
}
 8008054:	e004      	b.n	8008060 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800805e:	615a      	str	r2, [r3, #20]
}
 8008060:	bf00      	nop
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	ffff0000 	.word	0xffff0000

0800806c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800807a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008082:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008084:	7bbb      	ldrb	r3, [r7, #14]
 8008086:	2b10      	cmp	r3, #16
 8008088:	d002      	beq.n	8008090 <I2C_ITError+0x24>
 800808a:	7bbb      	ldrb	r3, [r7, #14]
 800808c:	2b40      	cmp	r3, #64	; 0x40
 800808e:	d10a      	bne.n	80080a6 <I2C_ITError+0x3a>
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	2b22      	cmp	r3, #34	; 0x22
 8008094:	d107      	bne.n	80080a6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080a4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
 80080a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80080ac:	2b28      	cmp	r3, #40	; 0x28
 80080ae:	d107      	bne.n	80080c0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2228      	movs	r2, #40	; 0x28
 80080ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80080be:	e015      	b.n	80080ec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080ce:	d00a      	beq.n	80080e6 <I2C_ITError+0x7a>
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
 80080d2:	2b60      	cmp	r3, #96	; 0x60
 80080d4:	d007      	beq.n	80080e6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2220      	movs	r2, #32
 80080da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080fa:	d162      	bne.n	80081c2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800810a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b01      	cmp	r3, #1
 8008118:	d020      	beq.n	800815c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800811e:	4a6a      	ldr	r2, [pc, #424]	; (80082c8 <I2C_ITError+0x25c>)
 8008120:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008126:	4618      	mov	r0, r3
 8008128:	f7fd fdd2 	bl	8005cd0 <HAL_DMA_Abort_IT>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 8089 	beq.w	8008246 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0201 	bic.w	r2, r2, #1
 8008142:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2220      	movs	r2, #32
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008156:	4610      	mov	r0, r2
 8008158:	4798      	blx	r3
 800815a:	e074      	b.n	8008246 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008160:	4a59      	ldr	r2, [pc, #356]	; (80082c8 <I2C_ITError+0x25c>)
 8008162:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008168:	4618      	mov	r0, r3
 800816a:	f7fd fdb1 	bl	8005cd0 <HAL_DMA_Abort_IT>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d068      	beq.n	8008246 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817e:	2b40      	cmp	r3, #64	; 0x40
 8008180:	d10b      	bne.n	800819a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	691a      	ldr	r2, [r3, #16]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	b2d2      	uxtb	r2, r2
 800818e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f022 0201 	bic.w	r2, r2, #1
 80081a8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081bc:	4610      	mov	r0, r2
 80081be:	4798      	blx	r3
 80081c0:	e041      	b.n	8008246 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b60      	cmp	r3, #96	; 0x60
 80081cc:	d125      	bne.n	800821a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2220      	movs	r2, #32
 80081d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e6:	2b40      	cmp	r3, #64	; 0x40
 80081e8:	d10b      	bne.n	8008202 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	691a      	ldr	r2, [r3, #16]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	b2d2      	uxtb	r2, r2
 80081f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 0201 	bic.w	r2, r2, #1
 8008210:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7fe feec 	bl	8006ff0 <HAL_I2C_AbortCpltCallback>
 8008218:	e015      	b.n	8008246 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008224:	2b40      	cmp	r3, #64	; 0x40
 8008226:	d10b      	bne.n	8008240 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	691a      	ldr	r2, [r3, #16]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008232:	b2d2      	uxtb	r2, r2
 8008234:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	1c5a      	adds	r2, r3, #1
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7fe fecb 	bl	8006fdc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10e      	bne.n	8008274 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800825c:	2b00      	cmp	r3, #0
 800825e:	d109      	bne.n	8008274 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008266:	2b00      	cmp	r3, #0
 8008268:	d104      	bne.n	8008274 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008270:	2b00      	cmp	r3, #0
 8008272:	d007      	beq.n	8008284 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	685a      	ldr	r2, [r3, #4]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008282:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800828a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008290:	f003 0304 	and.w	r3, r3, #4
 8008294:	2b04      	cmp	r3, #4
 8008296:	d113      	bne.n	80082c0 <I2C_ITError+0x254>
 8008298:	7bfb      	ldrb	r3, [r7, #15]
 800829a:	2b28      	cmp	r3, #40	; 0x28
 800829c:	d110      	bne.n	80082c0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a0a      	ldr	r2, [pc, #40]	; (80082cc <I2C_ITError+0x260>)
 80082a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2220      	movs	r2, #32
 80082ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7fe fe70 	bl	8006fa0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80082c0:	bf00      	nop
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	080082d1 	.word	0x080082d1
 80082cc:	ffff0000 	.word	0xffff0000

080082d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80082ea:	4b4b      	ldr	r3, [pc, #300]	; (8008418 <I2C_DMAAbort+0x148>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	08db      	lsrs	r3, r3, #3
 80082f0:	4a4a      	ldr	r2, [pc, #296]	; (800841c <I2C_DMAAbort+0x14c>)
 80082f2:	fba2 2303 	umull	r2, r3, r2, r3
 80082f6:	0a1a      	lsrs	r2, r3, #8
 80082f8:	4613      	mov	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	00da      	lsls	r2, r3, #3
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d106      	bne.n	8008318 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	f043 0220 	orr.w	r2, r3, #32
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008316:	e00a      	b.n	800832e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	3b01      	subs	r3, #1
 800831c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800832c:	d0ea      	beq.n	8008304 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800833a:	2200      	movs	r2, #0
 800833c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008342:	2b00      	cmp	r3, #0
 8008344:	d003      	beq.n	800834e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834a:	2200      	movs	r2, #0
 800834c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800835c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2200      	movs	r2, #0
 8008362:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008370:	2200      	movs	r2, #0
 8008372:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008378:	2b00      	cmp	r3, #0
 800837a:	d003      	beq.n	8008384 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008380:	2200      	movs	r2, #0
 8008382:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 0201 	bic.w	r2, r2, #1
 8008392:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b60      	cmp	r3, #96	; 0x60
 800839e:	d10e      	bne.n	80083be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2200      	movs	r2, #0
 80083b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80083b6:	6978      	ldr	r0, [r7, #20]
 80083b8:	f7fe fe1a 	bl	8006ff0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80083bc:	e027      	b.n	800840e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80083be:	7cfb      	ldrb	r3, [r7, #19]
 80083c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80083c4:	2b28      	cmp	r3, #40	; 0x28
 80083c6:	d117      	bne.n	80083f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f042 0201 	orr.w	r2, r2, #1
 80083d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	2200      	movs	r2, #0
 80083ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2228      	movs	r2, #40	; 0x28
 80083f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80083f6:	e007      	b.n	8008408 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	2220      	movs	r2, #32
 80083fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008408:	6978      	ldr	r0, [r7, #20]
 800840a:	f7fe fde7 	bl	8006fdc <HAL_I2C_ErrorCallback>
}
 800840e:	bf00      	nop
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20000430 	.word	0x20000430
 800841c:	14f8b589 	.word	0x14f8b589

08008420 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008428:	2300      	movs	r3, #0
 800842a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800842c:	4b13      	ldr	r3, [pc, #76]	; (800847c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	08db      	lsrs	r3, r3, #3
 8008432:	4a13      	ldr	r2, [pc, #76]	; (8008480 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008434:	fba2 2303 	umull	r2, r3, r2, r3
 8008438:	0a1a      	lsrs	r2, r3, #8
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3b01      	subs	r3, #1
 8008446:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d107      	bne.n	800845e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008452:	f043 0220 	orr.w	r2, r3, #32
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e008      	b.n	8008470 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800846c:	d0e9      	beq.n	8008442 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	20000430 	.word	0x20000430
 8008480:	14f8b589 	.word	0x14f8b589

08008484 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008490:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008494:	d103      	bne.n	800849e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800849c:	e007      	b.n	80084ae <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80084a6:	d102      	bne.n	80084ae <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2208      	movs	r2, #8
 80084ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80084ae:	bf00      	nop
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
	...

080084bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e267      	b.n	800899e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d075      	beq.n	80085c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084da:	4b88      	ldr	r3, [pc, #544]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f003 030c 	and.w	r3, r3, #12
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	d00c      	beq.n	8008500 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084e6:	4b85      	ldr	r3, [pc, #532]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084ee:	2b08      	cmp	r3, #8
 80084f0:	d112      	bne.n	8008518 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084f2:	4b82      	ldr	r3, [pc, #520]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084fe:	d10b      	bne.n	8008518 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008500:	4b7e      	ldr	r3, [pc, #504]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d05b      	beq.n	80085c4 <HAL_RCC_OscConfig+0x108>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d157      	bne.n	80085c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e242      	b.n	800899e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008520:	d106      	bne.n	8008530 <HAL_RCC_OscConfig+0x74>
 8008522:	4b76      	ldr	r3, [pc, #472]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a75      	ldr	r2, [pc, #468]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 8008528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800852c:	6013      	str	r3, [r2, #0]
 800852e:	e01d      	b.n	800856c <HAL_RCC_OscConfig+0xb0>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008538:	d10c      	bne.n	8008554 <HAL_RCC_OscConfig+0x98>
 800853a:	4b70      	ldr	r3, [pc, #448]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a6f      	ldr	r2, [pc, #444]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 8008540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	4b6d      	ldr	r3, [pc, #436]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a6c      	ldr	r2, [pc, #432]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 800854c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008550:	6013      	str	r3, [r2, #0]
 8008552:	e00b      	b.n	800856c <HAL_RCC_OscConfig+0xb0>
 8008554:	4b69      	ldr	r3, [pc, #420]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a68      	ldr	r2, [pc, #416]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 800855a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	4b66      	ldr	r3, [pc, #408]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a65      	ldr	r2, [pc, #404]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 8008566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800856a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d013      	beq.n	800859c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008574:	f7fd f918 	bl	80057a8 <HAL_GetTick>
 8008578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800857a:	e008      	b.n	800858e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800857c:	f7fd f914 	bl	80057a8 <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	2b64      	cmp	r3, #100	; 0x64
 8008588:	d901      	bls.n	800858e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e207      	b.n	800899e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800858e:	4b5b      	ldr	r3, [pc, #364]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d0f0      	beq.n	800857c <HAL_RCC_OscConfig+0xc0>
 800859a:	e014      	b.n	80085c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800859c:	f7fd f904 	bl	80057a8 <HAL_GetTick>
 80085a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085a2:	e008      	b.n	80085b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085a4:	f7fd f900 	bl	80057a8 <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	2b64      	cmp	r3, #100	; 0x64
 80085b0:	d901      	bls.n	80085b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e1f3      	b.n	800899e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085b6:	4b51      	ldr	r3, [pc, #324]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1f0      	bne.n	80085a4 <HAL_RCC_OscConfig+0xe8>
 80085c2:	e000      	b.n	80085c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0302 	and.w	r3, r3, #2
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d063      	beq.n	800869a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085d2:	4b4a      	ldr	r3, [pc, #296]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	f003 030c 	and.w	r3, r3, #12
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00b      	beq.n	80085f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085de:	4b47      	ldr	r3, [pc, #284]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085e6:	2b08      	cmp	r3, #8
 80085e8:	d11c      	bne.n	8008624 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085ea:	4b44      	ldr	r3, [pc, #272]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d116      	bne.n	8008624 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085f6:	4b41      	ldr	r3, [pc, #260]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0302 	and.w	r3, r3, #2
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d005      	beq.n	800860e <HAL_RCC_OscConfig+0x152>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d001      	beq.n	800860e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e1c7      	b.n	800899e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800860e:	4b3b      	ldr	r3, [pc, #236]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	00db      	lsls	r3, r3, #3
 800861c:	4937      	ldr	r1, [pc, #220]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 800861e:	4313      	orrs	r3, r2
 8008620:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008622:	e03a      	b.n	800869a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d020      	beq.n	800866e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800862c:	4b34      	ldr	r3, [pc, #208]	; (8008700 <HAL_RCC_OscConfig+0x244>)
 800862e:	2201      	movs	r2, #1
 8008630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008632:	f7fd f8b9 	bl	80057a8 <HAL_GetTick>
 8008636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008638:	e008      	b.n	800864c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800863a:	f7fd f8b5 	bl	80057a8 <HAL_GetTick>
 800863e:	4602      	mov	r2, r0
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	2b02      	cmp	r3, #2
 8008646:	d901      	bls.n	800864c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e1a8      	b.n	800899e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800864c:	4b2b      	ldr	r3, [pc, #172]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0302 	and.w	r3, r3, #2
 8008654:	2b00      	cmp	r3, #0
 8008656:	d0f0      	beq.n	800863a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008658:	4b28      	ldr	r3, [pc, #160]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	00db      	lsls	r3, r3, #3
 8008666:	4925      	ldr	r1, [pc, #148]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 8008668:	4313      	orrs	r3, r2
 800866a:	600b      	str	r3, [r1, #0]
 800866c:	e015      	b.n	800869a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800866e:	4b24      	ldr	r3, [pc, #144]	; (8008700 <HAL_RCC_OscConfig+0x244>)
 8008670:	2200      	movs	r2, #0
 8008672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008674:	f7fd f898 	bl	80057a8 <HAL_GetTick>
 8008678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800867a:	e008      	b.n	800868e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800867c:	f7fd f894 	bl	80057a8 <HAL_GetTick>
 8008680:	4602      	mov	r2, r0
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	2b02      	cmp	r3, #2
 8008688:	d901      	bls.n	800868e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e187      	b.n	800899e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800868e:	4b1b      	ldr	r3, [pc, #108]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0302 	and.w	r3, r3, #2
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1f0      	bne.n	800867c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0308 	and.w	r3, r3, #8
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d036      	beq.n	8008714 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d016      	beq.n	80086dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086ae:	4b15      	ldr	r3, [pc, #84]	; (8008704 <HAL_RCC_OscConfig+0x248>)
 80086b0:	2201      	movs	r2, #1
 80086b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086b4:	f7fd f878 	bl	80057a8 <HAL_GetTick>
 80086b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086ba:	e008      	b.n	80086ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086bc:	f7fd f874 	bl	80057a8 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d901      	bls.n	80086ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e167      	b.n	800899e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086ce:	4b0b      	ldr	r3, [pc, #44]	; (80086fc <HAL_RCC_OscConfig+0x240>)
 80086d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086d2:	f003 0302 	and.w	r3, r3, #2
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0f0      	beq.n	80086bc <HAL_RCC_OscConfig+0x200>
 80086da:	e01b      	b.n	8008714 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086dc:	4b09      	ldr	r3, [pc, #36]	; (8008704 <HAL_RCC_OscConfig+0x248>)
 80086de:	2200      	movs	r2, #0
 80086e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086e2:	f7fd f861 	bl	80057a8 <HAL_GetTick>
 80086e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086e8:	e00e      	b.n	8008708 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086ea:	f7fd f85d 	bl	80057a8 <HAL_GetTick>
 80086ee:	4602      	mov	r2, r0
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d907      	bls.n	8008708 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80086f8:	2303      	movs	r3, #3
 80086fa:	e150      	b.n	800899e <HAL_RCC_OscConfig+0x4e2>
 80086fc:	40023800 	.word	0x40023800
 8008700:	42470000 	.word	0x42470000
 8008704:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008708:	4b88      	ldr	r3, [pc, #544]	; (800892c <HAL_RCC_OscConfig+0x470>)
 800870a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800870c:	f003 0302 	and.w	r3, r3, #2
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1ea      	bne.n	80086ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0304 	and.w	r3, r3, #4
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 8097 	beq.w	8008850 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008722:	2300      	movs	r3, #0
 8008724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008726:	4b81      	ldr	r3, [pc, #516]	; (800892c <HAL_RCC_OscConfig+0x470>)
 8008728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10f      	bne.n	8008752 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008732:	2300      	movs	r3, #0
 8008734:	60bb      	str	r3, [r7, #8]
 8008736:	4b7d      	ldr	r3, [pc, #500]	; (800892c <HAL_RCC_OscConfig+0x470>)
 8008738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873a:	4a7c      	ldr	r2, [pc, #496]	; (800892c <HAL_RCC_OscConfig+0x470>)
 800873c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008740:	6413      	str	r3, [r2, #64]	; 0x40
 8008742:	4b7a      	ldr	r3, [pc, #488]	; (800892c <HAL_RCC_OscConfig+0x470>)
 8008744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800874a:	60bb      	str	r3, [r7, #8]
 800874c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800874e:	2301      	movs	r3, #1
 8008750:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008752:	4b77      	ldr	r3, [pc, #476]	; (8008930 <HAL_RCC_OscConfig+0x474>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875a:	2b00      	cmp	r3, #0
 800875c:	d118      	bne.n	8008790 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800875e:	4b74      	ldr	r3, [pc, #464]	; (8008930 <HAL_RCC_OscConfig+0x474>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a73      	ldr	r2, [pc, #460]	; (8008930 <HAL_RCC_OscConfig+0x474>)
 8008764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800876a:	f7fd f81d 	bl	80057a8 <HAL_GetTick>
 800876e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008770:	e008      	b.n	8008784 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008772:	f7fd f819 	bl	80057a8 <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	2b02      	cmp	r3, #2
 800877e:	d901      	bls.n	8008784 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e10c      	b.n	800899e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008784:	4b6a      	ldr	r3, [pc, #424]	; (8008930 <HAL_RCC_OscConfig+0x474>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800878c:	2b00      	cmp	r3, #0
 800878e:	d0f0      	beq.n	8008772 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d106      	bne.n	80087a6 <HAL_RCC_OscConfig+0x2ea>
 8008798:	4b64      	ldr	r3, [pc, #400]	; (800892c <HAL_RCC_OscConfig+0x470>)
 800879a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800879c:	4a63      	ldr	r2, [pc, #396]	; (800892c <HAL_RCC_OscConfig+0x470>)
 800879e:	f043 0301 	orr.w	r3, r3, #1
 80087a2:	6713      	str	r3, [r2, #112]	; 0x70
 80087a4:	e01c      	b.n	80087e0 <HAL_RCC_OscConfig+0x324>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	2b05      	cmp	r3, #5
 80087ac:	d10c      	bne.n	80087c8 <HAL_RCC_OscConfig+0x30c>
 80087ae:	4b5f      	ldr	r3, [pc, #380]	; (800892c <HAL_RCC_OscConfig+0x470>)
 80087b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b2:	4a5e      	ldr	r2, [pc, #376]	; (800892c <HAL_RCC_OscConfig+0x470>)
 80087b4:	f043 0304 	orr.w	r3, r3, #4
 80087b8:	6713      	str	r3, [r2, #112]	; 0x70
 80087ba:	4b5c      	ldr	r3, [pc, #368]	; (800892c <HAL_RCC_OscConfig+0x470>)
 80087bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087be:	4a5b      	ldr	r2, [pc, #364]	; (800892c <HAL_RCC_OscConfig+0x470>)
 80087c0:	f043 0301 	orr.w	r3, r3, #1
 80087c4:	6713      	str	r3, [r2, #112]	; 0x70
 80087c6:	e00b      	b.n	80087e0 <HAL_RCC_OscConfig+0x324>
 80087c8:	4b58      	ldr	r3, [pc, #352]	; (800892c <HAL_RCC_OscConfig+0x470>)
 80087ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087cc:	4a57      	ldr	r2, [pc, #348]	; (800892c <HAL_RCC_OscConfig+0x470>)
 80087ce:	f023 0301 	bic.w	r3, r3, #1
 80087d2:	6713      	str	r3, [r2, #112]	; 0x70
 80087d4:	4b55      	ldr	r3, [pc, #340]	; (800892c <HAL_RCC_OscConfig+0x470>)
 80087d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d8:	4a54      	ldr	r2, [pc, #336]	; (800892c <HAL_RCC_OscConfig+0x470>)
 80087da:	f023 0304 	bic.w	r3, r3, #4
 80087de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d015      	beq.n	8008814 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087e8:	f7fc ffde 	bl	80057a8 <HAL_GetTick>
 80087ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087ee:	e00a      	b.n	8008806 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087f0:	f7fc ffda 	bl	80057a8 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80087fe:	4293      	cmp	r3, r2
 8008800:	d901      	bls.n	8008806 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	e0cb      	b.n	800899e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008806:	4b49      	ldr	r3, [pc, #292]	; (800892c <HAL_RCC_OscConfig+0x470>)
 8008808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880a:	f003 0302 	and.w	r3, r3, #2
 800880e:	2b00      	cmp	r3, #0
 8008810:	d0ee      	beq.n	80087f0 <HAL_RCC_OscConfig+0x334>
 8008812:	e014      	b.n	800883e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008814:	f7fc ffc8 	bl	80057a8 <HAL_GetTick>
 8008818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800881a:	e00a      	b.n	8008832 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800881c:	f7fc ffc4 	bl	80057a8 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	f241 3288 	movw	r2, #5000	; 0x1388
 800882a:	4293      	cmp	r3, r2
 800882c:	d901      	bls.n	8008832 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e0b5      	b.n	800899e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008832:	4b3e      	ldr	r3, [pc, #248]	; (800892c <HAL_RCC_OscConfig+0x470>)
 8008834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1ee      	bne.n	800881c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800883e:	7dfb      	ldrb	r3, [r7, #23]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d105      	bne.n	8008850 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008844:	4b39      	ldr	r3, [pc, #228]	; (800892c <HAL_RCC_OscConfig+0x470>)
 8008846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008848:	4a38      	ldr	r2, [pc, #224]	; (800892c <HAL_RCC_OscConfig+0x470>)
 800884a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800884e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f000 80a1 	beq.w	800899c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800885a:	4b34      	ldr	r3, [pc, #208]	; (800892c <HAL_RCC_OscConfig+0x470>)
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f003 030c 	and.w	r3, r3, #12
 8008862:	2b08      	cmp	r3, #8
 8008864:	d05c      	beq.n	8008920 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	2b02      	cmp	r3, #2
 800886c:	d141      	bne.n	80088f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800886e:	4b31      	ldr	r3, [pc, #196]	; (8008934 <HAL_RCC_OscConfig+0x478>)
 8008870:	2200      	movs	r2, #0
 8008872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008874:	f7fc ff98 	bl	80057a8 <HAL_GetTick>
 8008878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800887a:	e008      	b.n	800888e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800887c:	f7fc ff94 	bl	80057a8 <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	2b02      	cmp	r3, #2
 8008888:	d901      	bls.n	800888e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e087      	b.n	800899e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800888e:	4b27      	ldr	r3, [pc, #156]	; (800892c <HAL_RCC_OscConfig+0x470>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1f0      	bne.n	800887c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	69da      	ldr	r2, [r3, #28]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	431a      	orrs	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a8:	019b      	lsls	r3, r3, #6
 80088aa:	431a      	orrs	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b0:	085b      	lsrs	r3, r3, #1
 80088b2:	3b01      	subs	r3, #1
 80088b4:	041b      	lsls	r3, r3, #16
 80088b6:	431a      	orrs	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088bc:	061b      	lsls	r3, r3, #24
 80088be:	491b      	ldr	r1, [pc, #108]	; (800892c <HAL_RCC_OscConfig+0x470>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088c4:	4b1b      	ldr	r3, [pc, #108]	; (8008934 <HAL_RCC_OscConfig+0x478>)
 80088c6:	2201      	movs	r2, #1
 80088c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088ca:	f7fc ff6d 	bl	80057a8 <HAL_GetTick>
 80088ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088d0:	e008      	b.n	80088e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088d2:	f7fc ff69 	bl	80057a8 <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d901      	bls.n	80088e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e05c      	b.n	800899e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088e4:	4b11      	ldr	r3, [pc, #68]	; (800892c <HAL_RCC_OscConfig+0x470>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0f0      	beq.n	80088d2 <HAL_RCC_OscConfig+0x416>
 80088f0:	e054      	b.n	800899c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088f2:	4b10      	ldr	r3, [pc, #64]	; (8008934 <HAL_RCC_OscConfig+0x478>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088f8:	f7fc ff56 	bl	80057a8 <HAL_GetTick>
 80088fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088fe:	e008      	b.n	8008912 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008900:	f7fc ff52 	bl	80057a8 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	2b02      	cmp	r3, #2
 800890c:	d901      	bls.n	8008912 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e045      	b.n	800899e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008912:	4b06      	ldr	r3, [pc, #24]	; (800892c <HAL_RCC_OscConfig+0x470>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1f0      	bne.n	8008900 <HAL_RCC_OscConfig+0x444>
 800891e:	e03d      	b.n	800899c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d107      	bne.n	8008938 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e038      	b.n	800899e <HAL_RCC_OscConfig+0x4e2>
 800892c:	40023800 	.word	0x40023800
 8008930:	40007000 	.word	0x40007000
 8008934:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008938:	4b1b      	ldr	r3, [pc, #108]	; (80089a8 <HAL_RCC_OscConfig+0x4ec>)
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d028      	beq.n	8008998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008950:	429a      	cmp	r2, r3
 8008952:	d121      	bne.n	8008998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800895e:	429a      	cmp	r2, r3
 8008960:	d11a      	bne.n	8008998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008968:	4013      	ands	r3, r2
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800896e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008970:	4293      	cmp	r3, r2
 8008972:	d111      	bne.n	8008998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897e:	085b      	lsrs	r3, r3, #1
 8008980:	3b01      	subs	r3, #1
 8008982:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008984:	429a      	cmp	r2, r3
 8008986:	d107      	bne.n	8008998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008992:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008994:	429a      	cmp	r2, r3
 8008996:	d001      	beq.n	800899c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e000      	b.n	800899e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	40023800 	.word	0x40023800

080089ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d101      	bne.n	80089c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e0cc      	b.n	8008b5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089c0:	4b68      	ldr	r3, [pc, #416]	; (8008b64 <HAL_RCC_ClockConfig+0x1b8>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0307 	and.w	r3, r3, #7
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d90c      	bls.n	80089e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ce:	4b65      	ldr	r3, [pc, #404]	; (8008b64 <HAL_RCC_ClockConfig+0x1b8>)
 80089d0:	683a      	ldr	r2, [r7, #0]
 80089d2:	b2d2      	uxtb	r2, r2
 80089d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089d6:	4b63      	ldr	r3, [pc, #396]	; (8008b64 <HAL_RCC_ClockConfig+0x1b8>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 0307 	and.w	r3, r3, #7
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d001      	beq.n	80089e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e0b8      	b.n	8008b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0302 	and.w	r3, r3, #2
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d020      	beq.n	8008a36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0304 	and.w	r3, r3, #4
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d005      	beq.n	8008a0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a00:	4b59      	ldr	r3, [pc, #356]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	4a58      	ldr	r2, [pc, #352]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0308 	and.w	r3, r3, #8
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d005      	beq.n	8008a24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a18:	4b53      	ldr	r3, [pc, #332]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	4a52      	ldr	r2, [pc, #328]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a24:	4b50      	ldr	r3, [pc, #320]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	494d      	ldr	r1, [pc, #308]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d044      	beq.n	8008acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d107      	bne.n	8008a5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a4a:	4b47      	ldr	r3, [pc, #284]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d119      	bne.n	8008a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e07f      	b.n	8008b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d003      	beq.n	8008a6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	d107      	bne.n	8008a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a6a:	4b3f      	ldr	r3, [pc, #252]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d109      	bne.n	8008a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e06f      	b.n	8008b5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a7a:	4b3b      	ldr	r3, [pc, #236]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0302 	and.w	r3, r3, #2
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e067      	b.n	8008b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a8a:	4b37      	ldr	r3, [pc, #220]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f023 0203 	bic.w	r2, r3, #3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	4934      	ldr	r1, [pc, #208]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a9c:	f7fc fe84 	bl	80057a8 <HAL_GetTick>
 8008aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aa2:	e00a      	b.n	8008aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008aa4:	f7fc fe80 	bl	80057a8 <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d901      	bls.n	8008aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e04f      	b.n	8008b5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aba:	4b2b      	ldr	r3, [pc, #172]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f003 020c 	and.w	r2, r3, #12
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d1eb      	bne.n	8008aa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008acc:	4b25      	ldr	r3, [pc, #148]	; (8008b64 <HAL_RCC_ClockConfig+0x1b8>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 0307 	and.w	r3, r3, #7
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d20c      	bcs.n	8008af4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ada:	4b22      	ldr	r3, [pc, #136]	; (8008b64 <HAL_RCC_ClockConfig+0x1b8>)
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	b2d2      	uxtb	r2, r2
 8008ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ae2:	4b20      	ldr	r3, [pc, #128]	; (8008b64 <HAL_RCC_ClockConfig+0x1b8>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0307 	and.w	r3, r3, #7
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d001      	beq.n	8008af4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e032      	b.n	8008b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0304 	and.w	r3, r3, #4
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d008      	beq.n	8008b12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b00:	4b19      	ldr	r3, [pc, #100]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	4916      	ldr	r1, [pc, #88]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 0308 	and.w	r3, r3, #8
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d009      	beq.n	8008b32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b1e:	4b12      	ldr	r3, [pc, #72]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	00db      	lsls	r3, r3, #3
 8008b2c:	490e      	ldr	r1, [pc, #56]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b32:	f000 f821 	bl	8008b78 <HAL_RCC_GetSysClockFreq>
 8008b36:	4602      	mov	r2, r0
 8008b38:	4b0b      	ldr	r3, [pc, #44]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	091b      	lsrs	r3, r3, #4
 8008b3e:	f003 030f 	and.w	r3, r3, #15
 8008b42:	490a      	ldr	r1, [pc, #40]	; (8008b6c <HAL_RCC_ClockConfig+0x1c0>)
 8008b44:	5ccb      	ldrb	r3, [r1, r3]
 8008b46:	fa22 f303 	lsr.w	r3, r2, r3
 8008b4a:	4a09      	ldr	r2, [pc, #36]	; (8008b70 <HAL_RCC_ClockConfig+0x1c4>)
 8008b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b4e:	4b09      	ldr	r3, [pc, #36]	; (8008b74 <HAL_RCC_ClockConfig+0x1c8>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fc fde4 	bl	8005720 <HAL_InitTick>

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	40023c00 	.word	0x40023c00
 8008b68:	40023800 	.word	0x40023800
 8008b6c:	0800bb3c 	.word	0x0800bb3c
 8008b70:	20000430 	.word	0x20000430
 8008b74:	20000434 	.word	0x20000434

08008b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b7c:	b094      	sub	sp, #80	; 0x50
 8008b7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b80:	2300      	movs	r3, #0
 8008b82:	647b      	str	r3, [r7, #68]	; 0x44
 8008b84:	2300      	movs	r3, #0
 8008b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b88:	2300      	movs	r3, #0
 8008b8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b90:	4b79      	ldr	r3, [pc, #484]	; (8008d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f003 030c 	and.w	r3, r3, #12
 8008b98:	2b08      	cmp	r3, #8
 8008b9a:	d00d      	beq.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x40>
 8008b9c:	2b08      	cmp	r3, #8
 8008b9e:	f200 80e1 	bhi.w	8008d64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <HAL_RCC_GetSysClockFreq+0x34>
 8008ba6:	2b04      	cmp	r3, #4
 8008ba8:	d003      	beq.n	8008bb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008baa:	e0db      	b.n	8008d64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008bac:	4b73      	ldr	r3, [pc, #460]	; (8008d7c <HAL_RCC_GetSysClockFreq+0x204>)
 8008bae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008bb0:	e0db      	b.n	8008d6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008bb2:	4b73      	ldr	r3, [pc, #460]	; (8008d80 <HAL_RCC_GetSysClockFreq+0x208>)
 8008bb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008bb6:	e0d8      	b.n	8008d6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bb8:	4b6f      	ldr	r3, [pc, #444]	; (8008d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bc0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bc2:	4b6d      	ldr	r3, [pc, #436]	; (8008d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d063      	beq.n	8008c96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bce:	4b6a      	ldr	r3, [pc, #424]	; (8008d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	099b      	lsrs	r3, r3, #6
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be0:	633b      	str	r3, [r7, #48]	; 0x30
 8008be2:	2300      	movs	r3, #0
 8008be4:	637b      	str	r3, [r7, #52]	; 0x34
 8008be6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008bea:	4622      	mov	r2, r4
 8008bec:	462b      	mov	r3, r5
 8008bee:	f04f 0000 	mov.w	r0, #0
 8008bf2:	f04f 0100 	mov.w	r1, #0
 8008bf6:	0159      	lsls	r1, r3, #5
 8008bf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bfc:	0150      	lsls	r0, r2, #5
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	4621      	mov	r1, r4
 8008c04:	1a51      	subs	r1, r2, r1
 8008c06:	6139      	str	r1, [r7, #16]
 8008c08:	4629      	mov	r1, r5
 8008c0a:	eb63 0301 	sbc.w	r3, r3, r1
 8008c0e:	617b      	str	r3, [r7, #20]
 8008c10:	f04f 0200 	mov.w	r2, #0
 8008c14:	f04f 0300 	mov.w	r3, #0
 8008c18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c1c:	4659      	mov	r1, fp
 8008c1e:	018b      	lsls	r3, r1, #6
 8008c20:	4651      	mov	r1, sl
 8008c22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c26:	4651      	mov	r1, sl
 8008c28:	018a      	lsls	r2, r1, #6
 8008c2a:	4651      	mov	r1, sl
 8008c2c:	ebb2 0801 	subs.w	r8, r2, r1
 8008c30:	4659      	mov	r1, fp
 8008c32:	eb63 0901 	sbc.w	r9, r3, r1
 8008c36:	f04f 0200 	mov.w	r2, #0
 8008c3a:	f04f 0300 	mov.w	r3, #0
 8008c3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c4a:	4690      	mov	r8, r2
 8008c4c:	4699      	mov	r9, r3
 8008c4e:	4623      	mov	r3, r4
 8008c50:	eb18 0303 	adds.w	r3, r8, r3
 8008c54:	60bb      	str	r3, [r7, #8]
 8008c56:	462b      	mov	r3, r5
 8008c58:	eb49 0303 	adc.w	r3, r9, r3
 8008c5c:	60fb      	str	r3, [r7, #12]
 8008c5e:	f04f 0200 	mov.w	r2, #0
 8008c62:	f04f 0300 	mov.w	r3, #0
 8008c66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	024b      	lsls	r3, r1, #9
 8008c6e:	4621      	mov	r1, r4
 8008c70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c74:	4621      	mov	r1, r4
 8008c76:	024a      	lsls	r2, r1, #9
 8008c78:	4610      	mov	r0, r2
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c7e:	2200      	movs	r2, #0
 8008c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c88:	f7f7 fee4 	bl	8000a54 <__aeabi_uldivmod>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4613      	mov	r3, r2
 8008c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c94:	e058      	b.n	8008d48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c96:	4b38      	ldr	r3, [pc, #224]	; (8008d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	099b      	lsrs	r3, r3, #6
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008ca6:	623b      	str	r3, [r7, #32]
 8008ca8:	2300      	movs	r3, #0
 8008caa:	627b      	str	r3, [r7, #36]	; 0x24
 8008cac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008cb0:	4642      	mov	r2, r8
 8008cb2:	464b      	mov	r3, r9
 8008cb4:	f04f 0000 	mov.w	r0, #0
 8008cb8:	f04f 0100 	mov.w	r1, #0
 8008cbc:	0159      	lsls	r1, r3, #5
 8008cbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008cc2:	0150      	lsls	r0, r2, #5
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4641      	mov	r1, r8
 8008cca:	ebb2 0a01 	subs.w	sl, r2, r1
 8008cce:	4649      	mov	r1, r9
 8008cd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8008cd4:	f04f 0200 	mov.w	r2, #0
 8008cd8:	f04f 0300 	mov.w	r3, #0
 8008cdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008ce0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008ce4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008ce8:	ebb2 040a 	subs.w	r4, r2, sl
 8008cec:	eb63 050b 	sbc.w	r5, r3, fp
 8008cf0:	f04f 0200 	mov.w	r2, #0
 8008cf4:	f04f 0300 	mov.w	r3, #0
 8008cf8:	00eb      	lsls	r3, r5, #3
 8008cfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008cfe:	00e2      	lsls	r2, r4, #3
 8008d00:	4614      	mov	r4, r2
 8008d02:	461d      	mov	r5, r3
 8008d04:	4643      	mov	r3, r8
 8008d06:	18e3      	adds	r3, r4, r3
 8008d08:	603b      	str	r3, [r7, #0]
 8008d0a:	464b      	mov	r3, r9
 8008d0c:	eb45 0303 	adc.w	r3, r5, r3
 8008d10:	607b      	str	r3, [r7, #4]
 8008d12:	f04f 0200 	mov.w	r2, #0
 8008d16:	f04f 0300 	mov.w	r3, #0
 8008d1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d1e:	4629      	mov	r1, r5
 8008d20:	028b      	lsls	r3, r1, #10
 8008d22:	4621      	mov	r1, r4
 8008d24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d28:	4621      	mov	r1, r4
 8008d2a:	028a      	lsls	r2, r1, #10
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d32:	2200      	movs	r2, #0
 8008d34:	61bb      	str	r3, [r7, #24]
 8008d36:	61fa      	str	r2, [r7, #28]
 8008d38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d3c:	f7f7 fe8a 	bl	8000a54 <__aeabi_uldivmod>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4613      	mov	r3, r2
 8008d46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d48:	4b0b      	ldr	r3, [pc, #44]	; (8008d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	0c1b      	lsrs	r3, r3, #16
 8008d4e:	f003 0303 	and.w	r3, r3, #3
 8008d52:	3301      	adds	r3, #1
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008d58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d62:	e002      	b.n	8008d6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d64:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <HAL_RCC_GetSysClockFreq+0x204>)
 8008d66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3750      	adds	r7, #80	; 0x50
 8008d70:	46bd      	mov	sp, r7
 8008d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d76:	bf00      	nop
 8008d78:	40023800 	.word	0x40023800
 8008d7c:	00f42400 	.word	0x00f42400
 8008d80:	007a1200 	.word	0x007a1200

08008d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d84:	b480      	push	{r7}
 8008d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d88:	4b03      	ldr	r3, [pc, #12]	; (8008d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	20000430 	.word	0x20000430

08008d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008da0:	f7ff fff0 	bl	8008d84 <HAL_RCC_GetHCLKFreq>
 8008da4:	4602      	mov	r2, r0
 8008da6:	4b05      	ldr	r3, [pc, #20]	; (8008dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	0a9b      	lsrs	r3, r3, #10
 8008dac:	f003 0307 	and.w	r3, r3, #7
 8008db0:	4903      	ldr	r1, [pc, #12]	; (8008dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008db2:	5ccb      	ldrb	r3, [r1, r3]
 8008db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	40023800 	.word	0x40023800
 8008dc0:	0800bb4c 	.word	0x0800bb4c

08008dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008dc8:	f7ff ffdc 	bl	8008d84 <HAL_RCC_GetHCLKFreq>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	4b05      	ldr	r3, [pc, #20]	; (8008de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	0b5b      	lsrs	r3, r3, #13
 8008dd4:	f003 0307 	and.w	r3, r3, #7
 8008dd8:	4903      	ldr	r1, [pc, #12]	; (8008de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008dda:	5ccb      	ldrb	r3, [r1, r3]
 8008ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	40023800 	.word	0x40023800
 8008de8:	0800bb4c 	.word	0x0800bb4c

08008dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e041      	b.n	8008e82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d106      	bne.n	8008e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f7fc fa6a 	bl	80052ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	3304      	adds	r3, #4
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4610      	mov	r0, r2
 8008e2c:	f000 fdac 	bl	8009988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d001      	beq.n	8008ea4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e044      	b.n	8008f2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68da      	ldr	r2, [r3, #12]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f042 0201 	orr.w	r2, r2, #1
 8008eba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a1e      	ldr	r2, [pc, #120]	; (8008f3c <HAL_TIM_Base_Start_IT+0xb0>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d018      	beq.n	8008ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ece:	d013      	beq.n	8008ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a1a      	ldr	r2, [pc, #104]	; (8008f40 <HAL_TIM_Base_Start_IT+0xb4>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d00e      	beq.n	8008ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a19      	ldr	r2, [pc, #100]	; (8008f44 <HAL_TIM_Base_Start_IT+0xb8>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d009      	beq.n	8008ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a17      	ldr	r2, [pc, #92]	; (8008f48 <HAL_TIM_Base_Start_IT+0xbc>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d004      	beq.n	8008ef8 <HAL_TIM_Base_Start_IT+0x6c>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a16      	ldr	r2, [pc, #88]	; (8008f4c <HAL_TIM_Base_Start_IT+0xc0>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d111      	bne.n	8008f1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f003 0307 	and.w	r3, r3, #7
 8008f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2b06      	cmp	r3, #6
 8008f08:	d010      	beq.n	8008f2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f042 0201 	orr.w	r2, r2, #1
 8008f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f1a:	e007      	b.n	8008f2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f042 0201 	orr.w	r2, r2, #1
 8008f2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	40010000 	.word	0x40010000
 8008f40:	40000400 	.word	0x40000400
 8008f44:	40000800 	.word	0x40000800
 8008f48:	40000c00 	.word	0x40000c00
 8008f4c:	40014000 	.word	0x40014000

08008f50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68da      	ldr	r2, [r3, #12]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f022 0201 	bic.w	r2, r2, #1
 8008f66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	6a1a      	ldr	r2, [r3, #32]
 8008f6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f72:	4013      	ands	r3, r2
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10f      	bne.n	8008f98 <HAL_TIM_Base_Stop_IT+0x48>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6a1a      	ldr	r2, [r3, #32]
 8008f7e:	f240 4344 	movw	r3, #1092	; 0x444
 8008f82:	4013      	ands	r3, r2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d107      	bne.n	8008f98 <HAL_TIM_Base_Stop_IT+0x48>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f022 0201 	bic.w	r2, r2, #1
 8008f96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b082      	sub	sp, #8
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d101      	bne.n	8008fc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e041      	b.n	8009044 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d106      	bne.n	8008fda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7fc f91b 	bl	8005210 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2202      	movs	r2, #2
 8008fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	3304      	adds	r3, #4
 8008fea:	4619      	mov	r1, r3
 8008fec:	4610      	mov	r0, r2
 8008fee:	f000 fccb 	bl	8009988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d109      	bne.n	8009070 <HAL_TIM_PWM_Start+0x24>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b01      	cmp	r3, #1
 8009066:	bf14      	ite	ne
 8009068:	2301      	movne	r3, #1
 800906a:	2300      	moveq	r3, #0
 800906c:	b2db      	uxtb	r3, r3
 800906e:	e022      	b.n	80090b6 <HAL_TIM_PWM_Start+0x6a>
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	2b04      	cmp	r3, #4
 8009074:	d109      	bne.n	800908a <HAL_TIM_PWM_Start+0x3e>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b01      	cmp	r3, #1
 8009080:	bf14      	ite	ne
 8009082:	2301      	movne	r3, #1
 8009084:	2300      	moveq	r3, #0
 8009086:	b2db      	uxtb	r3, r3
 8009088:	e015      	b.n	80090b6 <HAL_TIM_PWM_Start+0x6a>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b08      	cmp	r3, #8
 800908e:	d109      	bne.n	80090a4 <HAL_TIM_PWM_Start+0x58>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b01      	cmp	r3, #1
 800909a:	bf14      	ite	ne
 800909c:	2301      	movne	r3, #1
 800909e:	2300      	moveq	r3, #0
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	e008      	b.n	80090b6 <HAL_TIM_PWM_Start+0x6a>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	bf14      	ite	ne
 80090b0:	2301      	movne	r3, #1
 80090b2:	2300      	moveq	r3, #0
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e068      	b.n	8009190 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d104      	bne.n	80090ce <HAL_TIM_PWM_Start+0x82>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090cc:	e013      	b.n	80090f6 <HAL_TIM_PWM_Start+0xaa>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	2b04      	cmp	r3, #4
 80090d2:	d104      	bne.n	80090de <HAL_TIM_PWM_Start+0x92>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2202      	movs	r2, #2
 80090d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090dc:	e00b      	b.n	80090f6 <HAL_TIM_PWM_Start+0xaa>
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	2b08      	cmp	r3, #8
 80090e2:	d104      	bne.n	80090ee <HAL_TIM_PWM_Start+0xa2>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2202      	movs	r2, #2
 80090e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090ec:	e003      	b.n	80090f6 <HAL_TIM_PWM_Start+0xaa>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2202      	movs	r2, #2
 80090f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2201      	movs	r2, #1
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 fee8 	bl	8009ed4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a23      	ldr	r2, [pc, #140]	; (8009198 <HAL_TIM_PWM_Start+0x14c>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d107      	bne.n	800911e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800911c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a1d      	ldr	r2, [pc, #116]	; (8009198 <HAL_TIM_PWM_Start+0x14c>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d018      	beq.n	800915a <HAL_TIM_PWM_Start+0x10e>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009130:	d013      	beq.n	800915a <HAL_TIM_PWM_Start+0x10e>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a19      	ldr	r2, [pc, #100]	; (800919c <HAL_TIM_PWM_Start+0x150>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d00e      	beq.n	800915a <HAL_TIM_PWM_Start+0x10e>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a17      	ldr	r2, [pc, #92]	; (80091a0 <HAL_TIM_PWM_Start+0x154>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d009      	beq.n	800915a <HAL_TIM_PWM_Start+0x10e>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a16      	ldr	r2, [pc, #88]	; (80091a4 <HAL_TIM_PWM_Start+0x158>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d004      	beq.n	800915a <HAL_TIM_PWM_Start+0x10e>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a14      	ldr	r2, [pc, #80]	; (80091a8 <HAL_TIM_PWM_Start+0x15c>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d111      	bne.n	800917e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	f003 0307 	and.w	r3, r3, #7
 8009164:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2b06      	cmp	r3, #6
 800916a:	d010      	beq.n	800918e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f042 0201 	orr.w	r2, r2, #1
 800917a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800917c:	e007      	b.n	800918e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f042 0201 	orr.w	r2, r2, #1
 800918c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	40010000 	.word	0x40010000
 800919c:	40000400 	.word	0x40000400
 80091a0:	40000800 	.word	0x40000800
 80091a4:	40000c00 	.word	0x40000c00
 80091a8:	40014000 	.word	0x40014000

080091ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d101      	bne.n	80091c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e097      	b.n	80092f0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d106      	bne.n	80091da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f7fc f843 	bl	8005260 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2202      	movs	r2, #2
 80091de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	6812      	ldr	r2, [r2, #0]
 80091ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091f0:	f023 0307 	bic.w	r3, r3, #7
 80091f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	3304      	adds	r3, #4
 80091fe:	4619      	mov	r1, r3
 8009200:	4610      	mov	r0, r2
 8009202:	f000 fbc1 	bl	8009988 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6a1b      	ldr	r3, [r3, #32]
 800921c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	4313      	orrs	r3, r2
 8009226:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800922e:	f023 0303 	bic.w	r3, r3, #3
 8009232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	689a      	ldr	r2, [r3, #8]
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	021b      	lsls	r3, r3, #8
 800923e:	4313      	orrs	r3, r2
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	4313      	orrs	r3, r2
 8009244:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800924c:	f023 030c 	bic.w	r3, r3, #12
 8009250:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009258:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800925c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	68da      	ldr	r2, [r3, #12]
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	69db      	ldr	r3, [r3, #28]
 8009266:	021b      	lsls	r3, r3, #8
 8009268:	4313      	orrs	r3, r2
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	4313      	orrs	r3, r2
 800926e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	011a      	lsls	r2, r3, #4
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	031b      	lsls	r3, r3, #12
 800927c:	4313      	orrs	r3, r2
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	4313      	orrs	r3, r2
 8009282:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800928a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009292:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	685a      	ldr	r2, [r3, #4]
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	695b      	ldr	r3, [r3, #20]
 800929c:	011b      	lsls	r3, r3, #4
 800929e:	4313      	orrs	r3, r2
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3718      	adds	r7, #24
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009308:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009310:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009318:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009320:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d110      	bne.n	800934a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d102      	bne.n	8009334 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800932e:	7b7b      	ldrb	r3, [r7, #13]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d001      	beq.n	8009338 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e069      	b.n	800940c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2202      	movs	r2, #2
 800933c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2202      	movs	r2, #2
 8009344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009348:	e031      	b.n	80093ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2b04      	cmp	r3, #4
 800934e:	d110      	bne.n	8009372 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009350:	7bbb      	ldrb	r3, [r7, #14]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d102      	bne.n	800935c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009356:	7b3b      	ldrb	r3, [r7, #12]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d001      	beq.n	8009360 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e055      	b.n	800940c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2202      	movs	r2, #2
 8009364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2202      	movs	r2, #2
 800936c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009370:	e01d      	b.n	80093ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009372:	7bfb      	ldrb	r3, [r7, #15]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d108      	bne.n	800938a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009378:	7bbb      	ldrb	r3, [r7, #14]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d105      	bne.n	800938a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800937e:	7b7b      	ldrb	r3, [r7, #13]
 8009380:	2b01      	cmp	r3, #1
 8009382:	d102      	bne.n	800938a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009384:	7b3b      	ldrb	r3, [r7, #12]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d001      	beq.n	800938e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e03e      	b.n	800940c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2202      	movs	r2, #2
 8009392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2202      	movs	r2, #2
 800939a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2202      	movs	r2, #2
 80093a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2202      	movs	r2, #2
 80093aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d003      	beq.n	80093bc <HAL_TIM_Encoder_Start+0xc4>
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	2b04      	cmp	r3, #4
 80093b8:	d008      	beq.n	80093cc <HAL_TIM_Encoder_Start+0xd4>
 80093ba:	e00f      	b.n	80093dc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2201      	movs	r2, #1
 80093c2:	2100      	movs	r1, #0
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 fd85 	bl	8009ed4 <TIM_CCxChannelCmd>
      break;
 80093ca:	e016      	b.n	80093fa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2201      	movs	r2, #1
 80093d2:	2104      	movs	r1, #4
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 fd7d 	bl	8009ed4 <TIM_CCxChannelCmd>
      break;
 80093da:	e00e      	b.n	80093fa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2201      	movs	r2, #1
 80093e2:	2100      	movs	r1, #0
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 fd75 	bl	8009ed4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2201      	movs	r2, #1
 80093f0:	2104      	movs	r1, #4
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 fd6e 	bl	8009ed4 <TIM_CCxChannelCmd>
      break;
 80093f8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f042 0201 	orr.w	r2, r2, #1
 8009408:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	f003 0302 	and.w	r3, r3, #2
 8009426:	2b02      	cmp	r3, #2
 8009428:	d122      	bne.n	8009470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f003 0302 	and.w	r3, r3, #2
 8009434:	2b02      	cmp	r3, #2
 8009436:	d11b      	bne.n	8009470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f06f 0202 	mvn.w	r2, #2
 8009440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	f003 0303 	and.w	r3, r3, #3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d003      	beq.n	800945e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fa77 	bl	800994a <HAL_TIM_IC_CaptureCallback>
 800945c:	e005      	b.n	800946a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fa69 	bl	8009936 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fa7a 	bl	800995e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	f003 0304 	and.w	r3, r3, #4
 800947a:	2b04      	cmp	r3, #4
 800947c:	d122      	bne.n	80094c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	f003 0304 	and.w	r3, r3, #4
 8009488:	2b04      	cmp	r3, #4
 800948a:	d11b      	bne.n	80094c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f06f 0204 	mvn.w	r2, #4
 8009494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2202      	movs	r2, #2
 800949a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d003      	beq.n	80094b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fa4d 	bl	800994a <HAL_TIM_IC_CaptureCallback>
 80094b0:	e005      	b.n	80094be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fa3f 	bl	8009936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fa50 	bl	800995e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	f003 0308 	and.w	r3, r3, #8
 80094ce:	2b08      	cmp	r3, #8
 80094d0:	d122      	bne.n	8009518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	f003 0308 	and.w	r3, r3, #8
 80094dc:	2b08      	cmp	r3, #8
 80094de:	d11b      	bne.n	8009518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f06f 0208 	mvn.w	r2, #8
 80094e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2204      	movs	r2, #4
 80094ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	f003 0303 	and.w	r3, r3, #3
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d003      	beq.n	8009506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fa23 	bl	800994a <HAL_TIM_IC_CaptureCallback>
 8009504:	e005      	b.n	8009512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fa15 	bl	8009936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fa26 	bl	800995e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	f003 0310 	and.w	r3, r3, #16
 8009522:	2b10      	cmp	r3, #16
 8009524:	d122      	bne.n	800956c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	f003 0310 	and.w	r3, r3, #16
 8009530:	2b10      	cmp	r3, #16
 8009532:	d11b      	bne.n	800956c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f06f 0210 	mvn.w	r2, #16
 800953c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2208      	movs	r2, #8
 8009542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	69db      	ldr	r3, [r3, #28]
 800954a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800954e:	2b00      	cmp	r3, #0
 8009550:	d003      	beq.n	800955a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f9f9 	bl	800994a <HAL_TIM_IC_CaptureCallback>
 8009558:	e005      	b.n	8009566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f9eb 	bl	8009936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f9fc 	bl	800995e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b01      	cmp	r3, #1
 8009578:	d10e      	bne.n	8009598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f003 0301 	and.w	r3, r3, #1
 8009584:	2b01      	cmp	r3, #1
 8009586:	d107      	bne.n	8009598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f06f 0201 	mvn.w	r2, #1
 8009590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7fb fcf2 	bl	8004f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095a2:	2b80      	cmp	r3, #128	; 0x80
 80095a4:	d10e      	bne.n	80095c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095b0:	2b80      	cmp	r3, #128	; 0x80
 80095b2:	d107      	bne.n	80095c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fd78 	bl	800a0b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ce:	2b40      	cmp	r3, #64	; 0x40
 80095d0:	d10e      	bne.n	80095f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095dc:	2b40      	cmp	r3, #64	; 0x40
 80095de:	d107      	bne.n	80095f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f9c1 	bl	8009972 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	f003 0320 	and.w	r3, r3, #32
 80095fa:	2b20      	cmp	r3, #32
 80095fc:	d10e      	bne.n	800961c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f003 0320 	and.w	r3, r3, #32
 8009608:	2b20      	cmp	r3, #32
 800960a:	d107      	bne.n	800961c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f06f 0220 	mvn.w	r2, #32
 8009614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fd42 	bl	800a0a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800961c:	bf00      	nop
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800963a:	2b01      	cmp	r3, #1
 800963c:	d101      	bne.n	8009642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800963e:	2302      	movs	r3, #2
 8009640:	e0ae      	b.n	80097a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2b0c      	cmp	r3, #12
 800964e:	f200 809f 	bhi.w	8009790 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009652:	a201      	add	r2, pc, #4	; (adr r2, 8009658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009658:	0800968d 	.word	0x0800968d
 800965c:	08009791 	.word	0x08009791
 8009660:	08009791 	.word	0x08009791
 8009664:	08009791 	.word	0x08009791
 8009668:	080096cd 	.word	0x080096cd
 800966c:	08009791 	.word	0x08009791
 8009670:	08009791 	.word	0x08009791
 8009674:	08009791 	.word	0x08009791
 8009678:	0800970f 	.word	0x0800970f
 800967c:	08009791 	.word	0x08009791
 8009680:	08009791 	.word	0x08009791
 8009684:	08009791 	.word	0x08009791
 8009688:	0800974f 	.word	0x0800974f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68b9      	ldr	r1, [r7, #8]
 8009692:	4618      	mov	r0, r3
 8009694:	f000 f9f8 	bl	8009a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	699a      	ldr	r2, [r3, #24]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f042 0208 	orr.w	r2, r2, #8
 80096a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	699a      	ldr	r2, [r3, #24]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f022 0204 	bic.w	r2, r2, #4
 80096b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	6999      	ldr	r1, [r3, #24]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	691a      	ldr	r2, [r3, #16]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	430a      	orrs	r2, r1
 80096c8:	619a      	str	r2, [r3, #24]
      break;
 80096ca:	e064      	b.n	8009796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68b9      	ldr	r1, [r7, #8]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 fa3e 	bl	8009b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	699a      	ldr	r2, [r3, #24]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	699a      	ldr	r2, [r3, #24]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	6999      	ldr	r1, [r3, #24]
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	021a      	lsls	r2, r3, #8
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	430a      	orrs	r2, r1
 800970a:	619a      	str	r2, [r3, #24]
      break;
 800970c:	e043      	b.n	8009796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68b9      	ldr	r1, [r7, #8]
 8009714:	4618      	mov	r0, r3
 8009716:	f000 fa89 	bl	8009c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	69da      	ldr	r2, [r3, #28]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f042 0208 	orr.w	r2, r2, #8
 8009728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	69da      	ldr	r2, [r3, #28]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f022 0204 	bic.w	r2, r2, #4
 8009738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	69d9      	ldr	r1, [r3, #28]
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	691a      	ldr	r2, [r3, #16]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	430a      	orrs	r2, r1
 800974a:	61da      	str	r2, [r3, #28]
      break;
 800974c:	e023      	b.n	8009796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	68b9      	ldr	r1, [r7, #8]
 8009754:	4618      	mov	r0, r3
 8009756:	f000 fad3 	bl	8009d00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	69da      	ldr	r2, [r3, #28]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	69da      	ldr	r2, [r3, #28]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	69d9      	ldr	r1, [r3, #28]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	021a      	lsls	r2, r3, #8
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	430a      	orrs	r2, r1
 800978c:	61da      	str	r2, [r3, #28]
      break;
 800978e:	e002      	b.n	8009796 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	75fb      	strb	r3, [r7, #23]
      break;
 8009794:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800979e:	7dfb      	ldrb	r3, [r7, #23]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3718      	adds	r7, #24
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d101      	bne.n	80097c4 <HAL_TIM_ConfigClockSource+0x1c>
 80097c0:	2302      	movs	r3, #2
 80097c2:	e0b4      	b.n	800992e <HAL_TIM_ConfigClockSource+0x186>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2202      	movs	r2, #2
 80097d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80097e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68ba      	ldr	r2, [r7, #8]
 80097f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097fc:	d03e      	beq.n	800987c <HAL_TIM_ConfigClockSource+0xd4>
 80097fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009802:	f200 8087 	bhi.w	8009914 <HAL_TIM_ConfigClockSource+0x16c>
 8009806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800980a:	f000 8086 	beq.w	800991a <HAL_TIM_ConfigClockSource+0x172>
 800980e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009812:	d87f      	bhi.n	8009914 <HAL_TIM_ConfigClockSource+0x16c>
 8009814:	2b70      	cmp	r3, #112	; 0x70
 8009816:	d01a      	beq.n	800984e <HAL_TIM_ConfigClockSource+0xa6>
 8009818:	2b70      	cmp	r3, #112	; 0x70
 800981a:	d87b      	bhi.n	8009914 <HAL_TIM_ConfigClockSource+0x16c>
 800981c:	2b60      	cmp	r3, #96	; 0x60
 800981e:	d050      	beq.n	80098c2 <HAL_TIM_ConfigClockSource+0x11a>
 8009820:	2b60      	cmp	r3, #96	; 0x60
 8009822:	d877      	bhi.n	8009914 <HAL_TIM_ConfigClockSource+0x16c>
 8009824:	2b50      	cmp	r3, #80	; 0x50
 8009826:	d03c      	beq.n	80098a2 <HAL_TIM_ConfigClockSource+0xfa>
 8009828:	2b50      	cmp	r3, #80	; 0x50
 800982a:	d873      	bhi.n	8009914 <HAL_TIM_ConfigClockSource+0x16c>
 800982c:	2b40      	cmp	r3, #64	; 0x40
 800982e:	d058      	beq.n	80098e2 <HAL_TIM_ConfigClockSource+0x13a>
 8009830:	2b40      	cmp	r3, #64	; 0x40
 8009832:	d86f      	bhi.n	8009914 <HAL_TIM_ConfigClockSource+0x16c>
 8009834:	2b30      	cmp	r3, #48	; 0x30
 8009836:	d064      	beq.n	8009902 <HAL_TIM_ConfigClockSource+0x15a>
 8009838:	2b30      	cmp	r3, #48	; 0x30
 800983a:	d86b      	bhi.n	8009914 <HAL_TIM_ConfigClockSource+0x16c>
 800983c:	2b20      	cmp	r3, #32
 800983e:	d060      	beq.n	8009902 <HAL_TIM_ConfigClockSource+0x15a>
 8009840:	2b20      	cmp	r3, #32
 8009842:	d867      	bhi.n	8009914 <HAL_TIM_ConfigClockSource+0x16c>
 8009844:	2b00      	cmp	r3, #0
 8009846:	d05c      	beq.n	8009902 <HAL_TIM_ConfigClockSource+0x15a>
 8009848:	2b10      	cmp	r3, #16
 800984a:	d05a      	beq.n	8009902 <HAL_TIM_ConfigClockSource+0x15a>
 800984c:	e062      	b.n	8009914 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6818      	ldr	r0, [r3, #0]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	6899      	ldr	r1, [r3, #8]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	f000 fb19 	bl	8009e94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	609a      	str	r2, [r3, #8]
      break;
 800987a:	e04f      	b.n	800991c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6818      	ldr	r0, [r3, #0]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	6899      	ldr	r1, [r3, #8]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	f000 fb02 	bl	8009e94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	689a      	ldr	r2, [r3, #8]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800989e:	609a      	str	r2, [r3, #8]
      break;
 80098a0:	e03c      	b.n	800991c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6818      	ldr	r0, [r3, #0]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	6859      	ldr	r1, [r3, #4]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	461a      	mov	r2, r3
 80098b0:	f000 fa76 	bl	8009da0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2150      	movs	r1, #80	; 0x50
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 facf 	bl	8009e5e <TIM_ITRx_SetConfig>
      break;
 80098c0:	e02c      	b.n	800991c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	6859      	ldr	r1, [r3, #4]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	461a      	mov	r2, r3
 80098d0:	f000 fa95 	bl	8009dfe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2160      	movs	r1, #96	; 0x60
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 fabf 	bl	8009e5e <TIM_ITRx_SetConfig>
      break;
 80098e0:	e01c      	b.n	800991c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6818      	ldr	r0, [r3, #0]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	6859      	ldr	r1, [r3, #4]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	461a      	mov	r2, r3
 80098f0:	f000 fa56 	bl	8009da0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2140      	movs	r1, #64	; 0x40
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 faaf 	bl	8009e5e <TIM_ITRx_SetConfig>
      break;
 8009900:	e00c      	b.n	800991c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4619      	mov	r1, r3
 800990c:	4610      	mov	r0, r2
 800990e:	f000 faa6 	bl	8009e5e <TIM_ITRx_SetConfig>
      break;
 8009912:	e003      	b.n	800991c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	73fb      	strb	r3, [r7, #15]
      break;
 8009918:	e000      	b.n	800991c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800991a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800992c:	7bfb      	ldrb	r3, [r7, #15]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009936:	b480      	push	{r7}
 8009938:	b083      	sub	sp, #12
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800993e:	bf00      	nop
 8009940:	370c      	adds	r7, #12
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800994a:	b480      	push	{r7}
 800994c:	b083      	sub	sp, #12
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009952:	bf00      	nop
 8009954:	370c      	adds	r7, #12
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800995e:	b480      	push	{r7}
 8009960:	b083      	sub	sp, #12
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009966:	bf00      	nop
 8009968:	370c      	adds	r7, #12
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009972:	b480      	push	{r7}
 8009974:	b083      	sub	sp, #12
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800997a:	bf00      	nop
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
	...

08009988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a34      	ldr	r2, [pc, #208]	; (8009a6c <TIM_Base_SetConfig+0xe4>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d00f      	beq.n	80099c0 <TIM_Base_SetConfig+0x38>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099a6:	d00b      	beq.n	80099c0 <TIM_Base_SetConfig+0x38>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a31      	ldr	r2, [pc, #196]	; (8009a70 <TIM_Base_SetConfig+0xe8>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d007      	beq.n	80099c0 <TIM_Base_SetConfig+0x38>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a30      	ldr	r2, [pc, #192]	; (8009a74 <TIM_Base_SetConfig+0xec>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d003      	beq.n	80099c0 <TIM_Base_SetConfig+0x38>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a2f      	ldr	r2, [pc, #188]	; (8009a78 <TIM_Base_SetConfig+0xf0>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d108      	bne.n	80099d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a25      	ldr	r2, [pc, #148]	; (8009a6c <TIM_Base_SetConfig+0xe4>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d01b      	beq.n	8009a12 <TIM_Base_SetConfig+0x8a>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e0:	d017      	beq.n	8009a12 <TIM_Base_SetConfig+0x8a>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a22      	ldr	r2, [pc, #136]	; (8009a70 <TIM_Base_SetConfig+0xe8>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d013      	beq.n	8009a12 <TIM_Base_SetConfig+0x8a>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a21      	ldr	r2, [pc, #132]	; (8009a74 <TIM_Base_SetConfig+0xec>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d00f      	beq.n	8009a12 <TIM_Base_SetConfig+0x8a>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a20      	ldr	r2, [pc, #128]	; (8009a78 <TIM_Base_SetConfig+0xf0>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d00b      	beq.n	8009a12 <TIM_Base_SetConfig+0x8a>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a1f      	ldr	r2, [pc, #124]	; (8009a7c <TIM_Base_SetConfig+0xf4>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d007      	beq.n	8009a12 <TIM_Base_SetConfig+0x8a>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a1e      	ldr	r2, [pc, #120]	; (8009a80 <TIM_Base_SetConfig+0xf8>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d003      	beq.n	8009a12 <TIM_Base_SetConfig+0x8a>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a1d      	ldr	r2, [pc, #116]	; (8009a84 <TIM_Base_SetConfig+0xfc>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d108      	bne.n	8009a24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4a08      	ldr	r2, [pc, #32]	; (8009a6c <TIM_Base_SetConfig+0xe4>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d103      	bne.n	8009a58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	691a      	ldr	r2, [r3, #16]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	615a      	str	r2, [r3, #20]
}
 8009a5e:	bf00      	nop
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	40010000 	.word	0x40010000
 8009a70:	40000400 	.word	0x40000400
 8009a74:	40000800 	.word	0x40000800
 8009a78:	40000c00 	.word	0x40000c00
 8009a7c:	40014000 	.word	0x40014000
 8009a80:	40014400 	.word	0x40014400
 8009a84:	40014800 	.word	0x40014800

08009a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	f023 0201 	bic.w	r2, r3, #1
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f023 0303 	bic.w	r3, r3, #3
 8009abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	f023 0302 	bic.w	r3, r3, #2
 8009ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a1c      	ldr	r2, [pc, #112]	; (8009b50 <TIM_OC1_SetConfig+0xc8>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d10c      	bne.n	8009afe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	f023 0308 	bic.w	r3, r3, #8
 8009aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	697a      	ldr	r2, [r7, #20]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	f023 0304 	bic.w	r3, r3, #4
 8009afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a13      	ldr	r2, [pc, #76]	; (8009b50 <TIM_OC1_SetConfig+0xc8>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d111      	bne.n	8009b2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	693a      	ldr	r2, [r7, #16]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	693a      	ldr	r2, [r7, #16]
 8009b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	685a      	ldr	r2, [r3, #4]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	697a      	ldr	r2, [r7, #20]
 8009b42:	621a      	str	r2, [r3, #32]
}
 8009b44:	bf00      	nop
 8009b46:	371c      	adds	r7, #28
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	40010000 	.word	0x40010000

08009b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b087      	sub	sp, #28
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	f023 0210 	bic.w	r2, r3, #16
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	021b      	lsls	r3, r3, #8
 8009b92:	68fa      	ldr	r2, [r7, #12]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	f023 0320 	bic.w	r3, r3, #32
 8009b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	011b      	lsls	r3, r3, #4
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a1e      	ldr	r2, [pc, #120]	; (8009c28 <TIM_OC2_SetConfig+0xd4>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d10d      	bne.n	8009bd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	011b      	lsls	r3, r3, #4
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a15      	ldr	r2, [pc, #84]	; (8009c28 <TIM_OC2_SetConfig+0xd4>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d113      	bne.n	8009c00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	695b      	ldr	r3, [r3, #20]
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	693a      	ldr	r2, [r7, #16]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	685a      	ldr	r2, [r3, #4]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	697a      	ldr	r2, [r7, #20]
 8009c18:	621a      	str	r2, [r3, #32]
}
 8009c1a:	bf00      	nop
 8009c1c:	371c      	adds	r7, #28
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	40010000 	.word	0x40010000

08009c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b087      	sub	sp, #28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	69db      	ldr	r3, [r3, #28]
 8009c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f023 0303 	bic.w	r3, r3, #3
 8009c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	021b      	lsls	r3, r3, #8
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a1d      	ldr	r2, [pc, #116]	; (8009cfc <TIM_OC3_SetConfig+0xd0>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d10d      	bne.n	8009ca6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	021b      	lsls	r3, r3, #8
 8009c98:	697a      	ldr	r2, [r7, #20]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a14      	ldr	r2, [pc, #80]	; (8009cfc <TIM_OC3_SetConfig+0xd0>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d113      	bne.n	8009cd6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	011b      	lsls	r3, r3, #4
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	011b      	lsls	r3, r3, #4
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	621a      	str	r2, [r3, #32]
}
 8009cf0:	bf00      	nop
 8009cf2:	371c      	adds	r7, #28
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	40010000 	.word	0x40010000

08009d00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b087      	sub	sp, #28
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a1b      	ldr	r3, [r3, #32]
 8009d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	69db      	ldr	r3, [r3, #28]
 8009d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	021b      	lsls	r3, r3, #8
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	031b      	lsls	r3, r3, #12
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a10      	ldr	r2, [pc, #64]	; (8009d9c <TIM_OC4_SetConfig+0x9c>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d109      	bne.n	8009d74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	019b      	lsls	r3, r3, #6
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	697a      	ldr	r2, [r7, #20]
 8009d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	685a      	ldr	r2, [r3, #4]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	621a      	str	r2, [r3, #32]
}
 8009d8e:	bf00      	nop
 8009d90:	371c      	adds	r7, #28
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	40010000 	.word	0x40010000

08009da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6a1b      	ldr	r3, [r3, #32]
 8009db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6a1b      	ldr	r3, [r3, #32]
 8009db6:	f023 0201 	bic.w	r2, r3, #1
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	011b      	lsls	r3, r3, #4
 8009dd0:	693a      	ldr	r2, [r7, #16]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	f023 030a 	bic.w	r3, r3, #10
 8009ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	621a      	str	r2, [r3, #32]
}
 8009df2:	bf00      	nop
 8009df4:	371c      	adds	r7, #28
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dfe:	b480      	push	{r7}
 8009e00:	b087      	sub	sp, #28
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	60f8      	str	r0, [r7, #12]
 8009e06:	60b9      	str	r1, [r7, #8]
 8009e08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6a1b      	ldr	r3, [r3, #32]
 8009e0e:	f023 0210 	bic.w	r2, r3, #16
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6a1b      	ldr	r3, [r3, #32]
 8009e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	031b      	lsls	r3, r3, #12
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	011b      	lsls	r3, r3, #4
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	697a      	ldr	r2, [r7, #20]
 8009e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	621a      	str	r2, [r3, #32]
}
 8009e52:	bf00      	nop
 8009e54:	371c      	adds	r7, #28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b085      	sub	sp, #20
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	f043 0307 	orr.w	r3, r3, #7
 8009e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	609a      	str	r2, [r3, #8]
}
 8009e88:	bf00      	nop
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b087      	sub	sp, #28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	021a      	lsls	r2, r3, #8
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	431a      	orrs	r2, r3
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	697a      	ldr	r2, [r7, #20]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	609a      	str	r2, [r3, #8]
}
 8009ec8:	bf00      	nop
 8009eca:	371c      	adds	r7, #28
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b087      	sub	sp, #28
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	f003 031f 	and.w	r3, r3, #31
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8009eec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6a1a      	ldr	r2, [r3, #32]
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	43db      	mvns	r3, r3
 8009ef6:	401a      	ands	r2, r3
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6a1a      	ldr	r2, [r3, #32]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	f003 031f 	and.w	r3, r3, #31
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	fa01 f303 	lsl.w	r3, r1, r3
 8009f0c:	431a      	orrs	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	621a      	str	r2, [r3, #32]
}
 8009f12:	bf00      	nop
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
	...

08009f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d101      	bne.n	8009f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f34:	2302      	movs	r3, #2
 8009f36:	e050      	b.n	8009fda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2202      	movs	r2, #2
 8009f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a1c      	ldr	r2, [pc, #112]	; (8009fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d018      	beq.n	8009fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f84:	d013      	beq.n	8009fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a18      	ldr	r2, [pc, #96]	; (8009fec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d00e      	beq.n	8009fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a16      	ldr	r2, [pc, #88]	; (8009ff0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d009      	beq.n	8009fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a15      	ldr	r2, [pc, #84]	; (8009ff4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d004      	beq.n	8009fae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a13      	ldr	r2, [pc, #76]	; (8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d10c      	bne.n	8009fc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	40010000 	.word	0x40010000
 8009fec:	40000400 	.word	0x40000400
 8009ff0:	40000800 	.word	0x40000800
 8009ff4:	40000c00 	.word	0x40000c00
 8009ff8:	40014000 	.word	0x40014000

08009ffc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a006:	2300      	movs	r3, #0
 800a008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a010:	2b01      	cmp	r3, #1
 800a012:	d101      	bne.n	800a018 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a014:	2302      	movs	r3, #2
 800a016:	e03d      	b.n	800a094 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	4313      	orrs	r3, r2
 800a03a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	4313      	orrs	r3, r2
 800a048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4313      	orrs	r3, r2
 800a056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	4313      	orrs	r3, r2
 800a064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	695b      	ldr	r3, [r3, #20]
 800a070:	4313      	orrs	r3, r2
 800a072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	4313      	orrs	r3, r2
 800a080:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e03f      	b.n	800a15a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d106      	bne.n	800a0f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7fb f97c 	bl	80053ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2224      	movs	r2, #36	; 0x24
 800a0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	68da      	ldr	r2, [r3, #12]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a10a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 ff81 	bl	800b014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	691a      	ldr	r2, [r3, #16]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a120:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	695a      	ldr	r2, [r3, #20]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a130:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68da      	ldr	r2, [r3, #12]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a140:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2220      	movs	r2, #32
 800a14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2220      	movs	r2, #32
 800a154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
	...

0800a164 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b08c      	sub	sp, #48	; 0x30
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	4613      	mov	r3, r2
 800a170:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	2b20      	cmp	r3, #32
 800a17c:	d165      	bne.n	800a24a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d002      	beq.n	800a18a <HAL_UART_Transmit_DMA+0x26>
 800a184:	88fb      	ldrh	r3, [r7, #6]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e05e      	b.n	800a24c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a194:	2b01      	cmp	r3, #1
 800a196:	d101      	bne.n	800a19c <HAL_UART_Transmit_DMA+0x38>
 800a198:	2302      	movs	r3, #2
 800a19a:	e057      	b.n	800a24c <HAL_UART_Transmit_DMA+0xe8>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	88fa      	ldrh	r2, [r7, #6]
 800a1ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	88fa      	ldrh	r2, [r7, #6]
 800a1b4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2221      	movs	r2, #33	; 0x21
 800a1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c8:	4a22      	ldr	r2, [pc, #136]	; (800a254 <HAL_UART_Transmit_DMA+0xf0>)
 800a1ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d0:	4a21      	ldr	r2, [pc, #132]	; (800a258 <HAL_UART_Transmit_DMA+0xf4>)
 800a1d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d8:	4a20      	ldr	r2, [pc, #128]	; (800a25c <HAL_UART_Transmit_DMA+0xf8>)
 800a1da:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a1e4:	f107 0308 	add.w	r3, r7, #8
 800a1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f0:	6819      	ldr	r1, [r3, #0]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	88fb      	ldrh	r3, [r7, #6]
 800a1fc:	f7fb fca0 	bl	8005b40 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a208:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	3314      	adds	r3, #20
 800a218:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	e853 3f00 	ldrex	r3, [r3]
 800a220:	617b      	str	r3, [r7, #20]
   return(result);
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a228:	62bb      	str	r3, [r7, #40]	; 0x28
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	3314      	adds	r3, #20
 800a230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a232:	627a      	str	r2, [r7, #36]	; 0x24
 800a234:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a236:	6a39      	ldr	r1, [r7, #32]
 800a238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a23a:	e841 2300 	strex	r3, r2, [r1]
 800a23e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1e5      	bne.n	800a212 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	e000      	b.n	800a24c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a24a:	2302      	movs	r3, #2
  }
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3730      	adds	r7, #48	; 0x30
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	0800a8ad 	.word	0x0800a8ad
 800a258:	0800a947 	.word	0x0800a947
 800a25c:	0800aabf 	.word	0x0800aabf

0800a260 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b08c      	sub	sp, #48	; 0x30
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	4613      	mov	r3, r2
 800a26c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b20      	cmp	r3, #32
 800a278:	d152      	bne.n	800a320 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d002      	beq.n	800a286 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a280:	88fb      	ldrh	r3, [r7, #6]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d101      	bne.n	800a28a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	e04b      	b.n	800a322 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a290:	2b01      	cmp	r3, #1
 800a292:	d101      	bne.n	800a298 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800a294:	2302      	movs	r3, #2
 800a296:	e044      	b.n	800a322 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a2a6:	88fb      	ldrh	r3, [r7, #6]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	68b9      	ldr	r1, [r7, #8]
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 fc51 	bl	800ab54 <UART_Start_Receive_DMA>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a2b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d12c      	bne.n	800a31a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d125      	bne.n	800a314 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	613b      	str	r3, [r7, #16]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	613b      	str	r3, [r7, #16]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	613b      	str	r3, [r7, #16]
 800a2dc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	330c      	adds	r3, #12
 800a2e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	e853 3f00 	ldrex	r3, [r3]
 800a2ec:	617b      	str	r3, [r7, #20]
   return(result);
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f043 0310 	orr.w	r3, r3, #16
 800a2f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	330c      	adds	r3, #12
 800a2fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2fe:	627a      	str	r2, [r7, #36]	; 0x24
 800a300:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a302:	6a39      	ldr	r1, [r7, #32]
 800a304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a306:	e841 2300 	strex	r3, r2, [r1]
 800a30a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1e5      	bne.n	800a2de <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800a312:	e002      	b.n	800a31a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a31a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a31e:	e000      	b.n	800a322 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800a320:	2302      	movs	r3, #2
  }
}
 800a322:	4618      	mov	r0, r3
 800a324:	3730      	adds	r7, #48	; 0x30
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
	...

0800a32c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b0ba      	sub	sp, #232	; 0xe8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	695b      	ldr	r3, [r3, #20]
 800a34e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a352:	2300      	movs	r3, #0
 800a354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a358:	2300      	movs	r3, #0
 800a35a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a35e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a362:	f003 030f 	and.w	r3, r3, #15
 800a366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a36a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10f      	bne.n	800a392 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a376:	f003 0320 	and.w	r3, r3, #32
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d009      	beq.n	800a392 <HAL_UART_IRQHandler+0x66>
 800a37e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a382:	f003 0320 	and.w	r3, r3, #32
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 fd87 	bl	800ae9e <UART_Receive_IT>
      return;
 800a390:	e256      	b.n	800a840 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a396:	2b00      	cmp	r3, #0
 800a398:	f000 80de 	beq.w	800a558 <HAL_UART_IRQHandler+0x22c>
 800a39c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3a0:	f003 0301 	and.w	r3, r3, #1
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d106      	bne.n	800a3b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a3a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f000 80d1 	beq.w	800a558 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a3b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00b      	beq.n	800a3da <HAL_UART_IRQHandler+0xae>
 800a3c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d005      	beq.n	800a3da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d2:	f043 0201 	orr.w	r2, r3, #1
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a3da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3de:	f003 0304 	and.w	r3, r3, #4
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00b      	beq.n	800a3fe <HAL_UART_IRQHandler+0xd2>
 800a3e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d005      	beq.n	800a3fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f6:	f043 0202 	orr.w	r2, r3, #2
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a3fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a402:	f003 0302 	and.w	r3, r3, #2
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00b      	beq.n	800a422 <HAL_UART_IRQHandler+0xf6>
 800a40a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a40e:	f003 0301 	and.w	r3, r3, #1
 800a412:	2b00      	cmp	r3, #0
 800a414:	d005      	beq.n	800a422 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41a:	f043 0204 	orr.w	r2, r3, #4
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a426:	f003 0308 	and.w	r3, r3, #8
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d011      	beq.n	800a452 <HAL_UART_IRQHandler+0x126>
 800a42e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a432:	f003 0320 	and.w	r3, r3, #32
 800a436:	2b00      	cmp	r3, #0
 800a438:	d105      	bne.n	800a446 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a43a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a43e:	f003 0301 	and.w	r3, r3, #1
 800a442:	2b00      	cmp	r3, #0
 800a444:	d005      	beq.n	800a452 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44a:	f043 0208 	orr.w	r2, r3, #8
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a456:	2b00      	cmp	r3, #0
 800a458:	f000 81ed 	beq.w	800a836 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a460:	f003 0320 	and.w	r3, r3, #32
 800a464:	2b00      	cmp	r3, #0
 800a466:	d008      	beq.n	800a47a <HAL_UART_IRQHandler+0x14e>
 800a468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a46c:	f003 0320 	and.w	r3, r3, #32
 800a470:	2b00      	cmp	r3, #0
 800a472:	d002      	beq.n	800a47a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 fd12 	bl	800ae9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	695b      	ldr	r3, [r3, #20]
 800a480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a484:	2b40      	cmp	r3, #64	; 0x40
 800a486:	bf0c      	ite	eq
 800a488:	2301      	moveq	r3, #1
 800a48a:	2300      	movne	r3, #0
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a496:	f003 0308 	and.w	r3, r3, #8
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d103      	bne.n	800a4a6 <HAL_UART_IRQHandler+0x17a>
 800a49e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d04f      	beq.n	800a546 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 fc1a 	bl	800ace0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	695b      	ldr	r3, [r3, #20]
 800a4b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b6:	2b40      	cmp	r3, #64	; 0x40
 800a4b8:	d141      	bne.n	800a53e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	3314      	adds	r3, #20
 800a4c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a4c8:	e853 3f00 	ldrex	r3, [r3]
 800a4cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a4d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a4d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	3314      	adds	r3, #20
 800a4e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a4e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a4ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a4f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a4f6:	e841 2300 	strex	r3, r2, [r1]
 800a4fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a4fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1d9      	bne.n	800a4ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d013      	beq.n	800a536 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a512:	4a7d      	ldr	r2, [pc, #500]	; (800a708 <HAL_UART_IRQHandler+0x3dc>)
 800a514:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fb fbd8 	bl	8005cd0 <HAL_DMA_Abort_IT>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d016      	beq.n	800a554 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a530:	4610      	mov	r0, r2
 800a532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a534:	e00e      	b.n	800a554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f9ae 	bl	800a898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a53c:	e00a      	b.n	800a554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f9aa 	bl	800a898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a544:	e006      	b.n	800a554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f9a6 	bl	800a898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a552:	e170      	b.n	800a836 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a554:	bf00      	nop
    return;
 800a556:	e16e      	b.n	800a836 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	f040 814a 	bne.w	800a7f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a566:	f003 0310 	and.w	r3, r3, #16
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f000 8143 	beq.w	800a7f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a574:	f003 0310 	and.w	r3, r3, #16
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f000 813c 	beq.w	800a7f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a57e:	2300      	movs	r3, #0
 800a580:	60bb      	str	r3, [r7, #8]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	60bb      	str	r3, [r7, #8]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	60bb      	str	r3, [r7, #8]
 800a592:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	695b      	ldr	r3, [r3, #20]
 800a59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a59e:	2b40      	cmp	r3, #64	; 0x40
 800a5a0:	f040 80b4 	bne.w	800a70c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a5b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 8140 	beq.w	800a83a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a5be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	f080 8139 	bcs.w	800a83a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a5ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d4:	69db      	ldr	r3, [r3, #28]
 800a5d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5da:	f000 8088 	beq.w	800a6ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	330c      	adds	r3, #12
 800a5e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a5ec:	e853 3f00 	ldrex	r3, [r3]
 800a5f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a5f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a5f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	330c      	adds	r3, #12
 800a606:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a60a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a60e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a612:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a616:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a61a:	e841 2300 	strex	r3, r2, [r1]
 800a61e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1d9      	bne.n	800a5de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	3314      	adds	r3, #20
 800a630:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a634:	e853 3f00 	ldrex	r3, [r3]
 800a638:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a63a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a63c:	f023 0301 	bic.w	r3, r3, #1
 800a640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	3314      	adds	r3, #20
 800a64a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a64e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a652:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a654:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a656:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a65a:	e841 2300 	strex	r3, r2, [r1]
 800a65e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1e1      	bne.n	800a62a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3314      	adds	r3, #20
 800a66c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a670:	e853 3f00 	ldrex	r3, [r3]
 800a674:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a67c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	3314      	adds	r3, #20
 800a686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a68a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a68c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a690:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a692:	e841 2300 	strex	r3, r2, [r1]
 800a696:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1e3      	bne.n	800a666 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2220      	movs	r2, #32
 800a6a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	330c      	adds	r3, #12
 800a6b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6b6:	e853 3f00 	ldrex	r3, [r3]
 800a6ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a6bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6be:	f023 0310 	bic.w	r3, r3, #16
 800a6c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	330c      	adds	r3, #12
 800a6cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a6d0:	65ba      	str	r2, [r7, #88]	; 0x58
 800a6d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a6d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6d8:	e841 2300 	strex	r3, r2, [r1]
 800a6dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a6de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1e3      	bne.n	800a6ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7fb fa81 	bl	8005bf0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f7f9 fbde 	bl	8003ec0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a704:	e099      	b.n	800a83a <HAL_UART_IRQHandler+0x50e>
 800a706:	bf00      	nop
 800a708:	0800ada7 	.word	0x0800ada7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a714:	b29b      	uxth	r3, r3
 800a716:	1ad3      	subs	r3, r2, r3
 800a718:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a720:	b29b      	uxth	r3, r3
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 808b 	beq.w	800a83e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f000 8086 	beq.w	800a83e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	330c      	adds	r3, #12
 800a738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73c:	e853 3f00 	ldrex	r3, [r3]
 800a740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	330c      	adds	r3, #12
 800a752:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a756:	647a      	str	r2, [r7, #68]	; 0x44
 800a758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a75c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a75e:	e841 2300 	strex	r3, r2, [r1]
 800a762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1e3      	bne.n	800a732 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	3314      	adds	r3, #20
 800a770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a774:	e853 3f00 	ldrex	r3, [r3]
 800a778:	623b      	str	r3, [r7, #32]
   return(result);
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	f023 0301 	bic.w	r3, r3, #1
 800a780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	3314      	adds	r3, #20
 800a78a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a78e:	633a      	str	r2, [r7, #48]	; 0x30
 800a790:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a796:	e841 2300 	strex	r3, r2, [r1]
 800a79a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1e3      	bne.n	800a76a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2220      	movs	r2, #32
 800a7a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	330c      	adds	r3, #12
 800a7b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	e853 3f00 	ldrex	r3, [r3]
 800a7be:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f023 0310 	bic.w	r3, r3, #16
 800a7c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	330c      	adds	r3, #12
 800a7d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a7d4:	61fa      	str	r2, [r7, #28]
 800a7d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d8:	69b9      	ldr	r1, [r7, #24]
 800a7da:	69fa      	ldr	r2, [r7, #28]
 800a7dc:	e841 2300 	strex	r3, r2, [r1]
 800a7e0:	617b      	str	r3, [r7, #20]
   return(result);
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d1e3      	bne.n	800a7b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a7e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7f9 fb66 	bl	8003ec0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a7f4:	e023      	b.n	800a83e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a7f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d009      	beq.n	800a816 <HAL_UART_IRQHandler+0x4ea>
 800a802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d003      	beq.n	800a816 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fadd 	bl	800adce <UART_Transmit_IT>
    return;
 800a814:	e014      	b.n	800a840 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00e      	beq.n	800a840 <HAL_UART_IRQHandler+0x514>
 800a822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d008      	beq.n	800a840 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fb1d 	bl	800ae6e <UART_EndTransmit_IT>
    return;
 800a834:	e004      	b.n	800a840 <HAL_UART_IRQHandler+0x514>
    return;
 800a836:	bf00      	nop
 800a838:	e002      	b.n	800a840 <HAL_UART_IRQHandler+0x514>
      return;
 800a83a:	bf00      	nop
 800a83c:	e000      	b.n	800a840 <HAL_UART_IRQHandler+0x514>
      return;
 800a83e:	bf00      	nop
  }
}
 800a840:	37e8      	adds	r7, #232	; 0xe8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop

0800a848 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a864:	bf00      	nop
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a878:	bf00      	nop
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a88c:	bf00      	nop
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b090      	sub	sp, #64	; 0x40
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d137      	bne.n	800a938 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a8ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3314      	adds	r3, #20
 800a8d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d8:	e853 3f00 	ldrex	r3, [r3]
 800a8dc:	623b      	str	r3, [r7, #32]
   return(result);
 800a8de:	6a3b      	ldr	r3, [r7, #32]
 800a8e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8e4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	3314      	adds	r3, #20
 800a8ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8ee:	633a      	str	r2, [r7, #48]	; 0x30
 800a8f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8f6:	e841 2300 	strex	r3, r2, [r1]
 800a8fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1e5      	bne.n	800a8ce <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	330c      	adds	r3, #12
 800a908:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	e853 3f00 	ldrex	r3, [r3]
 800a910:	60fb      	str	r3, [r7, #12]
   return(result);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a918:	637b      	str	r3, [r7, #52]	; 0x34
 800a91a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	330c      	adds	r3, #12
 800a920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a922:	61fa      	str	r2, [r7, #28]
 800a924:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a926:	69b9      	ldr	r1, [r7, #24]
 800a928:	69fa      	ldr	r2, [r7, #28]
 800a92a:	e841 2300 	strex	r3, r2, [r1]
 800a92e:	617b      	str	r3, [r7, #20]
   return(result);
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1e5      	bne.n	800a902 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a936:	e002      	b.n	800a93e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a938:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a93a:	f7ff ff85 	bl	800a848 <HAL_UART_TxCpltCallback>
}
 800a93e:	bf00      	nop
 800a940:	3740      	adds	r7, #64	; 0x40
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b084      	sub	sp, #16
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a952:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f7ff ff81 	bl	800a85c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a95a:	bf00      	nop
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b09c      	sub	sp, #112	; 0x70
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d172      	bne.n	800aa64 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a97e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a980:	2200      	movs	r2, #0
 800a982:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	330c      	adds	r3, #12
 800a98a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a98e:	e853 3f00 	ldrex	r3, [r3]
 800a992:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a996:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a99a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a99c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	330c      	adds	r3, #12
 800a9a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a9a4:	65ba      	str	r2, [r7, #88]	; 0x58
 800a9a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a9aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9ac:	e841 2300 	strex	r3, r2, [r1]
 800a9b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a9b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1e5      	bne.n	800a984 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	3314      	adds	r3, #20
 800a9be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c2:	e853 3f00 	ldrex	r3, [r3]
 800a9c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ca:	f023 0301 	bic.w	r3, r3, #1
 800a9ce:	667b      	str	r3, [r7, #100]	; 0x64
 800a9d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	3314      	adds	r3, #20
 800a9d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a9d8:	647a      	str	r2, [r7, #68]	; 0x44
 800a9da:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a9de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9e0:	e841 2300 	strex	r3, r2, [r1]
 800a9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1e5      	bne.n	800a9b8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	3314      	adds	r3, #20
 800a9f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f6:	e853 3f00 	ldrex	r3, [r3]
 800a9fa:	623b      	str	r3, [r7, #32]
   return(result);
 800a9fc:	6a3b      	ldr	r3, [r7, #32]
 800a9fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa02:	663b      	str	r3, [r7, #96]	; 0x60
 800aa04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	3314      	adds	r3, #20
 800aa0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa0c:	633a      	str	r2, [r7, #48]	; 0x30
 800aa0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa14:	e841 2300 	strex	r3, r2, [r1]
 800aa18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1e5      	bne.n	800a9ec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa22:	2220      	movs	r2, #32
 800aa24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d119      	bne.n	800aa64 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	330c      	adds	r3, #12
 800aa36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	e853 3f00 	ldrex	r3, [r3]
 800aa3e:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f023 0310 	bic.w	r3, r3, #16
 800aa46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	330c      	adds	r3, #12
 800aa4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa50:	61fa      	str	r2, [r7, #28]
 800aa52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa54:	69b9      	ldr	r1, [r7, #24]
 800aa56:	69fa      	ldr	r2, [r7, #28]
 800aa58:	e841 2300 	strex	r3, r2, [r1]
 800aa5c:	617b      	str	r3, [r7, #20]
   return(result);
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1e5      	bne.n	800aa30 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d106      	bne.n	800aa7a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa70:	4619      	mov	r1, r3
 800aa72:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aa74:	f7f9 fa24 	bl	8003ec0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa78:	e002      	b.n	800aa80 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800aa7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aa7c:	f7ff fef8 	bl	800a870 <HAL_UART_RxCpltCallback>
}
 800aa80:	bf00      	nop
 800aa82:	3770      	adds	r7, #112	; 0x70
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa94:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d108      	bne.n	800aab0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aaa2:	085b      	lsrs	r3, r3, #1
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f7f9 fa09 	bl	8003ec0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aaae:	e002      	b.n	800aab6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f7ff fee7 	bl	800a884 <HAL_UART_RxHalfCpltCallback>
}
 800aab6:	bf00      	nop
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b084      	sub	sp, #16
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800aac6:	2300      	movs	r3, #0
 800aac8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aace:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	695b      	ldr	r3, [r3, #20]
 800aad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aada:	2b80      	cmp	r3, #128	; 0x80
 800aadc:	bf0c      	ite	eq
 800aade:	2301      	moveq	r3, #1
 800aae0:	2300      	movne	r3, #0
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	2b21      	cmp	r3, #33	; 0x21
 800aaf0:	d108      	bne.n	800ab04 <UART_DMAError+0x46>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d005      	beq.n	800ab04 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2200      	movs	r2, #0
 800aafc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800aafe:	68b8      	ldr	r0, [r7, #8]
 800ab00:	f000 f8c6 	bl	800ac90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab0e:	2b40      	cmp	r3, #64	; 0x40
 800ab10:	bf0c      	ite	eq
 800ab12:	2301      	moveq	r3, #1
 800ab14:	2300      	movne	r3, #0
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	2b22      	cmp	r3, #34	; 0x22
 800ab24:	d108      	bne.n	800ab38 <UART_DMAError+0x7a>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d005      	beq.n	800ab38 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ab32:	68b8      	ldr	r0, [r7, #8]
 800ab34:	f000 f8d4 	bl	800ace0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3c:	f043 0210 	orr.w	r2, r3, #16
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab44:	68b8      	ldr	r0, [r7, #8]
 800ab46:	f7ff fea7 	bl	800a898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab4a:	bf00      	nop
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
	...

0800ab54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b098      	sub	sp, #96	; 0x60
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ab62:	68ba      	ldr	r2, [r7, #8]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	88fa      	ldrh	r2, [r7, #6]
 800ab6c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2222      	movs	r2, #34	; 0x22
 800ab78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab80:	4a40      	ldr	r2, [pc, #256]	; (800ac84 <UART_Start_Receive_DMA+0x130>)
 800ab82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab88:	4a3f      	ldr	r2, [pc, #252]	; (800ac88 <UART_Start_Receive_DMA+0x134>)
 800ab8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab90:	4a3e      	ldr	r2, [pc, #248]	; (800ac8c <UART_Start_Receive_DMA+0x138>)
 800ab92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab98:	2200      	movs	r2, #0
 800ab9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ab9c:	f107 0308 	add.w	r3, r7, #8
 800aba0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	3304      	adds	r3, #4
 800abac:	4619      	mov	r1, r3
 800abae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	88fb      	ldrh	r3, [r7, #6]
 800abb4:	f7fa ffc4 	bl	8005b40 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800abb8:	2300      	movs	r3, #0
 800abba:	613b      	str	r3, [r7, #16]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	613b      	str	r3, [r7, #16]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	613b      	str	r3, [r7, #16]
 800abcc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d019      	beq.n	800ac12 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	330c      	adds	r3, #12
 800abe4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abe8:	e853 3f00 	ldrex	r3, [r3]
 800abec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800abee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abf4:	65bb      	str	r3, [r7, #88]	; 0x58
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	330c      	adds	r3, #12
 800abfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800abfe:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ac00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ac04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac06:	e841 2300 	strex	r3, r2, [r1]
 800ac0a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ac0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1e5      	bne.n	800abde <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	3314      	adds	r3, #20
 800ac18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1c:	e853 3f00 	ldrex	r3, [r3]
 800ac20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac24:	f043 0301 	orr.w	r3, r3, #1
 800ac28:	657b      	str	r3, [r7, #84]	; 0x54
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3314      	adds	r3, #20
 800ac30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac32:	63ba      	str	r2, [r7, #56]	; 0x38
 800ac34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ac38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac3a:	e841 2300 	strex	r3, r2, [r1]
 800ac3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1e5      	bne.n	800ac12 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	3314      	adds	r3, #20
 800ac4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	e853 3f00 	ldrex	r3, [r3]
 800ac54:	617b      	str	r3, [r7, #20]
   return(result);
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac5c:	653b      	str	r3, [r7, #80]	; 0x50
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	3314      	adds	r3, #20
 800ac64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac66:	627a      	str	r2, [r7, #36]	; 0x24
 800ac68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6a:	6a39      	ldr	r1, [r7, #32]
 800ac6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac6e:	e841 2300 	strex	r3, r2, [r1]
 800ac72:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1e5      	bne.n	800ac46 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3760      	adds	r7, #96	; 0x60
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	0800a963 	.word	0x0800a963
 800ac88:	0800aa89 	.word	0x0800aa89
 800ac8c:	0800aabf 	.word	0x0800aabf

0800ac90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b089      	sub	sp, #36	; 0x24
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	330c      	adds	r3, #12
 800ac9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	e853 3f00 	ldrex	r3, [r3]
 800aca6:	60bb      	str	r3, [r7, #8]
   return(result);
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800acae:	61fb      	str	r3, [r7, #28]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	330c      	adds	r3, #12
 800acb6:	69fa      	ldr	r2, [r7, #28]
 800acb8:	61ba      	str	r2, [r7, #24]
 800acba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acbc:	6979      	ldr	r1, [r7, #20]
 800acbe:	69ba      	ldr	r2, [r7, #24]
 800acc0:	e841 2300 	strex	r3, r2, [r1]
 800acc4:	613b      	str	r3, [r7, #16]
   return(result);
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d1e5      	bne.n	800ac98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2220      	movs	r2, #32
 800acd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800acd4:	bf00      	nop
 800acd6:	3724      	adds	r7, #36	; 0x24
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b095      	sub	sp, #84	; 0x54
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	330c      	adds	r3, #12
 800acee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acf2:	e853 3f00 	ldrex	r3, [r3]
 800acf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800acf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800acfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	330c      	adds	r3, #12
 800ad06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad08:	643a      	str	r2, [r7, #64]	; 0x40
 800ad0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad10:	e841 2300 	strex	r3, r2, [r1]
 800ad14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d1e5      	bne.n	800ace8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	3314      	adds	r3, #20
 800ad22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad24:	6a3b      	ldr	r3, [r7, #32]
 800ad26:	e853 3f00 	ldrex	r3, [r3]
 800ad2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	f023 0301 	bic.w	r3, r3, #1
 800ad32:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	3314      	adds	r3, #20
 800ad3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad44:	e841 2300 	strex	r3, r2, [r1]
 800ad48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1e5      	bne.n	800ad1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d119      	bne.n	800ad8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	330c      	adds	r3, #12
 800ad5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	e853 3f00 	ldrex	r3, [r3]
 800ad66:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	f023 0310 	bic.w	r3, r3, #16
 800ad6e:	647b      	str	r3, [r7, #68]	; 0x44
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	330c      	adds	r3, #12
 800ad76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad78:	61ba      	str	r2, [r7, #24]
 800ad7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7c:	6979      	ldr	r1, [r7, #20]
 800ad7e:	69ba      	ldr	r2, [r7, #24]
 800ad80:	e841 2300 	strex	r3, r2, [r1]
 800ad84:	613b      	str	r3, [r7, #16]
   return(result);
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e5      	bne.n	800ad58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2220      	movs	r2, #32
 800ad90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ad9a:	bf00      	nop
 800ad9c:	3754      	adds	r7, #84	; 0x54
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b084      	sub	sp, #16
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f7ff fd69 	bl	800a898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adc6:	bf00      	nop
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800adce:	b480      	push	{r7}
 800add0:	b085      	sub	sp, #20
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800addc:	b2db      	uxtb	r3, r3
 800adde:	2b21      	cmp	r3, #33	; 0x21
 800ade0:	d13e      	bne.n	800ae60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adea:	d114      	bne.n	800ae16 <UART_Transmit_IT+0x48>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	691b      	ldr	r3, [r3, #16]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d110      	bne.n	800ae16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a1b      	ldr	r3, [r3, #32]
 800adf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	881b      	ldrh	r3, [r3, #0]
 800adfe:	461a      	mov	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a1b      	ldr	r3, [r3, #32]
 800ae0e:	1c9a      	adds	r2, r3, #2
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	621a      	str	r2, [r3, #32]
 800ae14:	e008      	b.n	800ae28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	1c59      	adds	r1, r3, #1
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	6211      	str	r1, [r2, #32]
 800ae20:	781a      	ldrb	r2, [r3, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	4619      	mov	r1, r3
 800ae36:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10f      	bne.n	800ae5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68da      	ldr	r2, [r3, #12]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	68da      	ldr	r2, [r3, #12]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	e000      	b.n	800ae62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ae60:	2302      	movs	r3, #2
  }
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3714      	adds	r7, #20
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b082      	sub	sp, #8
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68da      	ldr	r2, [r3, #12]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2220      	movs	r2, #32
 800ae8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f7ff fcda 	bl	800a848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3708      	adds	r7, #8
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b08c      	sub	sp, #48	; 0x30
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	2b22      	cmp	r3, #34	; 0x22
 800aeb0:	f040 80ab 	bne.w	800b00a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aebc:	d117      	bne.n	800aeee <UART_Receive_IT+0x50>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	691b      	ldr	r3, [r3, #16]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d113      	bne.n	800aeee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aec6:	2300      	movs	r3, #0
 800aec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aece:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aedc:	b29a      	uxth	r2, r3
 800aede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee6:	1c9a      	adds	r2, r3, #2
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	629a      	str	r2, [r3, #40]	; 0x28
 800aeec:	e026      	b.n	800af3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800aef4:	2300      	movs	r3, #0
 800aef6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af00:	d007      	beq.n	800af12 <UART_Receive_IT+0x74>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d10a      	bne.n	800af20 <UART_Receive_IT+0x82>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d106      	bne.n	800af20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	b2da      	uxtb	r2, r3
 800af1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1c:	701a      	strb	r2, [r3, #0]
 800af1e:	e008      	b.n	800af32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	b2db      	uxtb	r3, r3
 800af28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af2c:	b2da      	uxtb	r2, r3
 800af2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af36:	1c5a      	adds	r2, r3, #1
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af40:	b29b      	uxth	r3, r3
 800af42:	3b01      	subs	r3, #1
 800af44:	b29b      	uxth	r3, r3
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	4619      	mov	r1, r3
 800af4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d15a      	bne.n	800b006 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68da      	ldr	r2, [r3, #12]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f022 0220 	bic.w	r2, r2, #32
 800af5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	68da      	ldr	r2, [r3, #12]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	695a      	ldr	r2, [r3, #20]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f022 0201 	bic.w	r2, r2, #1
 800af7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2220      	movs	r2, #32
 800af84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d135      	bne.n	800affc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	330c      	adds	r3, #12
 800af9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	e853 3f00 	ldrex	r3, [r3]
 800afa4:	613b      	str	r3, [r7, #16]
   return(result);
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	f023 0310 	bic.w	r3, r3, #16
 800afac:	627b      	str	r3, [r7, #36]	; 0x24
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	330c      	adds	r3, #12
 800afb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afb6:	623a      	str	r2, [r7, #32]
 800afb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afba:	69f9      	ldr	r1, [r7, #28]
 800afbc:	6a3a      	ldr	r2, [r7, #32]
 800afbe:	e841 2300 	strex	r3, r2, [r1]
 800afc2:	61bb      	str	r3, [r7, #24]
   return(result);
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1e5      	bne.n	800af96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f003 0310 	and.w	r3, r3, #16
 800afd4:	2b10      	cmp	r3, #16
 800afd6:	d10a      	bne.n	800afee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800afd8:	2300      	movs	r3, #0
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	60fb      	str	r3, [r7, #12]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	60fb      	str	r3, [r7, #12]
 800afec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aff2:	4619      	mov	r1, r3
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f7f8 ff63 	bl	8003ec0 <HAL_UARTEx_RxEventCallback>
 800affa:	e002      	b.n	800b002 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7ff fc37 	bl	800a870 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b002:	2300      	movs	r3, #0
 800b004:	e002      	b.n	800b00c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b006:	2300      	movs	r3, #0
 800b008:	e000      	b.n	800b00c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b00a:	2302      	movs	r3, #2
  }
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3730      	adds	r7, #48	; 0x30
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b018:	b0c0      	sub	sp, #256	; 0x100
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b02c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b030:	68d9      	ldr	r1, [r3, #12]
 800b032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	ea40 0301 	orr.w	r3, r0, r1
 800b03c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b03e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b042:	689a      	ldr	r2, [r3, #8]
 800b044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	431a      	orrs	r2, r3
 800b04c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b050:	695b      	ldr	r3, [r3, #20]
 800b052:	431a      	orrs	r2, r3
 800b054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b058:	69db      	ldr	r3, [r3, #28]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b06c:	f021 010c 	bic.w	r1, r1, #12
 800b070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b07a:	430b      	orrs	r3, r1
 800b07c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b07e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b08a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b08e:	6999      	ldr	r1, [r3, #24]
 800b090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	ea40 0301 	orr.w	r3, r0, r1
 800b09a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b09c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	4b8f      	ldr	r3, [pc, #572]	; (800b2e0 <UART_SetConfig+0x2cc>)
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d005      	beq.n	800b0b4 <UART_SetConfig+0xa0>
 800b0a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	4b8d      	ldr	r3, [pc, #564]	; (800b2e4 <UART_SetConfig+0x2d0>)
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d104      	bne.n	800b0be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b0b4:	f7fd fe86 	bl	8008dc4 <HAL_RCC_GetPCLK2Freq>
 800b0b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b0bc:	e003      	b.n	800b0c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b0be:	f7fd fe6d 	bl	8008d9c <HAL_RCC_GetPCLK1Freq>
 800b0c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0ca:	69db      	ldr	r3, [r3, #28]
 800b0cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0d0:	f040 810c 	bne.w	800b2ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b0d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b0de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b0e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b0e6:	4622      	mov	r2, r4
 800b0e8:	462b      	mov	r3, r5
 800b0ea:	1891      	adds	r1, r2, r2
 800b0ec:	65b9      	str	r1, [r7, #88]	; 0x58
 800b0ee:	415b      	adcs	r3, r3
 800b0f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b0f6:	4621      	mov	r1, r4
 800b0f8:	eb12 0801 	adds.w	r8, r2, r1
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	eb43 0901 	adc.w	r9, r3, r1
 800b102:	f04f 0200 	mov.w	r2, #0
 800b106:	f04f 0300 	mov.w	r3, #0
 800b10a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b10e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b116:	4690      	mov	r8, r2
 800b118:	4699      	mov	r9, r3
 800b11a:	4623      	mov	r3, r4
 800b11c:	eb18 0303 	adds.w	r3, r8, r3
 800b120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b124:	462b      	mov	r3, r5
 800b126:	eb49 0303 	adc.w	r3, r9, r3
 800b12a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b13a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b13e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b142:	460b      	mov	r3, r1
 800b144:	18db      	adds	r3, r3, r3
 800b146:	653b      	str	r3, [r7, #80]	; 0x50
 800b148:	4613      	mov	r3, r2
 800b14a:	eb42 0303 	adc.w	r3, r2, r3
 800b14e:	657b      	str	r3, [r7, #84]	; 0x54
 800b150:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b154:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b158:	f7f5 fc7c 	bl	8000a54 <__aeabi_uldivmod>
 800b15c:	4602      	mov	r2, r0
 800b15e:	460b      	mov	r3, r1
 800b160:	4b61      	ldr	r3, [pc, #388]	; (800b2e8 <UART_SetConfig+0x2d4>)
 800b162:	fba3 2302 	umull	r2, r3, r3, r2
 800b166:	095b      	lsrs	r3, r3, #5
 800b168:	011c      	lsls	r4, r3, #4
 800b16a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b16e:	2200      	movs	r2, #0
 800b170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b174:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b178:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b17c:	4642      	mov	r2, r8
 800b17e:	464b      	mov	r3, r9
 800b180:	1891      	adds	r1, r2, r2
 800b182:	64b9      	str	r1, [r7, #72]	; 0x48
 800b184:	415b      	adcs	r3, r3
 800b186:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b188:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b18c:	4641      	mov	r1, r8
 800b18e:	eb12 0a01 	adds.w	sl, r2, r1
 800b192:	4649      	mov	r1, r9
 800b194:	eb43 0b01 	adc.w	fp, r3, r1
 800b198:	f04f 0200 	mov.w	r2, #0
 800b19c:	f04f 0300 	mov.w	r3, #0
 800b1a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b1a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b1a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b1ac:	4692      	mov	sl, r2
 800b1ae:	469b      	mov	fp, r3
 800b1b0:	4643      	mov	r3, r8
 800b1b2:	eb1a 0303 	adds.w	r3, sl, r3
 800b1b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1ba:	464b      	mov	r3, r9
 800b1bc:	eb4b 0303 	adc.w	r3, fp, r3
 800b1c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b1c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b1d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b1d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b1d8:	460b      	mov	r3, r1
 800b1da:	18db      	adds	r3, r3, r3
 800b1dc:	643b      	str	r3, [r7, #64]	; 0x40
 800b1de:	4613      	mov	r3, r2
 800b1e0:	eb42 0303 	adc.w	r3, r2, r3
 800b1e4:	647b      	str	r3, [r7, #68]	; 0x44
 800b1e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b1ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b1ee:	f7f5 fc31 	bl	8000a54 <__aeabi_uldivmod>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	4611      	mov	r1, r2
 800b1f8:	4b3b      	ldr	r3, [pc, #236]	; (800b2e8 <UART_SetConfig+0x2d4>)
 800b1fa:	fba3 2301 	umull	r2, r3, r3, r1
 800b1fe:	095b      	lsrs	r3, r3, #5
 800b200:	2264      	movs	r2, #100	; 0x64
 800b202:	fb02 f303 	mul.w	r3, r2, r3
 800b206:	1acb      	subs	r3, r1, r3
 800b208:	00db      	lsls	r3, r3, #3
 800b20a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b20e:	4b36      	ldr	r3, [pc, #216]	; (800b2e8 <UART_SetConfig+0x2d4>)
 800b210:	fba3 2302 	umull	r2, r3, r3, r2
 800b214:	095b      	lsrs	r3, r3, #5
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b21c:	441c      	add	r4, r3
 800b21e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b222:	2200      	movs	r2, #0
 800b224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b228:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b22c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b230:	4642      	mov	r2, r8
 800b232:	464b      	mov	r3, r9
 800b234:	1891      	adds	r1, r2, r2
 800b236:	63b9      	str	r1, [r7, #56]	; 0x38
 800b238:	415b      	adcs	r3, r3
 800b23a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b23c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b240:	4641      	mov	r1, r8
 800b242:	1851      	adds	r1, r2, r1
 800b244:	6339      	str	r1, [r7, #48]	; 0x30
 800b246:	4649      	mov	r1, r9
 800b248:	414b      	adcs	r3, r1
 800b24a:	637b      	str	r3, [r7, #52]	; 0x34
 800b24c:	f04f 0200 	mov.w	r2, #0
 800b250:	f04f 0300 	mov.w	r3, #0
 800b254:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b258:	4659      	mov	r1, fp
 800b25a:	00cb      	lsls	r3, r1, #3
 800b25c:	4651      	mov	r1, sl
 800b25e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b262:	4651      	mov	r1, sl
 800b264:	00ca      	lsls	r2, r1, #3
 800b266:	4610      	mov	r0, r2
 800b268:	4619      	mov	r1, r3
 800b26a:	4603      	mov	r3, r0
 800b26c:	4642      	mov	r2, r8
 800b26e:	189b      	adds	r3, r3, r2
 800b270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b274:	464b      	mov	r3, r9
 800b276:	460a      	mov	r2, r1
 800b278:	eb42 0303 	adc.w	r3, r2, r3
 800b27c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b28c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b290:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b294:	460b      	mov	r3, r1
 800b296:	18db      	adds	r3, r3, r3
 800b298:	62bb      	str	r3, [r7, #40]	; 0x28
 800b29a:	4613      	mov	r3, r2
 800b29c:	eb42 0303 	adc.w	r3, r2, r3
 800b2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b2a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b2aa:	f7f5 fbd3 	bl	8000a54 <__aeabi_uldivmod>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	4b0d      	ldr	r3, [pc, #52]	; (800b2e8 <UART_SetConfig+0x2d4>)
 800b2b4:	fba3 1302 	umull	r1, r3, r3, r2
 800b2b8:	095b      	lsrs	r3, r3, #5
 800b2ba:	2164      	movs	r1, #100	; 0x64
 800b2bc:	fb01 f303 	mul.w	r3, r1, r3
 800b2c0:	1ad3      	subs	r3, r2, r3
 800b2c2:	00db      	lsls	r3, r3, #3
 800b2c4:	3332      	adds	r3, #50	; 0x32
 800b2c6:	4a08      	ldr	r2, [pc, #32]	; (800b2e8 <UART_SetConfig+0x2d4>)
 800b2c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b2cc:	095b      	lsrs	r3, r3, #5
 800b2ce:	f003 0207 	and.w	r2, r3, #7
 800b2d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4422      	add	r2, r4
 800b2da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b2dc:	e105      	b.n	800b4ea <UART_SetConfig+0x4d6>
 800b2de:	bf00      	nop
 800b2e0:	40011000 	.word	0x40011000
 800b2e4:	40011400 	.word	0x40011400
 800b2e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b2ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b2f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b2fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b2fe:	4642      	mov	r2, r8
 800b300:	464b      	mov	r3, r9
 800b302:	1891      	adds	r1, r2, r2
 800b304:	6239      	str	r1, [r7, #32]
 800b306:	415b      	adcs	r3, r3
 800b308:	627b      	str	r3, [r7, #36]	; 0x24
 800b30a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b30e:	4641      	mov	r1, r8
 800b310:	1854      	adds	r4, r2, r1
 800b312:	4649      	mov	r1, r9
 800b314:	eb43 0501 	adc.w	r5, r3, r1
 800b318:	f04f 0200 	mov.w	r2, #0
 800b31c:	f04f 0300 	mov.w	r3, #0
 800b320:	00eb      	lsls	r3, r5, #3
 800b322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b326:	00e2      	lsls	r2, r4, #3
 800b328:	4614      	mov	r4, r2
 800b32a:	461d      	mov	r5, r3
 800b32c:	4643      	mov	r3, r8
 800b32e:	18e3      	adds	r3, r4, r3
 800b330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b334:	464b      	mov	r3, r9
 800b336:	eb45 0303 	adc.w	r3, r5, r3
 800b33a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b33e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b34a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b34e:	f04f 0200 	mov.w	r2, #0
 800b352:	f04f 0300 	mov.w	r3, #0
 800b356:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b35a:	4629      	mov	r1, r5
 800b35c:	008b      	lsls	r3, r1, #2
 800b35e:	4621      	mov	r1, r4
 800b360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b364:	4621      	mov	r1, r4
 800b366:	008a      	lsls	r2, r1, #2
 800b368:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b36c:	f7f5 fb72 	bl	8000a54 <__aeabi_uldivmod>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	4b60      	ldr	r3, [pc, #384]	; (800b4f8 <UART_SetConfig+0x4e4>)
 800b376:	fba3 2302 	umull	r2, r3, r3, r2
 800b37a:	095b      	lsrs	r3, r3, #5
 800b37c:	011c      	lsls	r4, r3, #4
 800b37e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b382:	2200      	movs	r2, #0
 800b384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b388:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b38c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b390:	4642      	mov	r2, r8
 800b392:	464b      	mov	r3, r9
 800b394:	1891      	adds	r1, r2, r2
 800b396:	61b9      	str	r1, [r7, #24]
 800b398:	415b      	adcs	r3, r3
 800b39a:	61fb      	str	r3, [r7, #28]
 800b39c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b3a0:	4641      	mov	r1, r8
 800b3a2:	1851      	adds	r1, r2, r1
 800b3a4:	6139      	str	r1, [r7, #16]
 800b3a6:	4649      	mov	r1, r9
 800b3a8:	414b      	adcs	r3, r1
 800b3aa:	617b      	str	r3, [r7, #20]
 800b3ac:	f04f 0200 	mov.w	r2, #0
 800b3b0:	f04f 0300 	mov.w	r3, #0
 800b3b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b3b8:	4659      	mov	r1, fp
 800b3ba:	00cb      	lsls	r3, r1, #3
 800b3bc:	4651      	mov	r1, sl
 800b3be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3c2:	4651      	mov	r1, sl
 800b3c4:	00ca      	lsls	r2, r1, #3
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	4642      	mov	r2, r8
 800b3ce:	189b      	adds	r3, r3, r2
 800b3d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b3d4:	464b      	mov	r3, r9
 800b3d6:	460a      	mov	r2, r1
 800b3d8:	eb42 0303 	adc.w	r3, r2, r3
 800b3dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b3e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b3ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b3ec:	f04f 0200 	mov.w	r2, #0
 800b3f0:	f04f 0300 	mov.w	r3, #0
 800b3f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b3f8:	4649      	mov	r1, r9
 800b3fa:	008b      	lsls	r3, r1, #2
 800b3fc:	4641      	mov	r1, r8
 800b3fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b402:	4641      	mov	r1, r8
 800b404:	008a      	lsls	r2, r1, #2
 800b406:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b40a:	f7f5 fb23 	bl	8000a54 <__aeabi_uldivmod>
 800b40e:	4602      	mov	r2, r0
 800b410:	460b      	mov	r3, r1
 800b412:	4b39      	ldr	r3, [pc, #228]	; (800b4f8 <UART_SetConfig+0x4e4>)
 800b414:	fba3 1302 	umull	r1, r3, r3, r2
 800b418:	095b      	lsrs	r3, r3, #5
 800b41a:	2164      	movs	r1, #100	; 0x64
 800b41c:	fb01 f303 	mul.w	r3, r1, r3
 800b420:	1ad3      	subs	r3, r2, r3
 800b422:	011b      	lsls	r3, r3, #4
 800b424:	3332      	adds	r3, #50	; 0x32
 800b426:	4a34      	ldr	r2, [pc, #208]	; (800b4f8 <UART_SetConfig+0x4e4>)
 800b428:	fba2 2303 	umull	r2, r3, r2, r3
 800b42c:	095b      	lsrs	r3, r3, #5
 800b42e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b432:	441c      	add	r4, r3
 800b434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b438:	2200      	movs	r2, #0
 800b43a:	673b      	str	r3, [r7, #112]	; 0x70
 800b43c:	677a      	str	r2, [r7, #116]	; 0x74
 800b43e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b442:	4642      	mov	r2, r8
 800b444:	464b      	mov	r3, r9
 800b446:	1891      	adds	r1, r2, r2
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	415b      	adcs	r3, r3
 800b44c:	60fb      	str	r3, [r7, #12]
 800b44e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b452:	4641      	mov	r1, r8
 800b454:	1851      	adds	r1, r2, r1
 800b456:	6039      	str	r1, [r7, #0]
 800b458:	4649      	mov	r1, r9
 800b45a:	414b      	adcs	r3, r1
 800b45c:	607b      	str	r3, [r7, #4]
 800b45e:	f04f 0200 	mov.w	r2, #0
 800b462:	f04f 0300 	mov.w	r3, #0
 800b466:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b46a:	4659      	mov	r1, fp
 800b46c:	00cb      	lsls	r3, r1, #3
 800b46e:	4651      	mov	r1, sl
 800b470:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b474:	4651      	mov	r1, sl
 800b476:	00ca      	lsls	r2, r1, #3
 800b478:	4610      	mov	r0, r2
 800b47a:	4619      	mov	r1, r3
 800b47c:	4603      	mov	r3, r0
 800b47e:	4642      	mov	r2, r8
 800b480:	189b      	adds	r3, r3, r2
 800b482:	66bb      	str	r3, [r7, #104]	; 0x68
 800b484:	464b      	mov	r3, r9
 800b486:	460a      	mov	r2, r1
 800b488:	eb42 0303 	adc.w	r3, r2, r3
 800b48c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b48e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	663b      	str	r3, [r7, #96]	; 0x60
 800b498:	667a      	str	r2, [r7, #100]	; 0x64
 800b49a:	f04f 0200 	mov.w	r2, #0
 800b49e:	f04f 0300 	mov.w	r3, #0
 800b4a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b4a6:	4649      	mov	r1, r9
 800b4a8:	008b      	lsls	r3, r1, #2
 800b4aa:	4641      	mov	r1, r8
 800b4ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4b0:	4641      	mov	r1, r8
 800b4b2:	008a      	lsls	r2, r1, #2
 800b4b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b4b8:	f7f5 facc 	bl	8000a54 <__aeabi_uldivmod>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4b0d      	ldr	r3, [pc, #52]	; (800b4f8 <UART_SetConfig+0x4e4>)
 800b4c2:	fba3 1302 	umull	r1, r3, r3, r2
 800b4c6:	095b      	lsrs	r3, r3, #5
 800b4c8:	2164      	movs	r1, #100	; 0x64
 800b4ca:	fb01 f303 	mul.w	r3, r1, r3
 800b4ce:	1ad3      	subs	r3, r2, r3
 800b4d0:	011b      	lsls	r3, r3, #4
 800b4d2:	3332      	adds	r3, #50	; 0x32
 800b4d4:	4a08      	ldr	r2, [pc, #32]	; (800b4f8 <UART_SetConfig+0x4e4>)
 800b4d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4da:	095b      	lsrs	r3, r3, #5
 800b4dc:	f003 020f 	and.w	r2, r3, #15
 800b4e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4422      	add	r2, r4
 800b4e8:	609a      	str	r2, [r3, #8]
}
 800b4ea:	bf00      	nop
 800b4ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4f6:	bf00      	nop
 800b4f8:	51eb851f 	.word	0x51eb851f

0800b4fc <arm_mat_trans_f32>:
 800b4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b500:	8802      	ldrh	r2, [r0, #0]
 800b502:	884b      	ldrh	r3, [r1, #2]
 800b504:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b508:	684f      	ldr	r7, [r1, #4]
 800b50a:	8840      	ldrh	r0, [r0, #2]
 800b50c:	4293      	cmp	r3, r2
 800b50e:	b083      	sub	sp, #12
 800b510:	d14c      	bne.n	800b5ac <arm_mat_trans_f32+0xb0>
 800b512:	f8b1 e000 	ldrh.w	lr, [r1]
 800b516:	4586      	cmp	lr, r0
 800b518:	d148      	bne.n	800b5ac <arm_mat_trans_f32+0xb0>
 800b51a:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800b51e:	009c      	lsls	r4, r3, #2
 800b520:	f00e 0e03 	and.w	lr, lr, #3
 800b524:	fb08 f904 	mul.w	r9, r8, r4
 800b528:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800b52c:	011d      	lsls	r5, r3, #4
 800b52e:	00db      	lsls	r3, r3, #3
 800b530:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800b534:	eb07 0a04 	add.w	sl, r7, r4
 800b538:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800b53c:	9201      	str	r2, [sp, #4]
 800b53e:	9300      	str	r3, [sp, #0]
 800b540:	463b      	mov	r3, r7
 800b542:	f1b8 0f00 	cmp.w	r8, #0
 800b546:	d01d      	beq.n	800b584 <arm_mat_trans_f32+0x88>
 800b548:	9900      	ldr	r1, [sp, #0]
 800b54a:	f10c 0210 	add.w	r2, ip, #16
 800b54e:	4439      	add	r1, r7
 800b550:	4640      	mov	r0, r8
 800b552:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800b556:	601e      	str	r6, [r3, #0]
 800b558:	ed52 7a03 	vldr	s15, [r2, #-12]
 800b55c:	191e      	adds	r6, r3, r4
 800b55e:	edc6 7a00 	vstr	s15, [r6]
 800b562:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800b566:	600e      	str	r6, [r1, #0]
 800b568:	ed52 7a01 	vldr	s15, [r2, #-4]
 800b56c:	190e      	adds	r6, r1, r4
 800b56e:	3801      	subs	r0, #1
 800b570:	442b      	add	r3, r5
 800b572:	f102 0210 	add.w	r2, r2, #16
 800b576:	edc6 7a00 	vstr	s15, [r6]
 800b57a:	4429      	add	r1, r5
 800b57c:	d1e9      	bne.n	800b552 <arm_mat_trans_f32+0x56>
 800b57e:	44dc      	add	ip, fp
 800b580:	eb09 0307 	add.w	r3, r9, r7
 800b584:	f1be 0f00 	cmp.w	lr, #0
 800b588:	d009      	beq.n	800b59e <arm_mat_trans_f32+0xa2>
 800b58a:	4672      	mov	r2, lr
 800b58c:	4661      	mov	r1, ip
 800b58e:	f851 0b04 	ldr.w	r0, [r1], #4
 800b592:	6018      	str	r0, [r3, #0]
 800b594:	3a01      	subs	r2, #1
 800b596:	4423      	add	r3, r4
 800b598:	d1f9      	bne.n	800b58e <arm_mat_trans_f32+0x92>
 800b59a:	9b01      	ldr	r3, [sp, #4]
 800b59c:	449c      	add	ip, r3
 800b59e:	3704      	adds	r7, #4
 800b5a0:	4557      	cmp	r7, sl
 800b5a2:	d1cd      	bne.n	800b540 <arm_mat_trans_f32+0x44>
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	b003      	add	sp, #12
 800b5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ac:	f06f 0002 	mvn.w	r0, #2
 800b5b0:	e7f9      	b.n	800b5a6 <arm_mat_trans_f32+0xaa>
 800b5b2:	bf00      	nop

0800b5b4 <arm_mat_sub_f32>:
 800b5b4:	b4f0      	push	{r4, r5, r6, r7}
 800b5b6:	e9d1 4700 	ldrd	r4, r7, [r1]
 800b5ba:	6803      	ldr	r3, [r0, #0]
 800b5bc:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b5c0:	6856      	ldr	r6, [r2, #4]
 800b5c2:	42a3      	cmp	r3, r4
 800b5c4:	d15d      	bne.n	800b682 <arm_mat_sub_f32+0xce>
 800b5c6:	6812      	ldr	r2, [r2, #0]
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d15a      	bne.n	800b682 <arm_mat_sub_f32+0xce>
 800b5cc:	8803      	ldrh	r3, [r0, #0]
 800b5ce:	8844      	ldrh	r4, [r0, #2]
 800b5d0:	fb04 f403 	mul.w	r4, r4, r3
 800b5d4:	08a5      	lsrs	r5, r4, #2
 800b5d6:	d032      	beq.n	800b63e <arm_mat_sub_f32+0x8a>
 800b5d8:	f10c 0110 	add.w	r1, ip, #16
 800b5dc:	f107 0210 	add.w	r2, r7, #16
 800b5e0:	f106 0310 	add.w	r3, r6, #16
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	ed12 7a04 	vldr	s14, [r2, #-16]
 800b5ea:	ed51 7a04 	vldr	s15, [r1, #-16]
 800b5ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5f2:	3801      	subs	r0, #1
 800b5f4:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b5f8:	ed12 7a03 	vldr	s14, [r2, #-12]
 800b5fc:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b600:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b604:	f101 0110 	add.w	r1, r1, #16
 800b608:	ed43 7a03 	vstr	s15, [r3, #-12]
 800b60c:	ed12 7a02 	vldr	s14, [r2, #-8]
 800b610:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800b614:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b618:	f102 0210 	add.w	r2, r2, #16
 800b61c:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b620:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800b624:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800b628:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b62c:	f103 0310 	add.w	r3, r3, #16
 800b630:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800b634:	d1d7      	bne.n	800b5e6 <arm_mat_sub_f32+0x32>
 800b636:	012b      	lsls	r3, r5, #4
 800b638:	449c      	add	ip, r3
 800b63a:	441f      	add	r7, r3
 800b63c:	441e      	add	r6, r3
 800b63e:	f014 0403 	ands.w	r4, r4, #3
 800b642:	d01b      	beq.n	800b67c <arm_mat_sub_f32+0xc8>
 800b644:	eddc 7a00 	vldr	s15, [ip]
 800b648:	ed97 7a00 	vldr	s14, [r7]
 800b64c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b650:	3c01      	subs	r4, #1
 800b652:	edc6 7a00 	vstr	s15, [r6]
 800b656:	d011      	beq.n	800b67c <arm_mat_sub_f32+0xc8>
 800b658:	eddc 7a01 	vldr	s15, [ip, #4]
 800b65c:	ed97 7a01 	vldr	s14, [r7, #4]
 800b660:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b664:	2c01      	cmp	r4, #1
 800b666:	edc6 7a01 	vstr	s15, [r6, #4]
 800b66a:	d007      	beq.n	800b67c <arm_mat_sub_f32+0xc8>
 800b66c:	eddc 7a02 	vldr	s15, [ip, #8]
 800b670:	ed97 7a02 	vldr	s14, [r7, #8]
 800b674:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b678:	edc6 7a02 	vstr	s15, [r6, #8]
 800b67c:	2000      	movs	r0, #0
 800b67e:	bcf0      	pop	{r4, r5, r6, r7}
 800b680:	4770      	bx	lr
 800b682:	f06f 0002 	mvn.w	r0, #2
 800b686:	e7fa      	b.n	800b67e <arm_mat_sub_f32+0xca>

0800b688 <arm_mat_mult_f32>:
 800b688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b68c:	8845      	ldrh	r5, [r0, #2]
 800b68e:	880b      	ldrh	r3, [r1, #0]
 800b690:	8806      	ldrh	r6, [r0, #0]
 800b692:	6847      	ldr	r7, [r0, #4]
 800b694:	6854      	ldr	r4, [r2, #4]
 800b696:	6848      	ldr	r0, [r1, #4]
 800b698:	b08b      	sub	sp, #44	; 0x2c
 800b69a:	42ab      	cmp	r3, r5
 800b69c:	9109      	str	r1, [sp, #36]	; 0x24
 800b69e:	9604      	str	r6, [sp, #16]
 800b6a0:	8849      	ldrh	r1, [r1, #2]
 800b6a2:	f040 808a 	bne.w	800b7ba <arm_mat_mult_f32+0x132>
 800b6a6:	8815      	ldrh	r5, [r2, #0]
 800b6a8:	42b5      	cmp	r5, r6
 800b6aa:	f040 8086 	bne.w	800b7ba <arm_mat_mult_f32+0x132>
 800b6ae:	8852      	ldrh	r2, [r2, #2]
 800b6b0:	428a      	cmp	r2, r1
 800b6b2:	f040 8082 	bne.w	800b7ba <arm_mat_mult_f32+0x132>
 800b6b6:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800b6ba:	1d01      	adds	r1, r0, #4
 800b6bc:	0116      	lsls	r6, r2, #4
 800b6be:	9108      	str	r1, [sp, #32]
 800b6c0:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800b6c4:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800b6c8:	9101      	str	r1, [sp, #4]
 800b6ca:	fb06 f108 	mul.w	r1, r6, r8
 800b6ce:	0095      	lsls	r5, r2, #2
 800b6d0:	9103      	str	r1, [sp, #12]
 800b6d2:	00d2      	lsls	r2, r2, #3
 800b6d4:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800b6d8:	f003 0903 	and.w	r9, r3, #3
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	f107 0b10 	add.w	fp, r7, #16
 800b6e2:	eb04 0a05 	add.w	sl, r4, r5
 800b6e6:	9107      	str	r1, [sp, #28]
 800b6e8:	9202      	str	r2, [sp, #8]
 800b6ea:	9306      	str	r3, [sp, #24]
 800b6ec:	f1ab 0310 	sub.w	r3, fp, #16
 800b6f0:	9305      	str	r3, [sp, #20]
 800b6f2:	9b07      	ldr	r3, [sp, #28]
 800b6f4:	f8dd e020 	ldr.w	lr, [sp, #32]
 800b6f8:	eb03 0c0a 	add.w	ip, r3, sl
 800b6fc:	eddf 7a31 	vldr	s15, [pc, #196]	; 800b7c4 <arm_mat_mult_f32+0x13c>
 800b700:	f1b8 0f00 	cmp.w	r8, #0
 800b704:	d053      	beq.n	800b7ae <arm_mat_mult_f32+0x126>
 800b706:	9b02      	ldr	r3, [sp, #8]
 800b708:	4644      	mov	r4, r8
 800b70a:	18c1      	adds	r1, r0, r3
 800b70c:	4602      	mov	r2, r0
 800b70e:	465b      	mov	r3, fp
 800b710:	ed92 6a00 	vldr	s12, [r2]
 800b714:	ed13 7a04 	vldr	s14, [r3, #-16]
 800b718:	ed53 4a03 	vldr	s9, [r3, #-12]
 800b71c:	ed53 6a02 	vldr	s13, [r3, #-8]
 800b720:	ed91 5a00 	vldr	s10, [r1]
 800b724:	ed53 5a01 	vldr	s11, [r3, #-4]
 800b728:	1957      	adds	r7, r2, r5
 800b72a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b72e:	ed97 6a00 	vldr	s12, [r7]
 800b732:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b736:	ee26 6a24 	vmul.f32	s12, s12, s9
 800b73a:	194f      	adds	r7, r1, r5
 800b73c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800b740:	ee26 7a85 	vmul.f32	s14, s13, s10
 800b744:	edd7 7a00 	vldr	s15, [r7]
 800b748:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b74c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b750:	3c01      	subs	r4, #1
 800b752:	4432      	add	r2, r6
 800b754:	4431      	add	r1, r6
 800b756:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b75a:	f103 0310 	add.w	r3, r3, #16
 800b75e:	d1d7      	bne.n	800b710 <arm_mat_mult_f32+0x88>
 800b760:	9b03      	ldr	r3, [sp, #12]
 800b762:	9a01      	ldr	r2, [sp, #4]
 800b764:	4418      	add	r0, r3
 800b766:	f1b9 0f00 	cmp.w	r9, #0
 800b76a:	d00b      	beq.n	800b784 <arm_mat_mult_f32+0xfc>
 800b76c:	464b      	mov	r3, r9
 800b76e:	edd0 6a00 	vldr	s13, [r0]
 800b772:	ecb2 7a01 	vldmia	r2!, {s14}
 800b776:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b77a:	3b01      	subs	r3, #1
 800b77c:	4428      	add	r0, r5
 800b77e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b782:	d1f4      	bne.n	800b76e <arm_mat_mult_f32+0xe6>
 800b784:	ecec 7a01 	vstmia	ip!, {s15}
 800b788:	45d4      	cmp	ip, sl
 800b78a:	4670      	mov	r0, lr
 800b78c:	f10e 0e04 	add.w	lr, lr, #4
 800b790:	d1b4      	bne.n	800b6fc <arm_mat_mult_f32+0x74>
 800b792:	9a01      	ldr	r2, [sp, #4]
 800b794:	9b06      	ldr	r3, [sp, #24]
 800b796:	4611      	mov	r1, r2
 800b798:	4419      	add	r1, r3
 800b79a:	449b      	add	fp, r3
 800b79c:	9b04      	ldr	r3, [sp, #16]
 800b79e:	9101      	str	r1, [sp, #4]
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	44aa      	add	sl, r5
 800b7a4:	9304      	str	r3, [sp, #16]
 800b7a6:	d004      	beq.n	800b7b2 <arm_mat_mult_f32+0x12a>
 800b7a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7aa:	6858      	ldr	r0, [r3, #4]
 800b7ac:	e79e      	b.n	800b6ec <arm_mat_mult_f32+0x64>
 800b7ae:	9a05      	ldr	r2, [sp, #20]
 800b7b0:	e7d9      	b.n	800b766 <arm_mat_mult_f32+0xde>
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	b00b      	add	sp, #44	; 0x2c
 800b7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ba:	f06f 0002 	mvn.w	r0, #2
 800b7be:	b00b      	add	sp, #44	; 0x2c
 800b7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c4:	00000000 	.word	0x00000000

0800b7c8 <arm_mat_inverse_f32>:
 800b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7cc:	8843      	ldrh	r3, [r0, #2]
 800b7ce:	8804      	ldrh	r4, [r0, #0]
 800b7d0:	684e      	ldr	r6, [r1, #4]
 800b7d2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800b7d6:	b087      	sub	sp, #28
 800b7d8:	429c      	cmp	r4, r3
 800b7da:	9301      	str	r3, [sp, #4]
 800b7dc:	9603      	str	r6, [sp, #12]
 800b7de:	f040 80ea 	bne.w	800b9b6 <arm_mat_inverse_f32+0x1ee>
 800b7e2:	880a      	ldrh	r2, [r1, #0]
 800b7e4:	884b      	ldrh	r3, [r1, #2]
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	f040 80e5 	bne.w	800b9b6 <arm_mat_inverse_f32+0x1ee>
 800b7ec:	429c      	cmp	r4, r3
 800b7ee:	f040 80e2 	bne.w	800b9b6 <arm_mat_inverse_f32+0x1ee>
 800b7f2:	9005      	str	r0, [sp, #20]
 800b7f4:	b30c      	cbz	r4, 800b83a <arm_mat_inverse_f32+0x72>
 800b7f6:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800b7fa:	1e67      	subs	r7, r4, #1
 800b7fc:	f846 bb04 	str.w	fp, [r6], #4
 800b800:	d01b      	beq.n	800b83a <arm_mat_inverse_f32+0x72>
 800b802:	f04f 0801 	mov.w	r8, #1
 800b806:	00ba      	lsls	r2, r7, #2
 800b808:	eb06 0a02 	add.w	sl, r6, r2
 800b80c:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800b810:	4630      	mov	r0, r6
 800b812:	2100      	movs	r1, #0
 800b814:	f000 f97e 	bl	800bb14 <memset>
 800b818:	eb0a 0605 	add.w	r6, sl, r5
 800b81c:	462a      	mov	r2, r5
 800b81e:	2100      	movs	r1, #0
 800b820:	4650      	mov	r0, sl
 800b822:	f1b8 0f00 	cmp.w	r8, #0
 800b826:	f000 80cb 	beq.w	800b9c0 <arm_mat_inverse_f32+0x1f8>
 800b82a:	f000 f973 	bl	800bb14 <memset>
 800b82e:	3f01      	subs	r7, #1
 800b830:	f108 0801 	add.w	r8, r8, #1
 800b834:	f846 bb04 	str.w	fp, [r6], #4
 800b838:	d1e5      	bne.n	800b806 <arm_mat_inverse_f32+0x3e>
 800b83a:	9b01      	ldr	r3, [sp, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f000 80b5 	beq.w	800b9ac <arm_mat_inverse_f32+0x1e4>
 800b842:	009d      	lsls	r5, r3, #2
 800b844:	eb09 0205 	add.w	r2, r9, r5
 800b848:	46cc      	mov	ip, r9
 800b84a:	9202      	str	r2, [sp, #8]
 800b84c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b850:	1d2a      	adds	r2, r5, #4
 800b852:	9204      	str	r2, [sp, #16]
 800b854:	462f      	mov	r7, r5
 800b856:	469e      	mov	lr, r3
 800b858:	2600      	movs	r6, #0
 800b85a:	9b02      	ldr	r3, [sp, #8]
 800b85c:	eddc 6a00 	vldr	s13, [ip]
 800b860:	42b4      	cmp	r4, r6
 800b862:	eba3 0b07 	sub.w	fp, r3, r7
 800b866:	f000 80a1 	beq.w	800b9ac <arm_mat_inverse_f32+0x1e4>
 800b86a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800b9d0 <arm_mat_inverse_f32+0x208>
 800b86e:	4632      	mov	r2, r6
 800b870:	4663      	mov	r3, ip
 800b872:	e00b      	b.n	800b88c <arm_mat_inverse_f32+0xc4>
 800b874:	eef4 7a47 	vcmp.f32	s15, s14
 800b878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b87c:	f102 0201 	add.w	r2, r2, #1
 800b880:	bfc8      	it	gt
 800b882:	eeb0 7a67 	vmovgt.f32	s14, s15
 800b886:	42a2      	cmp	r2, r4
 800b888:	442b      	add	r3, r5
 800b88a:	d014      	beq.n	800b8b6 <arm_mat_inverse_f32+0xee>
 800b88c:	edd3 7a00 	vldr	s15, [r3]
 800b890:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b898:	eeb1 6a67 	vneg.f32	s12, s15
 800b89c:	dcea      	bgt.n	800b874 <arm_mat_inverse_f32+0xac>
 800b89e:	eeb4 6a47 	vcmp.f32	s12, s14
 800b8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8a6:	f102 0201 	add.w	r2, r2, #1
 800b8aa:	bfc8      	it	gt
 800b8ac:	eeb0 7a46 	vmovgt.f32	s14, s12
 800b8b0:	42a2      	cmp	r2, r4
 800b8b2:	442b      	add	r3, r5
 800b8b4:	d1ea      	bne.n	800b88c <arm_mat_inverse_f32+0xc4>
 800b8b6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8be:	d075      	beq.n	800b9ac <arm_mat_inverse_f32+0x1e4>
 800b8c0:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c8:	d070      	beq.n	800b9ac <arm_mat_inverse_f32+0x1e4>
 800b8ca:	4672      	mov	r2, lr
 800b8cc:	4663      	mov	r3, ip
 800b8ce:	ed93 7a00 	vldr	s14, [r3]
 800b8d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8d6:	3a01      	subs	r2, #1
 800b8d8:	ece3 7a01 	vstmia	r3!, {s15}
 800b8dc:	d1f7      	bne.n	800b8ce <arm_mat_inverse_f32+0x106>
 800b8de:	9901      	ldr	r1, [sp, #4]
 800b8e0:	464b      	mov	r3, r9
 800b8e2:	ed93 7a00 	vldr	s14, [r3]
 800b8e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8ea:	3901      	subs	r1, #1
 800b8ec:	ece3 7a01 	vstmia	r3!, {s15}
 800b8f0:	d1f7      	bne.n	800b8e2 <arm_mat_inverse_f32+0x11a>
 800b8f2:	9803      	ldr	r0, [sp, #12]
 800b8f4:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800b8f8:	42b1      	cmp	r1, r6
 800b8fa:	d039      	beq.n	800b970 <arm_mat_inverse_f32+0x1a8>
 800b8fc:	eddb 6a00 	vldr	s13, [fp]
 800b900:	465a      	mov	r2, fp
 800b902:	4673      	mov	r3, lr
 800b904:	46e2      	mov	sl, ip
 800b906:	ecba 7a01 	vldmia	sl!, {s14}
 800b90a:	edd2 7a00 	vldr	s15, [r2]
 800b90e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b912:	3b01      	subs	r3, #1
 800b914:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b918:	ece2 7a01 	vstmia	r2!, {s15}
 800b91c:	d1f3      	bne.n	800b906 <arm_mat_inverse_f32+0x13e>
 800b91e:	9b01      	ldr	r3, [sp, #4]
 800b920:	44bb      	add	fp, r7
 800b922:	4602      	mov	r2, r0
 800b924:	46ca      	mov	sl, r9
 800b926:	ecba 7a01 	vldmia	sl!, {s14}
 800b92a:	edd2 7a00 	vldr	s15, [r2]
 800b92e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b932:	3b01      	subs	r3, #1
 800b934:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b938:	ece2 7a01 	vstmia	r2!, {s15}
 800b93c:	d1f3      	bne.n	800b926 <arm_mat_inverse_f32+0x15e>
 800b93e:	4428      	add	r0, r5
 800b940:	3101      	adds	r1, #1
 800b942:	428c      	cmp	r4, r1
 800b944:	44c3      	add	fp, r8
 800b946:	d1d7      	bne.n	800b8f8 <arm_mat_inverse_f32+0x130>
 800b948:	9b04      	ldr	r3, [sp, #16]
 800b94a:	f1be 0e01 	subs.w	lr, lr, #1
 800b94e:	f106 0601 	add.w	r6, r6, #1
 800b952:	449c      	add	ip, r3
 800b954:	f1a7 0704 	sub.w	r7, r7, #4
 800b958:	44a9      	add	r9, r5
 800b95a:	f47f af7e 	bne.w	800b85a <arm_mat_inverse_f32+0x92>
 800b95e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b966:	d006      	beq.n	800b976 <arm_mat_inverse_f32+0x1ae>
 800b968:	2000      	movs	r0, #0
 800b96a:	b007      	add	sp, #28
 800b96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b970:	44bb      	add	fp, r7
 800b972:	4428      	add	r0, r5
 800b974:	e7e4      	b.n	800b940 <arm_mat_inverse_f32+0x178>
 800b976:	9b05      	ldr	r3, [sp, #20]
 800b978:	9a01      	ldr	r2, [sp, #4]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	edd3 7a00 	vldr	s15, [r3]
 800b980:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b984:	fb02 f204 	mul.w	r2, r2, r4
 800b988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b98c:	4614      	mov	r4, r2
 800b98e:	bf08      	it	eq
 800b990:	3304      	addeq	r3, #4
 800b992:	d007      	beq.n	800b9a4 <arm_mat_inverse_f32+0x1dc>
 800b994:	e7e8      	b.n	800b968 <arm_mat_inverse_f32+0x1a0>
 800b996:	ecf3 7a01 	vldmia	r3!, {s15}
 800b99a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9a2:	d1e1      	bne.n	800b968 <arm_mat_inverse_f32+0x1a0>
 800b9a4:	f10e 0e01 	add.w	lr, lr, #1
 800b9a8:	4574      	cmp	r4, lr
 800b9aa:	d1f4      	bne.n	800b996 <arm_mat_inverse_f32+0x1ce>
 800b9ac:	f06f 0004 	mvn.w	r0, #4
 800b9b0:	b007      	add	sp, #28
 800b9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b6:	f06f 0002 	mvn.w	r0, #2
 800b9ba:	b007      	add	sp, #28
 800b9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c0:	4656      	mov	r6, sl
 800b9c2:	3f01      	subs	r7, #1
 800b9c4:	f846 bb04 	str.w	fp, [r6], #4
 800b9c8:	f47f af1b 	bne.w	800b802 <arm_mat_inverse_f32+0x3a>
 800b9cc:	e735      	b.n	800b83a <arm_mat_inverse_f32+0x72>
 800b9ce:	bf00      	nop
 800b9d0:	00000000 	.word	0x00000000

0800b9d4 <arm_mat_init_f32>:
 800b9d4:	8001      	strh	r1, [r0, #0]
 800b9d6:	8042      	strh	r2, [r0, #2]
 800b9d8:	6043      	str	r3, [r0, #4]
 800b9da:	4770      	bx	lr

0800b9dc <arm_mat_add_f32>:
 800b9dc:	b4f0      	push	{r4, r5, r6, r7}
 800b9de:	e9d1 4700 	ldrd	r4, r7, [r1]
 800b9e2:	6803      	ldr	r3, [r0, #0]
 800b9e4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b9e8:	6856      	ldr	r6, [r2, #4]
 800b9ea:	42a3      	cmp	r3, r4
 800b9ec:	d15d      	bne.n	800baaa <arm_mat_add_f32+0xce>
 800b9ee:	6812      	ldr	r2, [r2, #0]
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d15a      	bne.n	800baaa <arm_mat_add_f32+0xce>
 800b9f4:	8803      	ldrh	r3, [r0, #0]
 800b9f6:	8844      	ldrh	r4, [r0, #2]
 800b9f8:	fb04 f403 	mul.w	r4, r4, r3
 800b9fc:	08a5      	lsrs	r5, r4, #2
 800b9fe:	d032      	beq.n	800ba66 <arm_mat_add_f32+0x8a>
 800ba00:	f10c 0110 	add.w	r1, ip, #16
 800ba04:	f107 0210 	add.w	r2, r7, #16
 800ba08:	f106 0310 	add.w	r3, r6, #16
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	ed12 7a04 	vldr	s14, [r2, #-16]
 800ba12:	ed51 7a04 	vldr	s15, [r1, #-16]
 800ba16:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba1a:	3801      	subs	r0, #1
 800ba1c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800ba20:	ed12 7a03 	vldr	s14, [r2, #-12]
 800ba24:	ed51 7a03 	vldr	s15, [r1, #-12]
 800ba28:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba2c:	f101 0110 	add.w	r1, r1, #16
 800ba30:	ed43 7a03 	vstr	s15, [r3, #-12]
 800ba34:	ed12 7a02 	vldr	s14, [r2, #-8]
 800ba38:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800ba3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba40:	f102 0210 	add.w	r2, r2, #16
 800ba44:	ed43 7a02 	vstr	s15, [r3, #-8]
 800ba48:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800ba4c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800ba50:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba54:	f103 0310 	add.w	r3, r3, #16
 800ba58:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800ba5c:	d1d7      	bne.n	800ba0e <arm_mat_add_f32+0x32>
 800ba5e:	012b      	lsls	r3, r5, #4
 800ba60:	449c      	add	ip, r3
 800ba62:	441f      	add	r7, r3
 800ba64:	441e      	add	r6, r3
 800ba66:	f014 0403 	ands.w	r4, r4, #3
 800ba6a:	d01b      	beq.n	800baa4 <arm_mat_add_f32+0xc8>
 800ba6c:	edd7 7a00 	vldr	s15, [r7]
 800ba70:	ed9c 7a00 	vldr	s14, [ip]
 800ba74:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba78:	3c01      	subs	r4, #1
 800ba7a:	edc6 7a00 	vstr	s15, [r6]
 800ba7e:	d011      	beq.n	800baa4 <arm_mat_add_f32+0xc8>
 800ba80:	eddc 7a01 	vldr	s15, [ip, #4]
 800ba84:	ed97 7a01 	vldr	s14, [r7, #4]
 800ba88:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba8c:	2c01      	cmp	r4, #1
 800ba8e:	edc6 7a01 	vstr	s15, [r6, #4]
 800ba92:	d007      	beq.n	800baa4 <arm_mat_add_f32+0xc8>
 800ba94:	eddc 7a02 	vldr	s15, [ip, #8]
 800ba98:	ed97 7a02 	vldr	s14, [r7, #8]
 800ba9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800baa0:	edc6 7a02 	vstr	s15, [r6, #8]
 800baa4:	2000      	movs	r0, #0
 800baa6:	bcf0      	pop	{r4, r5, r6, r7}
 800baa8:	4770      	bx	lr
 800baaa:	f06f 0002 	mvn.w	r0, #2
 800baae:	e7fa      	b.n	800baa6 <arm_mat_add_f32+0xca>

0800bab0 <__libc_init_array>:
 800bab0:	b570      	push	{r4, r5, r6, lr}
 800bab2:	4d0d      	ldr	r5, [pc, #52]	; (800bae8 <__libc_init_array+0x38>)
 800bab4:	4c0d      	ldr	r4, [pc, #52]	; (800baec <__libc_init_array+0x3c>)
 800bab6:	1b64      	subs	r4, r4, r5
 800bab8:	10a4      	asrs	r4, r4, #2
 800baba:	2600      	movs	r6, #0
 800babc:	42a6      	cmp	r6, r4
 800babe:	d109      	bne.n	800bad4 <__libc_init_array+0x24>
 800bac0:	4d0b      	ldr	r5, [pc, #44]	; (800baf0 <__libc_init_array+0x40>)
 800bac2:	4c0c      	ldr	r4, [pc, #48]	; (800baf4 <__libc_init_array+0x44>)
 800bac4:	f000 f82e 	bl	800bb24 <_init>
 800bac8:	1b64      	subs	r4, r4, r5
 800baca:	10a4      	asrs	r4, r4, #2
 800bacc:	2600      	movs	r6, #0
 800bace:	42a6      	cmp	r6, r4
 800bad0:	d105      	bne.n	800bade <__libc_init_array+0x2e>
 800bad2:	bd70      	pop	{r4, r5, r6, pc}
 800bad4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bad8:	4798      	blx	r3
 800bada:	3601      	adds	r6, #1
 800badc:	e7ee      	b.n	800babc <__libc_init_array+0xc>
 800bade:	f855 3b04 	ldr.w	r3, [r5], #4
 800bae2:	4798      	blx	r3
 800bae4:	3601      	adds	r6, #1
 800bae6:	e7f2      	b.n	800bace <__libc_init_array+0x1e>
 800bae8:	0800bb64 	.word	0x0800bb64
 800baec:	0800bb64 	.word	0x0800bb64
 800baf0:	0800bb64 	.word	0x0800bb64
 800baf4:	0800bb68 	.word	0x0800bb68

0800baf8 <memcpy>:
 800baf8:	440a      	add	r2, r1
 800bafa:	4291      	cmp	r1, r2
 800bafc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb00:	d100      	bne.n	800bb04 <memcpy+0xc>
 800bb02:	4770      	bx	lr
 800bb04:	b510      	push	{r4, lr}
 800bb06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb0e:	4291      	cmp	r1, r2
 800bb10:	d1f9      	bne.n	800bb06 <memcpy+0xe>
 800bb12:	bd10      	pop	{r4, pc}

0800bb14 <memset>:
 800bb14:	4402      	add	r2, r0
 800bb16:	4603      	mov	r3, r0
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d100      	bne.n	800bb1e <memset+0xa>
 800bb1c:	4770      	bx	lr
 800bb1e:	f803 1b01 	strb.w	r1, [r3], #1
 800bb22:	e7f9      	b.n	800bb18 <memset+0x4>

0800bb24 <_init>:
 800bb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb26:	bf00      	nop
 800bb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb2a:	bc08      	pop	{r3}
 800bb2c:	469e      	mov	lr, r3
 800bb2e:	4770      	bx	lr

0800bb30 <_fini>:
 800bb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb32:	bf00      	nop
 800bb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb36:	bc08      	pop	{r3}
 800bb38:	469e      	mov	lr, r3
 800bb3a:	4770      	bx	lr
