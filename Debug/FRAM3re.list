
FRAM3re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c664  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800c7fc  0800c7fc  0001c7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c81c  0800c81c  0002043c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c81c  0800c81c  0001c81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c824  0800c824  0002043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c824  0800c824  0001c824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c828  0800c828  0001c828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000043c  20000000  0800c82c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  20000440  0800cc68  00020440  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b24  0800cc68  00020b24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a8e  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003111  00000000  00000000  00037efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0003b010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  0003c150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001789e  00000000  00000000  0003d170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016372  00000000  00000000  00054a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093026  00000000  00000000  0006ad80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000fdda6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004994  00000000  00000000  000fde6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  00102800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000440 	.word	0x20000440
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c7e4 	.word	0x0800c7e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000444 	.word	0x20000444
 80001d4:	0800c7e4 	.word	0x0800c7e4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	f00b fc92 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	f00b fc89 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 2, 3, KalmanVar ->MatC_Data);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	2102      	movs	r1, #2
 8000d90:	f00b fc80 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3348      	adds	r3, #72	; 0x48
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2101      	movs	r1, #1
 8000da2:	f00b fc77 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f503 7047 	add.w	r0, r3, #796	; 0x31c
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	334c      	adds	r3, #76	; 0x4c
 8000db0:	2203      	movs	r2, #3
 8000db2:	2103      	movs	r1, #3
 8000db4:	f00b fc6e 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 2, 2, KalmanVar ->MatR_Data);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3370      	adds	r3, #112	; 0x70
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	f00b fc65 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3380      	adds	r3, #128	; 0x80
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	f00b fc5c 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f503 704d 	add.w	r0, r3, #820	; 0x334
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	33a4      	adds	r3, #164	; 0xa4
 8000de6:	2201      	movs	r2, #1
 8000de8:	2103      	movs	r1, #3
 8000dea:	f00b fc53 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	33b0      	adds	r3, #176	; 0xb0
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	f00b fc4a 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	33bc      	adds	r3, #188	; 0xbc
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	f00b fc41 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f503 7053 	add.w	r0, r3, #844	; 0x34c
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	33e0      	adds	r3, #224	; 0xe0
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	2103      	movs	r1, #3
 8000e20:	f00b fc38 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 2, 1, KalmanVar ->MatY_Data);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f503 7055 	add.w	r0, r3, #852	; 0x354
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e30:	2201      	movs	r2, #1
 8000e32:	2102      	movs	r1, #2
 8000e34:	f00b fc2e 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 2, 1, KalmanVar ->MatZ_Data);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000e44:	2201      	movs	r2, #1
 8000e46:	2102      	movs	r1, #2
 8000e48:	f00b fc24 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 2, 2, KalmanVar ->MatS_Data);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8000e58:	2202      	movs	r2, #2
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	f00b fc1a 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 2, KalmanVar ->MatK_Data);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	2103      	movs	r1, #3
 8000e70:	f00b fc10 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f503 705d 	add.w	r0, r3, #884	; 0x374
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000e80:	2203      	movs	r2, #3
 8000e82:	2103      	movs	r1, #3
 8000e84:	f00b fc06 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f503 705f 	add.w	r0, r3, #892	; 0x37c
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000e94:	2203      	movs	r2, #3
 8000e96:	2103      	movs	r1, #3
 8000e98:	f00b fbfc 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f503 7061 	add.w	r0, r3, #900	; 0x384
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	2103      	movs	r1, #3
 8000eac:	f00b fbf2 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQ), 3, 3, KalmanVar ->MatGQ_Data);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f503 7063 	add.w	r0, r3, #908	; 0x38c
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	f00b fbe8 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 2, KalmanVar ->MatCt_Data);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f503 7065 	add.w	r0, r3, #916	; 0x394
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	2103      	movs	r1, #3
 8000ed4:	f00b fbde 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f503 7069 	add.w	r0, r3, #932	; 0x3a4
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	2103      	movs	r1, #3
 8000ee8:	f00b fbd4 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 2, 2, KalmanVar ->MatSinv_Data);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8000ef8:	2202      	movs	r2, #2
 8000efa:	2102      	movs	r1, #2
 8000efc:	f00b fbca 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 2, 3, KalmanVar ->MatCPk_Data);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f503 706b 	add.w	r0, r3, #940	; 0x3ac
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	2102      	movs	r1, #2
 8000f10:	f00b fbc0 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f503 706d 	add.w	r0, r3, #948	; 0x3b4
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000f20:	2203      	movs	r2, #3
 8000f22:	2103      	movs	r1, #3
 8000f24:	f00b fbb6 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f503 706f 	add.w	r0, r3, #956	; 0x3bc
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8000f34:	2203      	movs	r2, #3
 8000f36:	2103      	movs	r1, #3
 8000f38:	f00b fbac 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 2, 1, KalmanVar ->MatCXk_Data);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	f00b fba2 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 2, 2, KalmanVar ->MatCPkCt_Data);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	2102      	movs	r1, #2
 8000f60:	f00b fb98 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 2, KalmanVar ->MatPkCt_Data);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f503 7075 	add.w	r0, r3, #980	; 0x3d4
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8000f70:	2202      	movs	r2, #2
 8000f72:	2103      	movs	r1, #3
 8000f74:	f00b fb8e 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f503 7077 	add.w	r0, r3, #988	; 0x3dc
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8000f84:	2201      	movs	r2, #1
 8000f86:	2103      	movs	r1, #3
 8000f88:	f00b fb84 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f503 7079 	add.w	r0, r3, #996	; 0x3e4
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8000f98:	2203      	movs	r2, #3
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	f00b fb7a 	bl	800c694 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f503 707b 	add.w	r0, r3, #1004	; 0x3ec
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8000fac:	2203      	movs	r2, #3
 8000fae:	2103      	movs	r1, #3
 8000fb0:	f00b fb70 	bl	800c694 <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f503 723f 	add.w	r2, r3, #764	; 0x2fc
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	f00b f8fa 	bl	800c1bc <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	f00b f8f0 	bl	800c1bc <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f503 7243 	add.w	r2, r3, #780	; 0x30c
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4610      	mov	r0, r2
 8000fec:	f00b f8e6 	bl	800c1bc <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQ));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8001002:	461a      	mov	r2, r3
 8001004:	f00b f9a0 	bl	800c348 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQ), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f503 7063 	add.w	r0, r3, #908	; 0x38c
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f503 7161 	add.w	r1, r3, #900	; 0x384
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800101a:	461a      	mov	r2, r3
 800101c:	f00b f994 	bl	800c348 <arm_mat_mult_f32>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <KalmanMatrixReset>:

void KalmanMatrixReset(KalmanFilterVar *KalmanVar , float Pvar)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	ed87 0a00 	vstr	s0, [r7]
	for (int index = 0; index < 3; ++index)
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	e013      	b.n	8001062 <KalmanMatrixReset+0x3a>
	{
		KalmanVar ->MatStateLast_Data[index] = 0.0;
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	332c      	adds	r3, #44	; 0x2c
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
		KalmanVar ->MatState_Data[index] = 0.0;
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3328      	adds	r3, #40	; 0x28
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	3304      	adds	r3, #4
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
	for (int index = 0; index < 3; ++index)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3301      	adds	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2b02      	cmp	r3, #2
 8001066:	dde8      	ble.n	800103a <KalmanMatrixReset+0x12>
	}

	KalmanVar ->MatPredict_Data[0] = Pvar;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	KalmanVar ->MatPredictLast_Data[0] = Pvar;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	KalmanVar ->MatPredict_Data[1] = 0.0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	KalmanVar ->MatPredictLast_Data[1] = 0.0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	KalmanVar ->MatPredict_Data[2] = 0.0;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	KalmanVar ->MatPredictLast_Data[2] = 0.0;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	KalmanVar ->MatPredict_Data[3] = 0.0;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	KalmanVar ->MatPredictLast_Data[3] = 0.0;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	KalmanVar ->MatPredict_Data[4] = Pvar;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	KalmanVar ->MatPredictLast_Data[4] = Pvar;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	KalmanVar ->MatPredict_Data[5] = 0.0;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	KalmanVar ->MatPredictLast_Data[5] = 0.0;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

	KalmanVar ->MatPredict_Data[6] = 0.0;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	KalmanVar ->MatPredictLast_Data[6] = 0.0;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	KalmanVar ->MatPredict_Data[7] = 0.0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	KalmanVar ->MatPredictLast_Data[7] = 0.0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	KalmanVar ->MatPredict_Data[8] = Pvar;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	KalmanVar ->MatPredictLast_Data[8] = Pvar;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg,float32_t VelocityDeg)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	ed87 0a02 	vstr	s0, [r7, #8]
 8001128:	edc7 0a01 	vstr	s1, [r7, #4]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f503 714f 	add.w	r1, r3, #828	; 0x33c
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800113e:	461a      	mov	r2, r3
 8001140:	f00b f902 	bl	800c348 <arm_mat_mult_f32>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f503 7153 	add.w	r1, r3, #844	; 0x34c
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8001160:	461a      	mov	r2, r3
 8001162:	f00b f8f1 	bl	800c348 <arm_mat_mult_f32>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f503 706d 	add.w	r0, r3, #948	; 0x3b4
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f503 715f 	add.w	r1, r3, #892	; 0x37c
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001182:	461a      	mov	r2, r3
 8001184:	f00b f8e0 	bl	800c348 <arm_mat_mult_f32>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f503 706f 	add.w	r0, r3, #956	; 0x3bc
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80011a4:	461a      	mov	r2, r3
 80011a6:	f00b fa79 	bl	800c69c <arm_mat_add_f32>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	KalmanVar -> MatZ_Data[1] = VelocityDeg; // Sensor Input
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f503 714d 	add.w	r1, r3, #820	; 0x334
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80011d6:	461a      	mov	r2, r3
 80011d8:	f00b f8b6 	bl	800c348 <arm_mat_mult_f32>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f503 7171 	add.w	r1, r3, #964	; 0x3c4
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80011f8:	461a      	mov	r2, r3
 80011fa:	f00b f83b 	bl	800c274 <arm_mat_sub_f32>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f503 7151 	add.w	r1, r3, #836	; 0x344
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 800121a:	461a      	mov	r2, r3
 800121c:	f00b f894 	bl	800c348 <arm_mat_mult_f32>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f503 706b 	add.w	r0, r3, #940	; 0x3ac
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f503 7165 	add.w	r1, r3, #916	; 0x394
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 800123c:	461a      	mov	r2, r3
 800123e:	f00b f883 	bl	800c348 <arm_mat_mult_f32>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f503 7149 	add.w	r1, r3, #804	; 0x324
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800125e:	461a      	mov	r2, r3
 8001260:	f00b fa1c 	bl	800c69c <arm_mat_add_f32>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f503 7259 	add.w	r2, r3, #868	; 0x364
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 800127a:	4619      	mov	r1, r3
 800127c:	4610      	mov	r0, r2
 800127e:	f00b f903 	bl	800c488 <arm_mat_inverse_f32>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f503 7165 	add.w	r1, r3, #916	; 0x394
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 800129e:	461a      	mov	r2, r3
 80012a0:	f00b f852 	bl	800c348 <arm_mat_mult_f32>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f503 7075 	add.w	r0, r3, #980	; 0x3d4
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f503 7167 	add.w	r1, r3, #924	; 0x39c
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80012c0:	461a      	mov	r2, r3
 80012c2:	f00b f841 	bl	800c348 <arm_mat_mult_f32>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f503 7155 	add.w	r1, r3, #852	; 0x354
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80012e2:	461a      	mov	r2, r3
 80012e4:	f00b f830 	bl	800c348 <arm_mat_mult_f32>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f503 7077 	add.w	r0, r3, #988	; 0x3dc
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f503 714d 	add.w	r1, r3, #820	; 0x334
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8001304:	461a      	mov	r2, r3
 8001306:	f00b f9c9 	bl	800c69c <arm_mat_add_f32>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f503 7143 	add.w	r1, r3, #780	; 0x30c
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8001326:	461a      	mov	r2, r3
 8001328:	f00b f80e 	bl	800c348 <arm_mat_mult_f32>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f503 705d 	add.w	r0, r3, #884	; 0x374
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f503 7179 	add.w	r1, r3, #996	; 0x3e4
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8001348:	461a      	mov	r2, r3
 800134a:	f00a ff93 	bl	800c274 <arm_mat_sub_f32>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f503 707b 	add.w	r0, r3, #1004	; 0x3ec
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f503 7151 	add.w	r1, r3, #836	; 0x344
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800136a:	461a      	mov	r2, r3
 800136c:	f00a ffec 	bl	800c348 <arm_mat_mult_f32>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <PIDAController_Init>:

#define PID_LIM_MIN_INT -10000.0f
#define PID_LIM_MAX_INT  10000.0f

void PIDAController_Init(PIDAController *pid)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	pid->Last1Error = 0.0f;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
	pid->Last2Error = 0.0f;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	625a      	str	r2, [r3, #36]	; 0x24

	pid->differentiatorOutput = 0.0f;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
	pid->integratorOutput = 0.0f;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
	pid->proportionalOutput = 0.0f;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	61da      	str	r2, [r3, #28]

	pid->ControllerOut = 0.0f;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
	pid->ControllerLastOut = 0.0f;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c

	pid->OutputMax = PID_LIM_MAX_INT;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <PIDAController_Init+0x58>)
 80013c8:	611a      	str	r2, [r3, #16]
	pid->OutputMin = PID_LIM_MIN_INT;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <PIDAController_Init+0x5c>)
 80013ce:	60da      	str	r2, [r3, #12]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	461c4000 	.word	0x461c4000
 80013e0:	c61c4000 	.word	0xc61c4000

080013e4 <PIDAPositonController_Update>:

float PIDAPositonController_Update(PIDAController *pid,TrajectoryG *traject, float setpoint, float measurement,float VfromTraject,float VMCal)
{
 80013e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013e8:	ed2d 8b02 	vpush	{d8}
 80013ec:	b088      	sub	sp, #32
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6178      	str	r0, [r7, #20]
 80013f2:	6139      	str	r1, [r7, #16]
 80013f4:	ed87 0a03 	vstr	s0, [r7, #12]
 80013f8:	edc7 0a02 	vstr	s1, [r7, #8]
 80013fc:	ed87 1a01 	vstr	s2, [r7, #4]
 8001400:	edc7 1a00 	vstr	s3, [r7]
    float error = setpoint - measurement;
 8001404:	ed97 7a03 	vldr	s14, [r7, #12]
 8001408:	edd7 7a02 	vldr	s15, [r7, #8]
 800140c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001410:	edc7 7a07 	vstr	s15, [r7, #28]
    float errorDZ = error;
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	61bb      	str	r3, [r7, #24]

	if(traject ->TrajectoryMode == 0) // S-curve
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800141e:	2b00      	cmp	r3, #0
 8001420:	d16d      	bne.n	80014fe <PIDAPositonController_Update+0x11a>
	{
	    if(AbsVal(VfromTraject) < AbsVal(VMCal) && traject->TrajectoryFlag == 0)
 8001422:	ed97 0a01 	vldr	s0, [r7, #4]
 8001426:	f000 fad7 	bl	80019d8 <AbsVal>
 800142a:	eeb0 8a40 	vmov.f32	s16, s0
 800142e:	ed97 0a00 	vldr	s0, [r7]
 8001432:	f000 fad1 	bl	80019d8 <AbsVal>
 8001436:	eef0 7a40 	vmov.f32	s15, s0
 800143a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800143e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001442:	d513      	bpl.n	800146c <PIDAPositonController_Update+0x88>
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	edd3 7a86 	vldr	s15, [r3, #536]	; 0x218
 800144a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	d10b      	bne.n	800146c <PIDAPositonController_Update+0x88>
	    {
	    	pid->Kp  = 10.0;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	4a83      	ldr	r2, [pc, #524]	; (8001664 <PIDAPositonController_Update+0x280>)
 8001458:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 0.0;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 0.0;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	e058      	b.n	800151e <PIDAPositonController_Update+0x13a>
	    }
	    else if (AbsVal(VfromTraject) == AbsVal(VMCal))
 800146c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001470:	f000 fab2 	bl	80019d8 <AbsVal>
 8001474:	eeb0 8a40 	vmov.f32	s16, s0
 8001478:	ed97 0a00 	vldr	s0, [r7]
 800147c:	f000 faac 	bl	80019d8 <AbsVal>
 8001480:	eef0 7a40 	vmov.f32	s15, s0
 8001484:	eeb4 8a67 	vcmp.f32	s16, s15
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	d110      	bne.n	80014b0 <PIDAPositonController_Update+0xcc>
	    {
	    	pid->Kp  = 6.0;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	4a75      	ldr	r2, [pc, #468]	; (8001668 <PIDAPositonController_Update+0x284>)
 8001492:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 0.0;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 0.0;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
	    	traject->TrajectoryFlag = 1;
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 80014ae:	e036      	b.n	800151e <PIDAPositonController_Update+0x13a>
	    }
	    else if (AbsVal(VfromTraject) == AbsVal(VMCal) && traject->TrajectoryFlag == 1)
 80014b0:	ed97 0a01 	vldr	s0, [r7, #4]
 80014b4:	f000 fa90 	bl	80019d8 <AbsVal>
 80014b8:	eeb0 8a40 	vmov.f32	s16, s0
 80014bc:	ed97 0a00 	vldr	s0, [r7]
 80014c0:	f000 fa8a 	bl	80019d8 <AbsVal>
 80014c4:	eef0 7a40 	vmov.f32	s15, s0
 80014c8:	eeb4 8a67 	vcmp.f32	s16, s15
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	d125      	bne.n	800151e <PIDAPositonController_Update+0x13a>
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	edd3 7a86 	vldr	s15, [r3, #536]	; 0x218
 80014d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014dc:	eef4 7a47 	vcmp.f32	s15, s14
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	d11b      	bne.n	800151e <PIDAPositonController_Update+0x13a>
	    {
	    	pid->Kp  = 6.0;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	4a5f      	ldr	r2, [pc, #380]	; (8001668 <PIDAPositonController_Update+0x284>)
 80014ea:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 0.0;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 0.0;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	e00f      	b.n	800151e <PIDAPositonController_Update+0x13a>
	    }
	}
	else if(traject ->TrajectoryMode == 1) //Quintic
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8001504:	2b01      	cmp	r3, #1
 8001506:	d10a      	bne.n	800151e <PIDAPositonController_Update+0x13a>
	{
			pid->Kp  = 6.0;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	4a57      	ldr	r2, [pc, #348]	; (8001668 <PIDAPositonController_Update+0x284>)
 800150c:	601a      	str	r2, [r3, #0]
			pid->Ki  = 0.0;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
			pid->Kd  = 0.0;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
	}
	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	ed93 7a00 	vldr	s14, [r3]
 8001524:	edd7 7a06 	vldr	s15, [r7, #24]
 8001528:	ee27 7a27 	vmul.f32	s14, s14, s15
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	edd3 6a00 	vldr	s13, [r3]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	edd3 7a08 	vldr	s15, [r3, #32]
 8001538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800153c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	ed93 7a01 	vldr	s14, [r3, #4]
 800154c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ff9e 	bl	80004a0 <__aeabi_f2d>
 8001564:	4604      	mov	r4, r0
 8001566:	460d      	mov	r5, r1
 8001568:	69b8      	ldr	r0, [r7, #24]
 800156a:	f7fe ff99 	bl	80004a0 <__aeabi_f2d>
 800156e:	4680      	mov	r8, r0
 8001570:	4689      	mov	r9, r1
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ff92 	bl	80004a0 <__aeabi_f2d>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	f7fe fe30 	bl	80001e4 <__adddf3>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4640      	mov	r0, r8
 800158a:	4649      	mov	r1, r9
 800158c:	f7fe fe28 	bl	80001e0 <__aeabi_dsub>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4690      	mov	r8, r2
 8001596:	4699      	mov	r9, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ff7f 	bl	80004a0 <__aeabi_f2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4640      	mov	r0, r8
 80015a8:	4649      	mov	r1, r9
 80015aa:	f7fe fe1b 	bl	80001e4 <__adddf3>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f7fe ffcb 	bl	8000550 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff f9f7 	bl	80009b4 <__aeabi_d2f>
 80015c6:	4602      	mov	r2, r0
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	ed93 7a07 	vldr	s14, [r3, #28]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80015d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	edd3 7a06 	vldr	s15, [r3, #24]
 80015e2:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80015ec:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001602:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160a:	dd04      	ble.n	8001616 <PIDAPositonController_Update+0x232>

    	pid->ControllerOut = pid->OutputMax;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
 8001614:	e00e      	b.n	8001634 <PIDAPositonController_Update+0x250>

    } else if (pid->ControllerOut < pid->OutputMin) {
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001622:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	d503      	bpl.n	8001634 <PIDAPositonController_Update+0x250>

    	pid->ControllerOut = pid->OutputMin;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	6a1a      	ldr	r2, [r3, #32]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	ee07 3a90 	vmov	s15, r3
}
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	ecbd 8b02 	vpop	{d8}
 800165e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001662:	bf00      	nop
 8001664:	41200000 	.word	0x41200000
 8001668:	40c00000 	.word	0x40c00000

0800166c <PIDAVelocityController_Update>:



float PIDAVelocityController_Update(PIDAController *pid,TrajectoryG *traject, float setpoint, float measurement,float VfromTraject,float VMCal){
 800166c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001670:	ed2d 8b02 	vpush	{d8}
 8001674:	b088      	sub	sp, #32
 8001676:	af00      	add	r7, sp, #0
 8001678:	6178      	str	r0, [r7, #20]
 800167a:	6139      	str	r1, [r7, #16]
 800167c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001680:	edc7 0a02 	vstr	s1, [r7, #8]
 8001684:	ed87 1a01 	vstr	s2, [r7, #4]
 8001688:	edc7 1a00 	vstr	s3, [r7]

    float error = setpoint - measurement;
 800168c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001690:	edd7 7a02 	vldr	s15, [r7, #8]
 8001694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001698:	edc7 7a07 	vstr	s15, [r7, #28]
    float errorDZ = error;
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	61bb      	str	r3, [r7, #24]
	if(traject ->TrajectoryMode == 0) // S-curve
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d169      	bne.n	800177e <PIDAVelocityController_Update+0x112>
	{
	    if(AbsVal(VfromTraject) < AbsVal(VMCal) && traject->TrajectoryFlag == 0) // 10 deg/s
 80016aa:	ed97 0a01 	vldr	s0, [r7, #4]
 80016ae:	f000 f993 	bl	80019d8 <AbsVal>
 80016b2:	eeb0 8a40 	vmov.f32	s16, s0
 80016b6:	ed97 0a00 	vldr	s0, [r7]
 80016ba:	f000 f98d 	bl	80019d8 <AbsVal>
 80016be:	eef0 7a40 	vmov.f32	s15, s0
 80016c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80016c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ca:	d511      	bpl.n	80016f0 <PIDAVelocityController_Update+0x84>
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	edd3 7a86 	vldr	s15, [r3, #536]	; 0x218
 80016d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016da:	d109      	bne.n	80016f0 <PIDAVelocityController_Update+0x84>
	    {
	    	pid->Kp  = 20.0;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	4a80      	ldr	r2, [pc, #512]	; (80018e0 <PIDAVelocityController_Update+0x274>)
 80016e0:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 1.6;
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	4a7f      	ldr	r2, [pc, #508]	; (80018e4 <PIDAVelocityController_Update+0x278>)
 80016e6:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 2.5;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	4a7f      	ldr	r2, [pc, #508]	; (80018e8 <PIDAVelocityController_Update+0x27c>)
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	e055      	b.n	800179c <PIDAVelocityController_Update+0x130>
	    }
	    else if (AbsVal(VfromTraject) == AbsVal(VMCal))
 80016f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80016f4:	f000 f970 	bl	80019d8 <AbsVal>
 80016f8:	eeb0 8a40 	vmov.f32	s16, s0
 80016fc:	ed97 0a00 	vldr	s0, [r7]
 8001700:	f000 f96a 	bl	80019d8 <AbsVal>
 8001704:	eef0 7a40 	vmov.f32	s15, s0
 8001708:	eeb4 8a67 	vcmp.f32	s16, s15
 800170c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001710:	d10f      	bne.n	8001732 <PIDAVelocityController_Update+0xc6>
	    {
	    	pid->Kp  = 0.16;
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	4a75      	ldr	r2, [pc, #468]	; (80018ec <PIDAVelocityController_Update+0x280>)
 8001716:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 3.14;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	4a75      	ldr	r2, [pc, #468]	; (80018f0 <PIDAVelocityController_Update+0x284>)
 800171c:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 0;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
	    	traject->TrajectoryFlag = 1;
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800172c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8001730:	e034      	b.n	800179c <PIDAVelocityController_Update+0x130>
	    }
	    else if (AbsVal(VfromTraject) == AbsVal(VMCal) && traject->TrajectoryFlag == 1)
 8001732:	ed97 0a01 	vldr	s0, [r7, #4]
 8001736:	f000 f94f 	bl	80019d8 <AbsVal>
 800173a:	eeb0 8a40 	vmov.f32	s16, s0
 800173e:	ed97 0a00 	vldr	s0, [r7]
 8001742:	f000 f949 	bl	80019d8 <AbsVal>
 8001746:	eef0 7a40 	vmov.f32	s15, s0
 800174a:	eeb4 8a67 	vcmp.f32	s16, s15
 800174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001752:	d123      	bne.n	800179c <PIDAVelocityController_Update+0x130>
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	edd3 7a86 	vldr	s15, [r3, #536]	; 0x218
 800175a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800175e:	eef4 7a47 	vcmp.f32	s15, s14
 8001762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001766:	d119      	bne.n	800179c <PIDAVelocityController_Update+0x130>
	    {
	    	pid->Kp  = 0.27;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	4a62      	ldr	r2, [pc, #392]	; (80018f4 <PIDAVelocityController_Update+0x288>)
 800176c:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 2.2;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	4a61      	ldr	r2, [pc, #388]	; (80018f8 <PIDAVelocityController_Update+0x28c>)
 8001772:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 0;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	e00e      	b.n	800179c <PIDAVelocityController_Update+0x130>
	    }
	}
	else if(traject ->TrajectoryMode == 1) //Quintic
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8001784:	2b01      	cmp	r3, #1
 8001786:	d109      	bne.n	800179c <PIDAVelocityController_Update+0x130>
	{
			pid->Kp  = 0.27;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	4a5a      	ldr	r2, [pc, #360]	; (80018f4 <PIDAVelocityController_Update+0x288>)
 800178c:	601a      	str	r2, [r3, #0]
			pid->Ki  = 2.2;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	4a59      	ldr	r2, [pc, #356]	; (80018f8 <PIDAVelocityController_Update+0x28c>)
 8001792:	605a      	str	r2, [r3, #4]
			pid->Kd  = 0;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
	}
	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	ed93 7a00 	vldr	s14, [r3]
 80017a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	edd3 6a00 	vldr	s13, [r3]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80017b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80017ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80017ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fe5f 	bl	80004a0 <__aeabi_f2d>
 80017e2:	4604      	mov	r4, r0
 80017e4:	460d      	mov	r5, r1
 80017e6:	69b8      	ldr	r0, [r7, #24]
 80017e8:	f7fe fe5a 	bl	80004a0 <__aeabi_f2d>
 80017ec:	4680      	mov	r8, r0
 80017ee:	4689      	mov	r9, r1
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fe53 	bl	80004a0 <__aeabi_f2d>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	f7fe fcf1 	bl	80001e4 <__adddf3>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4640      	mov	r0, r8
 8001808:	4649      	mov	r1, r9
 800180a:	f7fe fce9 	bl	80001e0 <__aeabi_dsub>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4690      	mov	r8, r2
 8001814:	4699      	mov	r9, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe40 	bl	80004a0 <__aeabi_f2d>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4640      	mov	r0, r8
 8001826:	4649      	mov	r1, r9
 8001828:	f7fe fcdc 	bl	80001e4 <__adddf3>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4620      	mov	r0, r4
 8001832:	4629      	mov	r1, r5
 8001834:	f7fe fe8c 	bl	8000550 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f8b8 	bl	80009b4 <__aeabi_d2f>
 8001844:	4602      	mov	r2, r0
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	edd3 7a05 	vldr	s15, [r3, #20]
 8001856:	ee37 7a27 	vadd.f32	s14, s14, s15
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001860:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800186a:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001888:	dd04      	ble.n	8001894 <PIDAVelocityController_Update+0x228>

    	pid->ControllerOut = pid->OutputMax;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
 8001892:	e00e      	b.n	80018b2 <PIDAVelocityController_Update+0x246>

    } else if (pid->ControllerOut < pid->OutputMin) {
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	edd3 7a03 	vldr	s15, [r3, #12]
 80018a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	d503      	bpl.n	80018b2 <PIDAVelocityController_Update+0x246>

    	pid->ControllerOut = pid->OutputMin;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	6a1a      	ldr	r2, [r3, #32]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	ee07 3a90 	vmov	s15, r3
}
 80018d0:	eeb0 0a67 	vmov.f32	s0, s15
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	ecbd 8b02 	vpop	{d8}
 80018dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018e0:	41a00000 	.word	0x41a00000
 80018e4:	3fcccccd 	.word	0x3fcccccd
 80018e8:	40200000 	.word	0x40200000
 80018ec:	3e23d70a 	.word	0x3e23d70a
 80018f0:	4048f5c3 	.word	0x4048f5c3
 80018f4:	3e8a3d71 	.word	0x3e8a3d71
 80018f8:	400ccccd 	.word	0x400ccccd

080018fc <Robotinit>:


#include "Trajectory.h"

void Robotinit(RobotManagement *Robot)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	  Robot -> Position = 0.0;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
	  Robot -> Velocity = 0.0;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
	  Robot -> Acceleration = 0.0;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
	  Robot -> CurrentStation = 0;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	819a      	strh	r2, [r3, #12]
	  Robot -> GoalPositon = 0.0;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
	  Robot -> HomePositon = 0.0;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
	  Robot -> QX = 0.0;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
	  Robot -> QV = 0.0;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	621a      	str	r2, [r3, #32]
	  Robot -> QVMax = 0.0;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	625a      	str	r2, [r3, #36]	; 0x24

	  Robot -> flagSethome = 0;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	  Robot -> flagStartTime = 0;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	  Robot -> RunningFlag = 0;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	  Robot -> MotorIsOn = 0;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <TrajectorInit>:

void TrajectorInit(TrajectoryG *traject)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
	arm_mat_init_f32(&(traject ->MatTime), 6, 6, traject ->MatTime_Data);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f503 7007 	add.w	r0, r3, #540	; 0x21c
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2206      	movs	r2, #6
 8001988:	2106      	movs	r1, #6
 800198a:	f00a fe83 	bl	800c694 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatTimeINV), 6, 6, traject ->MatTimeINV_Data);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f503 7009 	add.w	r0, r3, #548	; 0x224
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3390      	adds	r3, #144	; 0x90
 8001998:	2206      	movs	r2, #6
 800199a:	2106      	movs	r1, #6
 800199c:	f00a fe7a 	bl	800c694 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatCondition), 6, 1, traject ->MatCondition_Data);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f503 700b 	add.w	r0, r3, #556	; 0x22c
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80019ac:	2201      	movs	r2, #1
 80019ae:	2106      	movs	r1, #6
 80019b0:	f00a fe70 	bl	800c694 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatA), 6, 1, traject ->MatTA_Data);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f503 700d 	add.w	r0, r3, #564	; 0x234
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80019c0:	2201      	movs	r2, #1
 80019c2:	2106      	movs	r1, #6
 80019c4:	f00a fe66 	bl	800c694 <arm_mat_init_f32>
	traject -> TrajectoryMode = 0;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <AbsVal>:
{
	Robot -> HomePositon = homePoint;
}

float AbsVal(float number)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 80019e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	d50e      	bpl.n	8001a0e <AbsVal+0x36>
  {
    return number*-1.0;
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7fe fd55 	bl	80004a0 <__aeabi_f2d>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7fe ffd9 	bl	80009b4 <__aeabi_d2f>
 8001a02:	4603      	mov	r3, r0
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eef1 7a67 	vneg.f32	s15, s15
 8001a0c:	e001      	b.n	8001a12 <AbsVal+0x3a>
  }
  else
  {
    return number;
 8001a0e:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 8001a12:	eeb0 0a67 	vmov.f32	s0, s15
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	0000      	movs	r0, r0
	...

08001a20 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal, float Veloinput){
 8001a20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a24:	b088      	sub	sp, #32
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a2e:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a32:	ed87 1a00 	vstr	s2, [r7]

	traject -> Qin = Qinitial;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	traject -> Qfinal = Qfinal;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	// Set initial = 0;
	traject -> QRelative = traject -> Qfinal - traject -> Qin;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	ed93 7a7c 	vldr	s14, [r3, #496]	; 0x1f0
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	edd3 7a7a 	vldr	s15, [r3, #488]	; 0x1e8
 8001a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	edc3 7a7b 	vstr	s15, [r3, #492]	; 0x1ec
	// Set Vmax Amax Jmax
	traject -> Vmax = 0.0;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	traject -> Amax = 21.77;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4a22      	ldr	r2, [pc, #136]	; (8001af4 <CoefficientAndTimeCalculation+0xd4>)
 8001a6a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	traject -> Jmax = 114.59 ;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4a21      	ldr	r2, [pc, #132]	; (8001af8 <CoefficientAndTimeCalculation+0xd8>)
 8001a72:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	float gain = 0.0;
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
	if(traject -> QRelative < 0.0)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8001a82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8a:	d502      	bpl.n	8001a92 <CoefficientAndTimeCalculation+0x72>
	{
		gain = -1.0;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <CoefficientAndTimeCalculation+0xdc>)
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	e002      	b.n	8001a98 <CoefficientAndTimeCalculation+0x78>
	}
	else
	{
		gain = 1.0;
 8001a92:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a96:	61fb      	str	r3, [r7, #28]
	}
	// Find Speed limit
	float DistanceABS = AbsVal(traject -> QRelative);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8001a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa2:	f7ff ff99 	bl	80019d8 <AbsVal>
 8001aa6:	ed87 0a06 	vstr	s0, [r7, #24]
	// Check Trajectory mode
	if(DistanceABS <= 0.0 && DistanceABS >= 0.0)
 8001aaa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab6:	d80b      	bhi.n	8001ad0 <CoefficientAndTimeCalculation+0xb0>
 8001ab8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001abc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	db04      	blt.n	8001ad0 <CoefficientAndTimeCalculation+0xb0>
	{
		traject -> TrajectoryMode = 1;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
 8001ace:	e003      	b.n	8001ad8 <CoefficientAndTimeCalculation+0xb8>
	}
	else
	{
		traject -> TrajectoryMode = 0;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	}

	if(DistanceABS >= 130)
 8001ad8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001adc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001b00 <CoefficientAndTimeCalculation+0xe0>
 8001ae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	db0e      	blt.n	8001b08 <CoefficientAndTimeCalculation+0xe8>
	{
//		traject -> Vmax = 60;
		traject -> Vmax = 51;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <CoefficientAndTimeCalculation+0xe4>)
 8001aee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8001af2:	e07a      	b.n	8001bea <CoefficientAndTimeCalculation+0x1ca>
 8001af4:	41ae28f6 	.word	0x41ae28f6
 8001af8:	42e52e14 	.word	0x42e52e14
 8001afc:	bf800000 	.word	0xbf800000
 8001b00:	43020000 	.word	0x43020000
 8001b04:	424c0000 	.word	0x424c0000
	}
	else
	{
//		traject -> Vmax = (-0.0000003*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00009*(DistanceABS*DistanceABS*DistanceABS))-(0.0115*(DistanceABS*DistanceABS))+(0.995*DistanceABS)+7.1259;
		traject -> Vmax = (-0.0000001*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00005*(DistanceABS*DistanceABS*DistanceABS))-(0.0082*(DistanceABS*DistanceABS))+(0.8134*DistanceABS)+4.0415;
 8001b08:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b0c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b18:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b20:	ee17 0a90 	vmov	r0, s15
 8001b24:	f7fe fcbc 	bl	80004a0 <__aeabi_f2d>
 8001b28:	f60f 33ac 	addw	r3, pc, #2988	; 0xbac
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	f7fe fd0e 	bl	8000550 <__aeabi_dmul>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4690      	mov	r8, r2
 8001b3a:	4699      	mov	r9, r3
 8001b3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b40:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b44:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b4c:	ee17 0a90 	vmov	r0, s15
 8001b50:	f7fe fca6 	bl	80004a0 <__aeabi_f2d>
 8001b54:	f60f 3388 	addw	r3, pc, #2952	; 0xb88
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fcf8 	bl	8000550 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4640      	mov	r0, r8
 8001b66:	4649      	mov	r1, r9
 8001b68:	f7fe fb3c 	bl	80001e4 <__adddf3>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4690      	mov	r8, r2
 8001b72:	4699      	mov	r9, r3
 8001b74:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b7c:	ee17 0a90 	vmov	r0, s15
 8001b80:	f7fe fc8e 	bl	80004a0 <__aeabi_f2d>
 8001b84:	f60f 3360 	addw	r3, pc, #2912	; 0xb60
 8001b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8c:	f7fe fce0 	bl	8000550 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4640      	mov	r0, r8
 8001b96:	4649      	mov	r1, r9
 8001b98:	f7fe fb22 	bl	80001e0 <__aeabi_dsub>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4690      	mov	r8, r2
 8001ba2:	4699      	mov	r9, r3
 8001ba4:	69b8      	ldr	r0, [r7, #24]
 8001ba6:	f7fe fc7b 	bl	80004a0 <__aeabi_f2d>
 8001baa:	f60f 3344 	addw	r3, pc, #2884	; 0xb44
 8001bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb2:	f7fe fccd 	bl	8000550 <__aeabi_dmul>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4640      	mov	r0, r8
 8001bbc:	4649      	mov	r1, r9
 8001bbe:	f7fe fb11 	bl	80001e4 <__adddf3>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f60f 332c 	addw	r3, pc, #2860	; 0xb2c
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	f7fe fb07 	bl	80001e4 <__adddf3>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f7fe fee9 	bl	80009b4 <__aeabi_d2f>
 8001be2:	4602      	mov	r2, r0
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		//		traject -> Vmax = (-0.0000002*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00007*(DistanceABS*DistanceABS*DistanceABS))-(0.0092*(DistanceABS*DistanceABS))+(0.8419*DistanceABS)+4.8492;
	}

	if(traject -> Vmax > Veloinput)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8001bf0:	ed97 7a00 	vldr	s14, [r7]
 8001bf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfc:	d503      	bpl.n	8001c06 <CoefficientAndTimeCalculation+0x1e6>
	{
		traject -> Vmax = Veloinput;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  traject -> Vmax *gain;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	ed93 7a56 	vldr	s14, [r3, #344]	; 0x158
 8001c0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
	traject -> Amax =  traject -> Amax *gain;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8001c20:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
	traject -> Jmax =  traject -> Jmax *gain;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 8001c34:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154

	if(traject ->TrajectoryMode == 0) // S-curve
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f040 8559 	bne.w	8002700 <CoefficientAndTimeCalculation+0xce0>
	{
		// Calculate time
			traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8001c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001c6a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001c6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	ed93 6a7b 	vldr	s12, [r3, #492]	; 0x1ec
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	edd3 6a56 	vldr	s13, [r3, #344]	; 0x158
 8001c7e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	edc3 7a79 	vstr	s15, [r3, #484]	; 0x1e4
			traject -> T[0] = (traject -> Amax/traject -> Jmax);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 8001c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
			traject -> T[1] = (traject -> Vmax/traject -> Amax);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	edd3 6a56 	vldr	s13, [r3, #344]	; 0x158
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8001cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	edc3 7a74 	vstr	s15, [r3, #464]	; 0x1d0
			traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8001cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001cd4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	edc3 7a75 	vstr	s15, [r3, #468]	; 0x1d4
			traject -> T[3] = traject -> T[6] - traject -> T[2];
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	ed93 7a79 	vldr	s14, [r3, #484]	; 0x1e4
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	edc3 7a76 	vstr	s15, [r3, #472]	; 0x1d8
			traject -> T[4] = traject -> T[6] - traject -> T[1];
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	ed93 7a79 	vldr	s14, [r3, #484]	; 0x1e4
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001d04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	edc3 7a77 	vstr	s15, [r3, #476]	; 0x1dc
			traject -> T[5] = traject -> T[6] - traject -> T[0];
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	ed93 7a79 	vldr	s14, [r3, #484]	; 0x1e4
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	edc3 7a78 	vstr	s15, [r3, #480]	; 0x1e0

			traject -> A[0] = traject -> Jmax;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
			traject -> A[1] = 0;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
			traject -> A[2] = -1.0 * traject -> Jmax;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fbad 	bl	80004a0 <__aeabi_f2d>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7fe fe31 	bl	80009b4 <__aeabi_d2f>
 8001d52:	4603      	mov	r3, r0
 8001d54:	ee07 3a90 	vmov	s15, r3
 8001d58:	eef1 7a67 	vneg.f32	s15, s15
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	edc3 7a59 	vstr	s15, [r3, #356]	; 0x164
			traject -> A[3] = 0;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
			traject -> A[4] = -1.0 * traject -> Jmax;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fb94 	bl	80004a0 <__aeabi_f2d>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe fe18 	bl	80009b4 <__aeabi_d2f>
 8001d84:	4603      	mov	r3, r0
 8001d86:	ee07 3a90 	vmov	s15, r3
 8001d8a:	eef1 7a67 	vneg.f32	s15, s15
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	edc3 7a5b 	vstr	s15, [r3, #364]	; 0x16c
			traject -> A[5] = 0;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
			traject -> A[6] = traject -> Jmax;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

			traject -> B[0] = 0;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
			traject -> B[1] = traject -> Amax;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
			traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	edd3 6a55 	vldr	s13, [r3, #340]	; 0x154
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001dd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	edc3 7a60 	vstr	s15, [r3, #384]	; 0x180
			traject -> B[3] = 0;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
			traject -> B[4] = traject -> Jmax * traject -> T[3];
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8001df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	edc3 7a62 	vstr	s15, [r3, #392]	; 0x188
			traject -> B[5] = (-1.0 * traject ->Amax);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fb4a 	bl	80004a0 <__aeabi_f2d>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7fe fdce 	bl	80009b4 <__aeabi_d2f>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eef1 7a67 	vneg.f32	s15, s15
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	edc3 7a63 	vstr	s15, [r3, #396]	; 0x18c
			traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb36 	bl	80004a0 <__aeabi_f2d>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4614      	mov	r4, r2
 8001e3a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8001e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e4e:	ee17 0a90 	vmov	r0, s15
 8001e52:	f7fe fb25 	bl	80004a0 <__aeabi_f2d>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	f7fe f9bf 	bl	80001e0 <__aeabi_dsub>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7fe fda3 	bl	80009b4 <__aeabi_d2f>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

			traject -> C[0] = 0;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
			traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	edd3 6a73 	vldr	s13, [r3, #460]	; 0x1cc
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001e92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e9e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001eae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 8001ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	edd3 6a58 	vldr	s13, [r3, #352]	; 0x160
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	ed93 6a73 	vldr	s12, [r3, #460]	; 0x1cc
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001ed2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ed6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eda:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001ede:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	ed93 6a5f 	vldr	s12, [r3, #380]	; 0x17c
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001eee:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	edc3 7a66 	vstr	s15, [r3, #408]	; 0x198
			traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	edd3 6a74 	vldr	s13, [r3, #464]	; 0x1d0
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001f12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f1e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	edd3 7a66 	vldr	s15, [r3, #408]	; 0x198
 8001f3c:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	edd3 6a59 	vldr	s13, [r3, #356]	; 0x164
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	ed93 6a74 	vldr	s12, [r3, #464]	; 0x1d0
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001f52:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f5a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f5e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	ed93 6a60 	vldr	s12, [r3, #384]	; 0x180
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001f6e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f76:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	edc3 7a67 	vstr	s15, [r3, #412]	; 0x19c
			traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	edd3 6a75 	vldr	s13, [r3, #468]	; 0x1d4
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f9e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 8001fbc:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	edd3 6a5a 	vldr	s13, [r3, #360]	; 0x168
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	ed93 6a75 	vldr	s12, [r3, #468]	; 0x1d4
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001fd2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fda:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001fde:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	ed93 6a61 	vldr	s12, [r3, #388]	; 0x184
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001fee:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	edc3 7a68 	vstr	s15, [r3, #416]	; 0x1a0
			traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	edd3 6a76 	vldr	s13, [r3, #472]	; 0x1d8
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800201e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 800202e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002032:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	edd3 7a68 	vldr	s15, [r3, #416]	; 0x1a0
 800203c:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	edd3 6a5b 	vldr	s13, [r3, #364]	; 0x16c
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	ed93 6a76 	vldr	s12, [r3, #472]	; 0x1d8
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002052:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800205a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800205e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	ed93 6a62 	vldr	s12, [r3, #392]	; 0x188
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 800206e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002076:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	edc3 7a69 	vstr	s15, [r3, #420]	; 0x1a4
			traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	edd3 6a77 	vldr	s13, [r3, #476]	; 0x1dc
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8002092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800209e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80020ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 80020bc:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	edd3 6a5c 	vldr	s13, [r3, #368]	; 0x170
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	ed93 6a77 	vldr	s12, [r3, #476]	; 0x1dc
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80020d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020da:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80020de:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	ed93 6a63 	vldr	s12, [r3, #396]	; 0x18c
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80020ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020f6:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	edc3 7a6a 	vstr	s15, [r3, #424]	; 0x1a8
			traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	edd3 6a78 	vldr	s13, [r3, #480]	; 0x1e0
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800211e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 800212e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002132:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 800213c:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	edd3 6a5d 	vldr	s13, [r3, #372]	; 0x174
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	ed93 6a78 	vldr	s12, [r3, #480]	; 0x1e0
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002152:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800215a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800215e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	ed93 6a64 	vldr	s12, [r3, #400]	; 0x190
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 800216e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002176:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	edc3 7a6b 	vstr	s15, [r3, #428]	; 0x1ac

			traject -> D[0] = 0;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
			traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	edd3 6a73 	vldr	s13, [r3, #460]	; 0x1cc
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800219c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 80021a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ae:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80021b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	ed93 6a73 	vldr	s12, [r3, #460]	; 0x1cc
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 80021c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021d0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80021d4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	edd3 6a65 	vldr	s13, [r3, #404]	; 0x194
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 80021e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 80021f6:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	edd3 6a58 	vldr	s13, [r3, #352]	; 0x160
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	ed93 6a73 	vldr	s12, [r3, #460]	; 0x1cc
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800220c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8002216:	ee66 7a27 	vmul.f32	s15, s12, s15
 800221a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002222:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	ed93 6a5f 	vldr	s12, [r3, #380]	; 0x17c
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	edd3 5a73 	vldr	s11, [r3, #460]	; 0x1cc
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8002238:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800223c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002240:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002248:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	ed93 6a66 	vldr	s12, [r3, #408]	; 0x198
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8002258:	ee66 7a27 	vmul.f32	s15, s12, s15
 800225c:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8002260:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4

			traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	edd3 6a74 	vldr	s13, [r3, #464]	; 0x1d0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 800227c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8002286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800228a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002292:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	ed93 6a74 	vldr	s12, [r3, #464]	; 0x1d0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 80022a8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022b0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80022b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80022b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	edd3 6a66 	vldr	s13, [r3, #408]	; 0x198
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 80022c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 80022d6:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	edd3 6a59 	vldr	s13, [r3, #356]	; 0x164
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	ed93 6a74 	vldr	s12, [r3, #464]	; 0x1d0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 80022ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 80022f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022fe:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002302:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	ed93 6a60 	vldr	s12, [r3, #384]	; 0x180
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	edd3 5a74 	vldr	s11, [r3, #464]	; 0x1d0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8002318:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800231c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002320:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002324:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002328:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	ed93 6a67 	vldr	s12, [r3, #412]	; 0x19c
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8002338:	ee66 7a27 	vmul.f32	s15, s12, s15
 800233c:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8002340:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8

			traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	edd3 6a75 	vldr	s13, [r3, #468]	; 0x1d4
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 800235c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8002366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800236e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002372:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	ed93 6a75 	vldr	s12, [r3, #468]	; 0x1d4
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8002388:	ee66 7a27 	vmul.f32	s15, s12, s15
 800238c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002390:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002394:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002398:	ee37 7a27 	vadd.f32	s14, s14, s15
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	edd3 6a67 	vldr	s13, [r3, #412]	; 0x19c
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80023a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 80023b6:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	edd3 6a5a 	vldr	s13, [r3, #360]	; 0x168
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	ed93 6a75 	vldr	s12, [r3, #468]	; 0x1d4
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80023cc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80023d6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023de:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80023e2:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	ed93 6a61 	vldr	s12, [r3, #388]	; 0x184
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	edd3 5a75 	vldr	s11, [r3, #468]	; 0x1d4
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80023f8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80023fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002400:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002404:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002408:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	ed93 6a68 	vldr	s12, [r3, #416]	; 0x1a0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8002418:	ee66 7a27 	vmul.f32	s15, s12, s15
 800241c:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8002420:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	edc3 7a6f 	vstr	s15, [r3, #444]	; 0x1bc
			traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	edd3 6a76 	vldr	s13, [r3, #472]	; 0x1d8
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 800243c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800244a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002452:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	ed93 6a76 	vldr	s12, [r3, #472]	; 0x1d8
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002468:	ee66 7a27 	vmul.f32	s15, s12, s15
 800246c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002470:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002474:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	edd3 6a68 	vldr	s13, [r3, #416]	; 0x1a0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002488:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800248c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	edd3 7a6f 	vldr	s15, [r3, #444]	; 0x1bc
 8002496:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	edd3 6a5b 	vldr	s13, [r3, #364]	; 0x16c
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	ed93 6a76 	vldr	s12, [r3, #472]	; 0x1d8
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 80024ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 80024b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024be:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80024c2:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	ed93 6a62 	vldr	s12, [r3, #392]	; 0x188
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	edd3 5a76 	vldr	s11, [r3, #472]	; 0x1d8
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 80024d8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80024dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024e0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80024e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	ed93 6a69 	vldr	s12, [r3, #420]	; 0x1a4
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 80024f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8002500:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	edc3 7a70 	vstr	s15, [r3, #448]	; 0x1c0
			traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	edd3 6a77 	vldr	s13, [r3, #476]	; 0x1dc
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 800251c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8002526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800252a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002532:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	ed93 6a77 	vldr	s12, [r3, #476]	; 0x1dc
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8002548:	ee66 7a27 	vmul.f32	s15, s12, s15
 800254c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002550:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002554:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	edd3 6a69 	vldr	s13, [r3, #420]	; 0x1a4
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8002568:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800256c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	edd3 7a70 	vldr	s15, [r3, #448]	; 0x1c0
 8002576:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	edd3 6a5c 	vldr	s13, [r3, #368]	; 0x170
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	ed93 6a77 	vldr	s12, [r3, #476]	; 0x1dc
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 800258c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8002596:	ee66 7a27 	vmul.f32	s15, s12, s15
 800259a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80025a2:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	ed93 6a63 	vldr	s12, [r3, #396]	; 0x18c
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	edd3 5a77 	vldr	s11, [r3, #476]	; 0x1dc
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80025b8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80025bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025c0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80025c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	ed93 6a6a 	vldr	s12, [r3, #424]	; 0x1a8
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80025d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80025e0:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	edc3 7a71 	vstr	s15, [r3, #452]	; 0x1c4
			traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	edd3 6a78 	vldr	s13, [r3, #480]	; 0x1e0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 80025fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002606:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800260a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002612:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	ed93 6a78 	vldr	s12, [r3, #480]	; 0x1e0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002628:	ee66 7a27 	vmul.f32	s15, s12, s15
 800262c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002630:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002634:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002638:	ee37 7a27 	vadd.f32	s14, s14, s15
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	edd3 6a6a 	vldr	s13, [r3, #424]	; 0x1a8
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800264c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	edd3 7a71 	vldr	s15, [r3, #452]	; 0x1c4
 8002656:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	edd3 6a5d 	vldr	s13, [r3, #372]	; 0x174
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	ed93 6a78 	vldr	s12, [r3, #480]	; 0x1e0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 800266c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002676:	ee66 7a27 	vmul.f32	s15, s12, s15
 800267a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800267e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002682:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	ed93 6a64 	vldr	s12, [r3, #400]	; 0x190
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	edd3 5a78 	vldr	s11, [r3, #480]	; 0x1e0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002698:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800269c:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026a0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80026a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	ed93 6a6b 	vldr	s12, [r3, #428]	; 0x1ac
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 80026b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80026c0:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	edc3 7a72 	vstr	s15, [r3, #456]	; 0x1c8
			traject -> VMCal = traject -> Vmax;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		   traject -> Trajectorystatus = arm_mat_mult_f32(&(traject ->MatTimeINV), &(traject ->MatCondition), &(traject ->MatA));

		   float t = (traject -> TimeFinal)/2.0;
		   traject -> VMCal = (traject -> MatTA_Data[1]) + (2*traject -> MatTA_Data[2]*t) + (3*traject -> MatTA_Data[3]*(t*t)) + (4*traject -> MatTA_Data[4]*(t*t*t)) + (5*traject -> MatTA_Data[5]*(t*t*t*t));
	}
}
 80026d6:	e3b9      	b.n	8002e4c <CoefficientAndTimeCalculation+0x142c>
 80026d8:	9abcaf48 	.word	0x9abcaf48
 80026dc:	be7ad7f2 	.word	0xbe7ad7f2
 80026e0:	eb1c432d 	.word	0xeb1c432d
 80026e4:	3f0a36e2 	.word	0x3f0a36e2
 80026e8:	5e9e1b09 	.word	0x5e9e1b09
 80026ec:	3f80cb29 	.word	0x3f80cb29
 80026f0:	6fd21ff3 	.word	0x6fd21ff3
 80026f4:	3fea075f 	.word	0x3fea075f
 80026f8:	f9db22d1 	.word	0xf9db22d1
 80026fc:	40102a7e 	.word	0x40102a7e
	else if(traject ->TrajectoryMode == 1) //Quintic
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8002706:	2b01      	cmp	r3, #1
 8002708:	f040 83a0 	bne.w	8002e4c <CoefficientAndTimeCalculation+0x142c>
		   traject -> TimeInit = 0.0;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		   traject -> TimeFinal = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8002722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8002732:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002736:	ee37 7a27 	vadd.f32	s14, s14, s15
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	ed93 6a7b 	vldr	s12, [r3, #492]	; 0x1ec
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	edd3 6a56 	vldr	s13, [r3, #344]	; 0x158
 8002746:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800274a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	edc3 7a83 	vstr	s15, [r3, #524]	; 0x20c
		   traject -> MatTime_Data[0] = 1.0;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800275a:	601a      	str	r2, [r3, #0]
		   traject -> MatTime_Data[1] = traject -> TimeInit;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	605a      	str	r2, [r3, #4]
		   traject -> MatTime_Data[2] = traject -> TimeInit*traject -> TimeInit;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8002772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	edc3 7a02 	vstr	s15, [r3, #8]
		   traject -> MatTime_Data[3] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8002788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8002792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	edc3 7a03 	vstr	s15, [r3, #12]
		   traject -> MatTime_Data[4] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	edc3 7a04 	vstr	s15, [r3, #16]
		   traject -> MatTime_Data[5] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	edc3 7a05 	vstr	s15, [r3, #20]
		   traject -> MatTime_Data[6] = 0.0;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	619a      	str	r2, [r3, #24]
		   traject -> MatTime_Data[7] = 1.0;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002808:	61da      	str	r2, [r3, #28]
		   traject -> MatTime_Data[8] = 2.0*traject -> TimeInit;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8002810:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	edc3 7a08 	vstr	s15, [r3, #32]
		   traject -> MatTime_Data[9] = 3.0*traject -> TimeInit*traject -> TimeInit;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002820:	4618      	mov	r0, r3
 8002822:	f7fd fe3d 	bl	80004a0 <__aeabi_f2d>
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	4bce      	ldr	r3, [pc, #824]	; (8002b64 <CoefficientAndTimeCalculation+0x1144>)
 800282c:	f7fd fe90 	bl	8000550 <__aeabi_dmul>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4614      	mov	r4, r2
 8002836:	461d      	mov	r5, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fe2e 	bl	80004a0 <__aeabi_f2d>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4620      	mov	r0, r4
 800284a:	4629      	mov	r1, r5
 800284c:	f7fd fe80 	bl	8000550 <__aeabi_dmul>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	f7fe f8ac 	bl	80009b4 <__aeabi_d2f>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24
		   traject -> MatTime_Data[10] = 4.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002868:	4618      	mov	r0, r3
 800286a:	f7fd fe19 	bl	80004a0 <__aeabi_f2d>
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	4bbd      	ldr	r3, [pc, #756]	; (8002b68 <CoefficientAndTimeCalculation+0x1148>)
 8002874:	f7fd fe6c 	bl	8000550 <__aeabi_dmul>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4614      	mov	r4, r2
 800287e:	461d      	mov	r5, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002886:	4618      	mov	r0, r3
 8002888:	f7fd fe0a 	bl	80004a0 <__aeabi_f2d>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4620      	mov	r0, r4
 8002892:	4629      	mov	r1, r5
 8002894:	f7fd fe5c 	bl	8000550 <__aeabi_dmul>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4614      	mov	r4, r2
 800289e:	461d      	mov	r5, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fd fdfa 	bl	80004a0 <__aeabi_f2d>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4620      	mov	r0, r4
 80028b2:	4629      	mov	r1, r5
 80028b4:	f7fd fe4c 	bl	8000550 <__aeabi_dmul>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	f7fe f878 	bl	80009b4 <__aeabi_d2f>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	629a      	str	r2, [r3, #40]	; 0x28
		   traject -> MatTime_Data[11] = 5.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fde5 	bl	80004a0 <__aeabi_f2d>
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	4ba4      	ldr	r3, [pc, #656]	; (8002b6c <CoefficientAndTimeCalculation+0x114c>)
 80028dc:	f7fd fe38 	bl	8000550 <__aeabi_dmul>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4614      	mov	r4, r2
 80028e6:	461d      	mov	r5, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd fdd6 	bl	80004a0 <__aeabi_f2d>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4620      	mov	r0, r4
 80028fa:	4629      	mov	r1, r5
 80028fc:	f7fd fe28 	bl	8000550 <__aeabi_dmul>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4614      	mov	r4, r2
 8002906:	461d      	mov	r5, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fdc6 	bl	80004a0 <__aeabi_f2d>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4620      	mov	r0, r4
 800291a:	4629      	mov	r1, r5
 800291c:	f7fd fe18 	bl	8000550 <__aeabi_dmul>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4614      	mov	r4, r2
 8002926:	461d      	mov	r5, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800292e:	4618      	mov	r0, r3
 8002930:	f7fd fdb6 	bl	80004a0 <__aeabi_f2d>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4620      	mov	r0, r4
 800293a:	4629      	mov	r1, r5
 800293c:	f7fd fe08 	bl	8000550 <__aeabi_dmul>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	f7fe f834 	bl	80009b4 <__aeabi_d2f>
 800294c:	4602      	mov	r2, r0
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	62da      	str	r2, [r3, #44]	; 0x2c
		   traject -> MatTime_Data[12] = 0.0;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	631a      	str	r2, [r3, #48]	; 0x30
		   traject -> MatTime_Data[13] = 0.0;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	635a      	str	r2, [r3, #52]	; 0x34
		   traject -> MatTime_Data[14] = 2.0;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002968:	639a      	str	r2, [r3, #56]	; 0x38
		   traject -> MatTime_Data[15] = 6.0*traject -> TimeInit;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8002970:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		   traject -> MatTime_Data[16] = 12.0*traject -> TimeInit*traject -> TimeInit;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002984:	4618      	mov	r0, r3
 8002986:	f7fd fd8b 	bl	80004a0 <__aeabi_f2d>
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	4b78      	ldr	r3, [pc, #480]	; (8002b70 <CoefficientAndTimeCalculation+0x1150>)
 8002990:	f7fd fdde 	bl	8000550 <__aeabi_dmul>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4614      	mov	r4, r2
 800299a:	461d      	mov	r5, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fd fd7c 	bl	80004a0 <__aeabi_f2d>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4620      	mov	r0, r4
 80029ae:	4629      	mov	r1, r5
 80029b0:	f7fd fdce 	bl	8000550 <__aeabi_dmul>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f7fd fffa 	bl	80009b4 <__aeabi_d2f>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
		   traject -> MatTime_Data[17] = 20.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fd67 	bl	80004a0 <__aeabi_f2d>
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	4b67      	ldr	r3, [pc, #412]	; (8002b74 <CoefficientAndTimeCalculation+0x1154>)
 80029d8:	f7fd fdba 	bl	8000550 <__aeabi_dmul>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4614      	mov	r4, r2
 80029e2:	461d      	mov	r5, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fd fd58 	bl	80004a0 <__aeabi_f2d>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4620      	mov	r0, r4
 80029f6:	4629      	mov	r1, r5
 80029f8:	f7fd fdaa 	bl	8000550 <__aeabi_dmul>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4614      	mov	r4, r2
 8002a02:	461d      	mov	r5, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fd48 	bl	80004a0 <__aeabi_f2d>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4620      	mov	r0, r4
 8002a16:	4629      	mov	r1, r5
 8002a18:	f7fd fd9a 	bl	8000550 <__aeabi_dmul>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	f7fd ffc6 	bl	80009b4 <__aeabi_d2f>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44
		   traject -> MatTime_Data[18] = 1.0;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a34:	649a      	str	r2, [r3, #72]	; 0x48
		   traject -> MatTime_Data[19] = traject -> TimeFinal;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	64da      	str	r2, [r3, #76]	; 0x4c
		   traject -> MatTime_Data[20] = traject -> TimeFinal*traject -> TimeFinal;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		   traject -> MatTime_Data[21] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		   traject -> MatTime_Data[22] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		   traject -> MatTime_Data[23] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002aac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002ab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002ac0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		   traject -> MatTime_Data[24] = 0.0;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	661a      	str	r2, [r3, #96]	; 0x60
		   traject -> MatTime_Data[25] = 1.0;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ae2:	665a      	str	r2, [r3, #100]	; 0x64
		   traject -> MatTime_Data[26] = 2.0*traject -> TimeFinal;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002aea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		   traject -> MatTime_Data[27] = 3.0*traject -> TimeFinal*traject -> TimeFinal;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd fcd0 	bl	80004a0 <__aeabi_f2d>
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <CoefficientAndTimeCalculation+0x1144>)
 8002b06:	f7fd fd23 	bl	8000550 <__aeabi_dmul>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4614      	mov	r4, r2
 8002b10:	461d      	mov	r5, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fd fcc1 	bl	80004a0 <__aeabi_f2d>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4620      	mov	r0, r4
 8002b24:	4629      	mov	r1, r5
 8002b26:	f7fd fd13 	bl	8000550 <__aeabi_dmul>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	f7fd ff3f 	bl	80009b4 <__aeabi_d2f>
 8002b36:	4602      	mov	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	66da      	str	r2, [r3, #108]	; 0x6c
		   traject -> MatTime_Data[28] = 4.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fcac 	bl	80004a0 <__aeabi_f2d>
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <CoefficientAndTimeCalculation+0x1148>)
 8002b4e:	f7fd fcff 	bl	8000550 <__aeabi_dmul>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4614      	mov	r4, r2
 8002b58:	461d      	mov	r5, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002b60:	e00a      	b.n	8002b78 <CoefficientAndTimeCalculation+0x1158>
 8002b62:	bf00      	nop
 8002b64:	40080000 	.word	0x40080000
 8002b68:	40100000 	.word	0x40100000
 8002b6c:	40140000 	.word	0x40140000
 8002b70:	40280000 	.word	0x40280000
 8002b74:	40340000 	.word	0x40340000
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fd fc91 	bl	80004a0 <__aeabi_f2d>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4620      	mov	r0, r4
 8002b84:	4629      	mov	r1, r5
 8002b86:	f7fd fce3 	bl	8000550 <__aeabi_dmul>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4614      	mov	r4, r2
 8002b90:	461d      	mov	r5, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fc81 	bl	80004a0 <__aeabi_f2d>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	f7fd fcd3 	bl	8000550 <__aeabi_dmul>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f7fd feff 	bl	80009b4 <__aeabi_d2f>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	671a      	str	r2, [r3, #112]	; 0x70
		   traject -> MatTime_Data[29] = 5.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fc6c 	bl	80004a0 <__aeabi_f2d>
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	4ba2      	ldr	r3, [pc, #648]	; (8002e58 <CoefficientAndTimeCalculation+0x1438>)
 8002bce:	f7fd fcbf 	bl	8000550 <__aeabi_dmul>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4614      	mov	r4, r2
 8002bd8:	461d      	mov	r5, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fd fc5d 	bl	80004a0 <__aeabi_f2d>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4620      	mov	r0, r4
 8002bec:	4629      	mov	r1, r5
 8002bee:	f7fd fcaf 	bl	8000550 <__aeabi_dmul>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4614      	mov	r4, r2
 8002bf8:	461d      	mov	r5, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fd fc4d 	bl	80004a0 <__aeabi_f2d>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	f7fd fc9f 	bl	8000550 <__aeabi_dmul>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4614      	mov	r4, r2
 8002c18:	461d      	mov	r5, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fd fc3d 	bl	80004a0 <__aeabi_f2d>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	f7fd fc8f 	bl	8000550 <__aeabi_dmul>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4610      	mov	r0, r2
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f7fd febb 	bl	80009b4 <__aeabi_d2f>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	675a      	str	r2, [r3, #116]	; 0x74
		   traject -> MatTime_Data[30] = 0.0;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	679a      	str	r2, [r3, #120]	; 0x78
		   traject -> MatTime_Data[31] = 0.0;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	67da      	str	r2, [r3, #124]	; 0x7c
		   traject -> MatTime_Data[32] = 2.0;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		   traject -> MatTime_Data[33] = 6.0*traject -> TimeFinal;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002c64:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002c68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		   traject -> MatTime_Data[34] = 12.0*traject -> TimeFinal*traject -> TimeFinal;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fc11 	bl	80004a0 <__aeabi_f2d>
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	4b76      	ldr	r3, [pc, #472]	; (8002e5c <CoefficientAndTimeCalculation+0x143c>)
 8002c84:	f7fd fc64 	bl	8000550 <__aeabi_dmul>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4614      	mov	r4, r2
 8002c8e:	461d      	mov	r5, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fc02 	bl	80004a0 <__aeabi_f2d>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	f7fd fc54 	bl	8000550 <__aeabi_dmul>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4610      	mov	r0, r2
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f7fd fe80 	bl	80009b4 <__aeabi_d2f>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		   traject -> MatTime_Data[35] = 20.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fbec 	bl	80004a0 <__aeabi_f2d>
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	4b64      	ldr	r3, [pc, #400]	; (8002e60 <CoefficientAndTimeCalculation+0x1440>)
 8002cce:	f7fd fc3f 	bl	8000550 <__aeabi_dmul>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4614      	mov	r4, r2
 8002cd8:	461d      	mov	r5, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fd fbdd 	bl	80004a0 <__aeabi_f2d>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4620      	mov	r0, r4
 8002cec:	4629      	mov	r1, r5
 8002cee:	f7fd fc2f 	bl	8000550 <__aeabi_dmul>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4614      	mov	r4, r2
 8002cf8:	461d      	mov	r5, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fbcd 	bl	80004a0 <__aeabi_f2d>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	f7fd fc1f 	bl	8000550 <__aeabi_dmul>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4610      	mov	r0, r2
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f7fd fe4b 	bl	80009b4 <__aeabi_d2f>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		   traject -> MatCondition_Data[0] = traject -> Qin;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		   traject -> MatCondition_Data[1] = 0;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		   traject -> MatCondition_Data[2] = 0;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
		   traject -> MatCondition_Data[3] = traject -> Qfinal;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		   traject -> MatCondition_Data[4] = 0;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
		   traject -> MatCondition_Data[5] = 0;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		   traject -> Trajectorystatus = arm_mat_inverse_f32(&(traject ->MatTime), &(traject ->MatTimeINV));
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f503 7207 	add.w	r2, r3, #540	; 0x21c
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8002d72:	4619      	mov	r1, r3
 8002d74:	4610      	mov	r0, r2
 8002d76:	f009 fb87 	bl	800c488 <arm_mat_inverse_f32>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
		   traject -> Trajectorystatus = arm_mat_mult_f32(&(traject ->MatTimeINV), &(traject ->MatCondition), &(traject ->MatA));
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f503 7009 	add.w	r0, r3, #548	; 0x224
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f503 710b 	add.w	r1, r3, #556	; 0x22c
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8002d96:	461a      	mov	r2, r3
 8002d98:	f009 fad6 	bl	800c348 <arm_mat_mult_f32>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
		   float t = (traject -> TimeFinal)/2.0;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8002dac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002db0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002db4:	edc7 7a05 	vstr	s15, [r7, #20]
		   traject -> VMCal = (traject -> MatTA_Data[1]) + (2*traject -> MatTA_Data[2]*t) + (3*traject -> MatTA_Data[3]*(t*t)) + (4*traject -> MatTA_Data[4]*(t*t*t)) + (5*traject -> MatTA_Data[5]*(t*t*t*t));
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8002dc4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002dc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8002dda:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002dde:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002de2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002de6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8002df8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002dfc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002e00:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e04:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8002e08:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e0c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8002e1e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002e22:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002e26:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e2a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8002e2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e32:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e36:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	edc3 7a84 	vstr	s15, [r3, #528]	; 0x210
}
 8002e4c:	bf00      	nop
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e56:	bf00      	nop
 8002e58:	40140000 	.word	0x40140000
 8002e5c:	40280000 	.word	0x40280000
 8002e60:	40340000 	.word	0x40340000
 8002e64:	00000000 	.word	0x00000000

08002e68 <TrajectoryEvaluation>:

void TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime, uint64_t PredictTime){
 8002e68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	e9c7 2300 	strd	r2, r3, [r7]
   // Microsec to sec
   static float t = 0;
   static float tP = 0;
   t  = (CurrentTime - StartTime)/1000000.0;
 8002e76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e7e:	ebb0 0802 	subs.w	r8, r0, r2
 8002e82:	eb61 0903 	sbc.w	r9, r1, r3
 8002e86:	4640      	mov	r0, r8
 8002e88:	4649      	mov	r1, r9
 8002e8a:	f7fd fb2b 	bl	80004e4 <__aeabi_ul2d>
 8002e8e:	a3cc      	add	r3, pc, #816	; (adr r3, 80031c0 <TrajectoryEvaluation+0x358>)
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f7fd fc86 	bl	80007a4 <__aeabi_ddiv>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f7fd fd88 	bl	80009b4 <__aeabi_d2f>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	4ac8      	ldr	r2, [pc, #800]	; (80031c8 <TrajectoryEvaluation+0x360>)
 8002ea8:	6013      	str	r3, [r2, #0]
   tP = (PredictTime - StartTime)/1000000.0;
 8002eaa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eb2:	1a84      	subs	r4, r0, r2
 8002eb4:	eb61 0503 	sbc.w	r5, r1, r3
 8002eb8:	4620      	mov	r0, r4
 8002eba:	4629      	mov	r1, r5
 8002ebc:	f7fd fb12 	bl	80004e4 <__aeabi_ul2d>
 8002ec0:	a3bf      	add	r3, pc, #764	; (adr r3, 80031c0 <TrajectoryEvaluation+0x358>)
 8002ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec6:	f7fd fc6d 	bl	80007a4 <__aeabi_ddiv>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f7fd fd6f 	bl	80009b4 <__aeabi_d2f>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4abc      	ldr	r2, [pc, #752]	; (80031cc <TrajectoryEvaluation+0x364>)
 8002eda:	6013      	str	r3, [r2, #0]

	if(traject ->TrajectoryMode == 0) // S-curve
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 8526 	bne.w	8003934 <TrajectoryEvaluation+0xacc>
	{
		if(t >= 0 && t < traject -> T[0])
 8002ee8:	4bb7      	ldr	r3, [pc, #732]	; (80031c8 <TrajectoryEvaluation+0x360>)
 8002eea:	edd3 7a00 	vldr	s15, [r3]
 8002eee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef6:	f2c0 80aa 	blt.w	800304e <TrajectoryEvaluation+0x1e6>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	ed93 7a73 	vldr	s14, [r3, #460]	; 0x1cc
 8002f00:	4bb1      	ldr	r3, [pc, #708]	; (80031c8 <TrajectoryEvaluation+0x360>)
 8002f02:	edd3 7a00 	vldr	s15, [r3]
 8002f06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0e:	f340 809e 	ble.w	800304e <TrajectoryEvaluation+0x1e6>
		   {
		      traject -> QJ = traject -> A[0];
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[0]*t + traject -> B[0];
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 8002f24:	4ba8      	ldr	r3, [pc, #672]	; (80031c8 <TrajectoryEvaluation+0x360>)
 8002f26:	edd3 7a00 	vldr	s15, [r3]
 8002f2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 8002f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 8002f44:	4ba0      	ldr	r3, [pc, #640]	; (80031c8 <TrajectoryEvaluation+0x360>)
 8002f46:	edd3 6a00 	vldr	s13, [r3]
 8002f4a:	4b9f      	ldr	r3, [pc, #636]	; (80031c8 <TrajectoryEvaluation+0x360>)
 8002f4c:	edd3 7a00 	vldr	s15, [r3]
 8002f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f58:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002f5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 8002f66:	4b98      	ldr	r3, [pc, #608]	; (80031c8 <TrajectoryEvaluation+0x360>)
 8002f68:	edd3 7a00 	vldr	s15, [r3]
 8002f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 8002f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[0]*(tP*tP)/2 + traject -> B[0]*tP + traject -> C[0];
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 8002f8a:	4b90      	ldr	r3, [pc, #576]	; (80031cc <TrajectoryEvaluation+0x364>)
 8002f8c:	edd3 6a00 	vldr	s13, [r3]
 8002f90:	4b8e      	ldr	r3, [pc, #568]	; (80031cc <TrajectoryEvaluation+0x364>)
 8002f92:	edd3 7a00 	vldr	s15, [r3]
 8002f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002fa2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 8002fac:	4b87      	ldr	r3, [pc, #540]	; (80031cc <TrajectoryEvaluation+0x364>)
 8002fae:	edd3 7a00 	vldr	s15, [r3]
 8002fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 8002fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	edd3 6a57 	vldr	s13, [r3, #348]	; 0x15c
 8002fd6:	4b7c      	ldr	r3, [pc, #496]	; (80031c8 <TrajectoryEvaluation+0x360>)
 8002fd8:	ed93 6a00 	vldr	s12, [r3]
 8002fdc:	4b7a      	ldr	r3, [pc, #488]	; (80031c8 <TrajectoryEvaluation+0x360>)
 8002fde:	edd3 7a00 	vldr	s15, [r3]
 8002fe2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002fe6:	4b78      	ldr	r3, [pc, #480]	; (80031c8 <TrajectoryEvaluation+0x360>)
 8002fe8:	edd3 7a00 	vldr	s15, [r3]
 8002fec:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ff0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ff4:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002ff8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 8003006:	4b70      	ldr	r3, [pc, #448]	; (80031c8 <TrajectoryEvaluation+0x360>)
 8003008:	ed93 6a00 	vldr	s12, [r3]
 800300c:	4b6e      	ldr	r3, [pc, #440]	; (80031c8 <TrajectoryEvaluation+0x360>)
 800300e:	edd3 7a00 	vldr	s15, [r3]
 8003012:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003016:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800301a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800301e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003022:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	edd3 6a65 	vldr	s13, [r3, #404]	; 0x194
 800302c:	4b66      	ldr	r3, [pc, #408]	; (80031c8 <TrajectoryEvaluation+0x360>)
 800302e:	edd3 7a00 	vldr	s15, [r3]
 8003032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003036:	ee37 7a27 	vadd.f32	s14, s14, s15
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 8003040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 800304a:	f000 be08 	b.w	8003c5e <TrajectoryEvaluation+0xdf6>
		   }
		   else if( t >= traject -> T[0] && t < traject -> T[1])
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	ed93 7a73 	vldr	s14, [r3, #460]	; 0x1cc
 8003054:	4b5c      	ldr	r3, [pc, #368]	; (80031c8 <TrajectoryEvaluation+0x360>)
 8003056:	edd3 7a00 	vldr	s15, [r3]
 800305a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800305e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003062:	f200 80b5 	bhi.w	80031d0 <TrajectoryEvaluation+0x368>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	ed93 7a74 	vldr	s14, [r3, #464]	; 0x1d0
 800306c:	4b56      	ldr	r3, [pc, #344]	; (80031c8 <TrajectoryEvaluation+0x360>)
 800306e:	edd3 7a00 	vldr	s15, [r3]
 8003072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307a:	f340 80a9 	ble.w	80031d0 <TrajectoryEvaluation+0x368>
		   {
		      traject -> QJ = traject -> A[1];
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[1]*t + traject -> B[1];
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 8003090:	4b4d      	ldr	r3, [pc, #308]	; (80031c8 <TrajectoryEvaluation+0x360>)
 8003092:	edd3 7a00 	vldr	s15, [r3]
 8003096:	ee27 7a27 	vmul.f32	s14, s14, s15
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 80030a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 80030b0:	4b45      	ldr	r3, [pc, #276]	; (80031c8 <TrajectoryEvaluation+0x360>)
 80030b2:	edd3 6a00 	vldr	s13, [r3]
 80030b6:	4b44      	ldr	r3, [pc, #272]	; (80031c8 <TrajectoryEvaluation+0x360>)
 80030b8:	edd3 7a00 	vldr	s15, [r3]
 80030bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80030c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 80030d2:	4b3d      	ldr	r3, [pc, #244]	; (80031c8 <TrajectoryEvaluation+0x360>)
 80030d4:	edd3 7a00 	vldr	s15, [r3]
 80030d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	edd3 7a66 	vldr	s15, [r3, #408]	; 0x198
 80030e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[1]*(tP*tP)/2 + traject -> B[1]*tP + traject -> C[1];
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 80030f6:	4b35      	ldr	r3, [pc, #212]	; (80031cc <TrajectoryEvaluation+0x364>)
 80030f8:	edd3 6a00 	vldr	s13, [r3]
 80030fc:	4b33      	ldr	r3, [pc, #204]	; (80031cc <TrajectoryEvaluation+0x364>)
 80030fe:	edd3 7a00 	vldr	s15, [r3]
 8003102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800310e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 8003118:	4b2c      	ldr	r3, [pc, #176]	; (80031cc <TrajectoryEvaluation+0x364>)
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003122:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	edd3 7a66 	vldr	s15, [r3, #408]	; 0x198
 800312c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	edd3 6a58 	vldr	s13, [r3, #352]	; 0x160
 8003142:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <TrajectoryEvaluation+0x360>)
 8003144:	ed93 6a00 	vldr	s12, [r3]
 8003148:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <TrajectoryEvaluation+0x360>)
 800314a:	edd3 7a00 	vldr	s15, [r3]
 800314e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003152:	4b1d      	ldr	r3, [pc, #116]	; (80031c8 <TrajectoryEvaluation+0x360>)
 8003154:	edd3 7a00 	vldr	s15, [r3]
 8003158:	ee66 7a27 	vmul.f32	s15, s12, s15
 800315c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003160:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8003164:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003168:	ee37 7a27 	vadd.f32	s14, s14, s15
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <TrajectoryEvaluation+0x360>)
 8003174:	ed93 6a00 	vldr	s12, [r3]
 8003178:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <TrajectoryEvaluation+0x360>)
 800317a:	edd3 7a00 	vldr	s15, [r3]
 800317e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003182:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003186:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800318a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800318e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	edd3 6a66 	vldr	s13, [r3, #408]	; 0x198
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <TrajectoryEvaluation+0x360>)
 800319a:	edd3 7a00 	vldr	s15, [r3]
 800319e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 80031ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 80031b6:	f000 bd52 	b.w	8003c5e <TrajectoryEvaluation+0xdf6>
 80031ba:	bf00      	nop
 80031bc:	f3af 8000 	nop.w
 80031c0:	00000000 	.word	0x00000000
 80031c4:	412e8480 	.word	0x412e8480
 80031c8:	2000045c 	.word	0x2000045c
 80031cc:	20000460 	.word	0x20000460
		   }
		   else if( t >= traject -> T[1] && t < traject -> T[2])
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	ed93 7a74 	vldr	s14, [r3, #464]	; 0x1d0
 80031d6:	4bb4      	ldr	r3, [pc, #720]	; (80034a8 <TrajectoryEvaluation+0x640>)
 80031d8:	edd3 7a00 	vldr	s15, [r3]
 80031dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e4:	f200 80aa 	bhi.w	800333c <TrajectoryEvaluation+0x4d4>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	ed93 7a75 	vldr	s14, [r3, #468]	; 0x1d4
 80031ee:	4bae      	ldr	r3, [pc, #696]	; (80034a8 <TrajectoryEvaluation+0x640>)
 80031f0:	edd3 7a00 	vldr	s15, [r3]
 80031f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fc:	f340 809e 	ble.w	800333c <TrajectoryEvaluation+0x4d4>
		   {
		      traject -> QJ = traject -> A[2];
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[2]*t + traject -> B[2];
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 8003212:	4ba5      	ldr	r3, [pc, #660]	; (80034a8 <TrajectoryEvaluation+0x640>)
 8003214:	edd3 7a00 	vldr	s15, [r3]
 8003218:	ee27 7a27 	vmul.f32	s14, s14, s15
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	edd3 7a60 	vldr	s15, [r3, #384]	; 0x180
 8003222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 8003232:	4b9d      	ldr	r3, [pc, #628]	; (80034a8 <TrajectoryEvaluation+0x640>)
 8003234:	edd3 6a00 	vldr	s13, [r3]
 8003238:	4b9b      	ldr	r3, [pc, #620]	; (80034a8 <TrajectoryEvaluation+0x640>)
 800323a:	edd3 7a00 	vldr	s15, [r3]
 800323e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003246:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800324a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 8003254:	4b94      	ldr	r3, [pc, #592]	; (80034a8 <TrajectoryEvaluation+0x640>)
 8003256:	edd3 7a00 	vldr	s15, [r3]
 800325a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800325e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 8003268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[2]*(tP*tP)/2 + traject -> B[2]*tP + traject -> C[2];
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 8003278:	4b8c      	ldr	r3, [pc, #560]	; (80034ac <TrajectoryEvaluation+0x644>)
 800327a:	edd3 6a00 	vldr	s13, [r3]
 800327e:	4b8b      	ldr	r3, [pc, #556]	; (80034ac <TrajectoryEvaluation+0x644>)
 8003280:	edd3 7a00 	vldr	s15, [r3]
 8003284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003290:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 800329a:	4b84      	ldr	r3, [pc, #528]	; (80034ac <TrajectoryEvaluation+0x644>)
 800329c:	edd3 7a00 	vldr	s15, [r3]
 80032a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 80032ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	edd3 6a59 	vldr	s13, [r3, #356]	; 0x164
 80032c4:	4b78      	ldr	r3, [pc, #480]	; (80034a8 <TrajectoryEvaluation+0x640>)
 80032c6:	ed93 6a00 	vldr	s12, [r3]
 80032ca:	4b77      	ldr	r3, [pc, #476]	; (80034a8 <TrajectoryEvaluation+0x640>)
 80032cc:	edd3 7a00 	vldr	s15, [r3]
 80032d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80032d4:	4b74      	ldr	r3, [pc, #464]	; (80034a8 <TrajectoryEvaluation+0x640>)
 80032d6:	edd3 7a00 	vldr	s15, [r3]
 80032da:	ee66 7a27 	vmul.f32	s15, s12, s15
 80032de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032e2:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80032e6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 80032f4:	4b6c      	ldr	r3, [pc, #432]	; (80034a8 <TrajectoryEvaluation+0x640>)
 80032f6:	ed93 6a00 	vldr	s12, [r3]
 80032fa:	4b6b      	ldr	r3, [pc, #428]	; (80034a8 <TrajectoryEvaluation+0x640>)
 80032fc:	edd3 7a00 	vldr	s15, [r3]
 8003300:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003304:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003308:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800330c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003310:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	edd3 6a67 	vldr	s13, [r3, #412]	; 0x19c
 800331a:	4b63      	ldr	r3, [pc, #396]	; (80034a8 <TrajectoryEvaluation+0x640>)
 800331c:	edd3 7a00 	vldr	s15, [r3]
 8003320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003324:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 800332e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 8003338:	f000 bc91 	b.w	8003c5e <TrajectoryEvaluation+0xdf6>
		   }
		   else if( t >= traject -> T[2] && t < traject -> T[3])
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	ed93 7a75 	vldr	s14, [r3, #468]	; 0x1d4
 8003342:	4b59      	ldr	r3, [pc, #356]	; (80034a8 <TrajectoryEvaluation+0x640>)
 8003344:	edd3 7a00 	vldr	s15, [r3]
 8003348:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800334c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003350:	f200 80ae 	bhi.w	80034b0 <TrajectoryEvaluation+0x648>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	ed93 7a76 	vldr	s14, [r3, #472]	; 0x1d8
 800335a:	4b53      	ldr	r3, [pc, #332]	; (80034a8 <TrajectoryEvaluation+0x640>)
 800335c:	edd3 7a00 	vldr	s15, [r3]
 8003360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003368:	f340 80a2 	ble.w	80034b0 <TrajectoryEvaluation+0x648>
		   {
		      traject -> QJ = traject -> A[3];
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[3]*t + traject -> B[3];
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 800337e:	4b4a      	ldr	r3, [pc, #296]	; (80034a8 <TrajectoryEvaluation+0x640>)
 8003380:	edd3 7a00 	vldr	s15, [r3]
 8003384:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	edd3 7a61 	vldr	s15, [r3, #388]	; 0x184
 800338e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 800339e:	4b42      	ldr	r3, [pc, #264]	; (80034a8 <TrajectoryEvaluation+0x640>)
 80033a0:	edd3 6a00 	vldr	s13, [r3]
 80033a4:	4b40      	ldr	r3, [pc, #256]	; (80034a8 <TrajectoryEvaluation+0x640>)
 80033a6:	edd3 7a00 	vldr	s15, [r3]
 80033aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80033b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 80033c0:	4b39      	ldr	r3, [pc, #228]	; (80034a8 <TrajectoryEvaluation+0x640>)
 80033c2:	edd3 7a00 	vldr	s15, [r3]
 80033c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	edd3 7a68 	vldr	s15, [r3, #416]	; 0x1a0
 80033d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[3]*(tP*tP)/2 + traject -> B[3]*tP + traject -> C[3];
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 80033e4:	4b31      	ldr	r3, [pc, #196]	; (80034ac <TrajectoryEvaluation+0x644>)
 80033e6:	edd3 6a00 	vldr	s13, [r3]
 80033ea:	4b30      	ldr	r3, [pc, #192]	; (80034ac <TrajectoryEvaluation+0x644>)
 80033ec:	edd3 7a00 	vldr	s15, [r3]
 80033f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80033fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 8003406:	4b29      	ldr	r3, [pc, #164]	; (80034ac <TrajectoryEvaluation+0x644>)
 8003408:	edd3 7a00 	vldr	s15, [r3]
 800340c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003410:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	edd3 7a68 	vldr	s15, [r3, #416]	; 0x1a0
 800341a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	edd3 6a5a 	vldr	s13, [r3, #360]	; 0x168
 8003430:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <TrajectoryEvaluation+0x640>)
 8003432:	ed93 6a00 	vldr	s12, [r3]
 8003436:	4b1c      	ldr	r3, [pc, #112]	; (80034a8 <TrajectoryEvaluation+0x640>)
 8003438:	edd3 7a00 	vldr	s15, [r3]
 800343c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003440:	4b19      	ldr	r3, [pc, #100]	; (80034a8 <TrajectoryEvaluation+0x640>)
 8003442:	edd3 7a00 	vldr	s15, [r3]
 8003446:	ee66 7a27 	vmul.f32	s15, s12, s15
 800344a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800344e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8003452:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003456:	ee37 7a27 	vadd.f32	s14, s14, s15
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <TrajectoryEvaluation+0x640>)
 8003462:	ed93 6a00 	vldr	s12, [r3]
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <TrajectoryEvaluation+0x640>)
 8003468:	edd3 7a00 	vldr	s15, [r3]
 800346c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003470:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003474:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8003478:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800347c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	edd3 6a68 	vldr	s13, [r3, #416]	; 0x1a0
 8003486:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <TrajectoryEvaluation+0x640>)
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	edd3 7a6f 	vldr	s15, [r3, #444]	; 0x1bc
 800349a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 80034a4:	e3db      	b.n	8003c5e <TrajectoryEvaluation+0xdf6>
 80034a6:	bf00      	nop
 80034a8:	2000045c 	.word	0x2000045c
 80034ac:	20000460 	.word	0x20000460
		   }
		   else if( t >= traject -> T[3] && t < traject -> T[4])
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	ed93 7a76 	vldr	s14, [r3, #472]	; 0x1d8
 80034b6:	4bb3      	ldr	r3, [pc, #716]	; (8003784 <TrajectoryEvaluation+0x91c>)
 80034b8:	edd3 7a00 	vldr	s15, [r3]
 80034bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c4:	f200 80a9 	bhi.w	800361a <TrajectoryEvaluation+0x7b2>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	ed93 7a77 	vldr	s14, [r3, #476]	; 0x1dc
 80034ce:	4bad      	ldr	r3, [pc, #692]	; (8003784 <TrajectoryEvaluation+0x91c>)
 80034d0:	edd3 7a00 	vldr	s15, [r3]
 80034d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034dc:	f340 809d 	ble.w	800361a <TrajectoryEvaluation+0x7b2>
		   {
		      traject -> QJ = traject -> A[4];
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[4]*t + traject -> B[4];
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 80034f2:	4ba4      	ldr	r3, [pc, #656]	; (8003784 <TrajectoryEvaluation+0x91c>)
 80034f4:	edd3 7a00 	vldr	s15, [r3]
 80034f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	edd3 7a62 	vldr	s15, [r3, #392]	; 0x188
 8003502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 8003512:	4b9c      	ldr	r3, [pc, #624]	; (8003784 <TrajectoryEvaluation+0x91c>)
 8003514:	edd3 6a00 	vldr	s13, [r3]
 8003518:	4b9a      	ldr	r3, [pc, #616]	; (8003784 <TrajectoryEvaluation+0x91c>)
 800351a:	edd3 7a00 	vldr	s15, [r3]
 800351e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003526:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800352a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 8003534:	4b93      	ldr	r3, [pc, #588]	; (8003784 <TrajectoryEvaluation+0x91c>)
 8003536:	edd3 7a00 	vldr	s15, [r3]
 800353a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800353e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 8003548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[4]*(tP*tP)/2 + traject -> B[4]*tP + traject -> C[4];
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 8003558:	4b8b      	ldr	r3, [pc, #556]	; (8003788 <TrajectoryEvaluation+0x920>)
 800355a:	edd3 6a00 	vldr	s13, [r3]
 800355e:	4b8a      	ldr	r3, [pc, #552]	; (8003788 <TrajectoryEvaluation+0x920>)
 8003560:	edd3 7a00 	vldr	s15, [r3]
 8003564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003570:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 800357a:	4b83      	ldr	r3, [pc, #524]	; (8003788 <TrajectoryEvaluation+0x920>)
 800357c:	edd3 7a00 	vldr	s15, [r3]
 8003580:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 800358e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	edd3 6a5b 	vldr	s13, [r3, #364]	; 0x16c
 80035a4:	4b77      	ldr	r3, [pc, #476]	; (8003784 <TrajectoryEvaluation+0x91c>)
 80035a6:	ed93 6a00 	vldr	s12, [r3]
 80035aa:	4b76      	ldr	r3, [pc, #472]	; (8003784 <TrajectoryEvaluation+0x91c>)
 80035ac:	edd3 7a00 	vldr	s15, [r3]
 80035b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80035b4:	4b73      	ldr	r3, [pc, #460]	; (8003784 <TrajectoryEvaluation+0x91c>)
 80035b6:	edd3 7a00 	vldr	s15, [r3]
 80035ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80035be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035c2:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80035c6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80035ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 80035d4:	4b6b      	ldr	r3, [pc, #428]	; (8003784 <TrajectoryEvaluation+0x91c>)
 80035d6:	ed93 6a00 	vldr	s12, [r3]
 80035da:	4b6a      	ldr	r3, [pc, #424]	; (8003784 <TrajectoryEvaluation+0x91c>)
 80035dc:	edd3 7a00 	vldr	s15, [r3]
 80035e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80035e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035e8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80035ec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80035f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	edd3 6a69 	vldr	s13, [r3, #420]	; 0x1a4
 80035fa:	4b62      	ldr	r3, [pc, #392]	; (8003784 <TrajectoryEvaluation+0x91c>)
 80035fc:	edd3 7a00 	vldr	s15, [r3]
 8003600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003604:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	edd3 7a70 	vldr	s15, [r3, #448]	; 0x1c0
 800360e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 8003618:	e321      	b.n	8003c5e <TrajectoryEvaluation+0xdf6>
		   }
		   else if( t >= traject -> T[4] && t < traject -> T[5])
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	ed93 7a77 	vldr	s14, [r3, #476]	; 0x1dc
 8003620:	4b58      	ldr	r3, [pc, #352]	; (8003784 <TrajectoryEvaluation+0x91c>)
 8003622:	edd3 7a00 	vldr	s15, [r3]
 8003626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362e:	f200 80ad 	bhi.w	800378c <TrajectoryEvaluation+0x924>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	ed93 7a78 	vldr	s14, [r3, #480]	; 0x1e0
 8003638:	4b52      	ldr	r3, [pc, #328]	; (8003784 <TrajectoryEvaluation+0x91c>)
 800363a:	edd3 7a00 	vldr	s15, [r3]
 800363e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003646:	f340 80a1 	ble.w	800378c <TrajectoryEvaluation+0x924>
		   {
		      traject -> QJ = traject -> A[5];
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[5]*t + traject -> B[5];
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 800365c:	4b49      	ldr	r3, [pc, #292]	; (8003784 <TrajectoryEvaluation+0x91c>)
 800365e:	edd3 7a00 	vldr	s15, [r3]
 8003662:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	edd3 7a63 	vldr	s15, [r3, #396]	; 0x18c
 800366c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 800367c:	4b41      	ldr	r3, [pc, #260]	; (8003784 <TrajectoryEvaluation+0x91c>)
 800367e:	edd3 6a00 	vldr	s13, [r3]
 8003682:	4b40      	ldr	r3, [pc, #256]	; (8003784 <TrajectoryEvaluation+0x91c>)
 8003684:	edd3 7a00 	vldr	s15, [r3]
 8003688:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800368c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003690:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003694:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 800369e:	4b39      	ldr	r3, [pc, #228]	; (8003784 <TrajectoryEvaluation+0x91c>)
 80036a0:	edd3 7a00 	vldr	s15, [r3]
 80036a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 80036b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[5]*(tP*tP)/2 + traject -> B[5]*tP + traject -> C[5];
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 80036c2:	4b31      	ldr	r3, [pc, #196]	; (8003788 <TrajectoryEvaluation+0x920>)
 80036c4:	edd3 6a00 	vldr	s13, [r3]
 80036c8:	4b2f      	ldr	r3, [pc, #188]	; (8003788 <TrajectoryEvaluation+0x920>)
 80036ca:	edd3 7a00 	vldr	s15, [r3]
 80036ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80036da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 80036e4:	4b28      	ldr	r3, [pc, #160]	; (8003788 <TrajectoryEvaluation+0x920>)
 80036e6:	edd3 7a00 	vldr	s15, [r3]
 80036ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 80036f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	edd3 6a5c 	vldr	s13, [r3, #368]	; 0x170
 800370e:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <TrajectoryEvaluation+0x91c>)
 8003710:	ed93 6a00 	vldr	s12, [r3]
 8003714:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <TrajectoryEvaluation+0x91c>)
 8003716:	edd3 7a00 	vldr	s15, [r3]
 800371a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800371e:	4b19      	ldr	r3, [pc, #100]	; (8003784 <TrajectoryEvaluation+0x91c>)
 8003720:	edd3 7a00 	vldr	s15, [r3]
 8003724:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003728:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800372c:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8003730:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003734:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 800373e:	4b11      	ldr	r3, [pc, #68]	; (8003784 <TrajectoryEvaluation+0x91c>)
 8003740:	ed93 6a00 	vldr	s12, [r3]
 8003744:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <TrajectoryEvaluation+0x91c>)
 8003746:	edd3 7a00 	vldr	s15, [r3]
 800374a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800374e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003752:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8003756:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800375a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	edd3 6a6a 	vldr	s13, [r3, #424]	; 0x1a8
 8003764:	4b07      	ldr	r3, [pc, #28]	; (8003784 <TrajectoryEvaluation+0x91c>)
 8003766:	edd3 7a00 	vldr	s15, [r3]
 800376a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800376e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	edd3 7a71 	vldr	s15, [r3, #452]	; 0x1c4
 8003778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 8003782:	e26c      	b.n	8003c5e <TrajectoryEvaluation+0xdf6>
 8003784:	2000045c 	.word	0x2000045c
 8003788:	20000460 	.word	0x20000460
		   }
		   else if( t >= traject -> T[5] && t < traject -> T[6])
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	ed93 7a78 	vldr	s14, [r3, #480]	; 0x1e0
 8003792:	4b66      	ldr	r3, [pc, #408]	; (800392c <TrajectoryEvaluation+0xac4>)
 8003794:	edd3 7a00 	vldr	s15, [r3]
 8003798:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800379c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a0:	f200 80a9 	bhi.w	80038f6 <TrajectoryEvaluation+0xa8e>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	ed93 7a79 	vldr	s14, [r3, #484]	; 0x1e4
 80037aa:	4b60      	ldr	r3, [pc, #384]	; (800392c <TrajectoryEvaluation+0xac4>)
 80037ac:	edd3 7a00 	vldr	s15, [r3]
 80037b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b8:	f340 809d 	ble.w	80038f6 <TrajectoryEvaluation+0xa8e>
		   {
		      traject -> QJ = traject -> A[6];
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[6]*t + traject -> B[6];
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	ed93 7a5d 	vldr	s14, [r3, #372]	; 0x174
 80037ce:	4b57      	ldr	r3, [pc, #348]	; (800392c <TrajectoryEvaluation+0xac4>)
 80037d0:	edd3 7a00 	vldr	s15, [r3]
 80037d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	edd3 7a64 	vldr	s15, [r3, #400]	; 0x190
 80037de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	ed93 7a5d 	vldr	s14, [r3, #372]	; 0x174
 80037ee:	4b4f      	ldr	r3, [pc, #316]	; (800392c <TrajectoryEvaluation+0xac4>)
 80037f0:	edd3 6a00 	vldr	s13, [r3]
 80037f4:	4b4d      	ldr	r3, [pc, #308]	; (800392c <TrajectoryEvaluation+0xac4>)
 80037f6:	edd3 7a00 	vldr	s15, [r3]
 80037fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003802:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003806:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	edd3 6a64 	vldr	s13, [r3, #400]	; 0x190
 8003810:	4b46      	ldr	r3, [pc, #280]	; (800392c <TrajectoryEvaluation+0xac4>)
 8003812:	edd3 7a00 	vldr	s15, [r3]
 8003816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800381a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 8003824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[6]*(tP*tP)/2 + traject -> B[6]*tP + traject -> C[6];
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	ed93 7a5d 	vldr	s14, [r3, #372]	; 0x174
 8003834:	4b3e      	ldr	r3, [pc, #248]	; (8003930 <TrajectoryEvaluation+0xac8>)
 8003836:	edd3 6a00 	vldr	s13, [r3]
 800383a:	4b3d      	ldr	r3, [pc, #244]	; (8003930 <TrajectoryEvaluation+0xac8>)
 800383c:	edd3 7a00 	vldr	s15, [r3]
 8003840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003848:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800384c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	edd3 6a64 	vldr	s13, [r3, #400]	; 0x190
 8003856:	4b36      	ldr	r3, [pc, #216]	; (8003930 <TrajectoryEvaluation+0xac8>)
 8003858:	edd3 7a00 	vldr	s15, [r3]
 800385c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003860:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 800386a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	edd3 6a5d 	vldr	s13, [r3, #372]	; 0x174
 8003880:	4b2a      	ldr	r3, [pc, #168]	; (800392c <TrajectoryEvaluation+0xac4>)
 8003882:	ed93 6a00 	vldr	s12, [r3]
 8003886:	4b29      	ldr	r3, [pc, #164]	; (800392c <TrajectoryEvaluation+0xac4>)
 8003888:	edd3 7a00 	vldr	s15, [r3]
 800388c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003890:	4b26      	ldr	r3, [pc, #152]	; (800392c <TrajectoryEvaluation+0xac4>)
 8003892:	edd3 7a00 	vldr	s15, [r3]
 8003896:	ee66 7a27 	vmul.f32	s15, s12, s15
 800389a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800389e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80038a2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80038a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	edd3 6a64 	vldr	s13, [r3, #400]	; 0x190
 80038b0:	4b1e      	ldr	r3, [pc, #120]	; (800392c <TrajectoryEvaluation+0xac4>)
 80038b2:	ed93 6a00 	vldr	s12, [r3]
 80038b6:	4b1d      	ldr	r3, [pc, #116]	; (800392c <TrajectoryEvaluation+0xac4>)
 80038b8:	edd3 7a00 	vldr	s15, [r3]
 80038bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80038c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038c4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80038c8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80038cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	edd3 6a6b 	vldr	s13, [r3, #428]	; 0x1ac
 80038d6:	4b15      	ldr	r3, [pc, #84]	; (800392c <TrajectoryEvaluation+0xac4>)
 80038d8:	edd3 7a00 	vldr	s15, [r3]
 80038dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 80038ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 80038f4:	e1b3      	b.n	8003c5e <TrajectoryEvaluation+0xdf6>
		   }
		   else
		   {
		      traject -> QJ = 0;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = 0;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
		      traject -> QV = 0;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		      traject -> QVP = 0;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qfinal;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		  traject -> QV = 0;
		  traject -> QVP = 0;
		  traject -> QX = traject -> Qfinal;
	   }
	}
   return 1.0;
 800392a:	e199      	b.n	8003c60 <TrajectoryEvaluation+0xdf8>
 800392c:	2000045c 	.word	0x2000045c
 8003930:	20000460 	.word	0x20000460
	else if(traject ->TrajectoryMode == 1) //Quintic
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800393a:	2b01      	cmp	r3, #1
 800393c:	f040 8190 	bne.w	8003c60 <TrajectoryEvaluation+0xdf8>
	   if(t >= 0 && t < traject -> TimeFinal)
 8003940:	4bca      	ldr	r3, [pc, #808]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003942:	edd3 7a00 	vldr	s15, [r3]
 8003946:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800394a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394e:	f2c0 816c 	blt.w	8003c2a <TrajectoryEvaluation+0xdc2>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8003958:	4bc4      	ldr	r3, [pc, #784]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 800395a:	edd3 7a00 	vldr	s15, [r3]
 800395e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003966:	f340 8160 	ble.w	8003c2a <TrajectoryEvaluation+0xdc2>
			 traject -> QA = (2*traject -> MatTA_Data[2]) + (6*traject -> MatTA_Data[3]*t) + (12*traject -> MatTA_Data[4]*(t*t)) + (20*traject -> MatTA_Data[5]*(t*t*t));
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8003970:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 800397a:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800397e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003982:	4bba      	ldr	r3, [pc, #744]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003984:	edd3 7a00 	vldr	s15, [r3]
 8003988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800398c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8003996:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800399a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800399e:	4bb3      	ldr	r3, [pc, #716]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 80039a0:	ed93 6a00 	vldr	s12, [r3]
 80039a4:	4bb1      	ldr	r3, [pc, #708]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 80039a6:	edd3 7a00 	vldr	s15, [r3]
 80039aa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80039ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 80039bc:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80039c0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80039c4:	4ba9      	ldr	r3, [pc, #676]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 80039c6:	ed93 6a00 	vldr	s12, [r3]
 80039ca:	4ba8      	ldr	r3, [pc, #672]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 80039cc:	edd3 7a00 	vldr	s15, [r3]
 80039d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80039d4:	4ba5      	ldr	r3, [pc, #660]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 80039d6:	edd3 7a00 	vldr	s15, [r3]
 80039da:	ee66 7a27 	vmul.f32	s15, s12, s15
 80039de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
			 traject -> QV = (traject -> MatTA_Data[1]) + (2*traject -> MatTA_Data[2]*t) + (3*traject -> MatTA_Data[3]*(t*t)) + (4*traject -> MatTA_Data[4]*(t*t*t)) + (5*traject -> MatTA_Data[5]*(t*t*t*t));
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 80039f8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80039fc:	4b9b      	ldr	r3, [pc, #620]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 80039fe:	edd3 7a00 	vldr	s15, [r3]
 8003a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8003a10:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003a14:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003a18:	4b94      	ldr	r3, [pc, #592]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003a1a:	ed93 6a00 	vldr	s12, [r3]
 8003a1e:	4b93      	ldr	r3, [pc, #588]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003a20:	edd3 7a00 	vldr	s15, [r3]
 8003a24:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8003a36:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003a3a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003a3e:	4b8b      	ldr	r3, [pc, #556]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003a40:	ed93 6a00 	vldr	s12, [r3]
 8003a44:	4b89      	ldr	r3, [pc, #548]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003a46:	edd3 7a00 	vldr	s15, [r3]
 8003a4a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a4e:	4b87      	ldr	r3, [pc, #540]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003a50:	edd3 7a00 	vldr	s15, [r3]
 8003a54:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8003a66:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003a6a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003a6e:	4b7f      	ldr	r3, [pc, #508]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003a70:	ed93 6a00 	vldr	s12, [r3]
 8003a74:	4b7d      	ldr	r3, [pc, #500]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003a76:	edd3 7a00 	vldr	s15, [r3]
 8003a7a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a7e:	4b7b      	ldr	r3, [pc, #492]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003a80:	edd3 7a00 	vldr	s15, [r3]
 8003a84:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a88:	4b78      	ldr	r3, [pc, #480]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003a8a:	edd3 7a00 	vldr	s15, [r3]
 8003a8e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
			 traject -> QVP = (traject -> MatTA_Data[1]) + (2*traject -> MatTA_Data[2]*tP) + (3*traject -> MatTA_Data[3]*(tP*tP)) + (4*traject -> MatTA_Data[4]*(tP*tP*tP)) + (5*traject -> MatTA_Data[5]*(tP*tP*tP*tP));
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8003aac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003ab0:	4b6f      	ldr	r3, [pc, #444]	; (8003c70 <TrajectoryEvaluation+0xe08>)
 8003ab2:	edd3 7a00 	vldr	s15, [r3]
 8003ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8003ac4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003ac8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003acc:	4b68      	ldr	r3, [pc, #416]	; (8003c70 <TrajectoryEvaluation+0xe08>)
 8003ace:	ed93 6a00 	vldr	s12, [r3]
 8003ad2:	4b67      	ldr	r3, [pc, #412]	; (8003c70 <TrajectoryEvaluation+0xe08>)
 8003ad4:	edd3 7a00 	vldr	s15, [r3]
 8003ad8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8003aea:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003aee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003af2:	4b5f      	ldr	r3, [pc, #380]	; (8003c70 <TrajectoryEvaluation+0xe08>)
 8003af4:	ed93 6a00 	vldr	s12, [r3]
 8003af8:	4b5d      	ldr	r3, [pc, #372]	; (8003c70 <TrajectoryEvaluation+0xe08>)
 8003afa:	edd3 7a00 	vldr	s15, [r3]
 8003afe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003b02:	4b5b      	ldr	r3, [pc, #364]	; (8003c70 <TrajectoryEvaluation+0xe08>)
 8003b04:	edd3 7a00 	vldr	s15, [r3]
 8003b08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8003b1a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003b1e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003b22:	4b53      	ldr	r3, [pc, #332]	; (8003c70 <TrajectoryEvaluation+0xe08>)
 8003b24:	ed93 6a00 	vldr	s12, [r3]
 8003b28:	4b51      	ldr	r3, [pc, #324]	; (8003c70 <TrajectoryEvaluation+0xe08>)
 8003b2a:	edd3 7a00 	vldr	s15, [r3]
 8003b2e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003b32:	4b4f      	ldr	r3, [pc, #316]	; (8003c70 <TrajectoryEvaluation+0xe08>)
 8003b34:	edd3 7a00 	vldr	s15, [r3]
 8003b38:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003b3c:	4b4c      	ldr	r3, [pc, #304]	; (8003c70 <TrajectoryEvaluation+0xe08>)
 8003b3e:	edd3 7a00 	vldr	s15, [r3]
 8003b42:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
			 traject -> QX = (traject -> MatTA_Data[0]) + (traject -> MatTA_Data[1]*t) + (traject -> MatTA_Data[2]*(t*t)) + (traject -> MatTA_Data[3]*(t*t*t)) + (traject -> MatTA_Data[4]*(t*t*t*t))+ (traject -> MatTA_Data[5]*(t*t*t*t*t));
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	ed93 7a4e 	vldr	s14, [r3, #312]	; 0x138
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	edd3 6a4f 	vldr	s13, [r3, #316]	; 0x13c
 8003b60:	4b42      	ldr	r3, [pc, #264]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003b62:	edd3 7a00 	vldr	s15, [r3]
 8003b66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	edd3 6a50 	vldr	s13, [r3, #320]	; 0x140
 8003b74:	4b3d      	ldr	r3, [pc, #244]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003b76:	ed93 6a00 	vldr	s12, [r3]
 8003b7a:	4b3c      	ldr	r3, [pc, #240]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003b7c:	edd3 7a00 	vldr	s15, [r3]
 8003b80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	edd3 6a51 	vldr	s13, [r3, #324]	; 0x144
 8003b92:	4b36      	ldr	r3, [pc, #216]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003b94:	ed93 6a00 	vldr	s12, [r3]
 8003b98:	4b34      	ldr	r3, [pc, #208]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003b9a:	edd3 7a00 	vldr	s15, [r3]
 8003b9e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003ba2:	4b32      	ldr	r3, [pc, #200]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003ba4:	edd3 7a00 	vldr	s15, [r3]
 8003ba8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	edd3 6a52 	vldr	s13, [r3, #328]	; 0x148
 8003bba:	4b2c      	ldr	r3, [pc, #176]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003bbc:	ed93 6a00 	vldr	s12, [r3]
 8003bc0:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003bc2:	edd3 7a00 	vldr	s15, [r3]
 8003bc6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bca:	4b28      	ldr	r3, [pc, #160]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003bcc:	edd3 7a00 	vldr	s15, [r3]
 8003bd0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bd4:	4b25      	ldr	r3, [pc, #148]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003bd6:	edd3 7a00 	vldr	s15, [r3]
 8003bda:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003be2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	edd3 6a53 	vldr	s13, [r3, #332]	; 0x14c
 8003bec:	4b1f      	ldr	r3, [pc, #124]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003bee:	ed93 6a00 	vldr	s12, [r3]
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003bf4:	edd3 7a00 	vldr	s15, [r3]
 8003bf8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003bfe:	edd3 7a00 	vldr	s15, [r3]
 8003c02:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003c06:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003c08:	edd3 7a00 	vldr	s15, [r3]
 8003c0c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003c10:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <TrajectoryEvaluation+0xe04>)
 8003c12:	edd3 7a00 	vldr	s15, [r3]
 8003c16:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003c1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 8003c28:	e019      	b.n	8003c5e <TrajectoryEvaluation+0xdf6>
		  traject -> QJ = 0;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		  traject -> QA = 0;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
		  traject -> QV = 0;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		  traject -> QVP = 0;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		  traject -> QX = traject -> Qfinal;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
   return 1.0;
 8003c5e:	bf00      	nop
 8003c60:	bf00      	nop
}
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c6a:	bf00      	nop
 8003c6c:	2000045c 	.word	0x2000045c
 8003c70:	20000460 	.word	0x20000460

08003c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c7c:	f002 fb8e 	bl	800639c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c80:	f000 f8dc 	bl	8003e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c84:	f000 fb0e 	bl	80042a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c88:	f000 fae4 	bl	8004254 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003c8c:	f000 fab6 	bl	80041fc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003c90:	f000 f93c 	bl	8003f0c <MX_I2C1_Init>
  MX_TIM11_Init();
 8003c94:	f000 fa8e 	bl	80041b4 <MX_TIM11_Init>
  MX_TIM1_Init();
 8003c98:	f000 f966 	bl	8003f68 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003c9c:	f000 f9e8 	bl	8004070 <MX_TIM2_Init>
  MX_TIM5_Init();
 8003ca0:	f000 fa3a 	bl	8004118 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
//  HAL_Delay(1000);
  Ringbuf_Init();
 8003ca4:	f000 fe66 	bl	8004974 <Ringbuf_Init>
  KalmanMatrixInit(&KalmanVar);
 8003ca8:	4851      	ldr	r0, [pc, #324]	; (8003df0 <main+0x17c>)
 8003caa:	f7fd f855 	bl	8000d58 <KalmanMatrixInit>
  TrajectorInit(&traject);
 8003cae:	4851      	ldr	r0, [pc, #324]	; (8003df4 <main+0x180>)
 8003cb0:	f7fd fe61 	bl	8001976 <TrajectorInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	4850      	ldr	r0, [pc, #320]	; (8003df8 <main+0x184>)
 8003cb8:	f006 f828 	bl	8009d0c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8003cbc:	484f      	ldr	r0, [pc, #316]	; (8003dfc <main+0x188>)
 8003cbe:	f005 ff45 	bl	8009b4c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8003cc2:	213c      	movs	r1, #60	; 0x3c
 8003cc4:	484e      	ldr	r0, [pc, #312]	; (8003e00 <main+0x18c>)
 8003cc6:	f006 f977 	bl	8009fb8 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 8003cca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b4c      	ldr	r3, [pc, #304]	; (8003e04 <main+0x190>)
 8003cd4:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 8003cd6:	4b4b      	ldr	r3, [pc, #300]	; (8003e04 <main+0x190>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a4a      	ldr	r2, [pc, #296]	; (8003e04 <main+0x190>)
 8003cdc:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 8003cde:	4b49      	ldr	r3, [pc, #292]	; (8003e04 <main+0x190>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a49      	ldr	r2, [pc, #292]	; (8003e08 <main+0x194>)
 8003ce4:	6013      	str	r3, [r2, #0]
  PIDAController_Init(&PidVelo);
 8003ce6:	4849      	ldr	r0, [pc, #292]	; (8003e0c <main+0x198>)
 8003ce8:	f7fd fb4c 	bl	8001384 <PIDAController_Init>
  PIDAController_Init(&PidPos);
 8003cec:	4848      	ldr	r0, [pc, #288]	; (8003e10 <main+0x19c>)
 8003cee:	f7fd fb49 	bl	8001384 <PIDAController_Init>
  // Reset all Parameter
  Robotinit(&Robot);
 8003cf2:	4848      	ldr	r0, [pc, #288]	; (8003e14 <main+0x1a0>)
 8003cf4:	f7fd fe02 	bl	80018fc <Robotinit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timeElapsed[0] = Micros();
 8003cf8:	f002 f84c 	bl	8005d94 <Micros>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4945      	ldr	r1, [pc, #276]	; (8003e18 <main+0x1a4>)
 8003d02:	e9c1 2300 	strd	r2, r3, [r1]
	  timeElapsed[1] = HAL_GetTick();
 8003d06:	f002 fbaf 	bl	8006468 <HAL_GetTick>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	4b41      	ldr	r3, [pc, #260]	; (8003e18 <main+0x1a4>)
 8003d14:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d18:	e9c3 1202 	strd	r1, r2, [r3, #8]
	  RobotstateManagement();
 8003d1c:	f001 fb30 	bl	8005380 <RobotstateManagement>
	  if(Micros() - EndEffLoopTime > 100000)
 8003d20:	f002 f838 	bl	8005d94 <Micros>
 8003d24:	4b3d      	ldr	r3, [pc, #244]	; (8003e1c <main+0x1a8>)
 8003d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2a:	1a84      	subs	r4, r0, r2
 8003d2c:	eb61 0503 	sbc.w	r5, r1, r3
 8003d30:	4b3b      	ldr	r3, [pc, #236]	; (8003e20 <main+0x1ac>)
 8003d32:	429c      	cmp	r4, r3
 8003d34:	f175 0300 	sbcs.w	r3, r5, #0
 8003d38:	d308      	bcc.n	8003d4c <main+0xd8>
	  {
		  EndEffLoopTime = Micros();
 8003d3a:	f002 f82b 	bl	8005d94 <Micros>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4936      	ldr	r1, [pc, #216]	; (8003e1c <main+0x1a8>)
 8003d44:	e9c1 2300 	strd	r2, r3, [r1]
		  EndEffstateManagement();
 8003d48:	f001 fc6a 	bl	8005620 <EndEffstateManagement>
	  }
	  if(Micros() - ControlLoopTime >= 10000)
 8003d4c:	f002 f822 	bl	8005d94 <Micros>
 8003d50:	4b34      	ldr	r3, [pc, #208]	; (8003e24 <main+0x1b0>)
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	ebb0 0802 	subs.w	r8, r0, r2
 8003d5a:	eb61 0903 	sbc.w	r9, r1, r3
 8003d5e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003d62:	4598      	cmp	r8, r3
 8003d64:	f179 0300 	sbcs.w	r3, r9, #0
 8003d68:	d3c6      	bcc.n	8003cf8 <main+0x84>
	  {
		ControlLoopTime  = Micros();
 8003d6a:	f002 f813 	bl	8005d94 <Micros>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	492c      	ldr	r1, [pc, #176]	; (8003e24 <main+0x1b0>)
 8003d74:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStartTime = Micros();
 8003d78:	f002 f80c 	bl	8005d94 <Micros>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4929      	ldr	r1, [pc, #164]	; (8003e28 <main+0x1b4>)
 8003d82:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 8003d86:	f000 fb53 	bl	8004430 <EncoderRead>
		KalmanFilterFunction(&KalmanVar,PositionDeg[0],VelocityDeg);
 8003d8a:	4b28      	ldr	r3, [pc, #160]	; (8003e2c <main+0x1b8>)
 8003d8c:	edd3 7a00 	vldr	s15, [r3]
 8003d90:	4b27      	ldr	r3, [pc, #156]	; (8003e30 <main+0x1bc>)
 8003d92:	ed93 7a00 	vldr	s14, [r3]
 8003d96:	eef0 0a47 	vmov.f32	s1, s14
 8003d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d9e:	4814      	ldr	r0, [pc, #80]	; (8003df0 <main+0x17c>)
 8003da0:	f7fd f9bc 	bl	800111c <KalmanFilterFunction>
		Robot.Position = PositionDeg[0];
 8003da4:	4b21      	ldr	r3, [pc, #132]	; (8003e2c <main+0x1b8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1a      	ldr	r2, [pc, #104]	; (8003e14 <main+0x1a0>)
 8003daa:	6013      	str	r3, [r2, #0]
		Robot.Velocity = KalmanVar.MatState_Data[1];
 8003dac:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <main+0x17c>)
 8003dae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003db2:	4a18      	ldr	r2, [pc, #96]	; (8003e14 <main+0x1a0>)
 8003db4:	6053      	str	r3, [r2, #4]
		Robot.Acceleration = KalmanVar.MatState_Data[2];
 8003db6:	4b0e      	ldr	r3, [pc, #56]	; (8003df0 <main+0x17c>)
 8003db8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003dbc:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <main+0x1a0>)
 8003dbe:	6093      	str	r3, [r2, #8]
		ControllLoopAndErrorHandler();
 8003dc0:	f000 fcac 	bl	800471c <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 8003dc4:	f001 ffe6 	bl	8005d94 <Micros>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4919      	ldr	r1, [pc, #100]	; (8003e34 <main+0x1c0>)
 8003dce:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 8003dd2:	4b18      	ldr	r3, [pc, #96]	; (8003e34 <main+0x1c0>)
 8003dd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dd8:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <main+0x1b4>)
 8003dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dde:	ebb0 0a02 	subs.w	sl, r0, r2
 8003de2:	eb61 0b03 	sbc.w	fp, r1, r3
 8003de6:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <main+0x1c4>)
 8003de8:	e9c3 ab00 	strd	sl, fp, [r3]
	  timeElapsed[0] = Micros();
 8003dec:	e784      	b.n	8003cf8 <main+0x84>
 8003dee:	bf00      	nop
 8003df0:	20000034 	.word	0x20000034
 8003df4:	2000086c 	.word	0x2000086c
 8003df8:	200004b8 	.word	0x200004b8
 8003dfc:	20000590 	.word	0x20000590
 8003e00:	20000500 	.word	0x20000500
 8003e04:	200007e8 	.word	0x200007e8
 8003e08:	200007f4 	.word	0x200007f4
 8003e0c:	20000808 	.word	0x20000808
 8003e10:	20000838 	.word	0x20000838
 8003e14:	200006dc 	.word	0x200006dc
 8003e18:	20000780 	.word	0x20000780
 8003e1c:	20000790 	.word	0x20000790
 8003e20:	000186a1 	.word	0x000186a1
 8003e24:	20000af8 	.word	0x20000af8
 8003e28:	20000ac8 	.word	0x20000ac8
 8003e2c:	200007f8 	.word	0x200007f8
 8003e30:	20000800 	.word	0x20000800
 8003e34:	20000ad0 	.word	0x20000ad0
 8003e38:	20000ad8 	.word	0x20000ad8

08003e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b094      	sub	sp, #80	; 0x50
 8003e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e42:	f107 0320 	add.w	r3, r7, #32
 8003e46:	2230      	movs	r2, #48	; 0x30
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f008 fcc2 	bl	800c7d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e50:	f107 030c 	add.w	r3, r7, #12
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	609a      	str	r2, [r3, #8]
 8003e5c:	60da      	str	r2, [r3, #12]
 8003e5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e60:	2300      	movs	r3, #0
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <SystemClock_Config+0xc8>)
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	4a26      	ldr	r2, [pc, #152]	; (8003f04 <SystemClock_Config+0xc8>)
 8003e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e70:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <SystemClock_Config+0xc8>)
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	607b      	str	r3, [r7, #4]
 8003e80:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <SystemClock_Config+0xcc>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a20      	ldr	r2, [pc, #128]	; (8003f08 <SystemClock_Config+0xcc>)
 8003e86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <SystemClock_Config+0xcc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ea0:	2310      	movs	r3, #16
 8003ea2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003eac:	2308      	movs	r3, #8
 8003eae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003eb0:	2364      	movs	r3, #100	; 0x64
 8003eb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003eb8:	2304      	movs	r3, #4
 8003eba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ebc:	f107 0320 	add.w	r3, r7, #32
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f005 f95b 	bl	800917c <HAL_RCC_OscConfig>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003ecc:	f001 ff7a 	bl	8005dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ed0:	230f      	movs	r3, #15
 8003ed2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ee0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003ee6:	f107 030c 	add.w	r3, r7, #12
 8003eea:	2103      	movs	r1, #3
 8003eec:	4618      	mov	r0, r3
 8003eee:	f005 fbbd 	bl	800966c <HAL_RCC_ClockConfig>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003ef8:	f001 ff64 	bl	8005dc4 <Error_Handler>
  }
}
 8003efc:	bf00      	nop
 8003efe:	3750      	adds	r7, #80	; 0x50
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40007000 	.word	0x40007000

08003f0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003f10:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <MX_I2C1_Init+0x50>)
 8003f12:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <MX_I2C1_Init+0x54>)
 8003f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003f16:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <MX_I2C1_Init+0x50>)
 8003f18:	4a12      	ldr	r2, [pc, #72]	; (8003f64 <MX_I2C1_Init+0x58>)
 8003f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <MX_I2C1_Init+0x50>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003f22:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <MX_I2C1_Init+0x50>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f28:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <MX_I2C1_Init+0x50>)
 8003f2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f30:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <MX_I2C1_Init+0x50>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <MX_I2C1_Init+0x50>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f3c:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <MX_I2C1_Init+0x50>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <MX_I2C1_Init+0x50>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f48:	4804      	ldr	r0, [pc, #16]	; (8003f5c <MX_I2C1_Init+0x50>)
 8003f4a:	f003 f9a3 	bl	8007294 <HAL_I2C_Init>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003f54:	f001 ff36 	bl	8005dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f58:	bf00      	nop
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	20000464 	.word	0x20000464
 8003f60:	40005400 	.word	0x40005400
 8003f64:	00061a80 	.word	0x00061a80

08003f68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b092      	sub	sp, #72	; 0x48
 8003f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	605a      	str	r2, [r3, #4]
 8003f82:	609a      	str	r2, [r3, #8]
 8003f84:	60da      	str	r2, [r3, #12]
 8003f86:	611a      	str	r2, [r3, #16]
 8003f88:	615a      	str	r2, [r3, #20]
 8003f8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f8c:	1d3b      	adds	r3, r7, #4
 8003f8e:	2220      	movs	r2, #32
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f008 fc1e 	bl	800c7d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f98:	4b33      	ldr	r3, [pc, #204]	; (8004068 <MX_TIM1_Init+0x100>)
 8003f9a:	4a34      	ldr	r2, [pc, #208]	; (800406c <MX_TIM1_Init+0x104>)
 8003f9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003f9e:	4b32      	ldr	r3, [pc, #200]	; (8004068 <MX_TIM1_Init+0x100>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fa4:	4b30      	ldr	r3, [pc, #192]	; (8004068 <MX_TIM1_Init+0x100>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8003faa:	4b2f      	ldr	r3, [pc, #188]	; (8004068 <MX_TIM1_Init+0x100>)
 8003fac:	f242 720f 	movw	r2, #9999	; 0x270f
 8003fb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fb2:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <MX_TIM1_Init+0x100>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003fb8:	4b2b      	ldr	r3, [pc, #172]	; (8004068 <MX_TIM1_Init+0x100>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fbe:	4b2a      	ldr	r3, [pc, #168]	; (8004068 <MX_TIM1_Init+0x100>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003fc4:	4828      	ldr	r0, [pc, #160]	; (8004068 <MX_TIM1_Init+0x100>)
 8003fc6:	f005 fe52 	bl	8009c6e <HAL_TIM_PWM_Init>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003fd0:	f001 fef8 	bl	8005dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4821      	ldr	r0, [pc, #132]	; (8004068 <MX_TIM1_Init+0x100>)
 8003fe4:	f006 fdfc 	bl	800abe0 <HAL_TIMEx_MasterConfigSynchronization>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003fee:	f001 fee9 	bl	8005dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ff2:	2360      	movs	r3, #96	; 0x60
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ffe:	2300      	movs	r3, #0
 8004000:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004002:	2300      	movs	r3, #0
 8004004:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004006:	2300      	movs	r3, #0
 8004008:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800400e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004012:	2200      	movs	r2, #0
 8004014:	4619      	mov	r1, r3
 8004016:	4814      	ldr	r0, [pc, #80]	; (8004068 <MX_TIM1_Init+0x100>)
 8004018:	f006 f964 	bl	800a2e4 <HAL_TIM_PWM_ConfigChannel>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8004022:	f001 fecf 	bl	8005dc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004026:	2300      	movs	r3, #0
 8004028:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800403a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800403e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004040:	2300      	movs	r3, #0
 8004042:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004044:	1d3b      	adds	r3, r7, #4
 8004046:	4619      	mov	r1, r3
 8004048:	4807      	ldr	r0, [pc, #28]	; (8004068 <MX_TIM1_Init+0x100>)
 800404a:	f006 fe37 	bl	800acbc <HAL_TIMEx_ConfigBreakDeadTime>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8004054:	f001 feb6 	bl	8005dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004058:	4803      	ldr	r0, [pc, #12]	; (8004068 <MX_TIM1_Init+0x100>)
 800405a:	f001 ffed 	bl	8006038 <HAL_TIM_MspPostInit>

}
 800405e:	bf00      	nop
 8004060:	3748      	adds	r7, #72	; 0x48
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	200004b8 	.word	0x200004b8
 800406c:	40010000 	.word	0x40010000

08004070 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08c      	sub	sp, #48	; 0x30
 8004074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004076:	f107 030c 	add.w	r3, r7, #12
 800407a:	2224      	movs	r2, #36	; 0x24
 800407c:	2100      	movs	r1, #0
 800407e:	4618      	mov	r0, r3
 8004080:	f008 fba8 	bl	800c7d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004084:	1d3b      	adds	r3, r7, #4
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800408c:	4b21      	ldr	r3, [pc, #132]	; (8004114 <MX_TIM2_Init+0xa4>)
 800408e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004092:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004094:	4b1f      	ldr	r3, [pc, #124]	; (8004114 <MX_TIM2_Init+0xa4>)
 8004096:	2200      	movs	r2, #0
 8004098:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800409a:	4b1e      	ldr	r3, [pc, #120]	; (8004114 <MX_TIM2_Init+0xa4>)
 800409c:	2200      	movs	r2, #0
 800409e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 80040a0:	4b1c      	ldr	r3, [pc, #112]	; (8004114 <MX_TIM2_Init+0xa4>)
 80040a2:	f642 62df 	movw	r2, #11999	; 0x2edf
 80040a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040a8:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <MX_TIM2_Init+0xa4>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040ae:	4b19      	ldr	r3, [pc, #100]	; (8004114 <MX_TIM2_Init+0xa4>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80040b4:	2303      	movs	r3, #3
 80040b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80040b8:	2300      	movs	r3, #0
 80040ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80040bc:	2301      	movs	r3, #1
 80040be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80040c8:	2300      	movs	r3, #0
 80040ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80040cc:	2301      	movs	r3, #1
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80040d0:	2300      	movs	r3, #0
 80040d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80040d8:	f107 030c 	add.w	r3, r7, #12
 80040dc:	4619      	mov	r1, r3
 80040de:	480d      	ldr	r0, [pc, #52]	; (8004114 <MX_TIM2_Init+0xa4>)
 80040e0:	f005 fec4 	bl	8009e6c <HAL_TIM_Encoder_Init>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80040ea:	f001 fe6b 	bl	8005dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80040f6:	1d3b      	adds	r3, r7, #4
 80040f8:	4619      	mov	r1, r3
 80040fa:	4806      	ldr	r0, [pc, #24]	; (8004114 <MX_TIM2_Init+0xa4>)
 80040fc:	f006 fd70 	bl	800abe0 <HAL_TIMEx_MasterConfigSynchronization>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004106:	f001 fe5d 	bl	8005dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800410a:	bf00      	nop
 800410c:	3730      	adds	r7, #48	; 0x30
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000500 	.word	0x20000500

08004118 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800411e:	f107 0308 	add.w	r3, r7, #8
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	605a      	str	r2, [r3, #4]
 8004128:	609a      	str	r2, [r3, #8]
 800412a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800412c:	463b      	mov	r3, r7
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004134:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <MX_TIM5_Init+0x90>)
 8004136:	4a1d      	ldr	r2, [pc, #116]	; (80041ac <MX_TIM5_Init+0x94>)
 8004138:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 800413a:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <MX_TIM5_Init+0x90>)
 800413c:	2263      	movs	r2, #99	; 0x63
 800413e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004140:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <MX_TIM5_Init+0x90>)
 8004142:	2200      	movs	r2, #0
 8004144:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 8004146:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <MX_TIM5_Init+0x90>)
 8004148:	4a19      	ldr	r2, [pc, #100]	; (80041b0 <MX_TIM5_Init+0x98>)
 800414a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800414c:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <MX_TIM5_Init+0x90>)
 800414e:	2200      	movs	r2, #0
 8004150:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004152:	4b15      	ldr	r3, [pc, #84]	; (80041a8 <MX_TIM5_Init+0x90>)
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004158:	4813      	ldr	r0, [pc, #76]	; (80041a8 <MX_TIM5_Init+0x90>)
 800415a:	f005 fca7 	bl	8009aac <HAL_TIM_Base_Init>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8004164:	f001 fe2e 	bl	8005dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800416c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800416e:	f107 0308 	add.w	r3, r7, #8
 8004172:	4619      	mov	r1, r3
 8004174:	480c      	ldr	r0, [pc, #48]	; (80041a8 <MX_TIM5_Init+0x90>)
 8004176:	f006 f977 	bl	800a468 <HAL_TIM_ConfigClockSource>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8004180:	f001 fe20 	bl	8005dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004184:	2320      	movs	r3, #32
 8004186:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004188:	2300      	movs	r3, #0
 800418a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800418c:	463b      	mov	r3, r7
 800418e:	4619      	mov	r1, r3
 8004190:	4805      	ldr	r0, [pc, #20]	; (80041a8 <MX_TIM5_Init+0x90>)
 8004192:	f006 fd25 	bl	800abe0 <HAL_TIMEx_MasterConfigSynchronization>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 800419c:	f001 fe12 	bl	8005dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80041a0:	bf00      	nop
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	20000548 	.word	0x20000548
 80041ac:	40000c00 	.word	0x40000c00
 80041b0:	0001869f 	.word	0x0001869f

080041b4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80041b8:	4b0e      	ldr	r3, [pc, #56]	; (80041f4 <MX_TIM11_Init+0x40>)
 80041ba:	4a0f      	ldr	r2, [pc, #60]	; (80041f8 <MX_TIM11_Init+0x44>)
 80041bc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80041be:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <MX_TIM11_Init+0x40>)
 80041c0:	2263      	movs	r2, #99	; 0x63
 80041c2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <MX_TIM11_Init+0x40>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80041ca:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <MX_TIM11_Init+0x40>)
 80041cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041d0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041d2:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <MX_TIM11_Init+0x40>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <MX_TIM11_Init+0x40>)
 80041da:	2200      	movs	r2, #0
 80041dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80041de:	4805      	ldr	r0, [pc, #20]	; (80041f4 <MX_TIM11_Init+0x40>)
 80041e0:	f005 fc64 	bl	8009aac <HAL_TIM_Base_Init>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80041ea:	f001 fdeb 	bl	8005dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80041ee:	bf00      	nop
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000590 	.word	0x20000590
 80041f8:	40014800 	.word	0x40014800

080041fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004200:	4b12      	ldr	r3, [pc, #72]	; (800424c <MX_USART2_UART_Init+0x50>)
 8004202:	4a13      	ldr	r2, [pc, #76]	; (8004250 <MX_USART2_UART_Init+0x54>)
 8004204:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8004206:	4b11      	ldr	r3, [pc, #68]	; (800424c <MX_USART2_UART_Init+0x50>)
 8004208:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 800420c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <MX_USART2_UART_Init+0x50>)
 8004210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004214:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004216:	4b0d      	ldr	r3, [pc, #52]	; (800424c <MX_USART2_UART_Init+0x50>)
 8004218:	2200      	movs	r2, #0
 800421a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <MX_USART2_UART_Init+0x50>)
 800421e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004224:	4b09      	ldr	r3, [pc, #36]	; (800424c <MX_USART2_UART_Init+0x50>)
 8004226:	220c      	movs	r2, #12
 8004228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800422a:	4b08      	ldr	r3, [pc, #32]	; (800424c <MX_USART2_UART_Init+0x50>)
 800422c:	2200      	movs	r2, #0
 800422e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <MX_USART2_UART_Init+0x50>)
 8004232:	2200      	movs	r2, #0
 8004234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004236:	4805      	ldr	r0, [pc, #20]	; (800424c <MX_USART2_UART_Init+0x50>)
 8004238:	f006 fda6 	bl	800ad88 <HAL_UART_Init>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8004242:	f001 fdbf 	bl	8005dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004246:	bf00      	nop
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	200005d8 	.word	0x200005d8
 8004250:	40004400 	.word	0x40004400

08004254 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800425a:	2300      	movs	r3, #0
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <MX_DMA_Init+0x4c>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	4a0f      	ldr	r2, [pc, #60]	; (80042a0 <MX_DMA_Init+0x4c>)
 8004264:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004268:	6313      	str	r3, [r2, #48]	; 0x30
 800426a:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <MX_DMA_Init+0x4c>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004272:	607b      	str	r3, [r7, #4]
 8004274:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004276:	2200      	movs	r2, #0
 8004278:	2100      	movs	r1, #0
 800427a:	2010      	movs	r0, #16
 800427c:	f002 f9db 	bl	8006636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004280:	2010      	movs	r0, #16
 8004282:	f002 f9f4 	bl	800666e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8004286:	2200      	movs	r2, #0
 8004288:	2100      	movs	r1, #0
 800428a:	2011      	movs	r0, #17
 800428c:	f002 f9d3 	bl	8006636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004290:	2011      	movs	r0, #17
 8004292:	f002 f9ec 	bl	800666e <HAL_NVIC_EnableIRQ>

}
 8004296:	bf00      	nop
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800

080042a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08a      	sub	sp, #40	; 0x28
 80042a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042aa:	f107 0314 	add.w	r3, r7, #20
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	605a      	str	r2, [r3, #4]
 80042b4:	609a      	str	r2, [r3, #8]
 80042b6:	60da      	str	r2, [r3, #12]
 80042b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ba:	2300      	movs	r3, #0
 80042bc:	613b      	str	r3, [r7, #16]
 80042be:	4b4e      	ldr	r3, [pc, #312]	; (80043f8 <MX_GPIO_Init+0x154>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	4a4d      	ldr	r2, [pc, #308]	; (80043f8 <MX_GPIO_Init+0x154>)
 80042c4:	f043 0304 	orr.w	r3, r3, #4
 80042c8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ca:	4b4b      	ldr	r3, [pc, #300]	; (80043f8 <MX_GPIO_Init+0x154>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	4b47      	ldr	r3, [pc, #284]	; (80043f8 <MX_GPIO_Init+0x154>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	4a46      	ldr	r2, [pc, #280]	; (80043f8 <MX_GPIO_Init+0x154>)
 80042e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e4:	6313      	str	r3, [r2, #48]	; 0x30
 80042e6:	4b44      	ldr	r3, [pc, #272]	; (80043f8 <MX_GPIO_Init+0x154>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	4b40      	ldr	r3, [pc, #256]	; (80043f8 <MX_GPIO_Init+0x154>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	4a3f      	ldr	r2, [pc, #252]	; (80043f8 <MX_GPIO_Init+0x154>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	6313      	str	r3, [r2, #48]	; 0x30
 8004302:	4b3d      	ldr	r3, [pc, #244]	; (80043f8 <MX_GPIO_Init+0x154>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	4b39      	ldr	r3, [pc, #228]	; (80043f8 <MX_GPIO_Init+0x154>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	4a38      	ldr	r2, [pc, #224]	; (80043f8 <MX_GPIO_Init+0x154>)
 8004318:	f043 0302 	orr.w	r3, r3, #2
 800431c:	6313      	str	r3, [r2, #48]	; 0x30
 800431e:	4b36      	ldr	r3, [pc, #216]	; (80043f8 <MX_GPIO_Init+0x154>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	607b      	str	r3, [r7, #4]
 8004328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 800432a:	2200      	movs	r2, #0
 800432c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8004330:	4832      	ldr	r0, [pc, #200]	; (80043fc <MX_GPIO_Init+0x158>)
 8004332:	f002 ff63 	bl	80071fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin, GPIO_PIN_RESET);
 8004336:	2200      	movs	r2, #0
 8004338:	f44f 6183 	mov.w	r1, #1048	; 0x418
 800433c:	4830      	ldr	r0, [pc, #192]	; (8004400 <MX_GPIO_Init+0x15c>)
 800433e:	f002 ff5d 	bl	80071fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004348:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800434c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004352:	f107 0314 	add.w	r3, r7, #20
 8004356:	4619      	mov	r1, r3
 8004358:	482a      	ldr	r0, [pc, #168]	; (8004404 <MX_GPIO_Init+0x160>)
 800435a:	f002 fdb3 	bl	8006ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 800435e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004364:	2301      	movs	r3, #1
 8004366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800436c:	2300      	movs	r3, #0
 800436e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004370:	f107 0314 	add.w	r3, r7, #20
 8004374:	4619      	mov	r1, r3
 8004376:	4821      	ldr	r0, [pc, #132]	; (80043fc <MX_GPIO_Init+0x158>)
 8004378:	f002 fda4 	bl	8006ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_RedLamp_Pin Pin_YelLamp_Pin Pin_BlueLamp_Pin */
  GPIO_InitStruct.Pin = Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin;
 800437c:	f44f 6383 	mov.w	r3, #1048	; 0x418
 8004380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004382:	2301      	movs	r3, #1
 8004384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004386:	2300      	movs	r3, #0
 8004388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800438a:	2300      	movs	r3, #0
 800438c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800438e:	f107 0314 	add.w	r3, r7, #20
 8004392:	4619      	mov	r1, r3
 8004394:	481a      	ldr	r0, [pc, #104]	; (8004400 <MX_GPIO_Init+0x15c>)
 8004396:	f002 fd95 	bl	8006ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Proxi_Pin */
  GPIO_InitStruct.Pin = Pin_Proxi_Pin;
 800439a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800439e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80043a0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80043a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Proxi_GPIO_Port, &GPIO_InitStruct);
 80043aa:	f107 0314 	add.w	r3, r7, #20
 80043ae:	4619      	mov	r1, r3
 80043b0:	4812      	ldr	r0, [pc, #72]	; (80043fc <MX_GPIO_Init+0x158>)
 80043b2:	f002 fd87 	bl	8006ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Emer_Pin */
  GPIO_InitStruct.Pin = Pin_Emer_Pin;
 80043b6:	2320      	movs	r3, #32
 80043b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80043ba:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80043be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Emer_GPIO_Port, &GPIO_InitStruct);
 80043c4:	f107 0314 	add.w	r3, r7, #20
 80043c8:	4619      	mov	r1, r3
 80043ca:	480d      	ldr	r0, [pc, #52]	; (8004400 <MX_GPIO_Init+0x15c>)
 80043cc:	f002 fd7a 	bl	8006ec4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80043d0:	2200      	movs	r2, #0
 80043d2:	2100      	movs	r1, #0
 80043d4:	2017      	movs	r0, #23
 80043d6:	f002 f92e 	bl	8006636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80043da:	2017      	movs	r0, #23
 80043dc:	f002 f947 	bl	800666e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80043e0:	2200      	movs	r2, #0
 80043e2:	2100      	movs	r1, #0
 80043e4:	2028      	movs	r0, #40	; 0x28
 80043e6:	f002 f926 	bl	8006636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043ea:	2028      	movs	r0, #40	; 0x28
 80043ec:	f002 f93f 	bl	800666e <HAL_NVIC_EnableIRQ>

}
 80043f0:	bf00      	nop
 80043f2:	3728      	adds	r7, #40	; 0x28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40023800 	.word	0x40023800
 80043fc:	40020000 	.word	0x40020000
 8004400:	40020400 	.word	0x40020400
 8004404:	40020800 	.word	0x40020800

08004408 <Int32Abs>:

/* USER CODE BEGIN 4 */
uint32_t Int32Abs(int32_t number)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
	if(number<0){
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	da02      	bge.n	800441c <Int32Abs+0x14>
		return number*-1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	425b      	negs	r3, r3
 800441a:	e000      	b.n	800441e <Int32Abs+0x16>
	}else{
		return number;
 800441c:	687b      	ldr	r3, [r7, #4]
	}
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	0000      	movs	r0, r0
 800442c:	0000      	movs	r0, r0
	...

08004430 <EncoderRead>:

void EncoderRead()
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 8004434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	461a      	mov	r2, r3
 800443c:	4b32      	ldr	r3, [pc, #200]	; (8004508 <EncoderRead+0xd8>)
 800443e:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 8004440:	4b31      	ldr	r3, [pc, #196]	; (8004508 <EncoderRead+0xd8>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4b30      	ldr	r3, [pc, #192]	; (8004508 <EncoderRead+0xd8>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	1ad2      	subs	r2, r2, r3
 800444a:	4b30      	ldr	r3, [pc, #192]	; (800450c <EncoderRead+0xdc>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	425b      	negs	r3, r3
 8004450:	429a      	cmp	r2, r3
 8004452:	da07      	bge.n	8004464 <EncoderRead+0x34>
		WrappingStep+=12000;
 8004454:	4b2e      	ldr	r3, [pc, #184]	; (8004510 <EncoderRead+0xe0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 800445c:	3320      	adds	r3, #32
 800445e:	4a2c      	ldr	r2, [pc, #176]	; (8004510 <EncoderRead+0xe0>)
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	e00f      	b.n	8004484 <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 8004464:	4b28      	ldr	r3, [pc, #160]	; (8004508 <EncoderRead+0xd8>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4b27      	ldr	r3, [pc, #156]	; (8004508 <EncoderRead+0xd8>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	1ad2      	subs	r2, r2, r3
 800446e:	4b27      	ldr	r3, [pc, #156]	; (800450c <EncoderRead+0xdc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	db06      	blt.n	8004484 <EncoderRead+0x54>
		WrappingStep-=12000;
 8004476:	4b26      	ldr	r3, [pc, #152]	; (8004510 <EncoderRead+0xe0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 800447e:	3b20      	subs	r3, #32
 8004480:	4a23      	ldr	r2, [pc, #140]	; (8004510 <EncoderRead+0xe0>)
 8004482:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 8004484:	4b20      	ldr	r3, [pc, #128]	; (8004508 <EncoderRead+0xd8>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4b21      	ldr	r3, [pc, #132]	; (8004510 <EncoderRead+0xe0>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4413      	add	r3, r2
 800448e:	4a21      	ldr	r2, [pc, #132]	; (8004514 <EncoderRead+0xe4>)
 8004490:	6013      	str	r3, [r2, #0]
	PositionDeg[0] = (PositionRaw/12000.0)*360.0;
 8004492:	4b20      	ldr	r3, [pc, #128]	; (8004514 <EncoderRead+0xe4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fb fff0 	bl	800047c <__aeabi_i2d>
 800449c:	a318      	add	r3, pc, #96	; (adr r3, 8004500 <EncoderRead+0xd0>)
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f7fc f97f 	bl	80007a4 <__aeabi_ddiv>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4610      	mov	r0, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	4b19      	ldr	r3, [pc, #100]	; (8004518 <EncoderRead+0xe8>)
 80044b4:	f7fc f84c 	bl	8000550 <__aeabi_dmul>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4610      	mov	r0, r2
 80044be:	4619      	mov	r1, r3
 80044c0:	f7fc fa78 	bl	80009b4 <__aeabi_d2f>
 80044c4:	4603      	mov	r3, r0
 80044c6:	4a15      	ldr	r2, [pc, #84]	; (800451c <EncoderRead+0xec>)
 80044c8:	6013      	str	r3, [r2, #0]
	VelocityDeg = ((PositionDeg[0] - PositionDeg[1])/dt);
 80044ca:	4b14      	ldr	r3, [pc, #80]	; (800451c <EncoderRead+0xec>)
 80044cc:	ed93 7a00 	vldr	s14, [r3]
 80044d0:	4b12      	ldr	r3, [pc, #72]	; (800451c <EncoderRead+0xec>)
 80044d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80044d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044da:	eddf 6a11 	vldr	s13, [pc, #68]	; 8004520 <EncoderRead+0xf0>
 80044de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044e2:	4b10      	ldr	r3, [pc, #64]	; (8004524 <EncoderRead+0xf4>)
 80044e4:	edc3 7a00 	vstr	s15, [r3]
	EncoderRawData[1] = EncoderRawData[0];
 80044e8:	4b07      	ldr	r3, [pc, #28]	; (8004508 <EncoderRead+0xd8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a06      	ldr	r2, [pc, #24]	; (8004508 <EncoderRead+0xd8>)
 80044ee:	6053      	str	r3, [r2, #4]
	PositionDeg[1] = PositionDeg[0];
 80044f0:	4b0a      	ldr	r3, [pc, #40]	; (800451c <EncoderRead+0xec>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a09      	ldr	r2, [pc, #36]	; (800451c <EncoderRead+0xec>)
 80044f6:	6053      	str	r3, [r2, #4]
}
 80044f8:	bf00      	nop
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	f3af 8000 	nop.w
 8004500:	00000000 	.word	0x00000000
 8004504:	40c77000 	.word	0x40c77000
 8004508:	200007e8 	.word	0x200007e8
 800450c:	2000042c 	.word	0x2000042c
 8004510:	200007f0 	.word	0x200007f0
 8004514:	200007f4 	.word	0x200007f4
 8004518:	40768000 	.word	0x40768000
 800451c:	200007f8 	.word	0x200007f8
 8004520:	3c23d70a 	.word	0x3c23d70a
 8004524:	20000800 	.word	0x20000800

08004528 <Drivemotor>:

void Drivemotor(int32_t PWM){
 8004528:	b590      	push	{r4, r7, lr}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
		if(PWM<=0 && PWM>=-PWM_MAX){
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	dc11      	bgt.n	800455a <Drivemotor+0x32>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a25      	ldr	r2, [pc, #148]	; (80045d0 <Drivemotor+0xa8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	db0d      	blt.n	800455a <Drivemotor+0x32>
			htim1.Instance->CCR1=Int32Abs(PWM);
 800453e:	4b25      	ldr	r3, [pc, #148]	; (80045d4 <Drivemotor+0xac>)
 8004540:	681c      	ldr	r4, [r3, #0]
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff ff60 	bl	8004408 <Int32Abs>
 8004548:	4603      	mov	r3, r0
 800454a:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 800454c:	2200      	movs	r2, #0
 800454e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004552:	4821      	ldr	r0, [pc, #132]	; (80045d8 <Drivemotor+0xb0>)
 8004554:	f002 fe52 	bl	80071fc <HAL_GPIO_WritePin>
 8004558:	e036      	b.n	80045c8 <Drivemotor+0xa0>
		}else if (PWM<-PWM_MAX){
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a1c      	ldr	r2, [pc, #112]	; (80045d0 <Drivemotor+0xa8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	da0b      	bge.n	800457a <Drivemotor+0x52>
			htim1.Instance->CCR1=PWM_MAX;
 8004562:	4b1c      	ldr	r3, [pc, #112]	; (80045d4 <Drivemotor+0xac>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f242 7210 	movw	r2, #10000	; 0x2710
 800456a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 800456c:	2200      	movs	r2, #0
 800456e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004572:	4819      	ldr	r0, [pc, #100]	; (80045d8 <Drivemotor+0xb0>)
 8004574:	f002 fe42 	bl	80071fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}else if(PWM>PWM_MAX){
			htim1.Instance->CCR1=PWM_MAX;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}
}
 8004578:	e026      	b.n	80045c8 <Drivemotor+0xa0>
		}else if(PWM>=0 && PWM<=PWM_MAX){
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	db12      	blt.n	80045a6 <Drivemotor+0x7e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f242 7210 	movw	r2, #10000	; 0x2710
 8004586:	4293      	cmp	r3, r2
 8004588:	dc0d      	bgt.n	80045a6 <Drivemotor+0x7e>
			htim1.Instance->CCR1=Int32Abs(PWM);
 800458a:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <Drivemotor+0xac>)
 800458c:	681c      	ldr	r4, [r3, #0]
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff ff3a 	bl	8004408 <Int32Abs>
 8004594:	4603      	mov	r3, r0
 8004596:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8004598:	2201      	movs	r2, #1
 800459a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800459e:	480e      	ldr	r0, [pc, #56]	; (80045d8 <Drivemotor+0xb0>)
 80045a0:	f002 fe2c 	bl	80071fc <HAL_GPIO_WritePin>
 80045a4:	e010      	b.n	80045c8 <Drivemotor+0xa0>
		}else if(PWM>PWM_MAX){
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80045ac:	4293      	cmp	r3, r2
 80045ae:	dd0b      	ble.n	80045c8 <Drivemotor+0xa0>
			htim1.Instance->CCR1=PWM_MAX;
 80045b0:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <Drivemotor+0xac>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80045b8:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 80045ba:	2201      	movs	r2, #1
 80045bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045c0:	4805      	ldr	r0, [pc, #20]	; (80045d8 <Drivemotor+0xb0>)
 80045c2:	f002 fe1b 	bl	80071fc <HAL_GPIO_WritePin>
}
 80045c6:	e7ff      	b.n	80045c8 <Drivemotor+0xa0>
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd90      	pop	{r4, r7, pc}
 80045d0:	ffffd8f0 	.word	0xffffd8f0
 80045d4:	200004b8 	.word	0x200004b8
 80045d8:	40020000 	.word	0x40020000
 80045dc:	00000000 	.word	0x00000000

080045e0 <InverseTFofMotor>:

float InverseTFofMotor(float Velo, float PredictVelo)
{
 80045e0:	b5b0      	push	{r4, r5, r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80045ea:	edc7 0a00 	vstr	s1, [r7]
	static float VeloLast = 0;
	static float Voltage = 0;
	static float VoltageLast = 0;
	static float Pwm = 0;
	Voltage = (PredictVelo - (1.298649403776808*Velo) + (0.413830007244888*VeloLast) - (0.492093238713741*VoltageLast))/0.660367603263632;
 80045ee:	6838      	ldr	r0, [r7, #0]
 80045f0:	f7fb ff56 	bl	80004a0 <__aeabi_f2d>
 80045f4:	4604      	mov	r4, r0
 80045f6:	460d      	mov	r5, r1
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7fb ff51 	bl	80004a0 <__aeabi_f2d>
 80045fe:	a345      	add	r3, pc, #276	; (adr r3, 8004714 <InverseTFofMotor+0x134>)
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	f7fb ffa4 	bl	8000550 <__aeabi_dmul>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4620      	mov	r0, r4
 800460e:	4629      	mov	r1, r5
 8004610:	f7fb fde6 	bl	80001e0 <__aeabi_dsub>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4614      	mov	r4, r2
 800461a:	461d      	mov	r5, r3
 800461c:	4b38      	ldr	r3, [pc, #224]	; (8004700 <InverseTFofMotor+0x120>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f7fb ff3d 	bl	80004a0 <__aeabi_f2d>
 8004626:	a32e      	add	r3, pc, #184	; (adr r3, 80046e0 <InverseTFofMotor+0x100>)
 8004628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462c:	f7fb ff90 	bl	8000550 <__aeabi_dmul>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4620      	mov	r0, r4
 8004636:	4629      	mov	r1, r5
 8004638:	f7fb fdd4 	bl	80001e4 <__adddf3>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4614      	mov	r4, r2
 8004642:	461d      	mov	r5, r3
 8004644:	4b2f      	ldr	r3, [pc, #188]	; (8004704 <InverseTFofMotor+0x124>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f7fb ff29 	bl	80004a0 <__aeabi_f2d>
 800464e:	a326      	add	r3, pc, #152	; (adr r3, 80046e8 <InverseTFofMotor+0x108>)
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f7fb ff7c 	bl	8000550 <__aeabi_dmul>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4620      	mov	r0, r4
 800465e:	4629      	mov	r1, r5
 8004660:	f7fb fdbe 	bl	80001e0 <__aeabi_dsub>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4610      	mov	r0, r2
 800466a:	4619      	mov	r1, r3
 800466c:	a320      	add	r3, pc, #128	; (adr r3, 80046f0 <InverseTFofMotor+0x110>)
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	f7fc f897 	bl	80007a4 <__aeabi_ddiv>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4610      	mov	r0, r2
 800467c:	4619      	mov	r1, r3
 800467e:	f7fc f999 	bl	80009b4 <__aeabi_d2f>
 8004682:	4603      	mov	r3, r0
 8004684:	4a20      	ldr	r2, [pc, #128]	; (8004708 <InverseTFofMotor+0x128>)
 8004686:	6013      	str	r3, [r2, #0]
	Pwm = (Voltage * 10000.0)/12.0;
 8004688:	4b1f      	ldr	r3, [pc, #124]	; (8004708 <InverseTFofMotor+0x128>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f7fb ff07 	bl	80004a0 <__aeabi_f2d>
 8004692:	a319      	add	r3, pc, #100	; (adr r3, 80046f8 <InverseTFofMotor+0x118>)
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	f7fb ff5a 	bl	8000550 <__aeabi_dmul>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	4610      	mov	r0, r2
 80046a2:	4619      	mov	r1, r3
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	4b18      	ldr	r3, [pc, #96]	; (800470c <InverseTFofMotor+0x12c>)
 80046aa:	f7fc f87b 	bl	80007a4 <__aeabi_ddiv>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4610      	mov	r0, r2
 80046b4:	4619      	mov	r1, r3
 80046b6:	f7fc f97d 	bl	80009b4 <__aeabi_d2f>
 80046ba:	4603      	mov	r3, r0
 80046bc:	4a14      	ldr	r2, [pc, #80]	; (8004710 <InverseTFofMotor+0x130>)
 80046be:	6013      	str	r3, [r2, #0]
	VoltageLast = Voltage;
 80046c0:	4b11      	ldr	r3, [pc, #68]	; (8004708 <InverseTFofMotor+0x128>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a0f      	ldr	r2, [pc, #60]	; (8004704 <InverseTFofMotor+0x124>)
 80046c6:	6013      	str	r3, [r2, #0]
	VeloLast = Velo;
 80046c8:	4a0d      	ldr	r2, [pc, #52]	; (8004700 <InverseTFofMotor+0x120>)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6013      	str	r3, [r2, #0]
	return Pwm;
 80046ce:	4b10      	ldr	r3, [pc, #64]	; (8004710 <InverseTFofMotor+0x130>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	ee07 3a90 	vmov	s15, r3
}
 80046d6:	eeb0 0a67 	vmov.f32	s0, s15
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bdb0      	pop	{r4, r5, r7, pc}
 80046e0:	dace185d 	.word	0xdace185d
 80046e4:	3fda7c30 	.word	0x3fda7c30
 80046e8:	a3b6ed62 	.word	0xa3b6ed62
 80046ec:	3fdf7e74 	.word	0x3fdf7e74
 80046f0:	3d6b5dd1 	.word	0x3d6b5dd1
 80046f4:	3fe521bb 	.word	0x3fe521bb
 80046f8:	00000000 	.word	0x00000000
 80046fc:	40c38800 	.word	0x40c38800
 8004700:	20000b0c 	.word	0x20000b0c
 8004704:	20000b10 	.word	0x20000b10
 8004708:	20000b14 	.word	0x20000b14
 800470c:	40280000 	.word	0x40280000
 8004710:	20000b18 	.word	0x20000b18
 8004714:	98e30f85 	.word	0x98e30f85
 8004718:	3ff4c744 	.word	0x3ff4c744

0800471c <ControllLoopAndErrorHandler>:


void ControllLoopAndErrorHandler()
{
 800471c:	b5b0      	push	{r4, r5, r7, lr}
 800471e:	ed2d 8b02 	vpush	{d8}
 8004722:	b084      	sub	sp, #16
 8004724:	af04      	add	r7, sp, #16
//		Robot.flagStartTime = 0;
//	}
//	CurrentTime = Micros();
//	PredictTime = CurrentTime + 10000;
//	TrajectoryEvaluation(&traject,StartTime,CurrentTime,PredictTime);
	if(Robot.MotorIsOn == 1)
 8004726:	4b89      	ldr	r3, [pc, #548]	; (800494c <ControllLoopAndErrorHandler+0x230>)
 8004728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800472c:	2b01      	cmp	r3, #1
 800472e:	f040 80fb 	bne.w	8004928 <ControllLoopAndErrorHandler+0x20c>
	{
		if (Robot.flagStartTime == 1)
 8004732:	4b86      	ldr	r3, [pc, #536]	; (800494c <ControllLoopAndErrorHandler+0x230>)
 8004734:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004738:	2b01      	cmp	r3, #1
 800473a:	d10f      	bne.n	800475c <ControllLoopAndErrorHandler+0x40>
		{
			StartTime = Micros();
 800473c:	f001 fb2a 	bl	8005d94 <Micros>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4982      	ldr	r1, [pc, #520]	; (8004950 <ControllLoopAndErrorHandler+0x234>)
 8004746:	e9c1 2300 	strd	r2, r3, [r1]
			Robot.flagStartTime = 0;
 800474a:	4b80      	ldr	r3, [pc, #512]	; (800494c <ControllLoopAndErrorHandler+0x230>)
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			traject.TrajectoryFlag = 0;
 8004752:	4b80      	ldr	r3, [pc, #512]	; (8004954 <ControllLoopAndErrorHandler+0x238>)
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		CurrentTime = Micros();
 800475c:	f001 fb1a 	bl	8005d94 <Micros>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	497c      	ldr	r1, [pc, #496]	; (8004958 <ControllLoopAndErrorHandler+0x23c>)
 8004766:	e9c1 2300 	strd	r2, r3, [r1]
		PredictTime = CurrentTime + 10000;
 800476a:	4b7b      	ldr	r3, [pc, #492]	; (8004958 <ControllLoopAndErrorHandler+0x23c>)
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	f242 7110 	movw	r1, #10000	; 0x2710
 8004774:	1854      	adds	r4, r2, r1
 8004776:	f143 0500 	adc.w	r5, r3, #0
 800477a:	4b78      	ldr	r3, [pc, #480]	; (800495c <ControllLoopAndErrorHandler+0x240>)
 800477c:	e9c3 4500 	strd	r4, r5, [r3]
		TrajectoryEvaluation(&traject,StartTime,CurrentTime,PredictTime);
 8004780:	4b73      	ldr	r3, [pc, #460]	; (8004950 <ControllLoopAndErrorHandler+0x234>)
 8004782:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004786:	4b74      	ldr	r3, [pc, #464]	; (8004958 <ControllLoopAndErrorHandler+0x23c>)
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	4973      	ldr	r1, [pc, #460]	; (800495c <ControllLoopAndErrorHandler+0x240>)
 800478e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004796:	e9cd 2300 	strd	r2, r3, [sp]
 800479a:	4622      	mov	r2, r4
 800479c:	462b      	mov	r3, r5
 800479e:	486d      	ldr	r0, [pc, #436]	; (8004954 <ControllLoopAndErrorHandler+0x238>)
 80047a0:	f7fe fb62 	bl	8002e68 <TrajectoryEvaluation>
		Robot.QX = traject.QX;
 80047a4:	4b6b      	ldr	r3, [pc, #428]	; (8004954 <ControllLoopAndErrorHandler+0x238>)
 80047a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80047aa:	4a68      	ldr	r2, [pc, #416]	; (800494c <ControllLoopAndErrorHandler+0x230>)
 80047ac:	61d3      	str	r3, [r2, #28]
		Robot.QV = traject.QV;
 80047ae:	4b69      	ldr	r3, [pc, #420]	; (8004954 <ControllLoopAndErrorHandler+0x238>)
 80047b0:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80047b4:	4a65      	ldr	r2, [pc, #404]	; (800494c <ControllLoopAndErrorHandler+0x230>)
 80047b6:	6213      	str	r3, [r2, #32]
		if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0 && AbsVal(Robot.GoalPositon) == AbsVal(traject.QX))
 80047b8:	4b64      	ldr	r3, [pc, #400]	; (800494c <ControllLoopAndErrorHandler+0x230>)
 80047ba:	ed93 7a04 	vldr	s14, [r3, #16]
 80047be:	4b63      	ldr	r3, [pc, #396]	; (800494c <ControllLoopAndErrorHandler+0x230>)
 80047c0:	edd3 7a00 	vldr	s15, [r3]
 80047c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047c8:	eeb0 0a67 	vmov.f32	s0, s15
 80047cc:	f7fd f904 	bl	80019d8 <AbsVal>
 80047d0:	eef0 7a40 	vmov.f32	s15, s0
 80047d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e0:	d547      	bpl.n	8004872 <ControllLoopAndErrorHandler+0x156>
 80047e2:	4b5a      	ldr	r3, [pc, #360]	; (800494c <ControllLoopAndErrorHandler+0x230>)
 80047e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80047e8:	eeb0 0a67 	vmov.f32	s0, s15
 80047ec:	f7fd f8f4 	bl	80019d8 <AbsVal>
 80047f0:	eef0 7a40 	vmov.f32	s15, s0
 80047f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004800:	d537      	bpl.n	8004872 <ControllLoopAndErrorHandler+0x156>
 8004802:	4b52      	ldr	r3, [pc, #328]	; (800494c <ControllLoopAndErrorHandler+0x230>)
 8004804:	edd3 7a04 	vldr	s15, [r3, #16]
 8004808:	eeb0 0a67 	vmov.f32	s0, s15
 800480c:	f7fd f8e4 	bl	80019d8 <AbsVal>
 8004810:	eeb0 8a40 	vmov.f32	s16, s0
 8004814:	4b4f      	ldr	r3, [pc, #316]	; (8004954 <ControllLoopAndErrorHandler+0x238>)
 8004816:	edd3 7a81 	vldr	s15, [r3, #516]	; 0x204
 800481a:	eeb0 0a67 	vmov.f32	s0, s15
 800481e:	f7fd f8db 	bl	80019d8 <AbsVal>
 8004822:	eef0 7a40 	vmov.f32	s15, s0
 8004826:	eeb4 8a67 	vcmp.f32	s16, s15
 800482a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800482e:	d120      	bne.n	8004872 <ControllLoopAndErrorHandler+0x156>
		{
			PWMCHECKER = 0.0;
 8004830:	4b4b      	ldr	r3, [pc, #300]	; (8004960 <ControllLoopAndErrorHandler+0x244>)
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
			Drivemotor(PWMCHECKER);
 8004838:	4b49      	ldr	r3, [pc, #292]	; (8004960 <ControllLoopAndErrorHandler+0x244>)
 800483a:	edd3 7a00 	vldr	s15, [r3]
 800483e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004842:	ee17 0a90 	vmov	r0, s15
 8004846:	f7ff fe6f 	bl	8004528 <Drivemotor>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800484a:	2200      	movs	r2, #0
 800484c:	2108      	movs	r1, #8
 800484e:	4845      	ldr	r0, [pc, #276]	; (8004964 <ControllLoopAndErrorHandler+0x248>)
 8004850:	f002 fcd4 	bl	80071fc <HAL_GPIO_WritePin>
			Robot.RunningFlag = 0;
 8004854:	4b3d      	ldr	r3, [pc, #244]	; (800494c <ControllLoopAndErrorHandler+0x230>)
 8004856:	2200      	movs	r2, #0
 8004858:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			Robot.MotorIsOn = 0;
 800485c:	4b3b      	ldr	r3, [pc, #236]	; (800494c <ControllLoopAndErrorHandler+0x230>)
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			PIDAController_Init(&PidVelo);
 8004864:	4840      	ldr	r0, [pc, #256]	; (8004968 <ControllLoopAndErrorHandler+0x24c>)
 8004866:	f7fc fd8d 	bl	8001384 <PIDAController_Init>
			PIDAController_Init(&PidPos);
 800486a:	4840      	ldr	r0, [pc, #256]	; (800496c <ControllLoopAndErrorHandler+0x250>)
 800486c:	f7fc fd8a 	bl	8001384 <PIDAController_Init>
	else
	{
		PWMCHECKER = 0.0;
		Drivemotor(PWMCHECKER);
	}
}
 8004870:	e067      	b.n	8004942 <ControllLoopAndErrorHandler+0x226>
			PIDAPositonController_Update(&PidPos, &traject, Robot.QX , Robot.Position, Robot.QV ,traject.Vmax);
 8004872:	4b36      	ldr	r3, [pc, #216]	; (800494c <ControllLoopAndErrorHandler+0x230>)
 8004874:	edd3 7a07 	vldr	s15, [r3, #28]
 8004878:	4b34      	ldr	r3, [pc, #208]	; (800494c <ControllLoopAndErrorHandler+0x230>)
 800487a:	ed93 7a00 	vldr	s14, [r3]
 800487e:	4b33      	ldr	r3, [pc, #204]	; (800494c <ControllLoopAndErrorHandler+0x230>)
 8004880:	edd3 6a08 	vldr	s13, [r3, #32]
 8004884:	4b33      	ldr	r3, [pc, #204]	; (8004954 <ControllLoopAndErrorHandler+0x238>)
 8004886:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 800488a:	eef0 1a46 	vmov.f32	s3, s12
 800488e:	eeb0 1a66 	vmov.f32	s2, s13
 8004892:	eef0 0a47 	vmov.f32	s1, s14
 8004896:	eeb0 0a67 	vmov.f32	s0, s15
 800489a:	492e      	ldr	r1, [pc, #184]	; (8004954 <ControllLoopAndErrorHandler+0x238>)
 800489c:	4833      	ldr	r0, [pc, #204]	; (800496c <ControllLoopAndErrorHandler+0x250>)
 800489e:	f7fc fda1 	bl	80013e4 <PIDAPositonController_Update>
			PIDAVelocityController_Update(&PidVelo, &traject, Robot.QV + PidPos.ControllerOut , Robot.Velocity, Robot.QV ,traject.Vmax);
 80048a2:	4b2a      	ldr	r3, [pc, #168]	; (800494c <ControllLoopAndErrorHandler+0x230>)
 80048a4:	ed93 7a08 	vldr	s14, [r3, #32]
 80048a8:	4b30      	ldr	r3, [pc, #192]	; (800496c <ControllLoopAndErrorHandler+0x250>)
 80048aa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80048ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048b2:	4b26      	ldr	r3, [pc, #152]	; (800494c <ControllLoopAndErrorHandler+0x230>)
 80048b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80048b8:	4b24      	ldr	r3, [pc, #144]	; (800494c <ControllLoopAndErrorHandler+0x230>)
 80048ba:	edd3 6a08 	vldr	s13, [r3, #32]
 80048be:	4b25      	ldr	r3, [pc, #148]	; (8004954 <ControllLoopAndErrorHandler+0x238>)
 80048c0:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 80048c4:	eef0 1a46 	vmov.f32	s3, s12
 80048c8:	eeb0 1a66 	vmov.f32	s2, s13
 80048cc:	eef0 0a47 	vmov.f32	s1, s14
 80048d0:	eeb0 0a67 	vmov.f32	s0, s15
 80048d4:	491f      	ldr	r1, [pc, #124]	; (8004954 <ControllLoopAndErrorHandler+0x238>)
 80048d6:	4824      	ldr	r0, [pc, #144]	; (8004968 <ControllLoopAndErrorHandler+0x24c>)
 80048d8:	f7fc fec8 	bl	800166c <PIDAVelocityController_Update>
			invTFOutput = InverseTFofMotor(traject.QV,traject.QVP);
 80048dc:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <ControllLoopAndErrorHandler+0x238>)
 80048de:	edd3 7a7f 	vldr	s15, [r3, #508]	; 0x1fc
 80048e2:	4b1c      	ldr	r3, [pc, #112]	; (8004954 <ControllLoopAndErrorHandler+0x238>)
 80048e4:	ed93 7a80 	vldr	s14, [r3, #512]	; 0x200
 80048e8:	eef0 0a47 	vmov.f32	s1, s14
 80048ec:	eeb0 0a67 	vmov.f32	s0, s15
 80048f0:	f7ff fe76 	bl	80045e0 <InverseTFofMotor>
 80048f4:	eef0 7a40 	vmov.f32	s15, s0
 80048f8:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <ControllLoopAndErrorHandler+0x254>)
 80048fa:	edc3 7a00 	vstr	s15, [r3]
			PWMCHECKER = PidVelo.ControllerOut + invTFOutput;
 80048fe:	4b1a      	ldr	r3, [pc, #104]	; (8004968 <ControllLoopAndErrorHandler+0x24c>)
 8004900:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004904:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <ControllLoopAndErrorHandler+0x254>)
 8004906:	edd3 7a00 	vldr	s15, [r3]
 800490a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800490e:	4b14      	ldr	r3, [pc, #80]	; (8004960 <ControllLoopAndErrorHandler+0x244>)
 8004910:	edc3 7a00 	vstr	s15, [r3]
			Drivemotor(PWMCHECKER);
 8004914:	4b12      	ldr	r3, [pc, #72]	; (8004960 <ControllLoopAndErrorHandler+0x244>)
 8004916:	edd3 7a00 	vldr	s15, [r3]
 800491a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800491e:	ee17 0a90 	vmov	r0, s15
 8004922:	f7ff fe01 	bl	8004528 <Drivemotor>
}
 8004926:	e00c      	b.n	8004942 <ControllLoopAndErrorHandler+0x226>
		PWMCHECKER = 0.0;
 8004928:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <ControllLoopAndErrorHandler+0x244>)
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	601a      	str	r2, [r3, #0]
		Drivemotor(PWMCHECKER);
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <ControllLoopAndErrorHandler+0x244>)
 8004932:	edd3 7a00 	vldr	s15, [r3]
 8004936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800493a:	ee17 0a90 	vmov	r0, s15
 800493e:	f7ff fdf3 	bl	8004528 <Drivemotor>
}
 8004942:	bf00      	nop
 8004944:	46bd      	mov	sp, r7
 8004946:	ecbd 8b02 	vpop	{d8}
 800494a:	bdb0      	pop	{r4, r5, r7, pc}
 800494c:	200006dc 	.word	0x200006dc
 8004950:	20000ab0 	.word	0x20000ab0
 8004954:	2000086c 	.word	0x2000086c
 8004958:	20000ab8 	.word	0x20000ab8
 800495c:	20000ac0 	.word	0x20000ac0
 8004960:	20000868 	.word	0x20000868
 8004964:	40020400 	.word	0x40020400
 8004968:	20000808 	.word	0x20000808
 800496c:	20000838 	.word	0x20000838
 8004970:	20000804 	.word	0x20000804

08004974 <Ringbuf_Init>:

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 8004978:	2214      	movs	r2, #20
 800497a:	2100      	movs	r1, #0
 800497c:	480e      	ldr	r0, [pc, #56]	; (80049b8 <Ringbuf_Init+0x44>)
 800497e:	f007 ff29 	bl	800c7d4 <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 8004982:	2214      	movs	r2, #20
 8004984:	2100      	movs	r1, #0
 8004986:	480d      	ldr	r0, [pc, #52]	; (80049bc <Ringbuf_Init+0x48>)
 8004988:	f007 ff24 	bl	800c7d4 <memset>

	oldPos = 0;
 800498c:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <Ringbuf_Init+0x4c>)
 800498e:	2200      	movs	r2, #0
 8004990:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8004992:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <Ringbuf_Init+0x50>)
 8004994:	2200      	movs	r2, #0
 8004996:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 8004998:	2214      	movs	r2, #20
 800499a:	4907      	ldr	r1, [pc, #28]	; (80049b8 <Ringbuf_Init+0x44>)
 800499c:	480a      	ldr	r0, [pc, #40]	; (80049c8 <Ringbuf_Init+0x54>)
 800499e:	f006 fabf 	bl	800af20 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 80049a2:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <Ringbuf_Init+0x58>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b08      	ldr	r3, [pc, #32]	; (80049cc <Ringbuf_Init+0x58>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0208 	bic.w	r2, r2, #8
 80049b0:	601a      	str	r2, [r3, #0]
}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000718 	.word	0x20000718
 80049bc:	2000072c 	.word	0x2000072c
 80049c0:	2000074a 	.word	0x2000074a
 80049c4:	2000074c 	.word	0x2000074c
 80049c8:	200005d8 	.word	0x200005d8
 80049cc:	2000061c 	.word	0x2000061c

080049d0 <checkSum>:
	oldPos = 0;
	newPos = 0;
}

void checkSum (uint8_t *buffertoCheckSum, uint16_t Size)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	807b      	strh	r3, [r7, #2]
	uint8_t sum = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	73fb      	strb	r3, [r7, #15]
	modeByte = 0;
 80049e0:	4b52      	ldr	r3, [pc, #328]	; (8004b2c <checkSum+0x15c>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
	switch(Size){
 80049e6:	887b      	ldrh	r3, [r7, #2]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d84f      	bhi.n	8004a8e <checkSum+0xbe>
 80049ee:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <checkSum+0x24>)
 80049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f4:	08004ae5 	.word	0x08004ae5
 80049f8:	08004a05 	.word	0x08004a05
 80049fc:	08004ae5 	.word	0x08004ae5
 8004a00:	08004a2b 	.word	0x08004a2b
	case 1:
	case 3:
		break;
	case 2:
		if(!(checkAck(buffertoCheckSum, Size))) modeByte = sum = buffertoCheckSum[oldPos];
 8004a04:	887b      	ldrh	r3, [r7, #2]
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f897 	bl	8004b3c <checkAck>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d169      	bne.n	8004ae8 <checkSum+0x118>
 8004a14:	4b46      	ldr	r3, [pc, #280]	; (8004b30 <checkSum+0x160>)
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	73fb      	strb	r3, [r7, #15]
 8004a22:	4a42      	ldr	r2, [pc, #264]	; (8004b2c <checkSum+0x15c>)
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	7013      	strb	r3, [r2, #0]
		break;
 8004a28:	e05e      	b.n	8004ae8 <checkSum+0x118>
	case 4:
		if(checkAck(buffertoCheckSum, Size)) modeByte = sum = buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8004a2a:	887b      	ldrh	r3, [r7, #2]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f884 	bl	8004b3c <checkAck>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <checkSum+0x80>
 8004a3a:	4b3d      	ldr	r3, [pc, #244]	; (8004b30 <checkSum+0x160>)
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	3302      	adds	r3, #2
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	4413      	add	r3, r2
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	73fb      	strb	r3, [r7, #15]
 8004a48:	4a38      	ldr	r2, [pc, #224]	; (8004b2c <checkSum+0x15c>)
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	7013      	strb	r3, [r2, #0]
		else{
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
			modeByte = buffertoCheckSum[oldPos];
		}
		break;
 8004a4e:	e04c      	b.n	8004aea <checkSum+0x11a>
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8004a50:	4b37      	ldr	r3, [pc, #220]	; (8004b30 <checkSum+0x160>)
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	781a      	ldrb	r2, [r3, #0]
 8004a5c:	4b34      	ldr	r3, [pc, #208]	; (8004b30 <checkSum+0x160>)
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	3301      	adds	r3, #1
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	440b      	add	r3, r1
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	4413      	add	r3, r2
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	4b30      	ldr	r3, [pc, #192]	; (8004b30 <checkSum+0x160>)
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	3302      	adds	r3, #2
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	440b      	add	r3, r1
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	4413      	add	r3, r2
 8004a7a:	73fb      	strb	r3, [r7, #15]
			modeByte = buffertoCheckSum[oldPos];
 8004a7c:	4b2c      	ldr	r3, [pc, #176]	; (8004b30 <checkSum+0x160>)
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4413      	add	r3, r2
 8004a86:	781a      	ldrb	r2, [r3, #0]
 8004a88:	4b28      	ldr	r3, [pc, #160]	; (8004b2c <checkSum+0x15c>)
 8004a8a:	701a      	strb	r2, [r3, #0]
		break;
 8004a8c:	e02d      	b.n	8004aea <checkSum+0x11a>
	default:
		modeByte = buffertoCheckSum[oldPos];
 8004a8e:	4b28      	ldr	r3, [pc, #160]	; (8004b30 <checkSum+0x160>)
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4413      	add	r3, r2
 8004a98:	781a      	ldrb	r2, [r3, #0]
 8004a9a:	4b24      	ldr	r3, [pc, #144]	; (8004b2c <checkSum+0x15c>)
 8004a9c:	701a      	strb	r2, [r3, #0]
		for (int index = 0; index < Size-1; ++index)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	e019      	b.n	8004ad8 <checkSum+0x108>
		{
			sum = sum + buffertoCheckSum[oldPos+index % MainBuf_SIZE];
 8004aa4:	4b22      	ldr	r3, [pc, #136]	; (8004b30 <checkSum+0x160>)
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	68b9      	ldr	r1, [r7, #8]
 8004aac:	4b21      	ldr	r3, [pc, #132]	; (8004b34 <checkSum+0x164>)
 8004aae:	fb83 2301 	smull	r2, r3, r3, r1
 8004ab2:	10da      	asrs	r2, r3, #3
 8004ab4:	17cb      	asrs	r3, r1, #31
 8004ab6:	1ad2      	subs	r2, r2, r3
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	1aca      	subs	r2, r1, r3
 8004ac2:	1883      	adds	r3, r0, r2
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4413      	add	r3, r2
 8004aca:	781a      	ldrb	r2, [r3, #0]
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	4413      	add	r3, r2
 8004ad0:	73fb      	strb	r3, [r7, #15]
		for (int index = 0; index < Size-1; ++index)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	887b      	ldrh	r3, [r7, #2]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	dbe0      	blt.n	8004aa4 <checkSum+0xd4>
 8004ae2:	e002      	b.n	8004aea <checkSum+0x11a>
		break;
 8004ae4:	bf00      	nop
 8004ae6:	e000      	b.n	8004aea <checkSum+0x11a>
		break;
 8004ae8:	bf00      	nop
		}
	}

	if((uint8_t)buffertoCheckSum[oldPos+(Size-1) % MainBuf_SIZE] == (uint8_t)(~sum)) UARTstateManagement(MainBuf);
 8004aea:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <checkSum+0x160>)
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	887b      	ldrh	r3, [r7, #2]
 8004af2:	1e59      	subs	r1, r3, #1
 8004af4:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <checkSum+0x164>)
 8004af6:	fb83 2301 	smull	r2, r3, r3, r1
 8004afa:	10da      	asrs	r2, r3, #3
 8004afc:	17cb      	asrs	r3, r1, #31
 8004afe:	1ad2      	subs	r2, r2, r3
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	1aca      	subs	r2, r1, r3
 8004b0a:	1883      	adds	r3, r0, r2
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4413      	add	r3, r2
 8004b12:	781a      	ldrb	r2, [r3, #0]
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	43db      	mvns	r3, r3
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d102      	bne.n	8004b24 <checkSum+0x154>
 8004b1e:	4806      	ldr	r0, [pc, #24]	; (8004b38 <checkSum+0x168>)
 8004b20:	f000 f89a 	bl	8004c58 <UARTstateManagement>
}
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	20000775 	.word	0x20000775
 8004b30:	2000074a 	.word	0x2000074a
 8004b34:	66666667 	.word	0x66666667
 8004b38:	2000072c 	.word	0x2000072c

08004b3c <checkAck>:

uint8_t checkAck (uint8_t *buffertoCheckAck, uint16_t Size)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	807b      	strh	r3, [r7, #2]
	if((buffertoCheckAck[oldPos] == 0b01011000) && (buffertoCheckAck[oldPos+1 % MainBuf_SIZE] == 0b01110101)) return 1;
 8004b48:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <checkAck+0x40>)
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4413      	add	r3, r2
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2b58      	cmp	r3, #88	; 0x58
 8004b56:	d109      	bne.n	8004b6c <checkAck+0x30>
 8004b58:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <checkAck+0x40>)
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	4413      	add	r3, r2
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b75      	cmp	r3, #117	; 0x75
 8004b66:	d101      	bne.n	8004b6c <checkAck+0x30>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <checkAck+0x32>
	else return 0;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	2000074a 	.word	0x2000074a

08004b80 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	807b      	strh	r3, [r7, #2]
        if (huart->Instance == USART2)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a28      	ldr	r2, [pc, #160]	; (8004c34 <HAL_UARTEx_RxEventCallback+0xb4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d14a      	bne.n	8004c2c <HAL_UARTEx_RxEventCallback+0xac>
        {
                oldPos = newPos;
 8004b96:	4b28      	ldr	r3, [pc, #160]	; (8004c38 <HAL_UARTEx_RxEventCallback+0xb8>)
 8004b98:	881a      	ldrh	r2, [r3, #0]
 8004b9a:	4b28      	ldr	r3, [pc, #160]	; (8004c3c <HAL_UARTEx_RxEventCallback+0xbc>)
 8004b9c:	801a      	strh	r2, [r3, #0]
                dataSize = Size;
 8004b9e:	4a28      	ldr	r2, [pc, #160]	; (8004c40 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004ba0:	887b      	ldrh	r3, [r7, #2]
 8004ba2:	8013      	strh	r3, [r2, #0]
                if (oldPos+dataSize > MainBuf_SIZE)
 8004ba4:	4b25      	ldr	r3, [pc, #148]	; (8004c3c <HAL_UARTEx_RxEventCallback+0xbc>)
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4b25      	ldr	r3, [pc, #148]	; (8004c40 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	4413      	add	r3, r2
 8004bb0:	2b14      	cmp	r3, #20
 8004bb2:	dd16      	ble.n	8004be2 <HAL_UARTEx_RxEventCallback+0x62>
                {
                        oldPos = 0;
 8004bb4:	4b21      	ldr	r3, [pc, #132]	; (8004c3c <HAL_UARTEx_RxEventCallback+0xbc>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	801a      	strh	r2, [r3, #0]
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8004bba:	4b20      	ldr	r3, [pc, #128]	; (8004c3c <HAL_UARTEx_RxEventCallback+0xbc>)
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <HAL_UARTEx_RxEventCallback+0xc4>)
 8004bc2:	4413      	add	r3, r2
 8004bc4:	4a1e      	ldr	r2, [pc, #120]	; (8004c40 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004bc6:	8812      	ldrh	r2, [r2, #0]
 8004bc8:	491f      	ldr	r1, [pc, #124]	; (8004c48 <HAL_UARTEx_RxEventCallback+0xc8>)
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f007 fdf4 	bl	800c7b8 <memcpy>
                        newPos = dataSize+oldPos;
 8004bd0:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004bd2:	881a      	ldrh	r2, [r3, #0]
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_UARTEx_RxEventCallback+0xbc>)
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	4413      	add	r3, r2
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	4b16      	ldr	r3, [pc, #88]	; (8004c38 <HAL_UARTEx_RxEventCallback+0xb8>)
 8004bde:	801a      	strh	r2, [r3, #0]
 8004be0:	e012      	b.n	8004c08 <HAL_UARTEx_RxEventCallback+0x88>
                }
                else
                {
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8004be2:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <HAL_UARTEx_RxEventCallback+0xbc>)
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	4b16      	ldr	r3, [pc, #88]	; (8004c44 <HAL_UARTEx_RxEventCallback+0xc4>)
 8004bea:	4413      	add	r3, r2
 8004bec:	4a14      	ldr	r2, [pc, #80]	; (8004c40 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004bee:	8812      	ldrh	r2, [r2, #0]
 8004bf0:	4915      	ldr	r1, [pc, #84]	; (8004c48 <HAL_UARTEx_RxEventCallback+0xc8>)
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f007 fde0 	bl	800c7b8 <memcpy>
                        newPos = dataSize+oldPos;
 8004bf8:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004bfa:	881a      	ldrh	r2, [r3, #0]
 8004bfc:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <HAL_UARTEx_RxEventCallback+0xbc>)
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	4413      	add	r3, r2
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <HAL_UARTEx_RxEventCallback+0xb8>)
 8004c06:	801a      	strh	r2, [r3, #0]
                }

                checkSum(MainBuf, Size);
 8004c08:	887b      	ldrh	r3, [r7, #2]
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	480d      	ldr	r0, [pc, #52]	; (8004c44 <HAL_UARTEx_RxEventCallback+0xc4>)
 8004c0e:	f7ff fedf 	bl	80049d0 <checkSum>
                HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 8004c12:	2214      	movs	r2, #20
 8004c14:	490c      	ldr	r1, [pc, #48]	; (8004c48 <HAL_UARTEx_RxEventCallback+0xc8>)
 8004c16:	480d      	ldr	r0, [pc, #52]	; (8004c4c <HAL_UARTEx_RxEventCallback+0xcc>)
 8004c18:	f006 f982 	bl	800af20 <HAL_UARTEx_ReceiveToIdle_DMA>
                __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <HAL_UARTEx_RxEventCallback+0xd0>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <HAL_UARTEx_RxEventCallback+0xd0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0208 	bic.w	r2, r2, #8
 8004c2a:	601a      	str	r2, [r3, #0]
        }
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40004400 	.word	0x40004400
 8004c38:	2000074c 	.word	0x2000074c
 8004c3c:	2000074a 	.word	0x2000074a
 8004c40:	2000074e 	.word	0x2000074e
 8004c44:	2000072c 	.word	0x2000072c
 8004c48:	20000718 	.word	0x20000718
 8004c4c:	200005d8 	.word	0x200005d8
 8004c50:	2000061c 	.word	0x2000061c
 8004c54:	00000000 	.word	0x00000000

08004c58 <UARTstateManagement>:

void UARTstateManagement(uint8_t *Mainbuffer)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	switch (UARTState)
 8004c60:	4bad      	ldr	r3, [pc, #692]	; (8004f18 <UARTstateManagement+0x2c0>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d01d      	beq.n	8004ca4 <UARTstateManagement+0x4c>
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	f300 835a 	bgt.w	8005322 <UARTstateManagement+0x6ca>
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 8354 	beq.w	800531c <UARTstateManagement+0x6c4>
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d000      	beq.n	8004c7a <UARTstateManagement+0x22>
					homingFlag = 1;
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
					break;
				}
	}
}
 8004c78:	e353      	b.n	8005322 <UARTstateManagement+0x6ca>
			if(Mainbuffer[oldPos] == 0b10010010)
 8004c7a:	4ba8      	ldr	r3, [pc, #672]	; (8004f1c <UARTstateManagement+0x2c4>)
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4413      	add	r3, r2
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	2b92      	cmp	r3, #146	; 0x92
 8004c88:	f040 834a 	bne.w	8005320 <UARTstateManagement+0x6c8>
				modeNo = 2;
 8004c8c:	4ba4      	ldr	r3, [pc, #656]	; (8004f20 <UARTstateManagement+0x2c8>)
 8004c8e:	2202      	movs	r2, #2
 8004c90:	701a      	strb	r2, [r3, #0]
				UARTState = MCUConnect;
 8004c92:	4ba1      	ldr	r3, [pc, #644]	; (8004f18 <UARTstateManagement+0x2c0>)
 8004c94:	2202      	movs	r2, #2
 8004c96:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004c98:	2202      	movs	r2, #2
 8004c9a:	49a2      	ldr	r1, [pc, #648]	; (8004f24 <UARTstateManagement+0x2cc>)
 8004c9c:	48a2      	ldr	r0, [pc, #648]	; (8004f28 <UARTstateManagement+0x2d0>)
 8004c9e:	f006 f8c1 	bl	800ae24 <HAL_UART_Transmit_DMA>
			break;
 8004ca2:	e33d      	b.n	8005320 <UARTstateManagement+0x6c8>
			stateSwitch = modeByte;
 8004ca4:	4ba1      	ldr	r3, [pc, #644]	; (8004f2c <UARTstateManagement+0x2d4>)
 8004ca6:	781a      	ldrb	r2, [r3, #0]
 8004ca8:	4ba1      	ldr	r3, [pc, #644]	; (8004f30 <UARTstateManagement+0x2d8>)
 8004caa:	701a      	strb	r2, [r3, #0]
			switch (stateSwitch)
 8004cac:	4ba0      	ldr	r3, [pc, #640]	; (8004f30 <UARTstateManagement+0x2d8>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	3b91      	subs	r3, #145	; 0x91
 8004cb2:	2b0d      	cmp	r3, #13
 8004cb4:	f200 8335 	bhi.w	8005322 <UARTstateManagement+0x6ca>
 8004cb8:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <UARTstateManagement+0x68>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004cf9 	.word	0x08004cf9
 8004cc4:	08004d0b 	.word	0x08004d0b
 8004cc8:	08004d23 	.word	0x08004d23
 8004ccc:	08004d3b 	.word	0x08004d3b
 8004cd0:	08004d9b 	.word	0x08004d9b
 8004cd4:	08004e09 	.word	0x08004e09
 8004cd8:	08004e41 	.word	0x08004e41
 8004cdc:	08004f55 	.word	0x08004f55
 8004ce0:	08004f99 	.word	0x08004f99
 8004ce4:	0800503f 	.word	0x0800503f
 8004ce8:	080051b5 	.word	0x080051b5
 8004cec:	080052ab 	.word	0x080052ab
 8004cf0:	080052db 	.word	0x080052db
 8004cf4:	080052f3 	.word	0x080052f3
					modeNo = 1;
 8004cf8:	4b89      	ldr	r3, [pc, #548]	; (8004f20 <UARTstateManagement+0x2c8>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004cfe:	2202      	movs	r2, #2
 8004d00:	4988      	ldr	r1, [pc, #544]	; (8004f24 <UARTstateManagement+0x2cc>)
 8004d02:	4889      	ldr	r0, [pc, #548]	; (8004f28 <UARTstateManagement+0x2d0>)
 8004d04:	f006 f88e 	bl	800ae24 <HAL_UART_Transmit_DMA>
					break;
 8004d08:	e30b      	b.n	8005322 <UARTstateManagement+0x6ca>
					modeNo = 2;
 8004d0a:	4b85      	ldr	r3, [pc, #532]	; (8004f20 <UARTstateManagement+0x2c8>)
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	701a      	strb	r2, [r3, #0]
					UARTState = MCUConnect;
 8004d10:	4b81      	ldr	r3, [pc, #516]	; (8004f18 <UARTstateManagement+0x2c0>)
 8004d12:	2202      	movs	r2, #2
 8004d14:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004d16:	2202      	movs	r2, #2
 8004d18:	4982      	ldr	r1, [pc, #520]	; (8004f24 <UARTstateManagement+0x2cc>)
 8004d1a:	4883      	ldr	r0, [pc, #524]	; (8004f28 <UARTstateManagement+0x2d0>)
 8004d1c:	f006 f882 	bl	800ae24 <HAL_UART_Transmit_DMA>
					break;
 8004d20:	e2ff      	b.n	8005322 <UARTstateManagement+0x6ca>
					modeNo = 3;
 8004d22:	4b7f      	ldr	r3, [pc, #508]	; (8004f20 <UARTstateManagement+0x2c8>)
 8004d24:	2203      	movs	r2, #3
 8004d26:	701a      	strb	r2, [r3, #0]
					UARTState = MCUDisconnect;
 8004d28:	4b7b      	ldr	r3, [pc, #492]	; (8004f18 <UARTstateManagement+0x2c0>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004d2e:	2202      	movs	r2, #2
 8004d30:	497c      	ldr	r1, [pc, #496]	; (8004f24 <UARTstateManagement+0x2cc>)
 8004d32:	487d      	ldr	r0, [pc, #500]	; (8004f28 <UARTstateManagement+0x2d0>)
 8004d34:	f006 f876 	bl	800ae24 <HAL_UART_Transmit_DMA>
					break;
 8004d38:	e2f3      	b.n	8005322 <UARTstateManagement+0x6ca>
					modeNo = 4;
 8004d3a:	4b79      	ldr	r3, [pc, #484]	; (8004f20 <UARTstateManagement+0x2c8>)
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	701a      	strb	r2, [r3, #0]
					uartVelo = (float)((Mainbuffer[oldPos + 2 % MainBuf_SIZE])/255.0)*10.0;
 8004d40:	4b76      	ldr	r3, [pc, #472]	; (8004f1c <UARTstateManagement+0x2c4>)
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	3302      	adds	r3, #2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	4413      	add	r3, r2
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fb fb95 	bl	800047c <__aeabi_i2d>
 8004d52:	a36d      	add	r3, pc, #436	; (adr r3, 8004f08 <UARTstateManagement+0x2b0>)
 8004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d58:	f7fb fd24 	bl	80007a4 <__aeabi_ddiv>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4610      	mov	r0, r2
 8004d62:	4619      	mov	r1, r3
 8004d64:	f7fb fe26 	bl	80009b4 <__aeabi_d2f>
 8004d68:	ee07 0a10 	vmov	s14, r0
 8004d6c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8004d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d74:	4b6f      	ldr	r3, [pc, #444]	; (8004f34 <UARTstateManagement+0x2dc>)
 8004d76:	edc3 7a00 	vstr	s15, [r3]
					Robot.QVMax = uartVelo*6.0;
 8004d7a:	4b6e      	ldr	r3, [pc, #440]	; (8004f34 <UARTstateManagement+0x2dc>)
 8004d7c:	edd3 7a00 	vldr	s15, [r3]
 8004d80:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d88:	4b6b      	ldr	r3, [pc, #428]	; (8004f38 <UARTstateManagement+0x2e0>)
 8004d8a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004d8e:	2202      	movs	r2, #2
 8004d90:	4964      	ldr	r1, [pc, #400]	; (8004f24 <UARTstateManagement+0x2cc>)
 8004d92:	4865      	ldr	r0, [pc, #404]	; (8004f28 <UARTstateManagement+0x2d0>)
 8004d94:	f006 f846 	bl	800ae24 <HAL_UART_Transmit_DMA>
					break;
 8004d98:	e2c3      	b.n	8005322 <UARTstateManagement+0x6ca>
					modeNo = 5;
 8004d9a:	4b61      	ldr	r3, [pc, #388]	; (8004f20 <UARTstateManagement+0x2c8>)
 8004d9c:	2205      	movs	r2, #5
 8004d9e:	701a      	strb	r2, [r3, #0]
					goalFlag = 1;
 8004da0:	4b66      	ldr	r3, [pc, #408]	; (8004f3c <UARTstateManagement+0x2e4>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	701a      	strb	r2, [r3, #0]
					goalAmount = 1;
 8004da6:	4b66      	ldr	r3, [pc, #408]	; (8004f40 <UARTstateManagement+0x2e8>)
 8004da8:	2201      	movs	r2, #1
 8004daa:	701a      	strb	r2, [r3, #0]
					uartPos = (float)((((Mainbuffer[oldPos + 1 % MainBuf_SIZE] << 8) | Mainbuffer[oldPos + 2 % MainBuf_SIZE])*360.0)/62800);
 8004dac:	4b5b      	ldr	r3, [pc, #364]	; (8004f1c <UARTstateManagement+0x2c4>)
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	3301      	adds	r3, #1
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	4413      	add	r3, r2
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	021b      	lsls	r3, r3, #8
 8004dba:	4a58      	ldr	r2, [pc, #352]	; (8004f1c <UARTstateManagement+0x2c4>)
 8004dbc:	8812      	ldrh	r2, [r2, #0]
 8004dbe:	3202      	adds	r2, #2
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	440a      	add	r2, r1
 8004dc4:	7812      	ldrb	r2, [r2, #0]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fb fb57 	bl	800047c <__aeabi_i2d>
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	4b5c      	ldr	r3, [pc, #368]	; (8004f44 <UARTstateManagement+0x2ec>)
 8004dd4:	f7fb fbbc 	bl	8000550 <__aeabi_dmul>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4610      	mov	r0, r2
 8004dde:	4619      	mov	r1, r3
 8004de0:	a34b      	add	r3, pc, #300	; (adr r3, 8004f10 <UARTstateManagement+0x2b8>)
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	f7fb fcdd 	bl	80007a4 <__aeabi_ddiv>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4610      	mov	r0, r2
 8004df0:	4619      	mov	r1, r3
 8004df2:	f7fb fddf 	bl	80009b4 <__aeabi_d2f>
 8004df6:	4603      	mov	r3, r0
 8004df8:	4a53      	ldr	r2, [pc, #332]	; (8004f48 <UARTstateManagement+0x2f0>)
 8004dfa:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	4949      	ldr	r1, [pc, #292]	; (8004f24 <UARTstateManagement+0x2cc>)
 8004e00:	4849      	ldr	r0, [pc, #292]	; (8004f28 <UARTstateManagement+0x2d0>)
 8004e02:	f006 f80f 	bl	800ae24 <HAL_UART_Transmit_DMA>
					break;
 8004e06:	e28c      	b.n	8005322 <UARTstateManagement+0x6ca>
					modeNo = 6;
 8004e08:	4b45      	ldr	r3, [pc, #276]	; (8004f20 <UARTstateManagement+0x2c8>)
 8004e0a:	2206      	movs	r2, #6
 8004e0c:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8004e0e:	4b4b      	ldr	r3, [pc, #300]	; (8004f3c <UARTstateManagement+0x2e4>)
 8004e10:	2202      	movs	r2, #2
 8004e12:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8004e14:	220f      	movs	r2, #15
 8004e16:	2100      	movs	r1, #0
 8004e18:	484c      	ldr	r0, [pc, #304]	; (8004f4c <UARTstateManagement+0x2f4>)
 8004e1a:	f007 fcdb 	bl	800c7d4 <memset>
					goalAmount = 1;
 8004e1e:	4b48      	ldr	r3, [pc, #288]	; (8004f40 <UARTstateManagement+0x2e8>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	701a      	strb	r2, [r3, #0]
					uartGoal[0] = Mainbuffer[oldPos + 2 % MainBuf_SIZE];
 8004e24:	4b3d      	ldr	r3, [pc, #244]	; (8004f1c <UARTstateManagement+0x2c4>)
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	3302      	adds	r3, #2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	781a      	ldrb	r2, [r3, #0]
 8004e30:	4b46      	ldr	r3, [pc, #280]	; (8004f4c <UARTstateManagement+0x2f4>)
 8004e32:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004e34:	2202      	movs	r2, #2
 8004e36:	493b      	ldr	r1, [pc, #236]	; (8004f24 <UARTstateManagement+0x2cc>)
 8004e38:	483b      	ldr	r0, [pc, #236]	; (8004f28 <UARTstateManagement+0x2d0>)
 8004e3a:	f005 fff3 	bl	800ae24 <HAL_UART_Transmit_DMA>
					break;
 8004e3e:	e270      	b.n	8005322 <UARTstateManagement+0x6ca>
					modeNo = 7;
 8004e40:	4b37      	ldr	r3, [pc, #220]	; (8004f20 <UARTstateManagement+0x2c8>)
 8004e42:	2207      	movs	r2, #7
 8004e44:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8004e46:	4b3d      	ldr	r3, [pc, #244]	; (8004f3c <UARTstateManagement+0x2e4>)
 8004e48:	2202      	movs	r2, #2
 8004e4a:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8004e4c:	220f      	movs	r2, #15
 8004e4e:	2100      	movs	r1, #0
 8004e50:	483e      	ldr	r0, [pc, #248]	; (8004f4c <UARTstateManagement+0x2f4>)
 8004e52:	f007 fcbf 	bl	800c7d4 <memset>
					goalAmount = Mainbuffer[oldPos + 1 % MainBuf_SIZE];
 8004e56:	4b31      	ldr	r3, [pc, #196]	; (8004f1c <UARTstateManagement+0x2c4>)
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	4413      	add	r3, r2
 8004e60:	781a      	ldrb	r2, [r3, #0]
 8004e62:	4b37      	ldr	r3, [pc, #220]	; (8004f40 <UARTstateManagement+0x2e8>)
 8004e64:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	e03a      	b.n	8004ee2 <UARTstateManagement+0x28a>
						uartGoal[0+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] & 15; // low 8 bit (last 4 bit)
 8004e6c:	4b2b      	ldr	r3, [pc, #172]	; (8004f1c <UARTstateManagement+0x2c4>)
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	1c99      	adds	r1, r3, #2
 8004e76:	4b36      	ldr	r3, [pc, #216]	; (8004f50 <UARTstateManagement+0x2f8>)
 8004e78:	fb83 2301 	smull	r2, r3, r3, r1
 8004e7c:	10da      	asrs	r2, r3, #3
 8004e7e:	17cb      	asrs	r3, r1, #31
 8004e80:	1ad2      	subs	r2, r2, r3
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	1aca      	subs	r2, r1, r3
 8004e8c:	1883      	adds	r3, r0, r2
 8004e8e:	461a      	mov	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4413      	add	r3, r2
 8004e94:	781a      	ldrb	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	f002 020f 	and.w	r2, r2, #15
 8004e9e:	b2d1      	uxtb	r1, r2
 8004ea0:	4a2a      	ldr	r2, [pc, #168]	; (8004f4c <UARTstateManagement+0x2f4>)
 8004ea2:	54d1      	strb	r1, [r2, r3]
						uartGoal[1+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] >> 4; // high 8 bit (first 4 bit)
 8004ea4:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <UARTstateManagement+0x2c4>)
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1c99      	adds	r1, r3, #2
 8004eae:	4b28      	ldr	r3, [pc, #160]	; (8004f50 <UARTstateManagement+0x2f8>)
 8004eb0:	fb83 2301 	smull	r2, r3, r3, r1
 8004eb4:	10da      	asrs	r2, r3, #3
 8004eb6:	17cb      	asrs	r3, r1, #31
 8004eb8:	1ad2      	subs	r2, r2, r3
 8004eba:	4613      	mov	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	1aca      	subs	r2, r1, r3
 8004ec4:	1883      	adds	r3, r0, r2
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4413      	add	r3, r2
 8004ecc:	781a      	ldrb	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	0912      	lsrs	r2, r2, #4
 8004ed6:	b2d1      	uxtb	r1, r2
 8004ed8:	4a1c      	ldr	r2, [pc, #112]	; (8004f4c <UARTstateManagement+0x2f4>)
 8004eda:	54d1      	strb	r1, [r2, r3]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <UARTstateManagement+0x2e8>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	0fda      	lsrs	r2, r3, #31
 8004eea:	4413      	add	r3, r2
 8004eec:	105b      	asrs	r3, r3, #1
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	dbba      	blt.n	8004e6c <UARTstateManagement+0x214>
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	490a      	ldr	r1, [pc, #40]	; (8004f24 <UARTstateManagement+0x2cc>)
 8004efa:	480b      	ldr	r0, [pc, #44]	; (8004f28 <UARTstateManagement+0x2d0>)
 8004efc:	f005 ff92 	bl	800ae24 <HAL_UART_Transmit_DMA>
					break;
 8004f00:	e20f      	b.n	8005322 <UARTstateManagement+0x6ca>
 8004f02:	bf00      	nop
 8004f04:	f3af 8000 	nop.w
 8004f08:	00000000 	.word	0x00000000
 8004f0c:	406fe000 	.word	0x406fe000
 8004f10:	00000000 	.word	0x00000000
 8004f14:	40eeaa00 	.word	0x40eeaa00
 8004f18:	20000714 	.word	0x20000714
 8004f1c:	2000074a 	.word	0x2000074a
 8004f20:	20000774 	.word	0x20000774
 8004f24:	2000002c 	.word	0x2000002c
 8004f28:	200005d8 	.word	0x200005d8
 8004f2c:	20000775 	.word	0x20000775
 8004f30:	20000748 	.word	0x20000748
 8004f34:	20000754 	.word	0x20000754
 8004f38:	200006dc 	.word	0x200006dc
 8004f3c:	2000076d 	.word	0x2000076d
 8004f40:	2000076b 	.word	0x2000076b
 8004f44:	40768000 	.word	0x40768000
 8004f48:	20000758 	.word	0x20000758
 8004f4c:	2000075c 	.word	0x2000075c
 8004f50:	66666667 	.word	0x66666667
					modeNo = 8;
 8004f54:	4b8a      	ldr	r3, [pc, #552]	; (8005180 <UARTstateManagement+0x528>)
 8004f56:	2208      	movs	r2, #8
 8004f58:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 0){
 8004f5a:	4b8a      	ldr	r3, [pc, #552]	; (8005184 <UARTstateManagement+0x52c>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d114      	bne.n	8004f8c <UARTstateManagement+0x334>
					goingToGoalFlag = 0;
 8004f62:	4b89      	ldr	r3, [pc, #548]	; (8005188 <UARTstateManagement+0x530>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]
					Robot.MotorIsOn = 1;
 8004f68:	4b88      	ldr	r3, [pc, #544]	; (800518c <UARTstateManagement+0x534>)
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					Robot.flagStartTime = 1;
 8004f70:	4b86      	ldr	r3, [pc, #536]	; (800518c <UARTstateManagement+0x534>)
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
					Robot.RunningFlag = 1;
 8004f78:	4b84      	ldr	r3, [pc, #528]	; (800518c <UARTstateManagement+0x534>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
					doingTaskFlag = 1;
 8004f80:	4b80      	ldr	r3, [pc, #512]	; (8005184 <UARTstateManagement+0x52c>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]
					goalIDX = 0;
 8004f86:	4b82      	ldr	r3, [pc, #520]	; (8005190 <UARTstateManagement+0x538>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	4981      	ldr	r1, [pc, #516]	; (8005194 <UARTstateManagement+0x53c>)
 8004f90:	4881      	ldr	r0, [pc, #516]	; (8005198 <UARTstateManagement+0x540>)
 8004f92:	f005 ff47 	bl	800ae24 <HAL_UART_Transmit_DMA>
					break;
 8004f96:	e1c4      	b.n	8005322 <UARTstateManagement+0x6ca>
					modeNo = 9;
 8004f98:	4b79      	ldr	r3, [pc, #484]	; (8005180 <UARTstateManagement+0x528>)
 8004f9a:	2209      	movs	r2, #9
 8004f9c:	701a      	strb	r2, [r3, #0]
					Robot.CurrentStation = 0;
 8004f9e:	4b7b      	ldr	r3, [pc, #492]	; (800518c <UARTstateManagement+0x534>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	819a      	strh	r2, [r3, #12]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8004fa4:	4b77      	ldr	r3, [pc, #476]	; (8005184 <UARTstateManagement+0x52c>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d004      	beq.n	8004fb6 <UARTstateManagement+0x35e>
 8004fac:	4b77      	ldr	r3, [pc, #476]	; (800518c <UARTstateManagement+0x534>)
 8004fae:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d11f      	bne.n	8004ff6 <UARTstateManagement+0x39e>
 8004fb6:	4b77      	ldr	r3, [pc, #476]	; (8005194 <UARTstateManagement+0x53c>)
 8004fb8:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 8004fba:	4b78      	ldr	r3, [pc, #480]	; (800519c <UARTstateManagement+0x544>)
 8004fbc:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 153; // start-mode
 8004fbe:	4b77      	ldr	r3, [pc, #476]	; (800519c <UARTstateManagement+0x544>)
 8004fc0:	2299      	movs	r2, #153	; 0x99
 8004fc2:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = Robot.CurrentStation; // set current goal
 8004fc4:	4b71      	ldr	r3, [pc, #452]	; (800518c <UARTstateManagement+0x534>)
 8004fc6:	899b      	ldrh	r3, [r3, #12]
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	4b74      	ldr	r3, [pc, #464]	; (800519c <UARTstateManagement+0x544>)
 8004fcc:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 8004fce:	4b73      	ldr	r3, [pc, #460]	; (800519c <UARTstateManagement+0x544>)
 8004fd0:	789a      	ldrb	r2, [r3, #2]
 8004fd2:	4b72      	ldr	r3, [pc, #456]	; (800519c <UARTstateManagement+0x544>)
 8004fd4:	78db      	ldrb	r3, [r3, #3]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	4b70      	ldr	r3, [pc, #448]	; (800519c <UARTstateManagement+0x544>)
 8004fdc:	791b      	ldrb	r3, [r3, #4]
 8004fde:	4413      	add	r3, r2
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	4b6d      	ldr	r3, [pc, #436]	; (800519c <UARTstateManagement+0x544>)
 8004fe8:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8004fea:	2206      	movs	r2, #6
 8004fec:	496b      	ldr	r1, [pc, #428]	; (800519c <UARTstateManagement+0x544>)
 8004fee:	486a      	ldr	r0, [pc, #424]	; (8005198 <UARTstateManagement+0x540>)
 8004ff0:	f005 ff18 	bl	800ae24 <HAL_UART_Transmit_DMA>
					break;
 8004ff4:	e195      	b.n	8005322 <UARTstateManagement+0x6ca>
 8004ff6:	4b6a      	ldr	r3, [pc, #424]	; (80051a0 <UARTstateManagement+0x548>)
 8004ff8:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8004ffa:	4b68      	ldr	r3, [pc, #416]	; (800519c <UARTstateManagement+0x544>)
 8004ffc:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 8004ffe:	4a69      	ldr	r2, [pc, #420]	; (80051a4 <UARTstateManagement+0x54c>)
 8005000:	4b64      	ldr	r3, [pc, #400]	; (8005194 <UARTstateManagement+0x53c>)
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 153; // start-mode
 8005006:	4b65      	ldr	r3, [pc, #404]	; (800519c <UARTstateManagement+0x544>)
 8005008:	2299      	movs	r2, #153	; 0x99
 800500a:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = Robot.CurrentStation; // set currentStation
 800500c:	4b5f      	ldr	r3, [pc, #380]	; (800518c <UARTstateManagement+0x534>)
 800500e:	899b      	ldrh	r3, [r3, #12]
 8005010:	b2da      	uxtb	r2, r3
 8005012:	4b62      	ldr	r3, [pc, #392]	; (800519c <UARTstateManagement+0x544>)
 8005014:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8005016:	4b61      	ldr	r3, [pc, #388]	; (800519c <UARTstateManagement+0x544>)
 8005018:	791a      	ldrb	r2, [r3, #4]
 800501a:	4b60      	ldr	r3, [pc, #384]	; (800519c <UARTstateManagement+0x544>)
 800501c:	795b      	ldrb	r3, [r3, #5]
 800501e:	4413      	add	r3, r2
 8005020:	b2da      	uxtb	r2, r3
 8005022:	4b5e      	ldr	r3, [pc, #376]	; (800519c <UARTstateManagement+0x544>)
 8005024:	799b      	ldrb	r3, [r3, #6]
 8005026:	4413      	add	r3, r2
 8005028:	b2db      	uxtb	r3, r3
 800502a:	43db      	mvns	r3, r3
 800502c:	b2da      	uxtb	r2, r3
 800502e:	4b5b      	ldr	r3, [pc, #364]	; (800519c <UARTstateManagement+0x544>)
 8005030:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 8005032:	2208      	movs	r2, #8
 8005034:	4959      	ldr	r1, [pc, #356]	; (800519c <UARTstateManagement+0x544>)
 8005036:	4858      	ldr	r0, [pc, #352]	; (8005198 <UARTstateManagement+0x540>)
 8005038:	f005 fef4 	bl	800ae24 <HAL_UART_Transmit_DMA>
					break;
 800503c:	e171      	b.n	8005322 <UARTstateManagement+0x6ca>
					modeNo = 10;
 800503e:	4b50      	ldr	r3, [pc, #320]	; (8005180 <UARTstateManagement+0x528>)
 8005040:	220a      	movs	r2, #10
 8005042:	701a      	strb	r2, [r3, #0]
					posData = (uint16_t)(((((Robot.Position)*10000.0)*M_PI)/180.0));
 8005044:	4b51      	ldr	r3, [pc, #324]	; (800518c <UARTstateManagement+0x534>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f7fb fa29 	bl	80004a0 <__aeabi_f2d>
 800504e:	a348      	add	r3, pc, #288	; (adr r3, 8005170 <UARTstateManagement+0x518>)
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	f7fb fa7c 	bl	8000550 <__aeabi_dmul>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4610      	mov	r0, r2
 800505e:	4619      	mov	r1, r3
 8005060:	a345      	add	r3, pc, #276	; (adr r3, 8005178 <UARTstateManagement+0x520>)
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	f7fb fa73 	bl	8000550 <__aeabi_dmul>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	4610      	mov	r0, r2
 8005070:	4619      	mov	r1, r3
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	4b4c      	ldr	r3, [pc, #304]	; (80051a8 <UARTstateManagement+0x550>)
 8005078:	f7fb fb94 	bl	80007a4 <__aeabi_ddiv>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4610      	mov	r0, r2
 8005082:	4619      	mov	r1, r3
 8005084:	f7fb fc76 	bl	8000974 <__aeabi_d2uiz>
 8005088:	4603      	mov	r3, r0
 800508a:	b29a      	uxth	r2, r3
 800508c:	4b47      	ldr	r3, [pc, #284]	; (80051ac <UARTstateManagement+0x554>)
 800508e:	801a      	strh	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8005090:	4b3c      	ldr	r3, [pc, #240]	; (8005184 <UARTstateManagement+0x52c>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d004      	beq.n	80050a2 <UARTstateManagement+0x44a>
 8005098:	4b3c      	ldr	r3, [pc, #240]	; (800518c <UARTstateManagement+0x534>)
 800509a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d126      	bne.n	80050f0 <UARTstateManagement+0x498>
 80050a2:	4b3c      	ldr	r3, [pc, #240]	; (8005194 <UARTstateManagement+0x53c>)
 80050a4:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 80050a6:	4b3d      	ldr	r3, [pc, #244]	; (800519c <UARTstateManagement+0x544>)
 80050a8:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 154; // start-mode
 80050aa:	4b3c      	ldr	r3, [pc, #240]	; (800519c <UARTstateManagement+0x544>)
 80050ac:	229a      	movs	r2, #154	; 0x9a
 80050ae:	709a      	strb	r2, [r3, #2]
						TxBuf[3] = (posData) >> 8 ; // set high byte posData
 80050b0:	4b3e      	ldr	r3, [pc, #248]	; (80051ac <UARTstateManagement+0x554>)
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	4b38      	ldr	r3, [pc, #224]	; (800519c <UARTstateManagement+0x544>)
 80050bc:	70da      	strb	r2, [r3, #3]
						TxBuf[4] = (posData) & 0xff; // set low byte posData
 80050be:	4b3b      	ldr	r3, [pc, #236]	; (80051ac <UARTstateManagement+0x554>)
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	4b35      	ldr	r3, [pc, #212]	; (800519c <UARTstateManagement+0x544>)
 80050c6:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 80050c8:	4b34      	ldr	r3, [pc, #208]	; (800519c <UARTstateManagement+0x544>)
 80050ca:	789a      	ldrb	r2, [r3, #2]
 80050cc:	4b33      	ldr	r3, [pc, #204]	; (800519c <UARTstateManagement+0x544>)
 80050ce:	78db      	ldrb	r3, [r3, #3]
 80050d0:	4413      	add	r3, r2
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	4b31      	ldr	r3, [pc, #196]	; (800519c <UARTstateManagement+0x544>)
 80050d6:	791b      	ldrb	r3, [r3, #4]
 80050d8:	4413      	add	r3, r2
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	43db      	mvns	r3, r3
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	4b2e      	ldr	r3, [pc, #184]	; (800519c <UARTstateManagement+0x544>)
 80050e2:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 80050e4:	2206      	movs	r2, #6
 80050e6:	492d      	ldr	r1, [pc, #180]	; (800519c <UARTstateManagement+0x544>)
 80050e8:	482b      	ldr	r0, [pc, #172]	; (8005198 <UARTstateManagement+0x540>)
 80050ea:	f005 fe9b 	bl	800ae24 <HAL_UART_Transmit_DMA>
					break;
 80050ee:	e118      	b.n	8005322 <UARTstateManagement+0x6ca>
 80050f0:	4b2b      	ldr	r3, [pc, #172]	; (80051a0 <UARTstateManagement+0x548>)
 80050f2:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 80050f4:	4b29      	ldr	r3, [pc, #164]	; (800519c <UARTstateManagement+0x544>)
 80050f6:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 80050f8:	4a2a      	ldr	r2, [pc, #168]	; (80051a4 <UARTstateManagement+0x54c>)
 80050fa:	4b26      	ldr	r3, [pc, #152]	; (8005194 <UARTstateManagement+0x53c>)
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 154; // start-mode
 8005100:	4b26      	ldr	r3, [pc, #152]	; (800519c <UARTstateManagement+0x544>)
 8005102:	229a      	movs	r2, #154	; 0x9a
 8005104:	711a      	strb	r2, [r3, #4]
						if(homingFlag == 1 && Robot.Position <= 0.5){
 8005106:	4b2a      	ldr	r3, [pc, #168]	; (80051b0 <UARTstateManagement+0x558>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d110      	bne.n	8005130 <UARTstateManagement+0x4d8>
 800510e:	4b1f      	ldr	r3, [pc, #124]	; (800518c <UARTstateManagement+0x534>)
 8005110:	edd3 7a00 	vldr	s15, [r3]
 8005114:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800511c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005120:	d806      	bhi.n	8005130 <UARTstateManagement+0x4d8>
							TxBuf[5] = 0; // set high byte posData
 8005122:	4b1e      	ldr	r3, [pc, #120]	; (800519c <UARTstateManagement+0x544>)
 8005124:	2200      	movs	r2, #0
 8005126:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = 0; // set low byte posData
 8005128:	4b1c      	ldr	r3, [pc, #112]	; (800519c <UARTstateManagement+0x544>)
 800512a:	2200      	movs	r2, #0
 800512c:	719a      	strb	r2, [r3, #6]
 800512e:	e00b      	b.n	8005148 <UARTstateManagement+0x4f0>
							TxBuf[5] = (posData) >> 8 ; // set high byte posData
 8005130:	4b1e      	ldr	r3, [pc, #120]	; (80051ac <UARTstateManagement+0x554>)
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	0a1b      	lsrs	r3, r3, #8
 8005136:	b29b      	uxth	r3, r3
 8005138:	b2da      	uxtb	r2, r3
 800513a:	4b18      	ldr	r3, [pc, #96]	; (800519c <UARTstateManagement+0x544>)
 800513c:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = (posData) & 0xff; // set low byte posData
 800513e:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <UARTstateManagement+0x554>)
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	b2da      	uxtb	r2, r3
 8005144:	4b15      	ldr	r3, [pc, #84]	; (800519c <UARTstateManagement+0x544>)
 8005146:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8005148:	4b14      	ldr	r3, [pc, #80]	; (800519c <UARTstateManagement+0x544>)
 800514a:	791a      	ldrb	r2, [r3, #4]
 800514c:	4b13      	ldr	r3, [pc, #76]	; (800519c <UARTstateManagement+0x544>)
 800514e:	795b      	ldrb	r3, [r3, #5]
 8005150:	4413      	add	r3, r2
 8005152:	b2da      	uxtb	r2, r3
 8005154:	4b11      	ldr	r3, [pc, #68]	; (800519c <UARTstateManagement+0x544>)
 8005156:	799b      	ldrb	r3, [r3, #6]
 8005158:	4413      	add	r3, r2
 800515a:	b2db      	uxtb	r3, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	b2da      	uxtb	r2, r3
 8005160:	4b0e      	ldr	r3, [pc, #56]	; (800519c <UARTstateManagement+0x544>)
 8005162:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 8005164:	2208      	movs	r2, #8
 8005166:	490d      	ldr	r1, [pc, #52]	; (800519c <UARTstateManagement+0x544>)
 8005168:	480b      	ldr	r0, [pc, #44]	; (8005198 <UARTstateManagement+0x540>)
 800516a:	f005 fe5b 	bl	800ae24 <HAL_UART_Transmit_DMA>
					break;
 800516e:	e0d8      	b.n	8005322 <UARTstateManagement+0x6ca>
 8005170:	00000000 	.word	0x00000000
 8005174:	40c38800 	.word	0x40c38800
 8005178:	54442d18 	.word	0x54442d18
 800517c:	400921fb 	.word	0x400921fb
 8005180:	20000774 	.word	0x20000774
 8005184:	20000770 	.word	0x20000770
 8005188:	20000771 	.word	0x20000771
 800518c:	200006dc 	.word	0x200006dc
 8005190:	2000076c 	.word	0x2000076c
 8005194:	2000002c 	.word	0x2000002c
 8005198:	200005d8 	.word	0x200005d8
 800519c:	20000740 	.word	0x20000740
 80051a0:	20000030 	.word	0x20000030
 80051a4:	20000742 	.word	0x20000742
 80051a8:	40668000 	.word	0x40668000
 80051ac:	20000750 	.word	0x20000750
 80051b0:	2000076f 	.word	0x2000076f
					modeNo = 11;
 80051b4:	4b60      	ldr	r3, [pc, #384]	; (8005338 <UARTstateManagement+0x6e0>)
 80051b6:	220b      	movs	r2, #11
 80051b8:	701a      	strb	r2, [r3, #0]
					veloData = (((AbsVal(Robot.Velocity)/6.0)*255.0)/10.0);
 80051ba:	4b60      	ldr	r3, [pc, #384]	; (800533c <UARTstateManagement+0x6e4>)
 80051bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80051c0:	eeb0 0a67 	vmov.f32	s0, s15
 80051c4:	f7fc fc08 	bl	80019d8 <AbsVal>
 80051c8:	ee10 3a10 	vmov	r3, s0
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fb f967 	bl	80004a0 <__aeabi_f2d>
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	4b5a      	ldr	r3, [pc, #360]	; (8005340 <UARTstateManagement+0x6e8>)
 80051d8:	f7fb fae4 	bl	80007a4 <__aeabi_ddiv>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4610      	mov	r0, r2
 80051e2:	4619      	mov	r1, r3
 80051e4:	a352      	add	r3, pc, #328	; (adr r3, 8005330 <UARTstateManagement+0x6d8>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	f7fb f9b1 	bl	8000550 <__aeabi_dmul>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4610      	mov	r0, r2
 80051f4:	4619      	mov	r1, r3
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	4b52      	ldr	r3, [pc, #328]	; (8005344 <UARTstateManagement+0x6ec>)
 80051fc:	f7fb fad2 	bl	80007a4 <__aeabi_ddiv>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
 8005208:	f7fb fbb4 	bl	8000974 <__aeabi_d2uiz>
 800520c:	4603      	mov	r3, r0
 800520e:	b2da      	uxtb	r2, r3
 8005210:	4b4d      	ldr	r3, [pc, #308]	; (8005348 <UARTstateManagement+0x6f0>)
 8005212:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8005214:	4b4d      	ldr	r3, [pc, #308]	; (800534c <UARTstateManagement+0x6f4>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d004      	beq.n	8005226 <UARTstateManagement+0x5ce>
 800521c:	4b47      	ldr	r3, [pc, #284]	; (800533c <UARTstateManagement+0x6e4>)
 800521e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005222:	2b01      	cmp	r3, #1
 8005224:	d11e      	bne.n	8005264 <UARTstateManagement+0x60c>
 8005226:	4b4a      	ldr	r3, [pc, #296]	; (8005350 <UARTstateManagement+0x6f8>)
 8005228:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 800522a:	4b4a      	ldr	r3, [pc, #296]	; (8005354 <UARTstateManagement+0x6fc>)
 800522c:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 155;
 800522e:	4b49      	ldr	r3, [pc, #292]	; (8005354 <UARTstateManagement+0x6fc>)
 8005230:	229b      	movs	r2, #155	; 0x9b
 8005232:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = veloData; // set low byte posData
 8005234:	4b44      	ldr	r3, [pc, #272]	; (8005348 <UARTstateManagement+0x6f0>)
 8005236:	781a      	ldrb	r2, [r3, #0]
 8005238:	4b46      	ldr	r3, [pc, #280]	; (8005354 <UARTstateManagement+0x6fc>)
 800523a:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 800523c:	4b45      	ldr	r3, [pc, #276]	; (8005354 <UARTstateManagement+0x6fc>)
 800523e:	789a      	ldrb	r2, [r3, #2]
 8005240:	4b44      	ldr	r3, [pc, #272]	; (8005354 <UARTstateManagement+0x6fc>)
 8005242:	78db      	ldrb	r3, [r3, #3]
 8005244:	4413      	add	r3, r2
 8005246:	b2da      	uxtb	r2, r3
 8005248:	4b42      	ldr	r3, [pc, #264]	; (8005354 <UARTstateManagement+0x6fc>)
 800524a:	791b      	ldrb	r3, [r3, #4]
 800524c:	4413      	add	r3, r2
 800524e:	b2db      	uxtb	r3, r3
 8005250:	43db      	mvns	r3, r3
 8005252:	b2da      	uxtb	r2, r3
 8005254:	4b3f      	ldr	r3, [pc, #252]	; (8005354 <UARTstateManagement+0x6fc>)
 8005256:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8005258:	2206      	movs	r2, #6
 800525a:	493e      	ldr	r1, [pc, #248]	; (8005354 <UARTstateManagement+0x6fc>)
 800525c:	483e      	ldr	r0, [pc, #248]	; (8005358 <UARTstateManagement+0x700>)
 800525e:	f005 fde1 	bl	800ae24 <HAL_UART_Transmit_DMA>
					break;
 8005262:	e05e      	b.n	8005322 <UARTstateManagement+0x6ca>
 8005264:	4b3d      	ldr	r3, [pc, #244]	; (800535c <UARTstateManagement+0x704>)
 8005266:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8005268:	4b3a      	ldr	r3, [pc, #232]	; (8005354 <UARTstateManagement+0x6fc>)
 800526a:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 800526c:	4a3c      	ldr	r2, [pc, #240]	; (8005360 <UARTstateManagement+0x708>)
 800526e:	4b38      	ldr	r3, [pc, #224]	; (8005350 <UARTstateManagement+0x6f8>)
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 155; // start-mode
 8005274:	4b37      	ldr	r3, [pc, #220]	; (8005354 <UARTstateManagement+0x6fc>)
 8005276:	229b      	movs	r2, #155	; 0x9b
 8005278:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = veloData; // set low byte posData
 800527a:	4b33      	ldr	r3, [pc, #204]	; (8005348 <UARTstateManagement+0x6f0>)
 800527c:	781a      	ldrb	r2, [r3, #0]
 800527e:	4b35      	ldr	r3, [pc, #212]	; (8005354 <UARTstateManagement+0x6fc>)
 8005280:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8005282:	4b34      	ldr	r3, [pc, #208]	; (8005354 <UARTstateManagement+0x6fc>)
 8005284:	791a      	ldrb	r2, [r3, #4]
 8005286:	4b33      	ldr	r3, [pc, #204]	; (8005354 <UARTstateManagement+0x6fc>)
 8005288:	795b      	ldrb	r3, [r3, #5]
 800528a:	4413      	add	r3, r2
 800528c:	b2da      	uxtb	r2, r3
 800528e:	4b31      	ldr	r3, [pc, #196]	; (8005354 <UARTstateManagement+0x6fc>)
 8005290:	799b      	ldrb	r3, [r3, #6]
 8005292:	4413      	add	r3, r2
 8005294:	b2db      	uxtb	r3, r3
 8005296:	43db      	mvns	r3, r3
 8005298:	b2da      	uxtb	r2, r3
 800529a:	4b2e      	ldr	r3, [pc, #184]	; (8005354 <UARTstateManagement+0x6fc>)
 800529c:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 800529e:	2208      	movs	r2, #8
 80052a0:	492c      	ldr	r1, [pc, #176]	; (8005354 <UARTstateManagement+0x6fc>)
 80052a2:	482d      	ldr	r0, [pc, #180]	; (8005358 <UARTstateManagement+0x700>)
 80052a4:	f005 fdbe 	bl	800ae24 <HAL_UART_Transmit_DMA>
					break;
 80052a8:	e03b      	b.n	8005322 <UARTstateManagement+0x6ca>
					modeNo = 12;
 80052aa:	4b23      	ldr	r3, [pc, #140]	; (8005338 <UARTstateManagement+0x6e0>)
 80052ac:	220c      	movs	r2, #12
 80052ae:	701a      	strb	r2, [r3, #0]
					RobotState = EndEff;
 80052b0:	4b2c      	ldr	r3, [pc, #176]	; (8005364 <UARTstateManagement+0x70c>)
 80052b2:	2203      	movs	r2, #3
 80052b4:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 80052b6:	4b2c      	ldr	r3, [pc, #176]	; (8005368 <UARTstateManagement+0x710>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorReadFlag =  1;
 80052bc:	4b2b      	ldr	r3, [pc, #172]	; (800536c <UARTstateManagement+0x714>)
 80052be:	2201      	movs	r2, #1
 80052c0:	701a      	strb	r2, [r3, #0]
					EndEffState = CheckBeforRun;
 80052c2:	4b2b      	ldr	r3, [pc, #172]	; (8005370 <UARTstateManagement+0x718>)
 80052c4:	2201      	movs	r2, #1
 80052c6:	701a      	strb	r2, [r3, #0]
					endEffFlag = 1;
 80052c8:	4b2a      	ldr	r3, [pc, #168]	; (8005374 <UARTstateManagement+0x71c>)
 80052ca:	2201      	movs	r2, #1
 80052cc:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80052ce:	2202      	movs	r2, #2
 80052d0:	491f      	ldr	r1, [pc, #124]	; (8005350 <UARTstateManagement+0x6f8>)
 80052d2:	4821      	ldr	r0, [pc, #132]	; (8005358 <UARTstateManagement+0x700>)
 80052d4:	f005 fda6 	bl	800ae24 <HAL_UART_Transmit_DMA>
					break;
 80052d8:	e023      	b.n	8005322 <UARTstateManagement+0x6ca>
					modeNo = 13;
 80052da:	4b17      	ldr	r3, [pc, #92]	; (8005338 <UARTstateManagement+0x6e0>)
 80052dc:	220d      	movs	r2, #13
 80052de:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 80052e0:	4b24      	ldr	r3, [pc, #144]	; (8005374 <UARTstateManagement+0x71c>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80052e6:	2202      	movs	r2, #2
 80052e8:	4919      	ldr	r1, [pc, #100]	; (8005350 <UARTstateManagement+0x6f8>)
 80052ea:	481b      	ldr	r0, [pc, #108]	; (8005358 <UARTstateManagement+0x700>)
 80052ec:	f005 fd9a 	bl	800ae24 <HAL_UART_Transmit_DMA>
					break;
 80052f0:	e017      	b.n	8005322 <UARTstateManagement+0x6ca>
					modeNo = 14;
 80052f2:	4b11      	ldr	r3, [pc, #68]	; (8005338 <UARTstateManagement+0x6e0>)
 80052f4:	220e      	movs	r2, #14
 80052f6:	701a      	strb	r2, [r3, #0]
					RobotRunToPositon(Robot.HomePositon,51.0);
 80052f8:	4b10      	ldr	r3, [pc, #64]	; (800533c <UARTstateManagement+0x6e4>)
 80052fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80052fe:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8005378 <UARTstateManagement+0x720>
 8005302:	eeb0 0a67 	vmov.f32	s0, s15
 8005306:	f000 fbe5 	bl	8005ad4 <RobotRunToPositon>
					homingFlag = 1;
 800530a:	4b1c      	ldr	r3, [pc, #112]	; (800537c <UARTstateManagement+0x724>)
 800530c:	2201      	movs	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8005310:	2202      	movs	r2, #2
 8005312:	490f      	ldr	r1, [pc, #60]	; (8005350 <UARTstateManagement+0x6f8>)
 8005314:	4810      	ldr	r0, [pc, #64]	; (8005358 <UARTstateManagement+0x700>)
 8005316:	f005 fd85 	bl	800ae24 <HAL_UART_Transmit_DMA>
					break;
 800531a:	e002      	b.n	8005322 <UARTstateManagement+0x6ca>
			break;
 800531c:	bf00      	nop
 800531e:	e000      	b.n	8005322 <UARTstateManagement+0x6ca>
			break;
 8005320:	bf00      	nop
}
 8005322:	bf00      	nop
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	f3af 8000 	nop.w
 8005330:	00000000 	.word	0x00000000
 8005334:	406fe000 	.word	0x406fe000
 8005338:	20000774 	.word	0x20000774
 800533c:	200006dc 	.word	0x200006dc
 8005340:	40180000 	.word	0x40180000
 8005344:	40240000 	.word	0x40240000
 8005348:	20000752 	.word	0x20000752
 800534c:	20000770 	.word	0x20000770
 8005350:	2000002c 	.word	0x2000002c
 8005354:	20000740 	.word	0x20000740
 8005358:	200005d8 	.word	0x200005d8
 800535c:	20000030 	.word	0x20000030
 8005360:	20000742 	.word	0x20000742
 8005364:	20000715 	.word	0x20000715
 8005368:	20000b01 	.word	0x20000b01
 800536c:	20000b00 	.word	0x20000b00
 8005370:	20000000 	.word	0x20000000
 8005374:	2000076e 	.word	0x2000076e
 8005378:	424c0000 	.word	0x424c0000
 800537c:	2000076f 	.word	0x2000076f

08005380 <RobotstateManagement>:

void RobotstateManagement()
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
	switch (RobotState)
 8005384:	4b91      	ldr	r3, [pc, #580]	; (80055cc <RobotstateManagement+0x24c>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b04      	cmp	r3, #4
 800538a:	f200 811d 	bhi.w	80055c8 <RobotstateManagement+0x248>
 800538e:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <RobotstateManagement+0x14>)
 8005390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005394:	080053a9 	.word	0x080053a9
 8005398:	080053c5 	.word	0x080053c5
 800539c:	0800541d 	.word	0x0800541d
 80053a0:	080055bf 	.word	0x080055bf
 80053a4:	080055a9 	.word	0x080055a9
	{
		case init:
			// Start Finding home Position
			Robot.flagSethome = 1;
 80053a8:	4b89      	ldr	r3, [pc, #548]	; (80055d0 <RobotstateManagement+0x250>)
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			// Turn 360 Deg
			RobotRunToPositon(360.0,51.0);
 80053b0:	eddf 0a88 	vldr	s1, [pc, #544]	; 80055d4 <RobotstateManagement+0x254>
 80053b4:	ed9f 0a88 	vldr	s0, [pc, #544]	; 80055d8 <RobotstateManagement+0x258>
 80053b8:	f000 fb8c 	bl	8005ad4 <RobotRunToPositon>
			// Goto next State
			RobotState = FindHome;
 80053bc:	4b83      	ldr	r3, [pc, #524]	; (80055cc <RobotstateManagement+0x24c>)
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
			break;
 80053c2:	e101      	b.n	80055c8 <RobotstateManagement+0x248>
		case FindHome:
			if(Robot.RunningFlag == 0)
 80053c4:	4b82      	ldr	r3, [pc, #520]	; (80055d0 <RobotstateManagement+0x250>)
 80053c6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f040 80f9 	bne.w	80055c2 <RobotstateManagement+0x242>
			{
				if(Robot.flagSethome == 2)
 80053d0:	4b7f      	ldr	r3, [pc, #508]	; (80055d0 <RobotstateManagement+0x250>)
 80053d2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d111      	bne.n	80053fe <RobotstateManagement+0x7e>
				{
					RobotRunToPositon(Robot.HomePositon,51.0);
 80053da:	4b7d      	ldr	r3, [pc, #500]	; (80055d0 <RobotstateManagement+0x250>)
 80053dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80053e0:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80055d4 <RobotstateManagement+0x254>
 80053e4:	eeb0 0a67 	vmov.f32	s0, s15
 80053e8:	f000 fb74 	bl	8005ad4 <RobotRunToPositon>
					Robot.RunningFlag = 1;
 80053ec:	4b78      	ldr	r3, [pc, #480]	; (80055d0 <RobotstateManagement+0x250>)
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
					Robot.flagSethome = 3;
 80053f4:	4b76      	ldr	r3, [pc, #472]	; (80055d0 <RobotstateManagement+0x250>)
 80053f6:	2203      	movs	r2, #3
 80053f8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
					RobotResetAll();
					UARTState = MCUConnect;
					RobotState = NormalOperation;
				}
			}
			break;
 80053fc:	e0e1      	b.n	80055c2 <RobotstateManagement+0x242>
				else if(Robot.flagSethome == 3)
 80053fe:	4b74      	ldr	r3, [pc, #464]	; (80055d0 <RobotstateManagement+0x250>)
 8005400:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005404:	2b03      	cmp	r3, #3
 8005406:	f040 80dc 	bne.w	80055c2 <RobotstateManagement+0x242>
					RobotResetAll();
 800540a:	f000 fb9d 	bl	8005b48 <RobotResetAll>
					UARTState = MCUConnect;
 800540e:	4b73      	ldr	r3, [pc, #460]	; (80055dc <RobotstateManagement+0x25c>)
 8005410:	2202      	movs	r2, #2
 8005412:	701a      	strb	r2, [r3, #0]
					RobotState = NormalOperation;
 8005414:	4b6d      	ldr	r3, [pc, #436]	; (80055cc <RobotstateManagement+0x24c>)
 8005416:	2202      	movs	r2, #2
 8005418:	701a      	strb	r2, [r3, #0]
			break;
 800541a:	e0d2      	b.n	80055c2 <RobotstateManagement+0x242>
		case NormalOperation:
			if(notContinueFlag == 1){
 800541c:	4b70      	ldr	r3, [pc, #448]	; (80055e0 <RobotstateManagement+0x260>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d10e      	bne.n	8005442 <RobotstateManagement+0xc2>
				Robot.MotorIsOn = 1;
 8005424:	4b6a      	ldr	r3, [pc, #424]	; (80055d0 <RobotstateManagement+0x250>)
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				Robot.RunningFlag = 1;
 800542c:	4b68      	ldr	r3, [pc, #416]	; (80055d0 <RobotstateManagement+0x250>)
 800542e:	2201      	movs	r2, #1
 8005430:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				Robot.flagStartTime = 1;
 8005434:	4b66      	ldr	r3, [pc, #408]	; (80055d0 <RobotstateManagement+0x250>)
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				notContinueFlag = 0;
 800543c:	4b68      	ldr	r3, [pc, #416]	; (80055e0 <RobotstateManagement+0x260>)
 800543e:	2200      	movs	r2, #0
 8005440:	701a      	strb	r2, [r3, #0]
			}
			if(doingTaskFlag == 1 && Robot.RunningFlag == 1 && endEffFlag == 0){
 8005442:	4b68      	ldr	r3, [pc, #416]	; (80055e4 <RobotstateManagement+0x264>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d159      	bne.n	80054fe <RobotstateManagement+0x17e>
 800544a:	4b61      	ldr	r3, [pc, #388]	; (80055d0 <RobotstateManagement+0x250>)
 800544c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005450:	2b01      	cmp	r3, #1
 8005452:	d154      	bne.n	80054fe <RobotstateManagement+0x17e>
 8005454:	4b64      	ldr	r3, [pc, #400]	; (80055e8 <RobotstateManagement+0x268>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d150      	bne.n	80054fe <RobotstateManagement+0x17e>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800545c:	2201      	movs	r2, #1
 800545e:	2108      	movs	r1, #8
 8005460:	4862      	ldr	r0, [pc, #392]	; (80055ec <RobotstateManagement+0x26c>)
 8005462:	f001 fecb 	bl	80071fc <HAL_GPIO_WritePin>
				if(goalFlag == 1 && goingToGoalFlag == 0){
 8005466:	4b62      	ldr	r3, [pc, #392]	; (80055f0 <RobotstateManagement+0x270>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d11d      	bne.n	80054aa <RobotstateManagement+0x12a>
 800546e:	4b61      	ldr	r3, [pc, #388]	; (80055f4 <RobotstateManagement+0x274>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d119      	bne.n	80054aa <RobotstateManagement+0x12a>
					goingToGoalFlag = 1;
 8005476:	4b5f      	ldr	r3, [pc, #380]	; (80055f4 <RobotstateManagement+0x274>)
 8005478:	2201      	movs	r2, #1
 800547a:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = uartPos;
 800547c:	4b5e      	ldr	r3, [pc, #376]	; (80055f8 <RobotstateManagement+0x278>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a53      	ldr	r2, [pc, #332]	; (80055d0 <RobotstateManagement+0x250>)
 8005482:	6113      	str	r3, [r2, #16]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 8005484:	4b52      	ldr	r3, [pc, #328]	; (80055d0 <RobotstateManagement+0x250>)
 8005486:	edd3 7a00 	vldr	s15, [r3]
 800548a:	4b51      	ldr	r3, [pc, #324]	; (80055d0 <RobotstateManagement+0x250>)
 800548c:	ed93 7a04 	vldr	s14, [r3, #16]
 8005490:	4b4f      	ldr	r3, [pc, #316]	; (80055d0 <RobotstateManagement+0x250>)
 8005492:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8005496:	eeb0 1a66 	vmov.f32	s2, s13
 800549a:	eef0 0a47 	vmov.f32	s1, s14
 800549e:	eeb0 0a67 	vmov.f32	s0, s15
 80054a2:	4856      	ldr	r0, [pc, #344]	; (80055fc <RobotstateManagement+0x27c>)
 80054a4:	f7fc fabc 	bl	8001a20 <CoefficientAndTimeCalculation>
 80054a8:	e029      	b.n	80054fe <RobotstateManagement+0x17e>
				}
				else if(goalFlag == 2 && goingToGoalFlag == 0){
 80054aa:	4b51      	ldr	r3, [pc, #324]	; (80055f0 <RobotstateManagement+0x270>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d125      	bne.n	80054fe <RobotstateManagement+0x17e>
 80054b2:	4b50      	ldr	r3, [pc, #320]	; (80055f4 <RobotstateManagement+0x274>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d121      	bne.n	80054fe <RobotstateManagement+0x17e>
					goingToGoalFlag = 1;
 80054ba:	4b4e      	ldr	r3, [pc, #312]	; (80055f4 <RobotstateManagement+0x274>)
 80054bc:	2201      	movs	r2, #1
 80054be:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = goalDeg[uartGoal[goalIDX]-1];
 80054c0:	4b4f      	ldr	r3, [pc, #316]	; (8005600 <RobotstateManagement+0x280>)
 80054c2:	f993 3000 	ldrsb.w	r3, [r3]
 80054c6:	461a      	mov	r2, r3
 80054c8:	4b4e      	ldr	r3, [pc, #312]	; (8005604 <RobotstateManagement+0x284>)
 80054ca:	5c9b      	ldrb	r3, [r3, r2]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	4a4e      	ldr	r2, [pc, #312]	; (8005608 <RobotstateManagement+0x288>)
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a3e      	ldr	r2, [pc, #248]	; (80055d0 <RobotstateManagement+0x250>)
 80054d8:	6113      	str	r3, [r2, #16]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 80054da:	4b3d      	ldr	r3, [pc, #244]	; (80055d0 <RobotstateManagement+0x250>)
 80054dc:	edd3 7a00 	vldr	s15, [r3]
 80054e0:	4b3b      	ldr	r3, [pc, #236]	; (80055d0 <RobotstateManagement+0x250>)
 80054e2:	ed93 7a04 	vldr	s14, [r3, #16]
 80054e6:	4b3a      	ldr	r3, [pc, #232]	; (80055d0 <RobotstateManagement+0x250>)
 80054e8:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80054ec:	eeb0 1a66 	vmov.f32	s2, s13
 80054f0:	eef0 0a47 	vmov.f32	s1, s14
 80054f4:	eeb0 0a67 	vmov.f32	s0, s15
 80054f8:	4840      	ldr	r0, [pc, #256]	; (80055fc <RobotstateManagement+0x27c>)
 80054fa:	f7fc fa91 	bl	8001a20 <CoefficientAndTimeCalculation>
				}
			}

			if(endEffFlag == 0 && goingToGoalFlag == 1 && doingTaskFlag == 1){
 80054fe:	4b3a      	ldr	r3, [pc, #232]	; (80055e8 <RobotstateManagement+0x268>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d132      	bne.n	800556c <RobotstateManagement+0x1ec>
 8005506:	4b3b      	ldr	r3, [pc, #236]	; (80055f4 <RobotstateManagement+0x274>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d12e      	bne.n	800556c <RobotstateManagement+0x1ec>
 800550e:	4b35      	ldr	r3, [pc, #212]	; (80055e4 <RobotstateManagement+0x264>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d12a      	bne.n	800556c <RobotstateManagement+0x1ec>
				if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0){
 8005516:	4b2e      	ldr	r3, [pc, #184]	; (80055d0 <RobotstateManagement+0x250>)
 8005518:	ed93 7a04 	vldr	s14, [r3, #16]
 800551c:	4b2c      	ldr	r3, [pc, #176]	; (80055d0 <RobotstateManagement+0x250>)
 800551e:	edd3 7a00 	vldr	s15, [r3]
 8005522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005526:	eeb0 0a67 	vmov.f32	s0, s15
 800552a:	f7fc fa55 	bl	80019d8 <AbsVal>
 800552e:	eef0 7a40 	vmov.f32	s15, s0
 8005532:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800553a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553e:	d515      	bpl.n	800556c <RobotstateManagement+0x1ec>
 8005540:	4b23      	ldr	r3, [pc, #140]	; (80055d0 <RobotstateManagement+0x250>)
 8005542:	edd3 7a01 	vldr	s15, [r3, #4]
 8005546:	eeb0 0a67 	vmov.f32	s0, s15
 800554a:	f7fc fa45 	bl	80019d8 <AbsVal>
 800554e:	eef0 7a40 	vmov.f32	s15, s0
 8005552:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800555a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555e:	d505      	bpl.n	800556c <RobotstateManagement+0x1ec>
					endEffFlag = 1;
 8005560:	4b21      	ldr	r3, [pc, #132]	; (80055e8 <RobotstateManagement+0x268>)
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
					goingToGoalFlag = 0;
 8005566:	4b23      	ldr	r3, [pc, #140]	; (80055f4 <RobotstateManagement+0x274>)
 8005568:	2200      	movs	r2, #0
 800556a:	701a      	strb	r2, [r3, #0]
				}
			}

			if(goingToGoalFlag == 0 && doingTaskFlag == 1 && Robot.RunningFlag == 0 && endEffFlag == 1){
 800556c:	4b21      	ldr	r3, [pc, #132]	; (80055f4 <RobotstateManagement+0x274>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d128      	bne.n	80055c6 <RobotstateManagement+0x246>
 8005574:	4b1b      	ldr	r3, [pc, #108]	; (80055e4 <RobotstateManagement+0x264>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d124      	bne.n	80055c6 <RobotstateManagement+0x246>
 800557c:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <RobotstateManagement+0x250>)
 800557e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005582:	2b00      	cmp	r3, #0
 8005584:	d11f      	bne.n	80055c6 <RobotstateManagement+0x246>
 8005586:	4b18      	ldr	r3, [pc, #96]	; (80055e8 <RobotstateManagement+0x268>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d11b      	bne.n	80055c6 <RobotstateManagement+0x246>
				RobotState = EndEff;
 800558e:	4b0f      	ldr	r3, [pc, #60]	; (80055cc <RobotstateManagement+0x24c>)
 8005590:	2203      	movs	r2, #3
 8005592:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 8005594:	4b1d      	ldr	r3, [pc, #116]	; (800560c <RobotstateManagement+0x28c>)
 8005596:	2201      	movs	r2, #1
 8005598:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 800559a:	4b1d      	ldr	r3, [pc, #116]	; (8005610 <RobotstateManagement+0x290>)
 800559c:	2201      	movs	r2, #1
 800559e:	701a      	strb	r2, [r3, #0]
				EndEffState = CheckBeforRun;
 80055a0:	4b1c      	ldr	r3, [pc, #112]	; (8005614 <RobotstateManagement+0x294>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80055a6:	e00e      	b.n	80055c6 <RobotstateManagement+0x246>
		case EndEff:
			break;
		case Emergency:
			Robot.MotorIsOn = 0;
 80055a8:	4b09      	ldr	r3, [pc, #36]	; (80055d0 <RobotstateManagement+0x250>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			PIDAController_Init(&PidVelo);
 80055b0:	4819      	ldr	r0, [pc, #100]	; (8005618 <RobotstateManagement+0x298>)
 80055b2:	f7fb fee7 	bl	8001384 <PIDAController_Init>
			PIDAController_Init(&PidPos);
 80055b6:	4819      	ldr	r0, [pc, #100]	; (800561c <RobotstateManagement+0x29c>)
 80055b8:	f7fb fee4 	bl	8001384 <PIDAController_Init>
			// Luv u pls pass
			break;
 80055bc:	e004      	b.n	80055c8 <RobotstateManagement+0x248>
			break;
 80055be:	bf00      	nop
 80055c0:	e002      	b.n	80055c8 <RobotstateManagement+0x248>
			break;
 80055c2:	bf00      	nop
 80055c4:	e000      	b.n	80055c8 <RobotstateManagement+0x248>
			break;
 80055c6:	bf00      	nop
	}
}
 80055c8:	bf00      	nop
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20000715 	.word	0x20000715
 80055d0:	200006dc 	.word	0x200006dc
 80055d4:	424c0000 	.word	0x424c0000
 80055d8:	43b40000 	.word	0x43b40000
 80055dc:	20000714 	.word	0x20000714
 80055e0:	20000773 	.word	0x20000773
 80055e4:	20000770 	.word	0x20000770
 80055e8:	2000076e 	.word	0x2000076e
 80055ec:	40020400 	.word	0x40020400
 80055f0:	2000076d 	.word	0x2000076d
 80055f4:	20000771 	.word	0x20000771
 80055f8:	20000758 	.word	0x20000758
 80055fc:	2000086c 	.word	0x2000086c
 8005600:	2000076c 	.word	0x2000076c
 8005604:	2000075c 	.word	0x2000075c
 8005608:	20000004 	.word	0x20000004
 800560c:	20000b01 	.word	0x20000b01
 8005610:	20000b00 	.word	0x20000b00
 8005614:	20000000 	.word	0x20000000
 8005618:	20000808 	.word	0x20000808
 800561c:	20000838 	.word	0x20000838

08005620 <EndEffstateManagement>:

void EndEffstateManagement()
{
 8005620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005624:	b086      	sub	sp, #24
 8005626:	af00      	add	r7, sp, #0
	switch (EndEffState)
 8005628:	4ba6      	ldr	r3, [pc, #664]	; (80058c4 <EndEffstateManagement+0x2a4>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b04      	cmp	r3, #4
 800562e:	f200 8144 	bhi.w	80058ba <EndEffstateManagement+0x29a>
 8005632:	a201      	add	r2, pc, #4	; (adr r2, 8005638 <EndEffstateManagement+0x18>)
 8005634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005638:	0800564d 	.word	0x0800564d
 800563c:	08005655 	.word	0x08005655
 8005640:	0800570f 	.word	0x0800570f
 8005644:	0800578d 	.word	0x0800578d
 8005648:	080057b5 	.word	0x080057b5
	{
		case idle:
			// Do not thing wait for command
			EndEffStatus = AwaitCommand;
 800564c:	4b9e      	ldr	r3, [pc, #632]	; (80058c8 <EndEffstateManagement+0x2a8>)
 800564e:	2203      	movs	r2, #3
 8005650:	701a      	strb	r2, [r3, #0]
//			I2CEndEffectorWriteFlag = 1;
			break;
 8005652:	e132      	b.n	80058ba <EndEffstateManagement+0x29a>
		case CheckBeforRun:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 8005654:	4b9d      	ldr	r3, [pc, #628]	; (80058cc <EndEffstateManagement+0x2ac>)
 8005656:	2223      	movs	r2, #35	; 0x23
 8005658:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 800565a:	489c      	ldr	r0, [pc, #624]	; (80058cc <EndEffstateManagement+0x2ac>)
 800565c:	f000 f956 	bl	800590c <I2CWriteFcn>
			check[0]++;
 8005660:	4b9b      	ldr	r3, [pc, #620]	; (80058d0 <EndEffstateManagement+0x2b0>)
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	1c51      	adds	r1, r2, #1
 8005668:	6139      	str	r1, [r7, #16]
 800566a:	f143 0300 	adc.w	r3, r3, #0
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	4b97      	ldr	r3, [pc, #604]	; (80058d0 <EndEffstateManagement+0x2b0>)
 8005672:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005676:	e9c3 1200 	strd	r1, r2, [r3]
			if(hi2c1.State == HAL_I2C_STATE_READY)
 800567a:	4b96      	ldr	r3, [pc, #600]	; (80058d4 <EndEffstateManagement+0x2b4>)
 800567c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b20      	cmp	r3, #32
 8005684:	f040 8112 	bne.w	80058ac <EndEffstateManagement+0x28c>
			{
				I2CReadFcn(I2CRxDataBuffer);
 8005688:	4893      	ldr	r0, [pc, #588]	; (80058d8 <EndEffstateManagement+0x2b8>)
 800568a:	f000 f965 	bl	8005958 <I2CReadFcn>
				check[1]++;
 800568e:	4b90      	ldr	r3, [pc, #576]	; (80058d0 <EndEffstateManagement+0x2b0>)
 8005690:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005694:	1c51      	adds	r1, r2, #1
 8005696:	60b9      	str	r1, [r7, #8]
 8005698:	f143 0300 	adc.w	r3, r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	4b8c      	ldr	r3, [pc, #560]	; (80058d0 <EndEffstateManagement+0x2b0>)
 80056a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80056a4:	e9c3 1202 	strd	r1, r2, [r3, #8]
				if(hi2c1.State == HAL_I2C_STATE_READY)
 80056a8:	4b8a      	ldr	r3, [pc, #552]	; (80058d4 <EndEffstateManagement+0x2b4>)
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	f040 80fb 	bne.w	80058ac <EndEffstateManagement+0x28c>
				{
					if(I2CRxDataBuffer[0] == 0x78)
 80056b6:	4b88      	ldr	r3, [pc, #544]	; (80058d8 <EndEffstateManagement+0x2b8>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b78      	cmp	r3, #120	; 0x78
 80056bc:	d119      	bne.n	80056f2 <EndEffstateManagement+0xd2>
					{
						check[2]++;
 80056be:	4b84      	ldr	r3, [pc, #528]	; (80058d0 <EndEffstateManagement+0x2b0>)
 80056c0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80056c4:	1c51      	adds	r1, r2, #1
 80056c6:	6039      	str	r1, [r7, #0]
 80056c8:	f143 0300 	adc.w	r3, r3, #0
 80056cc:	607b      	str	r3, [r7, #4]
 80056ce:	4b80      	ldr	r3, [pc, #512]	; (80058d0 <EndEffstateManagement+0x2b0>)
 80056d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80056d4:	e9c3 1204 	strd	r1, r2, [r3, #16]
						EndEffState = OpenLaser;
 80056d8:	4b7a      	ldr	r3, [pc, #488]	; (80058c4 <EndEffstateManagement+0x2a4>)
 80056da:	2202      	movs	r2, #2
 80056dc:	701a      	strb	r2, [r3, #0]
						openLaserWriteFlag = 1;
 80056de:	4b7f      	ldr	r3, [pc, #508]	; (80058dc <EndEffstateManagement+0x2bc>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorWriteFlag = 1;
 80056e4:	4b7e      	ldr	r3, [pc, #504]	; (80058e0 <EndEffstateManagement+0x2c0>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorReadFlag =  0;
 80056ea:	4b7e      	ldr	r3, [pc, #504]	; (80058e4 <EndEffstateManagement+0x2c4>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	701a      	strb	r2, [r3, #0]
						EndEffState = idle;
					}
				}
			}

		break;
 80056f0:	e0dc      	b.n	80058ac <EndEffstateManagement+0x28c>
						check[3]++;
 80056f2:	4b77      	ldr	r3, [pc, #476]	; (80058d0 <EndEffstateManagement+0x2b0>)
 80056f4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80056f8:	f112 0a01 	adds.w	sl, r2, #1
 80056fc:	f143 0b00 	adc.w	fp, r3, #0
 8005700:	4b73      	ldr	r3, [pc, #460]	; (80058d0 <EndEffstateManagement+0x2b0>)
 8005702:	e9c3 ab06 	strd	sl, fp, [r3, #24]
						EndEffState = idle;
 8005706:	4b6f      	ldr	r3, [pc, #444]	; (80058c4 <EndEffstateManagement+0x2a4>)
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
		break;
 800570c:	e0ce      	b.n	80058ac <EndEffstateManagement+0x28c>
		case OpenLaser:
			// Open Laser
			if(openLaserWriteFlag == 1){
 800570e:	4b73      	ldr	r3, [pc, #460]	; (80058dc <EndEffstateManagement+0x2bc>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d11d      	bne.n	8005752 <EndEffstateManagement+0x132>
				check[4]++;
 8005716:	4b6e      	ldr	r3, [pc, #440]	; (80058d0 <EndEffstateManagement+0x2b0>)
 8005718:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800571c:	1c50      	adds	r0, r2, #1
 800571e:	f143 0100 	adc.w	r1, r3, #0
 8005722:	4b6b      	ldr	r3, [pc, #428]	; (80058d0 <EndEffstateManagement+0x2b0>)
 8005724:	e9c3 0108 	strd	r0, r1, [r3, #32]
				I2CTxDataBuffer[0] = 0x45;
 8005728:	4b68      	ldr	r3, [pc, #416]	; (80058cc <EndEffstateManagement+0x2ac>)
 800572a:	2245      	movs	r2, #69	; 0x45
 800572c:	701a      	strb	r2, [r3, #0]
				I2CWriteFcn(I2CTxDataBuffer);
 800572e:	4867      	ldr	r0, [pc, #412]	; (80058cc <EndEffstateManagement+0x2ac>)
 8005730:	f000 f8ec 	bl	800590c <I2CWriteFcn>
				openLaserWriteFlag = 0;
 8005734:	4b69      	ldr	r3, [pc, #420]	; (80058dc <EndEffstateManagement+0x2bc>)
 8005736:	2200      	movs	r2, #0
 8005738:	701a      	strb	r2, [r3, #0]
				endEffLoopTime = Micros();
 800573a:	f000 fb2b 	bl	8005d94 <Micros>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4969      	ldr	r1, [pc, #420]	; (80058e8 <EndEffstateManagement+0x2c8>)
 8005744:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8005748:	2201      	movs	r2, #1
 800574a:	2110      	movs	r1, #16
 800574c:	4867      	ldr	r0, [pc, #412]	; (80058ec <EndEffstateManagement+0x2cc>)
 800574e:	f001 fd55 	bl	80071fc <HAL_GPIO_WritePin>
			}
			if(hi2c1.State == HAL_I2C_STATE_READY && Micros() - endEffLoopTime > 50000)
 8005752:	4b60      	ldr	r3, [pc, #384]	; (80058d4 <EndEffstateManagement+0x2b4>)
 8005754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b20      	cmp	r3, #32
 800575c:	f040 80a8 	bne.w	80058b0 <EndEffstateManagement+0x290>
 8005760:	f000 fb18 	bl	8005d94 <Micros>
 8005764:	4b60      	ldr	r3, [pc, #384]	; (80058e8 <EndEffstateManagement+0x2c8>)
 8005766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576a:	1a84      	subs	r4, r0, r2
 800576c:	eb61 0503 	sbc.w	r5, r1, r3
 8005770:	f24c 3351 	movw	r3, #50001	; 0xc351
 8005774:	429c      	cmp	r4, r3
 8005776:	f175 0300 	sbcs.w	r3, r5, #0
 800577a:	f0c0 8099 	bcc.w	80058b0 <EndEffstateManagement+0x290>
			{
				EndEffState = SetupReadStatus;
 800577e:	4b51      	ldr	r3, [pc, #324]	; (80058c4 <EndEffstateManagement+0x2a4>)
 8005780:	2203      	movs	r2, #3
 8005782:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 8005784:	4b56      	ldr	r3, [pc, #344]	; (80058e0 <EndEffstateManagement+0x2c0>)
 8005786:	2201      	movs	r2, #1
 8005788:	701a      	strb	r2, [r3, #0]
			}
			break;
 800578a:	e091      	b.n	80058b0 <EndEffstateManagement+0x290>
		case SetupReadStatus:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 800578c:	4b4f      	ldr	r3, [pc, #316]	; (80058cc <EndEffstateManagement+0x2ac>)
 800578e:	2223      	movs	r2, #35	; 0x23
 8005790:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 8005792:	484e      	ldr	r0, [pc, #312]	; (80058cc <EndEffstateManagement+0x2ac>)
 8005794:	f000 f8ba 	bl	800590c <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8005798:	4b4e      	ldr	r3, [pc, #312]	; (80058d4 <EndEffstateManagement+0x2b4>)
 800579a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	f040 8087 	bne.w	80058b4 <EndEffstateManagement+0x294>
			{
				EndEffState = ReadStatus;
 80057a6:	4b47      	ldr	r3, [pc, #284]	; (80058c4 <EndEffstateManagement+0x2a4>)
 80057a8:	2204      	movs	r2, #4
 80057aa:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 80057ac:	4b4d      	ldr	r3, [pc, #308]	; (80058e4 <EndEffstateManagement+0x2c4>)
 80057ae:	2201      	movs	r2, #1
 80057b0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80057b2:	e07f      	b.n	80058b4 <EndEffstateManagement+0x294>
		case ReadStatus:
			I2CReadFcn(I2CRxDataBuffer);
 80057b4:	4848      	ldr	r0, [pc, #288]	; (80058d8 <EndEffstateManagement+0x2b8>)
 80057b6:	f000 f8cf 	bl	8005958 <I2CReadFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 80057ba:	4b46      	ldr	r3, [pc, #280]	; (80058d4 <EndEffstateManagement+0x2b4>)
 80057bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d178      	bne.n	80058b8 <EndEffstateManagement+0x298>
			{
				I2CEndEffectorReadFlag =  1;
 80057c6:	4b47      	ldr	r3, [pc, #284]	; (80058e4 <EndEffstateManagement+0x2c4>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	701a      	strb	r2, [r3, #0]
				if(I2CRxDataBuffer[0] == 0x78)
 80057cc:	4b42      	ldr	r3, [pc, #264]	; (80058d8 <EndEffstateManagement+0x2b8>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b78      	cmp	r3, #120	; 0x78
 80057d2:	d141      	bne.n	8005858 <EndEffstateManagement+0x238>
				{
					check[5]++;
 80057d4:	4b3e      	ldr	r3, [pc, #248]	; (80058d0 <EndEffstateManagement+0x2b0>)
 80057d6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80057da:	f112 0801 	adds.w	r8, r2, #1
 80057de:	f143 0900 	adc.w	r9, r3, #0
 80057e2:	4b3b      	ldr	r3, [pc, #236]	; (80058d0 <EndEffstateManagement+0x2b0>)
 80057e4:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80057e8:	2200      	movs	r2, #0
 80057ea:	2110      	movs	r1, #16
 80057ec:	483f      	ldr	r0, [pc, #252]	; (80058ec <EndEffstateManagement+0x2cc>)
 80057ee:	f001 fd05 	bl	80071fc <HAL_GPIO_WritePin>
					EndEffState = idle;
 80057f2:	4b34      	ldr	r3, [pc, #208]	; (80058c4 <EndEffstateManagement+0x2a4>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	701a      	strb	r2, [r3, #0]
					EndEffStatus = AwaitCommand;
 80057f8:	4b33      	ldr	r3, [pc, #204]	; (80058c8 <EndEffstateManagement+0x2a8>)
 80057fa:	2203      	movs	r2, #3
 80057fc:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 80057fe:	4b3c      	ldr	r3, [pc, #240]	; (80058f0 <EndEffstateManagement+0x2d0>)
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
					if(RobotState != Emergency){
 8005804:	4b3b      	ldr	r3, [pc, #236]	; (80058f4 <EndEffstateManagement+0x2d4>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b04      	cmp	r3, #4
 800580a:	d002      	beq.n	8005812 <EndEffstateManagement+0x1f2>
						RobotState = NormalOperation;
 800580c:	4b39      	ldr	r3, [pc, #228]	; (80058f4 <EndEffstateManagement+0x2d4>)
 800580e:	2202      	movs	r2, #2
 8005810:	701a      	strb	r2, [r3, #0]
					}
					if(doingTaskFlag == 1){
 8005812:	4b39      	ldr	r3, [pc, #228]	; (80058f8 <EndEffstateManagement+0x2d8>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d14e      	bne.n	80058b8 <EndEffstateManagement+0x298>
						goalIDX++;
 800581a:	4b38      	ldr	r3, [pc, #224]	; (80058fc <EndEffstateManagement+0x2dc>)
 800581c:	f993 3000 	ldrsb.w	r3, [r3]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	3301      	adds	r3, #1
 8005824:	b2db      	uxtb	r3, r3
 8005826:	b25a      	sxtb	r2, r3
 8005828:	4b34      	ldr	r3, [pc, #208]	; (80058fc <EndEffstateManagement+0x2dc>)
 800582a:	701a      	strb	r2, [r3, #0]
						if(goalIDX > goalAmount-1){
 800582c:	4b34      	ldr	r3, [pc, #208]	; (8005900 <EndEffstateManagement+0x2e0>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	4b32      	ldr	r3, [pc, #200]	; (80058fc <EndEffstateManagement+0x2dc>)
 8005834:	f993 3000 	ldrsb.w	r3, [r3]
 8005838:	429a      	cmp	r2, r3
 800583a:	dc09      	bgt.n	8005850 <EndEffstateManagement+0x230>
							goalIDX = 0;
 800583c:	4b2f      	ldr	r3, [pc, #188]	; (80058fc <EndEffstateManagement+0x2dc>)
 800583e:	2200      	movs	r2, #0
 8005840:	701a      	strb	r2, [r3, #0]
							goalFlag = 0;
 8005842:	4b30      	ldr	r3, [pc, #192]	; (8005904 <EndEffstateManagement+0x2e4>)
 8005844:	2200      	movs	r2, #0
 8005846:	701a      	strb	r2, [r3, #0]
							doingTaskFlag = 0;
 8005848:	4b2b      	ldr	r3, [pc, #172]	; (80058f8 <EndEffstateManagement+0x2d8>)
 800584a:	2200      	movs	r2, #0
 800584c:	701a      	strb	r2, [r3, #0]
					EndEffStatus = Closing;
					EndEffState = SetupReadStatus;
					I2CEndEffectorWriteFlag = 1;
				}
			}
			break;
 800584e:	e033      	b.n	80058b8 <EndEffstateManagement+0x298>
							notContinueFlag = 1;
 8005850:	4b2d      	ldr	r3, [pc, #180]	; (8005908 <EndEffstateManagement+0x2e8>)
 8005852:	2201      	movs	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
			break;
 8005856:	e02f      	b.n	80058b8 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x12)
 8005858:	4b1f      	ldr	r3, [pc, #124]	; (80058d8 <EndEffstateManagement+0x2b8>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b12      	cmp	r3, #18
 800585e:	d109      	bne.n	8005874 <EndEffstateManagement+0x254>
					EndEffStatus = Opening;
 8005860:	4b19      	ldr	r3, [pc, #100]	; (80058c8 <EndEffstateManagement+0x2a8>)
 8005862:	2200      	movs	r2, #0
 8005864:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8005866:	4b17      	ldr	r3, [pc, #92]	; (80058c4 <EndEffstateManagement+0x2a4>)
 8005868:	2203      	movs	r2, #3
 800586a:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 800586c:	4b1c      	ldr	r3, [pc, #112]	; (80058e0 <EndEffstateManagement+0x2c0>)
 800586e:	2201      	movs	r2, #1
 8005870:	701a      	strb	r2, [r3, #0]
			break;
 8005872:	e021      	b.n	80058b8 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x34)
 8005874:	4b18      	ldr	r3, [pc, #96]	; (80058d8 <EndEffstateManagement+0x2b8>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b34      	cmp	r3, #52	; 0x34
 800587a:	d109      	bne.n	8005890 <EndEffstateManagement+0x270>
					EndEffStatus = Working;
 800587c:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <EndEffstateManagement+0x2a8>)
 800587e:	2202      	movs	r2, #2
 8005880:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8005882:	4b10      	ldr	r3, [pc, #64]	; (80058c4 <EndEffstateManagement+0x2a4>)
 8005884:	2203      	movs	r2, #3
 8005886:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8005888:	4b15      	ldr	r3, [pc, #84]	; (80058e0 <EndEffstateManagement+0x2c0>)
 800588a:	2201      	movs	r2, #1
 800588c:	701a      	strb	r2, [r3, #0]
			break;
 800588e:	e013      	b.n	80058b8 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x56)
 8005890:	4b11      	ldr	r3, [pc, #68]	; (80058d8 <EndEffstateManagement+0x2b8>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b56      	cmp	r3, #86	; 0x56
 8005896:	d10f      	bne.n	80058b8 <EndEffstateManagement+0x298>
					EndEffStatus = Closing;
 8005898:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <EndEffstateManagement+0x2a8>)
 800589a:	2201      	movs	r2, #1
 800589c:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 800589e:	4b09      	ldr	r3, [pc, #36]	; (80058c4 <EndEffstateManagement+0x2a4>)
 80058a0:	2203      	movs	r2, #3
 80058a2:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 80058a4:	4b0e      	ldr	r3, [pc, #56]	; (80058e0 <EndEffstateManagement+0x2c0>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	701a      	strb	r2, [r3, #0]
			break;
 80058aa:	e005      	b.n	80058b8 <EndEffstateManagement+0x298>
		break;
 80058ac:	bf00      	nop
 80058ae:	e004      	b.n	80058ba <EndEffstateManagement+0x29a>
			break;
 80058b0:	bf00      	nop
 80058b2:	e002      	b.n	80058ba <EndEffstateManagement+0x29a>
			break;
 80058b4:	bf00      	nop
 80058b6:	e000      	b.n	80058ba <EndEffstateManagement+0x29a>
			break;
 80058b8:	bf00      	nop
	}
}
 80058ba:	bf00      	nop
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058c4:	20000000 	.word	0x20000000
 80058c8:	20000001 	.word	0x20000001
 80058cc:	20000b08 	.word	0x20000b08
 80058d0:	20000798 	.word	0x20000798
 80058d4:	20000464 	.word	0x20000464
 80058d8:	20000b04 	.word	0x20000b04
 80058dc:	20000772 	.word	0x20000772
 80058e0:	20000b01 	.word	0x20000b01
 80058e4:	20000b00 	.word	0x20000b00
 80058e8:	20000af0 	.word	0x20000af0
 80058ec:	40020400 	.word	0x40020400
 80058f0:	2000076e 	.word	0x2000076e
 80058f4:	20000715 	.word	0x20000715
 80058f8:	20000770 	.word	0x20000770
 80058fc:	2000076c 	.word	0x2000076c
 8005900:	2000076b 	.word	0x2000076b
 8005904:	2000076d 	.word	0x2000076d
 8005908:	20000773 	.word	0x20000773

0800590c <I2CWriteFcn>:

void I2CWriteFcn(uint8_t *Wdata) {
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorWriteFlag == 1  && hi2c1.State == HAL_I2C_STATE_READY) {
 8005914:	4b0d      	ldr	r3, [pc, #52]	; (800594c <I2CWriteFcn+0x40>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d112      	bne.n	8005942 <I2CWriteFcn+0x36>
 800591c:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <I2CWriteFcn+0x44>)
 800591e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b20      	cmp	r3, #32
 8005926:	d10c      	bne.n	8005942 <I2CWriteFcn+0x36>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	781a      	ldrb	r2, [r3, #0]
		static uint8_t data[EndEffRxBuf_SIZE];
		memcpy ((uint8_t *)data, (uint8_t *)Wdata, EndEffRxBuf_SIZE);
 800592c:	4b09      	ldr	r3, [pc, #36]	; (8005954 <I2CWriteFcn+0x48>)
 800592e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, Endeff_ADDR, data, I2CTxDataLen);
 8005930:	2301      	movs	r3, #1
 8005932:	4a08      	ldr	r2, [pc, #32]	; (8005954 <I2CWriteFcn+0x48>)
 8005934:	2146      	movs	r1, #70	; 0x46
 8005936:	4806      	ldr	r0, [pc, #24]	; (8005950 <I2CWriteFcn+0x44>)
 8005938:	f001 fdf0 	bl	800751c <HAL_I2C_Master_Transmit_IT>
		I2CEndEffectorWriteFlag = 0;
 800593c:	4b03      	ldr	r3, [pc, #12]	; (800594c <I2CWriteFcn+0x40>)
 800593e:	2200      	movs	r2, #0
 8005940:	701a      	strb	r2, [r3, #0]
	}
}
 8005942:	bf00      	nop
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20000b01 	.word	0x20000b01
 8005950:	20000464 	.word	0x20000464
 8005954:	20000b1c 	.word	0x20000b1c

08005958 <I2CReadFcn>:
void I2CReadFcn(uint8_t *Rdata) {
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY) {
 8005960:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <I2CReadFcn+0x38>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d10e      	bne.n	8005986 <I2CReadFcn+0x2e>
 8005968:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <I2CReadFcn+0x3c>)
 800596a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b20      	cmp	r3, #32
 8005972:	d108      	bne.n	8005986 <I2CReadFcn+0x2e>
		HAL_I2C_Master_Receive_IT(&hi2c1, Endeff_ADDR, Rdata, I2CRxDataLen);
 8005974:	2301      	movs	r3, #1
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	2146      	movs	r1, #70	; 0x46
 800597a:	4806      	ldr	r0, [pc, #24]	; (8005994 <I2CReadFcn+0x3c>)
 800597c:	f001 fe74 	bl	8007668 <HAL_I2C_Master_Receive_IT>
		I2CEndEffectorReadFlag =  0;
 8005980:	4b03      	ldr	r3, [pc, #12]	; (8005990 <I2CReadFcn+0x38>)
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]
	}
}
 8005986:	bf00      	nop
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20000b00 	.word	0x20000b00
 8005994:	20000464 	.word	0x20000464

08005998 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005998:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	4603      	mov	r3, r0
 80059a2:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 80059a4:	88fb      	ldrh	r3, [r7, #6]
 80059a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059aa:	d103      	bne.n	80059b4 <HAL_GPIO_EXTI_Callback+0x1c>
	{
//		I2CEndEffectorWriteFlag = 1;
//		I2CEndEffectorReadFlag =  1;
//		EndEffState = CheckBeforRun;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80059ac:	2108      	movs	r1, #8
 80059ae:	483e      	ldr	r0, [pc, #248]	; (8005aa8 <HAL_GPIO_EXTI_Callback+0x110>)
 80059b0:	f001 fc3d 	bl	800722e <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_10)
 80059b4:	88fb      	ldrh	r3, [r7, #6]
 80059b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ba:	d13e      	bne.n	8005a3a <HAL_GPIO_EXTI_Callback+0xa2>
	{
		// Proxi Sensor
		if(Robot.flagSethome == 1)
 80059bc:	4b3b      	ldr	r3, [pc, #236]	; (8005aac <HAL_GPIO_EXTI_Callback+0x114>)
 80059be:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d139      	bne.n	8005a3a <HAL_GPIO_EXTI_Callback+0xa2>
		{
			homePoint[homeFF] = PositionDeg[0];
 80059c6:	4b3a      	ldr	r3, [pc, #232]	; (8005ab0 <HAL_GPIO_EXTI_Callback+0x118>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	4b39      	ldr	r3, [pc, #228]	; (8005ab4 <HAL_GPIO_EXTI_Callback+0x11c>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4939      	ldr	r1, [pc, #228]	; (8005ab8 <HAL_GPIO_EXTI_Callback+0x120>)
 80059d2:	0083      	lsls	r3, r0, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	601a      	str	r2, [r3, #0]
			homeFF++;
 80059d8:	4b35      	ldr	r3, [pc, #212]	; (8005ab0 <HAL_GPIO_EXTI_Callback+0x118>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	3301      	adds	r3, #1
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	4b33      	ldr	r3, [pc, #204]	; (8005ab0 <HAL_GPIO_EXTI_Callback+0x118>)
 80059e2:	701a      	strb	r2, [r3, #0]
			if(homeFF == 2)
 80059e4:	4b32      	ldr	r3, [pc, #200]	; (8005ab0 <HAL_GPIO_EXTI_Callback+0x118>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d126      	bne.n	8005a3a <HAL_GPIO_EXTI_Callback+0xa2>
			{
				if(homePoint[1]-homePoint[0] > 180.0)
 80059ec:	4b32      	ldr	r3, [pc, #200]	; (8005ab8 <HAL_GPIO_EXTI_Callback+0x120>)
 80059ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80059f2:	4b31      	ldr	r3, [pc, #196]	; (8005ab8 <HAL_GPIO_EXTI_Callback+0x120>)
 80059f4:	edd3 7a00 	vldr	s15, [r3]
 80059f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005abc <HAL_GPIO_EXTI_Callback+0x124>
 8005a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a08:	dd04      	ble.n	8005a14 <HAL_GPIO_EXTI_Callback+0x7c>
				{
					Robot.HomePositon =  0;
 8005a0a:	4b28      	ldr	r3, [pc, #160]	; (8005aac <HAL_GPIO_EXTI_Callback+0x114>)
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	619a      	str	r2, [r3, #24]
 8005a12:	e00e      	b.n	8005a32 <HAL_GPIO_EXTI_Callback+0x9a>
				}
				else
				{
					Robot.HomePositon = (homePoint[0]+homePoint[1])/2.0;
 8005a14:	4b28      	ldr	r3, [pc, #160]	; (8005ab8 <HAL_GPIO_EXTI_Callback+0x120>)
 8005a16:	ed93 7a00 	vldr	s14, [r3]
 8005a1a:	4b27      	ldr	r3, [pc, #156]	; (8005ab8 <HAL_GPIO_EXTI_Callback+0x120>)
 8005a1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a24:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005a28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a2c:	4b1f      	ldr	r3, [pc, #124]	; (8005aac <HAL_GPIO_EXTI_Callback+0x114>)
 8005a2e:	edc3 7a06 	vstr	s15, [r3, #24]
				}
				Robot.flagSethome = 2;
 8005a32:	4b1e      	ldr	r3, [pc, #120]	; (8005aac <HAL_GPIO_EXTI_Callback+0x114>)
 8005a34:	2202      	movs	r2, #2
 8005a36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			}
		}
	}
	if(GPIO_Pin == GPIO_PIN_5)
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d12e      	bne.n	8005a9e <HAL_GPIO_EXTI_Callback+0x106>
	{
		if(EmertimeoutFlag == 0)
 8005a40:	4b1f      	ldr	r3, [pc, #124]	; (8005ac0 <HAL_GPIO_EXTI_Callback+0x128>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d102      	bne.n	8005a4e <HAL_GPIO_EXTI_Callback+0xb6>
		{
			EmertimeoutFlag = 1;
 8005a48:	4b1d      	ldr	r3, [pc, #116]	; (8005ac0 <HAL_GPIO_EXTI_Callback+0x128>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	701a      	strb	r2, [r3, #0]
		}

		if(Micros() - EmergencycalloutTime > 100000 && EmertimeoutFlag == 1)
 8005a4e:	f000 f9a1 	bl	8005d94 <Micros>
 8005a52:	4b1c      	ldr	r3, [pc, #112]	; (8005ac4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8005a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a58:	1a84      	subs	r4, r0, r2
 8005a5a:	eb61 0503 	sbc.w	r5, r1, r3
 8005a5e:	4b1a      	ldr	r3, [pc, #104]	; (8005ac8 <HAL_GPIO_EXTI_Callback+0x130>)
 8005a60:	429c      	cmp	r4, r3
 8005a62:	f175 0300 	sbcs.w	r3, r5, #0
 8005a66:	d31a      	bcc.n	8005a9e <HAL_GPIO_EXTI_Callback+0x106>
 8005a68:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <HAL_GPIO_EXTI_Callback+0x128>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d116      	bne.n	8005a9e <HAL_GPIO_EXTI_Callback+0x106>
		{
			check[6]++;
 8005a70:	4b16      	ldr	r3, [pc, #88]	; (8005acc <HAL_GPIO_EXTI_Callback+0x134>)
 8005a72:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005a76:	f112 0801 	adds.w	r8, r2, #1
 8005a7a:	f143 0900 	adc.w	r9, r3, #0
 8005a7e:	4b13      	ldr	r3, [pc, #76]	; (8005acc <HAL_GPIO_EXTI_Callback+0x134>)
 8005a80:	e9c3 890c 	strd	r8, r9, [r3, #48]	; 0x30
			EmergencycalloutTime = Micros();
 8005a84:	f000 f986 	bl	8005d94 <Micros>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	490d      	ldr	r1, [pc, #52]	; (8005ac4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8005a8e:	e9c1 2300 	strd	r2, r3, [r1]
			EmertimeoutFlag = 0;
 8005a92:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <HAL_GPIO_EXTI_Callback+0x128>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	701a      	strb	r2, [r3, #0]
			//Docode
			HAL_TIM_Base_Start_IT(&htim5);
 8005a98:	480d      	ldr	r0, [pc, #52]	; (8005ad0 <HAL_GPIO_EXTI_Callback+0x138>)
 8005a9a:	f004 f857 	bl	8009b4c <HAL_TIM_Base_Start_IT>
		}
	}
}
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005aa8:	40020400 	.word	0x40020400
 8005aac:	200006dc 	.word	0x200006dc
 8005ab0:	20000708 	.word	0x20000708
 8005ab4:	200007f8 	.word	0x200007f8
 8005ab8:	2000070c 	.word	0x2000070c
 8005abc:	43340000 	.word	0x43340000
 8005ac0:	20000ae8 	.word	0x20000ae8
 8005ac4:	20000ae0 	.word	0x20000ae0
 8005ac8:	000186a1 	.word	0x000186a1
 8005acc:	20000798 	.word	0x20000798
 8005ad0:	20000548 	.word	0x20000548

08005ad4 <RobotRunToPositon>:
void RobotRunToPositon(float Destination , float VeloInput)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	ed87 0a01 	vstr	s0, [r7, #4]
 8005ade:	edc7 0a00 	vstr	s1, [r7]
	Robot.GoalPositon = Destination;
 8005ae2:	4a16      	ldr	r2, [pc, #88]	; (8005b3c <RobotRunToPositon+0x68>)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6113      	str	r3, [r2, #16]
	Robot.QVMax = VeloInput;
 8005ae8:	4a14      	ldr	r2, [pc, #80]	; (8005b3c <RobotRunToPositon+0x68>)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	6253      	str	r3, [r2, #36]	; 0x24
	CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 8005aee:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <RobotRunToPositon+0x68>)
 8005af0:	edd3 7a00 	vldr	s15, [r3]
 8005af4:	4b11      	ldr	r3, [pc, #68]	; (8005b3c <RobotRunToPositon+0x68>)
 8005af6:	ed93 7a04 	vldr	s14, [r3, #16]
 8005afa:	4b10      	ldr	r3, [pc, #64]	; (8005b3c <RobotRunToPositon+0x68>)
 8005afc:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8005b00:	eeb0 1a66 	vmov.f32	s2, s13
 8005b04:	eef0 0a47 	vmov.f32	s1, s14
 8005b08:	eeb0 0a67 	vmov.f32	s0, s15
 8005b0c:	480c      	ldr	r0, [pc, #48]	; (8005b40 <RobotRunToPositon+0x6c>)
 8005b0e:	f7fb ff87 	bl	8001a20 <CoefficientAndTimeCalculation>
	// Start Trajectory Evaluator
	Robot.MotorIsOn = 1;
 8005b12:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <RobotRunToPositon+0x68>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Robot.flagStartTime = 1;
 8005b1a:	4b08      	ldr	r3, [pc, #32]	; (8005b3c <RobotRunToPositon+0x68>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	Robot.RunningFlag = 1;
 8005b22:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <RobotRunToPositon+0x68>)
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	2108      	movs	r1, #8
 8005b2e:	4805      	ldr	r0, [pc, #20]	; (8005b44 <RobotRunToPositon+0x70>)
 8005b30:	f001 fb64 	bl	80071fc <HAL_GPIO_WritePin>
}
 8005b34:	bf00      	nop
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	200006dc 	.word	0x200006dc
 8005b40:	2000086c 	.word	0x2000086c
 8005b44:	40020400 	.word	0x40020400

08005b48 <RobotResetAll>:


void RobotResetAll()
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
	// Reset Encoder
	TIM_ResetCounter(TIM2);
 8005b4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005b50:	f000 f866 	bl	8005c20 <TIM_ResetCounter>
	EncoderRawData[0] = 0;
 8005b54:	4b23      	ldr	r3, [pc, #140]	; (8005be4 <RobotResetAll+0x9c>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
	EncoderRawData[1] = 0;
 8005b5a:	4b22      	ldr	r3, [pc, #136]	; (8005be4 <RobotResetAll+0x9c>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	605a      	str	r2, [r3, #4]
	WrappingStep = 0;
 8005b60:	4b21      	ldr	r3, [pc, #132]	; (8005be8 <RobotResetAll+0xa0>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
	// Reset Trajectory
	CoefficientAndTimeCalculation(&traject,0.0,0.0,60);
 8005b66:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8005bec <RobotResetAll+0xa4>
 8005b6a:	eddf 0a21 	vldr	s1, [pc, #132]	; 8005bf0 <RobotResetAll+0xa8>
 8005b6e:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8005bf0 <RobotResetAll+0xa8>
 8005b72:	4820      	ldr	r0, [pc, #128]	; (8005bf4 <RobotResetAll+0xac>)
 8005b74:	f7fb ff54 	bl	8001a20 <CoefficientAndTimeCalculation>
	Robot.flagStartTime = 1;
 8005b78:	4b1f      	ldr	r3, [pc, #124]	; (8005bf8 <RobotResetAll+0xb0>)
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	StartTime = 0;
 8005b80:	491e      	ldr	r1, [pc, #120]	; (8005bfc <RobotResetAll+0xb4>)
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	e9c1 2300 	strd	r2, r3, [r1]
	CurrentTime = 0;
 8005b8e:	491c      	ldr	r1, [pc, #112]	; (8005c00 <RobotResetAll+0xb8>)
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	e9c1 2300 	strd	r2, r3, [r1]
	// Reset Position
	PositionDeg[0] = 0;
 8005b9c:	4b19      	ldr	r3, [pc, #100]	; (8005c04 <RobotResetAll+0xbc>)
 8005b9e:	f04f 0200 	mov.w	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
	PositionDeg[1] = 0;
 8005ba4:	4b17      	ldr	r3, [pc, #92]	; (8005c04 <RobotResetAll+0xbc>)
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	605a      	str	r2, [r3, #4]
	KalmanMatrixReset(&KalmanVar, Pvar);
 8005bac:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8005c08 <RobotResetAll+0xc0>
 8005bb0:	4816      	ldr	r0, [pc, #88]	; (8005c0c <RobotResetAll+0xc4>)
 8005bb2:	f7fb fa39 	bl	8001028 <KalmanMatrixReset>
	Robotinit(&Robot);
 8005bb6:	4810      	ldr	r0, [pc, #64]	; (8005bf8 <RobotResetAll+0xb0>)
 8005bb8:	f7fb fea0 	bl	80018fc <Robotinit>
	// Reset Pid
	PIDAController_Init(&PidVelo);
 8005bbc:	4814      	ldr	r0, [pc, #80]	; (8005c10 <RobotResetAll+0xc8>)
 8005bbe:	f7fb fbe1 	bl	8001384 <PIDAController_Init>
	PIDAController_Init(&PidPos);
 8005bc2:	4814      	ldr	r0, [pc, #80]	; (8005c14 <RobotResetAll+0xcc>)
 8005bc4:	f7fb fbde 	bl	8001384 <PIDAController_Init>
	// Reset Home Buffer
	homePoint[0] = 0;
 8005bc8:	4b13      	ldr	r3, [pc, #76]	; (8005c18 <RobotResetAll+0xd0>)
 8005bca:	f04f 0200 	mov.w	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]
	homePoint[1] = 0;
 8005bd0:	4b11      	ldr	r3, [pc, #68]	; (8005c18 <RobotResetAll+0xd0>)
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	605a      	str	r2, [r3, #4]
	homeFF = 0;
 8005bd8:	4b10      	ldr	r3, [pc, #64]	; (8005c1c <RobotResetAll+0xd4>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	701a      	strb	r2, [r3, #0]
}
 8005bde:	bf00      	nop
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	200007e8 	.word	0x200007e8
 8005be8:	200007f0 	.word	0x200007f0
 8005bec:	42700000 	.word	0x42700000
 8005bf0:	00000000 	.word	0x00000000
 8005bf4:	2000086c 	.word	0x2000086c
 8005bf8:	200006dc 	.word	0x200006dc
 8005bfc:	20000ab0 	.word	0x20000ab0
 8005c00:	20000ab8 	.word	0x20000ab8
 8005c04:	200007f8 	.word	0x200007f8
 8005c08:	447a0000 	.word	0x447a0000
 8005c0c:	20000034 	.word	0x20000034
 8005c10:	20000808 	.word	0x20000808
 8005c14:	20000838 	.word	0x20000838
 8005c18:	2000070c 	.word	0x2000070c
 8005c1c:	20000708 	.word	0x20000708

08005c20 <TIM_ResetCounter>:

void TIM_ResetCounter(TIM_TypeDef* TIMx)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Reset the Counter Register value */
  TIMx->CNT = 0;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a47      	ldr	r2, [pc, #284]	; (8005d68 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d10b      	bne.n	8005c66 <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micro += 65535;
 8005c4e:	4b47      	ldr	r3, [pc, #284]	; (8005d6c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c58:	eb12 0a01 	adds.w	sl, r2, r1
 8005c5c:	f143 0b00 	adc.w	fp, r3, #0
 8005c60:	4b42      	ldr	r3, [pc, #264]	; (8005d6c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005c62:	e9c3 ab00 	strd	sl, fp, [r3]
	}
	if (htim == &htim5){
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a41      	ldr	r2, [pc, #260]	; (8005d70 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d177      	bne.n	8005d5e <HAL_TIM_PeriodElapsedCallback+0x122>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET)
 8005c6e:	2120      	movs	r1, #32
 8005c70:	4840      	ldr	r0, [pc, #256]	; (8005d74 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005c72:	f001 faab 	bl	80071cc <HAL_GPIO_ReadPin>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d15b      	bne.n	8005d34 <HAL_TIM_PeriodElapsedCallback+0xf8>
		{
			check[7]++;
 8005c7c:	4b3e      	ldr	r3, [pc, #248]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005c7e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005c82:	f112 0801 	adds.w	r8, r2, #1
 8005c86:	f143 0900 	adc.w	r9, r3, #0
 8005c8a:	4b3b      	ldr	r3, [pc, #236]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005c8c:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
			if(EndEffState != idle)
 8005c90:	4b3a      	ldr	r3, [pc, #232]	; (8005d7c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <HAL_TIM_PeriodElapsedCallback+0x64>
			{
				RobotState = EndEff;
 8005c98:	4b39      	ldr	r3, [pc, #228]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005c9a:	2203      	movs	r2, #3
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	e002      	b.n	8005ca6 <HAL_TIM_PeriodElapsedCallback+0x6a>
			}
			else
			{
				RobotState = NormalOperation;
 8005ca0:	4b37      	ldr	r3, [pc, #220]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005cac:	4831      	ldr	r0, [pc, #196]	; (8005d74 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005cae:	f001 faa5 	bl	80071fc <HAL_GPIO_WritePin>
			if((doingTaskFlag == 1 && goingToGoalFlag == 1) || homingFlag == 1)
 8005cb2:	4b34      	ldr	r3, [pc, #208]	; (8005d84 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d103      	bne.n	8005cc2 <HAL_TIM_PeriodElapsedCallback+0x86>
 8005cba:	4b33      	ldr	r3, [pc, #204]	; (8005d88 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d003      	beq.n	8005cca <HAL_TIM_PeriodElapsedCallback+0x8e>
 8005cc2:	4b32      	ldr	r3, [pc, #200]	; (8005d8c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d10b      	bne.n	8005ce2 <HAL_TIM_PeriodElapsedCallback+0xa6>
			{
				RobotRunToPositon(Robot.GoalPositon,Robot.QVMax);
 8005cca:	4b31      	ldr	r3, [pc, #196]	; (8005d90 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005ccc:	edd3 7a04 	vldr	s15, [r3, #16]
 8005cd0:	4b2f      	ldr	r3, [pc, #188]	; (8005d90 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005cd2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005cd6:	eef0 0a47 	vmov.f32	s1, s14
 8005cda:	eeb0 0a67 	vmov.f32	s0, s15
 8005cde:	f7ff fef9 	bl	8005ad4 <RobotRunToPositon>
			}
			if(Robot.flagSethome == 1){
 8005ce2:	4b2b      	ldr	r3, [pc, #172]	; (8005d90 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005ce4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d105      	bne.n	8005cf8 <HAL_TIM_PeriodElapsedCallback+0xbc>
				RobotResetAll();
 8005cec:	f7ff ff2c 	bl	8005b48 <RobotResetAll>
				RobotState = init;
 8005cf0:	4b23      	ldr	r3, [pc, #140]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	e02f      	b.n	8005d58 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
			else if(Robot.flagSethome == 2 || Robot.flagSethome == 3)
 8005cf8:	4b25      	ldr	r3, [pc, #148]	; (8005d90 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005cfa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d004      	beq.n	8005d0c <HAL_TIM_PeriodElapsedCallback+0xd0>
 8005d02:	4b23      	ldr	r3, [pc, #140]	; (8005d90 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005d04:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d125      	bne.n	8005d58 <HAL_TIM_PeriodElapsedCallback+0x11c>
			{
				Robot.flagSethome = 3;
 8005d0c:	4b20      	ldr	r3, [pc, #128]	; (8005d90 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005d0e:	2203      	movs	r2, #3
 8005d10:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				RobotRunToPositon(Robot.HomePositon,Robot.QVMax);
 8005d14:	4b1e      	ldr	r3, [pc, #120]	; (8005d90 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005d16:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d1a:	4b1d      	ldr	r3, [pc, #116]	; (8005d90 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005d1c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005d20:	eef0 0a47 	vmov.f32	s1, s14
 8005d24:	eeb0 0a67 	vmov.f32	s0, s15
 8005d28:	f7ff fed4 	bl	8005ad4 <RobotRunToPositon>
				RobotState = FindHome;
 8005d2c:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	e011      	b.n	8005d58 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
		}
		else
		{
			check[8]++;
 8005d34:	4b10      	ldr	r3, [pc, #64]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005d36:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8005d3a:	1c54      	adds	r4, r2, #1
 8005d3c:	f143 0500 	adc.w	r5, r3, #0
 8005d40:	4b0d      	ldr	r3, [pc, #52]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005d42:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
			RobotState = Emergency;
 8005d46:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005d48:	2204      	movs	r2, #4
 8005d4a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d52:	4808      	ldr	r0, [pc, #32]	; (8005d74 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005d54:	f001 fa52 	bl	80071fc <HAL_GPIO_WritePin>
		}
		HAL_TIM_Base_Stop_IT(&htim5);
 8005d58:	4805      	ldr	r0, [pc, #20]	; (8005d70 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005d5a:	f003 ff59 	bl	8009c10 <HAL_TIM_Base_Stop_IT>
	}
}
 8005d5e:	bf00      	nop
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d68:	20000590 	.word	0x20000590
 8005d6c:	20000778 	.word	0x20000778
 8005d70:	20000548 	.word	0x20000548
 8005d74:	40020400 	.word	0x40020400
 8005d78:	20000798 	.word	0x20000798
 8005d7c:	20000000 	.word	0x20000000
 8005d80:	20000715 	.word	0x20000715
 8005d84:	20000770 	.word	0x20000770
 8005d88:	20000771 	.word	0x20000771
 8005d8c:	2000076f 	.word	0x2000076f
 8005d90:	200006dc 	.word	0x200006dc

08005d94 <Micros>:

uint64_t Micros(){
 8005d94:	b4b0      	push	{r4, r5, r7}
 8005d96:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8005d98:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <Micros+0x28>)
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	4618      	mov	r0, r3
 8005da0:	4611      	mov	r1, r2
 8005da2:	4b07      	ldr	r3, [pc, #28]	; (8005dc0 <Micros+0x2c>)
 8005da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da8:	1884      	adds	r4, r0, r2
 8005daa:	eb41 0503 	adc.w	r5, r1, r3
 8005dae:	4622      	mov	r2, r4
 8005db0:	462b      	mov	r3, r5
}
 8005db2:	4610      	mov	r0, r2
 8005db4:	4619      	mov	r1, r3
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bcb0      	pop	{r4, r5, r7}
 8005dba:	4770      	bx	lr
 8005dbc:	40014800 	.word	0x40014800
 8005dc0:	20000778 	.word	0x20000778

08005dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005dc8:	b672      	cpsid	i
}
 8005dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005dcc:	e7fe      	b.n	8005dcc <Error_Handler+0x8>
	...

08005dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	607b      	str	r3, [r7, #4]
 8005dda:	4b10      	ldr	r3, [pc, #64]	; (8005e1c <HAL_MspInit+0x4c>)
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dde:	4a0f      	ldr	r2, [pc, #60]	; (8005e1c <HAL_MspInit+0x4c>)
 8005de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005de4:	6453      	str	r3, [r2, #68]	; 0x44
 8005de6:	4b0d      	ldr	r3, [pc, #52]	; (8005e1c <HAL_MspInit+0x4c>)
 8005de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dee:	607b      	str	r3, [r7, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005df2:	2300      	movs	r3, #0
 8005df4:	603b      	str	r3, [r7, #0]
 8005df6:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <HAL_MspInit+0x4c>)
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	4a08      	ldr	r2, [pc, #32]	; (8005e1c <HAL_MspInit+0x4c>)
 8005dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e00:	6413      	str	r3, [r2, #64]	; 0x40
 8005e02:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <HAL_MspInit+0x4c>)
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005e0e:	2007      	movs	r0, #7
 8005e10:	f000 fc06 	bl	8006620 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e14:	bf00      	nop
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	40023800 	.word	0x40023800

08005e20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08a      	sub	sp, #40	; 0x28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e28:	f107 0314 	add.w	r3, r7, #20
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	605a      	str	r2, [r3, #4]
 8005e32:	609a      	str	r2, [r3, #8]
 8005e34:	60da      	str	r2, [r3, #12]
 8005e36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a21      	ldr	r2, [pc, #132]	; (8005ec4 <HAL_I2C_MspInit+0xa4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d13c      	bne.n	8005ebc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e42:	2300      	movs	r3, #0
 8005e44:	613b      	str	r3, [r7, #16]
 8005e46:	4b20      	ldr	r3, [pc, #128]	; (8005ec8 <HAL_I2C_MspInit+0xa8>)
 8005e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4a:	4a1f      	ldr	r2, [pc, #124]	; (8005ec8 <HAL_I2C_MspInit+0xa8>)
 8005e4c:	f043 0302 	orr.w	r3, r3, #2
 8005e50:	6313      	str	r3, [r2, #48]	; 0x30
 8005e52:	4b1d      	ldr	r3, [pc, #116]	; (8005ec8 <HAL_I2C_MspInit+0xa8>)
 8005e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005e5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e64:	2312      	movs	r3, #18
 8005e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005e70:	2304      	movs	r3, #4
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e74:	f107 0314 	add.w	r3, r7, #20
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4814      	ldr	r0, [pc, #80]	; (8005ecc <HAL_I2C_MspInit+0xac>)
 8005e7c:	f001 f822 	bl	8006ec4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	4b10      	ldr	r3, [pc, #64]	; (8005ec8 <HAL_I2C_MspInit+0xa8>)
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	4a0f      	ldr	r2, [pc, #60]	; (8005ec8 <HAL_I2C_MspInit+0xa8>)
 8005e8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8005e90:	4b0d      	ldr	r3, [pc, #52]	; (8005ec8 <HAL_I2C_MspInit+0xa8>)
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e98:	60fb      	str	r3, [r7, #12]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	201f      	movs	r0, #31
 8005ea2:	f000 fbc8 	bl	8006636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005ea6:	201f      	movs	r0, #31
 8005ea8:	f000 fbe1 	bl	800666e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005eac:	2200      	movs	r2, #0
 8005eae:	2100      	movs	r1, #0
 8005eb0:	2020      	movs	r0, #32
 8005eb2:	f000 fbc0 	bl	8006636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005eb6:	2020      	movs	r0, #32
 8005eb8:	f000 fbd9 	bl	800666e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005ebc:	bf00      	nop
 8005ebe:	3728      	adds	r7, #40	; 0x28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40005400 	.word	0x40005400
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	40020400 	.word	0x40020400

08005ed0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a0e      	ldr	r2, [pc, #56]	; (8005f18 <HAL_TIM_PWM_MspInit+0x48>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d115      	bne.n	8005f0e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <HAL_TIM_PWM_MspInit+0x4c>)
 8005ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eea:	4a0c      	ldr	r2, [pc, #48]	; (8005f1c <HAL_TIM_PWM_MspInit+0x4c>)
 8005eec:	f043 0301 	orr.w	r3, r3, #1
 8005ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <HAL_TIM_PWM_MspInit+0x4c>)
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005efe:	2200      	movs	r2, #0
 8005f00:	2100      	movs	r1, #0
 8005f02:	201a      	movs	r0, #26
 8005f04:	f000 fb97 	bl	8006636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005f08:	201a      	movs	r0, #26
 8005f0a:	f000 fbb0 	bl	800666e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005f0e:	bf00      	nop
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40023800 	.word	0x40023800

08005f20 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08a      	sub	sp, #40	; 0x28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f28:	f107 0314 	add.w	r3, r7, #20
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	605a      	str	r2, [r3, #4]
 8005f32:	609a      	str	r2, [r3, #8]
 8005f34:	60da      	str	r2, [r3, #12]
 8005f36:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f40:	d12b      	bne.n	8005f9a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f42:	2300      	movs	r3, #0
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	4b17      	ldr	r3, [pc, #92]	; (8005fa4 <HAL_TIM_Encoder_MspInit+0x84>)
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	4a16      	ldr	r2, [pc, #88]	; (8005fa4 <HAL_TIM_Encoder_MspInit+0x84>)
 8005f4c:	f043 0301 	orr.w	r3, r3, #1
 8005f50:	6413      	str	r3, [r2, #64]	; 0x40
 8005f52:	4b14      	ldr	r3, [pc, #80]	; (8005fa4 <HAL_TIM_Encoder_MspInit+0x84>)
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	613b      	str	r3, [r7, #16]
 8005f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	4b10      	ldr	r3, [pc, #64]	; (8005fa4 <HAL_TIM_Encoder_MspInit+0x84>)
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	4a0f      	ldr	r2, [pc, #60]	; (8005fa4 <HAL_TIM_Encoder_MspInit+0x84>)
 8005f68:	f043 0301 	orr.w	r3, r3, #1
 8005f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f6e:	4b0d      	ldr	r3, [pc, #52]	; (8005fa4 <HAL_TIM_Encoder_MspInit+0x84>)
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f7e:	2302      	movs	r3, #2
 8005f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f86:	2300      	movs	r3, #0
 8005f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f8e:	f107 0314 	add.w	r3, r7, #20
 8005f92:	4619      	mov	r1, r3
 8005f94:	4804      	ldr	r0, [pc, #16]	; (8005fa8 <HAL_TIM_Encoder_MspInit+0x88>)
 8005f96:	f000 ff95 	bl	8006ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005f9a:	bf00      	nop
 8005f9c:	3728      	adds	r7, #40	; 0x28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	40023800 	.word	0x40023800
 8005fa8:	40020000 	.word	0x40020000

08005fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1c      	ldr	r2, [pc, #112]	; (800602c <HAL_TIM_Base_MspInit+0x80>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d116      	bne.n	8005fec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	4b1b      	ldr	r3, [pc, #108]	; (8006030 <HAL_TIM_Base_MspInit+0x84>)
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	4a1a      	ldr	r2, [pc, #104]	; (8006030 <HAL_TIM_Base_MspInit+0x84>)
 8005fc8:	f043 0308 	orr.w	r3, r3, #8
 8005fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8005fce:	4b18      	ldr	r3, [pc, #96]	; (8006030 <HAL_TIM_Base_MspInit+0x84>)
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2100      	movs	r1, #0
 8005fde:	2032      	movs	r0, #50	; 0x32
 8005fe0:	f000 fb29 	bl	8006636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005fe4:	2032      	movs	r0, #50	; 0x32
 8005fe6:	f000 fb42 	bl	800666e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8005fea:	e01a      	b.n	8006022 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a10      	ldr	r2, [pc, #64]	; (8006034 <HAL_TIM_Base_MspInit+0x88>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d115      	bne.n	8006022 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60bb      	str	r3, [r7, #8]
 8005ffa:	4b0d      	ldr	r3, [pc, #52]	; (8006030 <HAL_TIM_Base_MspInit+0x84>)
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffe:	4a0c      	ldr	r2, [pc, #48]	; (8006030 <HAL_TIM_Base_MspInit+0x84>)
 8006000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006004:	6453      	str	r3, [r2, #68]	; 0x44
 8006006:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <HAL_TIM_Base_MspInit+0x84>)
 8006008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800600e:	60bb      	str	r3, [r7, #8]
 8006010:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8006012:	2200      	movs	r2, #0
 8006014:	2100      	movs	r1, #0
 8006016:	201a      	movs	r0, #26
 8006018:	f000 fb0d 	bl	8006636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800601c:	201a      	movs	r0, #26
 800601e:	f000 fb26 	bl	800666e <HAL_NVIC_EnableIRQ>
}
 8006022:	bf00      	nop
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	40000c00 	.word	0x40000c00
 8006030:	40023800 	.word	0x40023800
 8006034:	40014800 	.word	0x40014800

08006038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006040:	f107 030c 	add.w	r3, r7, #12
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	609a      	str	r2, [r3, #8]
 800604c:	60da      	str	r2, [r3, #12]
 800604e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a12      	ldr	r2, [pc, #72]	; (80060a0 <HAL_TIM_MspPostInit+0x68>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d11e      	bne.n	8006098 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800605a:	2300      	movs	r3, #0
 800605c:	60bb      	str	r3, [r7, #8]
 800605e:	4b11      	ldr	r3, [pc, #68]	; (80060a4 <HAL_TIM_MspPostInit+0x6c>)
 8006060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006062:	4a10      	ldr	r2, [pc, #64]	; (80060a4 <HAL_TIM_MspPostInit+0x6c>)
 8006064:	f043 0301 	orr.w	r3, r3, #1
 8006068:	6313      	str	r3, [r2, #48]	; 0x30
 800606a:	4b0e      	ldr	r3, [pc, #56]	; (80060a4 <HAL_TIM_MspPostInit+0x6c>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	60bb      	str	r3, [r7, #8]
 8006074:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800607a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800607c:	2302      	movs	r3, #2
 800607e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006080:	2300      	movs	r3, #0
 8006082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006084:	2300      	movs	r3, #0
 8006086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006088:	2301      	movs	r3, #1
 800608a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800608c:	f107 030c 	add.w	r3, r7, #12
 8006090:	4619      	mov	r1, r3
 8006092:	4805      	ldr	r0, [pc, #20]	; (80060a8 <HAL_TIM_MspPostInit+0x70>)
 8006094:	f000 ff16 	bl	8006ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006098:	bf00      	nop
 800609a:	3720      	adds	r7, #32
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40010000 	.word	0x40010000
 80060a4:	40023800 	.word	0x40023800
 80060a8:	40020000 	.word	0x40020000

080060ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08a      	sub	sp, #40	; 0x28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060b4:	f107 0314 	add.w	r3, r7, #20
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	605a      	str	r2, [r3, #4]
 80060be:	609a      	str	r2, [r3, #8]
 80060c0:	60da      	str	r2, [r3, #12]
 80060c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a4b      	ldr	r2, [pc, #300]	; (80061f8 <HAL_UART_MspInit+0x14c>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	f040 8090 	bne.w	80061f0 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80060d0:	2300      	movs	r3, #0
 80060d2:	613b      	str	r3, [r7, #16]
 80060d4:	4b49      	ldr	r3, [pc, #292]	; (80061fc <HAL_UART_MspInit+0x150>)
 80060d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d8:	4a48      	ldr	r2, [pc, #288]	; (80061fc <HAL_UART_MspInit+0x150>)
 80060da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060de:	6413      	str	r3, [r2, #64]	; 0x40
 80060e0:	4b46      	ldr	r3, [pc, #280]	; (80061fc <HAL_UART_MspInit+0x150>)
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	4b42      	ldr	r3, [pc, #264]	; (80061fc <HAL_UART_MspInit+0x150>)
 80060f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f4:	4a41      	ldr	r2, [pc, #260]	; (80061fc <HAL_UART_MspInit+0x150>)
 80060f6:	f043 0301 	orr.w	r3, r3, #1
 80060fa:	6313      	str	r3, [r2, #48]	; 0x30
 80060fc:	4b3f      	ldr	r3, [pc, #252]	; (80061fc <HAL_UART_MspInit+0x150>)
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006108:	230c      	movs	r3, #12
 800610a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800610c:	2302      	movs	r3, #2
 800610e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006110:	2300      	movs	r3, #0
 8006112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006114:	2303      	movs	r3, #3
 8006116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006118:	2307      	movs	r3, #7
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800611c:	f107 0314 	add.w	r3, r7, #20
 8006120:	4619      	mov	r1, r3
 8006122:	4837      	ldr	r0, [pc, #220]	; (8006200 <HAL_UART_MspInit+0x154>)
 8006124:	f000 fece 	bl	8006ec4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006128:	4b36      	ldr	r3, [pc, #216]	; (8006204 <HAL_UART_MspInit+0x158>)
 800612a:	4a37      	ldr	r2, [pc, #220]	; (8006208 <HAL_UART_MspInit+0x15c>)
 800612c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800612e:	4b35      	ldr	r3, [pc, #212]	; (8006204 <HAL_UART_MspInit+0x158>)
 8006130:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006134:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006136:	4b33      	ldr	r3, [pc, #204]	; (8006204 <HAL_UART_MspInit+0x158>)
 8006138:	2200      	movs	r2, #0
 800613a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800613c:	4b31      	ldr	r3, [pc, #196]	; (8006204 <HAL_UART_MspInit+0x158>)
 800613e:	2200      	movs	r2, #0
 8006140:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006142:	4b30      	ldr	r3, [pc, #192]	; (8006204 <HAL_UART_MspInit+0x158>)
 8006144:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006148:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800614a:	4b2e      	ldr	r3, [pc, #184]	; (8006204 <HAL_UART_MspInit+0x158>)
 800614c:	2200      	movs	r2, #0
 800614e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006150:	4b2c      	ldr	r3, [pc, #176]	; (8006204 <HAL_UART_MspInit+0x158>)
 8006152:	2200      	movs	r2, #0
 8006154:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006156:	4b2b      	ldr	r3, [pc, #172]	; (8006204 <HAL_UART_MspInit+0x158>)
 8006158:	2200      	movs	r2, #0
 800615a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800615c:	4b29      	ldr	r3, [pc, #164]	; (8006204 <HAL_UART_MspInit+0x158>)
 800615e:	2200      	movs	r2, #0
 8006160:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006162:	4b28      	ldr	r3, [pc, #160]	; (8006204 <HAL_UART_MspInit+0x158>)
 8006164:	2200      	movs	r2, #0
 8006166:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006168:	4826      	ldr	r0, [pc, #152]	; (8006204 <HAL_UART_MspInit+0x158>)
 800616a:	f000 fa9b 	bl	80066a4 <HAL_DMA_Init>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8006174:	f7ff fe26 	bl	8005dc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a22      	ldr	r2, [pc, #136]	; (8006204 <HAL_UART_MspInit+0x158>)
 800617c:	639a      	str	r2, [r3, #56]	; 0x38
 800617e:	4a21      	ldr	r2, [pc, #132]	; (8006204 <HAL_UART_MspInit+0x158>)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006184:	4b21      	ldr	r3, [pc, #132]	; (800620c <HAL_UART_MspInit+0x160>)
 8006186:	4a22      	ldr	r2, [pc, #136]	; (8006210 <HAL_UART_MspInit+0x164>)
 8006188:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800618a:	4b20      	ldr	r3, [pc, #128]	; (800620c <HAL_UART_MspInit+0x160>)
 800618c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006190:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006192:	4b1e      	ldr	r3, [pc, #120]	; (800620c <HAL_UART_MspInit+0x160>)
 8006194:	2240      	movs	r2, #64	; 0x40
 8006196:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006198:	4b1c      	ldr	r3, [pc, #112]	; (800620c <HAL_UART_MspInit+0x160>)
 800619a:	2200      	movs	r2, #0
 800619c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800619e:	4b1b      	ldr	r3, [pc, #108]	; (800620c <HAL_UART_MspInit+0x160>)
 80061a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061a6:	4b19      	ldr	r3, [pc, #100]	; (800620c <HAL_UART_MspInit+0x160>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061ac:	4b17      	ldr	r3, [pc, #92]	; (800620c <HAL_UART_MspInit+0x160>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80061b2:	4b16      	ldr	r3, [pc, #88]	; (800620c <HAL_UART_MspInit+0x160>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80061b8:	4b14      	ldr	r3, [pc, #80]	; (800620c <HAL_UART_MspInit+0x160>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80061be:	4b13      	ldr	r3, [pc, #76]	; (800620c <HAL_UART_MspInit+0x160>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80061c4:	4811      	ldr	r0, [pc, #68]	; (800620c <HAL_UART_MspInit+0x160>)
 80061c6:	f000 fa6d 	bl	80066a4 <HAL_DMA_Init>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80061d0:	f7ff fdf8 	bl	8005dc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a0d      	ldr	r2, [pc, #52]	; (800620c <HAL_UART_MspInit+0x160>)
 80061d8:	635a      	str	r2, [r3, #52]	; 0x34
 80061da:	4a0c      	ldr	r2, [pc, #48]	; (800620c <HAL_UART_MspInit+0x160>)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80061e0:	2200      	movs	r2, #0
 80061e2:	2100      	movs	r1, #0
 80061e4:	2026      	movs	r0, #38	; 0x26
 80061e6:	f000 fa26 	bl	8006636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80061ea:	2026      	movs	r0, #38	; 0x26
 80061ec:	f000 fa3f 	bl	800666e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80061f0:	bf00      	nop
 80061f2:	3728      	adds	r7, #40	; 0x28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40004400 	.word	0x40004400
 80061fc:	40023800 	.word	0x40023800
 8006200:	40020000 	.word	0x40020000
 8006204:	2000061c 	.word	0x2000061c
 8006208:	40026088 	.word	0x40026088
 800620c:	2000067c 	.word	0x2000067c
 8006210:	400260a0 	.word	0x400260a0

08006214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006218:	e7fe      	b.n	8006218 <NMI_Handler+0x4>

0800621a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800621a:	b480      	push	{r7}
 800621c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800621e:	e7fe      	b.n	800621e <HardFault_Handler+0x4>

08006220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006224:	e7fe      	b.n	8006224 <MemManage_Handler+0x4>

08006226 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006226:	b480      	push	{r7}
 8006228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800622a:	e7fe      	b.n	800622a <BusFault_Handler+0x4>

0800622c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006230:	e7fe      	b.n	8006230 <UsageFault_Handler+0x4>

08006232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006232:	b480      	push	{r7}
 8006234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006236:	bf00      	nop
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006244:	bf00      	nop
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800624e:	b480      	push	{r7}
 8006250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006252:	bf00      	nop
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006260:	f000 f8ee 	bl	8006440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006264:	bf00      	nop
 8006266:	bd80      	pop	{r7, pc}

08006268 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800626c:	4802      	ldr	r0, [pc, #8]	; (8006278 <DMA1_Stream5_IRQHandler+0x10>)
 800626e:	f000 fbb1 	bl	80069d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006272:	bf00      	nop
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	2000061c 	.word	0x2000061c

0800627c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006280:	4802      	ldr	r0, [pc, #8]	; (800628c <DMA1_Stream6_IRQHandler+0x10>)
 8006282:	f000 fba7 	bl	80069d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8006286:	bf00      	nop
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	2000067c 	.word	0x2000067c

08006290 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Emer_Pin);
 8006294:	2020      	movs	r0, #32
 8006296:	f000 ffe5 	bl	8007264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800629a:	bf00      	nop
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80062a4:	4803      	ldr	r0, [pc, #12]	; (80062b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80062a6:	f003 ff15 	bl	800a0d4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80062aa:	4803      	ldr	r0, [pc, #12]	; (80062b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80062ac:	f003 ff12 	bl	800a0d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80062b0:	bf00      	nop
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	200004b8 	.word	0x200004b8
 80062b8:	20000590 	.word	0x20000590

080062bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80062c0:	4802      	ldr	r0, [pc, #8]	; (80062cc <I2C1_EV_IRQHandler+0x10>)
 80062c2:	f001 fa7f 	bl	80077c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80062c6:	bf00      	nop
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000464 	.word	0x20000464

080062d0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80062d4:	4802      	ldr	r0, [pc, #8]	; (80062e0 <I2C1_ER_IRQHandler+0x10>)
 80062d6:	f001 fbe6 	bl	8007aa6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80062da:	bf00      	nop
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000464 	.word	0x20000464

080062e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80062e8:	4802      	ldr	r0, [pc, #8]	; (80062f4 <USART2_IRQHandler+0x10>)
 80062ea:	f004 fe7f 	bl	800afec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80062ee:	bf00      	nop
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	200005d8 	.word	0x200005d8

080062f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Proxi_Pin);
 80062fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006300:	f000 ffb0 	bl	8007264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8006304:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006308:	f000 ffac 	bl	8007264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800630c:	bf00      	nop
 800630e:	bd80      	pop	{r7, pc}

08006310 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006314:	4802      	ldr	r0, [pc, #8]	; (8006320 <TIM5_IRQHandler+0x10>)
 8006316:	f003 fedd 	bl	800a0d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800631a:	bf00      	nop
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000548 	.word	0x20000548

08006324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006324:	b480      	push	{r7}
 8006326:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006328:	4b06      	ldr	r3, [pc, #24]	; (8006344 <SystemInit+0x20>)
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632e:	4a05      	ldr	r2, [pc, #20]	; (8006344 <SystemInit+0x20>)
 8006330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006338:	bf00      	nop
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	e000ed00 	.word	0xe000ed00

08006348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006380 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800634c:	480d      	ldr	r0, [pc, #52]	; (8006384 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800634e:	490e      	ldr	r1, [pc, #56]	; (8006388 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006350:	4a0e      	ldr	r2, [pc, #56]	; (800638c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006354:	e002      	b.n	800635c <LoopCopyDataInit>

08006356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800635a:	3304      	adds	r3, #4

0800635c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800635c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800635e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006360:	d3f9      	bcc.n	8006356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006362:	4a0b      	ldr	r2, [pc, #44]	; (8006390 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006364:	4c0b      	ldr	r4, [pc, #44]	; (8006394 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006368:	e001      	b.n	800636e <LoopFillZerobss>

0800636a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800636a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800636c:	3204      	adds	r2, #4

0800636e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800636e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006370:	d3fb      	bcc.n	800636a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006372:	f7ff ffd7 	bl	8006324 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006376:	f006 f9fb 	bl	800c770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800637a:	f7fd fc7b 	bl	8003c74 <main>
  bx  lr    
 800637e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006388:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 800638c:	0800c82c 	.word	0x0800c82c
  ldr r2, =_sbss
 8006390:	20000440 	.word	0x20000440
  ldr r4, =_ebss
 8006394:	20000b24 	.word	0x20000b24

08006398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006398:	e7fe      	b.n	8006398 <ADC_IRQHandler>
	...

0800639c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80063a0:	4b0e      	ldr	r3, [pc, #56]	; (80063dc <HAL_Init+0x40>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a0d      	ldr	r2, [pc, #52]	; (80063dc <HAL_Init+0x40>)
 80063a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80063ac:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <HAL_Init+0x40>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a0a      	ldr	r2, [pc, #40]	; (80063dc <HAL_Init+0x40>)
 80063b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80063b8:	4b08      	ldr	r3, [pc, #32]	; (80063dc <HAL_Init+0x40>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a07      	ldr	r2, [pc, #28]	; (80063dc <HAL_Init+0x40>)
 80063be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063c4:	2003      	movs	r0, #3
 80063c6:	f000 f92b 	bl	8006620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80063ca:	2000      	movs	r0, #0
 80063cc:	f000 f808 	bl	80063e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80063d0:	f7ff fcfe 	bl	8005dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	40023c00 	.word	0x40023c00

080063e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80063e8:	4b12      	ldr	r3, [pc, #72]	; (8006434 <HAL_InitTick+0x54>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	4b12      	ldr	r3, [pc, #72]	; (8006438 <HAL_InitTick+0x58>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	4619      	mov	r1, r3
 80063f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80063fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 f943 	bl	800668a <HAL_SYSTICK_Config>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e00e      	b.n	800642c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b0f      	cmp	r3, #15
 8006412:	d80a      	bhi.n	800642a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006414:	2200      	movs	r2, #0
 8006416:	6879      	ldr	r1, [r7, #4]
 8006418:	f04f 30ff 	mov.w	r0, #4294967295
 800641c:	f000 f90b 	bl	8006636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006420:	4a06      	ldr	r2, [pc, #24]	; (800643c <HAL_InitTick+0x5c>)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	e000      	b.n	800642c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
}
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	20000430 	.word	0x20000430
 8006438:	20000438 	.word	0x20000438
 800643c:	20000434 	.word	0x20000434

08006440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006444:	4b06      	ldr	r3, [pc, #24]	; (8006460 <HAL_IncTick+0x20>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	461a      	mov	r2, r3
 800644a:	4b06      	ldr	r3, [pc, #24]	; (8006464 <HAL_IncTick+0x24>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4413      	add	r3, r2
 8006450:	4a04      	ldr	r2, [pc, #16]	; (8006464 <HAL_IncTick+0x24>)
 8006452:	6013      	str	r3, [r2, #0]
}
 8006454:	bf00      	nop
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	20000438 	.word	0x20000438
 8006464:	20000b20 	.word	0x20000b20

08006468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  return uwTick;
 800646c:	4b03      	ldr	r3, [pc, #12]	; (800647c <HAL_GetTick+0x14>)
 800646e:	681b      	ldr	r3, [r3, #0]
}
 8006470:	4618      	mov	r0, r3
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	20000b20 	.word	0x20000b20

08006480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006490:	4b0c      	ldr	r3, [pc, #48]	; (80064c4 <__NVIC_SetPriorityGrouping+0x44>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800649c:	4013      	ands	r3, r2
 800649e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064b2:	4a04      	ldr	r2, [pc, #16]	; (80064c4 <__NVIC_SetPriorityGrouping+0x44>)
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	60d3      	str	r3, [r2, #12]
}
 80064b8:	bf00      	nop
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	e000ed00 	.word	0xe000ed00

080064c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064cc:	4b04      	ldr	r3, [pc, #16]	; (80064e0 <__NVIC_GetPriorityGrouping+0x18>)
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	0a1b      	lsrs	r3, r3, #8
 80064d2:	f003 0307 	and.w	r3, r3, #7
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	e000ed00 	.word	0xe000ed00

080064e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	4603      	mov	r3, r0
 80064ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	db0b      	blt.n	800650e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	f003 021f 	and.w	r2, r3, #31
 80064fc:	4907      	ldr	r1, [pc, #28]	; (800651c <__NVIC_EnableIRQ+0x38>)
 80064fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006502:	095b      	lsrs	r3, r3, #5
 8006504:	2001      	movs	r0, #1
 8006506:	fa00 f202 	lsl.w	r2, r0, r2
 800650a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	e000e100 	.word	0xe000e100

08006520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	4603      	mov	r3, r0
 8006528:	6039      	str	r1, [r7, #0]
 800652a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800652c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006530:	2b00      	cmp	r3, #0
 8006532:	db0a      	blt.n	800654a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	b2da      	uxtb	r2, r3
 8006538:	490c      	ldr	r1, [pc, #48]	; (800656c <__NVIC_SetPriority+0x4c>)
 800653a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800653e:	0112      	lsls	r2, r2, #4
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	440b      	add	r3, r1
 8006544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006548:	e00a      	b.n	8006560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	b2da      	uxtb	r2, r3
 800654e:	4908      	ldr	r1, [pc, #32]	; (8006570 <__NVIC_SetPriority+0x50>)
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	f003 030f 	and.w	r3, r3, #15
 8006556:	3b04      	subs	r3, #4
 8006558:	0112      	lsls	r2, r2, #4
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	440b      	add	r3, r1
 800655e:	761a      	strb	r2, [r3, #24]
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	e000e100 	.word	0xe000e100
 8006570:	e000ed00 	.word	0xe000ed00

08006574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006574:	b480      	push	{r7}
 8006576:	b089      	sub	sp, #36	; 0x24
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f1c3 0307 	rsb	r3, r3, #7
 800658e:	2b04      	cmp	r3, #4
 8006590:	bf28      	it	cs
 8006592:	2304      	movcs	r3, #4
 8006594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	3304      	adds	r3, #4
 800659a:	2b06      	cmp	r3, #6
 800659c:	d902      	bls.n	80065a4 <NVIC_EncodePriority+0x30>
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	3b03      	subs	r3, #3
 80065a2:	e000      	b.n	80065a6 <NVIC_EncodePriority+0x32>
 80065a4:	2300      	movs	r3, #0
 80065a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065a8:	f04f 32ff 	mov.w	r2, #4294967295
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	fa02 f303 	lsl.w	r3, r2, r3
 80065b2:	43da      	mvns	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	401a      	ands	r2, r3
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065bc:	f04f 31ff 	mov.w	r1, #4294967295
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	fa01 f303 	lsl.w	r3, r1, r3
 80065c6:	43d9      	mvns	r1, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065cc:	4313      	orrs	r3, r2
         );
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3724      	adds	r7, #36	; 0x24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
	...

080065dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065ec:	d301      	bcc.n	80065f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065ee:	2301      	movs	r3, #1
 80065f0:	e00f      	b.n	8006612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065f2:	4a0a      	ldr	r2, [pc, #40]	; (800661c <SysTick_Config+0x40>)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065fa:	210f      	movs	r1, #15
 80065fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006600:	f7ff ff8e 	bl	8006520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006604:	4b05      	ldr	r3, [pc, #20]	; (800661c <SysTick_Config+0x40>)
 8006606:	2200      	movs	r2, #0
 8006608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800660a:	4b04      	ldr	r3, [pc, #16]	; (800661c <SysTick_Config+0x40>)
 800660c:	2207      	movs	r2, #7
 800660e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	e000e010 	.word	0xe000e010

08006620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7ff ff29 	bl	8006480 <__NVIC_SetPriorityGrouping>
}
 800662e:	bf00      	nop
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006636:	b580      	push	{r7, lr}
 8006638:	b086      	sub	sp, #24
 800663a:	af00      	add	r7, sp, #0
 800663c:	4603      	mov	r3, r0
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	607a      	str	r2, [r7, #4]
 8006642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006644:	2300      	movs	r3, #0
 8006646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006648:	f7ff ff3e 	bl	80064c8 <__NVIC_GetPriorityGrouping>
 800664c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	6978      	ldr	r0, [r7, #20]
 8006654:	f7ff ff8e 	bl	8006574 <NVIC_EncodePriority>
 8006658:	4602      	mov	r2, r0
 800665a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800665e:	4611      	mov	r1, r2
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff ff5d 	bl	8006520 <__NVIC_SetPriority>
}
 8006666:	bf00      	nop
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b082      	sub	sp, #8
 8006672:	af00      	add	r7, sp, #0
 8006674:	4603      	mov	r3, r0
 8006676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800667c:	4618      	mov	r0, r3
 800667e:	f7ff ff31 	bl	80064e4 <__NVIC_EnableIRQ>
}
 8006682:	bf00      	nop
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b082      	sub	sp, #8
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff ffa2 	bl	80065dc <SysTick_Config>
 8006698:	4603      	mov	r3, r0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80066b0:	f7ff feda 	bl	8006468 <HAL_GetTick>
 80066b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e099      	b.n	80067f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0201 	bic.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066e0:	e00f      	b.n	8006702 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066e2:	f7ff fec1 	bl	8006468 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b05      	cmp	r3, #5
 80066ee:	d908      	bls.n	8006702 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2220      	movs	r2, #32
 80066f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2203      	movs	r2, #3
 80066fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e078      	b.n	80067f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e8      	bne.n	80066e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	4b38      	ldr	r3, [pc, #224]	; (80067fc <HAL_DMA_Init+0x158>)
 800671c:	4013      	ands	r3, r2
 800671e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800672e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800673a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006746:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	2b04      	cmp	r3, #4
 800675a:	d107      	bne.n	800676c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006764:	4313      	orrs	r3, r2
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f023 0307 	bic.w	r3, r3, #7
 8006782:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006792:	2b04      	cmp	r3, #4
 8006794:	d117      	bne.n	80067c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00e      	beq.n	80067c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fb0f 	bl	8006dcc <DMA_CheckFifoParam>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d008      	beq.n	80067c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2240      	movs	r2, #64	; 0x40
 80067b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80067c2:	2301      	movs	r3, #1
 80067c4:	e016      	b.n	80067f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fac6 	bl	8006d60 <DMA_CalcBaseAndBitshift>
 80067d4:	4603      	mov	r3, r0
 80067d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067dc:	223f      	movs	r2, #63	; 0x3f
 80067de:	409a      	lsls	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	f010803f 	.word	0xf010803f

08006800 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006816:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800681e:	2b01      	cmp	r3, #1
 8006820:	d101      	bne.n	8006826 <HAL_DMA_Start_IT+0x26>
 8006822:	2302      	movs	r3, #2
 8006824:	e040      	b.n	80068a8 <HAL_DMA_Start_IT+0xa8>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b01      	cmp	r3, #1
 8006838:	d12f      	bne.n	800689a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2202      	movs	r2, #2
 800683e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	68b9      	ldr	r1, [r7, #8]
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 fa58 	bl	8006d04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006858:	223f      	movs	r2, #63	; 0x3f
 800685a:	409a      	lsls	r2, r3
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0216 	orr.w	r2, r2, #22
 800686e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d007      	beq.n	8006888 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0208 	orr.w	r2, r2, #8
 8006886:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0201 	orr.w	r2, r2, #1
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	e005      	b.n	80068a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80068a2:	2302      	movs	r3, #2
 80068a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80068be:	f7ff fdd3 	bl	8006468 <HAL_GetTick>
 80068c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d008      	beq.n	80068e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2280      	movs	r2, #128	; 0x80
 80068d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e052      	b.n	8006988 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0216 	bic.w	r2, r2, #22
 80068f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695a      	ldr	r2, [r3, #20]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006900:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	2b00      	cmp	r3, #0
 8006908:	d103      	bne.n	8006912 <HAL_DMA_Abort+0x62>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690e:	2b00      	cmp	r3, #0
 8006910:	d007      	beq.n	8006922 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0208 	bic.w	r2, r2, #8
 8006920:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0201 	bic.w	r2, r2, #1
 8006930:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006932:	e013      	b.n	800695c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006934:	f7ff fd98 	bl	8006468 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b05      	cmp	r3, #5
 8006940:	d90c      	bls.n	800695c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2220      	movs	r2, #32
 8006946:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2203      	movs	r2, #3
 800694c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e015      	b.n	8006988 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e4      	bne.n	8006934 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800696e:	223f      	movs	r2, #63	; 0x3f
 8006970:	409a      	lsls	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d004      	beq.n	80069ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2280      	movs	r2, #128	; 0x80
 80069a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e00c      	b.n	80069c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2205      	movs	r2, #5
 80069b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0201 	bic.w	r2, r2, #1
 80069c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80069e0:	4b8e      	ldr	r3, [pc, #568]	; (8006c1c <HAL_DMA_IRQHandler+0x248>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a8e      	ldr	r2, [pc, #568]	; (8006c20 <HAL_DMA_IRQHandler+0x24c>)
 80069e6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ea:	0a9b      	lsrs	r3, r3, #10
 80069ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069fe:	2208      	movs	r2, #8
 8006a00:	409a      	lsls	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4013      	ands	r3, r2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d01a      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d013      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0204 	bic.w	r2, r2, #4
 8006a26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a2c:	2208      	movs	r2, #8
 8006a2e:	409a      	lsls	r2, r3
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a38:	f043 0201 	orr.w	r2, r3, #1
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a44:	2201      	movs	r2, #1
 8006a46:	409a      	lsls	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d012      	beq.n	8006a76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00b      	beq.n	8006a76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a62:	2201      	movs	r2, #1
 8006a64:	409a      	lsls	r2, r3
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6e:	f043 0202 	orr.w	r2, r3, #2
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a7a:	2204      	movs	r2, #4
 8006a7c:	409a      	lsls	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4013      	ands	r3, r2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d012      	beq.n	8006aac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00b      	beq.n	8006aac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a98:	2204      	movs	r2, #4
 8006a9a:	409a      	lsls	r2, r3
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa4:	f043 0204 	orr.w	r2, r3, #4
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab0:	2210      	movs	r2, #16
 8006ab2:	409a      	lsls	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d043      	beq.n	8006b44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d03c      	beq.n	8006b44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ace:	2210      	movs	r2, #16
 8006ad0:	409a      	lsls	r2, r3
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d018      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d108      	bne.n	8006b04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d024      	beq.n	8006b44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	4798      	blx	r3
 8006b02:	e01f      	b.n	8006b44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01b      	beq.n	8006b44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	4798      	blx	r3
 8006b14:	e016      	b.n	8006b44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d107      	bne.n	8006b34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0208 	bic.w	r2, r2, #8
 8006b32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b48:	2220      	movs	r2, #32
 8006b4a:	409a      	lsls	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 808f 	beq.w	8006c74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0310 	and.w	r3, r3, #16
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 8087 	beq.w	8006c74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	409a      	lsls	r2, r3
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b05      	cmp	r3, #5
 8006b7c:	d136      	bne.n	8006bec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 0216 	bic.w	r2, r2, #22
 8006b8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	695a      	ldr	r2, [r3, #20]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d103      	bne.n	8006bae <HAL_DMA_IRQHandler+0x1da>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d007      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0208 	bic.w	r2, r2, #8
 8006bbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc2:	223f      	movs	r2, #63	; 0x3f
 8006bc4:	409a      	lsls	r2, r3
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d07e      	beq.n	8006ce0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	4798      	blx	r3
        }
        return;
 8006bea:	e079      	b.n	8006ce0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d01d      	beq.n	8006c36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10d      	bne.n	8006c24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d031      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	4798      	blx	r3
 8006c18:	e02c      	b.n	8006c74 <HAL_DMA_IRQHandler+0x2a0>
 8006c1a:	bf00      	nop
 8006c1c:	20000430 	.word	0x20000430
 8006c20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d023      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	4798      	blx	r3
 8006c34:	e01e      	b.n	8006c74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10f      	bne.n	8006c64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0210 	bic.w	r2, r2, #16
 8006c52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d032      	beq.n	8006ce2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d022      	beq.n	8006cce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2205      	movs	r2, #5
 8006c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0201 	bic.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	60bb      	str	r3, [r7, #8]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d307      	bcc.n	8006cbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1f2      	bne.n	8006ca0 <HAL_DMA_IRQHandler+0x2cc>
 8006cba:	e000      	b.n	8006cbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006cbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d005      	beq.n	8006ce2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	4798      	blx	r3
 8006cde:	e000      	b.n	8006ce2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006ce0:	bf00      	nop
    }
  }
}
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cf6:	b2db      	uxtb	r3, r3
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	2b40      	cmp	r3, #64	; 0x40
 8006d30:	d108      	bne.n	8006d44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006d42:	e007      	b.n	8006d54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	60da      	str	r2, [r3, #12]
}
 8006d54:	bf00      	nop
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	3b10      	subs	r3, #16
 8006d70:	4a14      	ldr	r2, [pc, #80]	; (8006dc4 <DMA_CalcBaseAndBitshift+0x64>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	091b      	lsrs	r3, r3, #4
 8006d78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006d7a:	4a13      	ldr	r2, [pc, #76]	; (8006dc8 <DMA_CalcBaseAndBitshift+0x68>)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	d909      	bls.n	8006da2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006d96:	f023 0303 	bic.w	r3, r3, #3
 8006d9a:	1d1a      	adds	r2, r3, #4
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	659a      	str	r2, [r3, #88]	; 0x58
 8006da0:	e007      	b.n	8006db2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006daa:	f023 0303 	bic.w	r3, r3, #3
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	aaaaaaab 	.word	0xaaaaaaab
 8006dc8:	0800c814 	.word	0x0800c814

08006dcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ddc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d11f      	bne.n	8006e26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d856      	bhi.n	8006e9a <DMA_CheckFifoParam+0xce>
 8006dec:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <DMA_CheckFifoParam+0x28>)
 8006dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df2:	bf00      	nop
 8006df4:	08006e05 	.word	0x08006e05
 8006df8:	08006e17 	.word	0x08006e17
 8006dfc:	08006e05 	.word	0x08006e05
 8006e00:	08006e9b 	.word	0x08006e9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d046      	beq.n	8006e9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e14:	e043      	b.n	8006e9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e1e:	d140      	bne.n	8006ea2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e24:	e03d      	b.n	8006ea2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e2e:	d121      	bne.n	8006e74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d837      	bhi.n	8006ea6 <DMA_CheckFifoParam+0xda>
 8006e36:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <DMA_CheckFifoParam+0x70>)
 8006e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3c:	08006e4d 	.word	0x08006e4d
 8006e40:	08006e53 	.word	0x08006e53
 8006e44:	08006e4d 	.word	0x08006e4d
 8006e48:	08006e65 	.word	0x08006e65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e50:	e030      	b.n	8006eb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d025      	beq.n	8006eaa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e62:	e022      	b.n	8006eaa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e6c:	d11f      	bne.n	8006eae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006e72:	e01c      	b.n	8006eae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d903      	bls.n	8006e82 <DMA_CheckFifoParam+0xb6>
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d003      	beq.n	8006e88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006e80:	e018      	b.n	8006eb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	73fb      	strb	r3, [r7, #15]
      break;
 8006e86:	e015      	b.n	8006eb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00e      	beq.n	8006eb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	73fb      	strb	r3, [r7, #15]
      break;
 8006e98:	e00b      	b.n	8006eb2 <DMA_CheckFifoParam+0xe6>
      break;
 8006e9a:	bf00      	nop
 8006e9c:	e00a      	b.n	8006eb4 <DMA_CheckFifoParam+0xe8>
      break;
 8006e9e:	bf00      	nop
 8006ea0:	e008      	b.n	8006eb4 <DMA_CheckFifoParam+0xe8>
      break;
 8006ea2:	bf00      	nop
 8006ea4:	e006      	b.n	8006eb4 <DMA_CheckFifoParam+0xe8>
      break;
 8006ea6:	bf00      	nop
 8006ea8:	e004      	b.n	8006eb4 <DMA_CheckFifoParam+0xe8>
      break;
 8006eaa:	bf00      	nop
 8006eac:	e002      	b.n	8006eb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8006eae:	bf00      	nop
 8006eb0:	e000      	b.n	8006eb4 <DMA_CheckFifoParam+0xe8>
      break;
 8006eb2:	bf00      	nop
    }
  } 
  
  return status; 
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop

08006ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b089      	sub	sp, #36	; 0x24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006eda:	2300      	movs	r3, #0
 8006edc:	61fb      	str	r3, [r7, #28]
 8006ede:	e159      	b.n	8007194 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	f040 8148 	bne.w	800718e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f003 0303 	and.w	r3, r3, #3
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d005      	beq.n	8006f16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d130      	bne.n	8006f78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	2203      	movs	r2, #3
 8006f22:	fa02 f303 	lsl.w	r3, r2, r3
 8006f26:	43db      	mvns	r3, r3
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	fa02 f303 	lsl.w	r3, r2, r3
 8006f54:	43db      	mvns	r3, r3
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	4013      	ands	r3, r2
 8006f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	091b      	lsrs	r3, r3, #4
 8006f62:	f003 0201 	and.w	r2, r3, #1
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f003 0303 	and.w	r3, r3, #3
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d017      	beq.n	8006fb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	2203      	movs	r2, #3
 8006f90:	fa02 f303 	lsl.w	r3, r2, r3
 8006f94:	43db      	mvns	r3, r3
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f003 0303 	and.w	r3, r3, #3
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d123      	bne.n	8007008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	08da      	lsrs	r2, r3, #3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3208      	adds	r2, #8
 8006fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	f003 0307 	and.w	r3, r3, #7
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	220f      	movs	r2, #15
 8006fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fdc:	43db      	mvns	r3, r3
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	691a      	ldr	r2, [r3, #16]
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	08da      	lsrs	r2, r3, #3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3208      	adds	r2, #8
 8007002:	69b9      	ldr	r1, [r7, #24]
 8007004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	2203      	movs	r2, #3
 8007014:	fa02 f303 	lsl.w	r3, r2, r3
 8007018:	43db      	mvns	r3, r3
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	4013      	ands	r3, r2
 800701e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f003 0203 	and.w	r2, r3, #3
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	fa02 f303 	lsl.w	r3, r2, r3
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	4313      	orrs	r3, r2
 8007034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 80a2 	beq.w	800718e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800704a:	2300      	movs	r3, #0
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	4b57      	ldr	r3, [pc, #348]	; (80071ac <HAL_GPIO_Init+0x2e8>)
 8007050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007052:	4a56      	ldr	r2, [pc, #344]	; (80071ac <HAL_GPIO_Init+0x2e8>)
 8007054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007058:	6453      	str	r3, [r2, #68]	; 0x44
 800705a:	4b54      	ldr	r3, [pc, #336]	; (80071ac <HAL_GPIO_Init+0x2e8>)
 800705c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007066:	4a52      	ldr	r2, [pc, #328]	; (80071b0 <HAL_GPIO_Init+0x2ec>)
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	089b      	lsrs	r3, r3, #2
 800706c:	3302      	adds	r3, #2
 800706e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	220f      	movs	r2, #15
 800707e:	fa02 f303 	lsl.w	r3, r2, r3
 8007082:	43db      	mvns	r3, r3
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	4013      	ands	r3, r2
 8007088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a49      	ldr	r2, [pc, #292]	; (80071b4 <HAL_GPIO_Init+0x2f0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d019      	beq.n	80070c6 <HAL_GPIO_Init+0x202>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a48      	ldr	r2, [pc, #288]	; (80071b8 <HAL_GPIO_Init+0x2f4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d013      	beq.n	80070c2 <HAL_GPIO_Init+0x1fe>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a47      	ldr	r2, [pc, #284]	; (80071bc <HAL_GPIO_Init+0x2f8>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d00d      	beq.n	80070be <HAL_GPIO_Init+0x1fa>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a46      	ldr	r2, [pc, #280]	; (80071c0 <HAL_GPIO_Init+0x2fc>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d007      	beq.n	80070ba <HAL_GPIO_Init+0x1f6>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a45      	ldr	r2, [pc, #276]	; (80071c4 <HAL_GPIO_Init+0x300>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d101      	bne.n	80070b6 <HAL_GPIO_Init+0x1f2>
 80070b2:	2304      	movs	r3, #4
 80070b4:	e008      	b.n	80070c8 <HAL_GPIO_Init+0x204>
 80070b6:	2307      	movs	r3, #7
 80070b8:	e006      	b.n	80070c8 <HAL_GPIO_Init+0x204>
 80070ba:	2303      	movs	r3, #3
 80070bc:	e004      	b.n	80070c8 <HAL_GPIO_Init+0x204>
 80070be:	2302      	movs	r3, #2
 80070c0:	e002      	b.n	80070c8 <HAL_GPIO_Init+0x204>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <HAL_GPIO_Init+0x204>
 80070c6:	2300      	movs	r3, #0
 80070c8:	69fa      	ldr	r2, [r7, #28]
 80070ca:	f002 0203 	and.w	r2, r2, #3
 80070ce:	0092      	lsls	r2, r2, #2
 80070d0:	4093      	lsls	r3, r2
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80070d8:	4935      	ldr	r1, [pc, #212]	; (80071b0 <HAL_GPIO_Init+0x2ec>)
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	089b      	lsrs	r3, r3, #2
 80070de:	3302      	adds	r3, #2
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070e6:	4b38      	ldr	r3, [pc, #224]	; (80071c8 <HAL_GPIO_Init+0x304>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	43db      	mvns	r3, r3
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	4013      	ands	r3, r2
 80070f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800710a:	4a2f      	ldr	r2, [pc, #188]	; (80071c8 <HAL_GPIO_Init+0x304>)
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007110:	4b2d      	ldr	r3, [pc, #180]	; (80071c8 <HAL_GPIO_Init+0x304>)
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	43db      	mvns	r3, r3
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	4013      	ands	r3, r2
 800711e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	4313      	orrs	r3, r2
 8007132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007134:	4a24      	ldr	r2, [pc, #144]	; (80071c8 <HAL_GPIO_Init+0x304>)
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800713a:	4b23      	ldr	r3, [pc, #140]	; (80071c8 <HAL_GPIO_Init+0x304>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	43db      	mvns	r3, r3
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	4013      	ands	r3, r2
 8007148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	4313      	orrs	r3, r2
 800715c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800715e:	4a1a      	ldr	r2, [pc, #104]	; (80071c8 <HAL_GPIO_Init+0x304>)
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007164:	4b18      	ldr	r3, [pc, #96]	; (80071c8 <HAL_GPIO_Init+0x304>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	43db      	mvns	r3, r3
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	4013      	ands	r3, r2
 8007172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	4313      	orrs	r3, r2
 8007186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007188:	4a0f      	ldr	r2, [pc, #60]	; (80071c8 <HAL_GPIO_Init+0x304>)
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	3301      	adds	r3, #1
 8007192:	61fb      	str	r3, [r7, #28]
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	2b0f      	cmp	r3, #15
 8007198:	f67f aea2 	bls.w	8006ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800719c:	bf00      	nop
 800719e:	bf00      	nop
 80071a0:	3724      	adds	r7, #36	; 0x24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	40023800 	.word	0x40023800
 80071b0:	40013800 	.word	0x40013800
 80071b4:	40020000 	.word	0x40020000
 80071b8:	40020400 	.word	0x40020400
 80071bc:	40020800 	.word	0x40020800
 80071c0:	40020c00 	.word	0x40020c00
 80071c4:	40021000 	.word	0x40021000
 80071c8:	40013c00 	.word	0x40013c00

080071cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	691a      	ldr	r2, [r3, #16]
 80071dc:	887b      	ldrh	r3, [r7, #2]
 80071de:	4013      	ands	r3, r2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80071e4:	2301      	movs	r3, #1
 80071e6:	73fb      	strb	r3, [r7, #15]
 80071e8:	e001      	b.n	80071ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	460b      	mov	r3, r1
 8007206:	807b      	strh	r3, [r7, #2]
 8007208:	4613      	mov	r3, r2
 800720a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800720c:	787b      	ldrb	r3, [r7, #1]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007212:	887a      	ldrh	r2, [r7, #2]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007218:	e003      	b.n	8007222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800721a:	887b      	ldrh	r3, [r7, #2]
 800721c:	041a      	lsls	r2, r3, #16
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	619a      	str	r2, [r3, #24]
}
 8007222:	bf00      	nop
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	460b      	mov	r3, r1
 8007238:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007240:	887a      	ldrh	r2, [r7, #2]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4013      	ands	r3, r2
 8007246:	041a      	lsls	r2, r3, #16
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	43d9      	mvns	r1, r3
 800724c:	887b      	ldrh	r3, [r7, #2]
 800724e:	400b      	ands	r3, r1
 8007250:	431a      	orrs	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	619a      	str	r2, [r3, #24]
}
 8007256:	bf00      	nop
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
	...

08007264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	4603      	mov	r3, r0
 800726c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800726e:	4b08      	ldr	r3, [pc, #32]	; (8007290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007270:	695a      	ldr	r2, [r3, #20]
 8007272:	88fb      	ldrh	r3, [r7, #6]
 8007274:	4013      	ands	r3, r2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d006      	beq.n	8007288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800727a:	4a05      	ldr	r2, [pc, #20]	; (8007290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800727c:	88fb      	ldrh	r3, [r7, #6]
 800727e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007280:	88fb      	ldrh	r3, [r7, #6]
 8007282:	4618      	mov	r0, r3
 8007284:	f7fe fb88 	bl	8005998 <HAL_GPIO_EXTI_Callback>
  }
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	40013c00 	.word	0x40013c00

08007294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e12b      	b.n	80074fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d106      	bne.n	80072c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7fe fdb0 	bl	8005e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2224      	movs	r2, #36	; 0x24
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0201 	bic.w	r2, r2, #1
 80072d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80072f8:	f002 fbb0 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 80072fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	4a81      	ldr	r2, [pc, #516]	; (8007508 <HAL_I2C_Init+0x274>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d807      	bhi.n	8007318 <HAL_I2C_Init+0x84>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4a80      	ldr	r2, [pc, #512]	; (800750c <HAL_I2C_Init+0x278>)
 800730c:	4293      	cmp	r3, r2
 800730e:	bf94      	ite	ls
 8007310:	2301      	movls	r3, #1
 8007312:	2300      	movhi	r3, #0
 8007314:	b2db      	uxtb	r3, r3
 8007316:	e006      	b.n	8007326 <HAL_I2C_Init+0x92>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4a7d      	ldr	r2, [pc, #500]	; (8007510 <HAL_I2C_Init+0x27c>)
 800731c:	4293      	cmp	r3, r2
 800731e:	bf94      	ite	ls
 8007320:	2301      	movls	r3, #1
 8007322:	2300      	movhi	r3, #0
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e0e7      	b.n	80074fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	4a78      	ldr	r2, [pc, #480]	; (8007514 <HAL_I2C_Init+0x280>)
 8007332:	fba2 2303 	umull	r2, r3, r2, r3
 8007336:	0c9b      	lsrs	r3, r3, #18
 8007338:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	430a      	orrs	r2, r1
 800734c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	4a6a      	ldr	r2, [pc, #424]	; (8007508 <HAL_I2C_Init+0x274>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d802      	bhi.n	8007368 <HAL_I2C_Init+0xd4>
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	3301      	adds	r3, #1
 8007366:	e009      	b.n	800737c <HAL_I2C_Init+0xe8>
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800736e:	fb02 f303 	mul.w	r3, r2, r3
 8007372:	4a69      	ldr	r2, [pc, #420]	; (8007518 <HAL_I2C_Init+0x284>)
 8007374:	fba2 2303 	umull	r2, r3, r2, r3
 8007378:	099b      	lsrs	r3, r3, #6
 800737a:	3301      	adds	r3, #1
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	6812      	ldr	r2, [r2, #0]
 8007380:	430b      	orrs	r3, r1
 8007382:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800738e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	495c      	ldr	r1, [pc, #368]	; (8007508 <HAL_I2C_Init+0x274>)
 8007398:	428b      	cmp	r3, r1
 800739a:	d819      	bhi.n	80073d0 <HAL_I2C_Init+0x13c>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	1e59      	subs	r1, r3, #1
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	005b      	lsls	r3, r3, #1
 80073a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80073aa:	1c59      	adds	r1, r3, #1
 80073ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80073b0:	400b      	ands	r3, r1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00a      	beq.n	80073cc <HAL_I2C_Init+0x138>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	1e59      	subs	r1, r3, #1
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80073c4:	3301      	adds	r3, #1
 80073c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073ca:	e051      	b.n	8007470 <HAL_I2C_Init+0x1dc>
 80073cc:	2304      	movs	r3, #4
 80073ce:	e04f      	b.n	8007470 <HAL_I2C_Init+0x1dc>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d111      	bne.n	80073fc <HAL_I2C_Init+0x168>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	1e58      	subs	r0, r3, #1
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6859      	ldr	r1, [r3, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	440b      	add	r3, r1
 80073e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80073ea:	3301      	adds	r3, #1
 80073ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	bf0c      	ite	eq
 80073f4:	2301      	moveq	r3, #1
 80073f6:	2300      	movne	r3, #0
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	e012      	b.n	8007422 <HAL_I2C_Init+0x18e>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	1e58      	subs	r0, r3, #1
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6859      	ldr	r1, [r3, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	440b      	add	r3, r1
 800740a:	0099      	lsls	r1, r3, #2
 800740c:	440b      	add	r3, r1
 800740e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007412:	3301      	adds	r3, #1
 8007414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007418:	2b00      	cmp	r3, #0
 800741a:	bf0c      	ite	eq
 800741c:	2301      	moveq	r3, #1
 800741e:	2300      	movne	r3, #0
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <HAL_I2C_Init+0x196>
 8007426:	2301      	movs	r3, #1
 8007428:	e022      	b.n	8007470 <HAL_I2C_Init+0x1dc>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10e      	bne.n	8007450 <HAL_I2C_Init+0x1bc>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	1e58      	subs	r0, r3, #1
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6859      	ldr	r1, [r3, #4]
 800743a:	460b      	mov	r3, r1
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	440b      	add	r3, r1
 8007440:	fbb0 f3f3 	udiv	r3, r0, r3
 8007444:	3301      	adds	r3, #1
 8007446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800744a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800744e:	e00f      	b.n	8007470 <HAL_I2C_Init+0x1dc>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	1e58      	subs	r0, r3, #1
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6859      	ldr	r1, [r3, #4]
 8007458:	460b      	mov	r3, r1
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	440b      	add	r3, r1
 800745e:	0099      	lsls	r1, r3, #2
 8007460:	440b      	add	r3, r1
 8007462:	fbb0 f3f3 	udiv	r3, r0, r3
 8007466:	3301      	adds	r3, #1
 8007468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800746c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	6809      	ldr	r1, [r1, #0]
 8007474:	4313      	orrs	r3, r2
 8007476:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	69da      	ldr	r2, [r3, #28]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	431a      	orrs	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800749e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	6911      	ldr	r1, [r2, #16]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	68d2      	ldr	r2, [r2, #12]
 80074aa:	4311      	orrs	r1, r2
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	6812      	ldr	r2, [r2, #0]
 80074b0:	430b      	orrs	r3, r1
 80074b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	695a      	ldr	r2, [r3, #20]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	431a      	orrs	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0201 	orr.w	r2, r2, #1
 80074de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2220      	movs	r2, #32
 80074ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	000186a0 	.word	0x000186a0
 800750c:	001e847f 	.word	0x001e847f
 8007510:	003d08ff 	.word	0x003d08ff
 8007514:	431bde83 	.word	0x431bde83
 8007518:	10624dd3 	.word	0x10624dd3

0800751c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	607a      	str	r2, [r7, #4]
 8007526:	461a      	mov	r2, r3
 8007528:	460b      	mov	r3, r1
 800752a:	817b      	strh	r3, [r7, #10]
 800752c:	4613      	mov	r3, r2
 800752e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b20      	cmp	r3, #32
 800753e:	f040 8085 	bne.w	800764c <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007542:	4b46      	ldr	r3, [pc, #280]	; (800765c <HAL_I2C_Master_Transmit_IT+0x140>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	08db      	lsrs	r3, r3, #3
 8007548:	4a45      	ldr	r2, [pc, #276]	; (8007660 <HAL_I2C_Master_Transmit_IT+0x144>)
 800754a:	fba2 2303 	umull	r2, r3, r2, r3
 800754e:	0a1a      	lsrs	r2, r3, #8
 8007550:	4613      	mov	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	009a      	lsls	r2, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	3b01      	subs	r3, #1
 8007560:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d116      	bne.n	8007596 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2220      	movs	r2, #32
 8007572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	f043 0220 	orr.w	r2, r3, #32
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e05b      	b.n	800764e <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d0db      	beq.n	800755c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d101      	bne.n	80075b2 <HAL_I2C_Master_Transmit_IT+0x96>
 80075ae:	2302      	movs	r3, #2
 80075b0:	e04d      	b.n	800764e <HAL_I2C_Master_Transmit_IT+0x132>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d007      	beq.n	80075d8 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f042 0201 	orr.w	r2, r2, #1
 80075d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2221      	movs	r2, #33	; 0x21
 80075ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2210      	movs	r2, #16
 80075f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	893a      	ldrh	r2, [r7, #8]
 8007608:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4a13      	ldr	r2, [pc, #76]	; (8007664 <HAL_I2C_Master_Transmit_IT+0x148>)
 8007618:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800761a:	897a      	ldrh	r2, [r7, #10]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007636:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007646:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	e000      	b.n	800764e <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800764c:	2302      	movs	r3, #2
  }
}
 800764e:	4618      	mov	r0, r3
 8007650:	371c      	adds	r7, #28
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	20000430 	.word	0x20000430
 8007660:	14f8b589 	.word	0x14f8b589
 8007664:	ffff0000 	.word	0xffff0000

08007668 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	607a      	str	r2, [r7, #4]
 8007672:	461a      	mov	r2, r3
 8007674:	460b      	mov	r3, r1
 8007676:	817b      	strh	r3, [r7, #10]
 8007678:	4613      	mov	r3, r2
 800767a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b20      	cmp	r3, #32
 800768a:	f040 808d 	bne.w	80077a8 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800768e:	4b4a      	ldr	r3, [pc, #296]	; (80077b8 <HAL_I2C_Master_Receive_IT+0x150>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	08db      	lsrs	r3, r3, #3
 8007694:	4a49      	ldr	r2, [pc, #292]	; (80077bc <HAL_I2C_Master_Receive_IT+0x154>)
 8007696:	fba2 2303 	umull	r2, r3, r2, r3
 800769a:	0a1a      	lsrs	r2, r3, #8
 800769c:	4613      	mov	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	009a      	lsls	r2, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d116      	bne.n	80076e2 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2220      	movs	r2, #32
 80076be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ce:	f043 0220 	orr.w	r2, r3, #32
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e063      	b.n	80077aa <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	f003 0302 	and.w	r3, r3, #2
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d0db      	beq.n	80076a8 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d101      	bne.n	80076fe <HAL_I2C_Master_Receive_IT+0x96>
 80076fa:	2302      	movs	r3, #2
 80076fc:	e055      	b.n	80077aa <HAL_I2C_Master_Receive_IT+0x142>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b01      	cmp	r3, #1
 8007712:	d007      	beq.n	8007724 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0201 	orr.w	r2, r2, #1
 8007722:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007732:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2222      	movs	r2, #34	; 0x22
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2210      	movs	r2, #16
 8007740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	893a      	ldrh	r2, [r7, #8]
 8007754:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775a:	b29a      	uxth	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4a17      	ldr	r2, [pc, #92]	; (80077c0 <HAL_I2C_Master_Receive_IT+0x158>)
 8007764:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007766:	897a      	ldrh	r2, [r7, #10]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007782:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007792:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077a2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	e000      	b.n	80077aa <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80077a8:	2302      	movs	r3, #2
  }
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	371c      	adds	r7, #28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	20000430 	.word	0x20000430
 80077bc:	14f8b589 	.word	0x14f8b589
 80077c0:	ffff0000 	.word	0xffff0000

080077c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80077cc:	2300      	movs	r3, #0
 80077ce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	2b10      	cmp	r3, #16
 80077f2:	d003      	beq.n	80077fc <HAL_I2C_EV_IRQHandler+0x38>
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	2b40      	cmp	r3, #64	; 0x40
 80077f8:	f040 80c1 	bne.w	800797e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10d      	bne.n	8007832 <HAL_I2C_EV_IRQHandler+0x6e>
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800781c:	d003      	beq.n	8007826 <HAL_I2C_EV_IRQHandler+0x62>
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007824:	d101      	bne.n	800782a <HAL_I2C_EV_IRQHandler+0x66>
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <HAL_I2C_EV_IRQHandler+0x68>
 800782a:	2300      	movs	r3, #0
 800782c:	2b01      	cmp	r3, #1
 800782e:	f000 8132 	beq.w	8007a96 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00c      	beq.n	8007856 <HAL_I2C_EV_IRQHandler+0x92>
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	0a5b      	lsrs	r3, r3, #9
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	d006      	beq.n	8007856 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 fc7b 	bl	8009144 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fd83 	bl	800835a <I2C_Master_SB>
 8007854:	e092      	b.n	800797c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	08db      	lsrs	r3, r3, #3
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d009      	beq.n	8007876 <HAL_I2C_EV_IRQHandler+0xb2>
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	0a5b      	lsrs	r3, r3, #9
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	d003      	beq.n	8007876 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fdf9 	bl	8008466 <I2C_Master_ADD10>
 8007874:	e082      	b.n	800797c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	085b      	lsrs	r3, r3, #1
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	d009      	beq.n	8007896 <HAL_I2C_EV_IRQHandler+0xd2>
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	0a5b      	lsrs	r3, r3, #9
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fe13 	bl	80084ba <I2C_Master_ADDR>
 8007894:	e072      	b.n	800797c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	089b      	lsrs	r3, r3, #2
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d03b      	beq.n	800791a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078b0:	f000 80f3 	beq.w	8007a9a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	09db      	lsrs	r3, r3, #7
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00f      	beq.n	80078e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	0a9b      	lsrs	r3, r3, #10
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d009      	beq.n	80078e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	089b      	lsrs	r3, r3, #2
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d103      	bne.n	80078e0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f9f3 	bl	8007cc4 <I2C_MasterTransmit_TXE>
 80078de:	e04d      	b.n	800797c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	089b      	lsrs	r3, r3, #2
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 80d6 	beq.w	8007a9a <HAL_I2C_EV_IRQHandler+0x2d6>
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	0a5b      	lsrs	r3, r3, #9
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 80cf 	beq.w	8007a9a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b21      	cmp	r3, #33	; 0x21
 8007900:	d103      	bne.n	800790a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fa7a 	bl	8007dfc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007908:	e0c7      	b.n	8007a9a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800790a:	7bfb      	ldrb	r3, [r7, #15]
 800790c:	2b40      	cmp	r3, #64	; 0x40
 800790e:	f040 80c4 	bne.w	8007a9a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fae8 	bl	8007ee8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007918:	e0bf      	b.n	8007a9a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007928:	f000 80b7 	beq.w	8007a9a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	099b      	lsrs	r3, r3, #6
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00f      	beq.n	8007958 <HAL_I2C_EV_IRQHandler+0x194>
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	0a9b      	lsrs	r3, r3, #10
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d009      	beq.n	8007958 <HAL_I2C_EV_IRQHandler+0x194>
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	089b      	lsrs	r3, r3, #2
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	d103      	bne.n	8007958 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fb5d 	bl	8008010 <I2C_MasterReceive_RXNE>
 8007956:	e011      	b.n	800797c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	089b      	lsrs	r3, r3, #2
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 809a 	beq.w	8007a9a <HAL_I2C_EV_IRQHandler+0x2d6>
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	0a5b      	lsrs	r3, r3, #9
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 8093 	beq.w	8007a9a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fc06 	bl	8008186 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800797a:	e08e      	b.n	8007a9a <HAL_I2C_EV_IRQHandler+0x2d6>
 800797c:	e08d      	b.n	8007a9a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007982:	2b00      	cmp	r3, #0
 8007984:	d004      	beq.n	8007990 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	61fb      	str	r3, [r7, #28]
 800798e:	e007      	b.n	80079a0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	085b      	lsrs	r3, r3, #1
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d012      	beq.n	80079d2 <HAL_I2C_EV_IRQHandler+0x20e>
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	0a5b      	lsrs	r3, r3, #9
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00c      	beq.n	80079d2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80079c8:	69b9      	ldr	r1, [r7, #24]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 ffc4 	bl	8008958 <I2C_Slave_ADDR>
 80079d0:	e066      	b.n	8007aa0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	091b      	lsrs	r3, r3, #4
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <HAL_I2C_EV_IRQHandler+0x22e>
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	0a5b      	lsrs	r3, r3, #9
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fffe 	bl	80089ec <I2C_Slave_STOPF>
 80079f0:	e056      	b.n	8007aa0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	2b21      	cmp	r3, #33	; 0x21
 80079f6:	d002      	beq.n	80079fe <HAL_I2C_EV_IRQHandler+0x23a>
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
 80079fa:	2b29      	cmp	r3, #41	; 0x29
 80079fc:	d125      	bne.n	8007a4a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	09db      	lsrs	r3, r3, #7
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00f      	beq.n	8007a2a <HAL_I2C_EV_IRQHandler+0x266>
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	0a9b      	lsrs	r3, r3, #10
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d009      	beq.n	8007a2a <HAL_I2C_EV_IRQHandler+0x266>
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	089b      	lsrs	r3, r3, #2
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d103      	bne.n	8007a2a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 feda 	bl	80087dc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a28:	e039      	b.n	8007a9e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	089b      	lsrs	r3, r3, #2
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d033      	beq.n	8007a9e <HAL_I2C_EV_IRQHandler+0x2da>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	0a5b      	lsrs	r3, r3, #9
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d02d      	beq.n	8007a9e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 ff07 	bl	8008856 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a48:	e029      	b.n	8007a9e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	099b      	lsrs	r3, r3, #6
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00f      	beq.n	8007a76 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	0a9b      	lsrs	r3, r3, #10
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d009      	beq.n	8007a76 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	089b      	lsrs	r3, r3, #2
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d103      	bne.n	8007a76 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 ff12 	bl	8008898 <I2C_SlaveReceive_RXNE>
 8007a74:	e014      	b.n	8007aa0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	089b      	lsrs	r3, r3, #2
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00e      	beq.n	8007aa0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	0a5b      	lsrs	r3, r3, #9
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d008      	beq.n	8007aa0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 ff40 	bl	8008914 <I2C_SlaveReceive_BTF>
 8007a94:	e004      	b.n	8007aa0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007a96:	bf00      	nop
 8007a98:	e002      	b.n	8007aa0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a9a:	bf00      	nop
 8007a9c:	e000      	b.n	8007aa0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a9e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007aa0:	3720      	adds	r7, #32
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b08a      	sub	sp, #40	; 0x28
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ac8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	0a1b      	lsrs	r3, r3, #8
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00e      	beq.n	8007af4 <HAL_I2C_ER_IRQHandler+0x4e>
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	0a1b      	lsrs	r3, r3, #8
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d008      	beq.n	8007af4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	f043 0301 	orr.w	r3, r3, #1
 8007ae8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007af2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	0a5b      	lsrs	r3, r3, #9
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00e      	beq.n	8007b1e <HAL_I2C_ER_IRQHandler+0x78>
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	0a1b      	lsrs	r3, r3, #8
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d008      	beq.n	8007b1e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	f043 0302 	orr.w	r3, r3, #2
 8007b12:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007b1c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	0a9b      	lsrs	r3, r3, #10
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d03f      	beq.n	8007baa <HAL_I2C_ER_IRQHandler+0x104>
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	0a1b      	lsrs	r3, r3, #8
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d039      	beq.n	8007baa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007b36:	7efb      	ldrb	r3, [r7, #27]
 8007b38:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b48:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007b50:	7ebb      	ldrb	r3, [r7, #26]
 8007b52:	2b20      	cmp	r3, #32
 8007b54:	d112      	bne.n	8007b7c <HAL_I2C_ER_IRQHandler+0xd6>
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10f      	bne.n	8007b7c <HAL_I2C_ER_IRQHandler+0xd6>
 8007b5c:	7cfb      	ldrb	r3, [r7, #19]
 8007b5e:	2b21      	cmp	r3, #33	; 0x21
 8007b60:	d008      	beq.n	8007b74 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007b62:	7cfb      	ldrb	r3, [r7, #19]
 8007b64:	2b29      	cmp	r3, #41	; 0x29
 8007b66:	d005      	beq.n	8007b74 <HAL_I2C_ER_IRQHandler+0xce>
 8007b68:	7cfb      	ldrb	r3, [r7, #19]
 8007b6a:	2b28      	cmp	r3, #40	; 0x28
 8007b6c:	d106      	bne.n	8007b7c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2b21      	cmp	r3, #33	; 0x21
 8007b72:	d103      	bne.n	8007b7c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 f869 	bl	8008c4c <I2C_Slave_AF>
 8007b7a:	e016      	b.n	8007baa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b84:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b88:	f043 0304 	orr.w	r3, r3, #4
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007b8e:	7efb      	ldrb	r3, [r7, #27]
 8007b90:	2b10      	cmp	r3, #16
 8007b92:	d002      	beq.n	8007b9a <HAL_I2C_ER_IRQHandler+0xf4>
 8007b94:	7efb      	ldrb	r3, [r7, #27]
 8007b96:	2b40      	cmp	r3, #64	; 0x40
 8007b98:	d107      	bne.n	8007baa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ba8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	0adb      	lsrs	r3, r3, #11
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00e      	beq.n	8007bd4 <HAL_I2C_ER_IRQHandler+0x12e>
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	0a1b      	lsrs	r3, r3, #8
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d008      	beq.n	8007bd4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc4:	f043 0308 	orr.w	r3, r3, #8
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007bd2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d008      	beq.n	8007bec <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be0:	431a      	orrs	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f001 f8a0 	bl	8008d2c <I2C_ITError>
  }
}
 8007bec:	bf00      	nop
 8007bee:	3728      	adds	r7, #40	; 0x28
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70fb      	strb	r3, [r7, #3]
 8007c50:	4613      	mov	r3, r2
 8007c52:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cd2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cda:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d150      	bne.n	8007d8c <I2C_MasterTransmit_TXE+0xc8>
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	2b21      	cmp	r3, #33	; 0x21
 8007cee:	d14d      	bne.n	8007d8c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2b08      	cmp	r3, #8
 8007cf4:	d01d      	beq.n	8007d32 <I2C_MasterTransmit_TXE+0x6e>
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2b20      	cmp	r3, #32
 8007cfa:	d01a      	beq.n	8007d32 <I2C_MasterTransmit_TXE+0x6e>
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d02:	d016      	beq.n	8007d32 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d12:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2211      	movs	r2, #17
 8007d18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7ff ff62 	bl	8007bf4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d30:	e060      	b.n	8007df4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d40:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d50:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b40      	cmp	r3, #64	; 0x40
 8007d6a:	d107      	bne.n	8007d7c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7ff ff7d 	bl	8007c74 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d7a:	e03b      	b.n	8007df4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff ff35 	bl	8007bf4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d8a:	e033      	b.n	8007df4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
 8007d8e:	2b21      	cmp	r3, #33	; 0x21
 8007d90:	d005      	beq.n	8007d9e <I2C_MasterTransmit_TXE+0xda>
 8007d92:	7bbb      	ldrb	r3, [r7, #14]
 8007d94:	2b40      	cmp	r3, #64	; 0x40
 8007d96:	d12d      	bne.n	8007df4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
 8007d9a:	2b22      	cmp	r3, #34	; 0x22
 8007d9c:	d12a      	bne.n	8007df4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d108      	bne.n	8007dba <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007db6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007db8:	e01c      	b.n	8007df4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b40      	cmp	r3, #64	; 0x40
 8007dc4:	d103      	bne.n	8007dce <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f88e 	bl	8007ee8 <I2C_MemoryTransmit_TXE_BTF>
}
 8007dcc:	e012      	b.n	8007df4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	781a      	ldrb	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007df2:	e7ff      	b.n	8007df4 <I2C_MasterTransmit_TXE+0x130>
 8007df4:	bf00      	nop
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b21      	cmp	r3, #33	; 0x21
 8007e14:	d164      	bne.n	8007ee0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d012      	beq.n	8007e46 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	781a      	ldrb	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	1c5a      	adds	r2, r3, #1
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007e44:	e04c      	b.n	8007ee0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b08      	cmp	r3, #8
 8007e4a:	d01d      	beq.n	8007e88 <I2C_MasterTransmit_BTF+0x8c>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	d01a      	beq.n	8007e88 <I2C_MasterTransmit_BTF+0x8c>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e58:	d016      	beq.n	8007e88 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e68:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2211      	movs	r2, #17
 8007e6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7ff feb7 	bl	8007bf4 <HAL_I2C_MasterTxCpltCallback>
}
 8007e86:	e02b      	b.n	8007ee0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e96:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ea6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b40      	cmp	r3, #64	; 0x40
 8007ec0:	d107      	bne.n	8007ed2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7ff fed2 	bl	8007c74 <HAL_I2C_MemTxCpltCallback>
}
 8007ed0:	e006      	b.n	8007ee0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7ff fe8a 	bl	8007bf4 <HAL_I2C_MasterTxCpltCallback>
}
 8007ee0:	bf00      	nop
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d11d      	bne.n	8007f3c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d10b      	bne.n	8007f20 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f18:	1c9a      	adds	r2, r3, #2
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007f1e:	e073      	b.n	8008008 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	121b      	asrs	r3, r3, #8
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007f3a:	e065      	b.n	8008008 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d10b      	bne.n	8007f5c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007f5a:	e055      	b.n	8008008 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d151      	bne.n	8008008 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	2b22      	cmp	r3, #34	; 0x22
 8007f68:	d10d      	bne.n	8007f86 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f78:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f7e:	1c5a      	adds	r2, r3, #1
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007f84:	e040      	b.n	8008008 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d015      	beq.n	8007fbc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	2b21      	cmp	r3, #33	; 0x21
 8007f94:	d112      	bne.n	8007fbc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	781a      	ldrb	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007fba:	e025      	b.n	8008008 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d120      	bne.n	8008008 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
 8007fc8:	2b21      	cmp	r3, #33	; 0x21
 8007fca:	d11d      	bne.n	8008008 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007fda:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7ff fe36 	bl	8007c74 <HAL_I2C_MemTxCpltCallback>
}
 8008008:	bf00      	nop
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b22      	cmp	r3, #34	; 0x22
 8008022:	f040 80ac 	bne.w	800817e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800802a:	b29b      	uxth	r3, r3
 800802c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2b03      	cmp	r3, #3
 8008032:	d921      	bls.n	8008078 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	691a      	ldr	r2, [r3, #16]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803e:	b2d2      	uxtb	r2, r2
 8008040:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	1c5a      	adds	r2, r3, #1
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008050:	b29b      	uxth	r3, r3
 8008052:	3b01      	subs	r3, #1
 8008054:	b29a      	uxth	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800805e:	b29b      	uxth	r3, r3
 8008060:	2b03      	cmp	r3, #3
 8008062:	f040 808c 	bne.w	800817e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008074:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008076:	e082      	b.n	800817e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807c:	2b02      	cmp	r3, #2
 800807e:	d075      	beq.n	800816c <I2C_MasterReceive_RXNE+0x15c>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d002      	beq.n	800808c <I2C_MasterReceive_RXNE+0x7c>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d16f      	bne.n	800816c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f001 f827 	bl	80090e0 <I2C_WaitOnSTOPRequestThroughIT>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d142      	bne.n	800811e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080a6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80080b6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	691a      	ldr	r2, [r3, #16]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	b2d2      	uxtb	r2, r2
 80080c4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	1c5a      	adds	r2, r3, #1
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29a      	uxth	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2220      	movs	r2, #32
 80080e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b40      	cmp	r3, #64	; 0x40
 80080f0:	d10a      	bne.n	8008108 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff fdc1 	bl	8007c88 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008106:	e03a      	b.n	800817e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2212      	movs	r2, #18
 8008114:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff fd76 	bl	8007c08 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800811c:	e02f      	b.n	800817e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800812c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	691a      	ldr	r2, [r3, #16]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	b2d2      	uxtb	r2, r2
 800813a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800814a:	b29b      	uxth	r3, r3
 800814c:	3b01      	subs	r3, #1
 800814e:	b29a      	uxth	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2220      	movs	r2, #32
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7ff fd99 	bl	8007c9c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800816a:	e008      	b.n	800817e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	685a      	ldr	r2, [r3, #4]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800817a:	605a      	str	r2, [r3, #4]
}
 800817c:	e7ff      	b.n	800817e <I2C_MasterReceive_RXNE+0x16e>
 800817e:	bf00      	nop
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008192:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008198:	b29b      	uxth	r3, r3
 800819a:	2b04      	cmp	r3, #4
 800819c:	d11b      	bne.n	80081d6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	685a      	ldr	r2, [r3, #4]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081ac:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	691a      	ldr	r2, [r3, #16]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	b2d2      	uxtb	r2, r2
 80081ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	1c5a      	adds	r2, r3, #1
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	3b01      	subs	r3, #1
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80081d4:	e0bd      	b.n	8008352 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081da:	b29b      	uxth	r3, r3
 80081dc:	2b03      	cmp	r3, #3
 80081de:	d129      	bne.n	8008234 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685a      	ldr	r2, [r3, #4]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081ee:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b04      	cmp	r3, #4
 80081f4:	d00a      	beq.n	800820c <I2C_MasterReceive_BTF+0x86>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d007      	beq.n	800820c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800820a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	691a      	ldr	r2, [r3, #16]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	b2d2      	uxtb	r2, r2
 8008218:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008228:	b29b      	uxth	r3, r3
 800822a:	3b01      	subs	r3, #1
 800822c:	b29a      	uxth	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008232:	e08e      	b.n	8008352 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008238:	b29b      	uxth	r3, r3
 800823a:	2b02      	cmp	r3, #2
 800823c:	d176      	bne.n	800832c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d002      	beq.n	800824a <I2C_MasterReceive_BTF+0xc4>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b10      	cmp	r3, #16
 8008248:	d108      	bne.n	800825c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	e019      	b.n	8008290 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2b04      	cmp	r3, #4
 8008260:	d002      	beq.n	8008268 <I2C_MasterReceive_BTF+0xe2>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2b02      	cmp	r3, #2
 8008266:	d108      	bne.n	800827a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	e00a      	b.n	8008290 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2b10      	cmp	r3, #16
 800827e:	d007      	beq.n	8008290 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800828e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	691a      	ldr	r2, [r3, #16]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	b2d2      	uxtb	r2, r2
 800829c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	3b01      	subs	r3, #1
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	691a      	ldr	r2, [r3, #16]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	3b01      	subs	r3, #1
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80082ea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2220      	movs	r2, #32
 80082f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b40      	cmp	r3, #64	; 0x40
 80082fe:	d10a      	bne.n	8008316 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7ff fcba 	bl	8007c88 <HAL_I2C_MemRxCpltCallback>
}
 8008314:	e01d      	b.n	8008352 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2212      	movs	r2, #18
 8008322:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7ff fc6f 	bl	8007c08 <HAL_I2C_MasterRxCpltCallback>
}
 800832a:	e012      	b.n	8008352 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	691a      	ldr	r2, [r3, #16]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	b2d2      	uxtb	r2, r2
 8008338:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008348:	b29b      	uxth	r3, r3
 800834a:	3b01      	subs	r3, #1
 800834c:	b29a      	uxth	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800835a:	b480      	push	{r7}
 800835c:	b083      	sub	sp, #12
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b40      	cmp	r3, #64	; 0x40
 800836c:	d117      	bne.n	800839e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008372:	2b00      	cmp	r3, #0
 8008374:	d109      	bne.n	800838a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800837a:	b2db      	uxtb	r3, r3
 800837c:	461a      	mov	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008386:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008388:	e067      	b.n	800845a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800838e:	b2db      	uxtb	r3, r3
 8008390:	f043 0301 	orr.w	r3, r3, #1
 8008394:	b2da      	uxtb	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	611a      	str	r2, [r3, #16]
}
 800839c:	e05d      	b.n	800845a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083a6:	d133      	bne.n	8008410 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b21      	cmp	r3, #33	; 0x21
 80083b2:	d109      	bne.n	80083c8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	461a      	mov	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80083c4:	611a      	str	r2, [r3, #16]
 80083c6:	e008      	b.n	80083da <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	f043 0301 	orr.w	r3, r3, #1
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d004      	beq.n	80083ec <I2C_Master_SB+0x92>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d108      	bne.n	80083fe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d032      	beq.n	800845a <I2C_Master_SB+0x100>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d02d      	beq.n	800845a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800840c:	605a      	str	r2, [r3, #4]
}
 800840e:	e024      	b.n	800845a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10e      	bne.n	8008436 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800841c:	b29b      	uxth	r3, r3
 800841e:	11db      	asrs	r3, r3, #7
 8008420:	b2db      	uxtb	r3, r3
 8008422:	f003 0306 	and.w	r3, r3, #6
 8008426:	b2db      	uxtb	r3, r3
 8008428:	f063 030f 	orn	r3, r3, #15
 800842c:	b2da      	uxtb	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	611a      	str	r2, [r3, #16]
}
 8008434:	e011      	b.n	800845a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800843a:	2b01      	cmp	r3, #1
 800843c:	d10d      	bne.n	800845a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008442:	b29b      	uxth	r3, r3
 8008444:	11db      	asrs	r3, r3, #7
 8008446:	b2db      	uxtb	r3, r3
 8008448:	f003 0306 	and.w	r3, r3, #6
 800844c:	b2db      	uxtb	r3, r3
 800844e:	f063 030e 	orn	r3, r3, #14
 8008452:	b2da      	uxtb	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	611a      	str	r2, [r3, #16]
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008472:	b2da      	uxtb	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847e:	2b00      	cmp	r3, #0
 8008480:	d004      	beq.n	800848c <I2C_Master_ADD10+0x26>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008488:	2b00      	cmp	r3, #0
 800848a:	d108      	bne.n	800849e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00c      	beq.n	80084ae <I2C_Master_ADD10+0x48>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849a:	2b00      	cmp	r3, #0
 800849c:	d007      	beq.n	80084ae <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	685a      	ldr	r2, [r3, #4]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084ac:	605a      	str	r2, [r3, #4]
  }
}
 80084ae:	bf00      	nop
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b091      	sub	sp, #68	; 0x44
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b22      	cmp	r3, #34	; 0x22
 80084e2:	f040 8169 	bne.w	80087b8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10f      	bne.n	800850e <I2C_Master_ADDR+0x54>
 80084ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80084f2:	2b40      	cmp	r3, #64	; 0x40
 80084f4:	d10b      	bne.n	800850e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084f6:	2300      	movs	r3, #0
 80084f8:	633b      	str	r3, [r7, #48]	; 0x30
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	695b      	ldr	r3, [r3, #20]
 8008500:	633b      	str	r3, [r7, #48]	; 0x30
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	633b      	str	r3, [r7, #48]	; 0x30
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	e160      	b.n	80087d0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008512:	2b00      	cmp	r3, #0
 8008514:	d11d      	bne.n	8008552 <I2C_Master_ADDR+0x98>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800851e:	d118      	bne.n	8008552 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008520:	2300      	movs	r3, #0
 8008522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008534:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008544:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	651a      	str	r2, [r3, #80]	; 0x50
 8008550:	e13e      	b.n	80087d0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008556:	b29b      	uxth	r3, r3
 8008558:	2b00      	cmp	r3, #0
 800855a:	d113      	bne.n	8008584 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800855c:	2300      	movs	r3, #0
 800855e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	62bb      	str	r3, [r7, #40]	; 0x28
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008580:	601a      	str	r2, [r3, #0]
 8008582:	e115      	b.n	80087b0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008588:	b29b      	uxth	r3, r3
 800858a:	2b01      	cmp	r3, #1
 800858c:	f040 808a 	bne.w	80086a4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008592:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008596:	d137      	bne.n	8008608 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085a6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085b6:	d113      	bne.n	80085e0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085c6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085c8:	2300      	movs	r3, #0
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	627b      	str	r3, [r7, #36]	; 0x24
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	627b      	str	r3, [r7, #36]	; 0x24
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	e0e7      	b.n	80087b0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085e0:	2300      	movs	r3, #0
 80085e2:	623b      	str	r3, [r7, #32]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	623b      	str	r3, [r7, #32]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	623b      	str	r3, [r7, #32]
 80085f4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	e0d3      	b.n	80087b0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860a:	2b08      	cmp	r3, #8
 800860c:	d02e      	beq.n	800866c <I2C_Master_ADDR+0x1b2>
 800860e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008610:	2b20      	cmp	r3, #32
 8008612:	d02b      	beq.n	800866c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008616:	2b12      	cmp	r3, #18
 8008618:	d102      	bne.n	8008620 <I2C_Master_ADDR+0x166>
 800861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861c:	2b01      	cmp	r3, #1
 800861e:	d125      	bne.n	800866c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008622:	2b04      	cmp	r3, #4
 8008624:	d00e      	beq.n	8008644 <I2C_Master_ADDR+0x18a>
 8008626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008628:	2b02      	cmp	r3, #2
 800862a:	d00b      	beq.n	8008644 <I2C_Master_ADDR+0x18a>
 800862c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862e:	2b10      	cmp	r3, #16
 8008630:	d008      	beq.n	8008644 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008640:	601a      	str	r2, [r3, #0]
 8008642:	e007      	b.n	8008654 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008652:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008654:	2300      	movs	r3, #0
 8008656:	61fb      	str	r3, [r7, #28]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	61fb      	str	r3, [r7, #28]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	61fb      	str	r3, [r7, #28]
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	e0a1      	b.n	80087b0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800867a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800867c:	2300      	movs	r3, #0
 800867e:	61bb      	str	r3, [r7, #24]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	61bb      	str	r3, [r7, #24]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	61bb      	str	r3, [r7, #24]
 8008690:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	e085      	b.n	80087b0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d14d      	bne.n	800874a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80086ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	d016      	beq.n	80086e2 <I2C_Master_ADDR+0x228>
 80086b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d013      	beq.n	80086e2 <I2C_Master_ADDR+0x228>
 80086ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086bc:	2b10      	cmp	r3, #16
 80086be:	d010      	beq.n	80086e2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086ce:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	e007      	b.n	80086f2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086f0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008700:	d117      	bne.n	8008732 <I2C_Master_ADDR+0x278>
 8008702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008704:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008708:	d00b      	beq.n	8008722 <I2C_Master_ADDR+0x268>
 800870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870c:	2b01      	cmp	r3, #1
 800870e:	d008      	beq.n	8008722 <I2C_Master_ADDR+0x268>
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	2b08      	cmp	r3, #8
 8008714:	d005      	beq.n	8008722 <I2C_Master_ADDR+0x268>
 8008716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008718:	2b10      	cmp	r3, #16
 800871a:	d002      	beq.n	8008722 <I2C_Master_ADDR+0x268>
 800871c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871e:	2b20      	cmp	r3, #32
 8008720:	d107      	bne.n	8008732 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008730:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008732:	2300      	movs	r3, #0
 8008734:	617b      	str	r3, [r7, #20]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	617b      	str	r3, [r7, #20]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	617b      	str	r3, [r7, #20]
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	e032      	b.n	80087b0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008758:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008768:	d117      	bne.n	800879a <I2C_Master_ADDR+0x2e0>
 800876a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008770:	d00b      	beq.n	800878a <I2C_Master_ADDR+0x2d0>
 8008772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008774:	2b01      	cmp	r3, #1
 8008776:	d008      	beq.n	800878a <I2C_Master_ADDR+0x2d0>
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	2b08      	cmp	r3, #8
 800877c:	d005      	beq.n	800878a <I2C_Master_ADDR+0x2d0>
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	2b10      	cmp	r3, #16
 8008782:	d002      	beq.n	800878a <I2C_Master_ADDR+0x2d0>
 8008784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008786:	2b20      	cmp	r3, #32
 8008788:	d107      	bne.n	800879a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008798:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800879a:	2300      	movs	r3, #0
 800879c:	613b      	str	r3, [r7, #16]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	613b      	str	r3, [r7, #16]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	613b      	str	r3, [r7, #16]
 80087ae:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80087b6:	e00b      	b.n	80087d0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087b8:	2300      	movs	r3, #0
 80087ba:	60fb      	str	r3, [r7, #12]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	68fb      	ldr	r3, [r7, #12]
}
 80087ce:	e7ff      	b.n	80087d0 <I2C_Master_ADDR+0x316>
 80087d0:	bf00      	nop
 80087d2:	3744      	adds	r7, #68	; 0x44
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d02b      	beq.n	800884e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fa:	781a      	ldrb	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008810:	b29b      	uxth	r3, r3
 8008812:	3b01      	subs	r3, #1
 8008814:	b29a      	uxth	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800881e:	b29b      	uxth	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d114      	bne.n	800884e <I2C_SlaveTransmit_TXE+0x72>
 8008824:	7bfb      	ldrb	r3, [r7, #15]
 8008826:	2b29      	cmp	r3, #41	; 0x29
 8008828:	d111      	bne.n	800884e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008838:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2221      	movs	r2, #33	; 0x21
 800883e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2228      	movs	r2, #40	; 0x28
 8008844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7ff f9e7 	bl	8007c1c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800884e:	bf00      	nop
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008862:	b29b      	uxth	r3, r3
 8008864:	2b00      	cmp	r3, #0
 8008866:	d011      	beq.n	800888c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886c:	781a      	ldrb	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	1c5a      	adds	r2, r3, #1
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008882:	b29b      	uxth	r3, r3
 8008884:	3b01      	subs	r3, #1
 8008886:	b29a      	uxth	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d02c      	beq.n	800890c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	691a      	ldr	r2, [r3, #16]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	b2d2      	uxtb	r2, r2
 80088be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c4:	1c5a      	adds	r2, r3, #1
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	3b01      	subs	r3, #1
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088dc:	b29b      	uxth	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d114      	bne.n	800890c <I2C_SlaveReceive_RXNE+0x74>
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
 80088e4:	2b2a      	cmp	r3, #42	; 0x2a
 80088e6:	d111      	bne.n	800890c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088f6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2222      	movs	r2, #34	; 0x22
 80088fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2228      	movs	r2, #40	; 0x28
 8008902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff f992 	bl	8007c30 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800890c:	bf00      	nop
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008920:	b29b      	uxth	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d012      	beq.n	800894c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	691a      	ldr	r2, [r3, #16]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008930:	b2d2      	uxtb	r2, r2
 8008932:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008942:	b29b      	uxth	r3, r3
 8008944:	3b01      	subs	r3, #1
 8008946:	b29a      	uxth	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008962:	2300      	movs	r3, #0
 8008964:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800896c:	b2db      	uxtb	r3, r3
 800896e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008972:	2b28      	cmp	r3, #40	; 0x28
 8008974:	d127      	bne.n	80089c6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008984:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	089b      	lsrs	r3, r3, #2
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008992:	2301      	movs	r3, #1
 8008994:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	09db      	lsrs	r3, r3, #7
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d103      	bne.n	80089aa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	81bb      	strh	r3, [r7, #12]
 80089a8:	e002      	b.n	80089b0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80089b8:	89ba      	ldrh	r2, [r7, #12]
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7ff f940 	bl	8007c44 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80089c4:	e00e      	b.n	80089e4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089c6:	2300      	movs	r3, #0
 80089c8:	60bb      	str	r3, [r7, #8]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	695b      	ldr	r3, [r3, #20]
 80089d0:	60bb      	str	r3, [r7, #8]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	60bb      	str	r3, [r7, #8]
 80089da:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80089e4:	bf00      	nop
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a0a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	60bb      	str	r3, [r7, #8]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	60bb      	str	r3, [r7, #8]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0201 	orr.w	r2, r2, #1
 8008a26:	601a      	str	r2, [r3, #0]
 8008a28:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a38:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a48:	d172      	bne.n	8008b30 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	2b22      	cmp	r3, #34	; 0x22
 8008a4e:	d002      	beq.n	8008a56 <I2C_Slave_STOPF+0x6a>
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	2b2a      	cmp	r3, #42	; 0x2a
 8008a54:	d135      	bne.n	8008ac2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d005      	beq.n	8008a7a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a72:	f043 0204 	orr.w	r2, r3, #4
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fe f92a 	bl	8006ce8 <HAL_DMA_GetState>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d049      	beq.n	8008b2e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9e:	4a69      	ldr	r2, [pc, #420]	; (8008c44 <I2C_Slave_STOPF+0x258>)
 8008aa0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fd ff72 	bl	8006990 <HAL_DMA_Abort_IT>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d03d      	beq.n	8008b2e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008abc:	4610      	mov	r0, r2
 8008abe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008ac0:	e035      	b.n	8008b2e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d005      	beq.n	8008ae6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ade:	f043 0204 	orr.w	r2, r3, #4
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008af4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fe f8f4 	bl	8006ce8 <HAL_DMA_GetState>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d014      	beq.n	8008b30 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b0a:	4a4e      	ldr	r2, [pc, #312]	; (8008c44 <I2C_Slave_STOPF+0x258>)
 8008b0c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fd ff3c 	bl	8006990 <HAL_DMA_Abort_IT>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d008      	beq.n	8008b30 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b28:	4610      	mov	r0, r2
 8008b2a:	4798      	blx	r3
 8008b2c:	e000      	b.n	8008b30 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008b2e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d03e      	beq.n	8008bb8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	f003 0304 	and.w	r3, r3, #4
 8008b44:	2b04      	cmp	r3, #4
 8008b46:	d112      	bne.n	8008b6e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	691a      	ldr	r2, [r3, #16]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	b2d2      	uxtb	r2, r2
 8008b54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	3b01      	subs	r3, #1
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	695b      	ldr	r3, [r3, #20]
 8008b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b78:	2b40      	cmp	r3, #64	; 0x40
 8008b7a:	d112      	bne.n	8008ba2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	691a      	ldr	r2, [r3, #16]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b86:	b2d2      	uxtb	r2, r2
 8008b88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d005      	beq.n	8008bb8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb0:	f043 0204 	orr.w	r2, r3, #4
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d003      	beq.n	8008bc8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f8b3 	bl	8008d2c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008bc6:	e039      	b.n	8008c3c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	2b2a      	cmp	r3, #42	; 0x2a
 8008bcc:	d109      	bne.n	8008be2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2228      	movs	r2, #40	; 0x28
 8008bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff f827 	bl	8007c30 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b28      	cmp	r3, #40	; 0x28
 8008bec:	d111      	bne.n	8008c12 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a15      	ldr	r2, [pc, #84]	; (8008c48 <I2C_Slave_STOPF+0x25c>)
 8008bf2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7ff f828 	bl	8007c60 <HAL_I2C_ListenCpltCallback>
}
 8008c10:	e014      	b.n	8008c3c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c16:	2b22      	cmp	r3, #34	; 0x22
 8008c18:	d002      	beq.n	8008c20 <I2C_Slave_STOPF+0x234>
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	2b22      	cmp	r3, #34	; 0x22
 8008c1e:	d10d      	bne.n	8008c3c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2220      	movs	r2, #32
 8008c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7fe fffa 	bl	8007c30 <HAL_I2C_SlaveRxCpltCallback>
}
 8008c3c:	bf00      	nop
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	08008f91 	.word	0x08008f91
 8008c48:	ffff0000 	.word	0xffff0000

08008c4c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c60:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2b08      	cmp	r3, #8
 8008c66:	d002      	beq.n	8008c6e <I2C_Slave_AF+0x22>
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d129      	bne.n	8008cc2 <I2C_Slave_AF+0x76>
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	2b28      	cmp	r3, #40	; 0x28
 8008c72:	d126      	bne.n	8008cc2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a2c      	ldr	r2, [pc, #176]	; (8008d28 <I2C_Slave_AF+0xdc>)
 8008c78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	685a      	ldr	r2, [r3, #4]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008c88:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c92:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ca2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2220      	movs	r2, #32
 8008cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7fe ffd0 	bl	8007c60 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008cc0:	e02e      	b.n	8008d20 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	2b21      	cmp	r3, #33	; 0x21
 8008cc6:	d126      	bne.n	8008d16 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a17      	ldr	r2, [pc, #92]	; (8008d28 <I2C_Slave_AF+0xdc>)
 8008ccc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2221      	movs	r2, #33	; 0x21
 8008cd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685a      	ldr	r2, [r3, #4]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008cf2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008cfc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d0c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7fe ff84 	bl	8007c1c <HAL_I2C_SlaveTxCpltCallback>
}
 8008d14:	e004      	b.n	8008d20 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d1e:	615a      	str	r2, [r3, #20]
}
 8008d20:	bf00      	nop
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	ffff0000 	.word	0xffff0000

08008d2c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008d44:	7bbb      	ldrb	r3, [r7, #14]
 8008d46:	2b10      	cmp	r3, #16
 8008d48:	d002      	beq.n	8008d50 <I2C_ITError+0x24>
 8008d4a:	7bbb      	ldrb	r3, [r7, #14]
 8008d4c:	2b40      	cmp	r3, #64	; 0x40
 8008d4e:	d10a      	bne.n	8008d66 <I2C_ITError+0x3a>
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	2b22      	cmp	r3, #34	; 0x22
 8008d54:	d107      	bne.n	8008d66 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d64:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
 8008d68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008d6c:	2b28      	cmp	r3, #40	; 0x28
 8008d6e:	d107      	bne.n	8008d80 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2228      	movs	r2, #40	; 0x28
 8008d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008d7e:	e015      	b.n	8008dac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d8e:	d00a      	beq.n	8008da6 <I2C_ITError+0x7a>
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
 8008d92:	2b60      	cmp	r3, #96	; 0x60
 8008d94:	d007      	beq.n	8008da6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dba:	d162      	bne.n	8008e82 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008dca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d020      	beq.n	8008e1c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dde:	4a6a      	ldr	r2, [pc, #424]	; (8008f88 <I2C_ITError+0x25c>)
 8008de0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fd fdd2 	bl	8006990 <HAL_DMA_Abort_IT>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f000 8089 	beq.w	8008f06 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f022 0201 	bic.w	r2, r2, #1
 8008e02:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2220      	movs	r2, #32
 8008e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008e16:	4610      	mov	r0, r2
 8008e18:	4798      	blx	r3
 8008e1a:	e074      	b.n	8008f06 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e20:	4a59      	ldr	r2, [pc, #356]	; (8008f88 <I2C_ITError+0x25c>)
 8008e22:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7fd fdb1 	bl	8006990 <HAL_DMA_Abort_IT>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d068      	beq.n	8008f06 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3e:	2b40      	cmp	r3, #64	; 0x40
 8008e40:	d10b      	bne.n	8008e5a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	691a      	ldr	r2, [r3, #16]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4c:	b2d2      	uxtb	r2, r2
 8008e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	1c5a      	adds	r2, r3, #1
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f022 0201 	bic.w	r2, r2, #1
 8008e68:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2220      	movs	r2, #32
 8008e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	4798      	blx	r3
 8008e80:	e041      	b.n	8008f06 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b60      	cmp	r3, #96	; 0x60
 8008e8c:	d125      	bne.n	8008eda <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2220      	movs	r2, #32
 8008e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea6:	2b40      	cmp	r3, #64	; 0x40
 8008ea8:	d10b      	bne.n	8008ec2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	691a      	ldr	r2, [r3, #16]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb4:	b2d2      	uxtb	r2, r2
 8008eb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f022 0201 	bic.w	r2, r2, #1
 8008ed0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7fe feec 	bl	8007cb0 <HAL_I2C_AbortCpltCallback>
 8008ed8:	e015      	b.n	8008f06 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee4:	2b40      	cmp	r3, #64	; 0x40
 8008ee6:	d10b      	bne.n	8008f00 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	691a      	ldr	r2, [r3, #16]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	b2d2      	uxtb	r2, r2
 8008ef4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7fe fecb 	bl	8007c9c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10e      	bne.n	8008f34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d109      	bne.n	8008f34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d104      	bne.n	8008f34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d007      	beq.n	8008f44 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f42:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f4a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	2b04      	cmp	r3, #4
 8008f56:	d113      	bne.n	8008f80 <I2C_ITError+0x254>
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	2b28      	cmp	r3, #40	; 0x28
 8008f5c:	d110      	bne.n	8008f80 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a0a      	ldr	r2, [pc, #40]	; (8008f8c <I2C_ITError+0x260>)
 8008f62:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7fe fe70 	bl	8007c60 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008f80:	bf00      	nop
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	08008f91 	.word	0x08008f91
 8008f8c:	ffff0000 	.word	0xffff0000

08008f90 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fa8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008faa:	4b4b      	ldr	r3, [pc, #300]	; (80090d8 <I2C_DMAAbort+0x148>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	08db      	lsrs	r3, r3, #3
 8008fb0:	4a4a      	ldr	r2, [pc, #296]	; (80090dc <I2C_DMAAbort+0x14c>)
 8008fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb6:	0a1a      	lsrs	r2, r3, #8
 8008fb8:	4613      	mov	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	4413      	add	r3, r2
 8008fbe:	00da      	lsls	r2, r3, #3
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d106      	bne.n	8008fd8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fce:	f043 0220 	orr.w	r2, r3, #32
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008fd6:	e00a      	b.n	8008fee <I2C_DMAAbort+0x5e>
    }
    count--;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fec:	d0ea      	beq.n	8008fc4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d003      	beq.n	8008ffe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900a:	2200      	movs	r2, #0
 800900c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800901c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	2200      	movs	r2, #0
 8009022:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009028:	2b00      	cmp	r3, #0
 800902a:	d003      	beq.n	8009034 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009030:	2200      	movs	r2, #0
 8009032:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009040:	2200      	movs	r2, #0
 8009042:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f022 0201 	bic.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b60      	cmp	r3, #96	; 0x60
 800905e:	d10e      	bne.n	800907e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	2220      	movs	r2, #32
 8009064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	2200      	movs	r2, #0
 8009074:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009076:	6978      	ldr	r0, [r7, #20]
 8009078:	f7fe fe1a 	bl	8007cb0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800907c:	e027      	b.n	80090ce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800907e:	7cfb      	ldrb	r3, [r7, #19]
 8009080:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009084:	2b28      	cmp	r3, #40	; 0x28
 8009086:	d117      	bne.n	80090b8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f042 0201 	orr.w	r2, r2, #1
 8009096:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	2200      	movs	r2, #0
 80090ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2228      	movs	r2, #40	; 0x28
 80090b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80090b6:	e007      	b.n	80090c8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	2220      	movs	r2, #32
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80090c8:	6978      	ldr	r0, [r7, #20]
 80090ca:	f7fe fde7 	bl	8007c9c <HAL_I2C_ErrorCallback>
}
 80090ce:	bf00      	nop
 80090d0:	3718      	adds	r7, #24
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	20000430 	.word	0x20000430
 80090dc:	14f8b589 	.word	0x14f8b589

080090e0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80090ec:	4b13      	ldr	r3, [pc, #76]	; (800913c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	08db      	lsrs	r3, r3, #3
 80090f2:	4a13      	ldr	r2, [pc, #76]	; (8009140 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80090f4:	fba2 2303 	umull	r2, r3, r2, r3
 80090f8:	0a1a      	lsrs	r2, r3, #8
 80090fa:	4613      	mov	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4413      	add	r3, r2
 8009100:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	3b01      	subs	r3, #1
 8009106:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d107      	bne.n	800911e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009112:	f043 0220 	orr.w	r2, r3, #32
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e008      	b.n	8009130 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800912c:	d0e9      	beq.n	8009102 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	20000430 	.word	0x20000430
 8009140:	14f8b589 	.word	0x14f8b589

08009144 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009150:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009154:	d103      	bne.n	800915e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800915c:	e007      	b.n	800916e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009162:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009166:	d102      	bne.n	800916e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2208      	movs	r2, #8
 800916c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800916e:	bf00      	nop
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
	...

0800917c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d101      	bne.n	800918e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e267      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0301 	and.w	r3, r3, #1
 8009196:	2b00      	cmp	r3, #0
 8009198:	d075      	beq.n	8009286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800919a:	4b88      	ldr	r3, [pc, #544]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f003 030c 	and.w	r3, r3, #12
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	d00c      	beq.n	80091c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091a6:	4b85      	ldr	r3, [pc, #532]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091ae:	2b08      	cmp	r3, #8
 80091b0:	d112      	bne.n	80091d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091b2:	4b82      	ldr	r3, [pc, #520]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091be:	d10b      	bne.n	80091d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091c0:	4b7e      	ldr	r3, [pc, #504]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d05b      	beq.n	8009284 <HAL_RCC_OscConfig+0x108>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d157      	bne.n	8009284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e242      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091e0:	d106      	bne.n	80091f0 <HAL_RCC_OscConfig+0x74>
 80091e2:	4b76      	ldr	r3, [pc, #472]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a75      	ldr	r2, [pc, #468]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80091e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091ec:	6013      	str	r3, [r2, #0]
 80091ee:	e01d      	b.n	800922c <HAL_RCC_OscConfig+0xb0>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091f8:	d10c      	bne.n	8009214 <HAL_RCC_OscConfig+0x98>
 80091fa:	4b70      	ldr	r3, [pc, #448]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a6f      	ldr	r2, [pc, #444]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009204:	6013      	str	r3, [r2, #0]
 8009206:	4b6d      	ldr	r3, [pc, #436]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a6c      	ldr	r2, [pc, #432]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 800920c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009210:	6013      	str	r3, [r2, #0]
 8009212:	e00b      	b.n	800922c <HAL_RCC_OscConfig+0xb0>
 8009214:	4b69      	ldr	r3, [pc, #420]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a68      	ldr	r2, [pc, #416]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 800921a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800921e:	6013      	str	r3, [r2, #0]
 8009220:	4b66      	ldr	r3, [pc, #408]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a65      	ldr	r2, [pc, #404]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800922a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d013      	beq.n	800925c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009234:	f7fd f918 	bl	8006468 <HAL_GetTick>
 8009238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800923a:	e008      	b.n	800924e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800923c:	f7fd f914 	bl	8006468 <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	2b64      	cmp	r3, #100	; 0x64
 8009248:	d901      	bls.n	800924e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e207      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800924e:	4b5b      	ldr	r3, [pc, #364]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0f0      	beq.n	800923c <HAL_RCC_OscConfig+0xc0>
 800925a:	e014      	b.n	8009286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800925c:	f7fd f904 	bl	8006468 <HAL_GetTick>
 8009260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009262:	e008      	b.n	8009276 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009264:	f7fd f900 	bl	8006468 <HAL_GetTick>
 8009268:	4602      	mov	r2, r0
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	2b64      	cmp	r3, #100	; 0x64
 8009270:	d901      	bls.n	8009276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e1f3      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009276:	4b51      	ldr	r3, [pc, #324]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1f0      	bne.n	8009264 <HAL_RCC_OscConfig+0xe8>
 8009282:	e000      	b.n	8009286 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d063      	beq.n	800935a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009292:	4b4a      	ldr	r3, [pc, #296]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	f003 030c 	and.w	r3, r3, #12
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00b      	beq.n	80092b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800929e:	4b47      	ldr	r3, [pc, #284]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80092a6:	2b08      	cmp	r3, #8
 80092a8:	d11c      	bne.n	80092e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092aa:	4b44      	ldr	r3, [pc, #272]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d116      	bne.n	80092e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092b6:	4b41      	ldr	r3, [pc, #260]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 0302 	and.w	r3, r3, #2
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d005      	beq.n	80092ce <HAL_RCC_OscConfig+0x152>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d001      	beq.n	80092ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e1c7      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092ce:	4b3b      	ldr	r3, [pc, #236]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	4937      	ldr	r1, [pc, #220]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 80092de:	4313      	orrs	r3, r2
 80092e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092e2:	e03a      	b.n	800935a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d020      	beq.n	800932e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80092ec:	4b34      	ldr	r3, [pc, #208]	; (80093c0 <HAL_RCC_OscConfig+0x244>)
 80092ee:	2201      	movs	r2, #1
 80092f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092f2:	f7fd f8b9 	bl	8006468 <HAL_GetTick>
 80092f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092f8:	e008      	b.n	800930c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092fa:	f7fd f8b5 	bl	8006468 <HAL_GetTick>
 80092fe:	4602      	mov	r2, r0
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	2b02      	cmp	r3, #2
 8009306:	d901      	bls.n	800930c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	e1a8      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800930c:	4b2b      	ldr	r3, [pc, #172]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0302 	and.w	r3, r3, #2
 8009314:	2b00      	cmp	r3, #0
 8009316:	d0f0      	beq.n	80092fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009318:	4b28      	ldr	r3, [pc, #160]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	00db      	lsls	r3, r3, #3
 8009326:	4925      	ldr	r1, [pc, #148]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009328:	4313      	orrs	r3, r2
 800932a:	600b      	str	r3, [r1, #0]
 800932c:	e015      	b.n	800935a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800932e:	4b24      	ldr	r3, [pc, #144]	; (80093c0 <HAL_RCC_OscConfig+0x244>)
 8009330:	2200      	movs	r2, #0
 8009332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009334:	f7fd f898 	bl	8006468 <HAL_GetTick>
 8009338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800933a:	e008      	b.n	800934e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800933c:	f7fd f894 	bl	8006468 <HAL_GetTick>
 8009340:	4602      	mov	r2, r0
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	2b02      	cmp	r3, #2
 8009348:	d901      	bls.n	800934e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800934a:	2303      	movs	r3, #3
 800934c:	e187      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800934e:	4b1b      	ldr	r3, [pc, #108]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1f0      	bne.n	800933c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 0308 	and.w	r3, r3, #8
 8009362:	2b00      	cmp	r3, #0
 8009364:	d036      	beq.n	80093d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d016      	beq.n	800939c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800936e:	4b15      	ldr	r3, [pc, #84]	; (80093c4 <HAL_RCC_OscConfig+0x248>)
 8009370:	2201      	movs	r2, #1
 8009372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009374:	f7fd f878 	bl	8006468 <HAL_GetTick>
 8009378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800937a:	e008      	b.n	800938e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800937c:	f7fd f874 	bl	8006468 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2b02      	cmp	r3, #2
 8009388:	d901      	bls.n	800938e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e167      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800938e:	4b0b      	ldr	r3, [pc, #44]	; (80093bc <HAL_RCC_OscConfig+0x240>)
 8009390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009392:	f003 0302 	and.w	r3, r3, #2
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0f0      	beq.n	800937c <HAL_RCC_OscConfig+0x200>
 800939a:	e01b      	b.n	80093d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800939c:	4b09      	ldr	r3, [pc, #36]	; (80093c4 <HAL_RCC_OscConfig+0x248>)
 800939e:	2200      	movs	r2, #0
 80093a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093a2:	f7fd f861 	bl	8006468 <HAL_GetTick>
 80093a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093a8:	e00e      	b.n	80093c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093aa:	f7fd f85d 	bl	8006468 <HAL_GetTick>
 80093ae:	4602      	mov	r2, r0
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	1ad3      	subs	r3, r2, r3
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d907      	bls.n	80093c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e150      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
 80093bc:	40023800 	.word	0x40023800
 80093c0:	42470000 	.word	0x42470000
 80093c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093c8:	4b88      	ldr	r3, [pc, #544]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 80093ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093cc:	f003 0302 	and.w	r3, r3, #2
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1ea      	bne.n	80093aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 0304 	and.w	r3, r3, #4
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 8097 	beq.w	8009510 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093e2:	2300      	movs	r3, #0
 80093e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093e6:	4b81      	ldr	r3, [pc, #516]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 80093e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10f      	bne.n	8009412 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093f2:	2300      	movs	r3, #0
 80093f4:	60bb      	str	r3, [r7, #8]
 80093f6:	4b7d      	ldr	r3, [pc, #500]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	4a7c      	ldr	r2, [pc, #496]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 80093fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009400:	6413      	str	r3, [r2, #64]	; 0x40
 8009402:	4b7a      	ldr	r3, [pc, #488]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 8009404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800940a:	60bb      	str	r3, [r7, #8]
 800940c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800940e:	2301      	movs	r3, #1
 8009410:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009412:	4b77      	ldr	r3, [pc, #476]	; (80095f0 <HAL_RCC_OscConfig+0x474>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800941a:	2b00      	cmp	r3, #0
 800941c:	d118      	bne.n	8009450 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800941e:	4b74      	ldr	r3, [pc, #464]	; (80095f0 <HAL_RCC_OscConfig+0x474>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a73      	ldr	r2, [pc, #460]	; (80095f0 <HAL_RCC_OscConfig+0x474>)
 8009424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800942a:	f7fd f81d 	bl	8006468 <HAL_GetTick>
 800942e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009430:	e008      	b.n	8009444 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009432:	f7fd f819 	bl	8006468 <HAL_GetTick>
 8009436:	4602      	mov	r2, r0
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	2b02      	cmp	r3, #2
 800943e:	d901      	bls.n	8009444 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e10c      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009444:	4b6a      	ldr	r3, [pc, #424]	; (80095f0 <HAL_RCC_OscConfig+0x474>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800944c:	2b00      	cmp	r3, #0
 800944e:	d0f0      	beq.n	8009432 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d106      	bne.n	8009466 <HAL_RCC_OscConfig+0x2ea>
 8009458:	4b64      	ldr	r3, [pc, #400]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 800945a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800945c:	4a63      	ldr	r2, [pc, #396]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 800945e:	f043 0301 	orr.w	r3, r3, #1
 8009462:	6713      	str	r3, [r2, #112]	; 0x70
 8009464:	e01c      	b.n	80094a0 <HAL_RCC_OscConfig+0x324>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	2b05      	cmp	r3, #5
 800946c:	d10c      	bne.n	8009488 <HAL_RCC_OscConfig+0x30c>
 800946e:	4b5f      	ldr	r3, [pc, #380]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 8009470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009472:	4a5e      	ldr	r2, [pc, #376]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 8009474:	f043 0304 	orr.w	r3, r3, #4
 8009478:	6713      	str	r3, [r2, #112]	; 0x70
 800947a:	4b5c      	ldr	r3, [pc, #368]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 800947c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947e:	4a5b      	ldr	r2, [pc, #364]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 8009480:	f043 0301 	orr.w	r3, r3, #1
 8009484:	6713      	str	r3, [r2, #112]	; 0x70
 8009486:	e00b      	b.n	80094a0 <HAL_RCC_OscConfig+0x324>
 8009488:	4b58      	ldr	r3, [pc, #352]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 800948a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800948c:	4a57      	ldr	r2, [pc, #348]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 800948e:	f023 0301 	bic.w	r3, r3, #1
 8009492:	6713      	str	r3, [r2, #112]	; 0x70
 8009494:	4b55      	ldr	r3, [pc, #340]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 8009496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009498:	4a54      	ldr	r2, [pc, #336]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 800949a:	f023 0304 	bic.w	r3, r3, #4
 800949e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d015      	beq.n	80094d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094a8:	f7fc ffde 	bl	8006468 <HAL_GetTick>
 80094ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094ae:	e00a      	b.n	80094c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094b0:	f7fc ffda 	bl	8006468 <HAL_GetTick>
 80094b4:	4602      	mov	r2, r0
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80094be:	4293      	cmp	r3, r2
 80094c0:	d901      	bls.n	80094c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e0cb      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094c6:	4b49      	ldr	r3, [pc, #292]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 80094c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ca:	f003 0302 	and.w	r3, r3, #2
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d0ee      	beq.n	80094b0 <HAL_RCC_OscConfig+0x334>
 80094d2:	e014      	b.n	80094fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094d4:	f7fc ffc8 	bl	8006468 <HAL_GetTick>
 80094d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094da:	e00a      	b.n	80094f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094dc:	f7fc ffc4 	bl	8006468 <HAL_GetTick>
 80094e0:	4602      	mov	r2, r0
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d901      	bls.n	80094f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e0b5      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094f2:	4b3e      	ldr	r3, [pc, #248]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 80094f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f6:	f003 0302 	and.w	r3, r3, #2
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1ee      	bne.n	80094dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d105      	bne.n	8009510 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009504:	4b39      	ldr	r3, [pc, #228]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 8009506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009508:	4a38      	ldr	r2, [pc, #224]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 800950a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800950e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 80a1 	beq.w	800965c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800951a:	4b34      	ldr	r3, [pc, #208]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f003 030c 	and.w	r3, r3, #12
 8009522:	2b08      	cmp	r3, #8
 8009524:	d05c      	beq.n	80095e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	2b02      	cmp	r3, #2
 800952c:	d141      	bne.n	80095b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800952e:	4b31      	ldr	r3, [pc, #196]	; (80095f4 <HAL_RCC_OscConfig+0x478>)
 8009530:	2200      	movs	r2, #0
 8009532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009534:	f7fc ff98 	bl	8006468 <HAL_GetTick>
 8009538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800953a:	e008      	b.n	800954e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800953c:	f7fc ff94 	bl	8006468 <HAL_GetTick>
 8009540:	4602      	mov	r2, r0
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	2b02      	cmp	r3, #2
 8009548:	d901      	bls.n	800954e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e087      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800954e:	4b27      	ldr	r3, [pc, #156]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1f0      	bne.n	800953c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	69da      	ldr	r2, [r3, #28]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a1b      	ldr	r3, [r3, #32]
 8009562:	431a      	orrs	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009568:	019b      	lsls	r3, r3, #6
 800956a:	431a      	orrs	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009570:	085b      	lsrs	r3, r3, #1
 8009572:	3b01      	subs	r3, #1
 8009574:	041b      	lsls	r3, r3, #16
 8009576:	431a      	orrs	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957c:	061b      	lsls	r3, r3, #24
 800957e:	491b      	ldr	r1, [pc, #108]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 8009580:	4313      	orrs	r3, r2
 8009582:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009584:	4b1b      	ldr	r3, [pc, #108]	; (80095f4 <HAL_RCC_OscConfig+0x478>)
 8009586:	2201      	movs	r2, #1
 8009588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800958a:	f7fc ff6d 	bl	8006468 <HAL_GetTick>
 800958e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009590:	e008      	b.n	80095a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009592:	f7fc ff69 	bl	8006468 <HAL_GetTick>
 8009596:	4602      	mov	r2, r0
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	2b02      	cmp	r3, #2
 800959e:	d901      	bls.n	80095a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	e05c      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095a4:	4b11      	ldr	r3, [pc, #68]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d0f0      	beq.n	8009592 <HAL_RCC_OscConfig+0x416>
 80095b0:	e054      	b.n	800965c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095b2:	4b10      	ldr	r3, [pc, #64]	; (80095f4 <HAL_RCC_OscConfig+0x478>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095b8:	f7fc ff56 	bl	8006468 <HAL_GetTick>
 80095bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095be:	e008      	b.n	80095d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095c0:	f7fc ff52 	bl	8006468 <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d901      	bls.n	80095d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e045      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095d2:	4b06      	ldr	r3, [pc, #24]	; (80095ec <HAL_RCC_OscConfig+0x470>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1f0      	bne.n	80095c0 <HAL_RCC_OscConfig+0x444>
 80095de:	e03d      	b.n	800965c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d107      	bne.n	80095f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e038      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
 80095ec:	40023800 	.word	0x40023800
 80095f0:	40007000 	.word	0x40007000
 80095f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80095f8:	4b1b      	ldr	r3, [pc, #108]	; (8009668 <HAL_RCC_OscConfig+0x4ec>)
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d028      	beq.n	8009658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009610:	429a      	cmp	r2, r3
 8009612:	d121      	bne.n	8009658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800961e:	429a      	cmp	r2, r3
 8009620:	d11a      	bne.n	8009658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009628:	4013      	ands	r3, r2
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800962e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009630:	4293      	cmp	r3, r2
 8009632:	d111      	bne.n	8009658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963e:	085b      	lsrs	r3, r3, #1
 8009640:	3b01      	subs	r3, #1
 8009642:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009644:	429a      	cmp	r2, r3
 8009646:	d107      	bne.n	8009658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009652:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009654:	429a      	cmp	r2, r3
 8009656:	d001      	beq.n	800965c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	e000      	b.n	800965e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3718      	adds	r7, #24
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	40023800 	.word	0x40023800

0800966c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e0cc      	b.n	800981a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009680:	4b68      	ldr	r3, [pc, #416]	; (8009824 <HAL_RCC_ClockConfig+0x1b8>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 0307 	and.w	r3, r3, #7
 8009688:	683a      	ldr	r2, [r7, #0]
 800968a:	429a      	cmp	r2, r3
 800968c:	d90c      	bls.n	80096a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800968e:	4b65      	ldr	r3, [pc, #404]	; (8009824 <HAL_RCC_ClockConfig+0x1b8>)
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	b2d2      	uxtb	r2, r2
 8009694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009696:	4b63      	ldr	r3, [pc, #396]	; (8009824 <HAL_RCC_ClockConfig+0x1b8>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 0307 	and.w	r3, r3, #7
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d001      	beq.n	80096a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e0b8      	b.n	800981a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0302 	and.w	r3, r3, #2
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d020      	beq.n	80096f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0304 	and.w	r3, r3, #4
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d005      	beq.n	80096cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80096c0:	4b59      	ldr	r3, [pc, #356]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	4a58      	ldr	r2, [pc, #352]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80096c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80096ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0308 	and.w	r3, r3, #8
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d005      	beq.n	80096e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096d8:	4b53      	ldr	r3, [pc, #332]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	4a52      	ldr	r2, [pc, #328]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80096de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80096e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096e4:	4b50      	ldr	r3, [pc, #320]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	494d      	ldr	r1, [pc, #308]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80096f2:	4313      	orrs	r3, r2
 80096f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d044      	beq.n	800978c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d107      	bne.n	800971a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800970a:	4b47      	ldr	r3, [pc, #284]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009712:	2b00      	cmp	r3, #0
 8009714:	d119      	bne.n	800974a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e07f      	b.n	800981a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	2b02      	cmp	r3, #2
 8009720:	d003      	beq.n	800972a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009726:	2b03      	cmp	r3, #3
 8009728:	d107      	bne.n	800973a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800972a:	4b3f      	ldr	r3, [pc, #252]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d109      	bne.n	800974a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e06f      	b.n	800981a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800973a:	4b3b      	ldr	r3, [pc, #236]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f003 0302 	and.w	r3, r3, #2
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e067      	b.n	800981a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800974a:	4b37      	ldr	r3, [pc, #220]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f023 0203 	bic.w	r2, r3, #3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	4934      	ldr	r1, [pc, #208]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 8009758:	4313      	orrs	r3, r2
 800975a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800975c:	f7fc fe84 	bl	8006468 <HAL_GetTick>
 8009760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009762:	e00a      	b.n	800977a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009764:	f7fc fe80 	bl	8006468 <HAL_GetTick>
 8009768:	4602      	mov	r2, r0
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009772:	4293      	cmp	r3, r2
 8009774:	d901      	bls.n	800977a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009776:	2303      	movs	r3, #3
 8009778:	e04f      	b.n	800981a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800977a:	4b2b      	ldr	r3, [pc, #172]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	f003 020c 	and.w	r2, r3, #12
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	429a      	cmp	r2, r3
 800978a:	d1eb      	bne.n	8009764 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800978c:	4b25      	ldr	r3, [pc, #148]	; (8009824 <HAL_RCC_ClockConfig+0x1b8>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 0307 	and.w	r3, r3, #7
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	d20c      	bcs.n	80097b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800979a:	4b22      	ldr	r3, [pc, #136]	; (8009824 <HAL_RCC_ClockConfig+0x1b8>)
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	b2d2      	uxtb	r2, r2
 80097a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097a2:	4b20      	ldr	r3, [pc, #128]	; (8009824 <HAL_RCC_ClockConfig+0x1b8>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0307 	and.w	r3, r3, #7
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d001      	beq.n	80097b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e032      	b.n	800981a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 0304 	and.w	r3, r3, #4
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d008      	beq.n	80097d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097c0:	4b19      	ldr	r3, [pc, #100]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	4916      	ldr	r1, [pc, #88]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80097ce:	4313      	orrs	r3, r2
 80097d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 0308 	and.w	r3, r3, #8
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d009      	beq.n	80097f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097de:	4b12      	ldr	r3, [pc, #72]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	00db      	lsls	r3, r3, #3
 80097ec:	490e      	ldr	r1, [pc, #56]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80097f2:	f000 f821 	bl	8009838 <HAL_RCC_GetSysClockFreq>
 80097f6:	4602      	mov	r2, r0
 80097f8:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <HAL_RCC_ClockConfig+0x1bc>)
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	091b      	lsrs	r3, r3, #4
 80097fe:	f003 030f 	and.w	r3, r3, #15
 8009802:	490a      	ldr	r1, [pc, #40]	; (800982c <HAL_RCC_ClockConfig+0x1c0>)
 8009804:	5ccb      	ldrb	r3, [r1, r3]
 8009806:	fa22 f303 	lsr.w	r3, r2, r3
 800980a:	4a09      	ldr	r2, [pc, #36]	; (8009830 <HAL_RCC_ClockConfig+0x1c4>)
 800980c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800980e:	4b09      	ldr	r3, [pc, #36]	; (8009834 <HAL_RCC_ClockConfig+0x1c8>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4618      	mov	r0, r3
 8009814:	f7fc fde4 	bl	80063e0 <HAL_InitTick>

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	40023c00 	.word	0x40023c00
 8009828:	40023800 	.word	0x40023800
 800982c:	0800c7fc 	.word	0x0800c7fc
 8009830:	20000430 	.word	0x20000430
 8009834:	20000434 	.word	0x20000434

08009838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800983c:	b094      	sub	sp, #80	; 0x50
 800983e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009840:	2300      	movs	r3, #0
 8009842:	647b      	str	r3, [r7, #68]	; 0x44
 8009844:	2300      	movs	r3, #0
 8009846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009848:	2300      	movs	r3, #0
 800984a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009850:	4b79      	ldr	r3, [pc, #484]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	f003 030c 	and.w	r3, r3, #12
 8009858:	2b08      	cmp	r3, #8
 800985a:	d00d      	beq.n	8009878 <HAL_RCC_GetSysClockFreq+0x40>
 800985c:	2b08      	cmp	r3, #8
 800985e:	f200 80e1 	bhi.w	8009a24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <HAL_RCC_GetSysClockFreq+0x34>
 8009866:	2b04      	cmp	r3, #4
 8009868:	d003      	beq.n	8009872 <HAL_RCC_GetSysClockFreq+0x3a>
 800986a:	e0db      	b.n	8009a24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800986c:	4b73      	ldr	r3, [pc, #460]	; (8009a3c <HAL_RCC_GetSysClockFreq+0x204>)
 800986e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009870:	e0db      	b.n	8009a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009872:	4b73      	ldr	r3, [pc, #460]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x208>)
 8009874:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009876:	e0d8      	b.n	8009a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009878:	4b6f      	ldr	r3, [pc, #444]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x200>)
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009880:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009882:	4b6d      	ldr	r3, [pc, #436]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800988a:	2b00      	cmp	r3, #0
 800988c:	d063      	beq.n	8009956 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800988e:	4b6a      	ldr	r3, [pc, #424]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	099b      	lsrs	r3, r3, #6
 8009894:	2200      	movs	r2, #0
 8009896:	63bb      	str	r3, [r7, #56]	; 0x38
 8009898:	63fa      	str	r2, [r7, #60]	; 0x3c
 800989a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a0:	633b      	str	r3, [r7, #48]	; 0x30
 80098a2:	2300      	movs	r3, #0
 80098a4:	637b      	str	r3, [r7, #52]	; 0x34
 80098a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80098aa:	4622      	mov	r2, r4
 80098ac:	462b      	mov	r3, r5
 80098ae:	f04f 0000 	mov.w	r0, #0
 80098b2:	f04f 0100 	mov.w	r1, #0
 80098b6:	0159      	lsls	r1, r3, #5
 80098b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80098bc:	0150      	lsls	r0, r2, #5
 80098be:	4602      	mov	r2, r0
 80098c0:	460b      	mov	r3, r1
 80098c2:	4621      	mov	r1, r4
 80098c4:	1a51      	subs	r1, r2, r1
 80098c6:	6139      	str	r1, [r7, #16]
 80098c8:	4629      	mov	r1, r5
 80098ca:	eb63 0301 	sbc.w	r3, r3, r1
 80098ce:	617b      	str	r3, [r7, #20]
 80098d0:	f04f 0200 	mov.w	r2, #0
 80098d4:	f04f 0300 	mov.w	r3, #0
 80098d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098dc:	4659      	mov	r1, fp
 80098de:	018b      	lsls	r3, r1, #6
 80098e0:	4651      	mov	r1, sl
 80098e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80098e6:	4651      	mov	r1, sl
 80098e8:	018a      	lsls	r2, r1, #6
 80098ea:	4651      	mov	r1, sl
 80098ec:	ebb2 0801 	subs.w	r8, r2, r1
 80098f0:	4659      	mov	r1, fp
 80098f2:	eb63 0901 	sbc.w	r9, r3, r1
 80098f6:	f04f 0200 	mov.w	r2, #0
 80098fa:	f04f 0300 	mov.w	r3, #0
 80098fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800990a:	4690      	mov	r8, r2
 800990c:	4699      	mov	r9, r3
 800990e:	4623      	mov	r3, r4
 8009910:	eb18 0303 	adds.w	r3, r8, r3
 8009914:	60bb      	str	r3, [r7, #8]
 8009916:	462b      	mov	r3, r5
 8009918:	eb49 0303 	adc.w	r3, r9, r3
 800991c:	60fb      	str	r3, [r7, #12]
 800991e:	f04f 0200 	mov.w	r2, #0
 8009922:	f04f 0300 	mov.w	r3, #0
 8009926:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800992a:	4629      	mov	r1, r5
 800992c:	024b      	lsls	r3, r1, #9
 800992e:	4621      	mov	r1, r4
 8009930:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009934:	4621      	mov	r1, r4
 8009936:	024a      	lsls	r2, r1, #9
 8009938:	4610      	mov	r0, r2
 800993a:	4619      	mov	r1, r3
 800993c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800993e:	2200      	movs	r2, #0
 8009940:	62bb      	str	r3, [r7, #40]	; 0x28
 8009942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009944:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009948:	f7f7 f884 	bl	8000a54 <__aeabi_uldivmod>
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	4613      	mov	r3, r2
 8009952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009954:	e058      	b.n	8009a08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009956:	4b38      	ldr	r3, [pc, #224]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	099b      	lsrs	r3, r3, #6
 800995c:	2200      	movs	r2, #0
 800995e:	4618      	mov	r0, r3
 8009960:	4611      	mov	r1, r2
 8009962:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009966:	623b      	str	r3, [r7, #32]
 8009968:	2300      	movs	r3, #0
 800996a:	627b      	str	r3, [r7, #36]	; 0x24
 800996c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009970:	4642      	mov	r2, r8
 8009972:	464b      	mov	r3, r9
 8009974:	f04f 0000 	mov.w	r0, #0
 8009978:	f04f 0100 	mov.w	r1, #0
 800997c:	0159      	lsls	r1, r3, #5
 800997e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009982:	0150      	lsls	r0, r2, #5
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	4641      	mov	r1, r8
 800998a:	ebb2 0a01 	subs.w	sl, r2, r1
 800998e:	4649      	mov	r1, r9
 8009990:	eb63 0b01 	sbc.w	fp, r3, r1
 8009994:	f04f 0200 	mov.w	r2, #0
 8009998:	f04f 0300 	mov.w	r3, #0
 800999c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80099a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80099a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80099a8:	ebb2 040a 	subs.w	r4, r2, sl
 80099ac:	eb63 050b 	sbc.w	r5, r3, fp
 80099b0:	f04f 0200 	mov.w	r2, #0
 80099b4:	f04f 0300 	mov.w	r3, #0
 80099b8:	00eb      	lsls	r3, r5, #3
 80099ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80099be:	00e2      	lsls	r2, r4, #3
 80099c0:	4614      	mov	r4, r2
 80099c2:	461d      	mov	r5, r3
 80099c4:	4643      	mov	r3, r8
 80099c6:	18e3      	adds	r3, r4, r3
 80099c8:	603b      	str	r3, [r7, #0]
 80099ca:	464b      	mov	r3, r9
 80099cc:	eb45 0303 	adc.w	r3, r5, r3
 80099d0:	607b      	str	r3, [r7, #4]
 80099d2:	f04f 0200 	mov.w	r2, #0
 80099d6:	f04f 0300 	mov.w	r3, #0
 80099da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80099de:	4629      	mov	r1, r5
 80099e0:	028b      	lsls	r3, r1, #10
 80099e2:	4621      	mov	r1, r4
 80099e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80099e8:	4621      	mov	r1, r4
 80099ea:	028a      	lsls	r2, r1, #10
 80099ec:	4610      	mov	r0, r2
 80099ee:	4619      	mov	r1, r3
 80099f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099f2:	2200      	movs	r2, #0
 80099f4:	61bb      	str	r3, [r7, #24]
 80099f6:	61fa      	str	r2, [r7, #28]
 80099f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099fc:	f7f7 f82a 	bl	8000a54 <__aeabi_uldivmod>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4613      	mov	r3, r2
 8009a06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a08:	4b0b      	ldr	r3, [pc, #44]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	0c1b      	lsrs	r3, r3, #16
 8009a0e:	f003 0303 	and.w	r3, r3, #3
 8009a12:	3301      	adds	r3, #1
 8009a14:	005b      	lsls	r3, r3, #1
 8009a16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009a18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a22:	e002      	b.n	8009a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009a24:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <HAL_RCC_GetSysClockFreq+0x204>)
 8009a26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3750      	adds	r7, #80	; 0x50
 8009a30:	46bd      	mov	sp, r7
 8009a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a36:	bf00      	nop
 8009a38:	40023800 	.word	0x40023800
 8009a3c:	00f42400 	.word	0x00f42400
 8009a40:	007a1200 	.word	0x007a1200

08009a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a44:	b480      	push	{r7}
 8009a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a48:	4b03      	ldr	r3, [pc, #12]	; (8009a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	20000430 	.word	0x20000430

08009a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009a60:	f7ff fff0 	bl	8009a44 <HAL_RCC_GetHCLKFreq>
 8009a64:	4602      	mov	r2, r0
 8009a66:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	0a9b      	lsrs	r3, r3, #10
 8009a6c:	f003 0307 	and.w	r3, r3, #7
 8009a70:	4903      	ldr	r1, [pc, #12]	; (8009a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a72:	5ccb      	ldrb	r3, [r1, r3]
 8009a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	40023800 	.word	0x40023800
 8009a80:	0800c80c 	.word	0x0800c80c

08009a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009a88:	f7ff ffdc 	bl	8009a44 <HAL_RCC_GetHCLKFreq>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	4b05      	ldr	r3, [pc, #20]	; (8009aa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	0b5b      	lsrs	r3, r3, #13
 8009a94:	f003 0307 	and.w	r3, r3, #7
 8009a98:	4903      	ldr	r1, [pc, #12]	; (8009aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a9a:	5ccb      	ldrb	r3, [r1, r3]
 8009a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	40023800 	.word	0x40023800
 8009aa8:	0800c80c 	.word	0x0800c80c

08009aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d101      	bne.n	8009abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e041      	b.n	8009b42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d106      	bne.n	8009ad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f7fc fa6a 	bl	8005fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2202      	movs	r2, #2
 8009adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	4619      	mov	r1, r3
 8009aea:	4610      	mov	r0, r2
 8009aec:	f000 fdac 	bl	800a648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
	...

08009b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d001      	beq.n	8009b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e044      	b.n	8009bee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2202      	movs	r2, #2
 8009b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68da      	ldr	r2, [r3, #12]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f042 0201 	orr.w	r2, r2, #1
 8009b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a1e      	ldr	r2, [pc, #120]	; (8009bfc <HAL_TIM_Base_Start_IT+0xb0>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d018      	beq.n	8009bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b8e:	d013      	beq.n	8009bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a1a      	ldr	r2, [pc, #104]	; (8009c00 <HAL_TIM_Base_Start_IT+0xb4>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d00e      	beq.n	8009bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a19      	ldr	r2, [pc, #100]	; (8009c04 <HAL_TIM_Base_Start_IT+0xb8>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d009      	beq.n	8009bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a17      	ldr	r2, [pc, #92]	; (8009c08 <HAL_TIM_Base_Start_IT+0xbc>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d004      	beq.n	8009bb8 <HAL_TIM_Base_Start_IT+0x6c>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a16      	ldr	r2, [pc, #88]	; (8009c0c <HAL_TIM_Base_Start_IT+0xc0>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d111      	bne.n	8009bdc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	f003 0307 	and.w	r3, r3, #7
 8009bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2b06      	cmp	r3, #6
 8009bc8:	d010      	beq.n	8009bec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f042 0201 	orr.w	r2, r2, #1
 8009bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bda:	e007      	b.n	8009bec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f042 0201 	orr.w	r2, r2, #1
 8009bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3714      	adds	r7, #20
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	40010000 	.word	0x40010000
 8009c00:	40000400 	.word	0x40000400
 8009c04:	40000800 	.word	0x40000800
 8009c08:	40000c00 	.word	0x40000c00
 8009c0c:	40014000 	.word	0x40014000

08009c10 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68da      	ldr	r2, [r3, #12]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f022 0201 	bic.w	r2, r2, #1
 8009c26:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6a1a      	ldr	r2, [r3, #32]
 8009c2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c32:	4013      	ands	r3, r2
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10f      	bne.n	8009c58 <HAL_TIM_Base_Stop_IT+0x48>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6a1a      	ldr	r2, [r3, #32]
 8009c3e:	f240 4344 	movw	r3, #1092	; 0x444
 8009c42:	4013      	ands	r3, r2
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d107      	bne.n	8009c58 <HAL_TIM_Base_Stop_IT+0x48>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f022 0201 	bic.w	r2, r2, #1
 8009c56:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr

08009c6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b082      	sub	sp, #8
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d101      	bne.n	8009c80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e041      	b.n	8009d04 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d106      	bne.n	8009c9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7fc f91b 	bl	8005ed0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	3304      	adds	r3, #4
 8009caa:	4619      	mov	r1, r3
 8009cac:	4610      	mov	r0, r2
 8009cae:	f000 fccb 	bl	800a648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d109      	bne.n	8009d30 <HAL_TIM_PWM_Start+0x24>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	bf14      	ite	ne
 8009d28:	2301      	movne	r3, #1
 8009d2a:	2300      	moveq	r3, #0
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	e022      	b.n	8009d76 <HAL_TIM_PWM_Start+0x6a>
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	2b04      	cmp	r3, #4
 8009d34:	d109      	bne.n	8009d4a <HAL_TIM_PWM_Start+0x3e>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	bf14      	ite	ne
 8009d42:	2301      	movne	r3, #1
 8009d44:	2300      	moveq	r3, #0
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	e015      	b.n	8009d76 <HAL_TIM_PWM_Start+0x6a>
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	2b08      	cmp	r3, #8
 8009d4e:	d109      	bne.n	8009d64 <HAL_TIM_PWM_Start+0x58>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	bf14      	ite	ne
 8009d5c:	2301      	movne	r3, #1
 8009d5e:	2300      	moveq	r3, #0
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	e008      	b.n	8009d76 <HAL_TIM_PWM_Start+0x6a>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	bf14      	ite	ne
 8009d70:	2301      	movne	r3, #1
 8009d72:	2300      	moveq	r3, #0
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e068      	b.n	8009e50 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d104      	bne.n	8009d8e <HAL_TIM_PWM_Start+0x82>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2202      	movs	r2, #2
 8009d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d8c:	e013      	b.n	8009db6 <HAL_TIM_PWM_Start+0xaa>
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2b04      	cmp	r3, #4
 8009d92:	d104      	bne.n	8009d9e <HAL_TIM_PWM_Start+0x92>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2202      	movs	r2, #2
 8009d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d9c:	e00b      	b.n	8009db6 <HAL_TIM_PWM_Start+0xaa>
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	2b08      	cmp	r3, #8
 8009da2:	d104      	bne.n	8009dae <HAL_TIM_PWM_Start+0xa2>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dac:	e003      	b.n	8009db6 <HAL_TIM_PWM_Start+0xaa>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2202      	movs	r2, #2
 8009db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	6839      	ldr	r1, [r7, #0]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f000 fee8 	bl	800ab94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a23      	ldr	r2, [pc, #140]	; (8009e58 <HAL_TIM_PWM_Start+0x14c>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d107      	bne.n	8009dde <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ddc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a1d      	ldr	r2, [pc, #116]	; (8009e58 <HAL_TIM_PWM_Start+0x14c>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d018      	beq.n	8009e1a <HAL_TIM_PWM_Start+0x10e>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009df0:	d013      	beq.n	8009e1a <HAL_TIM_PWM_Start+0x10e>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a19      	ldr	r2, [pc, #100]	; (8009e5c <HAL_TIM_PWM_Start+0x150>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d00e      	beq.n	8009e1a <HAL_TIM_PWM_Start+0x10e>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a17      	ldr	r2, [pc, #92]	; (8009e60 <HAL_TIM_PWM_Start+0x154>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d009      	beq.n	8009e1a <HAL_TIM_PWM_Start+0x10e>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a16      	ldr	r2, [pc, #88]	; (8009e64 <HAL_TIM_PWM_Start+0x158>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d004      	beq.n	8009e1a <HAL_TIM_PWM_Start+0x10e>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a14      	ldr	r2, [pc, #80]	; (8009e68 <HAL_TIM_PWM_Start+0x15c>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d111      	bne.n	8009e3e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f003 0307 	and.w	r3, r3, #7
 8009e24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2b06      	cmp	r3, #6
 8009e2a:	d010      	beq.n	8009e4e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f042 0201 	orr.w	r2, r2, #1
 8009e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e3c:	e007      	b.n	8009e4e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f042 0201 	orr.w	r2, r2, #1
 8009e4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	40010000 	.word	0x40010000
 8009e5c:	40000400 	.word	0x40000400
 8009e60:	40000800 	.word	0x40000800
 8009e64:	40000c00 	.word	0x40000c00
 8009e68:	40014000 	.word	0x40014000

08009e6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d101      	bne.n	8009e80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e097      	b.n	8009fb0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d106      	bne.n	8009e9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f7fc f843 	bl	8005f20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2202      	movs	r2, #2
 8009e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	6812      	ldr	r2, [r2, #0]
 8009eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009eb0:	f023 0307 	bic.w	r3, r3, #7
 8009eb4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	3304      	adds	r3, #4
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	f000 fbc1 	bl	800a648 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6a1b      	ldr	r3, [r3, #32]
 8009edc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eee:	f023 0303 	bic.w	r3, r3, #3
 8009ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	689a      	ldr	r2, [r3, #8]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	021b      	lsls	r3, r3, #8
 8009efe:	4313      	orrs	r3, r2
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009f0c:	f023 030c 	bic.w	r3, r3, #12
 8009f10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	68da      	ldr	r2, [r3, #12]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	021b      	lsls	r3, r3, #8
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	693a      	ldr	r2, [r7, #16]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	011a      	lsls	r2, r3, #4
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	031b      	lsls	r3, r3, #12
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009f4a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009f52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	685a      	ldr	r2, [r3, #4]
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	695b      	ldr	r3, [r3, #20]
 8009f5c:	011b      	lsls	r3, r3, #4
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	697a      	ldr	r2, [r7, #20]
 8009f6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3718      	adds	r7, #24
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fc8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009fd0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009fd8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009fe0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d110      	bne.n	800a00a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d102      	bne.n	8009ff4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009fee:	7b7b      	ldrb	r3, [r7, #13]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d001      	beq.n	8009ff8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e069      	b.n	800a0cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2202      	movs	r2, #2
 8009ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2202      	movs	r2, #2
 800a004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a008:	e031      	b.n	800a06e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	2b04      	cmp	r3, #4
 800a00e:	d110      	bne.n	800a032 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a010:	7bbb      	ldrb	r3, [r7, #14]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d102      	bne.n	800a01c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a016:	7b3b      	ldrb	r3, [r7, #12]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d001      	beq.n	800a020 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e055      	b.n	800a0cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2202      	movs	r2, #2
 800a024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2202      	movs	r2, #2
 800a02c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a030:	e01d      	b.n	800a06e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a032:	7bfb      	ldrb	r3, [r7, #15]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d108      	bne.n	800a04a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a038:	7bbb      	ldrb	r3, [r7, #14]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d105      	bne.n	800a04a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a03e:	7b7b      	ldrb	r3, [r7, #13]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d102      	bne.n	800a04a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a044:	7b3b      	ldrb	r3, [r7, #12]
 800a046:	2b01      	cmp	r3, #1
 800a048:	d001      	beq.n	800a04e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e03e      	b.n	800a0cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2202      	movs	r2, #2
 800a052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2202      	movs	r2, #2
 800a05a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2202      	movs	r2, #2
 800a062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2202      	movs	r2, #2
 800a06a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d003      	beq.n	800a07c <HAL_TIM_Encoder_Start+0xc4>
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	2b04      	cmp	r3, #4
 800a078:	d008      	beq.n	800a08c <HAL_TIM_Encoder_Start+0xd4>
 800a07a:	e00f      	b.n	800a09c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2201      	movs	r2, #1
 800a082:	2100      	movs	r1, #0
 800a084:	4618      	mov	r0, r3
 800a086:	f000 fd85 	bl	800ab94 <TIM_CCxChannelCmd>
      break;
 800a08a:	e016      	b.n	800a0ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2201      	movs	r2, #1
 800a092:	2104      	movs	r1, #4
 800a094:	4618      	mov	r0, r3
 800a096:	f000 fd7d 	bl	800ab94 <TIM_CCxChannelCmd>
      break;
 800a09a:	e00e      	b.n	800a0ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f000 fd75 	bl	800ab94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	2104      	movs	r1, #4
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f000 fd6e 	bl	800ab94 <TIM_CCxChannelCmd>
      break;
 800a0b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f042 0201 	orr.w	r2, r2, #1
 800a0c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	f003 0302 	and.w	r3, r3, #2
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d122      	bne.n	800a130 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	f003 0302 	and.w	r3, r3, #2
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	d11b      	bne.n	800a130 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f06f 0202 	mvn.w	r2, #2
 800a100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	f003 0303 	and.w	r3, r3, #3
 800a112:	2b00      	cmp	r3, #0
 800a114:	d003      	beq.n	800a11e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fa77 	bl	800a60a <HAL_TIM_IC_CaptureCallback>
 800a11c:	e005      	b.n	800a12a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fa69 	bl	800a5f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fa7a 	bl	800a61e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	f003 0304 	and.w	r3, r3, #4
 800a13a:	2b04      	cmp	r3, #4
 800a13c:	d122      	bne.n	800a184 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	f003 0304 	and.w	r3, r3, #4
 800a148:	2b04      	cmp	r3, #4
 800a14a:	d11b      	bne.n	800a184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f06f 0204 	mvn.w	r2, #4
 800a154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2202      	movs	r2, #2
 800a15a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a166:	2b00      	cmp	r3, #0
 800a168:	d003      	beq.n	800a172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fa4d 	bl	800a60a <HAL_TIM_IC_CaptureCallback>
 800a170:	e005      	b.n	800a17e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fa3f 	bl	800a5f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fa50 	bl	800a61e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	f003 0308 	and.w	r3, r3, #8
 800a18e:	2b08      	cmp	r3, #8
 800a190:	d122      	bne.n	800a1d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	f003 0308 	and.w	r3, r3, #8
 800a19c:	2b08      	cmp	r3, #8
 800a19e:	d11b      	bne.n	800a1d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f06f 0208 	mvn.w	r2, #8
 800a1a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2204      	movs	r2, #4
 800a1ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	f003 0303 	and.w	r3, r3, #3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d003      	beq.n	800a1c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fa23 	bl	800a60a <HAL_TIM_IC_CaptureCallback>
 800a1c4:	e005      	b.n	800a1d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 fa15 	bl	800a5f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fa26 	bl	800a61e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	691b      	ldr	r3, [r3, #16]
 800a1de:	f003 0310 	and.w	r3, r3, #16
 800a1e2:	2b10      	cmp	r3, #16
 800a1e4:	d122      	bne.n	800a22c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	f003 0310 	and.w	r3, r3, #16
 800a1f0:	2b10      	cmp	r3, #16
 800a1f2:	d11b      	bne.n	800a22c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f06f 0210 	mvn.w	r2, #16
 800a1fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2208      	movs	r2, #8
 800a202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d003      	beq.n	800a21a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f9f9 	bl	800a60a <HAL_TIM_IC_CaptureCallback>
 800a218:	e005      	b.n	800a226 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f9eb 	bl	800a5f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 f9fc 	bl	800a61e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	2b01      	cmp	r3, #1
 800a238:	d10e      	bne.n	800a258 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	f003 0301 	and.w	r3, r3, #1
 800a244:	2b01      	cmp	r3, #1
 800a246:	d107      	bne.n	800a258 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f06f 0201 	mvn.w	r2, #1
 800a250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7fb fcf2 	bl	8005c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a262:	2b80      	cmp	r3, #128	; 0x80
 800a264:	d10e      	bne.n	800a284 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a270:	2b80      	cmp	r3, #128	; 0x80
 800a272:	d107      	bne.n	800a284 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a27c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 fd78 	bl	800ad74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28e:	2b40      	cmp	r3, #64	; 0x40
 800a290:	d10e      	bne.n	800a2b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a29c:	2b40      	cmp	r3, #64	; 0x40
 800a29e:	d107      	bne.n	800a2b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f9c1 	bl	800a632 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	f003 0320 	and.w	r3, r3, #32
 800a2ba:	2b20      	cmp	r3, #32
 800a2bc:	d10e      	bne.n	800a2dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	f003 0320 	and.w	r3, r3, #32
 800a2c8:	2b20      	cmp	r3, #32
 800a2ca:	d107      	bne.n	800a2dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f06f 0220 	mvn.w	r2, #32
 800a2d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 fd42 	bl	800ad60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2dc:	bf00      	nop
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d101      	bne.n	800a302 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a2fe:	2302      	movs	r3, #2
 800a300:	e0ae      	b.n	800a460 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2b0c      	cmp	r3, #12
 800a30e:	f200 809f 	bhi.w	800a450 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a312:	a201      	add	r2, pc, #4	; (adr r2, 800a318 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a318:	0800a34d 	.word	0x0800a34d
 800a31c:	0800a451 	.word	0x0800a451
 800a320:	0800a451 	.word	0x0800a451
 800a324:	0800a451 	.word	0x0800a451
 800a328:	0800a38d 	.word	0x0800a38d
 800a32c:	0800a451 	.word	0x0800a451
 800a330:	0800a451 	.word	0x0800a451
 800a334:	0800a451 	.word	0x0800a451
 800a338:	0800a3cf 	.word	0x0800a3cf
 800a33c:	0800a451 	.word	0x0800a451
 800a340:	0800a451 	.word	0x0800a451
 800a344:	0800a451 	.word	0x0800a451
 800a348:	0800a40f 	.word	0x0800a40f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68b9      	ldr	r1, [r7, #8]
 800a352:	4618      	mov	r0, r3
 800a354:	f000 f9f8 	bl	800a748 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	699a      	ldr	r2, [r3, #24]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f042 0208 	orr.w	r2, r2, #8
 800a366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	699a      	ldr	r2, [r3, #24]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f022 0204 	bic.w	r2, r2, #4
 800a376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6999      	ldr	r1, [r3, #24]
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	691a      	ldr	r2, [r3, #16]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	430a      	orrs	r2, r1
 800a388:	619a      	str	r2, [r3, #24]
      break;
 800a38a:	e064      	b.n	800a456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68b9      	ldr	r1, [r7, #8]
 800a392:	4618      	mov	r0, r3
 800a394:	f000 fa3e 	bl	800a814 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	699a      	ldr	r2, [r3, #24]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	699a      	ldr	r2, [r3, #24]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6999      	ldr	r1, [r3, #24]
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	021a      	lsls	r2, r3, #8
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	619a      	str	r2, [r3, #24]
      break;
 800a3cc:	e043      	b.n	800a456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68b9      	ldr	r1, [r7, #8]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 fa89 	bl	800a8ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	69da      	ldr	r2, [r3, #28]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f042 0208 	orr.w	r2, r2, #8
 800a3e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	69da      	ldr	r2, [r3, #28]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f022 0204 	bic.w	r2, r2, #4
 800a3f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	69d9      	ldr	r1, [r3, #28]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	691a      	ldr	r2, [r3, #16]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	430a      	orrs	r2, r1
 800a40a:	61da      	str	r2, [r3, #28]
      break;
 800a40c:	e023      	b.n	800a456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68b9      	ldr	r1, [r7, #8]
 800a414:	4618      	mov	r0, r3
 800a416:	f000 fad3 	bl	800a9c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	69da      	ldr	r2, [r3, #28]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	69da      	ldr	r2, [r3, #28]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	69d9      	ldr	r1, [r3, #28]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	021a      	lsls	r2, r3, #8
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	430a      	orrs	r2, r1
 800a44c:	61da      	str	r2, [r3, #28]
      break;
 800a44e:	e002      	b.n	800a456 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	75fb      	strb	r3, [r7, #23]
      break;
 800a454:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a45e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3718      	adds	r7, #24
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a472:	2300      	movs	r3, #0
 800a474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d101      	bne.n	800a484 <HAL_TIM_ConfigClockSource+0x1c>
 800a480:	2302      	movs	r3, #2
 800a482:	e0b4      	b.n	800a5ee <HAL_TIM_ConfigClockSource+0x186>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2202      	movs	r2, #2
 800a490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a4a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68ba      	ldr	r2, [r7, #8]
 800a4b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4bc:	d03e      	beq.n	800a53c <HAL_TIM_ConfigClockSource+0xd4>
 800a4be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4c2:	f200 8087 	bhi.w	800a5d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ca:	f000 8086 	beq.w	800a5da <HAL_TIM_ConfigClockSource+0x172>
 800a4ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4d2:	d87f      	bhi.n	800a5d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4d4:	2b70      	cmp	r3, #112	; 0x70
 800a4d6:	d01a      	beq.n	800a50e <HAL_TIM_ConfigClockSource+0xa6>
 800a4d8:	2b70      	cmp	r3, #112	; 0x70
 800a4da:	d87b      	bhi.n	800a5d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4dc:	2b60      	cmp	r3, #96	; 0x60
 800a4de:	d050      	beq.n	800a582 <HAL_TIM_ConfigClockSource+0x11a>
 800a4e0:	2b60      	cmp	r3, #96	; 0x60
 800a4e2:	d877      	bhi.n	800a5d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4e4:	2b50      	cmp	r3, #80	; 0x50
 800a4e6:	d03c      	beq.n	800a562 <HAL_TIM_ConfigClockSource+0xfa>
 800a4e8:	2b50      	cmp	r3, #80	; 0x50
 800a4ea:	d873      	bhi.n	800a5d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4ec:	2b40      	cmp	r3, #64	; 0x40
 800a4ee:	d058      	beq.n	800a5a2 <HAL_TIM_ConfigClockSource+0x13a>
 800a4f0:	2b40      	cmp	r3, #64	; 0x40
 800a4f2:	d86f      	bhi.n	800a5d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4f4:	2b30      	cmp	r3, #48	; 0x30
 800a4f6:	d064      	beq.n	800a5c2 <HAL_TIM_ConfigClockSource+0x15a>
 800a4f8:	2b30      	cmp	r3, #48	; 0x30
 800a4fa:	d86b      	bhi.n	800a5d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4fc:	2b20      	cmp	r3, #32
 800a4fe:	d060      	beq.n	800a5c2 <HAL_TIM_ConfigClockSource+0x15a>
 800a500:	2b20      	cmp	r3, #32
 800a502:	d867      	bhi.n	800a5d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a504:	2b00      	cmp	r3, #0
 800a506:	d05c      	beq.n	800a5c2 <HAL_TIM_ConfigClockSource+0x15a>
 800a508:	2b10      	cmp	r3, #16
 800a50a:	d05a      	beq.n	800a5c2 <HAL_TIM_ConfigClockSource+0x15a>
 800a50c:	e062      	b.n	800a5d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6818      	ldr	r0, [r3, #0]
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	6899      	ldr	r1, [r3, #8]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	685a      	ldr	r2, [r3, #4]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	f000 fb19 	bl	800ab54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68ba      	ldr	r2, [r7, #8]
 800a538:	609a      	str	r2, [r3, #8]
      break;
 800a53a:	e04f      	b.n	800a5dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6818      	ldr	r0, [r3, #0]
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	6899      	ldr	r1, [r3, #8]
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685a      	ldr	r2, [r3, #4]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	f000 fb02 	bl	800ab54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	689a      	ldr	r2, [r3, #8]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a55e:	609a      	str	r2, [r3, #8]
      break;
 800a560:	e03c      	b.n	800a5dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6818      	ldr	r0, [r3, #0]
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	6859      	ldr	r1, [r3, #4]
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	461a      	mov	r2, r3
 800a570:	f000 fa76 	bl	800aa60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2150      	movs	r1, #80	; 0x50
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 facf 	bl	800ab1e <TIM_ITRx_SetConfig>
      break;
 800a580:	e02c      	b.n	800a5dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6818      	ldr	r0, [r3, #0]
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	6859      	ldr	r1, [r3, #4]
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	461a      	mov	r2, r3
 800a590:	f000 fa95 	bl	800aabe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2160      	movs	r1, #96	; 0x60
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 fabf 	bl	800ab1e <TIM_ITRx_SetConfig>
      break;
 800a5a0:	e01c      	b.n	800a5dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6818      	ldr	r0, [r3, #0]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	6859      	ldr	r1, [r3, #4]
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	f000 fa56 	bl	800aa60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2140      	movs	r1, #64	; 0x40
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f000 faaf 	bl	800ab1e <TIM_ITRx_SetConfig>
      break;
 800a5c0:	e00c      	b.n	800a5dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	f000 faa6 	bl	800ab1e <TIM_ITRx_SetConfig>
      break;
 800a5d2:	e003      	b.n	800a5dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a5d8:	e000      	b.n	800a5dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a5da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b083      	sub	sp, #12
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a5fe:	bf00      	nop
 800a600:	370c      	adds	r7, #12
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b083      	sub	sp, #12
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a612:	bf00      	nop
 800a614:	370c      	adds	r7, #12
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr

0800a61e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a61e:	b480      	push	{r7}
 800a620:	b083      	sub	sp, #12
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a626:	bf00      	nop
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a632:	b480      	push	{r7}
 800a634:	b083      	sub	sp, #12
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a63a:	bf00      	nop
 800a63c:	370c      	adds	r7, #12
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
	...

0800a648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4a34      	ldr	r2, [pc, #208]	; (800a72c <TIM_Base_SetConfig+0xe4>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d00f      	beq.n	800a680 <TIM_Base_SetConfig+0x38>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a666:	d00b      	beq.n	800a680 <TIM_Base_SetConfig+0x38>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a31      	ldr	r2, [pc, #196]	; (800a730 <TIM_Base_SetConfig+0xe8>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d007      	beq.n	800a680 <TIM_Base_SetConfig+0x38>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	4a30      	ldr	r2, [pc, #192]	; (800a734 <TIM_Base_SetConfig+0xec>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d003      	beq.n	800a680 <TIM_Base_SetConfig+0x38>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4a2f      	ldr	r2, [pc, #188]	; (800a738 <TIM_Base_SetConfig+0xf0>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d108      	bne.n	800a692 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	4313      	orrs	r3, r2
 800a690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a25      	ldr	r2, [pc, #148]	; (800a72c <TIM_Base_SetConfig+0xe4>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d01b      	beq.n	800a6d2 <TIM_Base_SetConfig+0x8a>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6a0:	d017      	beq.n	800a6d2 <TIM_Base_SetConfig+0x8a>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a22      	ldr	r2, [pc, #136]	; (800a730 <TIM_Base_SetConfig+0xe8>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d013      	beq.n	800a6d2 <TIM_Base_SetConfig+0x8a>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4a21      	ldr	r2, [pc, #132]	; (800a734 <TIM_Base_SetConfig+0xec>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d00f      	beq.n	800a6d2 <TIM_Base_SetConfig+0x8a>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4a20      	ldr	r2, [pc, #128]	; (800a738 <TIM_Base_SetConfig+0xf0>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d00b      	beq.n	800a6d2 <TIM_Base_SetConfig+0x8a>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4a1f      	ldr	r2, [pc, #124]	; (800a73c <TIM_Base_SetConfig+0xf4>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d007      	beq.n	800a6d2 <TIM_Base_SetConfig+0x8a>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a1e      	ldr	r2, [pc, #120]	; (800a740 <TIM_Base_SetConfig+0xf8>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d003      	beq.n	800a6d2 <TIM_Base_SetConfig+0x8a>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a1d      	ldr	r2, [pc, #116]	; (800a744 <TIM_Base_SetConfig+0xfc>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d108      	bne.n	800a6e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	695b      	ldr	r3, [r3, #20]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	689a      	ldr	r2, [r3, #8]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a08      	ldr	r2, [pc, #32]	; (800a72c <TIM_Base_SetConfig+0xe4>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d103      	bne.n	800a718 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	691a      	ldr	r2, [r3, #16]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	615a      	str	r2, [r3, #20]
}
 800a71e:	bf00      	nop
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	40010000 	.word	0x40010000
 800a730:	40000400 	.word	0x40000400
 800a734:	40000800 	.word	0x40000800
 800a738:	40000c00 	.word	0x40000c00
 800a73c:	40014000 	.word	0x40014000
 800a740:	40014400 	.word	0x40014400
 800a744:	40014800 	.word	0x40014800

0800a748 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a748:	b480      	push	{r7}
 800a74a:	b087      	sub	sp, #28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	f023 0201 	bic.w	r2, r3, #1
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f023 0303 	bic.w	r3, r3, #3
 800a77e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	4313      	orrs	r3, r2
 800a788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	f023 0302 	bic.w	r3, r3, #2
 800a790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	697a      	ldr	r2, [r7, #20]
 800a798:	4313      	orrs	r3, r2
 800a79a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a1c      	ldr	r2, [pc, #112]	; (800a810 <TIM_OC1_SetConfig+0xc8>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d10c      	bne.n	800a7be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	f023 0308 	bic.w	r3, r3, #8
 800a7aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	697a      	ldr	r2, [r7, #20]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f023 0304 	bic.w	r3, r3, #4
 800a7bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4a13      	ldr	r2, [pc, #76]	; (800a810 <TIM_OC1_SetConfig+0xc8>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d111      	bne.n	800a7ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	695b      	ldr	r3, [r3, #20]
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	693a      	ldr	r2, [r7, #16]
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	68fa      	ldr	r2, [r7, #12]
 800a7f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	685a      	ldr	r2, [r3, #4]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	697a      	ldr	r2, [r7, #20]
 800a802:	621a      	str	r2, [r3, #32]
}
 800a804:	bf00      	nop
 800a806:	371c      	adds	r7, #28
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr
 800a810:	40010000 	.word	0x40010000

0800a814 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a814:	b480      	push	{r7}
 800a816:	b087      	sub	sp, #28
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	f023 0210 	bic.w	r2, r3, #16
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a1b      	ldr	r3, [r3, #32]
 800a82e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a84a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	021b      	lsls	r3, r3, #8
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	4313      	orrs	r3, r2
 800a856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	f023 0320 	bic.w	r3, r3, #32
 800a85e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	011b      	lsls	r3, r3, #4
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	4313      	orrs	r3, r2
 800a86a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a1e      	ldr	r2, [pc, #120]	; (800a8e8 <TIM_OC2_SetConfig+0xd4>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d10d      	bne.n	800a890 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a87a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	011b      	lsls	r3, r3, #4
 800a882:	697a      	ldr	r2, [r7, #20]
 800a884:	4313      	orrs	r3, r2
 800a886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a88e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a15      	ldr	r2, [pc, #84]	; (800a8e8 <TIM_OC2_SetConfig+0xd4>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d113      	bne.n	800a8c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a89e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	695b      	ldr	r3, [r3, #20]
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	693a      	ldr	r2, [r7, #16]
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	699b      	ldr	r3, [r3, #24]
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	693a      	ldr	r2, [r7, #16]
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	693a      	ldr	r2, [r7, #16]
 800a8c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	685a      	ldr	r2, [r3, #4]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	621a      	str	r2, [r3, #32]
}
 800a8da:	bf00      	nop
 800a8dc:	371c      	adds	r7, #28
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	40010000 	.word	0x40010000

0800a8ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a1b      	ldr	r3, [r3, #32]
 800a8fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6a1b      	ldr	r3, [r3, #32]
 800a906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a91a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f023 0303 	bic.w	r3, r3, #3
 800a922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	021b      	lsls	r3, r3, #8
 800a93c:	697a      	ldr	r2, [r7, #20]
 800a93e:	4313      	orrs	r3, r2
 800a940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a1d      	ldr	r2, [pc, #116]	; (800a9bc <TIM_OC3_SetConfig+0xd0>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d10d      	bne.n	800a966 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	021b      	lsls	r3, r3, #8
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a14      	ldr	r2, [pc, #80]	; (800a9bc <TIM_OC3_SetConfig+0xd0>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d113      	bne.n	800a996 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a97c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	011b      	lsls	r3, r3, #4
 800a984:	693a      	ldr	r2, [r7, #16]
 800a986:	4313      	orrs	r3, r2
 800a988:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	011b      	lsls	r3, r3, #4
 800a990:	693a      	ldr	r2, [r7, #16]
 800a992:	4313      	orrs	r3, r2
 800a994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	693a      	ldr	r2, [r7, #16]
 800a99a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	68fa      	ldr	r2, [r7, #12]
 800a9a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	685a      	ldr	r2, [r3, #4]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	697a      	ldr	r2, [r7, #20]
 800a9ae:	621a      	str	r2, [r3, #32]
}
 800a9b0:	bf00      	nop
 800a9b2:	371c      	adds	r7, #28
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	40010000 	.word	0x40010000

0800a9c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b087      	sub	sp, #28
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	69db      	ldr	r3, [r3, #28]
 800a9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	021b      	lsls	r3, r3, #8
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	031b      	lsls	r3, r3, #12
 800aa12:	693a      	ldr	r2, [r7, #16]
 800aa14:	4313      	orrs	r3, r2
 800aa16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4a10      	ldr	r2, [pc, #64]	; (800aa5c <TIM_OC4_SetConfig+0x9c>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d109      	bne.n	800aa34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	019b      	lsls	r3, r3, #6
 800aa2e:	697a      	ldr	r2, [r7, #20]
 800aa30:	4313      	orrs	r3, r2
 800aa32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	685a      	ldr	r2, [r3, #4]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	693a      	ldr	r2, [r7, #16]
 800aa4c:	621a      	str	r2, [r3, #32]
}
 800aa4e:	bf00      	nop
 800aa50:	371c      	adds	r7, #28
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	40010000 	.word	0x40010000

0800aa60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b087      	sub	sp, #28
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6a1b      	ldr	r3, [r3, #32]
 800aa70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	f023 0201 	bic.w	r2, r3, #1
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	011b      	lsls	r3, r3, #4
 800aa90:	693a      	ldr	r2, [r7, #16]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f023 030a 	bic.w	r3, r3, #10
 800aa9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	693a      	ldr	r2, [r7, #16]
 800aaaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	621a      	str	r2, [r3, #32]
}
 800aab2:	bf00      	nop
 800aab4:	371c      	adds	r7, #28
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr

0800aabe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aabe:	b480      	push	{r7}
 800aac0:	b087      	sub	sp, #28
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	60f8      	str	r0, [r7, #12]
 800aac6:	60b9      	str	r1, [r7, #8]
 800aac8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	f023 0210 	bic.w	r2, r3, #16
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6a1b      	ldr	r3, [r3, #32]
 800aae0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aae8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	031b      	lsls	r3, r3, #12
 800aaee:	697a      	ldr	r2, [r7, #20]
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aafa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	011b      	lsls	r3, r3, #4
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	697a      	ldr	r2, [r7, #20]
 800ab0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	693a      	ldr	r2, [r7, #16]
 800ab10:	621a      	str	r2, [r3, #32]
}
 800ab12:	bf00      	nop
 800ab14:	371c      	adds	r7, #28
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr

0800ab1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab1e:	b480      	push	{r7}
 800ab20:	b085      	sub	sp, #20
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
 800ab26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	f043 0307 	orr.w	r3, r3, #7
 800ab40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	609a      	str	r2, [r3, #8]
}
 800ab48:	bf00      	nop
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
 800ab60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	021a      	lsls	r2, r3, #8
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	431a      	orrs	r2, r3
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	697a      	ldr	r2, [r7, #20]
 800ab86:	609a      	str	r2, [r3, #8]
}
 800ab88:	bf00      	nop
 800ab8a:	371c      	adds	r7, #28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b087      	sub	sp, #28
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	f003 031f 	and.w	r3, r3, #31
 800aba6:	2201      	movs	r2, #1
 800aba8:	fa02 f303 	lsl.w	r3, r2, r3
 800abac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6a1a      	ldr	r2, [r3, #32]
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	43db      	mvns	r3, r3
 800abb6:	401a      	ands	r2, r3
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	6a1a      	ldr	r2, [r3, #32]
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	f003 031f 	and.w	r3, r3, #31
 800abc6:	6879      	ldr	r1, [r7, #4]
 800abc8:	fa01 f303 	lsl.w	r3, r1, r3
 800abcc:	431a      	orrs	r2, r3
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	621a      	str	r2, [r3, #32]
}
 800abd2:	bf00      	nop
 800abd4:	371c      	adds	r7, #28
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
	...

0800abe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d101      	bne.n	800abf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abf4:	2302      	movs	r3, #2
 800abf6:	e050      	b.n	800ac9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a1c      	ldr	r2, [pc, #112]	; (800aca8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d018      	beq.n	800ac6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac44:	d013      	beq.n	800ac6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a18      	ldr	r2, [pc, #96]	; (800acac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d00e      	beq.n	800ac6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a16      	ldr	r2, [pc, #88]	; (800acb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d009      	beq.n	800ac6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a15      	ldr	r2, [pc, #84]	; (800acb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d004      	beq.n	800ac6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a13      	ldr	r2, [pc, #76]	; (800acb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d10c      	bne.n	800ac88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68ba      	ldr	r2, [r7, #8]
 800ac86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3714      	adds	r7, #20
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop
 800aca8:	40010000 	.word	0x40010000
 800acac:	40000400 	.word	0x40000400
 800acb0:	40000800 	.word	0x40000800
 800acb4:	40000c00 	.word	0x40000c00
 800acb8:	40014000 	.word	0x40014000

0800acbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800acc6:	2300      	movs	r3, #0
 800acc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d101      	bne.n	800acd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800acd4:	2302      	movs	r3, #2
 800acd6:	e03d      	b.n	800ad54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	4313      	orrs	r3, r2
 800acec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4313      	orrs	r3, r2
 800ad16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	695b      	ldr	r3, [r3, #20]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	69db      	ldr	r3, [r3, #28]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad68:	bf00      	nop
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad7c:	bf00      	nop
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d101      	bne.n	800ad9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	e03f      	b.n	800ae1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d106      	bne.n	800adb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f7fb f97c 	bl	80060ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2224      	movs	r2, #36	; 0x24
 800adb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68da      	ldr	r2, [r3, #12]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800adca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 ff81 	bl	800bcd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	691a      	ldr	r2, [r3, #16]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ade0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	695a      	ldr	r2, [r3, #20]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800adf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	68da      	ldr	r2, [r3, #12]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2220      	movs	r2, #32
 800ae0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2220      	movs	r2, #32
 800ae14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3708      	adds	r7, #8
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
	...

0800ae24 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b08c      	sub	sp, #48	; 0x30
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	4613      	mov	r3, r2
 800ae30:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	2b20      	cmp	r3, #32
 800ae3c:	d165      	bne.n	800af0a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <HAL_UART_Transmit_DMA+0x26>
 800ae44:	88fb      	ldrh	r3, [r7, #6]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d101      	bne.n	800ae4e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e05e      	b.n	800af0c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d101      	bne.n	800ae5c <HAL_UART_Transmit_DMA+0x38>
 800ae58:	2302      	movs	r3, #2
 800ae5a:	e057      	b.n	800af0c <HAL_UART_Transmit_DMA+0xe8>
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800ae64:	68ba      	ldr	r2, [r7, #8]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	88fa      	ldrh	r2, [r7, #6]
 800ae6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	88fa      	ldrh	r2, [r7, #6]
 800ae74:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2221      	movs	r2, #33	; 0x21
 800ae80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae88:	4a22      	ldr	r2, [pc, #136]	; (800af14 <HAL_UART_Transmit_DMA+0xf0>)
 800ae8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae90:	4a21      	ldr	r2, [pc, #132]	; (800af18 <HAL_UART_Transmit_DMA+0xf4>)
 800ae92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae98:	4a20      	ldr	r2, [pc, #128]	; (800af1c <HAL_UART_Transmit_DMA+0xf8>)
 800ae9a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aea0:	2200      	movs	r2, #0
 800aea2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800aea4:	f107 0308 	add.w	r3, r7, #8
 800aea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800aeae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb0:	6819      	ldr	r1, [r3, #0]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	461a      	mov	r2, r3
 800aeba:	88fb      	ldrh	r3, [r7, #6]
 800aebc:	f7fb fca0 	bl	8006800 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aec8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2200      	movs	r2, #0
 800aece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	3314      	adds	r3, #20
 800aed8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	e853 3f00 	ldrex	r3, [r3]
 800aee0:	617b      	str	r3, [r7, #20]
   return(result);
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aee8:	62bb      	str	r3, [r7, #40]	; 0x28
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	3314      	adds	r3, #20
 800aef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aef2:	627a      	str	r2, [r7, #36]	; 0x24
 800aef4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef6:	6a39      	ldr	r1, [r7, #32]
 800aef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aefa:	e841 2300 	strex	r3, r2, [r1]
 800aefe:	61fb      	str	r3, [r7, #28]
   return(result);
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1e5      	bne.n	800aed2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800af06:	2300      	movs	r3, #0
 800af08:	e000      	b.n	800af0c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800af0a:	2302      	movs	r3, #2
  }
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3730      	adds	r7, #48	; 0x30
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	0800b56d 	.word	0x0800b56d
 800af18:	0800b607 	.word	0x0800b607
 800af1c:	0800b77f 	.word	0x0800b77f

0800af20 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b08c      	sub	sp, #48	; 0x30
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	4613      	mov	r3, r2
 800af2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2b20      	cmp	r3, #32
 800af38:	d152      	bne.n	800afe0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d002      	beq.n	800af46 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800af40:	88fb      	ldrh	r3, [r7, #6]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d101      	bne.n	800af4a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	e04b      	b.n	800afe2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af50:	2b01      	cmp	r3, #1
 800af52:	d101      	bne.n	800af58 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800af54:	2302      	movs	r3, #2
 800af56:	e044      	b.n	800afe2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2201      	movs	r2, #1
 800af64:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800af66:	88fb      	ldrh	r3, [r7, #6]
 800af68:	461a      	mov	r2, r3
 800af6a:	68b9      	ldr	r1, [r7, #8]
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f000 fc51 	bl	800b814 <UART_Start_Receive_DMA>
 800af72:	4603      	mov	r3, r0
 800af74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800af78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d12c      	bne.n	800afda <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af84:	2b01      	cmp	r3, #1
 800af86:	d125      	bne.n	800afd4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af88:	2300      	movs	r3, #0
 800af8a:	613b      	str	r3, [r7, #16]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	613b      	str	r3, [r7, #16]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	613b      	str	r3, [r7, #16]
 800af9c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	330c      	adds	r3, #12
 800afa4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	e853 3f00 	ldrex	r3, [r3]
 800afac:	617b      	str	r3, [r7, #20]
   return(result);
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	f043 0310 	orr.w	r3, r3, #16
 800afb4:	62bb      	str	r3, [r7, #40]	; 0x28
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	330c      	adds	r3, #12
 800afbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afbe:	627a      	str	r2, [r7, #36]	; 0x24
 800afc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc2:	6a39      	ldr	r1, [r7, #32]
 800afc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afc6:	e841 2300 	strex	r3, r2, [r1]
 800afca:	61fb      	str	r3, [r7, #28]
   return(result);
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1e5      	bne.n	800af9e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800afd2:	e002      	b.n	800afda <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800afda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afde:	e000      	b.n	800afe2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800afe0:	2302      	movs	r3, #2
  }
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3730      	adds	r7, #48	; 0x30
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
	...

0800afec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b0ba      	sub	sp, #232	; 0xe8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	695b      	ldr	r3, [r3, #20]
 800b00e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b012:	2300      	movs	r3, #0
 800b014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b018:	2300      	movs	r3, #0
 800b01a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b01e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b022:	f003 030f 	and.w	r3, r3, #15
 800b026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b02a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d10f      	bne.n	800b052 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b036:	f003 0320 	and.w	r3, r3, #32
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d009      	beq.n	800b052 <HAL_UART_IRQHandler+0x66>
 800b03e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b042:	f003 0320 	and.w	r3, r3, #32
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 fd87 	bl	800bb5e <UART_Receive_IT>
      return;
 800b050:	e256      	b.n	800b500 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b052:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 80de 	beq.w	800b218 <HAL_UART_IRQHandler+0x22c>
 800b05c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b060:	f003 0301 	and.w	r3, r3, #1
 800b064:	2b00      	cmp	r3, #0
 800b066:	d106      	bne.n	800b076 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b06c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b070:	2b00      	cmp	r3, #0
 800b072:	f000 80d1 	beq.w	800b218 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b07a:	f003 0301 	and.w	r3, r3, #1
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00b      	beq.n	800b09a <HAL_UART_IRQHandler+0xae>
 800b082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d005      	beq.n	800b09a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b092:	f043 0201 	orr.w	r2, r3, #1
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b09a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b09e:	f003 0304 	and.w	r3, r3, #4
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00b      	beq.n	800b0be <HAL_UART_IRQHandler+0xd2>
 800b0a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0aa:	f003 0301 	and.w	r3, r3, #1
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d005      	beq.n	800b0be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b6:	f043 0202 	orr.w	r2, r3, #2
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b0be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0c2:	f003 0302 	and.w	r3, r3, #2
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00b      	beq.n	800b0e2 <HAL_UART_IRQHandler+0xf6>
 800b0ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0ce:	f003 0301 	and.w	r3, r3, #1
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d005      	beq.n	800b0e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0da:	f043 0204 	orr.w	r2, r3, #4
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0e6:	f003 0308 	and.w	r3, r3, #8
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d011      	beq.n	800b112 <HAL_UART_IRQHandler+0x126>
 800b0ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0f2:	f003 0320 	and.w	r3, r3, #32
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d105      	bne.n	800b106 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b0fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0fe:	f003 0301 	and.w	r3, r3, #1
 800b102:	2b00      	cmp	r3, #0
 800b104:	d005      	beq.n	800b112 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10a:	f043 0208 	orr.w	r2, r3, #8
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b116:	2b00      	cmp	r3, #0
 800b118:	f000 81ed 	beq.w	800b4f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b11c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b120:	f003 0320 	and.w	r3, r3, #32
 800b124:	2b00      	cmp	r3, #0
 800b126:	d008      	beq.n	800b13a <HAL_UART_IRQHandler+0x14e>
 800b128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b12c:	f003 0320 	and.w	r3, r3, #32
 800b130:	2b00      	cmp	r3, #0
 800b132:	d002      	beq.n	800b13a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 fd12 	bl	800bb5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	695b      	ldr	r3, [r3, #20]
 800b140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b144:	2b40      	cmp	r3, #64	; 0x40
 800b146:	bf0c      	ite	eq
 800b148:	2301      	moveq	r3, #1
 800b14a:	2300      	movne	r3, #0
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b156:	f003 0308 	and.w	r3, r3, #8
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d103      	bne.n	800b166 <HAL_UART_IRQHandler+0x17a>
 800b15e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b162:	2b00      	cmp	r3, #0
 800b164:	d04f      	beq.n	800b206 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fc1a 	bl	800b9a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	695b      	ldr	r3, [r3, #20]
 800b172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b176:	2b40      	cmp	r3, #64	; 0x40
 800b178:	d141      	bne.n	800b1fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	3314      	adds	r3, #20
 800b180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b184:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b188:	e853 3f00 	ldrex	r3, [r3]
 800b18c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	3314      	adds	r3, #20
 800b1a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b1a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b1aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b1b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b1b6:	e841 2300 	strex	r3, r2, [r1]
 800b1ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b1be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1d9      	bne.n	800b17a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d013      	beq.n	800b1f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d2:	4a7d      	ldr	r2, [pc, #500]	; (800b3c8 <HAL_UART_IRQHandler+0x3dc>)
 800b1d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fb fbd8 	bl	8006990 <HAL_DMA_Abort_IT>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d016      	beq.n	800b214 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1f4:	e00e      	b.n	800b214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f9ae 	bl	800b558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1fc:	e00a      	b.n	800b214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f9aa 	bl	800b558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b204:	e006      	b.n	800b214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 f9a6 	bl	800b558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b212:	e170      	b.n	800b4f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b214:	bf00      	nop
    return;
 800b216:	e16e      	b.n	800b4f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	f040 814a 	bne.w	800b4b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b226:	f003 0310 	and.w	r3, r3, #16
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f000 8143 	beq.w	800b4b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b234:	f003 0310 	and.w	r3, r3, #16
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f000 813c 	beq.w	800b4b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b23e:	2300      	movs	r3, #0
 800b240:	60bb      	str	r3, [r7, #8]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	60bb      	str	r3, [r7, #8]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	60bb      	str	r3, [r7, #8]
 800b252:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	695b      	ldr	r3, [r3, #20]
 800b25a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b25e:	2b40      	cmp	r3, #64	; 0x40
 800b260:	f040 80b4 	bne.w	800b3cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b270:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 8140 	beq.w	800b4fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b27e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b282:	429a      	cmp	r2, r3
 800b284:	f080 8139 	bcs.w	800b4fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b28e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b294:	69db      	ldr	r3, [r3, #28]
 800b296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b29a:	f000 8088 	beq.w	800b3ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	330c      	adds	r3, #12
 800b2a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b2ac:	e853 3f00 	ldrex	r3, [r3]
 800b2b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b2b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b2b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	330c      	adds	r3, #12
 800b2c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b2ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b2ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b2d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b2da:	e841 2300 	strex	r3, r2, [r1]
 800b2de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b2e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d1d9      	bne.n	800b29e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	3314      	adds	r3, #20
 800b2f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2f4:	e853 3f00 	ldrex	r3, [r3]
 800b2f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b2fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2fc:	f023 0301 	bic.w	r3, r3, #1
 800b300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	3314      	adds	r3, #20
 800b30a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b30e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b312:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b314:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b316:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b31a:	e841 2300 	strex	r3, r2, [r1]
 800b31e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1e1      	bne.n	800b2ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3314      	adds	r3, #20
 800b32c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b330:	e853 3f00 	ldrex	r3, [r3]
 800b334:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b33c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	3314      	adds	r3, #20
 800b346:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b34a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b34c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b350:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b352:	e841 2300 	strex	r3, r2, [r1]
 800b356:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d1e3      	bne.n	800b326 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2220      	movs	r2, #32
 800b362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	330c      	adds	r3, #12
 800b372:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b376:	e853 3f00 	ldrex	r3, [r3]
 800b37a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b37c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b37e:	f023 0310 	bic.w	r3, r3, #16
 800b382:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	330c      	adds	r3, #12
 800b38c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b390:	65ba      	str	r2, [r7, #88]	; 0x58
 800b392:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b394:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b398:	e841 2300 	strex	r3, r2, [r1]
 800b39c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b39e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d1e3      	bne.n	800b36c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7fb fa81 	bl	80068b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	4619      	mov	r1, r3
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7f9 fbde 	bl	8004b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b3c4:	e099      	b.n	800b4fa <HAL_UART_IRQHandler+0x50e>
 800b3c6:	bf00      	nop
 800b3c8:	0800ba67 	.word	0x0800ba67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f000 808b 	beq.w	800b4fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b3e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f000 8086 	beq.w	800b4fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	330c      	adds	r3, #12
 800b3f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fc:	e853 3f00 	ldrex	r3, [r3]
 800b400:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b404:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b408:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	330c      	adds	r3, #12
 800b412:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b416:	647a      	str	r2, [r7, #68]	; 0x44
 800b418:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b41c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b41e:	e841 2300 	strex	r3, r2, [r1]
 800b422:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1e3      	bne.n	800b3f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	3314      	adds	r3, #20
 800b430:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b434:	e853 3f00 	ldrex	r3, [r3]
 800b438:	623b      	str	r3, [r7, #32]
   return(result);
 800b43a:	6a3b      	ldr	r3, [r7, #32]
 800b43c:	f023 0301 	bic.w	r3, r3, #1
 800b440:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	3314      	adds	r3, #20
 800b44a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b44e:	633a      	str	r2, [r7, #48]	; 0x30
 800b450:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b456:	e841 2300 	strex	r3, r2, [r1]
 800b45a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d1e3      	bne.n	800b42a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2220      	movs	r2, #32
 800b466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	330c      	adds	r3, #12
 800b476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	e853 3f00 	ldrex	r3, [r3]
 800b47e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f023 0310 	bic.w	r3, r3, #16
 800b486:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	330c      	adds	r3, #12
 800b490:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b494:	61fa      	str	r2, [r7, #28]
 800b496:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b498:	69b9      	ldr	r1, [r7, #24]
 800b49a:	69fa      	ldr	r2, [r7, #28]
 800b49c:	e841 2300 	strex	r3, r2, [r1]
 800b4a0:	617b      	str	r3, [r7, #20]
   return(result);
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1e3      	bne.n	800b470 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b4a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f7f9 fb66 	bl	8004b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b4b4:	e023      	b.n	800b4fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b4b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d009      	beq.n	800b4d6 <HAL_UART_IRQHandler+0x4ea>
 800b4c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d003      	beq.n	800b4d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fadd 	bl	800ba8e <UART_Transmit_IT>
    return;
 800b4d4:	e014      	b.n	800b500 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b4d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00e      	beq.n	800b500 <HAL_UART_IRQHandler+0x514>
 800b4e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d008      	beq.n	800b500 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 fb1d 	bl	800bb2e <UART_EndTransmit_IT>
    return;
 800b4f4:	e004      	b.n	800b500 <HAL_UART_IRQHandler+0x514>
    return;
 800b4f6:	bf00      	nop
 800b4f8:	e002      	b.n	800b500 <HAL_UART_IRQHandler+0x514>
      return;
 800b4fa:	bf00      	nop
 800b4fc:	e000      	b.n	800b500 <HAL_UART_IRQHandler+0x514>
      return;
 800b4fe:	bf00      	nop
  }
}
 800b500:	37e8      	adds	r7, #232	; 0xe8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop

0800b508 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b510:	bf00      	nop
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b538:	bf00      	nop
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b560:	bf00      	nop
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b090      	sub	sp, #64	; 0x40
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b578:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b584:	2b00      	cmp	r3, #0
 800b586:	d137      	bne.n	800b5f8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b58a:	2200      	movs	r2, #0
 800b58c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	3314      	adds	r3, #20
 800b594:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b598:	e853 3f00 	ldrex	r3, [r3]
 800b59c:	623b      	str	r3, [r7, #32]
   return(result);
 800b59e:	6a3b      	ldr	r3, [r7, #32]
 800b5a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5a4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	3314      	adds	r3, #20
 800b5ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5ae:	633a      	str	r2, [r7, #48]	; 0x30
 800b5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5b6:	e841 2300 	strex	r3, r2, [r1]
 800b5ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1e5      	bne.n	800b58e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	330c      	adds	r3, #12
 800b5c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	e853 3f00 	ldrex	r3, [r3]
 800b5d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5d8:	637b      	str	r3, [r7, #52]	; 0x34
 800b5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	330c      	adds	r3, #12
 800b5e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5e2:	61fa      	str	r2, [r7, #28]
 800b5e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e6:	69b9      	ldr	r1, [r7, #24]
 800b5e8:	69fa      	ldr	r2, [r7, #28]
 800b5ea:	e841 2300 	strex	r3, r2, [r1]
 800b5ee:	617b      	str	r3, [r7, #20]
   return(result);
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d1e5      	bne.n	800b5c2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b5f6:	e002      	b.n	800b5fe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b5f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b5fa:	f7ff ff85 	bl	800b508 <HAL_UART_TxCpltCallback>
}
 800b5fe:	bf00      	nop
 800b600:	3740      	adds	r7, #64	; 0x40
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b084      	sub	sp, #16
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b612:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f7ff ff81 	bl	800b51c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b61a:	bf00      	nop
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b09c      	sub	sp, #112	; 0x70
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b62e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d172      	bne.n	800b724 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b63e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b640:	2200      	movs	r2, #0
 800b642:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	330c      	adds	r3, #12
 800b64a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b64e:	e853 3f00 	ldrex	r3, [r3]
 800b652:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b656:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b65a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b65c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	330c      	adds	r3, #12
 800b662:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b664:	65ba      	str	r2, [r7, #88]	; 0x58
 800b666:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b668:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b66a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b66c:	e841 2300 	strex	r3, r2, [r1]
 800b670:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1e5      	bne.n	800b644 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	3314      	adds	r3, #20
 800b67e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b682:	e853 3f00 	ldrex	r3, [r3]
 800b686:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b68a:	f023 0301 	bic.w	r3, r3, #1
 800b68e:	667b      	str	r3, [r7, #100]	; 0x64
 800b690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	3314      	adds	r3, #20
 800b696:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b698:	647a      	str	r2, [r7, #68]	; 0x44
 800b69a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b69e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6a0:	e841 2300 	strex	r3, r2, [r1]
 800b6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b6a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1e5      	bne.n	800b678 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	3314      	adds	r3, #20
 800b6b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b6:	e853 3f00 	ldrex	r3, [r3]
 800b6ba:	623b      	str	r3, [r7, #32]
   return(result);
 800b6bc:	6a3b      	ldr	r3, [r7, #32]
 800b6be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6c2:	663b      	str	r3, [r7, #96]	; 0x60
 800b6c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	3314      	adds	r3, #20
 800b6ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b6cc:	633a      	str	r2, [r7, #48]	; 0x30
 800b6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6d4:	e841 2300 	strex	r3, r2, [r1]
 800b6d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d1e5      	bne.n	800b6ac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b6e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6e2:	2220      	movs	r2, #32
 800b6e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d119      	bne.n	800b724 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	330c      	adds	r3, #12
 800b6f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	e853 3f00 	ldrex	r3, [r3]
 800b6fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f023 0310 	bic.w	r3, r3, #16
 800b706:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	330c      	adds	r3, #12
 800b70e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b710:	61fa      	str	r2, [r7, #28]
 800b712:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b714:	69b9      	ldr	r1, [r7, #24]
 800b716:	69fa      	ldr	r2, [r7, #28]
 800b718:	e841 2300 	strex	r3, r2, [r1]
 800b71c:	617b      	str	r3, [r7, #20]
   return(result);
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1e5      	bne.n	800b6f0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d106      	bne.n	800b73a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b72c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b72e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b730:	4619      	mov	r1, r3
 800b732:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b734:	f7f9 fa24 	bl	8004b80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b738:	e002      	b.n	800b740 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b73a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b73c:	f7ff fef8 	bl	800b530 <HAL_UART_RxCpltCallback>
}
 800b740:	bf00      	nop
 800b742:	3770      	adds	r7, #112	; 0x70
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b754:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d108      	bne.n	800b770 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b762:	085b      	lsrs	r3, r3, #1
 800b764:	b29b      	uxth	r3, r3
 800b766:	4619      	mov	r1, r3
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f7f9 fa09 	bl	8004b80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b76e:	e002      	b.n	800b776 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f7ff fee7 	bl	800b544 <HAL_UART_RxHalfCpltCallback>
}
 800b776:	bf00      	nop
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b084      	sub	sp, #16
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b786:	2300      	movs	r3, #0
 800b788:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	695b      	ldr	r3, [r3, #20]
 800b796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b79a:	2b80      	cmp	r3, #128	; 0x80
 800b79c:	bf0c      	ite	eq
 800b79e:	2301      	moveq	r3, #1
 800b7a0:	2300      	movne	r3, #0
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	2b21      	cmp	r3, #33	; 0x21
 800b7b0:	d108      	bne.n	800b7c4 <UART_DMAError+0x46>
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d005      	beq.n	800b7c4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b7be:	68b8      	ldr	r0, [r7, #8]
 800b7c0:	f000 f8c6 	bl	800b950 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	695b      	ldr	r3, [r3, #20]
 800b7ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ce:	2b40      	cmp	r3, #64	; 0x40
 800b7d0:	bf0c      	ite	eq
 800b7d2:	2301      	moveq	r3, #1
 800b7d4:	2300      	movne	r3, #0
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	2b22      	cmp	r3, #34	; 0x22
 800b7e4:	d108      	bne.n	800b7f8 <UART_DMAError+0x7a>
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d005      	beq.n	800b7f8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b7f2:	68b8      	ldr	r0, [r7, #8]
 800b7f4:	f000 f8d4 	bl	800b9a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fc:	f043 0210 	orr.w	r2, r3, #16
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b804:	68b8      	ldr	r0, [r7, #8]
 800b806:	f7ff fea7 	bl	800b558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b80a:	bf00      	nop
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
	...

0800b814 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b098      	sub	sp, #96	; 0x60
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	4613      	mov	r3, r2
 800b820:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	88fa      	ldrh	r2, [r7, #6]
 800b82c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2200      	movs	r2, #0
 800b832:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2222      	movs	r2, #34	; 0x22
 800b838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b840:	4a40      	ldr	r2, [pc, #256]	; (800b944 <UART_Start_Receive_DMA+0x130>)
 800b842:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b848:	4a3f      	ldr	r2, [pc, #252]	; (800b948 <UART_Start_Receive_DMA+0x134>)
 800b84a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b850:	4a3e      	ldr	r2, [pc, #248]	; (800b94c <UART_Start_Receive_DMA+0x138>)
 800b852:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b858:	2200      	movs	r2, #0
 800b85a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b85c:	f107 0308 	add.w	r3, r7, #8
 800b860:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	3304      	adds	r3, #4
 800b86c:	4619      	mov	r1, r3
 800b86e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	88fb      	ldrh	r3, [r7, #6]
 800b874:	f7fa ffc4 	bl	8006800 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b878:	2300      	movs	r3, #0
 800b87a:	613b      	str	r3, [r7, #16]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	613b      	str	r3, [r7, #16]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	613b      	str	r3, [r7, #16]
 800b88c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	691b      	ldr	r3, [r3, #16]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d019      	beq.n	800b8d2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	330c      	adds	r3, #12
 800b8a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8a8:	e853 3f00 	ldrex	r3, [r3]
 800b8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b8ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	330c      	adds	r3, #12
 800b8bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8be:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b8c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b8c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8c6:	e841 2300 	strex	r3, r2, [r1]
 800b8ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b8cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d1e5      	bne.n	800b89e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	3314      	adds	r3, #20
 800b8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8dc:	e853 3f00 	ldrex	r3, [r3]
 800b8e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e4:	f043 0301 	orr.w	r3, r3, #1
 800b8e8:	657b      	str	r3, [r7, #84]	; 0x54
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	3314      	adds	r3, #20
 800b8f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b8f2:	63ba      	str	r2, [r7, #56]	; 0x38
 800b8f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8fa:	e841 2300 	strex	r3, r2, [r1]
 800b8fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1e5      	bne.n	800b8d2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	3314      	adds	r3, #20
 800b90c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	e853 3f00 	ldrex	r3, [r3]
 800b914:	617b      	str	r3, [r7, #20]
   return(result);
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b91c:	653b      	str	r3, [r7, #80]	; 0x50
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	3314      	adds	r3, #20
 800b924:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b926:	627a      	str	r2, [r7, #36]	; 0x24
 800b928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b92a:	6a39      	ldr	r1, [r7, #32]
 800b92c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b92e:	e841 2300 	strex	r3, r2, [r1]
 800b932:	61fb      	str	r3, [r7, #28]
   return(result);
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d1e5      	bne.n	800b906 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b93a:	2300      	movs	r3, #0
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3760      	adds	r7, #96	; 0x60
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	0800b623 	.word	0x0800b623
 800b948:	0800b749 	.word	0x0800b749
 800b94c:	0800b77f 	.word	0x0800b77f

0800b950 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b950:	b480      	push	{r7}
 800b952:	b089      	sub	sp, #36	; 0x24
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	330c      	adds	r3, #12
 800b95e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	e853 3f00 	ldrex	r3, [r3]
 800b966:	60bb      	str	r3, [r7, #8]
   return(result);
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b96e:	61fb      	str	r3, [r7, #28]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	330c      	adds	r3, #12
 800b976:	69fa      	ldr	r2, [r7, #28]
 800b978:	61ba      	str	r2, [r7, #24]
 800b97a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97c:	6979      	ldr	r1, [r7, #20]
 800b97e:	69ba      	ldr	r2, [r7, #24]
 800b980:	e841 2300 	strex	r3, r2, [r1]
 800b984:	613b      	str	r3, [r7, #16]
   return(result);
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1e5      	bne.n	800b958 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2220      	movs	r2, #32
 800b990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b994:	bf00      	nop
 800b996:	3724      	adds	r7, #36	; 0x24
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b095      	sub	sp, #84	; 0x54
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	330c      	adds	r3, #12
 800b9ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b2:	e853 3f00 	ldrex	r3, [r3]
 800b9b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	330c      	adds	r3, #12
 800b9c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b9c8:	643a      	str	r2, [r7, #64]	; 0x40
 800b9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b9ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9d0:	e841 2300 	strex	r3, r2, [r1]
 800b9d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1e5      	bne.n	800b9a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	3314      	adds	r3, #20
 800b9e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	e853 3f00 	ldrex	r3, [r3]
 800b9ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	f023 0301 	bic.w	r3, r3, #1
 800b9f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	3314      	adds	r3, #20
 800b9fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba04:	e841 2300 	strex	r3, r2, [r1]
 800ba08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1e5      	bne.n	800b9dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d119      	bne.n	800ba4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	330c      	adds	r3, #12
 800ba1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	e853 3f00 	ldrex	r3, [r3]
 800ba26:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	f023 0310 	bic.w	r3, r3, #16
 800ba2e:	647b      	str	r3, [r7, #68]	; 0x44
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	330c      	adds	r3, #12
 800ba36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba38:	61ba      	str	r2, [r7, #24]
 800ba3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3c:	6979      	ldr	r1, [r7, #20]
 800ba3e:	69ba      	ldr	r2, [r7, #24]
 800ba40:	e841 2300 	strex	r3, r2, [r1]
 800ba44:	613b      	str	r3, [r7, #16]
   return(result);
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d1e5      	bne.n	800ba18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2220      	movs	r2, #32
 800ba50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ba5a:	bf00      	nop
 800ba5c:	3754      	adds	r7, #84	; 0x54
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr

0800ba66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b084      	sub	sp, #16
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2200      	movs	r2, #0
 800ba78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f7ff fd69 	bl	800b558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba86:	bf00      	nop
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ba8e:	b480      	push	{r7}
 800ba90:	b085      	sub	sp, #20
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	2b21      	cmp	r3, #33	; 0x21
 800baa0:	d13e      	bne.n	800bb20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baaa:	d114      	bne.n	800bad6 <UART_Transmit_IT+0x48>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	691b      	ldr	r3, [r3, #16]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d110      	bne.n	800bad6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a1b      	ldr	r3, [r3, #32]
 800bab8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	881b      	ldrh	r3, [r3, #0]
 800babe:	461a      	mov	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bac8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a1b      	ldr	r3, [r3, #32]
 800bace:	1c9a      	adds	r2, r3, #2
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	621a      	str	r2, [r3, #32]
 800bad4:	e008      	b.n	800bae8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6a1b      	ldr	r3, [r3, #32]
 800bada:	1c59      	adds	r1, r3, #1
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	6211      	str	r1, [r2, #32]
 800bae0:	781a      	ldrb	r2, [r3, #0]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800baec:	b29b      	uxth	r3, r3
 800baee:	3b01      	subs	r3, #1
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	4619      	mov	r1, r3
 800baf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10f      	bne.n	800bb1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	68da      	ldr	r2, [r3, #12]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	68da      	ldr	r2, [r3, #12]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	e000      	b.n	800bb22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bb20:	2302      	movs	r3, #2
  }
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3714      	adds	r7, #20
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr

0800bb2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b082      	sub	sp, #8
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68da      	ldr	r2, [r3, #12]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2220      	movs	r2, #32
 800bb4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f7ff fcda 	bl	800b508 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3708      	adds	r7, #8
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b08c      	sub	sp, #48	; 0x30
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b22      	cmp	r3, #34	; 0x22
 800bb70:	f040 80ab 	bne.w	800bcca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb7c:	d117      	bne.n	800bbae <UART_Receive_IT+0x50>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d113      	bne.n	800bbae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bb86:	2300      	movs	r3, #0
 800bb88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb9c:	b29a      	uxth	r2, r3
 800bb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bba6:	1c9a      	adds	r2, r3, #2
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	629a      	str	r2, [r3, #40]	; 0x28
 800bbac:	e026      	b.n	800bbfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbc0:	d007      	beq.n	800bbd2 <UART_Receive_IT+0x74>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d10a      	bne.n	800bbe0 <UART_Receive_IT+0x82>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d106      	bne.n	800bbe0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	b2da      	uxtb	r2, r3
 800bbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbdc:	701a      	strb	r2, [r3, #0]
 800bbde:	e008      	b.n	800bbf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbec:	b2da      	uxtb	r2, r3
 800bbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf6:	1c5a      	adds	r2, r3, #1
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	3b01      	subs	r3, #1
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	4619      	mov	r1, r3
 800bc0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d15a      	bne.n	800bcc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68da      	ldr	r2, [r3, #12]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f022 0220 	bic.w	r2, r2, #32
 800bc1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	68da      	ldr	r2, [r3, #12]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	695a      	ldr	r2, [r3, #20]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f022 0201 	bic.w	r2, r2, #1
 800bc3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2220      	movs	r2, #32
 800bc44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d135      	bne.n	800bcbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	330c      	adds	r3, #12
 800bc5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	e853 3f00 	ldrex	r3, [r3]
 800bc64:	613b      	str	r3, [r7, #16]
   return(result);
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	f023 0310 	bic.w	r3, r3, #16
 800bc6c:	627b      	str	r3, [r7, #36]	; 0x24
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	330c      	adds	r3, #12
 800bc74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc76:	623a      	str	r2, [r7, #32]
 800bc78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7a:	69f9      	ldr	r1, [r7, #28]
 800bc7c:	6a3a      	ldr	r2, [r7, #32]
 800bc7e:	e841 2300 	strex	r3, r2, [r1]
 800bc82:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc84:	69bb      	ldr	r3, [r7, #24]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d1e5      	bne.n	800bc56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f003 0310 	and.w	r3, r3, #16
 800bc94:	2b10      	cmp	r3, #16
 800bc96:	d10a      	bne.n	800bcae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc98:	2300      	movs	r3, #0
 800bc9a:	60fb      	str	r3, [r7, #12]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	60fb      	str	r3, [r7, #12]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	60fb      	str	r3, [r7, #12]
 800bcac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f7f8 ff63 	bl	8004b80 <HAL_UARTEx_RxEventCallback>
 800bcba:	e002      	b.n	800bcc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f7ff fc37 	bl	800b530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	e002      	b.n	800bccc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	e000      	b.n	800bccc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bcca:	2302      	movs	r3, #2
  }
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3730      	adds	r7, #48	; 0x30
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bcd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bcd8:	b0c0      	sub	sp, #256	; 0x100
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	691b      	ldr	r3, [r3, #16]
 800bce8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bcec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcf0:	68d9      	ldr	r1, [r3, #12]
 800bcf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	ea40 0301 	orr.w	r3, r0, r1
 800bcfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bcfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd02:	689a      	ldr	r2, [r3, #8]
 800bd04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd08:	691b      	ldr	r3, [r3, #16]
 800bd0a:	431a      	orrs	r2, r3
 800bd0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	431a      	orrs	r2, r3
 800bd14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd18:	69db      	ldr	r3, [r3, #28]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bd20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bd2c:	f021 010c 	bic.w	r1, r1, #12
 800bd30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd3a:	430b      	orrs	r3, r1
 800bd3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bd3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	695b      	ldr	r3, [r3, #20]
 800bd46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bd4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd4e:	6999      	ldr	r1, [r3, #24]
 800bd50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	ea40 0301 	orr.w	r3, r0, r1
 800bd5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bd5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	4b8f      	ldr	r3, [pc, #572]	; (800bfa0 <UART_SetConfig+0x2cc>)
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d005      	beq.n	800bd74 <UART_SetConfig+0xa0>
 800bd68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	4b8d      	ldr	r3, [pc, #564]	; (800bfa4 <UART_SetConfig+0x2d0>)
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d104      	bne.n	800bd7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bd74:	f7fd fe86 	bl	8009a84 <HAL_RCC_GetPCLK2Freq>
 800bd78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bd7c:	e003      	b.n	800bd86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bd7e:	f7fd fe6d 	bl	8009a5c <HAL_RCC_GetPCLK1Freq>
 800bd82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd8a:	69db      	ldr	r3, [r3, #28]
 800bd8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd90:	f040 810c 	bne.w	800bfac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bd94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bda2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bda6:	4622      	mov	r2, r4
 800bda8:	462b      	mov	r3, r5
 800bdaa:	1891      	adds	r1, r2, r2
 800bdac:	65b9      	str	r1, [r7, #88]	; 0x58
 800bdae:	415b      	adcs	r3, r3
 800bdb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bdb6:	4621      	mov	r1, r4
 800bdb8:	eb12 0801 	adds.w	r8, r2, r1
 800bdbc:	4629      	mov	r1, r5
 800bdbe:	eb43 0901 	adc.w	r9, r3, r1
 800bdc2:	f04f 0200 	mov.w	r2, #0
 800bdc6:	f04f 0300 	mov.w	r3, #0
 800bdca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bdce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bdd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bdd6:	4690      	mov	r8, r2
 800bdd8:	4699      	mov	r9, r3
 800bdda:	4623      	mov	r3, r4
 800bddc:	eb18 0303 	adds.w	r3, r8, r3
 800bde0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bde4:	462b      	mov	r3, r5
 800bde6:	eb49 0303 	adc.w	r3, r9, r3
 800bdea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bdee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bdfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bdfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800be02:	460b      	mov	r3, r1
 800be04:	18db      	adds	r3, r3, r3
 800be06:	653b      	str	r3, [r7, #80]	; 0x50
 800be08:	4613      	mov	r3, r2
 800be0a:	eb42 0303 	adc.w	r3, r2, r3
 800be0e:	657b      	str	r3, [r7, #84]	; 0x54
 800be10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800be14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800be18:	f7f4 fe1c 	bl	8000a54 <__aeabi_uldivmod>
 800be1c:	4602      	mov	r2, r0
 800be1e:	460b      	mov	r3, r1
 800be20:	4b61      	ldr	r3, [pc, #388]	; (800bfa8 <UART_SetConfig+0x2d4>)
 800be22:	fba3 2302 	umull	r2, r3, r3, r2
 800be26:	095b      	lsrs	r3, r3, #5
 800be28:	011c      	lsls	r4, r3, #4
 800be2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be2e:	2200      	movs	r2, #0
 800be30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800be38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800be3c:	4642      	mov	r2, r8
 800be3e:	464b      	mov	r3, r9
 800be40:	1891      	adds	r1, r2, r2
 800be42:	64b9      	str	r1, [r7, #72]	; 0x48
 800be44:	415b      	adcs	r3, r3
 800be46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800be4c:	4641      	mov	r1, r8
 800be4e:	eb12 0a01 	adds.w	sl, r2, r1
 800be52:	4649      	mov	r1, r9
 800be54:	eb43 0b01 	adc.w	fp, r3, r1
 800be58:	f04f 0200 	mov.w	r2, #0
 800be5c:	f04f 0300 	mov.w	r3, #0
 800be60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800be64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800be68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be6c:	4692      	mov	sl, r2
 800be6e:	469b      	mov	fp, r3
 800be70:	4643      	mov	r3, r8
 800be72:	eb1a 0303 	adds.w	r3, sl, r3
 800be76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be7a:	464b      	mov	r3, r9
 800be7c:	eb4b 0303 	adc.w	r3, fp, r3
 800be80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800be84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800be94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800be98:	460b      	mov	r3, r1
 800be9a:	18db      	adds	r3, r3, r3
 800be9c:	643b      	str	r3, [r7, #64]	; 0x40
 800be9e:	4613      	mov	r3, r2
 800bea0:	eb42 0303 	adc.w	r3, r2, r3
 800bea4:	647b      	str	r3, [r7, #68]	; 0x44
 800bea6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800beaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800beae:	f7f4 fdd1 	bl	8000a54 <__aeabi_uldivmod>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	4611      	mov	r1, r2
 800beb8:	4b3b      	ldr	r3, [pc, #236]	; (800bfa8 <UART_SetConfig+0x2d4>)
 800beba:	fba3 2301 	umull	r2, r3, r3, r1
 800bebe:	095b      	lsrs	r3, r3, #5
 800bec0:	2264      	movs	r2, #100	; 0x64
 800bec2:	fb02 f303 	mul.w	r3, r2, r3
 800bec6:	1acb      	subs	r3, r1, r3
 800bec8:	00db      	lsls	r3, r3, #3
 800beca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bece:	4b36      	ldr	r3, [pc, #216]	; (800bfa8 <UART_SetConfig+0x2d4>)
 800bed0:	fba3 2302 	umull	r2, r3, r3, r2
 800bed4:	095b      	lsrs	r3, r3, #5
 800bed6:	005b      	lsls	r3, r3, #1
 800bed8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bedc:	441c      	add	r4, r3
 800bede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bee2:	2200      	movs	r2, #0
 800bee4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bee8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800beec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bef0:	4642      	mov	r2, r8
 800bef2:	464b      	mov	r3, r9
 800bef4:	1891      	adds	r1, r2, r2
 800bef6:	63b9      	str	r1, [r7, #56]	; 0x38
 800bef8:	415b      	adcs	r3, r3
 800befa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800befc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bf00:	4641      	mov	r1, r8
 800bf02:	1851      	adds	r1, r2, r1
 800bf04:	6339      	str	r1, [r7, #48]	; 0x30
 800bf06:	4649      	mov	r1, r9
 800bf08:	414b      	adcs	r3, r1
 800bf0a:	637b      	str	r3, [r7, #52]	; 0x34
 800bf0c:	f04f 0200 	mov.w	r2, #0
 800bf10:	f04f 0300 	mov.w	r3, #0
 800bf14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bf18:	4659      	mov	r1, fp
 800bf1a:	00cb      	lsls	r3, r1, #3
 800bf1c:	4651      	mov	r1, sl
 800bf1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf22:	4651      	mov	r1, sl
 800bf24:	00ca      	lsls	r2, r1, #3
 800bf26:	4610      	mov	r0, r2
 800bf28:	4619      	mov	r1, r3
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	4642      	mov	r2, r8
 800bf2e:	189b      	adds	r3, r3, r2
 800bf30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf34:	464b      	mov	r3, r9
 800bf36:	460a      	mov	r2, r1
 800bf38:	eb42 0303 	adc.w	r3, r2, r3
 800bf3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bf4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bf50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bf54:	460b      	mov	r3, r1
 800bf56:	18db      	adds	r3, r3, r3
 800bf58:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	eb42 0303 	adc.w	r3, r2, r3
 800bf60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bf66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bf6a:	f7f4 fd73 	bl	8000a54 <__aeabi_uldivmod>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	460b      	mov	r3, r1
 800bf72:	4b0d      	ldr	r3, [pc, #52]	; (800bfa8 <UART_SetConfig+0x2d4>)
 800bf74:	fba3 1302 	umull	r1, r3, r3, r2
 800bf78:	095b      	lsrs	r3, r3, #5
 800bf7a:	2164      	movs	r1, #100	; 0x64
 800bf7c:	fb01 f303 	mul.w	r3, r1, r3
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	00db      	lsls	r3, r3, #3
 800bf84:	3332      	adds	r3, #50	; 0x32
 800bf86:	4a08      	ldr	r2, [pc, #32]	; (800bfa8 <UART_SetConfig+0x2d4>)
 800bf88:	fba2 2303 	umull	r2, r3, r2, r3
 800bf8c:	095b      	lsrs	r3, r3, #5
 800bf8e:	f003 0207 	and.w	r2, r3, #7
 800bf92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4422      	add	r2, r4
 800bf9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bf9c:	e105      	b.n	800c1aa <UART_SetConfig+0x4d6>
 800bf9e:	bf00      	nop
 800bfa0:	40011000 	.word	0x40011000
 800bfa4:	40011400 	.word	0x40011400
 800bfa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bfac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bfb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bfba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bfbe:	4642      	mov	r2, r8
 800bfc0:	464b      	mov	r3, r9
 800bfc2:	1891      	adds	r1, r2, r2
 800bfc4:	6239      	str	r1, [r7, #32]
 800bfc6:	415b      	adcs	r3, r3
 800bfc8:	627b      	str	r3, [r7, #36]	; 0x24
 800bfca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bfce:	4641      	mov	r1, r8
 800bfd0:	1854      	adds	r4, r2, r1
 800bfd2:	4649      	mov	r1, r9
 800bfd4:	eb43 0501 	adc.w	r5, r3, r1
 800bfd8:	f04f 0200 	mov.w	r2, #0
 800bfdc:	f04f 0300 	mov.w	r3, #0
 800bfe0:	00eb      	lsls	r3, r5, #3
 800bfe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bfe6:	00e2      	lsls	r2, r4, #3
 800bfe8:	4614      	mov	r4, r2
 800bfea:	461d      	mov	r5, r3
 800bfec:	4643      	mov	r3, r8
 800bfee:	18e3      	adds	r3, r4, r3
 800bff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bff4:	464b      	mov	r3, r9
 800bff6:	eb45 0303 	adc.w	r3, r5, r3
 800bffa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c00a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c00e:	f04f 0200 	mov.w	r2, #0
 800c012:	f04f 0300 	mov.w	r3, #0
 800c016:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c01a:	4629      	mov	r1, r5
 800c01c:	008b      	lsls	r3, r1, #2
 800c01e:	4621      	mov	r1, r4
 800c020:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c024:	4621      	mov	r1, r4
 800c026:	008a      	lsls	r2, r1, #2
 800c028:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c02c:	f7f4 fd12 	bl	8000a54 <__aeabi_uldivmod>
 800c030:	4602      	mov	r2, r0
 800c032:	460b      	mov	r3, r1
 800c034:	4b60      	ldr	r3, [pc, #384]	; (800c1b8 <UART_SetConfig+0x4e4>)
 800c036:	fba3 2302 	umull	r2, r3, r3, r2
 800c03a:	095b      	lsrs	r3, r3, #5
 800c03c:	011c      	lsls	r4, r3, #4
 800c03e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c042:	2200      	movs	r2, #0
 800c044:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c048:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c04c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c050:	4642      	mov	r2, r8
 800c052:	464b      	mov	r3, r9
 800c054:	1891      	adds	r1, r2, r2
 800c056:	61b9      	str	r1, [r7, #24]
 800c058:	415b      	adcs	r3, r3
 800c05a:	61fb      	str	r3, [r7, #28]
 800c05c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c060:	4641      	mov	r1, r8
 800c062:	1851      	adds	r1, r2, r1
 800c064:	6139      	str	r1, [r7, #16]
 800c066:	4649      	mov	r1, r9
 800c068:	414b      	adcs	r3, r1
 800c06a:	617b      	str	r3, [r7, #20]
 800c06c:	f04f 0200 	mov.w	r2, #0
 800c070:	f04f 0300 	mov.w	r3, #0
 800c074:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c078:	4659      	mov	r1, fp
 800c07a:	00cb      	lsls	r3, r1, #3
 800c07c:	4651      	mov	r1, sl
 800c07e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c082:	4651      	mov	r1, sl
 800c084:	00ca      	lsls	r2, r1, #3
 800c086:	4610      	mov	r0, r2
 800c088:	4619      	mov	r1, r3
 800c08a:	4603      	mov	r3, r0
 800c08c:	4642      	mov	r2, r8
 800c08e:	189b      	adds	r3, r3, r2
 800c090:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c094:	464b      	mov	r3, r9
 800c096:	460a      	mov	r2, r1
 800c098:	eb42 0303 	adc.w	r3, r2, r3
 800c09c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c0a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800c0aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c0ac:	f04f 0200 	mov.w	r2, #0
 800c0b0:	f04f 0300 	mov.w	r3, #0
 800c0b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c0b8:	4649      	mov	r1, r9
 800c0ba:	008b      	lsls	r3, r1, #2
 800c0bc:	4641      	mov	r1, r8
 800c0be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c0c2:	4641      	mov	r1, r8
 800c0c4:	008a      	lsls	r2, r1, #2
 800c0c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c0ca:	f7f4 fcc3 	bl	8000a54 <__aeabi_uldivmod>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	4b39      	ldr	r3, [pc, #228]	; (800c1b8 <UART_SetConfig+0x4e4>)
 800c0d4:	fba3 1302 	umull	r1, r3, r3, r2
 800c0d8:	095b      	lsrs	r3, r3, #5
 800c0da:	2164      	movs	r1, #100	; 0x64
 800c0dc:	fb01 f303 	mul.w	r3, r1, r3
 800c0e0:	1ad3      	subs	r3, r2, r3
 800c0e2:	011b      	lsls	r3, r3, #4
 800c0e4:	3332      	adds	r3, #50	; 0x32
 800c0e6:	4a34      	ldr	r2, [pc, #208]	; (800c1b8 <UART_SetConfig+0x4e4>)
 800c0e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c0ec:	095b      	lsrs	r3, r3, #5
 800c0ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0f2:	441c      	add	r4, r3
 800c0f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	673b      	str	r3, [r7, #112]	; 0x70
 800c0fc:	677a      	str	r2, [r7, #116]	; 0x74
 800c0fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c102:	4642      	mov	r2, r8
 800c104:	464b      	mov	r3, r9
 800c106:	1891      	adds	r1, r2, r2
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	415b      	adcs	r3, r3
 800c10c:	60fb      	str	r3, [r7, #12]
 800c10e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c112:	4641      	mov	r1, r8
 800c114:	1851      	adds	r1, r2, r1
 800c116:	6039      	str	r1, [r7, #0]
 800c118:	4649      	mov	r1, r9
 800c11a:	414b      	adcs	r3, r1
 800c11c:	607b      	str	r3, [r7, #4]
 800c11e:	f04f 0200 	mov.w	r2, #0
 800c122:	f04f 0300 	mov.w	r3, #0
 800c126:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c12a:	4659      	mov	r1, fp
 800c12c:	00cb      	lsls	r3, r1, #3
 800c12e:	4651      	mov	r1, sl
 800c130:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c134:	4651      	mov	r1, sl
 800c136:	00ca      	lsls	r2, r1, #3
 800c138:	4610      	mov	r0, r2
 800c13a:	4619      	mov	r1, r3
 800c13c:	4603      	mov	r3, r0
 800c13e:	4642      	mov	r2, r8
 800c140:	189b      	adds	r3, r3, r2
 800c142:	66bb      	str	r3, [r7, #104]	; 0x68
 800c144:	464b      	mov	r3, r9
 800c146:	460a      	mov	r2, r1
 800c148:	eb42 0303 	adc.w	r3, r2, r3
 800c14c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c14e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	663b      	str	r3, [r7, #96]	; 0x60
 800c158:	667a      	str	r2, [r7, #100]	; 0x64
 800c15a:	f04f 0200 	mov.w	r2, #0
 800c15e:	f04f 0300 	mov.w	r3, #0
 800c162:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c166:	4649      	mov	r1, r9
 800c168:	008b      	lsls	r3, r1, #2
 800c16a:	4641      	mov	r1, r8
 800c16c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c170:	4641      	mov	r1, r8
 800c172:	008a      	lsls	r2, r1, #2
 800c174:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c178:	f7f4 fc6c 	bl	8000a54 <__aeabi_uldivmod>
 800c17c:	4602      	mov	r2, r0
 800c17e:	460b      	mov	r3, r1
 800c180:	4b0d      	ldr	r3, [pc, #52]	; (800c1b8 <UART_SetConfig+0x4e4>)
 800c182:	fba3 1302 	umull	r1, r3, r3, r2
 800c186:	095b      	lsrs	r3, r3, #5
 800c188:	2164      	movs	r1, #100	; 0x64
 800c18a:	fb01 f303 	mul.w	r3, r1, r3
 800c18e:	1ad3      	subs	r3, r2, r3
 800c190:	011b      	lsls	r3, r3, #4
 800c192:	3332      	adds	r3, #50	; 0x32
 800c194:	4a08      	ldr	r2, [pc, #32]	; (800c1b8 <UART_SetConfig+0x4e4>)
 800c196:	fba2 2303 	umull	r2, r3, r2, r3
 800c19a:	095b      	lsrs	r3, r3, #5
 800c19c:	f003 020f 	and.w	r2, r3, #15
 800c1a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4422      	add	r2, r4
 800c1a8:	609a      	str	r2, [r3, #8]
}
 800c1aa:	bf00      	nop
 800c1ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c1b6:	bf00      	nop
 800c1b8:	51eb851f 	.word	0x51eb851f

0800c1bc <arm_mat_trans_f32>:
 800c1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c0:	8802      	ldrh	r2, [r0, #0]
 800c1c2:	884b      	ldrh	r3, [r1, #2]
 800c1c4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c1c8:	684f      	ldr	r7, [r1, #4]
 800c1ca:	8840      	ldrh	r0, [r0, #2]
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	d14c      	bne.n	800c26c <arm_mat_trans_f32+0xb0>
 800c1d2:	f8b1 e000 	ldrh.w	lr, [r1]
 800c1d6:	4586      	cmp	lr, r0
 800c1d8:	d148      	bne.n	800c26c <arm_mat_trans_f32+0xb0>
 800c1da:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800c1de:	009c      	lsls	r4, r3, #2
 800c1e0:	f00e 0e03 	and.w	lr, lr, #3
 800c1e4:	fb08 f904 	mul.w	r9, r8, r4
 800c1e8:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800c1ec:	011d      	lsls	r5, r3, #4
 800c1ee:	00db      	lsls	r3, r3, #3
 800c1f0:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800c1f4:	eb07 0a04 	add.w	sl, r7, r4
 800c1f8:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800c1fc:	9201      	str	r2, [sp, #4]
 800c1fe:	9300      	str	r3, [sp, #0]
 800c200:	463b      	mov	r3, r7
 800c202:	f1b8 0f00 	cmp.w	r8, #0
 800c206:	d01d      	beq.n	800c244 <arm_mat_trans_f32+0x88>
 800c208:	9900      	ldr	r1, [sp, #0]
 800c20a:	f10c 0210 	add.w	r2, ip, #16
 800c20e:	4439      	add	r1, r7
 800c210:	4640      	mov	r0, r8
 800c212:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800c216:	601e      	str	r6, [r3, #0]
 800c218:	ed52 7a03 	vldr	s15, [r2, #-12]
 800c21c:	191e      	adds	r6, r3, r4
 800c21e:	edc6 7a00 	vstr	s15, [r6]
 800c222:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800c226:	600e      	str	r6, [r1, #0]
 800c228:	ed52 7a01 	vldr	s15, [r2, #-4]
 800c22c:	190e      	adds	r6, r1, r4
 800c22e:	3801      	subs	r0, #1
 800c230:	442b      	add	r3, r5
 800c232:	f102 0210 	add.w	r2, r2, #16
 800c236:	edc6 7a00 	vstr	s15, [r6]
 800c23a:	4429      	add	r1, r5
 800c23c:	d1e9      	bne.n	800c212 <arm_mat_trans_f32+0x56>
 800c23e:	44dc      	add	ip, fp
 800c240:	eb09 0307 	add.w	r3, r9, r7
 800c244:	f1be 0f00 	cmp.w	lr, #0
 800c248:	d009      	beq.n	800c25e <arm_mat_trans_f32+0xa2>
 800c24a:	4672      	mov	r2, lr
 800c24c:	4661      	mov	r1, ip
 800c24e:	f851 0b04 	ldr.w	r0, [r1], #4
 800c252:	6018      	str	r0, [r3, #0]
 800c254:	3a01      	subs	r2, #1
 800c256:	4423      	add	r3, r4
 800c258:	d1f9      	bne.n	800c24e <arm_mat_trans_f32+0x92>
 800c25a:	9b01      	ldr	r3, [sp, #4]
 800c25c:	449c      	add	ip, r3
 800c25e:	3704      	adds	r7, #4
 800c260:	4557      	cmp	r7, sl
 800c262:	d1cd      	bne.n	800c200 <arm_mat_trans_f32+0x44>
 800c264:	2000      	movs	r0, #0
 800c266:	b003      	add	sp, #12
 800c268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c26c:	f06f 0002 	mvn.w	r0, #2
 800c270:	e7f9      	b.n	800c266 <arm_mat_trans_f32+0xaa>
 800c272:	bf00      	nop

0800c274 <arm_mat_sub_f32>:
 800c274:	b4f0      	push	{r4, r5, r6, r7}
 800c276:	e9d1 4700 	ldrd	r4, r7, [r1]
 800c27a:	6803      	ldr	r3, [r0, #0]
 800c27c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c280:	6856      	ldr	r6, [r2, #4]
 800c282:	42a3      	cmp	r3, r4
 800c284:	d15d      	bne.n	800c342 <arm_mat_sub_f32+0xce>
 800c286:	6812      	ldr	r2, [r2, #0]
 800c288:	4293      	cmp	r3, r2
 800c28a:	d15a      	bne.n	800c342 <arm_mat_sub_f32+0xce>
 800c28c:	8803      	ldrh	r3, [r0, #0]
 800c28e:	8844      	ldrh	r4, [r0, #2]
 800c290:	fb04 f403 	mul.w	r4, r4, r3
 800c294:	08a5      	lsrs	r5, r4, #2
 800c296:	d032      	beq.n	800c2fe <arm_mat_sub_f32+0x8a>
 800c298:	f10c 0110 	add.w	r1, ip, #16
 800c29c:	f107 0210 	add.w	r2, r7, #16
 800c2a0:	f106 0310 	add.w	r3, r6, #16
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	ed12 7a04 	vldr	s14, [r2, #-16]
 800c2aa:	ed51 7a04 	vldr	s15, [r1, #-16]
 800c2ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2b2:	3801      	subs	r0, #1
 800c2b4:	ed43 7a04 	vstr	s15, [r3, #-16]
 800c2b8:	ed12 7a03 	vldr	s14, [r2, #-12]
 800c2bc:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c2c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2c4:	f101 0110 	add.w	r1, r1, #16
 800c2c8:	ed43 7a03 	vstr	s15, [r3, #-12]
 800c2cc:	ed12 7a02 	vldr	s14, [r2, #-8]
 800c2d0:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800c2d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2d8:	f102 0210 	add.w	r2, r2, #16
 800c2dc:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c2e0:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800c2e4:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800c2e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2ec:	f103 0310 	add.w	r3, r3, #16
 800c2f0:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800c2f4:	d1d7      	bne.n	800c2a6 <arm_mat_sub_f32+0x32>
 800c2f6:	012b      	lsls	r3, r5, #4
 800c2f8:	449c      	add	ip, r3
 800c2fa:	441f      	add	r7, r3
 800c2fc:	441e      	add	r6, r3
 800c2fe:	f014 0403 	ands.w	r4, r4, #3
 800c302:	d01b      	beq.n	800c33c <arm_mat_sub_f32+0xc8>
 800c304:	eddc 7a00 	vldr	s15, [ip]
 800c308:	ed97 7a00 	vldr	s14, [r7]
 800c30c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c310:	3c01      	subs	r4, #1
 800c312:	edc6 7a00 	vstr	s15, [r6]
 800c316:	d011      	beq.n	800c33c <arm_mat_sub_f32+0xc8>
 800c318:	eddc 7a01 	vldr	s15, [ip, #4]
 800c31c:	ed97 7a01 	vldr	s14, [r7, #4]
 800c320:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c324:	2c01      	cmp	r4, #1
 800c326:	edc6 7a01 	vstr	s15, [r6, #4]
 800c32a:	d007      	beq.n	800c33c <arm_mat_sub_f32+0xc8>
 800c32c:	eddc 7a02 	vldr	s15, [ip, #8]
 800c330:	ed97 7a02 	vldr	s14, [r7, #8]
 800c334:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c338:	edc6 7a02 	vstr	s15, [r6, #8]
 800c33c:	2000      	movs	r0, #0
 800c33e:	bcf0      	pop	{r4, r5, r6, r7}
 800c340:	4770      	bx	lr
 800c342:	f06f 0002 	mvn.w	r0, #2
 800c346:	e7fa      	b.n	800c33e <arm_mat_sub_f32+0xca>

0800c348 <arm_mat_mult_f32>:
 800c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34c:	8845      	ldrh	r5, [r0, #2]
 800c34e:	880b      	ldrh	r3, [r1, #0]
 800c350:	8806      	ldrh	r6, [r0, #0]
 800c352:	6847      	ldr	r7, [r0, #4]
 800c354:	6854      	ldr	r4, [r2, #4]
 800c356:	6848      	ldr	r0, [r1, #4]
 800c358:	b08b      	sub	sp, #44	; 0x2c
 800c35a:	42ab      	cmp	r3, r5
 800c35c:	9109      	str	r1, [sp, #36]	; 0x24
 800c35e:	9604      	str	r6, [sp, #16]
 800c360:	8849      	ldrh	r1, [r1, #2]
 800c362:	f040 808a 	bne.w	800c47a <arm_mat_mult_f32+0x132>
 800c366:	8815      	ldrh	r5, [r2, #0]
 800c368:	42b5      	cmp	r5, r6
 800c36a:	f040 8086 	bne.w	800c47a <arm_mat_mult_f32+0x132>
 800c36e:	8852      	ldrh	r2, [r2, #2]
 800c370:	428a      	cmp	r2, r1
 800c372:	f040 8082 	bne.w	800c47a <arm_mat_mult_f32+0x132>
 800c376:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800c37a:	1d01      	adds	r1, r0, #4
 800c37c:	0116      	lsls	r6, r2, #4
 800c37e:	9108      	str	r1, [sp, #32]
 800c380:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800c384:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800c388:	9101      	str	r1, [sp, #4]
 800c38a:	fb06 f108 	mul.w	r1, r6, r8
 800c38e:	0095      	lsls	r5, r2, #2
 800c390:	9103      	str	r1, [sp, #12]
 800c392:	00d2      	lsls	r2, r2, #3
 800c394:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800c398:	f003 0903 	and.w	r9, r3, #3
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	f107 0b10 	add.w	fp, r7, #16
 800c3a2:	eb04 0a05 	add.w	sl, r4, r5
 800c3a6:	9107      	str	r1, [sp, #28]
 800c3a8:	9202      	str	r2, [sp, #8]
 800c3aa:	9306      	str	r3, [sp, #24]
 800c3ac:	f1ab 0310 	sub.w	r3, fp, #16
 800c3b0:	9305      	str	r3, [sp, #20]
 800c3b2:	9b07      	ldr	r3, [sp, #28]
 800c3b4:	f8dd e020 	ldr.w	lr, [sp, #32]
 800c3b8:	eb03 0c0a 	add.w	ip, r3, sl
 800c3bc:	eddf 7a31 	vldr	s15, [pc, #196]	; 800c484 <arm_mat_mult_f32+0x13c>
 800c3c0:	f1b8 0f00 	cmp.w	r8, #0
 800c3c4:	d053      	beq.n	800c46e <arm_mat_mult_f32+0x126>
 800c3c6:	9b02      	ldr	r3, [sp, #8]
 800c3c8:	4644      	mov	r4, r8
 800c3ca:	18c1      	adds	r1, r0, r3
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	465b      	mov	r3, fp
 800c3d0:	ed92 6a00 	vldr	s12, [r2]
 800c3d4:	ed13 7a04 	vldr	s14, [r3, #-16]
 800c3d8:	ed53 4a03 	vldr	s9, [r3, #-12]
 800c3dc:	ed53 6a02 	vldr	s13, [r3, #-8]
 800c3e0:	ed91 5a00 	vldr	s10, [r1]
 800c3e4:	ed53 5a01 	vldr	s11, [r3, #-4]
 800c3e8:	1957      	adds	r7, r2, r5
 800c3ea:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c3ee:	ed97 6a00 	vldr	s12, [r7]
 800c3f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3f6:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c3fa:	194f      	adds	r7, r1, r5
 800c3fc:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c400:	ee26 7a85 	vmul.f32	s14, s13, s10
 800c404:	edd7 7a00 	vldr	s15, [r7]
 800c408:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c40c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c410:	3c01      	subs	r4, #1
 800c412:	4432      	add	r2, r6
 800c414:	4431      	add	r1, r6
 800c416:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c41a:	f103 0310 	add.w	r3, r3, #16
 800c41e:	d1d7      	bne.n	800c3d0 <arm_mat_mult_f32+0x88>
 800c420:	9b03      	ldr	r3, [sp, #12]
 800c422:	9a01      	ldr	r2, [sp, #4]
 800c424:	4418      	add	r0, r3
 800c426:	f1b9 0f00 	cmp.w	r9, #0
 800c42a:	d00b      	beq.n	800c444 <arm_mat_mult_f32+0xfc>
 800c42c:	464b      	mov	r3, r9
 800c42e:	edd0 6a00 	vldr	s13, [r0]
 800c432:	ecb2 7a01 	vldmia	r2!, {s14}
 800c436:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c43a:	3b01      	subs	r3, #1
 800c43c:	4428      	add	r0, r5
 800c43e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c442:	d1f4      	bne.n	800c42e <arm_mat_mult_f32+0xe6>
 800c444:	ecec 7a01 	vstmia	ip!, {s15}
 800c448:	45d4      	cmp	ip, sl
 800c44a:	4670      	mov	r0, lr
 800c44c:	f10e 0e04 	add.w	lr, lr, #4
 800c450:	d1b4      	bne.n	800c3bc <arm_mat_mult_f32+0x74>
 800c452:	9a01      	ldr	r2, [sp, #4]
 800c454:	9b06      	ldr	r3, [sp, #24]
 800c456:	4611      	mov	r1, r2
 800c458:	4419      	add	r1, r3
 800c45a:	449b      	add	fp, r3
 800c45c:	9b04      	ldr	r3, [sp, #16]
 800c45e:	9101      	str	r1, [sp, #4]
 800c460:	3b01      	subs	r3, #1
 800c462:	44aa      	add	sl, r5
 800c464:	9304      	str	r3, [sp, #16]
 800c466:	d004      	beq.n	800c472 <arm_mat_mult_f32+0x12a>
 800c468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c46a:	6858      	ldr	r0, [r3, #4]
 800c46c:	e79e      	b.n	800c3ac <arm_mat_mult_f32+0x64>
 800c46e:	9a05      	ldr	r2, [sp, #20]
 800c470:	e7d9      	b.n	800c426 <arm_mat_mult_f32+0xde>
 800c472:	4618      	mov	r0, r3
 800c474:	b00b      	add	sp, #44	; 0x2c
 800c476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c47a:	f06f 0002 	mvn.w	r0, #2
 800c47e:	b00b      	add	sp, #44	; 0x2c
 800c480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c484:	00000000 	.word	0x00000000

0800c488 <arm_mat_inverse_f32>:
 800c488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48c:	8843      	ldrh	r3, [r0, #2]
 800c48e:	8804      	ldrh	r4, [r0, #0]
 800c490:	684e      	ldr	r6, [r1, #4]
 800c492:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800c496:	b087      	sub	sp, #28
 800c498:	429c      	cmp	r4, r3
 800c49a:	9301      	str	r3, [sp, #4]
 800c49c:	9603      	str	r6, [sp, #12]
 800c49e:	f040 80ea 	bne.w	800c676 <arm_mat_inverse_f32+0x1ee>
 800c4a2:	880a      	ldrh	r2, [r1, #0]
 800c4a4:	884b      	ldrh	r3, [r1, #2]
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	f040 80e5 	bne.w	800c676 <arm_mat_inverse_f32+0x1ee>
 800c4ac:	429c      	cmp	r4, r3
 800c4ae:	f040 80e2 	bne.w	800c676 <arm_mat_inverse_f32+0x1ee>
 800c4b2:	9005      	str	r0, [sp, #20]
 800c4b4:	b30c      	cbz	r4, 800c4fa <arm_mat_inverse_f32+0x72>
 800c4b6:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800c4ba:	1e67      	subs	r7, r4, #1
 800c4bc:	f846 bb04 	str.w	fp, [r6], #4
 800c4c0:	d01b      	beq.n	800c4fa <arm_mat_inverse_f32+0x72>
 800c4c2:	f04f 0801 	mov.w	r8, #1
 800c4c6:	00ba      	lsls	r2, r7, #2
 800c4c8:	eb06 0a02 	add.w	sl, r6, r2
 800c4cc:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	f000 f97e 	bl	800c7d4 <memset>
 800c4d8:	eb0a 0605 	add.w	r6, sl, r5
 800c4dc:	462a      	mov	r2, r5
 800c4de:	2100      	movs	r1, #0
 800c4e0:	4650      	mov	r0, sl
 800c4e2:	f1b8 0f00 	cmp.w	r8, #0
 800c4e6:	f000 80cb 	beq.w	800c680 <arm_mat_inverse_f32+0x1f8>
 800c4ea:	f000 f973 	bl	800c7d4 <memset>
 800c4ee:	3f01      	subs	r7, #1
 800c4f0:	f108 0801 	add.w	r8, r8, #1
 800c4f4:	f846 bb04 	str.w	fp, [r6], #4
 800c4f8:	d1e5      	bne.n	800c4c6 <arm_mat_inverse_f32+0x3e>
 800c4fa:	9b01      	ldr	r3, [sp, #4]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f000 80b5 	beq.w	800c66c <arm_mat_inverse_f32+0x1e4>
 800c502:	009d      	lsls	r5, r3, #2
 800c504:	eb09 0205 	add.w	r2, r9, r5
 800c508:	46cc      	mov	ip, r9
 800c50a:	9202      	str	r2, [sp, #8]
 800c50c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c510:	1d2a      	adds	r2, r5, #4
 800c512:	9204      	str	r2, [sp, #16]
 800c514:	462f      	mov	r7, r5
 800c516:	469e      	mov	lr, r3
 800c518:	2600      	movs	r6, #0
 800c51a:	9b02      	ldr	r3, [sp, #8]
 800c51c:	eddc 6a00 	vldr	s13, [ip]
 800c520:	42b4      	cmp	r4, r6
 800c522:	eba3 0b07 	sub.w	fp, r3, r7
 800c526:	f000 80a1 	beq.w	800c66c <arm_mat_inverse_f32+0x1e4>
 800c52a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800c690 <arm_mat_inverse_f32+0x208>
 800c52e:	4632      	mov	r2, r6
 800c530:	4663      	mov	r3, ip
 800c532:	e00b      	b.n	800c54c <arm_mat_inverse_f32+0xc4>
 800c534:	eef4 7a47 	vcmp.f32	s15, s14
 800c538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c53c:	f102 0201 	add.w	r2, r2, #1
 800c540:	bfc8      	it	gt
 800c542:	eeb0 7a67 	vmovgt.f32	s14, s15
 800c546:	42a2      	cmp	r2, r4
 800c548:	442b      	add	r3, r5
 800c54a:	d014      	beq.n	800c576 <arm_mat_inverse_f32+0xee>
 800c54c:	edd3 7a00 	vldr	s15, [r3]
 800c550:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c558:	eeb1 6a67 	vneg.f32	s12, s15
 800c55c:	dcea      	bgt.n	800c534 <arm_mat_inverse_f32+0xac>
 800c55e:	eeb4 6a47 	vcmp.f32	s12, s14
 800c562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c566:	f102 0201 	add.w	r2, r2, #1
 800c56a:	bfc8      	it	gt
 800c56c:	eeb0 7a46 	vmovgt.f32	s14, s12
 800c570:	42a2      	cmp	r2, r4
 800c572:	442b      	add	r3, r5
 800c574:	d1ea      	bne.n	800c54c <arm_mat_inverse_f32+0xc4>
 800c576:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c57e:	d075      	beq.n	800c66c <arm_mat_inverse_f32+0x1e4>
 800c580:	eef5 6a40 	vcmp.f32	s13, #0.0
 800c584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c588:	d070      	beq.n	800c66c <arm_mat_inverse_f32+0x1e4>
 800c58a:	4672      	mov	r2, lr
 800c58c:	4663      	mov	r3, ip
 800c58e:	ed93 7a00 	vldr	s14, [r3]
 800c592:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c596:	3a01      	subs	r2, #1
 800c598:	ece3 7a01 	vstmia	r3!, {s15}
 800c59c:	d1f7      	bne.n	800c58e <arm_mat_inverse_f32+0x106>
 800c59e:	9901      	ldr	r1, [sp, #4]
 800c5a0:	464b      	mov	r3, r9
 800c5a2:	ed93 7a00 	vldr	s14, [r3]
 800c5a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c5aa:	3901      	subs	r1, #1
 800c5ac:	ece3 7a01 	vstmia	r3!, {s15}
 800c5b0:	d1f7      	bne.n	800c5a2 <arm_mat_inverse_f32+0x11a>
 800c5b2:	9803      	ldr	r0, [sp, #12]
 800c5b4:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800c5b8:	42b1      	cmp	r1, r6
 800c5ba:	d039      	beq.n	800c630 <arm_mat_inverse_f32+0x1a8>
 800c5bc:	eddb 6a00 	vldr	s13, [fp]
 800c5c0:	465a      	mov	r2, fp
 800c5c2:	4673      	mov	r3, lr
 800c5c4:	46e2      	mov	sl, ip
 800c5c6:	ecba 7a01 	vldmia	sl!, {s14}
 800c5ca:	edd2 7a00 	vldr	s15, [r2]
 800c5ce:	ee26 7a87 	vmul.f32	s14, s13, s14
 800c5d2:	3b01      	subs	r3, #1
 800c5d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5d8:	ece2 7a01 	vstmia	r2!, {s15}
 800c5dc:	d1f3      	bne.n	800c5c6 <arm_mat_inverse_f32+0x13e>
 800c5de:	9b01      	ldr	r3, [sp, #4]
 800c5e0:	44bb      	add	fp, r7
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	46ca      	mov	sl, r9
 800c5e6:	ecba 7a01 	vldmia	sl!, {s14}
 800c5ea:	edd2 7a00 	vldr	s15, [r2]
 800c5ee:	ee26 7a87 	vmul.f32	s14, s13, s14
 800c5f2:	3b01      	subs	r3, #1
 800c5f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5f8:	ece2 7a01 	vstmia	r2!, {s15}
 800c5fc:	d1f3      	bne.n	800c5e6 <arm_mat_inverse_f32+0x15e>
 800c5fe:	4428      	add	r0, r5
 800c600:	3101      	adds	r1, #1
 800c602:	428c      	cmp	r4, r1
 800c604:	44c3      	add	fp, r8
 800c606:	d1d7      	bne.n	800c5b8 <arm_mat_inverse_f32+0x130>
 800c608:	9b04      	ldr	r3, [sp, #16]
 800c60a:	f1be 0e01 	subs.w	lr, lr, #1
 800c60e:	f106 0601 	add.w	r6, r6, #1
 800c612:	449c      	add	ip, r3
 800c614:	f1a7 0704 	sub.w	r7, r7, #4
 800c618:	44a9      	add	r9, r5
 800c61a:	f47f af7e 	bne.w	800c51a <arm_mat_inverse_f32+0x92>
 800c61e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800c622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c626:	d006      	beq.n	800c636 <arm_mat_inverse_f32+0x1ae>
 800c628:	2000      	movs	r0, #0
 800c62a:	b007      	add	sp, #28
 800c62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c630:	44bb      	add	fp, r7
 800c632:	4428      	add	r0, r5
 800c634:	e7e4      	b.n	800c600 <arm_mat_inverse_f32+0x178>
 800c636:	9b05      	ldr	r3, [sp, #20]
 800c638:	9a01      	ldr	r2, [sp, #4]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	edd3 7a00 	vldr	s15, [r3]
 800c640:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c644:	fb02 f204 	mul.w	r2, r2, r4
 800c648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c64c:	4614      	mov	r4, r2
 800c64e:	bf08      	it	eq
 800c650:	3304      	addeq	r3, #4
 800c652:	d007      	beq.n	800c664 <arm_mat_inverse_f32+0x1dc>
 800c654:	e7e8      	b.n	800c628 <arm_mat_inverse_f32+0x1a0>
 800c656:	ecf3 7a01 	vldmia	r3!, {s15}
 800c65a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c662:	d1e1      	bne.n	800c628 <arm_mat_inverse_f32+0x1a0>
 800c664:	f10e 0e01 	add.w	lr, lr, #1
 800c668:	4574      	cmp	r4, lr
 800c66a:	d1f4      	bne.n	800c656 <arm_mat_inverse_f32+0x1ce>
 800c66c:	f06f 0004 	mvn.w	r0, #4
 800c670:	b007      	add	sp, #28
 800c672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c676:	f06f 0002 	mvn.w	r0, #2
 800c67a:	b007      	add	sp, #28
 800c67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c680:	4656      	mov	r6, sl
 800c682:	3f01      	subs	r7, #1
 800c684:	f846 bb04 	str.w	fp, [r6], #4
 800c688:	f47f af1b 	bne.w	800c4c2 <arm_mat_inverse_f32+0x3a>
 800c68c:	e735      	b.n	800c4fa <arm_mat_inverse_f32+0x72>
 800c68e:	bf00      	nop
 800c690:	00000000 	.word	0x00000000

0800c694 <arm_mat_init_f32>:
 800c694:	8001      	strh	r1, [r0, #0]
 800c696:	8042      	strh	r2, [r0, #2]
 800c698:	6043      	str	r3, [r0, #4]
 800c69a:	4770      	bx	lr

0800c69c <arm_mat_add_f32>:
 800c69c:	b4f0      	push	{r4, r5, r6, r7}
 800c69e:	e9d1 4700 	ldrd	r4, r7, [r1]
 800c6a2:	6803      	ldr	r3, [r0, #0]
 800c6a4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c6a8:	6856      	ldr	r6, [r2, #4]
 800c6aa:	42a3      	cmp	r3, r4
 800c6ac:	d15d      	bne.n	800c76a <arm_mat_add_f32+0xce>
 800c6ae:	6812      	ldr	r2, [r2, #0]
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d15a      	bne.n	800c76a <arm_mat_add_f32+0xce>
 800c6b4:	8803      	ldrh	r3, [r0, #0]
 800c6b6:	8844      	ldrh	r4, [r0, #2]
 800c6b8:	fb04 f403 	mul.w	r4, r4, r3
 800c6bc:	08a5      	lsrs	r5, r4, #2
 800c6be:	d032      	beq.n	800c726 <arm_mat_add_f32+0x8a>
 800c6c0:	f10c 0110 	add.w	r1, ip, #16
 800c6c4:	f107 0210 	add.w	r2, r7, #16
 800c6c8:	f106 0310 	add.w	r3, r6, #16
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	ed12 7a04 	vldr	s14, [r2, #-16]
 800c6d2:	ed51 7a04 	vldr	s15, [r1, #-16]
 800c6d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6da:	3801      	subs	r0, #1
 800c6dc:	ed43 7a04 	vstr	s15, [r3, #-16]
 800c6e0:	ed12 7a03 	vldr	s14, [r2, #-12]
 800c6e4:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c6e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6ec:	f101 0110 	add.w	r1, r1, #16
 800c6f0:	ed43 7a03 	vstr	s15, [r3, #-12]
 800c6f4:	ed12 7a02 	vldr	s14, [r2, #-8]
 800c6f8:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800c6fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c700:	f102 0210 	add.w	r2, r2, #16
 800c704:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c708:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800c70c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800c710:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c714:	f103 0310 	add.w	r3, r3, #16
 800c718:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800c71c:	d1d7      	bne.n	800c6ce <arm_mat_add_f32+0x32>
 800c71e:	012b      	lsls	r3, r5, #4
 800c720:	449c      	add	ip, r3
 800c722:	441f      	add	r7, r3
 800c724:	441e      	add	r6, r3
 800c726:	f014 0403 	ands.w	r4, r4, #3
 800c72a:	d01b      	beq.n	800c764 <arm_mat_add_f32+0xc8>
 800c72c:	edd7 7a00 	vldr	s15, [r7]
 800c730:	ed9c 7a00 	vldr	s14, [ip]
 800c734:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c738:	3c01      	subs	r4, #1
 800c73a:	edc6 7a00 	vstr	s15, [r6]
 800c73e:	d011      	beq.n	800c764 <arm_mat_add_f32+0xc8>
 800c740:	eddc 7a01 	vldr	s15, [ip, #4]
 800c744:	ed97 7a01 	vldr	s14, [r7, #4]
 800c748:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c74c:	2c01      	cmp	r4, #1
 800c74e:	edc6 7a01 	vstr	s15, [r6, #4]
 800c752:	d007      	beq.n	800c764 <arm_mat_add_f32+0xc8>
 800c754:	eddc 7a02 	vldr	s15, [ip, #8]
 800c758:	ed97 7a02 	vldr	s14, [r7, #8]
 800c75c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c760:	edc6 7a02 	vstr	s15, [r6, #8]
 800c764:	2000      	movs	r0, #0
 800c766:	bcf0      	pop	{r4, r5, r6, r7}
 800c768:	4770      	bx	lr
 800c76a:	f06f 0002 	mvn.w	r0, #2
 800c76e:	e7fa      	b.n	800c766 <arm_mat_add_f32+0xca>

0800c770 <__libc_init_array>:
 800c770:	b570      	push	{r4, r5, r6, lr}
 800c772:	4d0d      	ldr	r5, [pc, #52]	; (800c7a8 <__libc_init_array+0x38>)
 800c774:	4c0d      	ldr	r4, [pc, #52]	; (800c7ac <__libc_init_array+0x3c>)
 800c776:	1b64      	subs	r4, r4, r5
 800c778:	10a4      	asrs	r4, r4, #2
 800c77a:	2600      	movs	r6, #0
 800c77c:	42a6      	cmp	r6, r4
 800c77e:	d109      	bne.n	800c794 <__libc_init_array+0x24>
 800c780:	4d0b      	ldr	r5, [pc, #44]	; (800c7b0 <__libc_init_array+0x40>)
 800c782:	4c0c      	ldr	r4, [pc, #48]	; (800c7b4 <__libc_init_array+0x44>)
 800c784:	f000 f82e 	bl	800c7e4 <_init>
 800c788:	1b64      	subs	r4, r4, r5
 800c78a:	10a4      	asrs	r4, r4, #2
 800c78c:	2600      	movs	r6, #0
 800c78e:	42a6      	cmp	r6, r4
 800c790:	d105      	bne.n	800c79e <__libc_init_array+0x2e>
 800c792:	bd70      	pop	{r4, r5, r6, pc}
 800c794:	f855 3b04 	ldr.w	r3, [r5], #4
 800c798:	4798      	blx	r3
 800c79a:	3601      	adds	r6, #1
 800c79c:	e7ee      	b.n	800c77c <__libc_init_array+0xc>
 800c79e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7a2:	4798      	blx	r3
 800c7a4:	3601      	adds	r6, #1
 800c7a6:	e7f2      	b.n	800c78e <__libc_init_array+0x1e>
 800c7a8:	0800c824 	.word	0x0800c824
 800c7ac:	0800c824 	.word	0x0800c824
 800c7b0:	0800c824 	.word	0x0800c824
 800c7b4:	0800c828 	.word	0x0800c828

0800c7b8 <memcpy>:
 800c7b8:	440a      	add	r2, r1
 800c7ba:	4291      	cmp	r1, r2
 800c7bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7c0:	d100      	bne.n	800c7c4 <memcpy+0xc>
 800c7c2:	4770      	bx	lr
 800c7c4:	b510      	push	{r4, lr}
 800c7c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7ce:	4291      	cmp	r1, r2
 800c7d0:	d1f9      	bne.n	800c7c6 <memcpy+0xe>
 800c7d2:	bd10      	pop	{r4, pc}

0800c7d4 <memset>:
 800c7d4:	4402      	add	r2, r0
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d100      	bne.n	800c7de <memset+0xa>
 800c7dc:	4770      	bx	lr
 800c7de:	f803 1b01 	strb.w	r1, [r3], #1
 800c7e2:	e7f9      	b.n	800c7d8 <memset+0x4>

0800c7e4 <_init>:
 800c7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e6:	bf00      	nop
 800c7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ea:	bc08      	pop	{r3}
 800c7ec:	469e      	mov	lr, r3
 800c7ee:	4770      	bx	lr

0800c7f0 <_fini>:
 800c7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f2:	bf00      	nop
 800c7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7f6:	bc08      	pop	{r3}
 800c7f8:	469e      	mov	lr, r3
 800c7fa:	4770      	bx	lr
