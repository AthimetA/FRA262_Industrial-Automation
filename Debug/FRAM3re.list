
FRAM3re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b250  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800b3e8  0800b3e8  0001b3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b408  0800b408  000203b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b408  0800b408  0001b408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b410  0800b410  000203b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b410  0800b410  0001b410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b414  0800b414  0001b414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b0  20000000  0800b418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  200003b0  0800b7c8  000203b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  0800b7c8  0002084c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001720f  00000000  00000000  000203e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa1  00000000  00000000  000375ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0003a590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  0003b6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176a8  00000000  00000000  0003c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015994  00000000  00000000  00053d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f36  00000000  00000000  000696ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000fc622  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b8  00000000  00000000  000fc6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  00100fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200003b0 	.word	0x200003b0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b3d0 	.word	0x0800b3d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200003b4 	.word	0x200003b4
 80001d4:	0800b3d0 	.word	0x0800b3d0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	f00a fa88 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	f00a fa7f 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 1, 3, KalmanVar ->MatC_Data);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	2101      	movs	r1, #1
 8000d90:	f00a fa76 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f503 7027 	add.w	r0, r3, #668	; 0x29c
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	333c      	adds	r3, #60	; 0x3c
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2101      	movs	r1, #1
 8000da2:	f00a fa6d 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f503 7029 	add.w	r0, r3, #676	; 0x2a4
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3340      	adds	r3, #64	; 0x40
 8000db0:	2203      	movs	r2, #3
 8000db2:	2103      	movs	r1, #3
 8000db4:	f00a fa64 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 1, 1, KalmanVar ->MatR_Data);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3364      	adds	r3, #100	; 0x64
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	f00a fa5b 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3368      	adds	r3, #104	; 0x68
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	f00a fa52 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	338c      	adds	r3, #140	; 0x8c
 8000de6:	2201      	movs	r2, #1
 8000de8:	2103      	movs	r1, #3
 8000dea:	f00a fa49 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3398      	adds	r3, #152	; 0x98
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	f00a fa40 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	33a4      	adds	r3, #164	; 0xa4
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	f00a fa37 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f503 7035 	add.w	r0, r3, #724	; 0x2d4
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	33c8      	adds	r3, #200	; 0xc8
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	2103      	movs	r1, #3
 8000e20:	f00a fa2e 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 1, 1, KalmanVar ->MatY_Data);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f503 7037 	add.w	r0, r3, #732	; 0x2dc
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	33ec      	adds	r3, #236	; 0xec
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2101      	movs	r1, #1
 8000e32:	f00a fa25 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 1, 1, KalmanVar ->MatZ_Data);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	33f0      	adds	r3, #240	; 0xf0
 8000e40:	2201      	movs	r2, #1
 8000e42:	2101      	movs	r1, #1
 8000e44:	f00a fa1c 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 1, 1, KalmanVar ->MatS_Data);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f503 703b 	add.w	r0, r3, #748	; 0x2ec
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	33f4      	adds	r3, #244	; 0xf4
 8000e52:	2201      	movs	r2, #1
 8000e54:	2101      	movs	r1, #1
 8000e56:	f00a fa13 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 1, KalmanVar ->MatK_Data);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	33f8      	adds	r3, #248	; 0xf8
 8000e64:	2201      	movs	r2, #1
 8000e66:	2103      	movs	r1, #3
 8000e68:	f00a fa0a 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e78:	2203      	movs	r2, #3
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	f00a fa00 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	2103      	movs	r1, #3
 8000e90:	f00a f9f6 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	f00a f9ec 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQ), 3, 3, KalmanVar ->MatGQ_Data);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	f00a f9e2 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 1, KalmanVar ->MatCt_Data);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f503 7047 	add.w	r0, r3, #796	; 0x31c
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2103      	movs	r1, #3
 8000ecc:	f00a f9d8 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8000edc:	2203      	movs	r2, #3
 8000ede:	2103      	movs	r1, #3
 8000ee0:	f00a f9ce 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 1, 1, KalmanVar ->MatSinv_Data);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	f00a f9c4 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 1, 3, KalmanVar ->MatCPk_Data);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f503 704d 	add.w	r0, r3, #820	; 0x334
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8000f04:	2203      	movs	r2, #3
 8000f06:	2101      	movs	r1, #1
 8000f08:	f00a f9ba 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000f18:	2203      	movs	r2, #3
 8000f1a:	2103      	movs	r1, #3
 8000f1c:	f00a f9b0 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	2103      	movs	r1, #3
 8000f30:	f00a f9a6 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 1, 1, KalmanVar ->MatCXk_Data);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 7053 	add.w	r0, r3, #844	; 0x34c
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8000f40:	2201      	movs	r2, #1
 8000f42:	2101      	movs	r1, #1
 8000f44:	f00a f99c 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 1, 1, KalmanVar ->MatCPkCt_Data);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f503 7055 	add.w	r0, r3, #852	; 0x354
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000f54:	2201      	movs	r2, #1
 8000f56:	2101      	movs	r1, #1
 8000f58:	f00a f992 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 1, KalmanVar ->MatPkCt_Data);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	f00a f988 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2103      	movs	r1, #3
 8000f80:	f00a f97e 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000f90:	2203      	movs	r2, #3
 8000f92:	2103      	movs	r1, #3
 8000f94:	f00a f974 	bl	800b280 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f503 705d 	add.w	r0, r3, #884	; 0x374
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	f00a f96a 	bl	800b280 <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f009 fef4 	bl	800ada8 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4610      	mov	r0, r2
 8000fd0:	f009 feea 	bl	800ada8 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f503 7225 	add.w	r2, r3, #660	; 0x294
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	f009 fee0 	bl	800ada8 <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQ));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f503 7129 	add.w	r1, r3, #676	; 0x2a4
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f009 ff9a 	bl	800af34 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQ), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 7143 	add.w	r1, r3, #780	; 0x30c
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8001012:	461a      	mov	r2, r3
 8001014:	f009 ff8e 	bl	800af34 <arm_mat_mult_f32>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <KalmanMatrixReset>:

void KalmanMatrixReset(KalmanFilterVar *KalmanVar , float Pvar)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	ed87 0a00 	vstr	s0, [r7]
	for (int index = 0; index < 3; ++index)
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e013      	b.n	800105a <KalmanMatrixReset+0x3a>
	{
		KalmanVar ->MatStateLast_Data[index] = 0.0;
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3326      	adds	r3, #38	; 0x26
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
		KalmanVar ->MatState_Data[index] = 0.0;
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3322      	adds	r3, #34	; 0x22
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	3304      	adds	r3, #4
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
	for (int index = 0; index < 3; ++index)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b02      	cmp	r3, #2
 800105e:	dde8      	ble.n	8001032 <KalmanMatrixReset+0x12>
	}

	KalmanVar ->MatPredict_Data[0] = Pvar;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	KalmanVar ->MatPredictLast_Data[0] = Pvar;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	KalmanVar ->MatPredict_Data[1] = 0.0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	KalmanVar ->MatPredictLast_Data[1] = 0.0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	KalmanVar ->MatPredict_Data[2] = 0.0;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	KalmanVar ->MatPredictLast_Data[2] = 0.0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	KalmanVar ->MatPredict_Data[3] = 0.0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	KalmanVar ->MatPredictLast_Data[3] = 0.0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	KalmanVar ->MatPredict_Data[4] = Pvar;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	KalmanVar ->MatPredictLast_Data[4] = Pvar;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	KalmanVar ->MatPredict_Data[5] = 0.0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	KalmanVar ->MatPredictLast_Data[5] = 0.0;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	KalmanVar ->MatPredict_Data[6] = 0.0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	KalmanVar ->MatPredictLast_Data[6] = 0.0;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	KalmanVar ->MatPredict_Data[7] = 0.0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	KalmanVar ->MatPredictLast_Data[7] = 0.0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	KalmanVar ->MatPredict_Data[8] = Pvar;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	KalmanVar ->MatPredictLast_Data[8] = Pvar;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	ed87 0a00 	vstr	s0, [r7]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001132:	461a      	mov	r2, r3
 8001134:	f009 fefe 	bl	800af34 <arm_mat_mult_f32>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8001154:	461a      	mov	r2, r3
 8001156:	f009 feed 	bl	800af34 <arm_mat_mult_f32>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f503 7141 	add.w	r1, r3, #772	; 0x304
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8001176:	461a      	mov	r2, r3
 8001178:	f009 fedc 	bl	800af34 <arm_mat_mult_f32>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f503 7051 	add.w	r0, r3, #836	; 0x344
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8001198:	461a      	mov	r2, r3
 800119a:	f00a f875 	bl	800b288 <arm_mat_add_f32>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80011c2:	461a      	mov	r2, r3
 80011c4:	f009 feb6 	bl	800af34 <arm_mat_mult_f32>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f503 7153 	add.w	r1, r3, #844	; 0x34c
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 80011e4:	461a      	mov	r2, r3
 80011e6:	f009 fe3b 	bl	800ae60 <arm_mat_sub_f32>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8001206:	461a      	mov	r2, r3
 8001208:	f009 fe94 	bl	800af34 <arm_mat_mult_f32>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f503 704d 	add.w	r0, r3, #820	; 0x334
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8001228:	461a      	mov	r2, r3
 800122a:	f009 fe83 	bl	800af34 <arm_mat_mult_f32>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f503 7055 	add.w	r0, r3, #852	; 0x354
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f503 712b 	add.w	r1, r3, #684	; 0x2ac
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 800124a:	461a      	mov	r2, r3
 800124c:	f00a f81c 	bl	800b288 <arm_mat_add_f32>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f503 723b 	add.w	r2, r3, #748	; 0x2ec
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001266:	4619      	mov	r1, r3
 8001268:	4610      	mov	r0, r2
 800126a:	f009 ff03 	bl	800b074 <arm_mat_inverse_f32>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 800128a:	461a      	mov	r2, r3
 800128c:	f009 fe52 	bl	800af34 <arm_mat_mult_f32>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f503 7149 	add.w	r1, r3, #804	; 0x324
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80012ac:	461a      	mov	r2, r3
 80012ae:	f009 fe41 	bl	800af34 <arm_mat_mult_f32>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f503 7137 	add.w	r1, r3, #732	; 0x2dc
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80012ce:	461a      	mov	r2, r3
 80012d0:	f009 fe30 	bl	800af34 <arm_mat_mult_f32>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f503 7059 	add.w	r0, r3, #868	; 0x364
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80012f0:	461a      	mov	r2, r3
 80012f2:	f009 ffc9 	bl	800b288 <arm_mat_add_f32>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f503 7125 	add.w	r1, r3, #660	; 0x294
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8001312:	461a      	mov	r2, r3
 8001314:	f009 fe0e 	bl	800af34 <arm_mat_mult_f32>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f503 715b 	add.w	r1, r3, #876	; 0x36c
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8001334:	461a      	mov	r2, r3
 8001336:	f009 fd93 	bl	800ae60 <arm_mat_sub_f32>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f503 705d 	add.w	r0, r3, #884	; 0x374
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 8001356:	461a      	mov	r2, r3
 8001358:	f009 fdec 	bl	800af34 <arm_mat_mult_f32>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <PIDAController_Init>:
#define PIDVELO_KD  0.0f
#define PID_LIM_MIN_INT -10000.0f
#define PID_LIM_MAX_INT  10000.0f

void PIDAController_Init(PIDAController *pid)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	pid->Last1Error = 0.0f;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
	pid->Last2Error = 0.0f;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	; 0x24

	pid->differentiatorOutput = 0.0f;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
	pid->integratorOutput = 0.0f;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
	pid->proportionalOutput = 0.0f;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	61da      	str	r2, [r3, #28]

	pid->ControllerOut = 0.0f;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
	pid->ControllerLastOut = 0.0f;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c

	pid->OutputMax = PID_LIM_MAX_INT;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <PIDAController_Init+0x58>)
 80013b4:	611a      	str	r2, [r3, #16]
	pid->OutputMin = PID_LIM_MIN_INT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <PIDAController_Init+0x5c>)
 80013ba:	60da      	str	r2, [r3, #12]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	461c4000 	.word	0x461c4000
 80013cc:	c61c4000 	.word	0xc61c4000

080013d0 <PIDAVelocityController_Update>:

float PIDAVelocityController_Update(PIDAController *pid, float setpoint, float measurement){
 80013d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013d4:	b088      	sub	sp, #32
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	ed87 0a02 	vstr	s0, [r7, #8]
 80013de:	edc7 0a01 	vstr	s1, [r7, #4]

    float error = setpoint - measurement;
 80013e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80013e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ee:	edc7 7a07 	vstr	s15, [r7, #28]
    float errorDZ = error;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	61bb      	str	r3, [r7, #24]
    float deadzone = 2.5;
 80013f6:	4b62      	ldr	r3, [pc, #392]	; (8001580 <PIDAVelocityController_Update+0x1b0>)
 80013f8:	617b      	str	r3, [r7, #20]
//    else
//    {
//    	pid->KpUse = pid->Kp;
//    }

    if(AbsVal(setpoint) <= 10.0) // 10 deg/s
 80013fa:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fe:	f000 f9d8 	bl	80017b2 <AbsVal>
 8001402:	eef0 7a40 	vmov.f32	s15, s0
 8001406:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800140a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800140e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001412:	d80a      	bhi.n	800142a <PIDAVelocityController_Update+0x5a>
    {
//    	pid->Kp  = 0.2;
//    	pid->Ki  = 6.0;
//    	pid->Kd  = 0.0;
    	pid->Kp  = PIDVELO_KP;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4a5b      	ldr	r2, [pc, #364]	; (8001584 <PIDAVelocityController_Update+0x1b4>)
 8001418:	601a      	str	r2, [r3, #0]
    	pid->Ki  = PIDVELO_KI;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4a5a      	ldr	r2, [pc, #360]	; (8001588 <PIDAVelocityController_Update+0x1b8>)
 800141e:	605a      	str	r2, [r3, #4]
    	pid->Kd  = PIDVELO_KD;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	e009      	b.n	800143e <PIDAVelocityController_Update+0x6e>
    }
    else
    {
    	pid->Kp  = PIDVELO_KP;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4a55      	ldr	r2, [pc, #340]	; (8001584 <PIDAVelocityController_Update+0x1b4>)
 800142e:	601a      	str	r2, [r3, #0]
    	pid->Ki  = PIDVELO_KI;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4a55      	ldr	r2, [pc, #340]	; (8001588 <PIDAVelocityController_Update+0x1b8>)
 8001434:	605a      	str	r2, [r3, #4]
    	pid->Kd  = PIDVELO_KD;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
    }

	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	ed93 7a00 	vldr	s14, [r3]
 8001444:	edd7 7a06 	vldr	s15, [r7, #24]
 8001448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	edd3 6a00 	vldr	s13, [r3]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	edd3 7a08 	vldr	s15, [r3, #32]
 8001458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	ed93 7a01 	vldr	s14, [r3, #4]
 800146c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f80e 	bl	80004a0 <__aeabi_f2d>
 8001484:	4604      	mov	r4, r0
 8001486:	460d      	mov	r5, r1
 8001488:	69b8      	ldr	r0, [r7, #24]
 800148a:	f7ff f809 	bl	80004a0 <__aeabi_f2d>
 800148e:	4680      	mov	r8, r0
 8001490:	4689      	mov	r9, r1
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f802 	bl	80004a0 <__aeabi_f2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	f7fe fea0 	bl	80001e4 <__adddf3>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4640      	mov	r0, r8
 80014aa:	4649      	mov	r1, r9
 80014ac:	f7fe fe98 	bl	80001e0 <__aeabi_dsub>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4690      	mov	r8, r2
 80014b6:	4699      	mov	r9, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe ffef 	bl	80004a0 <__aeabi_f2d>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4640      	mov	r0, r8
 80014c8:	4649      	mov	r1, r9
 80014ca:	f7fe fe8b 	bl	80001e4 <__adddf3>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4620      	mov	r0, r4
 80014d4:	4629      	mov	r1, r5
 80014d6:	f7ff f83b 	bl	8000550 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f7ff fa67 	bl	80009b4 <__aeabi_d2f>
 80014e6:	4602      	mov	r2, r0
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	ed93 7a07 	vldr	s14, [r3, #28]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80014f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8001502:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800150c:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	dd04      	ble.n	8001536 <PIDAVelocityController_Update+0x166>

    	pid->ControllerOut = pid->OutputMax;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
 8001534:	e00e      	b.n	8001554 <PIDAVelocityController_Update+0x184>

    } else if (pid->ControllerOut < pid->OutputMin) {
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154a:	d503      	bpl.n	8001554 <PIDAVelocityController_Update+0x184>

    	pid->ControllerOut = pid->OutputMin;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a1a      	ldr	r2, [r3, #32]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	ee07 3a90 	vmov	s15, r3
}
 8001572:	eeb0 0a67 	vmov.f32	s0, s15
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800157e:	bf00      	nop
 8001580:	40200000 	.word	0x40200000
 8001584:	3e23e1d3 	.word	0x3e23e1d3
 8001588:	4048ecf7 	.word	0x4048ecf7

0800158c <PIDAPositonController_Update>:

float PIDAPositonController_Update(PIDAController *pid, float setpoint, float measurement)
{
 800158c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001590:	b088      	sub	sp, #32
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	ed87 0a02 	vstr	s0, [r7, #8]
 800159a:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = setpoint - measurement;
 800159e:	ed97 7a02 	vldr	s14, [r7, #8]
 80015a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015aa:	edc7 7a07 	vstr	s15, [r7, #28]
    float errorDZ = error;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	61bb      	str	r3, [r7, #24]
    float deadzone = 0.4;
 80015b2:	4b62      	ldr	r3, [pc, #392]	; (800173c <PIDAPositonController_Update+0x1b0>)
 80015b4:	617b      	str	r3, [r7, #20]
//    else
//    {
//    	errorDZ = error + deadzone;
//    }

    if(AbsVal(setpoint) < 10.0) // 10 deg/s
 80015b6:	ed97 0a02 	vldr	s0, [r7, #8]
 80015ba:	f000 f8fa 	bl	80017b2 <AbsVal>
 80015be:	eef0 7a40 	vmov.f32	s15, s0
 80015c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ce:	d50a      	bpl.n	80015e6 <PIDAPositonController_Update+0x5a>
    {
    	pid->Kp  = PID_KP;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4a5b      	ldr	r2, [pc, #364]	; (8001740 <PIDAPositonController_Update+0x1b4>)
 80015d4:	601a      	str	r2, [r3, #0]
    	pid->Ki  = PID_KI;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4a5a      	ldr	r2, [pc, #360]	; (8001744 <PIDAPositonController_Update+0x1b8>)
 80015da:	605a      	str	r2, [r3, #4]
    	pid->Kd  = PID_KD;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	e009      	b.n	80015fa <PIDAPositonController_Update+0x6e>
    }
    else
    {
    	pid->Kp  = PID_KP;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4a55      	ldr	r2, [pc, #340]	; (8001740 <PIDAPositonController_Update+0x1b4>)
 80015ea:	601a      	str	r2, [r3, #0]
    	pid->Ki  = PID_KI;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4a55      	ldr	r2, [pc, #340]	; (8001744 <PIDAPositonController_Update+0x1b8>)
 80015f0:	605a      	str	r2, [r3, #4]
    	pid->Kd  = PID_KD;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
    }

	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	ed93 7a00 	vldr	s14, [r3]
 8001600:	edd7 7a06 	vldr	s15, [r7, #24]
 8001604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	edd3 6a00 	vldr	s13, [r3]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	edd3 7a08 	vldr	s15, [r3, #32]
 8001614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	ed93 7a01 	vldr	s14, [r3, #4]
 8001628:	edd7 7a06 	vldr	s15, [r7, #24]
 800162c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff30 	bl	80004a0 <__aeabi_f2d>
 8001640:	4604      	mov	r4, r0
 8001642:	460d      	mov	r5, r1
 8001644:	69b8      	ldr	r0, [r7, #24]
 8001646:	f7fe ff2b 	bl	80004a0 <__aeabi_f2d>
 800164a:	4680      	mov	r8, r0
 800164c:	4689      	mov	r9, r1
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff24 	bl	80004a0 <__aeabi_f2d>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	f7fe fdc2 	bl	80001e4 <__adddf3>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4640      	mov	r0, r8
 8001666:	4649      	mov	r1, r9
 8001668:	f7fe fdba 	bl	80001e0 <__aeabi_dsub>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4690      	mov	r8, r2
 8001672:	4699      	mov	r9, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff11 	bl	80004a0 <__aeabi_f2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4640      	mov	r0, r8
 8001684:	4649      	mov	r1, r9
 8001686:	f7fe fdad 	bl	80001e4 <__adddf3>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4620      	mov	r0, r4
 8001690:	4629      	mov	r1, r5
 8001692:	f7fe ff5d 	bl	8000550 <__aeabi_dmul>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f7ff f989 	bl	80009b4 <__aeabi_d2f>
 80016a2:	4602      	mov	r2, r0
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	ed93 7a07 	vldr	s14, [r3, #28]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80016b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80016be:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80016c8:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	edd3 7a04 	vldr	s15, [r3, #16]
 80016de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	dd04      	ble.n	80016f2 <PIDAPositonController_Update+0x166>

    	pid->ControllerOut = pid->OutputMax;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
 80016f0:	e00e      	b.n	8001710 <PIDAPositonController_Update+0x184>

    } else if (pid->ControllerOut < pid->OutputMin) {
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80016fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	d503      	bpl.n	8001710 <PIDAPositonController_Update+0x184>

    	pid->ControllerOut = pid->OutputMin;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a1a      	ldr	r2, [r3, #32]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	ee07 3a90 	vmov	s15, r3
}
 800172e:	eeb0 0a67 	vmov.f32	s0, s15
 8001732:	3720      	adds	r7, #32
 8001734:	46bd      	mov	sp, r7
 8001736:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800173a:	bf00      	nop
 800173c:	3ecccccd 	.word	0x3ecccccd
 8001740:	40c00000 	.word	0x40c00000
 8001744:	3d4ccccd 	.word	0x3d4ccccd

08001748 <Robotinit>:


#include "Trajectory.h"

void Robotinit(RobotManagement *Robot)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	  Robot -> Position = 0.0;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
	  Robot -> Velocity = 0.0;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
	  Robot -> CurrentStation = 0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	811a      	strh	r2, [r3, #8]
	  Robot -> GoalPositon = 0.0;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
	  Robot -> HomePositon = 0.0;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
	  Robot -> QX = 0.0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
	  Robot -> QV = 0.0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]

	  Robot -> flagSethome = 0;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	  Robot -> flagStartTime = 0;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	  Robot -> RunningFlag = 0;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	  Robot -> MotorIsOn = 0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2020 	strb.w	r2, [r3, #32]

}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <AbsVal>:
{
	Robot -> HomePositon = homePoint;
}

float AbsVal(float number)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 80017bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c8:	d50e      	bpl.n	80017e8 <AbsVal+0x36>
  {
    return number*-1.0;
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7fe fe68 	bl	80004a0 <__aeabi_f2d>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f8ec 	bl	80009b4 <__aeabi_d2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eef1 7a67 	vneg.f32	s15, s15
 80017e6:	e001      	b.n	80017ec <AbsVal+0x3a>
  }
  else
  {
    return number;
 80017e8:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 80017ec:	eeb0 0a67 	vmov.f32	s0, s15
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal){
 80017f8:	b5b0      	push	{r4, r5, r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	ed87 0a02 	vstr	s0, [r7, #8]
 8001804:	edc7 0a01 	vstr	s1, [r7, #4]

	traject -> Qin = Qinitial;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	traject -> Qfinal = Qfinal;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	// Set initial = 0;
	traject -> QRelative = traject -> Qfinal - traject -> Qin;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8001824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	// Set Vmax Amax Jmax
	traject -> Vmax = 0.0;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
	traject -> Amax = 0.0;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
	traject -> Jmax = 0.0;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	605a      	str	r2, [r3, #4]
	float gain = 0.0;
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
	if(traject -> QRelative < 0.0)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8001852:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185a:	d502      	bpl.n	8001862 <CoefficientAndTimeCalculation+0x6a>
	{
		gain = -1.0;
 800185c:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <CoefficientAndTimeCalculation+0x19c>)
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	e002      	b.n	8001868 <CoefficientAndTimeCalculation+0x70>
	}
	else
	{
		gain = 1.0;
 8001862:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001866:	617b      	str	r3, [r7, #20]
	}
	// Find Speed limit
	float Vcheck = AbsVal(traject -> QRelative);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800186e:	eeb0 0a67 	vmov.f32	s0, s15
 8001872:	f7ff ff9e 	bl	80017b2 <AbsVal>
 8001876:	ed87 0a04 	vstr	s0, [r7, #16]
	if(Vcheck >= 1.0  && Vcheck < 20.0)
 800187a:	edd7 7a04 	vldr	s15, [r7, #16]
 800187e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188a:	db12      	blt.n	80018b2 <CoefficientAndTimeCalculation+0xba>
 800188c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001890:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189c:	d509      	bpl.n	80018b2 <CoefficientAndTimeCalculation+0xba>
	{
		traject -> Amax =  5.73;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4a3d      	ldr	r2, [pc, #244]	; (8001998 <CoefficientAndTimeCalculation+0x1a0>)
 80018a2:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4a3d      	ldr	r2, [pc, #244]	; (800199c <CoefficientAndTimeCalculation+0x1a4>)
 80018a8:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  3.0;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4a3c      	ldr	r2, [pc, #240]	; (80019a0 <CoefficientAndTimeCalculation+0x1a8>)
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	e0a6      	b.n	8001a00 <CoefficientAndTimeCalculation+0x208>
	}
	else if(Vcheck >= 20.0  && Vcheck < 40.0)
 80018b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80018ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c2:	db12      	blt.n	80018ea <CoefficientAndTimeCalculation+0xf2>
 80018c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018c8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80019a4 <CoefficientAndTimeCalculation+0x1ac>
 80018cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d4:	d509      	bpl.n	80018ea <CoefficientAndTimeCalculation+0xf2>
	{
		traject -> Amax =  5.73;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4a2f      	ldr	r2, [pc, #188]	; (8001998 <CoefficientAndTimeCalculation+0x1a0>)
 80018da:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4a2f      	ldr	r2, [pc, #188]	; (800199c <CoefficientAndTimeCalculation+0x1a4>)
 80018e0:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  6.0;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <CoefficientAndTimeCalculation+0x1b0>)
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	e08a      	b.n	8001a00 <CoefficientAndTimeCalculation+0x208>
	}
	else if(Vcheck >= 40.0  && Vcheck < 60.0)
 80018ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ee:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80019a4 <CoefficientAndTimeCalculation+0x1ac>
 80018f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fa:	db12      	blt.n	8001922 <CoefficientAndTimeCalculation+0x12a>
 80018fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001900:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80019ac <CoefficientAndTimeCalculation+0x1b4>
 8001904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190c:	d509      	bpl.n	8001922 <CoefficientAndTimeCalculation+0x12a>
	{
		traject -> Amax =  5.73;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4a21      	ldr	r2, [pc, #132]	; (8001998 <CoefficientAndTimeCalculation+0x1a0>)
 8001912:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4a21      	ldr	r2, [pc, #132]	; (800199c <CoefficientAndTimeCalculation+0x1a4>)
 8001918:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  9.0;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4a24      	ldr	r2, [pc, #144]	; (80019b0 <CoefficientAndTimeCalculation+0x1b8>)
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	e06e      	b.n	8001a00 <CoefficientAndTimeCalculation+0x208>
	}
	else if(Vcheck >= 60.0  && Vcheck < 100.0)
 8001922:	edd7 7a04 	vldr	s15, [r7, #16]
 8001926:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80019ac <CoefficientAndTimeCalculation+0x1b4>
 800192a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001932:	db12      	blt.n	800195a <CoefficientAndTimeCalculation+0x162>
 8001934:	edd7 7a04 	vldr	s15, [r7, #16]
 8001938:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80019b4 <CoefficientAndTimeCalculation+0x1bc>
 800193c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001944:	d509      	bpl.n	800195a <CoefficientAndTimeCalculation+0x162>
	{
		traject -> Amax =  5.73;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4a13      	ldr	r2, [pc, #76]	; (8001998 <CoefficientAndTimeCalculation+0x1a0>)
 800194a:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  114.6;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <CoefficientAndTimeCalculation+0x1a4>)
 8001950:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  15.0;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4a18      	ldr	r2, [pc, #96]	; (80019b8 <CoefficientAndTimeCalculation+0x1c0>)
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	e052      	b.n	8001a00 <CoefficientAndTimeCalculation+0x208>
	}
	else if(Vcheck >= 100.0  && Vcheck < 160.0)
 800195a:	edd7 7a04 	vldr	s15, [r7, #16]
 800195e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80019b4 <CoefficientAndTimeCalculation+0x1bc>
 8001962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196a:	db2f      	blt.n	80019cc <CoefficientAndTimeCalculation+0x1d4>
 800196c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001970:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80019c8 <CoefficientAndTimeCalculation+0x1d0>
 8001974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197c:	d526      	bpl.n	80019cc <CoefficientAndTimeCalculation+0x1d4>
	{
		traject -> Amax =  17.9;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <CoefficientAndTimeCalculation+0x1c4>)
 8001982:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  286.5;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <CoefficientAndTimeCalculation+0x1c8>)
 8001988:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  24;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <CoefficientAndTimeCalculation+0x1cc>)
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	e036      	b.n	8001a00 <CoefficientAndTimeCalculation+0x208>
 8001992:	bf00      	nop
 8001994:	bf800000 	.word	0xbf800000
 8001998:	40b75c29 	.word	0x40b75c29
 800199c:	42e53333 	.word	0x42e53333
 80019a0:	40400000 	.word	0x40400000
 80019a4:	42200000 	.word	0x42200000
 80019a8:	40c00000 	.word	0x40c00000
 80019ac:	42700000 	.word	0x42700000
 80019b0:	41100000 	.word	0x41100000
 80019b4:	42c80000 	.word	0x42c80000
 80019b8:	41700000 	.word	0x41700000
 80019bc:	418f3333 	.word	0x418f3333
 80019c0:	438f4000 	.word	0x438f4000
 80019c4:	41c00000 	.word	0x41c00000
 80019c8:	43200000 	.word	0x43200000
	}
	else if(Vcheck >= 160.0)
 80019cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80019d0:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80019c8 <CoefficientAndTimeCalculation+0x1d0>
 80019d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019dc:	db10      	blt.n	8001a00 <CoefficientAndTimeCalculation+0x208>
	{
		traject -> Amax =  22.92;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <CoefficientAndTimeCalculation+0x1fc>)
 80019e2:	601a      	str	r2, [r3, #0]
		traject -> Jmax =  573;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <CoefficientAndTimeCalculation+0x200>)
 80019e8:	605a      	str	r2, [r3, #4]
		traject -> Vmax =  54;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4a03      	ldr	r2, [pc, #12]	; (80019fc <CoefficientAndTimeCalculation+0x204>)
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	e006      	b.n	8001a00 <CoefficientAndTimeCalculation+0x208>
 80019f2:	bf00      	nop
 80019f4:	41b75c29 	.word	0x41b75c29
 80019f8:	440f4000 	.word	0x440f4000
 80019fc:	42580000 	.word	0x42580000
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  traject -> Vmax *gain;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a06:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	edc3 7a02 	vstr	s15, [r3, #8]
	traject -> Amax =  traject -> Amax *gain;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	ed93 7a00 	vldr	s14, [r3]
 8001a1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	edc3 7a00 	vstr	s15, [r3]
	traject -> Jmax =  traject -> Jmax *gain;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	edc3 7a01 	vstr	s15, [r3, #4]

	// Calculate time
	traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	edd3 6a00 	vldr	s13, [r3]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	ed93 6a02 	vldr	s12, [r3, #8]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	edd3 6a00 	vldr	s13, [r3]
 8001a58:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a6c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	traject -> T[0] = (traject -> Amax/traject -> Jmax);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	edd3 6a00 	vldr	s13, [r3]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	traject -> T[1] = (traject -> Vmax/traject -> Amax);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	ed93 7a00 	vldr	s14, [r3]
 8001a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	edd3 6a00 	vldr	s13, [r3]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	ed93 6a02 	vldr	s12, [r3, #8]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	edd3 6a00 	vldr	s13, [r3]
 8001ac2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	traject -> T[3] = traject -> T[6] - traject -> T[2];
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	traject -> T[4] = traject -> T[6] - traject -> T[1];
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	traject -> T[5] = traject -> T[6] - traject -> T[0];
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	traject -> A[0] = traject -> Jmax;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	60da      	str	r2, [r3, #12]
	traject -> A[1] = 0;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
	traject -> A[2] = -1.0 * traject -> Jmax;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fcba 	bl	80004a0 <__aeabi_f2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7fe ff3e 	bl	80009b4 <__aeabi_d2f>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	ee07 3a90 	vmov	s15, r3
 8001b3e:	eef1 7a67 	vneg.f32	s15, s15
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	edc3 7a05 	vstr	s15, [r3, #20]
	traject -> A[3] = 0;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
	traject -> A[4] = -1.0 * traject -> Jmax;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fca3 	bl	80004a0 <__aeabi_f2d>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	f7fe ff27 	bl	80009b4 <__aeabi_d2f>
 8001b66:	4603      	mov	r3, r0
 8001b68:	ee07 3a90 	vmov	s15, r3
 8001b6c:	eef1 7a67 	vneg.f32	s15, s15
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	edc3 7a07 	vstr	s15, [r3, #28]
	traject -> A[5] = 0;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	621a      	str	r2, [r3, #32]
	traject -> A[6] = traject -> Jmax;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24

	traject -> B[0] = 0;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28
	traject -> B[1] = traject -> Amax;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	62da      	str	r2, [r3, #44]	; 0x2c
	traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	ed93 7a00 	vldr	s14, [r3]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	traject -> B[3] = 0;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	635a      	str	r2, [r3, #52]	; 0x34
	traject -> B[4] = traject -> Jmax * traject -> T[3];
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	traject -> B[5] = (-1.0 * traject ->Amax);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fc61 	bl	80004a0 <__aeabi_f2d>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7fe fee5 	bl	80009b4 <__aeabi_d2f>
 8001bea:	4603      	mov	r3, r0
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eef1 7a67 	vneg.f32	s15, s15
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fc4e 	bl	80004a0 <__aeabi_f2d>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4614      	mov	r4, r2
 8001c0a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c1e:	ee17 0a90 	vmov	r0, s15
 8001c22:	f7fe fc3d 	bl	80004a0 <__aeabi_f2d>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	f7fe fad7 	bl	80001e0 <__aeabi_dsub>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f7fe febb 	bl	80009b4 <__aeabi_d2f>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40

	traject -> C[0] = 0;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	645a      	str	r2, [r3, #68]	; 0x44
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c66:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c6a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001c88:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c9e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001caa:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001cba:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	ed93 7a04 	vldr	s14, [r3, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001cea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001d08:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	edd3 6a05 	vldr	s13, [r3, #20]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001d1e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d26:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d2a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001d3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d42:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d66:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d6a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001d88:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d9e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001da2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001daa:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001dba:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	ed93 7a06 	vldr	s14, [r3, #24]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001dde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001dea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001e08:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e1e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e26:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001e2a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e42:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e66:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e6a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001e88:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e9e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001eaa:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001eba:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	ed93 7a08 	vldr	s14, [r3, #32]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001ede:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001eea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001efe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001f08:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001f1e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f26:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f2a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001f3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f42:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

	traject -> D[0] = 0;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	661a      	str	r2, [r3, #96]	; 0x60
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f66:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f78:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001f7c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f92:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f9a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f9e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001fa2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001fc0:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	edd3 6a04 	vldr	s13, [r3, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001fd6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001fe0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe8:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001fec:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8002002:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002006:	ee26 6a27 	vmul.f32	s12, s12, s15
 800200a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800200e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002012:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8002022:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002026:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 800202a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	ed93 7a04 	vldr	s14, [r3, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002046:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002058:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800205c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002072:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002076:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800207a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800207e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002082:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002096:	ee37 7a27 	vadd.f32	s14, s14, s15
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80020a0:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	edd3 6a05 	vldr	s13, [r3, #20]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80020b6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80020c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c8:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80020cc:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80020e2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80020e6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80020ea:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80020ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002102:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002106:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 800210a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	ed93 7a05 	vldr	s14, [r3, #20]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002126:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002138:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800213c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002152:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002156:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800215a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800215e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002162:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002176:	ee37 7a27 	vadd.f32	s14, s14, s15
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002180:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	edd3 6a06 	vldr	s13, [r3, #24]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002196:	ee26 6a27 	vmul.f32	s12, s12, s15
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80021a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a8:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80021ac:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	edd3 5a21 	vldr	s11, [r3, #132]	; 0x84
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80021c2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80021c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021ca:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80021ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80021e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 80021ea:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002206:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002218:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800221c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002232:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002236:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800223a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800223e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002242:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002256:	ee37 7a27 	vadd.f32	s14, s14, s15
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002260:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	edd3 6a07 	vldr	s13, [r3, #28]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002276:	ee26 6a27 	vmul.f32	s12, s12, s15
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002280:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002288:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800228c:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	edd3 5a22 	vldr	s11, [r3, #136]	; 0x88
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80022a2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80022a6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022aa:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80022ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80022c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 80022ca:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	ed93 7a07 	vldr	s14, [r3, #28]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80022e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80022f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f8:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80022fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002312:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002316:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800231a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800231e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002322:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002336:	ee37 7a27 	vadd.f32	s14, s14, s15
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002340:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	edd3 6a08 	vldr	s13, [r3, #32]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002356:	ee26 6a27 	vmul.f32	s12, s12, s15
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002360:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002364:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002368:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800236c:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002382:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002386:	ee26 6a27 	vmul.f32	s12, s12, s15
 800238a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800238e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002392:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80023a2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80023aa:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	ed93 7a08 	vldr	s14, [r3, #32]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80023c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80023d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d8:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80023dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80023f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023fa:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80023fe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002402:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002416:	ee37 7a27 	vadd.f32	s14, s14, s15
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002420:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002436:	ee26 6a27 	vmul.f32	s12, s12, s15
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002440:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002448:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800244c:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002462:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002466:	ee26 6a27 	vmul.f32	s12, s12, s15
 800246a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800246e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002472:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	ed93 6a17 	vldr	s12, [r3, #92]	; 0x5c
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002482:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002486:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 800248a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
}
 8002494:	bf00      	nop
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bdb0      	pop	{r4, r5, r7, pc}
 800249c:	0000      	movs	r0, r0
	...

080024a0 <TrajectoryEvaluation>:


void TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime, uint64_t PredictTime){
 80024a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	e9c7 2300 	strd	r2, r3, [r7]
	// Microsec to sec
	static float t = 0;
	static float tP = 0;
	t  = (CurrentTime - StartTime)/1000000.0;
 80024ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024b6:	ebb0 0802 	subs.w	r8, r0, r2
 80024ba:	eb61 0903 	sbc.w	r9, r1, r3
 80024be:	4640      	mov	r0, r8
 80024c0:	4649      	mov	r1, r9
 80024c2:	f7fe f80f 	bl	80004e4 <__aeabi_ul2d>
 80024c6:	a3c6      	add	r3, pc, #792	; (adr r3, 80027e0 <TrajectoryEvaluation+0x340>)
 80024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024cc:	f7fe f96a 	bl	80007a4 <__aeabi_ddiv>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	f7fe fa6c 	bl	80009b4 <__aeabi_d2f>
 80024dc:	4603      	mov	r3, r0
 80024de:	4ac2      	ldr	r2, [pc, #776]	; (80027e8 <TrajectoryEvaluation+0x348>)
 80024e0:	6013      	str	r3, [r2, #0]
	tP = (PredictTime - StartTime)/1000000.0;
 80024e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80024e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024ea:	1a84      	subs	r4, r0, r2
 80024ec:	eb61 0503 	sbc.w	r5, r1, r3
 80024f0:	4620      	mov	r0, r4
 80024f2:	4629      	mov	r1, r5
 80024f4:	f7fd fff6 	bl	80004e4 <__aeabi_ul2d>
 80024f8:	a3b9      	add	r3, pc, #740	; (adr r3, 80027e0 <TrajectoryEvaluation+0x340>)
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	f7fe f951 	bl	80007a4 <__aeabi_ddiv>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	f7fe fa53 	bl	80009b4 <__aeabi_d2f>
 800250e:	4603      	mov	r3, r0
 8002510:	4ab6      	ldr	r2, [pc, #728]	; (80027ec <TrajectoryEvaluation+0x34c>)
 8002512:	6013      	str	r3, [r2, #0]

	if(t >= 0 && t < traject -> T[0])
 8002514:	4bb4      	ldr	r3, [pc, #720]	; (80027e8 <TrajectoryEvaluation+0x348>)
 8002516:	edd3 7a00 	vldr	s15, [r3]
 800251a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002522:	f2c0 80a9 	blt.w	8002678 <TrajectoryEvaluation+0x1d8>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800252c:	4bae      	ldr	r3, [pc, #696]	; (80027e8 <TrajectoryEvaluation+0x348>)
 800252e:	edd3 7a00 	vldr	s15, [r3]
 8002532:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253a:	f340 809d 	ble.w	8002678 <TrajectoryEvaluation+0x1d8>
	{
		traject -> QJ = traject -> A[0];
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[0]*t + traject -> B[0];
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	ed93 7a03 	vldr	s14, [r3, #12]
 800254e:	4ba6      	ldr	r3, [pc, #664]	; (80027e8 <TrajectoryEvaluation+0x348>)
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800255e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	ed93 7a03 	vldr	s14, [r3, #12]
 800256e:	4b9e      	ldr	r3, [pc, #632]	; (80027e8 <TrajectoryEvaluation+0x348>)
 8002570:	edd3 6a00 	vldr	s13, [r3]
 8002574:	4b9c      	ldr	r3, [pc, #624]	; (80027e8 <TrajectoryEvaluation+0x348>)
 8002576:	edd3 7a00 	vldr	s15, [r3]
 800257a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800257e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002582:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002586:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002590:	4b95      	ldr	r3, [pc, #596]	; (80027e8 <TrajectoryEvaluation+0x348>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80025a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[0]*(tP*tP)/2 + traject -> B[0]*tP + traject -> C[0];
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80025b4:	4b8d      	ldr	r3, [pc, #564]	; (80027ec <TrajectoryEvaluation+0x34c>)
 80025b6:	edd3 6a00 	vldr	s13, [r3]
 80025ba:	4b8c      	ldr	r3, [pc, #560]	; (80027ec <TrajectoryEvaluation+0x34c>)
 80025bc:	edd3 7a00 	vldr	s15, [r3]
 80025c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80025d6:	4b85      	ldr	r3, [pc, #532]	; (80027ec <TrajectoryEvaluation+0x34c>)
 80025d8:	edd3 7a00 	vldr	s15, [r3]
 80025dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80025ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	edd3 6a03 	vldr	s13, [r3, #12]
 8002600:	4b79      	ldr	r3, [pc, #484]	; (80027e8 <TrajectoryEvaluation+0x348>)
 8002602:	ed93 6a00 	vldr	s12, [r3]
 8002606:	4b78      	ldr	r3, [pc, #480]	; (80027e8 <TrajectoryEvaluation+0x348>)
 8002608:	edd3 7a00 	vldr	s15, [r3]
 800260c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002610:	4b75      	ldr	r3, [pc, #468]	; (80027e8 <TrajectoryEvaluation+0x348>)
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	ee66 7a27 	vmul.f32	s15, s12, s15
 800261a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800261e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002622:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002626:	ee37 7a27 	vadd.f32	s14, s14, s15
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002630:	4b6d      	ldr	r3, [pc, #436]	; (80027e8 <TrajectoryEvaluation+0x348>)
 8002632:	ed93 6a00 	vldr	s12, [r3]
 8002636:	4b6c      	ldr	r3, [pc, #432]	; (80027e8 <TrajectoryEvaluation+0x348>)
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002640:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002644:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002648:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800264c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8002656:	4b64      	ldr	r3, [pc, #400]	; (80027e8 <TrajectoryEvaluation+0x348>)
 8002658:	edd3 7a00 	vldr	s15, [r3]
 800265c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002660:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800266a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002674:	f000 bc62 	b.w	8002f3c <TrajectoryEvaluation+0xa9c>
	}
	else if( t >= traject -> T[0] && t < traject -> T[1])
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800267e:	4b5a      	ldr	r3, [pc, #360]	; (80027e8 <TrajectoryEvaluation+0x348>)
 8002680:	edd3 7a00 	vldr	s15, [r3]
 8002684:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268c:	f200 80b0 	bhi.w	80027f0 <TrajectoryEvaluation+0x350>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002696:	4b54      	ldr	r3, [pc, #336]	; (80027e8 <TrajectoryEvaluation+0x348>)
 8002698:	edd3 7a00 	vldr	s15, [r3]
 800269c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a4:	f340 80a4 	ble.w	80027f0 <TrajectoryEvaluation+0x350>
	{
		traject -> QJ = traject -> A[1];
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[1]*t + traject -> B[1];
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	ed93 7a04 	vldr	s14, [r3, #16]
 80026b8:	4b4b      	ldr	r3, [pc, #300]	; (80027e8 <TrajectoryEvaluation+0x348>)
 80026ba:	edd3 7a00 	vldr	s15, [r3]
 80026be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80026c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	ed93 7a04 	vldr	s14, [r3, #16]
 80026d8:	4b43      	ldr	r3, [pc, #268]	; (80027e8 <TrajectoryEvaluation+0x348>)
 80026da:	edd3 6a00 	vldr	s13, [r3]
 80026de:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <TrajectoryEvaluation+0x348>)
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80026f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80026fa:	4b3b      	ldr	r3, [pc, #236]	; (80027e8 <TrajectoryEvaluation+0x348>)
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002704:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800270e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[1]*(tP*tP)/2 + traject -> B[1]*tP + traject -> C[1];
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	ed93 7a04 	vldr	s14, [r3, #16]
 800271e:	4b33      	ldr	r3, [pc, #204]	; (80027ec <TrajectoryEvaluation+0x34c>)
 8002720:	edd3 6a00 	vldr	s13, [r3]
 8002724:	4b31      	ldr	r3, [pc, #196]	; (80027ec <TrajectoryEvaluation+0x34c>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800272e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002732:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002736:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002740:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <TrajectoryEvaluation+0x34c>)
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800274a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	edd3 6a04 	vldr	s13, [r3, #16]
 800276a:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <TrajectoryEvaluation+0x348>)
 800276c:	ed93 6a00 	vldr	s12, [r3]
 8002770:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <TrajectoryEvaluation+0x348>)
 8002772:	edd3 7a00 	vldr	s15, [r3]
 8002776:	ee26 6a27 	vmul.f32	s12, s12, s15
 800277a:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <TrajectoryEvaluation+0x348>)
 800277c:	edd3 7a00 	vldr	s15, [r3]
 8002780:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002784:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002788:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800278c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002790:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800279a:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <TrajectoryEvaluation+0x348>)
 800279c:	ed93 6a00 	vldr	s12, [r3]
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <TrajectoryEvaluation+0x348>)
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80027aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027ae:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80027b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <TrajectoryEvaluation+0x348>)
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80027d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 80027de:	e3ad      	b.n	8002f3c <TrajectoryEvaluation+0xa9c>
 80027e0:	00000000 	.word	0x00000000
 80027e4:	412e8480 	.word	0x412e8480
 80027e8:	200003cc 	.word	0x200003cc
 80027ec:	200003d0 	.word	0x200003d0
	}
	else if( t >= traject -> T[1] && t < traject -> T[2])
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80027f6:	4bb2      	ldr	r3, [pc, #712]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002804:	f200 80a8 	bhi.w	8002958 <TrajectoryEvaluation+0x4b8>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800280e:	4bac      	ldr	r3, [pc, #688]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 8002810:	edd3 7a00 	vldr	s15, [r3]
 8002814:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281c:	f340 809c 	ble.w	8002958 <TrajectoryEvaluation+0x4b8>
	{
		traject -> QJ = traject -> A[2];
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	695a      	ldr	r2, [r3, #20]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[2]*t + traject -> B[2];
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002830:	4ba3      	ldr	r3, [pc, #652]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002850:	4b9b      	ldr	r3, [pc, #620]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 8002852:	edd3 6a00 	vldr	s13, [r3]
 8002856:	4b9a      	ldr	r3, [pc, #616]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002864:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002868:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002872:	4b93      	ldr	r3, [pc, #588]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 8002874:	edd3 7a00 	vldr	s15, [r3]
 8002878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800287c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[2]*(tP*tP)/2 + traject -> B[2]*tP + traject -> C[2];
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	ed93 7a05 	vldr	s14, [r3, #20]
 8002896:	4b8b      	ldr	r3, [pc, #556]	; (8002ac4 <TrajectoryEvaluation+0x624>)
 8002898:	edd3 6a00 	vldr	s13, [r3]
 800289c:	4b89      	ldr	r3, [pc, #548]	; (8002ac4 <TrajectoryEvaluation+0x624>)
 800289e:	edd3 7a00 	vldr	s15, [r3]
 80028a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028aa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80028ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80028b8:	4b82      	ldr	r3, [pc, #520]	; (8002ac4 <TrajectoryEvaluation+0x624>)
 80028ba:	edd3 7a00 	vldr	s15, [r3]
 80028be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80028cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	edd3 6a05 	vldr	s13, [r3, #20]
 80028e2:	4b77      	ldr	r3, [pc, #476]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 80028e4:	ed93 6a00 	vldr	s12, [r3]
 80028e8:	4b75      	ldr	r3, [pc, #468]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 80028ea:	edd3 7a00 	vldr	s15, [r3]
 80028ee:	ee26 6a27 	vmul.f32	s12, s12, s15
 80028f2:	4b73      	ldr	r3, [pc, #460]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 80028f4:	edd3 7a00 	vldr	s15, [r3]
 80028f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002900:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002904:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002908:	ee37 7a27 	vadd.f32	s14, s14, s15
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002912:	4b6b      	ldr	r3, [pc, #428]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 8002914:	ed93 6a00 	vldr	s12, [r3]
 8002918:	4b69      	ldr	r3, [pc, #420]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 800291a:	edd3 7a00 	vldr	s15, [r3]
 800291e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002922:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002926:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800292a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800292e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8002938:	4b61      	ldr	r3, [pc, #388]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002942:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800294c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002956:	e2f1      	b.n	8002f3c <TrajectoryEvaluation+0xa9c>
	}
	else if( t >= traject -> T[2] && t < traject -> T[3])
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800295e:	4b58      	ldr	r3, [pc, #352]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 8002960:	edd3 7a00 	vldr	s15, [r3]
 8002964:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296c:	f200 80ac 	bhi.w	8002ac8 <TrajectoryEvaluation+0x628>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002976:	4b52      	ldr	r3, [pc, #328]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002984:	f340 80a0 	ble.w	8002ac8 <TrajectoryEvaluation+0x628>
	{
		traject -> QJ = traject -> A[3];
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	699a      	ldr	r2, [r3, #24]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[3]*t + traject -> B[3];
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	ed93 7a06 	vldr	s14, [r3, #24]
 8002998:	4b49      	ldr	r3, [pc, #292]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 800299a:	edd3 7a00 	vldr	s15, [r3]
 800299e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80029a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	ed93 7a06 	vldr	s14, [r3, #24]
 80029b8:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 80029ba:	edd3 6a00 	vldr	s13, [r3]
 80029be:	4b40      	ldr	r3, [pc, #256]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80029d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80029da:	4b39      	ldr	r3, [pc, #228]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80029ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[3]*(tP*tP)/2 + traject -> B[3]*tP + traject -> C[3];
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	ed93 7a06 	vldr	s14, [r3, #24]
 80029fe:	4b31      	ldr	r3, [pc, #196]	; (8002ac4 <TrajectoryEvaluation+0x624>)
 8002a00:	edd3 6a00 	vldr	s13, [r3]
 8002a04:	4b2f      	ldr	r3, [pc, #188]	; (8002ac4 <TrajectoryEvaluation+0x624>)
 8002a06:	edd3 7a00 	vldr	s15, [r3]
 8002a0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a12:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002a16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002a20:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <TrajectoryEvaluation+0x624>)
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	edd3 6a06 	vldr	s13, [r3, #24]
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 8002a4c:	ed93 6a00 	vldr	s12, [r3]
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 8002a52:	edd3 7a00 	vldr	s15, [r3]
 8002a56:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a5a:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a68:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002a6c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002a7a:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 8002a7c:	ed93 6a00 	vldr	s12, [r3]
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 8002a82:	edd3 7a00 	vldr	s15, [r3]
 8002a86:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a8e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002a92:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <TrajectoryEvaluation+0x620>)
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002abe:	e23d      	b.n	8002f3c <TrajectoryEvaluation+0xa9c>
 8002ac0:	200003cc 	.word	0x200003cc
 8002ac4:	200003d0 	.word	0x200003d0
	}
	else if( t >= traject -> T[3] && t < traject -> T[4])
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002ace:	4bb2      	ldr	r3, [pc, #712]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002adc:	f200 80a8 	bhi.w	8002c30 <TrajectoryEvaluation+0x790>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002ae6:	4bac      	ldr	r3, [pc, #688]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af4:	f340 809c 	ble.w	8002c30 <TrajectoryEvaluation+0x790>
	{
		traject -> QJ = traject -> A[4];
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	69da      	ldr	r2, [r3, #28]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[4]*t + traject -> B[4];
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b08:	4ba3      	ldr	r3, [pc, #652]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002b0a:	edd3 7a00 	vldr	s15, [r3]
 8002b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b28:	4b9b      	ldr	r3, [pc, #620]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002b2a:	edd3 6a00 	vldr	s13, [r3]
 8002b2e:	4b9a      	ldr	r3, [pc, #616]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002b30:	edd3 7a00 	vldr	s15, [r3]
 8002b34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002b4a:	4b93      	ldr	r3, [pc, #588]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002b4c:	edd3 7a00 	vldr	s15, [r3]
 8002b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[4]*(tP*tP)/2 + traject -> B[4]*tP + traject -> C[4];
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b6e:	4b8b      	ldr	r3, [pc, #556]	; (8002d9c <TrajectoryEvaluation+0x8fc>)
 8002b70:	edd3 6a00 	vldr	s13, [r3]
 8002b74:	4b89      	ldr	r3, [pc, #548]	; (8002d9c <TrajectoryEvaluation+0x8fc>)
 8002b76:	edd3 7a00 	vldr	s15, [r3]
 8002b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b82:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002b90:	4b82      	ldr	r3, [pc, #520]	; (8002d9c <TrajectoryEvaluation+0x8fc>)
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	edd3 6a07 	vldr	s13, [r3, #28]
 8002bba:	4b77      	ldr	r3, [pc, #476]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002bbc:	ed93 6a00 	vldr	s12, [r3]
 8002bc0:	4b75      	ldr	r3, [pc, #468]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002bc2:	edd3 7a00 	vldr	s15, [r3]
 8002bc6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002bca:	4b73      	ldr	r3, [pc, #460]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002bcc:	edd3 7a00 	vldr	s15, [r3]
 8002bd0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bd8:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002bdc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002be0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002bea:	4b6b      	ldr	r3, [pc, #428]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002bec:	ed93 6a00 	vldr	s12, [r3]
 8002bf0:	4b69      	ldr	r3, [pc, #420]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002bf2:	edd3 7a00 	vldr	s15, [r3]
 8002bf6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bfa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bfe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002c02:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002c10:	4b61      	ldr	r3, [pc, #388]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002c12:	edd3 7a00 	vldr	s15, [r3]
 8002c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002c2e:	e185      	b.n	8002f3c <TrajectoryEvaluation+0xa9c>
	}
	else if( t >= traject -> T[4] && t < traject -> T[5])
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002c36:	4b58      	ldr	r3, [pc, #352]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002c38:	edd3 7a00 	vldr	s15, [r3]
 8002c3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c44:	f200 80ac 	bhi.w	8002da0 <TrajectoryEvaluation+0x900>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8002c4e:	4b52      	ldr	r3, [pc, #328]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002c50:	edd3 7a00 	vldr	s15, [r3]
 8002c54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5c:	f340 80a0 	ble.w	8002da0 <TrajectoryEvaluation+0x900>
	{
		traject -> QJ = traject -> A[5];
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a1a      	ldr	r2, [r3, #32]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[5]*t + traject -> B[5];
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002c70:	4b49      	ldr	r3, [pc, #292]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002c72:	edd3 7a00 	vldr	s15, [r3]
 8002c76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002c90:	4b41      	ldr	r3, [pc, #260]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002c92:	edd3 6a00 	vldr	s13, [r3]
 8002c96:	4b40      	ldr	r3, [pc, #256]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002ca8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002cb2:	4b39      	ldr	r3, [pc, #228]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002cb4:	edd3 7a00 	vldr	s15, [r3]
 8002cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[5]*(tP*tP)/2 + traject -> B[5]*tP + traject -> C[5];
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	ed93 7a08 	vldr	s14, [r3, #32]
 8002cd6:	4b31      	ldr	r3, [pc, #196]	; (8002d9c <TrajectoryEvaluation+0x8fc>)
 8002cd8:	edd3 6a00 	vldr	s13, [r3]
 8002cdc:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <TrajectoryEvaluation+0x8fc>)
 8002cde:	edd3 7a00 	vldr	s15, [r3]
 8002ce2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002cee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002cf8:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <TrajectoryEvaluation+0x8fc>)
 8002cfa:	edd3 7a00 	vldr	s15, [r3]
 8002cfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	edd3 6a08 	vldr	s13, [r3, #32]
 8002d22:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002d24:	ed93 6a00 	vldr	s12, [r3]
 8002d28:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002d2a:	edd3 7a00 	vldr	s15, [r3]
 8002d2e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d32:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002d34:	edd3 7a00 	vldr	s15, [r3]
 8002d38:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d40:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002d44:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002d52:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002d54:	ed93 6a00 	vldr	s12, [r3]
 8002d58:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002d5a:	edd3 7a00 	vldr	s15, [r3]
 8002d5e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d66:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002d6a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8002d78:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <TrajectoryEvaluation+0x8f8>)
 8002d7a:	edd3 7a00 	vldr	s15, [r3]
 8002d7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002d96:	e0d1      	b.n	8002f3c <TrajectoryEvaluation+0xa9c>
 8002d98:	200003cc 	.word	0x200003cc
 8002d9c:	200003d0 	.word	0x200003d0
	}
	else if( t >= traject -> T[5] && t < traject -> T[6])
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8002da6:	4b68      	ldr	r3, [pc, #416]	; (8002f48 <TrajectoryEvaluation+0xaa8>)
 8002da8:	edd3 7a00 	vldr	s15, [r3]
 8002dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db4:	f200 80a8 	bhi.w	8002f08 <TrajectoryEvaluation+0xa68>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8002dbe:	4b62      	ldr	r3, [pc, #392]	; (8002f48 <TrajectoryEvaluation+0xaa8>)
 8002dc0:	edd3 7a00 	vldr	s15, [r3]
 8002dc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dcc:	f340 809c 	ble.w	8002f08 <TrajectoryEvaluation+0xa68>
	{
		traject -> QJ = traject -> A[6];
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[6]*t + traject -> B[6];
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002de0:	4b59      	ldr	r3, [pc, #356]	; (8002f48 <TrajectoryEvaluation+0xaa8>)
 8002de2:	edd3 7a00 	vldr	s15, [r3]
 8002de6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002e00:	4b51      	ldr	r3, [pc, #324]	; (8002f48 <TrajectoryEvaluation+0xaa8>)
 8002e02:	edd3 6a00 	vldr	s13, [r3]
 8002e06:	4b50      	ldr	r3, [pc, #320]	; (8002f48 <TrajectoryEvaluation+0xaa8>)
 8002e08:	edd3 7a00 	vldr	s15, [r3]
 8002e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002e22:	4b49      	ldr	r3, [pc, #292]	; (8002f48 <TrajectoryEvaluation+0xaa8>)
 8002e24:	edd3 7a00 	vldr	s15, [r3]
 8002e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[6]*(tP*tP)/2 + traject -> B[6]*tP + traject -> C[6];
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002e46:	4b41      	ldr	r3, [pc, #260]	; (8002f4c <TrajectoryEvaluation+0xaac>)
 8002e48:	edd3 6a00 	vldr	s13, [r3]
 8002e4c:	4b3f      	ldr	r3, [pc, #252]	; (8002f4c <TrajectoryEvaluation+0xaac>)
 8002e4e:	edd3 7a00 	vldr	s15, [r3]
 8002e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002e68:	4b38      	ldr	r3, [pc, #224]	; (8002f4c <TrajectoryEvaluation+0xaac>)
 8002e6a:	edd3 7a00 	vldr	s15, [r3]
 8002e6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002e92:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <TrajectoryEvaluation+0xaa8>)
 8002e94:	ed93 6a00 	vldr	s12, [r3]
 8002e98:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <TrajectoryEvaluation+0xaa8>)
 8002e9a:	edd3 7a00 	vldr	s15, [r3]
 8002e9e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ea2:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <TrajectoryEvaluation+0xaa8>)
 8002ea4:	edd3 7a00 	vldr	s15, [r3]
 8002ea8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002eac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002eb0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002eb4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002ec2:	4b21      	ldr	r3, [pc, #132]	; (8002f48 <TrajectoryEvaluation+0xaa8>)
 8002ec4:	ed93 6a00 	vldr	s12, [r3]
 8002ec8:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <TrajectoryEvaluation+0xaa8>)
 8002eca:	edd3 7a00 	vldr	s15, [r3]
 8002ece:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ed2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ed6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002eda:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ede:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8002ee8:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <TrajectoryEvaluation+0xaa8>)
 8002eea:	edd3 7a00 	vldr	s15, [r3]
 8002eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ef2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002f06:	e019      	b.n	8002f3c <TrajectoryEvaluation+0xa9c>
	}
	else
	{
		traject -> QJ = 0;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = 0;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		traject -> QV = 0;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		traject -> QVP = 0;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qfinal;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}

	return 1.0;
 8002f3c:	bf00      	nop
}
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f46:	bf00      	nop
 8002f48:	200003cc 	.word	0x200003cc
 8002f4c:	200003d0 	.word	0x200003d0

08002f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f56:	f002 f9a7 	bl	80052a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f5a:	f000 f897 	bl	800308c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f5e:	f000 fa7b 	bl	8003458 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f62:	f000 fa51 	bl	8003408 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002f66:	f000 fa23 	bl	80033b0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002f6a:	f000 f8f7 	bl	800315c <MX_I2C1_Init>
  MX_TIM11_Init();
 8002f6e:	f000 f9fb 	bl	8003368 <MX_TIM11_Init>
  MX_TIM1_Init();
 8002f72:	f000 f921 	bl	80031b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002f76:	f000 f9a3 	bl	80032c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_Init();
 8002f7a:	f000 fe03 	bl	8003b84 <Ringbuf_Init>
  KalmanMatrixInit(&KalmanVar);
 8002f7e:	4835      	ldr	r0, [pc, #212]	; (8003054 <main+0x104>)
 8002f80:	f7fd feea 	bl	8000d58 <KalmanMatrixInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002f84:	2100      	movs	r1, #0
 8002f86:	4834      	ldr	r0, [pc, #208]	; (8003058 <main+0x108>)
 8002f88:	f005 fe18 	bl	8008bbc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8002f8c:	4833      	ldr	r0, [pc, #204]	; (800305c <main+0x10c>)
 8002f8e:	f005 fd63 	bl	8008a58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002f92:	213c      	movs	r1, #60	; 0x3c
 8002f94:	4832      	ldr	r0, [pc, #200]	; (8003060 <main+0x110>)
 8002f96:	f005 ff67 	bl	8008e68 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 8002f9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b30      	ldr	r3, [pc, #192]	; (8003064 <main+0x114>)
 8002fa4:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 8002fa6:	4b2f      	ldr	r3, [pc, #188]	; (8003064 <main+0x114>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a2e      	ldr	r2, [pc, #184]	; (8003064 <main+0x114>)
 8002fac:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 8002fae:	4b2d      	ldr	r3, [pc, #180]	; (8003064 <main+0x114>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2d      	ldr	r2, [pc, #180]	; (8003068 <main+0x118>)
 8002fb4:	6013      	str	r3, [r2, #0]
  PIDAController_Init(&PidVelo);
 8002fb6:	482d      	ldr	r0, [pc, #180]	; (800306c <main+0x11c>)
 8002fb8:	f7fe f9da 	bl	8001370 <PIDAController_Init>
  PIDAController_Init(&PidPos);
 8002fbc:	482c      	ldr	r0, [pc, #176]	; (8003070 <main+0x120>)
 8002fbe:	f7fe f9d7 	bl	8001370 <PIDAController_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RobotstateManagement();
 8002fc2:	f001 fb2b 	bl	800461c <RobotstateManagement>
	  if(Micros() - ControlLoopTime >= 10000)
 8002fc6:	f000 fdc5 	bl	8003b54 <Micros>
 8002fca:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <main+0x124>)
 8002fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd0:	1a84      	subs	r4, r0, r2
 8002fd2:	eb61 0503 	sbc.w	r5, r1, r3
 8002fd6:	f242 7310 	movw	r3, #10000	; 0x2710
 8002fda:	429c      	cmp	r4, r3
 8002fdc:	f175 0300 	sbcs.w	r3, r5, #0
 8002fe0:	d3ef      	bcc.n	8002fc2 <main+0x72>
	  {
		ControlLoopTime  = Micros();
 8002fe2:	f000 fdb7 	bl	8003b54 <Micros>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4922      	ldr	r1, [pc, #136]	; (8003074 <main+0x124>)
 8002fec:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStartTime = Micros();
 8002ff0:	f000 fdb0 	bl	8003b54 <Micros>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	491f      	ldr	r1, [pc, #124]	; (8003078 <main+0x128>)
 8002ffa:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 8002ffe:	f000 fadf 	bl	80035c0 <EncoderRead>
		KalmanFilterFunction(&KalmanVar,PositionDeg[0]);
 8003002:	4b1e      	ldr	r3, [pc, #120]	; (800307c <main+0x12c>)
 8003004:	edd3 7a00 	vldr	s15, [r3]
 8003008:	eeb0 0a67 	vmov.f32	s0, s15
 800300c:	4811      	ldr	r0, [pc, #68]	; (8003054 <main+0x104>)
 800300e:	f7fe f881 	bl	8001114 <KalmanFilterFunction>
		Robot.Position = PositionDeg[0];
 8003012:	4b1a      	ldr	r3, [pc, #104]	; (800307c <main+0x12c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a1a      	ldr	r2, [pc, #104]	; (8003080 <main+0x130>)
 8003018:	6013      	str	r3, [r2, #0]
		Robot.Velocity = KalmanVar.MatState_Data[1];
 800301a:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <main+0x104>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	4a17      	ldr	r2, [pc, #92]	; (8003080 <main+0x130>)
 8003022:	6053      	str	r3, [r2, #4]
		ControllLoopAndErrorHandler();
 8003024:	f000 fbb4 	bl	8003790 <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 8003028:	f000 fd94 	bl	8003b54 <Micros>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4914      	ldr	r1, [pc, #80]	; (8003084 <main+0x134>)
 8003032:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <main+0x134>)
 8003038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800303c:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <main+0x128>)
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	ebb0 0802 	subs.w	r8, r0, r2
 8003046:	eb61 0903 	sbc.w	r9, r1, r3
 800304a:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <main+0x138>)
 800304c:	e9c3 8900 	strd	r8, r9, [r3]
	  RobotstateManagement();
 8003050:	e7b7      	b.n	8002fc2 <main+0x72>
 8003052:	bf00      	nop
 8003054:	20000020 	.word	0x20000020
 8003058:	20000428 	.word	0x20000428
 800305c:	200004b8 	.word	0x200004b8
 8003060:	20000470 	.word	0x20000470
 8003064:	200006a0 	.word	0x200006a0
 8003068:	200006ac 	.word	0x200006ac
 800306c:	200006c0 	.word	0x200006c0
 8003070:	200006f4 	.word	0x200006f4
 8003074:	20000820 	.word	0x20000820
 8003078:	20000800 	.word	0x20000800
 800307c:	200006b0 	.word	0x200006b0
 8003080:	20000604 	.word	0x20000604
 8003084:	20000808 	.word	0x20000808
 8003088:	20000810 	.word	0x20000810

0800308c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b094      	sub	sp, #80	; 0x50
 8003090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003092:	f107 0320 	add.w	r3, r7, #32
 8003096:	2230      	movs	r2, #48	; 0x30
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f008 f990 	bl	800b3c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030a0:	f107 030c 	add.w	r3, r7, #12
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030b0:	2300      	movs	r3, #0
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	4b27      	ldr	r3, [pc, #156]	; (8003154 <SystemClock_Config+0xc8>)
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	4a26      	ldr	r2, [pc, #152]	; (8003154 <SystemClock_Config+0xc8>)
 80030ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030be:	6413      	str	r3, [r2, #64]	; 0x40
 80030c0:	4b24      	ldr	r3, [pc, #144]	; (8003154 <SystemClock_Config+0xc8>)
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030cc:	2300      	movs	r3, #0
 80030ce:	607b      	str	r3, [r7, #4]
 80030d0:	4b21      	ldr	r3, [pc, #132]	; (8003158 <SystemClock_Config+0xcc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a20      	ldr	r2, [pc, #128]	; (8003158 <SystemClock_Config+0xcc>)
 80030d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	4b1e      	ldr	r3, [pc, #120]	; (8003158 <SystemClock_Config+0xcc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030e8:	2301      	movs	r3, #1
 80030ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030f2:	2302      	movs	r3, #2
 80030f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80030fc:	2304      	movs	r3, #4
 80030fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003100:	2364      	movs	r3, #100	; 0x64
 8003102:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003104:	2302      	movs	r3, #2
 8003106:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003108:	2304      	movs	r3, #4
 800310a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800310c:	f107 0320 	add.w	r3, r7, #32
 8003110:	4618      	mov	r0, r3
 8003112:	f004 ffb9 	bl	8008088 <HAL_RCC_OscConfig>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800311c:	f001 fe01 	bl	8004d22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003120:	230f      	movs	r3, #15
 8003122:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003124:	2302      	movs	r3, #2
 8003126:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800312c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003130:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003136:	f107 030c 	add.w	r3, r7, #12
 800313a:	2103      	movs	r1, #3
 800313c:	4618      	mov	r0, r3
 800313e:	f005 fa1b 	bl	8008578 <HAL_RCC_ClockConfig>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003148:	f001 fdeb 	bl	8004d22 <Error_Handler>
  }
}
 800314c:	bf00      	nop
 800314e:	3750      	adds	r7, #80	; 0x50
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40023800 	.word	0x40023800
 8003158:	40007000 	.word	0x40007000

0800315c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003160:	4b12      	ldr	r3, [pc, #72]	; (80031ac <MX_I2C1_Init+0x50>)
 8003162:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <MX_I2C1_Init+0x54>)
 8003164:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003166:	4b11      	ldr	r3, [pc, #68]	; (80031ac <MX_I2C1_Init+0x50>)
 8003168:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <MX_I2C1_Init+0x58>)
 800316a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <MX_I2C1_Init+0x50>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <MX_I2C1_Init+0x50>)
 8003174:	2200      	movs	r2, #0
 8003176:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <MX_I2C1_Init+0x50>)
 800317a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800317e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003180:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <MX_I2C1_Init+0x50>)
 8003182:	2200      	movs	r2, #0
 8003184:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <MX_I2C1_Init+0x50>)
 8003188:	2200      	movs	r2, #0
 800318a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800318c:	4b07      	ldr	r3, [pc, #28]	; (80031ac <MX_I2C1_Init+0x50>)
 800318e:	2200      	movs	r2, #0
 8003190:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <MX_I2C1_Init+0x50>)
 8003194:	2200      	movs	r2, #0
 8003196:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003198:	4804      	ldr	r0, [pc, #16]	; (80031ac <MX_I2C1_Init+0x50>)
 800319a:	f003 f801 	bl	80061a0 <HAL_I2C_Init>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80031a4:	f001 fdbd 	bl	8004d22 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	200003d4 	.word	0x200003d4
 80031b0:	40005400 	.word	0x40005400
 80031b4:	00061a80 	.word	0x00061a80

080031b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b092      	sub	sp, #72	; 0x48
 80031bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]
 80031d8:	615a      	str	r2, [r3, #20]
 80031da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031dc:	1d3b      	adds	r3, r7, #4
 80031de:	2220      	movs	r2, #32
 80031e0:	2100      	movs	r1, #0
 80031e2:	4618      	mov	r0, r3
 80031e4:	f008 f8ec 	bl	800b3c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031e8:	4b33      	ldr	r3, [pc, #204]	; (80032b8 <MX_TIM1_Init+0x100>)
 80031ea:	4a34      	ldr	r2, [pc, #208]	; (80032bc <MX_TIM1_Init+0x104>)
 80031ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80031ee:	4b32      	ldr	r3, [pc, #200]	; (80032b8 <MX_TIM1_Init+0x100>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031f4:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <MX_TIM1_Init+0x100>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80031fa:	4b2f      	ldr	r3, [pc, #188]	; (80032b8 <MX_TIM1_Init+0x100>)
 80031fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8003200:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003202:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <MX_TIM1_Init+0x100>)
 8003204:	2200      	movs	r2, #0
 8003206:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003208:	4b2b      	ldr	r3, [pc, #172]	; (80032b8 <MX_TIM1_Init+0x100>)
 800320a:	2200      	movs	r2, #0
 800320c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800320e:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <MX_TIM1_Init+0x100>)
 8003210:	2200      	movs	r2, #0
 8003212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003214:	4828      	ldr	r0, [pc, #160]	; (80032b8 <MX_TIM1_Init+0x100>)
 8003216:	f005 fc81 	bl	8008b1c <HAL_TIM_PWM_Init>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003220:	f001 fd7f 	bl	8004d22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003224:	2300      	movs	r3, #0
 8003226:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003228:	2300      	movs	r3, #0
 800322a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800322c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003230:	4619      	mov	r1, r3
 8003232:	4821      	ldr	r0, [pc, #132]	; (80032b8 <MX_TIM1_Init+0x100>)
 8003234:	f006 faca 	bl	80097cc <HAL_TIMEx_MasterConfigSynchronization>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800323e:	f001 fd70 	bl	8004d22 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003242:	2360      	movs	r3, #96	; 0x60
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800324a:	2300      	movs	r3, #0
 800324c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800324e:	2300      	movs	r3, #0
 8003250:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003252:	2300      	movs	r3, #0
 8003254:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800325a:	2300      	movs	r3, #0
 800325c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800325e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003262:	2200      	movs	r2, #0
 8003264:	4619      	mov	r1, r3
 8003266:	4814      	ldr	r0, [pc, #80]	; (80032b8 <MX_TIM1_Init+0x100>)
 8003268:	f005 ff94 	bl	8009194 <HAL_TIM_PWM_ConfigChannel>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8003272:	f001 fd56 	bl	8004d22 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800328a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800328e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003290:	2300      	movs	r3, #0
 8003292:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003294:	1d3b      	adds	r3, r7, #4
 8003296:	4619      	mov	r1, r3
 8003298:	4807      	ldr	r0, [pc, #28]	; (80032b8 <MX_TIM1_Init+0x100>)
 800329a:	f006 fb05 	bl	80098a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80032a4:	f001 fd3d 	bl	8004d22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80032a8:	4803      	ldr	r0, [pc, #12]	; (80032b8 <MX_TIM1_Init+0x100>)
 80032aa:	f001 fe55 	bl	8004f58 <HAL_TIM_MspPostInit>

}
 80032ae:	bf00      	nop
 80032b0:	3748      	adds	r7, #72	; 0x48
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000428 	.word	0x20000428
 80032bc:	40010000 	.word	0x40010000

080032c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08c      	sub	sp, #48	; 0x30
 80032c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032c6:	f107 030c 	add.w	r3, r7, #12
 80032ca:	2224      	movs	r2, #36	; 0x24
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f008 f876 	bl	800b3c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d4:	1d3b      	adds	r3, r7, #4
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032dc:	4b21      	ldr	r3, [pc, #132]	; (8003364 <MX_TIM2_Init+0xa4>)
 80032de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80032e4:	4b1f      	ldr	r3, [pc, #124]	; (8003364 <MX_TIM2_Init+0xa4>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ea:	4b1e      	ldr	r3, [pc, #120]	; (8003364 <MX_TIM2_Init+0xa4>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 80032f0:	4b1c      	ldr	r3, [pc, #112]	; (8003364 <MX_TIM2_Init+0xa4>)
 80032f2:	f642 62df 	movw	r2, #11999	; 0x2edf
 80032f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032f8:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <MX_TIM2_Init+0xa4>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032fe:	4b19      	ldr	r3, [pc, #100]	; (8003364 <MX_TIM2_Init+0xa4>)
 8003300:	2200      	movs	r2, #0
 8003302:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003304:	2303      	movs	r3, #3
 8003306:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800330c:	2301      	movs	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003310:	2300      	movs	r3, #0
 8003312:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003318:	2300      	movs	r3, #0
 800331a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800331c:	2301      	movs	r3, #1
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003320:	2300      	movs	r3, #0
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003328:	f107 030c 	add.w	r3, r7, #12
 800332c:	4619      	mov	r1, r3
 800332e:	480d      	ldr	r0, [pc, #52]	; (8003364 <MX_TIM2_Init+0xa4>)
 8003330:	f005 fcf4 	bl	8008d1c <HAL_TIM_Encoder_Init>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800333a:	f001 fcf2 	bl	8004d22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800333e:	2300      	movs	r3, #0
 8003340:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003342:	2300      	movs	r3, #0
 8003344:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003346:	1d3b      	adds	r3, r7, #4
 8003348:	4619      	mov	r1, r3
 800334a:	4806      	ldr	r0, [pc, #24]	; (8003364 <MX_TIM2_Init+0xa4>)
 800334c:	f006 fa3e 	bl	80097cc <HAL_TIMEx_MasterConfigSynchronization>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003356:	f001 fce4 	bl	8004d22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800335a:	bf00      	nop
 800335c:	3730      	adds	r7, #48	; 0x30
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000470 	.word	0x20000470

08003368 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800336c:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <MX_TIM11_Init+0x40>)
 800336e:	4a0f      	ldr	r2, [pc, #60]	; (80033ac <MX_TIM11_Init+0x44>)
 8003370:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <MX_TIM11_Init+0x40>)
 8003374:	2263      	movs	r2, #99	; 0x63
 8003376:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <MX_TIM11_Init+0x40>)
 800337a:	2200      	movs	r2, #0
 800337c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <MX_TIM11_Init+0x40>)
 8003380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003384:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <MX_TIM11_Init+0x40>)
 8003388:	2200      	movs	r2, #0
 800338a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <MX_TIM11_Init+0x40>)
 800338e:	2200      	movs	r2, #0
 8003390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003392:	4805      	ldr	r0, [pc, #20]	; (80033a8 <MX_TIM11_Init+0x40>)
 8003394:	f005 fb10 	bl	80089b8 <HAL_TIM_Base_Init>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800339e:	f001 fcc0 	bl	8004d22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	200004b8 	.word	0x200004b8
 80033ac:	40014800 	.word	0x40014800

080033b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033b4:	4b12      	ldr	r3, [pc, #72]	; (8003400 <MX_USART2_UART_Init+0x50>)
 80033b6:	4a13      	ldr	r2, [pc, #76]	; (8003404 <MX_USART2_UART_Init+0x54>)
 80033b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80033ba:	4b11      	ldr	r3, [pc, #68]	; (8003400 <MX_USART2_UART_Init+0x50>)
 80033bc:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80033c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80033c2:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <MX_USART2_UART_Init+0x50>)
 80033c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033c8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033ca:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <MX_USART2_UART_Init+0x50>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <MX_USART2_UART_Init+0x50>)
 80033d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033d8:	4b09      	ldr	r3, [pc, #36]	; (8003400 <MX_USART2_UART_Init+0x50>)
 80033da:	220c      	movs	r2, #12
 80033dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033de:	4b08      	ldr	r3, [pc, #32]	; (8003400 <MX_USART2_UART_Init+0x50>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033e4:	4b06      	ldr	r3, [pc, #24]	; (8003400 <MX_USART2_UART_Init+0x50>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033ea:	4805      	ldr	r0, [pc, #20]	; (8003400 <MX_USART2_UART_Init+0x50>)
 80033ec:	f006 fac2 	bl	8009974 <HAL_UART_Init>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80033f6:	f001 fc94 	bl	8004d22 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000500 	.word	0x20000500
 8003404:	40004400 	.word	0x40004400

08003408 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	607b      	str	r3, [r7, #4]
 8003412:	4b10      	ldr	r3, [pc, #64]	; (8003454 <MX_DMA_Init+0x4c>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a0f      	ldr	r2, [pc, #60]	; (8003454 <MX_DMA_Init+0x4c>)
 8003418:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <MX_DMA_Init+0x4c>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800342a:	2200      	movs	r2, #0
 800342c:	2100      	movs	r1, #0
 800342e:	2010      	movs	r0, #16
 8003430:	f002 f887 	bl	8005542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003434:	2010      	movs	r0, #16
 8003436:	f002 f8a0 	bl	800557a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800343a:	2200      	movs	r2, #0
 800343c:	2100      	movs	r1, #0
 800343e:	2011      	movs	r0, #17
 8003440:	f002 f87f 	bl	8005542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003444:	2011      	movs	r0, #17
 8003446:	f002 f898 	bl	800557a <HAL_NVIC_EnableIRQ>

}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800

08003458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345e:	f107 0314 	add.w	r3, r7, #20
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	609a      	str	r2, [r3, #8]
 800346a:	60da      	str	r2, [r3, #12]
 800346c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	4b4e      	ldr	r3, [pc, #312]	; (80035ac <MX_GPIO_Init+0x154>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	4a4d      	ldr	r2, [pc, #308]	; (80035ac <MX_GPIO_Init+0x154>)
 8003478:	f043 0304 	orr.w	r3, r3, #4
 800347c:	6313      	str	r3, [r2, #48]	; 0x30
 800347e:	4b4b      	ldr	r3, [pc, #300]	; (80035ac <MX_GPIO_Init+0x154>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	4b47      	ldr	r3, [pc, #284]	; (80035ac <MX_GPIO_Init+0x154>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	4a46      	ldr	r2, [pc, #280]	; (80035ac <MX_GPIO_Init+0x154>)
 8003494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003498:	6313      	str	r3, [r2, #48]	; 0x30
 800349a:	4b44      	ldr	r3, [pc, #272]	; (80035ac <MX_GPIO_Init+0x154>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	4b40      	ldr	r3, [pc, #256]	; (80035ac <MX_GPIO_Init+0x154>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a3f      	ldr	r2, [pc, #252]	; (80035ac <MX_GPIO_Init+0x154>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b3d      	ldr	r3, [pc, #244]	; (80035ac <MX_GPIO_Init+0x154>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	607b      	str	r3, [r7, #4]
 80034c6:	4b39      	ldr	r3, [pc, #228]	; (80035ac <MX_GPIO_Init+0x154>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	4a38      	ldr	r2, [pc, #224]	; (80035ac <MX_GPIO_Init+0x154>)
 80034cc:	f043 0302 	orr.w	r3, r3, #2
 80034d0:	6313      	str	r3, [r2, #48]	; 0x30
 80034d2:	4b36      	ldr	r3, [pc, #216]	; (80035ac <MX_GPIO_Init+0x154>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	607b      	str	r3, [r7, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 80034de:	2200      	movs	r2, #0
 80034e0:	f44f 7108 	mov.w	r1, #544	; 0x220
 80034e4:	4832      	ldr	r0, [pc, #200]	; (80035b0 <MX_GPIO_Init+0x158>)
 80034e6:	f002 fe0f 	bl	8006108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin, GPIO_PIN_RESET);
 80034ea:	2200      	movs	r2, #0
 80034ec:	f44f 6183 	mov.w	r1, #1048	; 0x418
 80034f0:	4830      	ldr	r0, [pc, #192]	; (80035b4 <MX_GPIO_Init+0x15c>)
 80034f2:	f002 fe09 	bl	8006108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80034f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003506:	f107 0314 	add.w	r3, r7, #20
 800350a:	4619      	mov	r1, r3
 800350c:	482a      	ldr	r0, [pc, #168]	; (80035b8 <MX_GPIO_Init+0x160>)
 800350e:	f002 fc5f 	bl	8005dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 8003512:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003518:	2301      	movs	r3, #1
 800351a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	2300      	movs	r3, #0
 800351e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003520:	2300      	movs	r3, #0
 8003522:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003524:	f107 0314 	add.w	r3, r7, #20
 8003528:	4619      	mov	r1, r3
 800352a:	4821      	ldr	r0, [pc, #132]	; (80035b0 <MX_GPIO_Init+0x158>)
 800352c:	f002 fc50 	bl	8005dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_RedLamp_Pin Pin_YelLamp_Pin Pin_BlueLamp_Pin */
  GPIO_InitStruct.Pin = Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin;
 8003530:	f44f 6383 	mov.w	r3, #1048	; 0x418
 8003534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003536:	2301      	movs	r3, #1
 8003538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353e:	2300      	movs	r3, #0
 8003540:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003542:	f107 0314 	add.w	r3, r7, #20
 8003546:	4619      	mov	r1, r3
 8003548:	481a      	ldr	r0, [pc, #104]	; (80035b4 <MX_GPIO_Init+0x15c>)
 800354a:	f002 fc41 	bl	8005dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Proxi_Pin */
  GPIO_InitStruct.Pin = Pin_Proxi_Pin;
 800354e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003554:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Proxi_GPIO_Port, &GPIO_InitStruct);
 800355e:	f107 0314 	add.w	r3, r7, #20
 8003562:	4619      	mov	r1, r3
 8003564:	4812      	ldr	r0, [pc, #72]	; (80035b0 <MX_GPIO_Init+0x158>)
 8003566:	f002 fc33 	bl	8005dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Emer_Pin */
  GPIO_InitStruct.Pin = Pin_Emer_Pin;
 800356a:	2320      	movs	r3, #32
 800356c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800356e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	2300      	movs	r3, #0
 8003576:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Emer_GPIO_Port, &GPIO_InitStruct);
 8003578:	f107 0314 	add.w	r3, r7, #20
 800357c:	4619      	mov	r1, r3
 800357e:	480d      	ldr	r0, [pc, #52]	; (80035b4 <MX_GPIO_Init+0x15c>)
 8003580:	f002 fc26 	bl	8005dd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003584:	2200      	movs	r2, #0
 8003586:	2100      	movs	r1, #0
 8003588:	2017      	movs	r0, #23
 800358a:	f001 ffda 	bl	8005542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800358e:	2017      	movs	r0, #23
 8003590:	f001 fff3 	bl	800557a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003594:	2200      	movs	r2, #0
 8003596:	2100      	movs	r1, #0
 8003598:	2028      	movs	r0, #40	; 0x28
 800359a:	f001 ffd2 	bl	8005542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800359e:	2028      	movs	r0, #40	; 0x28
 80035a0:	f001 ffeb 	bl	800557a <HAL_NVIC_EnableIRQ>

}
 80035a4:	bf00      	nop
 80035a6:	3728      	adds	r7, #40	; 0x28
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40020000 	.word	0x40020000
 80035b4:	40020400 	.word	0x40020400
 80035b8:	40020800 	.word	0x40020800
 80035bc:	00000000 	.word	0x00000000

080035c0 <EncoderRead>:

/* USER CODE BEGIN 4 */
void EncoderRead()
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 80035c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	461a      	mov	r2, r3
 80035cc:	4b32      	ldr	r3, [pc, #200]	; (8003698 <EncoderRead+0xd8>)
 80035ce:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 80035d0:	4b31      	ldr	r3, [pc, #196]	; (8003698 <EncoderRead+0xd8>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4b30      	ldr	r3, [pc, #192]	; (8003698 <EncoderRead+0xd8>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	1ad2      	subs	r2, r2, r3
 80035da:	4b30      	ldr	r3, [pc, #192]	; (800369c <EncoderRead+0xdc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	425b      	negs	r3, r3
 80035e0:	429a      	cmp	r2, r3
 80035e2:	da07      	bge.n	80035f4 <EncoderRead+0x34>
		WrappingStep+=12000;
 80035e4:	4b2e      	ldr	r3, [pc, #184]	; (80036a0 <EncoderRead+0xe0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80035ec:	3320      	adds	r3, #32
 80035ee:	4a2c      	ldr	r2, [pc, #176]	; (80036a0 <EncoderRead+0xe0>)
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e00f      	b.n	8003614 <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 80035f4:	4b28      	ldr	r3, [pc, #160]	; (8003698 <EncoderRead+0xd8>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b27      	ldr	r3, [pc, #156]	; (8003698 <EncoderRead+0xd8>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	1ad2      	subs	r2, r2, r3
 80035fe:	4b27      	ldr	r3, [pc, #156]	; (800369c <EncoderRead+0xdc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	db06      	blt.n	8003614 <EncoderRead+0x54>
		WrappingStep-=12000;
 8003606:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <EncoderRead+0xe0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 800360e:	3b20      	subs	r3, #32
 8003610:	4a23      	ldr	r2, [pc, #140]	; (80036a0 <EncoderRead+0xe0>)
 8003612:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 8003614:	4b20      	ldr	r3, [pc, #128]	; (8003698 <EncoderRead+0xd8>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <EncoderRead+0xe0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4413      	add	r3, r2
 800361e:	4a21      	ldr	r2, [pc, #132]	; (80036a4 <EncoderRead+0xe4>)
 8003620:	6013      	str	r3, [r2, #0]
	PositionDeg[0] = (PositionRaw/12000.0)*360.0;
 8003622:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <EncoderRead+0xe4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fc ff28 	bl	800047c <__aeabi_i2d>
 800362c:	a318      	add	r3, pc, #96	; (adr r3, 8003690 <EncoderRead+0xd0>)
 800362e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003632:	f7fd f8b7 	bl	80007a4 <__aeabi_ddiv>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <EncoderRead+0xe8>)
 8003644:	f7fc ff84 	bl	8000550 <__aeabi_dmul>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4610      	mov	r0, r2
 800364e:	4619      	mov	r1, r3
 8003650:	f7fd f9b0 	bl	80009b4 <__aeabi_d2f>
 8003654:	4603      	mov	r3, r0
 8003656:	4a15      	ldr	r2, [pc, #84]	; (80036ac <EncoderRead+0xec>)
 8003658:	6013      	str	r3, [r2, #0]
	VelocityDeg = ((PositionDeg[0] - PositionDeg[1])/dt);
 800365a:	4b14      	ldr	r3, [pc, #80]	; (80036ac <EncoderRead+0xec>)
 800365c:	ed93 7a00 	vldr	s14, [r3]
 8003660:	4b12      	ldr	r3, [pc, #72]	; (80036ac <EncoderRead+0xec>)
 8003662:	edd3 7a01 	vldr	s15, [r3, #4]
 8003666:	ee37 7a67 	vsub.f32	s14, s14, s15
 800366a:	eddf 6a11 	vldr	s13, [pc, #68]	; 80036b0 <EncoderRead+0xf0>
 800366e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <EncoderRead+0xf4>)
 8003674:	edc3 7a00 	vstr	s15, [r3]
	EncoderRawData[1] = EncoderRawData[0];
 8003678:	4b07      	ldr	r3, [pc, #28]	; (8003698 <EncoderRead+0xd8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a06      	ldr	r2, [pc, #24]	; (8003698 <EncoderRead+0xd8>)
 800367e:	6053      	str	r3, [r2, #4]
	PositionDeg[1] = PositionDeg[0];
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <EncoderRead+0xec>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a09      	ldr	r2, [pc, #36]	; (80036ac <EncoderRead+0xec>)
 8003686:	6053      	str	r3, [r2, #4]
}
 8003688:	bf00      	nop
 800368a:	bd80      	pop	{r7, pc}
 800368c:	f3af 8000 	nop.w
 8003690:	00000000 	.word	0x00000000
 8003694:	40c77000 	.word	0x40c77000
 8003698:	200006a0 	.word	0x200006a0
 800369c:	200003a0 	.word	0x200003a0
 80036a0:	200006a8 	.word	0x200006a8
 80036a4:	200006ac 	.word	0x200006ac
 80036a8:	40768000 	.word	0x40768000
 80036ac:	200006b0 	.word	0x200006b0
 80036b0:	3c23d70a 	.word	0x3c23d70a
 80036b4:	200006b8 	.word	0x200006b8

080036b8 <Int32Abs>:

uint32_t Int32Abs(int32_t PWM)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	if(PWM<0){
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	da02      	bge.n	80036cc <Int32Abs+0x14>
		return PWM*-1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	425b      	negs	r3, r3
 80036ca:	e000      	b.n	80036ce <Int32Abs+0x16>
	}else{
		return PWM;
 80036cc:	687b      	ldr	r3, [r7, #4]
	}
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <Drivemotor>:


void Drivemotor(int32_t PWM){
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
		if(PWM<=0 && PWM>=-PWM_MAX){
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	dc11      	bgt.n	800370e <Drivemotor+0x32>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a25      	ldr	r2, [pc, #148]	; (8003784 <Drivemotor+0xa8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	db0d      	blt.n	800370e <Drivemotor+0x32>
			htim1.Instance->CCR1=Int32Abs(PWM);
 80036f2:	4b25      	ldr	r3, [pc, #148]	; (8003788 <Drivemotor+0xac>)
 80036f4:	681c      	ldr	r4, [r3, #0]
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff ffde 	bl	80036b8 <Int32Abs>
 80036fc:	4603      	mov	r3, r0
 80036fe:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8003700:	2200      	movs	r2, #0
 8003702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003706:	4821      	ldr	r0, [pc, #132]	; (800378c <Drivemotor+0xb0>)
 8003708:	f002 fcfe 	bl	8006108 <HAL_GPIO_WritePin>
 800370c:	e036      	b.n	800377c <Drivemotor+0xa0>
		}else if (PWM<-PWM_MAX){
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1c      	ldr	r2, [pc, #112]	; (8003784 <Drivemotor+0xa8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	da0b      	bge.n	800372e <Drivemotor+0x52>
			htim1.Instance->CCR1=PWM_MAX;
 8003716:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <Drivemotor+0xac>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f242 7210 	movw	r2, #10000	; 0x2710
 800371e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8003720:	2200      	movs	r2, #0
 8003722:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003726:	4819      	ldr	r0, [pc, #100]	; (800378c <Drivemotor+0xb0>)
 8003728:	f002 fcee 	bl	8006108 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}else if(PWM>PWM_MAX){
			htim1.Instance->CCR1=PWM_MAX;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}
}
 800372c:	e026      	b.n	800377c <Drivemotor+0xa0>
		}else if(PWM>=0 && PWM<=PWM_MAX){
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	db12      	blt.n	800375a <Drivemotor+0x7e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f242 7210 	movw	r2, #10000	; 0x2710
 800373a:	4293      	cmp	r3, r2
 800373c:	dc0d      	bgt.n	800375a <Drivemotor+0x7e>
			htim1.Instance->CCR1=Int32Abs(PWM);
 800373e:	4b12      	ldr	r3, [pc, #72]	; (8003788 <Drivemotor+0xac>)
 8003740:	681c      	ldr	r4, [r3, #0]
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff ffb8 	bl	80036b8 <Int32Abs>
 8003748:	4603      	mov	r3, r0
 800374a:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 800374c:	2201      	movs	r2, #1
 800374e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003752:	480e      	ldr	r0, [pc, #56]	; (800378c <Drivemotor+0xb0>)
 8003754:	f002 fcd8 	bl	8006108 <HAL_GPIO_WritePin>
 8003758:	e010      	b.n	800377c <Drivemotor+0xa0>
		}else if(PWM>PWM_MAX){
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003760:	4293      	cmp	r3, r2
 8003762:	dd0b      	ble.n	800377c <Drivemotor+0xa0>
			htim1.Instance->CCR1=PWM_MAX;
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <Drivemotor+0xac>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f242 7210 	movw	r2, #10000	; 0x2710
 800376c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 800376e:	2201      	movs	r2, #1
 8003770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003774:	4805      	ldr	r0, [pc, #20]	; (800378c <Drivemotor+0xb0>)
 8003776:	f002 fcc7 	bl	8006108 <HAL_GPIO_WritePin>
}
 800377a:	e7ff      	b.n	800377c <Drivemotor+0xa0>
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	bd90      	pop	{r4, r7, pc}
 8003784:	ffffd8f0 	.word	0xffffd8f0
 8003788:	20000428 	.word	0x20000428
 800378c:	40020000 	.word	0x40020000

08003790 <ControllLoopAndErrorHandler>:


void ControllLoopAndErrorHandler()
{
 8003790:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af04      	add	r7, sp, #16
//	}
//	PIDAVelocityController_Update(&PidVelo, setpoint, KalmanVar.MatState_Data[1]);
//	invTFOutput = InverseTFofMotor(setpointLast,setpoint);
//	PWMCHECKER = PidVelo.ControllerOut + invTFOutput;
//	Drivemotor(PWMCHECKER);
	if (Robot.flagStartTime == 1)
 8003798:	4b87      	ldr	r3, [pc, #540]	; (80039b8 <ControllLoopAndErrorHandler+0x228>)
 800379a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d10a      	bne.n	80037b8 <ControllLoopAndErrorHandler+0x28>
	{
		StartTime = Micros();
 80037a2:	f000 f9d7 	bl	8003b54 <Micros>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4984      	ldr	r1, [pc, #528]	; (80039bc <ControllLoopAndErrorHandler+0x22c>)
 80037ac:	e9c1 2300 	strd	r2, r3, [r1]
		Robot.flagStartTime = 0;
 80037b0:	4b81      	ldr	r3, [pc, #516]	; (80039b8 <ControllLoopAndErrorHandler+0x228>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}
	CurrentTime = Micros();
 80037b8:	f000 f9cc 	bl	8003b54 <Micros>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	497f      	ldr	r1, [pc, #508]	; (80039c0 <ControllLoopAndErrorHandler+0x230>)
 80037c2:	e9c1 2300 	strd	r2, r3, [r1]
	PredictTime = CurrentTime + 10000;
 80037c6:	4b7e      	ldr	r3, [pc, #504]	; (80039c0 <ControllLoopAndErrorHandler+0x230>)
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	f242 7110 	movw	r1, #10000	; 0x2710
 80037d0:	eb12 0801 	adds.w	r8, r2, r1
 80037d4:	f143 0900 	adc.w	r9, r3, #0
 80037d8:	4b7a      	ldr	r3, [pc, #488]	; (80039c4 <ControllLoopAndErrorHandler+0x234>)
 80037da:	e9c3 8900 	strd	r8, r9, [r3]
	TrajectoryEvaluation(&traject,StartTime,CurrentTime,PredictTime);
 80037de:	4b77      	ldr	r3, [pc, #476]	; (80039bc <ControllLoopAndErrorHandler+0x22c>)
 80037e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80037e4:	4b76      	ldr	r3, [pc, #472]	; (80039c0 <ControllLoopAndErrorHandler+0x230>)
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	4976      	ldr	r1, [pc, #472]	; (80039c4 <ControllLoopAndErrorHandler+0x234>)
 80037ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037f4:	e9cd 2300 	strd	r2, r3, [sp]
 80037f8:	4642      	mov	r2, r8
 80037fa:	464b      	mov	r3, r9
 80037fc:	4872      	ldr	r0, [pc, #456]	; (80039c8 <ControllLoopAndErrorHandler+0x238>)
 80037fe:	f7fe fe4f 	bl	80024a0 <TrajectoryEvaluation>
	if(Robot.MotorIsOn == 1)
 8003802:	4b6d      	ldr	r3, [pc, #436]	; (80039b8 <ControllLoopAndErrorHandler+0x228>)
 8003804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003808:	2b01      	cmp	r3, #1
 800380a:	f040 80c3 	bne.w	8003994 <ControllLoopAndErrorHandler+0x204>
	{
		if (Robot.flagStartTime == 1)
 800380e:	4b6a      	ldr	r3, [pc, #424]	; (80039b8 <ControllLoopAndErrorHandler+0x228>)
 8003810:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003814:	2b01      	cmp	r3, #1
 8003816:	d10a      	bne.n	800382e <ControllLoopAndErrorHandler+0x9e>
		{
			StartTime = Micros();
 8003818:	f000 f99c 	bl	8003b54 <Micros>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4966      	ldr	r1, [pc, #408]	; (80039bc <ControllLoopAndErrorHandler+0x22c>)
 8003822:	e9c1 2300 	strd	r2, r3, [r1]
			Robot.flagStartTime = 0;
 8003826:	4b64      	ldr	r3, [pc, #400]	; (80039b8 <ControllLoopAndErrorHandler+0x228>)
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}
		CurrentTime = Micros();
 800382e:	f000 f991 	bl	8003b54 <Micros>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4962      	ldr	r1, [pc, #392]	; (80039c0 <ControllLoopAndErrorHandler+0x230>)
 8003838:	e9c1 2300 	strd	r2, r3, [r1]
		PredictTime = CurrentTime + 10000;
 800383c:	4b60      	ldr	r3, [pc, #384]	; (80039c0 <ControllLoopAndErrorHandler+0x230>)
 800383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003842:	f242 7110 	movw	r1, #10000	; 0x2710
 8003846:	1854      	adds	r4, r2, r1
 8003848:	f143 0500 	adc.w	r5, r3, #0
 800384c:	4b5d      	ldr	r3, [pc, #372]	; (80039c4 <ControllLoopAndErrorHandler+0x234>)
 800384e:	e9c3 4500 	strd	r4, r5, [r3]
		TrajectoryEvaluation(&traject,StartTime,CurrentTime,PredictTime);
 8003852:	4b5a      	ldr	r3, [pc, #360]	; (80039bc <ControllLoopAndErrorHandler+0x22c>)
 8003854:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003858:	4b59      	ldr	r3, [pc, #356]	; (80039c0 <ControllLoopAndErrorHandler+0x230>)
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	4959      	ldr	r1, [pc, #356]	; (80039c4 <ControllLoopAndErrorHandler+0x234>)
 8003860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003868:	e9cd 2300 	strd	r2, r3, [sp]
 800386c:	4622      	mov	r2, r4
 800386e:	462b      	mov	r3, r5
 8003870:	4855      	ldr	r0, [pc, #340]	; (80039c8 <ControllLoopAndErrorHandler+0x238>)
 8003872:	f7fe fe15 	bl	80024a0 <TrajectoryEvaluation>
		Robot.QX = traject.QX;
 8003876:	4b54      	ldr	r3, [pc, #336]	; (80039c8 <ControllLoopAndErrorHandler+0x238>)
 8003878:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800387c:	4a4e      	ldr	r2, [pc, #312]	; (80039b8 <ControllLoopAndErrorHandler+0x228>)
 800387e:	6193      	str	r3, [r2, #24]
		Robot.QV = traject.QV;
 8003880:	4b51      	ldr	r3, [pc, #324]	; (80039c8 <ControllLoopAndErrorHandler+0x238>)
 8003882:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003886:	4a4c      	ldr	r2, [pc, #304]	; (80039b8 <ControllLoopAndErrorHandler+0x228>)
 8003888:	61d3      	str	r3, [r2, #28]
		if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0)
 800388a:	4b4b      	ldr	r3, [pc, #300]	; (80039b8 <ControllLoopAndErrorHandler+0x228>)
 800388c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003890:	4b49      	ldr	r3, [pc, #292]	; (80039b8 <ControllLoopAndErrorHandler+0x228>)
 8003892:	edd3 7a00 	vldr	s15, [r3]
 8003896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800389a:	eeb0 0a67 	vmov.f32	s0, s15
 800389e:	f7fd ff88 	bl	80017b2 <AbsVal>
 80038a2:	eef0 7a40 	vmov.f32	s15, s0
 80038a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80038aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b2:	d52a      	bpl.n	800390a <ControllLoopAndErrorHandler+0x17a>
 80038b4:	4b40      	ldr	r3, [pc, #256]	; (80039b8 <ControllLoopAndErrorHandler+0x228>)
 80038b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80038ba:	eeb0 0a67 	vmov.f32	s0, s15
 80038be:	f7fd ff78 	bl	80017b2 <AbsVal>
 80038c2:	eef0 7a40 	vmov.f32	s15, s0
 80038c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d2:	d51a      	bpl.n	800390a <ControllLoopAndErrorHandler+0x17a>
		{
			PWMCHECKER = 0.0;
 80038d4:	4b3d      	ldr	r3, [pc, #244]	; (80039cc <ControllLoopAndErrorHandler+0x23c>)
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
			Drivemotor(PWMCHECKER);
 80038dc:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <ControllLoopAndErrorHandler+0x23c>)
 80038de:	edd3 7a00 	vldr	s15, [r3]
 80038e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038e6:	ee17 0a90 	vmov	r0, s15
 80038ea:	f7ff fef7 	bl	80036dc <Drivemotor>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80038ee:	2200      	movs	r2, #0
 80038f0:	2108      	movs	r1, #8
 80038f2:	4837      	ldr	r0, [pc, #220]	; (80039d0 <ControllLoopAndErrorHandler+0x240>)
 80038f4:	f002 fc08 	bl	8006108 <HAL_GPIO_WritePin>
			Robot.RunningFlag = 0;
 80038f8:	4b2f      	ldr	r3, [pc, #188]	; (80039b8 <ControllLoopAndErrorHandler+0x228>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			Robot.MotorIsOn = 0;
 8003900:	4b2d      	ldr	r3, [pc, #180]	; (80039b8 <ControllLoopAndErrorHandler+0x228>)
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2020 	strb.w	r2, [r3, #32]
	else
	{
		PWMCHECKER = 0.0;
		Drivemotor(PWMCHECKER);
	}
}
 8003908:	e051      	b.n	80039ae <ControllLoopAndErrorHandler+0x21e>
			PIDAPositonController_Update(&PidPos, Robot.QX , Robot.Position);
 800390a:	4b2b      	ldr	r3, [pc, #172]	; (80039b8 <ControllLoopAndErrorHandler+0x228>)
 800390c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003910:	4b29      	ldr	r3, [pc, #164]	; (80039b8 <ControllLoopAndErrorHandler+0x228>)
 8003912:	ed93 7a00 	vldr	s14, [r3]
 8003916:	eef0 0a47 	vmov.f32	s1, s14
 800391a:	eeb0 0a67 	vmov.f32	s0, s15
 800391e:	482d      	ldr	r0, [pc, #180]	; (80039d4 <ControllLoopAndErrorHandler+0x244>)
 8003920:	f7fd fe34 	bl	800158c <PIDAPositonController_Update>
			PIDAVelocityController_Update(&PidVelo, Robot.QV + PidPos.ControllerOut, Robot.Velocity);
 8003924:	4b24      	ldr	r3, [pc, #144]	; (80039b8 <ControllLoopAndErrorHandler+0x228>)
 8003926:	ed93 7a07 	vldr	s14, [r3, #28]
 800392a:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <ControllLoopAndErrorHandler+0x244>)
 800392c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003934:	4b20      	ldr	r3, [pc, #128]	; (80039b8 <ControllLoopAndErrorHandler+0x228>)
 8003936:	ed93 7a01 	vldr	s14, [r3, #4]
 800393a:	eef0 0a47 	vmov.f32	s1, s14
 800393e:	eeb0 0a67 	vmov.f32	s0, s15
 8003942:	4825      	ldr	r0, [pc, #148]	; (80039d8 <ControllLoopAndErrorHandler+0x248>)
 8003944:	f7fd fd44 	bl	80013d0 <PIDAVelocityController_Update>
			invTFOutput = InverseTFofMotor(traject.QV,traject.QVP);
 8003948:	4b1f      	ldr	r3, [pc, #124]	; (80039c8 <ControllLoopAndErrorHandler+0x238>)
 800394a:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800394e:	4b1e      	ldr	r3, [pc, #120]	; (80039c8 <ControllLoopAndErrorHandler+0x238>)
 8003950:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8003954:	eef0 0a47 	vmov.f32	s1, s14
 8003958:	eeb0 0a67 	vmov.f32	s0, s15
 800395c:	f000 f840 	bl	80039e0 <InverseTFofMotor>
 8003960:	eef0 7a40 	vmov.f32	s15, s0
 8003964:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <ControllLoopAndErrorHandler+0x24c>)
 8003966:	edc3 7a00 	vstr	s15, [r3]
			PWMCHECKER = PidVelo.ControllerOut + invTFOutput;
 800396a:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <ControllLoopAndErrorHandler+0x248>)
 800396c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003970:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <ControllLoopAndErrorHandler+0x24c>)
 8003972:	edd3 7a00 	vldr	s15, [r3]
 8003976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <ControllLoopAndErrorHandler+0x23c>)
 800397c:	edc3 7a00 	vstr	s15, [r3]
			Drivemotor(PWMCHECKER);
 8003980:	4b12      	ldr	r3, [pc, #72]	; (80039cc <ControllLoopAndErrorHandler+0x23c>)
 8003982:	edd3 7a00 	vldr	s15, [r3]
 8003986:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800398a:	ee17 0a90 	vmov	r0, s15
 800398e:	f7ff fea5 	bl	80036dc <Drivemotor>
}
 8003992:	e00c      	b.n	80039ae <ControllLoopAndErrorHandler+0x21e>
		PWMCHECKER = 0.0;
 8003994:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <ControllLoopAndErrorHandler+0x23c>)
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
		Drivemotor(PWMCHECKER);
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <ControllLoopAndErrorHandler+0x23c>)
 800399e:	edd3 7a00 	vldr	s15, [r3]
 80039a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039a6:	ee17 0a90 	vmov	r0, s15
 80039aa:	f7ff fe97 	bl	80036dc <Drivemotor>
}
 80039ae:	bf00      	nop
 80039b0:	46bd      	mov	sp, r7
 80039b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039b6:	bf00      	nop
 80039b8:	20000604 	.word	0x20000604
 80039bc:	200007e8 	.word	0x200007e8
 80039c0:	200007f0 	.word	0x200007f0
 80039c4:	200007f8 	.word	0x200007f8
 80039c8:	2000072c 	.word	0x2000072c
 80039cc:	20000728 	.word	0x20000728
 80039d0:	40020400 	.word	0x40020400
 80039d4:	200006f4 	.word	0x200006f4
 80039d8:	200006c0 	.word	0x200006c0
 80039dc:	200006bc 	.word	0x200006bc

080039e0 <InverseTFofMotor>:

float InverseTFofMotor(float Velo, float PredictVelo)
{
 80039e0:	b5b0      	push	{r4, r5, r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80039ea:	edc7 0a00 	vstr	s1, [r7]
	static float VeloLast = 0;
	static float Voltage = 0;
	static float VoltageLast = 0;
	static float Pwm = 0;
	Voltage = (PredictVelo - (1.298649403776808*Velo) + (0.413830007244888*VeloLast) - (0.492093238713741*VoltageLast))/0.660367603263632;
 80039ee:	6838      	ldr	r0, [r7, #0]
 80039f0:	f7fc fd56 	bl	80004a0 <__aeabi_f2d>
 80039f4:	4604      	mov	r4, r0
 80039f6:	460d      	mov	r5, r1
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7fc fd51 	bl	80004a0 <__aeabi_f2d>
 80039fe:	a345      	add	r3, pc, #276	; (adr r3, 8003b14 <InverseTFofMotor+0x134>)
 8003a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a04:	f7fc fda4 	bl	8000550 <__aeabi_dmul>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	4629      	mov	r1, r5
 8003a10:	f7fc fbe6 	bl	80001e0 <__aeabi_dsub>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4614      	mov	r4, r2
 8003a1a:	461d      	mov	r5, r3
 8003a1c:	4b38      	ldr	r3, [pc, #224]	; (8003b00 <InverseTFofMotor+0x120>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fc fd3d 	bl	80004a0 <__aeabi_f2d>
 8003a26:	a32e      	add	r3, pc, #184	; (adr r3, 8003ae0 <InverseTFofMotor+0x100>)
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	f7fc fd90 	bl	8000550 <__aeabi_dmul>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4620      	mov	r0, r4
 8003a36:	4629      	mov	r1, r5
 8003a38:	f7fc fbd4 	bl	80001e4 <__adddf3>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4614      	mov	r4, r2
 8003a42:	461d      	mov	r5, r3
 8003a44:	4b2f      	ldr	r3, [pc, #188]	; (8003b04 <InverseTFofMotor+0x124>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fc fd29 	bl	80004a0 <__aeabi_f2d>
 8003a4e:	a326      	add	r3, pc, #152	; (adr r3, 8003ae8 <InverseTFofMotor+0x108>)
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f7fc fd7c 	bl	8000550 <__aeabi_dmul>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	4629      	mov	r1, r5
 8003a60:	f7fc fbbe 	bl	80001e0 <__aeabi_dsub>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	a320      	add	r3, pc, #128	; (adr r3, 8003af0 <InverseTFofMotor+0x110>)
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	f7fc fe97 	bl	80007a4 <__aeabi_ddiv>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	f7fc ff99 	bl	80009b4 <__aeabi_d2f>
 8003a82:	4603      	mov	r3, r0
 8003a84:	4a20      	ldr	r2, [pc, #128]	; (8003b08 <InverseTFofMotor+0x128>)
 8003a86:	6013      	str	r3, [r2, #0]
	Pwm = (Voltage * 10000.0)/12.0;
 8003a88:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <InverseTFofMotor+0x128>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fc fd07 	bl	80004a0 <__aeabi_f2d>
 8003a92:	a319      	add	r3, pc, #100	; (adr r3, 8003af8 <InverseTFofMotor+0x118>)
 8003a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a98:	f7fc fd5a 	bl	8000550 <__aeabi_dmul>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	4b18      	ldr	r3, [pc, #96]	; (8003b0c <InverseTFofMotor+0x12c>)
 8003aaa:	f7fc fe7b 	bl	80007a4 <__aeabi_ddiv>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	f7fc ff7d 	bl	80009b4 <__aeabi_d2f>
 8003aba:	4603      	mov	r3, r0
 8003abc:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <InverseTFofMotor+0x130>)
 8003abe:	6013      	str	r3, [r2, #0]
	VoltageLast = Voltage;
 8003ac0:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <InverseTFofMotor+0x128>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a0f      	ldr	r2, [pc, #60]	; (8003b04 <InverseTFofMotor+0x124>)
 8003ac6:	6013      	str	r3, [r2, #0]
	VeloLast = Velo;
 8003ac8:	4a0d      	ldr	r2, [pc, #52]	; (8003b00 <InverseTFofMotor+0x120>)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6013      	str	r3, [r2, #0]
	return Pwm;
 8003ace:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <InverseTFofMotor+0x130>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	ee07 3a90 	vmov	s15, r3
}
 8003ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bdb0      	pop	{r4, r5, r7, pc}
 8003ae0:	dace185d 	.word	0xdace185d
 8003ae4:	3fda7c30 	.word	0x3fda7c30
 8003ae8:	a3b6ed62 	.word	0xa3b6ed62
 8003aec:	3fdf7e74 	.word	0x3fdf7e74
 8003af0:	3d6b5dd1 	.word	0x3d6b5dd1
 8003af4:	3fe521bb 	.word	0x3fe521bb
 8003af8:	00000000 	.word	0x00000000
 8003afc:	40c38800 	.word	0x40c38800
 8003b00:	20000834 	.word	0x20000834
 8003b04:	20000838 	.word	0x20000838
 8003b08:	2000083c 	.word	0x2000083c
 8003b0c:	40280000 	.word	0x40280000
 8003b10:	20000840 	.word	0x20000840
 8003b14:	98e30f85 	.word	0x98e30f85
 8003b18:	3ff4c744 	.word	0x3ff4c744

08003b1c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003b1c:	b4b0      	push	{r4, r5, r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a09      	ldr	r2, [pc, #36]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d10a      	bne.n	8003b42 <HAL_TIM_PeriodElapsedCallback+0x26>
		_micro += 65535;
 8003b2c:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b36:	1854      	adds	r4, r2, r1
 8003b38:	f143 0500 	adc.w	r5, r3, #0
 8003b3c:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003b3e:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bcb0      	pop	{r4, r5, r7}
 8003b4a:	4770      	bx	lr
 8003b4c:	200004b8 	.word	0x200004b8
 8003b50:	20000698 	.word	0x20000698

08003b54 <Micros>:

uint64_t Micros(){
 8003b54:	b4b0      	push	{r4, r5, r7}
 8003b56:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8003b58:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <Micros+0x28>)
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	4611      	mov	r1, r2
 8003b62:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <Micros+0x2c>)
 8003b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b68:	1884      	adds	r4, r0, r2
 8003b6a:	eb41 0503 	adc.w	r5, r1, r3
 8003b6e:	4622      	mov	r2, r4
 8003b70:	462b      	mov	r3, r5
}
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bcb0      	pop	{r4, r5, r7}
 8003b7a:	4770      	bx	lr
 8003b7c:	40014800 	.word	0x40014800
 8003b80:	20000698 	.word	0x20000698

08003b84 <Ringbuf_Init>:

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 8003b88:	2214      	movs	r2, #20
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	480e      	ldr	r0, [pc, #56]	; (8003bc8 <Ringbuf_Init+0x44>)
 8003b8e:	f007 fc17 	bl	800b3c0 <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 8003b92:	2214      	movs	r2, #20
 8003b94:	2100      	movs	r1, #0
 8003b96:	480d      	ldr	r0, [pc, #52]	; (8003bcc <Ringbuf_Init+0x48>)
 8003b98:	f007 fc12 	bl	800b3c0 <memset>

	oldPos = 0;
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <Ringbuf_Init+0x4c>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <Ringbuf_Init+0x50>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 8003ba8:	2214      	movs	r2, #20
 8003baa:	4907      	ldr	r1, [pc, #28]	; (8003bc8 <Ringbuf_Init+0x44>)
 8003bac:	480a      	ldr	r0, [pc, #40]	; (8003bd8 <Ringbuf_Init+0x54>)
 8003bae:	f005 ffad 	bl	8009b0c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <Ringbuf_Init+0x58>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <Ringbuf_Init+0x58>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0208 	bic.w	r2, r2, #8
 8003bc0:	601a      	str	r2, [r3, #0]
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000638 	.word	0x20000638
 8003bcc:	2000064c 	.word	0x2000064c
 8003bd0:	2000066a 	.word	0x2000066a
 8003bd4:	2000066c 	.word	0x2000066c
 8003bd8:	20000500 	.word	0x20000500
 8003bdc:	20000544 	.word	0x20000544

08003be0 <checkSum>:
	oldPos = 0;
	newPos = 0;
}

void checkSum (uint8_t *buffertoCheckSum, uint16_t Size)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	807b      	strh	r3, [r7, #2]
	uint8_t sum = 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	73fb      	strb	r3, [r7, #15]
	modeByte = 0;
 8003bf0:	4b52      	ldr	r3, [pc, #328]	; (8003d3c <checkSum+0x15c>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
	switch(Size){
 8003bf6:	887b      	ldrh	r3, [r7, #2]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d84f      	bhi.n	8003c9e <checkSum+0xbe>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <checkSum+0x24>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003cf5 	.word	0x08003cf5
 8003c08:	08003c15 	.word	0x08003c15
 8003c0c:	08003cf5 	.word	0x08003cf5
 8003c10:	08003c3b 	.word	0x08003c3b
	case 1:
	case 3:
		break;
	case 2:
		if(!(checkAck(buffertoCheckSum, Size))) modeByte = sum = buffertoCheckSum[oldPos];
 8003c14:	887b      	ldrh	r3, [r7, #2]
 8003c16:	4619      	mov	r1, r3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f897 	bl	8003d4c <checkAck>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d169      	bne.n	8003cf8 <checkSum+0x118>
 8003c24:	4b46      	ldr	r3, [pc, #280]	; (8003d40 <checkSum+0x160>)
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	73fb      	strb	r3, [r7, #15]
 8003c32:	4a42      	ldr	r2, [pc, #264]	; (8003d3c <checkSum+0x15c>)
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	7013      	strb	r3, [r2, #0]
		break;
 8003c38:	e05e      	b.n	8003cf8 <checkSum+0x118>
	case 4:
		if(checkAck(buffertoCheckSum, Size)) modeByte = sum = buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8003c3a:	887b      	ldrh	r3, [r7, #2]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f884 	bl	8003d4c <checkAck>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <checkSum+0x80>
 8003c4a:	4b3d      	ldr	r3, [pc, #244]	; (8003d40 <checkSum+0x160>)
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	3302      	adds	r3, #2
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	73fb      	strb	r3, [r7, #15]
 8003c58:	4a38      	ldr	r2, [pc, #224]	; (8003d3c <checkSum+0x15c>)
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	7013      	strb	r3, [r2, #0]
		else{
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
			modeByte = buffertoCheckSum[oldPos];
		}
		break;
 8003c5e:	e04c      	b.n	8003cfa <checkSum+0x11a>
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8003c60:	4b37      	ldr	r3, [pc, #220]	; (8003d40 <checkSum+0x160>)
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	781a      	ldrb	r2, [r3, #0]
 8003c6c:	4b34      	ldr	r3, [pc, #208]	; (8003d40 <checkSum+0x160>)
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	3301      	adds	r3, #1
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	440b      	add	r3, r1
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	4413      	add	r3, r2
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	4b30      	ldr	r3, [pc, #192]	; (8003d40 <checkSum+0x160>)
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	3302      	adds	r3, #2
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	440b      	add	r3, r1
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	4413      	add	r3, r2
 8003c8a:	73fb      	strb	r3, [r7, #15]
			modeByte = buffertoCheckSum[oldPos];
 8003c8c:	4b2c      	ldr	r3, [pc, #176]	; (8003d40 <checkSum+0x160>)
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	781a      	ldrb	r2, [r3, #0]
 8003c98:	4b28      	ldr	r3, [pc, #160]	; (8003d3c <checkSum+0x15c>)
 8003c9a:	701a      	strb	r2, [r3, #0]
		break;
 8003c9c:	e02d      	b.n	8003cfa <checkSum+0x11a>
	default:
		modeByte = buffertoCheckSum[oldPos];
 8003c9e:	4b28      	ldr	r3, [pc, #160]	; (8003d40 <checkSum+0x160>)
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <checkSum+0x15c>)
 8003cac:	701a      	strb	r2, [r3, #0]
		for (int index = 0; index < Size-1; ++index)
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	e019      	b.n	8003ce8 <checkSum+0x108>
		{
			sum = sum + buffertoCheckSum[oldPos+index % MainBuf_SIZE];
 8003cb4:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <checkSum+0x160>)
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	4b21      	ldr	r3, [pc, #132]	; (8003d44 <checkSum+0x164>)
 8003cbe:	fb83 2301 	smull	r2, r3, r3, r1
 8003cc2:	10da      	asrs	r2, r3, #3
 8003cc4:	17cb      	asrs	r3, r1, #31
 8003cc6:	1ad2      	subs	r2, r2, r3
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	1aca      	subs	r2, r1, r3
 8003cd2:	1883      	adds	r3, r0, r2
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	781a      	ldrb	r2, [r3, #0]
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	4413      	add	r3, r2
 8003ce0:	73fb      	strb	r3, [r7, #15]
		for (int index = 0; index < Size-1; ++index)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	887b      	ldrh	r3, [r7, #2]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	dbe0      	blt.n	8003cb4 <checkSum+0xd4>
 8003cf2:	e002      	b.n	8003cfa <checkSum+0x11a>
		break;
 8003cf4:	bf00      	nop
 8003cf6:	e000      	b.n	8003cfa <checkSum+0x11a>
		break;
 8003cf8:	bf00      	nop
		}
	}

	if((uint8_t)buffertoCheckSum[oldPos+(Size-1) % MainBuf_SIZE] == (uint8_t)(~sum)) UARTstateManagement(MainBuf);
 8003cfa:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <checkSum+0x160>)
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	887b      	ldrh	r3, [r7, #2]
 8003d02:	1e59      	subs	r1, r3, #1
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <checkSum+0x164>)
 8003d06:	fb83 2301 	smull	r2, r3, r3, r1
 8003d0a:	10da      	asrs	r2, r3, #3
 8003d0c:	17cb      	asrs	r3, r1, #31
 8003d0e:	1ad2      	subs	r2, r2, r3
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	1aca      	subs	r2, r1, r3
 8003d1a:	1883      	adds	r3, r0, r2
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	781a      	ldrb	r2, [r3, #0]
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	43db      	mvns	r3, r3
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d102      	bne.n	8003d34 <checkSum+0x154>
 8003d2e:	4806      	ldr	r0, [pc, #24]	; (8003d48 <checkSum+0x168>)
 8003d30:	f000 f89a 	bl	8003e68 <UARTstateManagement>
}
 8003d34:	bf00      	nop
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000690 	.word	0x20000690
 8003d40:	2000066a 	.word	0x2000066a
 8003d44:	66666667 	.word	0x66666667
 8003d48:	2000064c 	.word	0x2000064c

08003d4c <checkAck>:

uint8_t checkAck (uint8_t *buffertoCheckAck, uint16_t Size)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	807b      	strh	r3, [r7, #2]
	if((buffertoCheckAck[oldPos] == 0b01011000) && (buffertoCheckAck[oldPos+1 % MainBuf_SIZE] == 0b01110101)) return 1;
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <checkAck+0x40>)
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4413      	add	r3, r2
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b58      	cmp	r3, #88	; 0x58
 8003d66:	d109      	bne.n	8003d7c <checkAck+0x30>
 8003d68:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <checkAck+0x40>)
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4413      	add	r3, r2
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b75      	cmp	r3, #117	; 0x75
 8003d76:	d101      	bne.n	8003d7c <checkAck+0x30>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <checkAck+0x32>
	else return 0;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	2000066a 	.word	0x2000066a

08003d90 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	807b      	strh	r3, [r7, #2]
        if (huart->Instance == USART2)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a28      	ldr	r2, [pc, #160]	; (8003e44 <HAL_UARTEx_RxEventCallback+0xb4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d14a      	bne.n	8003e3c <HAL_UARTEx_RxEventCallback+0xac>
        {
                oldPos = newPos;
 8003da6:	4b28      	ldr	r3, [pc, #160]	; (8003e48 <HAL_UARTEx_RxEventCallback+0xb8>)
 8003da8:	881a      	ldrh	r2, [r3, #0]
 8003daa:	4b28      	ldr	r3, [pc, #160]	; (8003e4c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003dac:	801a      	strh	r2, [r3, #0]
                dataSize = Size;
 8003dae:	4a28      	ldr	r2, [pc, #160]	; (8003e50 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003db0:	887b      	ldrh	r3, [r7, #2]
 8003db2:	8013      	strh	r3, [r2, #0]
                if (oldPos+dataSize > MainBuf_SIZE)
 8003db4:	4b25      	ldr	r3, [pc, #148]	; (8003e4c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	461a      	mov	r2, r3
 8003dba:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	2b14      	cmp	r3, #20
 8003dc2:	dd16      	ble.n	8003df2 <HAL_UARTEx_RxEventCallback+0x62>
                {
                        oldPos = 0;
 8003dc4:	4b21      	ldr	r3, [pc, #132]	; (8003e4c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	801a      	strh	r2, [r3, #0]
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8003dca:	4b20      	ldr	r3, [pc, #128]	; (8003e4c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	4b20      	ldr	r3, [pc, #128]	; (8003e54 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003dd2:	4413      	add	r3, r2
 8003dd4:	4a1e      	ldr	r2, [pc, #120]	; (8003e50 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003dd6:	8812      	ldrh	r2, [r2, #0]
 8003dd8:	491f      	ldr	r1, [pc, #124]	; (8003e58 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f007 fae2 	bl	800b3a4 <memcpy>
                        newPos = dataSize+oldPos;
 8003de0:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003de2:	881a      	ldrh	r2, [r3, #0]
 8003de4:	4b19      	ldr	r3, [pc, #100]	; (8003e4c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	4413      	add	r3, r2
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <HAL_UARTEx_RxEventCallback+0xb8>)
 8003dee:	801a      	strh	r2, [r3, #0]
 8003df0:	e012      	b.n	8003e18 <HAL_UARTEx_RxEventCallback+0x88>
                }
                else
                {
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8003df2:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	4b16      	ldr	r3, [pc, #88]	; (8003e54 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003dfa:	4413      	add	r3, r2
 8003dfc:	4a14      	ldr	r2, [pc, #80]	; (8003e50 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003dfe:	8812      	ldrh	r2, [r2, #0]
 8003e00:	4915      	ldr	r1, [pc, #84]	; (8003e58 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003e02:	4618      	mov	r0, r3
 8003e04:	f007 face 	bl	800b3a4 <memcpy>
                        newPos = dataSize+oldPos;
 8003e08:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003e0a:	881a      	ldrh	r2, [r3, #0]
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	4413      	add	r3, r2
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <HAL_UARTEx_RxEventCallback+0xb8>)
 8003e16:	801a      	strh	r2, [r3, #0]
                }

                checkSum(MainBuf, Size);
 8003e18:	887b      	ldrh	r3, [r7, #2]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	480d      	ldr	r0, [pc, #52]	; (8003e54 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003e1e:	f7ff fedf 	bl	8003be0 <checkSum>
                HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 8003e22:	2214      	movs	r2, #20
 8003e24:	490c      	ldr	r1, [pc, #48]	; (8003e58 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003e26:	480d      	ldr	r0, [pc, #52]	; (8003e5c <HAL_UARTEx_RxEventCallback+0xcc>)
 8003e28:	f005 fe70 	bl	8009b0c <HAL_UARTEx_ReceiveToIdle_DMA>
                __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0208 	bic.w	r2, r2, #8
 8003e3a:	601a      	str	r2, [r3, #0]
        }
}
 8003e3c:	bf00      	nop
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40004400 	.word	0x40004400
 8003e48:	2000066c 	.word	0x2000066c
 8003e4c:	2000066a 	.word	0x2000066a
 8003e50:	2000066e 	.word	0x2000066e
 8003e54:	2000064c 	.word	0x2000064c
 8003e58:	20000638 	.word	0x20000638
 8003e5c:	20000500 	.word	0x20000500
 8003e60:	20000544 	.word	0x20000544
 8003e64:	00000000 	.word	0x00000000

08003e68 <UARTstateManagement>:

void UARTstateManagement(uint8_t *Mainbuffer)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	switch (UARTState)
 8003e70:	4ba9      	ldr	r3, [pc, #676]	; (8004118 <UARTstateManagement+0x2b0>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d01d      	beq.n	8003eb4 <UARTstateManagement+0x4c>
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	f300 839b 	bgt.w	80045b4 <UARTstateManagement+0x74c>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8395 	beq.w	80045ae <UARTstateManagement+0x746>
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d000      	beq.n	8003e8a <UARTstateManagement+0x22>
					homingFlag = 1;
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
					break;
				}
	}
}
 8003e88:	e394      	b.n	80045b4 <UARTstateManagement+0x74c>
			if(Mainbuffer[oldPos] == 0b10010010)
 8003e8a:	4ba4      	ldr	r3, [pc, #656]	; (800411c <UARTstateManagement+0x2b4>)
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4413      	add	r3, r2
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b92      	cmp	r3, #146	; 0x92
 8003e98:	f040 838b 	bne.w	80045b2 <UARTstateManagement+0x74a>
				modeNo = 2;
 8003e9c:	4ba0      	ldr	r3, [pc, #640]	; (8004120 <UARTstateManagement+0x2b8>)
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	701a      	strb	r2, [r3, #0]
				UARTState = MCUConnect;
 8003ea2:	4b9d      	ldr	r3, [pc, #628]	; (8004118 <UARTstateManagement+0x2b0>)
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	499e      	ldr	r1, [pc, #632]	; (8004124 <UARTstateManagement+0x2bc>)
 8003eac:	489e      	ldr	r0, [pc, #632]	; (8004128 <UARTstateManagement+0x2c0>)
 8003eae:	f005 fdaf 	bl	8009a10 <HAL_UART_Transmit_DMA>
			break;
 8003eb2:	e37e      	b.n	80045b2 <UARTstateManagement+0x74a>
			stateSwitch = modeByte;
 8003eb4:	4b9d      	ldr	r3, [pc, #628]	; (800412c <UARTstateManagement+0x2c4>)
 8003eb6:	781a      	ldrb	r2, [r3, #0]
 8003eb8:	4b9d      	ldr	r3, [pc, #628]	; (8004130 <UARTstateManagement+0x2c8>)
 8003eba:	701a      	strb	r2, [r3, #0]
			switch (stateSwitch)
 8003ebc:	4b9c      	ldr	r3, [pc, #624]	; (8004130 <UARTstateManagement+0x2c8>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	3b91      	subs	r3, #145	; 0x91
 8003ec2:	2b0d      	cmp	r3, #13
 8003ec4:	f200 8376 	bhi.w	80045b4 <UARTstateManagement+0x74c>
 8003ec8:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <UARTstateManagement+0x68>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003f09 	.word	0x08003f09
 8003ed4:	08003f1b 	.word	0x08003f1b
 8003ed8:	08003f33 	.word	0x08003f33
 8003edc:	08003f4b 	.word	0x08003f4b
 8003ee0:	08003f9f 	.word	0x08003f9f
 8003ee4:	0800400f 	.word	0x0800400f
 8003ee8:	08004047 	.word	0x08004047
 8003eec:	08004155 	.word	0x08004155
 8003ef0:	08004199 	.word	0x08004199
 8003ef4:	08004245 	.word	0x08004245
 8003ef8:	08004435 	.word	0x08004435
 8003efc:	08004541 	.word	0x08004541
 8003f00:	08004571 	.word	0x08004571
 8003f04:	08004589 	.word	0x08004589
					modeNo = 1;
 8003f08:	4b85      	ldr	r3, [pc, #532]	; (8004120 <UARTstateManagement+0x2b8>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003f0e:	2202      	movs	r2, #2
 8003f10:	4984      	ldr	r1, [pc, #528]	; (8004124 <UARTstateManagement+0x2bc>)
 8003f12:	4885      	ldr	r0, [pc, #532]	; (8004128 <UARTstateManagement+0x2c0>)
 8003f14:	f005 fd7c 	bl	8009a10 <HAL_UART_Transmit_DMA>
					break;
 8003f18:	e34c      	b.n	80045b4 <UARTstateManagement+0x74c>
					modeNo = 2;
 8003f1a:	4b81      	ldr	r3, [pc, #516]	; (8004120 <UARTstateManagement+0x2b8>)
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	701a      	strb	r2, [r3, #0]
					UARTState = MCUConnect;
 8003f20:	4b7d      	ldr	r3, [pc, #500]	; (8004118 <UARTstateManagement+0x2b0>)
 8003f22:	2202      	movs	r2, #2
 8003f24:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003f26:	2202      	movs	r2, #2
 8003f28:	497e      	ldr	r1, [pc, #504]	; (8004124 <UARTstateManagement+0x2bc>)
 8003f2a:	487f      	ldr	r0, [pc, #508]	; (8004128 <UARTstateManagement+0x2c0>)
 8003f2c:	f005 fd70 	bl	8009a10 <HAL_UART_Transmit_DMA>
					break;
 8003f30:	e340      	b.n	80045b4 <UARTstateManagement+0x74c>
					modeNo = 3;
 8003f32:	4b7b      	ldr	r3, [pc, #492]	; (8004120 <UARTstateManagement+0x2b8>)
 8003f34:	2203      	movs	r2, #3
 8003f36:	701a      	strb	r2, [r3, #0]
					UARTState = MCUDisconnect;
 8003f38:	4b77      	ldr	r3, [pc, #476]	; (8004118 <UARTstateManagement+0x2b0>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003f3e:	2202      	movs	r2, #2
 8003f40:	4978      	ldr	r1, [pc, #480]	; (8004124 <UARTstateManagement+0x2bc>)
 8003f42:	4879      	ldr	r0, [pc, #484]	; (8004128 <UARTstateManagement+0x2c0>)
 8003f44:	f005 fd64 	bl	8009a10 <HAL_UART_Transmit_DMA>
					break;
 8003f48:	e334      	b.n	80045b4 <UARTstateManagement+0x74c>
					modeNo = 4;
 8003f4a:	4b75      	ldr	r3, [pc, #468]	; (8004120 <UARTstateManagement+0x2b8>)
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	701a      	strb	r2, [r3, #0]
					uartVelo = ((Mainbuffer[oldPos + 2 % MainBuf_SIZE])/255.0)*10.0;
 8003f50:	4b72      	ldr	r3, [pc, #456]	; (800411c <UARTstateManagement+0x2b4>)
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	3302      	adds	r3, #2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	4413      	add	r3, r2
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fc fa8d 	bl	800047c <__aeabi_i2d>
 8003f62:	a369      	add	r3, pc, #420	; (adr r3, 8004108 <UARTstateManagement+0x2a0>)
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	f7fc fc1c 	bl	80007a4 <__aeabi_ddiv>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4610      	mov	r0, r2
 8003f72:	4619      	mov	r1, r3
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	4b6e      	ldr	r3, [pc, #440]	; (8004134 <UARTstateManagement+0x2cc>)
 8003f7a:	f7fc fae9 	bl	8000550 <__aeabi_dmul>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4610      	mov	r0, r2
 8003f84:	4619      	mov	r1, r3
 8003f86:	f7fc fcf5 	bl	8000974 <__aeabi_d2uiz>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	4b6a      	ldr	r3, [pc, #424]	; (8004138 <UARTstateManagement+0x2d0>)
 8003f90:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003f92:	2202      	movs	r2, #2
 8003f94:	4963      	ldr	r1, [pc, #396]	; (8004124 <UARTstateManagement+0x2bc>)
 8003f96:	4864      	ldr	r0, [pc, #400]	; (8004128 <UARTstateManagement+0x2c0>)
 8003f98:	f005 fd3a 	bl	8009a10 <HAL_UART_Transmit_DMA>
					break;
 8003f9c:	e30a      	b.n	80045b4 <UARTstateManagement+0x74c>
					modeNo = 5;
 8003f9e:	4b60      	ldr	r3, [pc, #384]	; (8004120 <UARTstateManagement+0x2b8>)
 8003fa0:	2205      	movs	r2, #5
 8003fa2:	701a      	strb	r2, [r3, #0]
					goalFlag = 1;
 8003fa4:	4b65      	ldr	r3, [pc, #404]	; (800413c <UARTstateManagement+0x2d4>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	701a      	strb	r2, [r3, #0]
					goalAmount = 1;
 8003faa:	4b65      	ldr	r3, [pc, #404]	; (8004140 <UARTstateManagement+0x2d8>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	701a      	strb	r2, [r3, #0]
					uartPos = (uint16_t)((((Mainbuffer[oldPos + 1 % MainBuf_SIZE] << 8) | Mainbuffer[oldPos + 2 % MainBuf_SIZE])*360.0)/62800);
 8003fb0:	4b5a      	ldr	r3, [pc, #360]	; (800411c <UARTstateManagement+0x2b4>)
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	4413      	add	r3, r2
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	4a57      	ldr	r2, [pc, #348]	; (800411c <UARTstateManagement+0x2b4>)
 8003fc0:	8812      	ldrh	r2, [r2, #0]
 8003fc2:	3202      	adds	r2, #2
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	440a      	add	r2, r1
 8003fc8:	7812      	ldrb	r2, [r2, #0]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fc fa55 	bl	800047c <__aeabi_i2d>
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	4b5b      	ldr	r3, [pc, #364]	; (8004144 <UARTstateManagement+0x2dc>)
 8003fd8:	f7fc faba 	bl	8000550 <__aeabi_dmul>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	a34a      	add	r3, pc, #296	; (adr r3, 8004110 <UARTstateManagement+0x2a8>)
 8003fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fea:	f7fc fbdb 	bl	80007a4 <__aeabi_ddiv>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	f7fc fcbd 	bl	8000974 <__aeabi_d2uiz>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	4b52      	ldr	r3, [pc, #328]	; (8004148 <UARTstateManagement+0x2e0>)
 8004000:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004002:	2202      	movs	r2, #2
 8004004:	4947      	ldr	r1, [pc, #284]	; (8004124 <UARTstateManagement+0x2bc>)
 8004006:	4848      	ldr	r0, [pc, #288]	; (8004128 <UARTstateManagement+0x2c0>)
 8004008:	f005 fd02 	bl	8009a10 <HAL_UART_Transmit_DMA>
					break;
 800400c:	e2d2      	b.n	80045b4 <UARTstateManagement+0x74c>
					modeNo = 6;
 800400e:	4b44      	ldr	r3, [pc, #272]	; (8004120 <UARTstateManagement+0x2b8>)
 8004010:	2206      	movs	r2, #6
 8004012:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8004014:	4b49      	ldr	r3, [pc, #292]	; (800413c <UARTstateManagement+0x2d4>)
 8004016:	2202      	movs	r2, #2
 8004018:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 800401a:	220f      	movs	r2, #15
 800401c:	2100      	movs	r1, #0
 800401e:	484b      	ldr	r0, [pc, #300]	; (800414c <UARTstateManagement+0x2e4>)
 8004020:	f007 f9ce 	bl	800b3c0 <memset>
					goalAmount = 1;
 8004024:	4b46      	ldr	r3, [pc, #280]	; (8004140 <UARTstateManagement+0x2d8>)
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
					uartGoal[0] = Mainbuffer[oldPos + 2 % MainBuf_SIZE];
 800402a:	4b3c      	ldr	r3, [pc, #240]	; (800411c <UARTstateManagement+0x2b4>)
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	3302      	adds	r3, #2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	4413      	add	r3, r2
 8004034:	781a      	ldrb	r2, [r3, #0]
 8004036:	4b45      	ldr	r3, [pc, #276]	; (800414c <UARTstateManagement+0x2e4>)
 8004038:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800403a:	2202      	movs	r2, #2
 800403c:	4939      	ldr	r1, [pc, #228]	; (8004124 <UARTstateManagement+0x2bc>)
 800403e:	483a      	ldr	r0, [pc, #232]	; (8004128 <UARTstateManagement+0x2c0>)
 8004040:	f005 fce6 	bl	8009a10 <HAL_UART_Transmit_DMA>
					break;
 8004044:	e2b6      	b.n	80045b4 <UARTstateManagement+0x74c>
					modeNo = 7;
 8004046:	4b36      	ldr	r3, [pc, #216]	; (8004120 <UARTstateManagement+0x2b8>)
 8004048:	2207      	movs	r2, #7
 800404a:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 800404c:	4b3b      	ldr	r3, [pc, #236]	; (800413c <UARTstateManagement+0x2d4>)
 800404e:	2202      	movs	r2, #2
 8004050:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8004052:	220f      	movs	r2, #15
 8004054:	2100      	movs	r1, #0
 8004056:	483d      	ldr	r0, [pc, #244]	; (800414c <UARTstateManagement+0x2e4>)
 8004058:	f007 f9b2 	bl	800b3c0 <memset>
					goalAmount = Mainbuffer[oldPos + 1 % MainBuf_SIZE];
 800405c:	4b2f      	ldr	r3, [pc, #188]	; (800411c <UARTstateManagement+0x2b4>)
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	3301      	adds	r3, #1
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	4413      	add	r3, r2
 8004066:	781a      	ldrb	r2, [r3, #0]
 8004068:	4b35      	ldr	r3, [pc, #212]	; (8004140 <UARTstateManagement+0x2d8>)
 800406a:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	e03a      	b.n	80040e8 <UARTstateManagement+0x280>
						uartGoal[0+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] & 15; // low 8 bit (last 4 bit)
 8004072:	4b2a      	ldr	r3, [pc, #168]	; (800411c <UARTstateManagement+0x2b4>)
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1c99      	adds	r1, r3, #2
 800407c:	4b34      	ldr	r3, [pc, #208]	; (8004150 <UARTstateManagement+0x2e8>)
 800407e:	fb83 2301 	smull	r2, r3, r3, r1
 8004082:	10da      	asrs	r2, r3, #3
 8004084:	17cb      	asrs	r3, r1, #31
 8004086:	1ad2      	subs	r2, r2, r3
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	1aca      	subs	r2, r1, r3
 8004092:	1883      	adds	r3, r0, r2
 8004094:	461a      	mov	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4413      	add	r3, r2
 800409a:	781a      	ldrb	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	f002 020f 	and.w	r2, r2, #15
 80040a4:	b2d1      	uxtb	r1, r2
 80040a6:	4a29      	ldr	r2, [pc, #164]	; (800414c <UARTstateManagement+0x2e4>)
 80040a8:	54d1      	strb	r1, [r2, r3]
						uartGoal[1+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] >> 4; // high 8 bit (first 4 bit)
 80040aa:	4b1c      	ldr	r3, [pc, #112]	; (800411c <UARTstateManagement+0x2b4>)
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	1c99      	adds	r1, r3, #2
 80040b4:	4b26      	ldr	r3, [pc, #152]	; (8004150 <UARTstateManagement+0x2e8>)
 80040b6:	fb83 2301 	smull	r2, r3, r3, r1
 80040ba:	10da      	asrs	r2, r3, #3
 80040bc:	17cb      	asrs	r3, r1, #31
 80040be:	1ad2      	subs	r2, r2, r3
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	1aca      	subs	r2, r1, r3
 80040ca:	1883      	adds	r3, r0, r2
 80040cc:	461a      	mov	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4413      	add	r3, r2
 80040d2:	781a      	ldrb	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	3301      	adds	r3, #1
 80040da:	0912      	lsrs	r2, r2, #4
 80040dc:	b2d1      	uxtb	r1, r2
 80040de:	4a1b      	ldr	r2, [pc, #108]	; (800414c <UARTstateManagement+0x2e4>)
 80040e0:	54d1      	strb	r1, [r2, r3]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3301      	adds	r3, #1
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	4b15      	ldr	r3, [pc, #84]	; (8004140 <UARTstateManagement+0x2d8>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	3301      	adds	r3, #1
 80040ee:	0fda      	lsrs	r2, r3, #31
 80040f0:	4413      	add	r3, r2
 80040f2:	105b      	asrs	r3, r3, #1
 80040f4:	461a      	mov	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4293      	cmp	r3, r2
 80040fa:	dbba      	blt.n	8004072 <UARTstateManagement+0x20a>
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80040fc:	2202      	movs	r2, #2
 80040fe:	4909      	ldr	r1, [pc, #36]	; (8004124 <UARTstateManagement+0x2bc>)
 8004100:	4809      	ldr	r0, [pc, #36]	; (8004128 <UARTstateManagement+0x2c0>)
 8004102:	f005 fc85 	bl	8009a10 <HAL_UART_Transmit_DMA>
					break;
 8004106:	e255      	b.n	80045b4 <UARTstateManagement+0x74c>
 8004108:	00000000 	.word	0x00000000
 800410c:	406fe000 	.word	0x406fe000
 8004110:	00000000 	.word	0x00000000
 8004114:	40eeaa00 	.word	0x40eeaa00
 8004118:	20000634 	.word	0x20000634
 800411c:	2000066a 	.word	0x2000066a
 8004120:	2000068f 	.word	0x2000068f
 8004124:	20000018 	.word	0x20000018
 8004128:	20000500 	.word	0x20000500
 800412c:	20000690 	.word	0x20000690
 8004130:	20000669 	.word	0x20000669
 8004134:	40240000 	.word	0x40240000
 8004138:	20000674 	.word	0x20000674
 800413c:	20000689 	.word	0x20000689
 8004140:	20000687 	.word	0x20000687
 8004144:	40768000 	.word	0x40768000
 8004148:	20000676 	.word	0x20000676
 800414c:	20000678 	.word	0x20000678
 8004150:	66666667 	.word	0x66666667
					modeNo = 8;
 8004154:	4b98      	ldr	r3, [pc, #608]	; (80043b8 <UARTstateManagement+0x550>)
 8004156:	2208      	movs	r2, #8
 8004158:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 0){
 800415a:	4b98      	ldr	r3, [pc, #608]	; (80043bc <UARTstateManagement+0x554>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d114      	bne.n	800418c <UARTstateManagement+0x324>
					goingToGoalFlag = 0;
 8004162:	4b97      	ldr	r3, [pc, #604]	; (80043c0 <UARTstateManagement+0x558>)
 8004164:	2200      	movs	r2, #0
 8004166:	701a      	strb	r2, [r3, #0]
					Robot.MotorIsOn = 1;
 8004168:	4b96      	ldr	r3, [pc, #600]	; (80043c4 <UARTstateManagement+0x55c>)
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2020 	strb.w	r2, [r3, #32]
					Robot.flagStartTime = 1;
 8004170:	4b94      	ldr	r3, [pc, #592]	; (80043c4 <UARTstateManagement+0x55c>)
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					Robot.RunningFlag = 1;
 8004178:	4b92      	ldr	r3, [pc, #584]	; (80043c4 <UARTstateManagement+0x55c>)
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					doingTaskFlag = 1;
 8004180:	4b8e      	ldr	r3, [pc, #568]	; (80043bc <UARTstateManagement+0x554>)
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
					goalIDX = 0;
 8004186:	4b90      	ldr	r3, [pc, #576]	; (80043c8 <UARTstateManagement+0x560>)
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800418c:	2202      	movs	r2, #2
 800418e:	498f      	ldr	r1, [pc, #572]	; (80043cc <UARTstateManagement+0x564>)
 8004190:	488f      	ldr	r0, [pc, #572]	; (80043d0 <UARTstateManagement+0x568>)
 8004192:	f005 fc3d 	bl	8009a10 <HAL_UART_Transmit_DMA>
					break;
 8004196:	e20d      	b.n	80045b4 <UARTstateManagement+0x74c>
					modeNo = 9;
 8004198:	4b87      	ldr	r3, [pc, #540]	; (80043b8 <UARTstateManagement+0x550>)
 800419a:	2209      	movs	r2, #9
 800419c:	701a      	strb	r2, [r3, #0]
					FlagAckFromUART = 0;
 800419e:	4b8d      	ldr	r3, [pc, #564]	; (80043d4 <UARTstateManagement+0x56c>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	701a      	strb	r2, [r3, #0]
					Robot.CurrentStation = 0;
 80041a4:	4b87      	ldr	r3, [pc, #540]	; (80043c4 <UARTstateManagement+0x55c>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	811a      	strh	r2, [r3, #8]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 80041aa:	4b84      	ldr	r3, [pc, #528]	; (80043bc <UARTstateManagement+0x554>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d004      	beq.n	80041bc <UARTstateManagement+0x354>
 80041b2:	4b84      	ldr	r3, [pc, #528]	; (80043c4 <UARTstateManagement+0x55c>)
 80041b4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d11f      	bne.n	80041fc <UARTstateManagement+0x394>
 80041bc:	4b83      	ldr	r3, [pc, #524]	; (80043cc <UARTstateManagement+0x564>)
 80041be:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 80041c0:	4b85      	ldr	r3, [pc, #532]	; (80043d8 <UARTstateManagement+0x570>)
 80041c2:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 153; // start-mode
 80041c4:	4b84      	ldr	r3, [pc, #528]	; (80043d8 <UARTstateManagement+0x570>)
 80041c6:	2299      	movs	r2, #153	; 0x99
 80041c8:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = Robot.CurrentStation; // set current goal
 80041ca:	4b7e      	ldr	r3, [pc, #504]	; (80043c4 <UARTstateManagement+0x55c>)
 80041cc:	891b      	ldrh	r3, [r3, #8]
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	4b81      	ldr	r3, [pc, #516]	; (80043d8 <UARTstateManagement+0x570>)
 80041d2:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 80041d4:	4b80      	ldr	r3, [pc, #512]	; (80043d8 <UARTstateManagement+0x570>)
 80041d6:	789a      	ldrb	r2, [r3, #2]
 80041d8:	4b7f      	ldr	r3, [pc, #508]	; (80043d8 <UARTstateManagement+0x570>)
 80041da:	78db      	ldrb	r3, [r3, #3]
 80041dc:	4413      	add	r3, r2
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	4b7d      	ldr	r3, [pc, #500]	; (80043d8 <UARTstateManagement+0x570>)
 80041e2:	791b      	ldrb	r3, [r3, #4]
 80041e4:	4413      	add	r3, r2
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	4b7a      	ldr	r3, [pc, #488]	; (80043d8 <UARTstateManagement+0x570>)
 80041ee:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 80041f0:	2206      	movs	r2, #6
 80041f2:	4979      	ldr	r1, [pc, #484]	; (80043d8 <UARTstateManagement+0x570>)
 80041f4:	4876      	ldr	r0, [pc, #472]	; (80043d0 <UARTstateManagement+0x568>)
 80041f6:	f005 fc0b 	bl	8009a10 <HAL_UART_Transmit_DMA>
					break;
 80041fa:	e1db      	b.n	80045b4 <UARTstateManagement+0x74c>
 80041fc:	4b77      	ldr	r3, [pc, #476]	; (80043dc <UARTstateManagement+0x574>)
 80041fe:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8004200:	4b75      	ldr	r3, [pc, #468]	; (80043d8 <UARTstateManagement+0x570>)
 8004202:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 8004204:	4a76      	ldr	r2, [pc, #472]	; (80043e0 <UARTstateManagement+0x578>)
 8004206:	4b71      	ldr	r3, [pc, #452]	; (80043cc <UARTstateManagement+0x564>)
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 153; // start-mode
 800420c:	4b72      	ldr	r3, [pc, #456]	; (80043d8 <UARTstateManagement+0x570>)
 800420e:	2299      	movs	r2, #153	; 0x99
 8004210:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = Robot.CurrentStation; // set currentStation
 8004212:	4b6c      	ldr	r3, [pc, #432]	; (80043c4 <UARTstateManagement+0x55c>)
 8004214:	891b      	ldrh	r3, [r3, #8]
 8004216:	b2da      	uxtb	r2, r3
 8004218:	4b6f      	ldr	r3, [pc, #444]	; (80043d8 <UARTstateManagement+0x570>)
 800421a:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 800421c:	4b6e      	ldr	r3, [pc, #440]	; (80043d8 <UARTstateManagement+0x570>)
 800421e:	791a      	ldrb	r2, [r3, #4]
 8004220:	4b6d      	ldr	r3, [pc, #436]	; (80043d8 <UARTstateManagement+0x570>)
 8004222:	795b      	ldrb	r3, [r3, #5]
 8004224:	4413      	add	r3, r2
 8004226:	b2da      	uxtb	r2, r3
 8004228:	4b6b      	ldr	r3, [pc, #428]	; (80043d8 <UARTstateManagement+0x570>)
 800422a:	799b      	ldrb	r3, [r3, #6]
 800422c:	4413      	add	r3, r2
 800422e:	b2db      	uxtb	r3, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	b2da      	uxtb	r2, r3
 8004234:	4b68      	ldr	r3, [pc, #416]	; (80043d8 <UARTstateManagement+0x570>)
 8004236:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 8004238:	2208      	movs	r2, #8
 800423a:	4967      	ldr	r1, [pc, #412]	; (80043d8 <UARTstateManagement+0x570>)
 800423c:	4864      	ldr	r0, [pc, #400]	; (80043d0 <UARTstateManagement+0x568>)
 800423e:	f005 fbe7 	bl	8009a10 <HAL_UART_Transmit_DMA>
					break;
 8004242:	e1b7      	b.n	80045b4 <UARTstateManagement+0x74c>
					modeNo = 10;
 8004244:	4b5c      	ldr	r3, [pc, #368]	; (80043b8 <UARTstateManagement+0x550>)
 8004246:	220a      	movs	r2, #10
 8004248:	701a      	strb	r2, [r3, #0]
					FlagAckFromUART = 0;
 800424a:	4b62      	ldr	r3, [pc, #392]	; (80043d4 <UARTstateManagement+0x56c>)
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
					posData = (uint16_t)(((((Robot.Position)*10000.0)*M_PI)/180.0));
 8004250:	4b5c      	ldr	r3, [pc, #368]	; (80043c4 <UARTstateManagement+0x55c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f7fc f923 	bl	80004a0 <__aeabi_f2d>
 800425a:	a353      	add	r3, pc, #332	; (adr r3, 80043a8 <UARTstateManagement+0x540>)
 800425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004260:	f7fc f976 	bl	8000550 <__aeabi_dmul>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4610      	mov	r0, r2
 800426a:	4619      	mov	r1, r3
 800426c:	a350      	add	r3, pc, #320	; (adr r3, 80043b0 <UARTstateManagement+0x548>)
 800426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004272:	f7fc f96d 	bl	8000550 <__aeabi_dmul>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4610      	mov	r0, r2
 800427c:	4619      	mov	r1, r3
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	4b58      	ldr	r3, [pc, #352]	; (80043e4 <UARTstateManagement+0x57c>)
 8004284:	f7fc fa8e 	bl	80007a4 <__aeabi_ddiv>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4610      	mov	r0, r2
 800428e:	4619      	mov	r1, r3
 8004290:	f7fc fb70 	bl	8000974 <__aeabi_d2uiz>
 8004294:	4603      	mov	r3, r0
 8004296:	b29a      	uxth	r2, r3
 8004298:	4b53      	ldr	r3, [pc, #332]	; (80043e8 <UARTstateManagement+0x580>)
 800429a:	801a      	strh	r2, [r3, #0]
					if(endEffFlag == 0 && doingTaskFlag == 1){
 800429c:	4b53      	ldr	r3, [pc, #332]	; (80043ec <UARTstateManagement+0x584>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d12e      	bne.n	8004302 <UARTstateManagement+0x49a>
 80042a4:	4b45      	ldr	r3, [pc, #276]	; (80043bc <UARTstateManagement+0x554>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d12a      	bne.n	8004302 <UARTstateManagement+0x49a>
						if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0){
 80042ac:	4b45      	ldr	r3, [pc, #276]	; (80043c4 <UARTstateManagement+0x55c>)
 80042ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80042b2:	4b44      	ldr	r3, [pc, #272]	; (80043c4 <UARTstateManagement+0x55c>)
 80042b4:	edd3 7a00 	vldr	s15, [r3]
 80042b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042bc:	eeb0 0a67 	vmov.f32	s0, s15
 80042c0:	f7fd fa77 	bl	80017b2 <AbsVal>
 80042c4:	eef0 7a40 	vmov.f32	s15, s0
 80042c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80042cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d4:	d515      	bpl.n	8004302 <UARTstateManagement+0x49a>
 80042d6:	4b3b      	ldr	r3, [pc, #236]	; (80043c4 <UARTstateManagement+0x55c>)
 80042d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80042dc:	eeb0 0a67 	vmov.f32	s0, s15
 80042e0:	f7fd fa67 	bl	80017b2 <AbsVal>
 80042e4:	eef0 7a40 	vmov.f32	s15, s0
 80042e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f4:	d505      	bpl.n	8004302 <UARTstateManagement+0x49a>
							endEffFlag = 1;
 80042f6:	4b3d      	ldr	r3, [pc, #244]	; (80043ec <UARTstateManagement+0x584>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
							goingToGoalFlag = 0;
 80042fc:	4b30      	ldr	r3, [pc, #192]	; (80043c0 <UARTstateManagement+0x558>)
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8004302:	4b2e      	ldr	r3, [pc, #184]	; (80043bc <UARTstateManagement+0x554>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d004      	beq.n	8004314 <UARTstateManagement+0x4ac>
 800430a:	4b2e      	ldr	r3, [pc, #184]	; (80043c4 <UARTstateManagement+0x55c>)
 800430c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004310:	2b01      	cmp	r3, #1
 8004312:	d126      	bne.n	8004362 <UARTstateManagement+0x4fa>
 8004314:	4b2d      	ldr	r3, [pc, #180]	; (80043cc <UARTstateManagement+0x564>)
 8004316:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 8004318:	4b2f      	ldr	r3, [pc, #188]	; (80043d8 <UARTstateManagement+0x570>)
 800431a:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 154; // start-mode
 800431c:	4b2e      	ldr	r3, [pc, #184]	; (80043d8 <UARTstateManagement+0x570>)
 800431e:	229a      	movs	r2, #154	; 0x9a
 8004320:	709a      	strb	r2, [r3, #2]
						TxBuf[3] = (posData) >> 8 ; // set high byte posData
 8004322:	4b31      	ldr	r3, [pc, #196]	; (80043e8 <UARTstateManagement+0x580>)
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	b29b      	uxth	r3, r3
 800432a:	b2da      	uxtb	r2, r3
 800432c:	4b2a      	ldr	r3, [pc, #168]	; (80043d8 <UARTstateManagement+0x570>)
 800432e:	70da      	strb	r2, [r3, #3]
						TxBuf[4] = (posData) & 0xff; // set low byte posData
 8004330:	4b2d      	ldr	r3, [pc, #180]	; (80043e8 <UARTstateManagement+0x580>)
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	4b28      	ldr	r3, [pc, #160]	; (80043d8 <UARTstateManagement+0x570>)
 8004338:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 800433a:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <UARTstateManagement+0x570>)
 800433c:	789a      	ldrb	r2, [r3, #2]
 800433e:	4b26      	ldr	r3, [pc, #152]	; (80043d8 <UARTstateManagement+0x570>)
 8004340:	78db      	ldrb	r3, [r3, #3]
 8004342:	4413      	add	r3, r2
 8004344:	b2da      	uxtb	r2, r3
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <UARTstateManagement+0x570>)
 8004348:	791b      	ldrb	r3, [r3, #4]
 800434a:	4413      	add	r3, r2
 800434c:	b2db      	uxtb	r3, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	b2da      	uxtb	r2, r3
 8004352:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <UARTstateManagement+0x570>)
 8004354:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8004356:	2206      	movs	r2, #6
 8004358:	491f      	ldr	r1, [pc, #124]	; (80043d8 <UARTstateManagement+0x570>)
 800435a:	481d      	ldr	r0, [pc, #116]	; (80043d0 <UARTstateManagement+0x568>)
 800435c:	f005 fb58 	bl	8009a10 <HAL_UART_Transmit_DMA>
					break;
 8004360:	e128      	b.n	80045b4 <UARTstateManagement+0x74c>
 8004362:	4b1e      	ldr	r3, [pc, #120]	; (80043dc <UARTstateManagement+0x574>)
 8004364:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8004366:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <UARTstateManagement+0x570>)
 8004368:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 800436a:	4a1d      	ldr	r2, [pc, #116]	; (80043e0 <UARTstateManagement+0x578>)
 800436c:	4b17      	ldr	r3, [pc, #92]	; (80043cc <UARTstateManagement+0x564>)
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 154; // start-mode
 8004372:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <UARTstateManagement+0x570>)
 8004374:	229a      	movs	r2, #154	; 0x9a
 8004376:	711a      	strb	r2, [r3, #4]
						if(homingFlag == 1 && Robot.Position <= 0.5){
 8004378:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <UARTstateManagement+0x588>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d139      	bne.n	80043f4 <UARTstateManagement+0x58c>
 8004380:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <UARTstateManagement+0x55c>)
 8004382:	edd3 7a00 	vldr	s15, [r3]
 8004386:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800438a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800438e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004392:	d82f      	bhi.n	80043f4 <UARTstateManagement+0x58c>
							TxBuf[5] = 0; // set high byte posData
 8004394:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <UARTstateManagement+0x570>)
 8004396:	2200      	movs	r2, #0
 8004398:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = 0; // set low byte posData
 800439a:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <UARTstateManagement+0x570>)
 800439c:	2200      	movs	r2, #0
 800439e:	719a      	strb	r2, [r3, #6]
 80043a0:	e034      	b.n	800440c <UARTstateManagement+0x5a4>
 80043a2:	bf00      	nop
 80043a4:	f3af 8000 	nop.w
 80043a8:	00000000 	.word	0x00000000
 80043ac:	40c38800 	.word	0x40c38800
 80043b0:	54442d18 	.word	0x54442d18
 80043b4:	400921fb 	.word	0x400921fb
 80043b8:	2000068f 	.word	0x2000068f
 80043bc:	2000068c 	.word	0x2000068c
 80043c0:	2000068d 	.word	0x2000068d
 80043c4:	20000604 	.word	0x20000604
 80043c8:	20000688 	.word	0x20000688
 80043cc:	20000018 	.word	0x20000018
 80043d0:	20000500 	.word	0x20000500
 80043d4:	20000668 	.word	0x20000668
 80043d8:	20000660 	.word	0x20000660
 80043dc:	2000001c 	.word	0x2000001c
 80043e0:	20000662 	.word	0x20000662
 80043e4:	40668000 	.word	0x40668000
 80043e8:	20000670 	.word	0x20000670
 80043ec:	2000068a 	.word	0x2000068a
 80043f0:	2000068b 	.word	0x2000068b
							TxBuf[5] = (posData) >> 8 ; // set high byte posData
 80043f4:	4b76      	ldr	r3, [pc, #472]	; (80045d0 <UARTstateManagement+0x768>)
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	4b75      	ldr	r3, [pc, #468]	; (80045d4 <UARTstateManagement+0x76c>)
 8004400:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = (posData) & 0xff; // set low byte posData
 8004402:	4b73      	ldr	r3, [pc, #460]	; (80045d0 <UARTstateManagement+0x768>)
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	b2da      	uxtb	r2, r3
 8004408:	4b72      	ldr	r3, [pc, #456]	; (80045d4 <UARTstateManagement+0x76c>)
 800440a:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 800440c:	4b71      	ldr	r3, [pc, #452]	; (80045d4 <UARTstateManagement+0x76c>)
 800440e:	791a      	ldrb	r2, [r3, #4]
 8004410:	4b70      	ldr	r3, [pc, #448]	; (80045d4 <UARTstateManagement+0x76c>)
 8004412:	795b      	ldrb	r3, [r3, #5]
 8004414:	4413      	add	r3, r2
 8004416:	b2da      	uxtb	r2, r3
 8004418:	4b6e      	ldr	r3, [pc, #440]	; (80045d4 <UARTstateManagement+0x76c>)
 800441a:	799b      	ldrb	r3, [r3, #6]
 800441c:	4413      	add	r3, r2
 800441e:	b2db      	uxtb	r3, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	b2da      	uxtb	r2, r3
 8004424:	4b6b      	ldr	r3, [pc, #428]	; (80045d4 <UARTstateManagement+0x76c>)
 8004426:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 8004428:	2208      	movs	r2, #8
 800442a:	496a      	ldr	r1, [pc, #424]	; (80045d4 <UARTstateManagement+0x76c>)
 800442c:	486a      	ldr	r0, [pc, #424]	; (80045d8 <UARTstateManagement+0x770>)
 800442e:	f005 faef 	bl	8009a10 <HAL_UART_Transmit_DMA>
					break;
 8004432:	e0bf      	b.n	80045b4 <UARTstateManagement+0x74c>
					modeNo = 11;
 8004434:	4b69      	ldr	r3, [pc, #420]	; (80045dc <UARTstateManagement+0x774>)
 8004436:	220b      	movs	r2, #11
 8004438:	701a      	strb	r2, [r3, #0]
					FlagAckFromUART = 0;
 800443a:	4b69      	ldr	r3, [pc, #420]	; (80045e0 <UARTstateManagement+0x778>)
 800443c:	2200      	movs	r2, #0
 800443e:	701a      	strb	r2, [r3, #0]
					veloData = (uint16_t)((((Robot.Velocity*30.0)/M_PI)/10.0)*255.0);
 8004440:	4b68      	ldr	r3, [pc, #416]	; (80045e4 <UARTstateManagement+0x77c>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	4618      	mov	r0, r3
 8004446:	f7fc f82b 	bl	80004a0 <__aeabi_f2d>
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	4b66      	ldr	r3, [pc, #408]	; (80045e8 <UARTstateManagement+0x780>)
 8004450:	f7fc f87e 	bl	8000550 <__aeabi_dmul>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	a358      	add	r3, pc, #352	; (adr r3, 80045c0 <UARTstateManagement+0x758>)
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f7fc f99f 	bl	80007a4 <__aeabi_ddiv>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	4b5e      	ldr	r3, [pc, #376]	; (80045ec <UARTstateManagement+0x784>)
 8004474:	f7fc f996 	bl	80007a4 <__aeabi_ddiv>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4610      	mov	r0, r2
 800447e:	4619      	mov	r1, r3
 8004480:	a351      	add	r3, pc, #324	; (adr r3, 80045c8 <UARTstateManagement+0x760>)
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	f7fc f863 	bl	8000550 <__aeabi_dmul>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4610      	mov	r0, r2
 8004490:	4619      	mov	r1, r3
 8004492:	f7fc fa6f 	bl	8000974 <__aeabi_d2uiz>
 8004496:	4603      	mov	r3, r0
 8004498:	b29a      	uxth	r2, r3
 800449a:	4b55      	ldr	r3, [pc, #340]	; (80045f0 <UARTstateManagement+0x788>)
 800449c:	801a      	strh	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 800449e:	4b55      	ldr	r3, [pc, #340]	; (80045f4 <UARTstateManagement+0x78c>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d004      	beq.n	80044b0 <UARTstateManagement+0x648>
 80044a6:	4b4f      	ldr	r3, [pc, #316]	; (80045e4 <UARTstateManagement+0x77c>)
 80044a8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d121      	bne.n	80044f4 <UARTstateManagement+0x68c>
 80044b0:	4b51      	ldr	r3, [pc, #324]	; (80045f8 <UARTstateManagement+0x790>)
 80044b2:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 80044b4:	4b47      	ldr	r3, [pc, #284]	; (80045d4 <UARTstateManagement+0x76c>)
 80044b6:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 155;
 80044b8:	4b46      	ldr	r3, [pc, #280]	; (80045d4 <UARTstateManagement+0x76c>)
 80044ba:	229b      	movs	r2, #155	; 0x9b
 80044bc:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = veloData >> 8; // set low byte posData
 80044be:	4b4c      	ldr	r3, [pc, #304]	; (80045f0 <UARTstateManagement+0x788>)
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	0a1b      	lsrs	r3, r3, #8
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	4b42      	ldr	r3, [pc, #264]	; (80045d4 <UARTstateManagement+0x76c>)
 80044ca:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 80044cc:	4b41      	ldr	r3, [pc, #260]	; (80045d4 <UARTstateManagement+0x76c>)
 80044ce:	789a      	ldrb	r2, [r3, #2]
 80044d0:	4b40      	ldr	r3, [pc, #256]	; (80045d4 <UARTstateManagement+0x76c>)
 80044d2:	78db      	ldrb	r3, [r3, #3]
 80044d4:	4413      	add	r3, r2
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	4b3e      	ldr	r3, [pc, #248]	; (80045d4 <UARTstateManagement+0x76c>)
 80044da:	791b      	ldrb	r3, [r3, #4]
 80044dc:	4413      	add	r3, r2
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	43db      	mvns	r3, r3
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	4b3b      	ldr	r3, [pc, #236]	; (80045d4 <UARTstateManagement+0x76c>)
 80044e6:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 80044e8:	2206      	movs	r2, #6
 80044ea:	493a      	ldr	r1, [pc, #232]	; (80045d4 <UARTstateManagement+0x76c>)
 80044ec:	483a      	ldr	r0, [pc, #232]	; (80045d8 <UARTstateManagement+0x770>)
 80044ee:	f005 fa8f 	bl	8009a10 <HAL_UART_Transmit_DMA>
					break;
 80044f2:	e05f      	b.n	80045b4 <UARTstateManagement+0x74c>
 80044f4:	4b41      	ldr	r3, [pc, #260]	; (80045fc <UARTstateManagement+0x794>)
 80044f6:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 80044f8:	4b36      	ldr	r3, [pc, #216]	; (80045d4 <UARTstateManagement+0x76c>)
 80044fa:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 80044fc:	4a40      	ldr	r2, [pc, #256]	; (8004600 <UARTstateManagement+0x798>)
 80044fe:	4b3e      	ldr	r3, [pc, #248]	; (80045f8 <UARTstateManagement+0x790>)
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 155; // start-mode
 8004504:	4b33      	ldr	r3, [pc, #204]	; (80045d4 <UARTstateManagement+0x76c>)
 8004506:	229b      	movs	r2, #155	; 0x9b
 8004508:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = (veloData) >> 8; // set low byte posData
 800450a:	4b39      	ldr	r3, [pc, #228]	; (80045f0 <UARTstateManagement+0x788>)
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	0a1b      	lsrs	r3, r3, #8
 8004510:	b29b      	uxth	r3, r3
 8004512:	b2da      	uxtb	r2, r3
 8004514:	4b2f      	ldr	r3, [pc, #188]	; (80045d4 <UARTstateManagement+0x76c>)
 8004516:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8004518:	4b2e      	ldr	r3, [pc, #184]	; (80045d4 <UARTstateManagement+0x76c>)
 800451a:	791a      	ldrb	r2, [r3, #4]
 800451c:	4b2d      	ldr	r3, [pc, #180]	; (80045d4 <UARTstateManagement+0x76c>)
 800451e:	795b      	ldrb	r3, [r3, #5]
 8004520:	4413      	add	r3, r2
 8004522:	b2da      	uxtb	r2, r3
 8004524:	4b2b      	ldr	r3, [pc, #172]	; (80045d4 <UARTstateManagement+0x76c>)
 8004526:	799b      	ldrb	r3, [r3, #6]
 8004528:	4413      	add	r3, r2
 800452a:	b2db      	uxtb	r3, r3
 800452c:	43db      	mvns	r3, r3
 800452e:	b2da      	uxtb	r2, r3
 8004530:	4b28      	ldr	r3, [pc, #160]	; (80045d4 <UARTstateManagement+0x76c>)
 8004532:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 8004534:	2208      	movs	r2, #8
 8004536:	4927      	ldr	r1, [pc, #156]	; (80045d4 <UARTstateManagement+0x76c>)
 8004538:	4827      	ldr	r0, [pc, #156]	; (80045d8 <UARTstateManagement+0x770>)
 800453a:	f005 fa69 	bl	8009a10 <HAL_UART_Transmit_DMA>
					break;
 800453e:	e039      	b.n	80045b4 <UARTstateManagement+0x74c>
					modeNo = 12;
 8004540:	4b26      	ldr	r3, [pc, #152]	; (80045dc <UARTstateManagement+0x774>)
 8004542:	220c      	movs	r2, #12
 8004544:	701a      	strb	r2, [r3, #0]
					RobotState = EndEff;
 8004546:	4b2f      	ldr	r3, [pc, #188]	; (8004604 <UARTstateManagement+0x79c>)
 8004548:	2203      	movs	r2, #3
 800454a:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 800454c:	4b2e      	ldr	r3, [pc, #184]	; (8004608 <UARTstateManagement+0x7a0>)
 800454e:	2201      	movs	r2, #1
 8004550:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorReadFlag =  1;
 8004552:	4b2e      	ldr	r3, [pc, #184]	; (800460c <UARTstateManagement+0x7a4>)
 8004554:	2201      	movs	r2, #1
 8004556:	701a      	strb	r2, [r3, #0]
					EndEffState = CheckBeforRun;
 8004558:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <UARTstateManagement+0x7a8>)
 800455a:	2201      	movs	r2, #1
 800455c:	701a      	strb	r2, [r3, #0]
					endEffFlag = 1;
 800455e:	4b2d      	ldr	r3, [pc, #180]	; (8004614 <UARTstateManagement+0x7ac>)
 8004560:	2201      	movs	r2, #1
 8004562:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004564:	2202      	movs	r2, #2
 8004566:	4924      	ldr	r1, [pc, #144]	; (80045f8 <UARTstateManagement+0x790>)
 8004568:	481b      	ldr	r0, [pc, #108]	; (80045d8 <UARTstateManagement+0x770>)
 800456a:	f005 fa51 	bl	8009a10 <HAL_UART_Transmit_DMA>
					break;
 800456e:	e021      	b.n	80045b4 <UARTstateManagement+0x74c>
					modeNo = 13;
 8004570:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <UARTstateManagement+0x774>)
 8004572:	220d      	movs	r2, #13
 8004574:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 8004576:	4b27      	ldr	r3, [pc, #156]	; (8004614 <UARTstateManagement+0x7ac>)
 8004578:	2200      	movs	r2, #0
 800457a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800457c:	2202      	movs	r2, #2
 800457e:	491e      	ldr	r1, [pc, #120]	; (80045f8 <UARTstateManagement+0x790>)
 8004580:	4815      	ldr	r0, [pc, #84]	; (80045d8 <UARTstateManagement+0x770>)
 8004582:	f005 fa45 	bl	8009a10 <HAL_UART_Transmit_DMA>
					break;
 8004586:	e015      	b.n	80045b4 <UARTstateManagement+0x74c>
					modeNo = 14;
 8004588:	4b14      	ldr	r3, [pc, #80]	; (80045dc <UARTstateManagement+0x774>)
 800458a:	220e      	movs	r2, #14
 800458c:	701a      	strb	r2, [r3, #0]
					RobotRunToPositon(Robot.HomePositon);
 800458e:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <UARTstateManagement+0x77c>)
 8004590:	edd3 7a05 	vldr	s15, [r3, #20]
 8004594:	eeb0 0a67 	vmov.f32	s0, s15
 8004598:	f000 fb86 	bl	8004ca8 <RobotRunToPositon>
					homingFlag = 1;
 800459c:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <UARTstateManagement+0x7b0>)
 800459e:	2201      	movs	r2, #1
 80045a0:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80045a2:	2202      	movs	r2, #2
 80045a4:	4914      	ldr	r1, [pc, #80]	; (80045f8 <UARTstateManagement+0x790>)
 80045a6:	480c      	ldr	r0, [pc, #48]	; (80045d8 <UARTstateManagement+0x770>)
 80045a8:	f005 fa32 	bl	8009a10 <HAL_UART_Transmit_DMA>
					break;
 80045ac:	e002      	b.n	80045b4 <UARTstateManagement+0x74c>
			break;
 80045ae:	bf00      	nop
 80045b0:	e000      	b.n	80045b4 <UARTstateManagement+0x74c>
			break;
 80045b2:	bf00      	nop
}
 80045b4:	bf00      	nop
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	f3af 8000 	nop.w
 80045c0:	54442d18 	.word	0x54442d18
 80045c4:	400921fb 	.word	0x400921fb
 80045c8:	00000000 	.word	0x00000000
 80045cc:	406fe000 	.word	0x406fe000
 80045d0:	20000670 	.word	0x20000670
 80045d4:	20000660 	.word	0x20000660
 80045d8:	20000500 	.word	0x20000500
 80045dc:	2000068f 	.word	0x2000068f
 80045e0:	20000668 	.word	0x20000668
 80045e4:	20000604 	.word	0x20000604
 80045e8:	403e0000 	.word	0x403e0000
 80045ec:	40240000 	.word	0x40240000
 80045f0:	20000672 	.word	0x20000672
 80045f4:	2000068c 	.word	0x2000068c
 80045f8:	20000018 	.word	0x20000018
 80045fc:	2000001c 	.word	0x2000001c
 8004600:	20000662 	.word	0x20000662
 8004604:	20000635 	.word	0x20000635
 8004608:	2000082a 	.word	0x2000082a
 800460c:	20000829 	.word	0x20000829
 8004610:	20000000 	.word	0x20000000
 8004614:	2000068a 	.word	0x2000068a
 8004618:	2000068b 	.word	0x2000068b

0800461c <RobotstateManagement>:

void RobotstateManagement()
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
	switch (RobotState)
 8004620:	4b86      	ldr	r3, [pc, #536]	; (800483c <RobotstateManagement+0x220>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b04      	cmp	r3, #4
 8004626:	f200 8106 	bhi.w	8004836 <RobotstateManagement+0x21a>
 800462a:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <RobotstateManagement+0x14>)
 800462c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004630:	08004645 	.word	0x08004645
 8004634:	08004663 	.word	0x08004663
 8004638:	08004731 	.word	0x08004731
 800463c:	08004827 	.word	0x08004827
 8004640:	0800482d 	.word	0x0800482d
	{
		case init:
			// Reset all Parameter
			Robotinit(&Robot);
 8004644:	487e      	ldr	r0, [pc, #504]	; (8004840 <RobotstateManagement+0x224>)
 8004646:	f7fd f87f 	bl	8001748 <Robotinit>
			// Start Finding home Position
			Robot.flagSethome = 1;
 800464a:	4b7d      	ldr	r3, [pc, #500]	; (8004840 <RobotstateManagement+0x224>)
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			// Turn 360 Deg
			RobotRunToPositon(360.0);
 8004652:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8004844 <RobotstateManagement+0x228>
 8004656:	f000 fb27 	bl	8004ca8 <RobotRunToPositon>
			// Goto next State
			RobotState = FindHome;
 800465a:	4b78      	ldr	r3, [pc, #480]	; (800483c <RobotstateManagement+0x220>)
 800465c:	2201      	movs	r2, #1
 800465e:	701a      	strb	r2, [r3, #0]
			break;
 8004660:	e0e9      	b.n	8004836 <RobotstateManagement+0x21a>
		case FindHome:
			if(Robot.RunningFlag == 0)
 8004662:	4b77      	ldr	r3, [pc, #476]	; (8004840 <RobotstateManagement+0x224>)
 8004664:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004668:	2b00      	cmp	r3, #0
 800466a:	f040 80e1 	bne.w	8004830 <RobotstateManagement+0x214>
			{
				if(Robot.flagSethome == 2)
 800466e:	4b74      	ldr	r3, [pc, #464]	; (8004840 <RobotstateManagement+0x224>)
 8004670:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004674:	2b02      	cmp	r3, #2
 8004676:	d10f      	bne.n	8004698 <RobotstateManagement+0x7c>
				{
					RobotRunToPositon(Robot.HomePositon);
 8004678:	4b71      	ldr	r3, [pc, #452]	; (8004840 <RobotstateManagement+0x224>)
 800467a:	edd3 7a05 	vldr	s15, [r3, #20]
 800467e:	eeb0 0a67 	vmov.f32	s0, s15
 8004682:	f000 fb11 	bl	8004ca8 <RobotRunToPositon>
					Robot.RunningFlag = 1;
 8004686:	4b6e      	ldr	r3, [pc, #440]	; (8004840 <RobotstateManagement+0x224>)
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					Robot.flagSethome = 3;
 800468e:	4b6c      	ldr	r3, [pc, #432]	; (8004840 <RobotstateManagement+0x224>)
 8004690:	2203      	movs	r2, #3
 8004692:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
					FlagAckFromUART = 1;
					UARTState = MCUConnect;
					RobotState = NormalOperation;
				}
			}
			break;
 8004696:	e0cb      	b.n	8004830 <RobotstateManagement+0x214>
				else if(Robot.flagSethome == 3)
 8004698:	4b69      	ldr	r3, [pc, #420]	; (8004840 <RobotstateManagement+0x224>)
 800469a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800469e:	2b03      	cmp	r3, #3
 80046a0:	f040 80c6 	bne.w	8004830 <RobotstateManagement+0x214>
					TIM_ResetCounter(TIM2);
 80046a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80046a8:	f000 fb2e 	bl	8004d08 <TIM_ResetCounter>
					EncoderRawData[0] = 0;
 80046ac:	4b66      	ldr	r3, [pc, #408]	; (8004848 <RobotstateManagement+0x22c>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
					EncoderRawData[1] = 0;
 80046b2:	4b65      	ldr	r3, [pc, #404]	; (8004848 <RobotstateManagement+0x22c>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	605a      	str	r2, [r3, #4]
					WrappingStep = 0;
 80046b8:	4b64      	ldr	r3, [pc, #400]	; (800484c <RobotstateManagement+0x230>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
					CoefficientAndTimeCalculation(&traject,0.0,0.0);
 80046be:	eddf 0a64 	vldr	s1, [pc, #400]	; 8004850 <RobotstateManagement+0x234>
 80046c2:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8004850 <RobotstateManagement+0x234>
 80046c6:	4863      	ldr	r0, [pc, #396]	; (8004854 <RobotstateManagement+0x238>)
 80046c8:	f7fd f896 	bl	80017f8 <CoefficientAndTimeCalculation>
					Robot.flagStartTime = 1;
 80046cc:	4b5c      	ldr	r3, [pc, #368]	; (8004840 <RobotstateManagement+0x224>)
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					StartTime = 0;
 80046d4:	4960      	ldr	r1, [pc, #384]	; (8004858 <RobotstateManagement+0x23c>)
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	e9c1 2300 	strd	r2, r3, [r1]
					CurrentTime = 0;
 80046e2:	495e      	ldr	r1, [pc, #376]	; (800485c <RobotstateManagement+0x240>)
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	e9c1 2300 	strd	r2, r3, [r1]
					PositionDeg[0] = 0;
 80046f0:	4b5b      	ldr	r3, [pc, #364]	; (8004860 <RobotstateManagement+0x244>)
 80046f2:	f04f 0200 	mov.w	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
					PositionDeg[1] = 0;
 80046f8:	4b59      	ldr	r3, [pc, #356]	; (8004860 <RobotstateManagement+0x244>)
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	605a      	str	r2, [r3, #4]
					KalmanMatrixReset(&KalmanVar, Pvar);
 8004700:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8004864 <RobotstateManagement+0x248>
 8004704:	4858      	ldr	r0, [pc, #352]	; (8004868 <RobotstateManagement+0x24c>)
 8004706:	f7fc fc8b 	bl	8001020 <KalmanMatrixReset>
					Robotinit(&Robot);
 800470a:	484d      	ldr	r0, [pc, #308]	; (8004840 <RobotstateManagement+0x224>)
 800470c:	f7fd f81c 	bl	8001748 <Robotinit>
					PIDAController_Init(&PidVelo);
 8004710:	4856      	ldr	r0, [pc, #344]	; (800486c <RobotstateManagement+0x250>)
 8004712:	f7fc fe2d 	bl	8001370 <PIDAController_Init>
					PIDAController_Init(&PidPos);
 8004716:	4856      	ldr	r0, [pc, #344]	; (8004870 <RobotstateManagement+0x254>)
 8004718:	f7fc fe2a 	bl	8001370 <PIDAController_Init>
					FlagAckFromUART = 1;
 800471c:	4b55      	ldr	r3, [pc, #340]	; (8004874 <RobotstateManagement+0x258>)
 800471e:	2201      	movs	r2, #1
 8004720:	701a      	strb	r2, [r3, #0]
					UARTState = MCUConnect;
 8004722:	4b55      	ldr	r3, [pc, #340]	; (8004878 <RobotstateManagement+0x25c>)
 8004724:	2202      	movs	r2, #2
 8004726:	701a      	strb	r2, [r3, #0]
					RobotState = NormalOperation;
 8004728:	4b44      	ldr	r3, [pc, #272]	; (800483c <RobotstateManagement+0x220>)
 800472a:	2202      	movs	r2, #2
 800472c:	701a      	strb	r2, [r3, #0]
			break;
 800472e:	e07f      	b.n	8004830 <RobotstateManagement+0x214>
		case NormalOperation:
			if(doingTaskFlag == 1 && Robot.RunningFlag == 1 && endEffFlag == 0){
 8004730:	4b52      	ldr	r3, [pc, #328]	; (800487c <RobotstateManagement+0x260>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d158      	bne.n	80047ea <RobotstateManagement+0x1ce>
 8004738:	4b41      	ldr	r3, [pc, #260]	; (8004840 <RobotstateManagement+0x224>)
 800473a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800473e:	2b01      	cmp	r3, #1
 8004740:	d153      	bne.n	80047ea <RobotstateManagement+0x1ce>
 8004742:	4b4f      	ldr	r3, [pc, #316]	; (8004880 <RobotstateManagement+0x264>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d14f      	bne.n	80047ea <RobotstateManagement+0x1ce>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800474a:	2201      	movs	r2, #1
 800474c:	2108      	movs	r1, #8
 800474e:	484d      	ldr	r0, [pc, #308]	; (8004884 <RobotstateManagement+0x268>)
 8004750:	f001 fcda 	bl	8006108 <HAL_GPIO_WritePin>
				if(goalFlag == 1 && goingToGoalFlag == 0){
 8004754:	4b4c      	ldr	r3, [pc, #304]	; (8004888 <RobotstateManagement+0x26c>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d11d      	bne.n	8004798 <RobotstateManagement+0x17c>
 800475c:	4b4b      	ldr	r3, [pc, #300]	; (800488c <RobotstateManagement+0x270>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d119      	bne.n	8004798 <RobotstateManagement+0x17c>
					goingToGoalFlag = 1;
 8004764:	4b49      	ldr	r3, [pc, #292]	; (800488c <RobotstateManagement+0x270>)
 8004766:	2201      	movs	r2, #1
 8004768:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = uartPos;
 800476a:	4b49      	ldr	r3, [pc, #292]	; (8004890 <RobotstateManagement+0x274>)
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	4b32      	ldr	r3, [pc, #200]	; (8004840 <RobotstateManagement+0x224>)
 8004778:	edc3 7a03 	vstr	s15, [r3, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon);
 800477c:	4b30      	ldr	r3, [pc, #192]	; (8004840 <RobotstateManagement+0x224>)
 800477e:	edd3 7a00 	vldr	s15, [r3]
 8004782:	4b2f      	ldr	r3, [pc, #188]	; (8004840 <RobotstateManagement+0x224>)
 8004784:	ed93 7a03 	vldr	s14, [r3, #12]
 8004788:	eef0 0a47 	vmov.f32	s1, s14
 800478c:	eeb0 0a67 	vmov.f32	s0, s15
 8004790:	4830      	ldr	r0, [pc, #192]	; (8004854 <RobotstateManagement+0x238>)
 8004792:	f7fd f831 	bl	80017f8 <CoefficientAndTimeCalculation>
 8004796:	e028      	b.n	80047ea <RobotstateManagement+0x1ce>
				}
				else if(goalFlag == 2 && goingToGoalFlag == 0){
 8004798:	4b3b      	ldr	r3, [pc, #236]	; (8004888 <RobotstateManagement+0x26c>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d124      	bne.n	80047ea <RobotstateManagement+0x1ce>
 80047a0:	4b3a      	ldr	r3, [pc, #232]	; (800488c <RobotstateManagement+0x270>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d120      	bne.n	80047ea <RobotstateManagement+0x1ce>
					goingToGoalFlag = 1;
 80047a8:	4b38      	ldr	r3, [pc, #224]	; (800488c <RobotstateManagement+0x270>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = goalDeg[uartGoal[goalIDX]-1];
 80047ae:	4b39      	ldr	r3, [pc, #228]	; (8004894 <RobotstateManagement+0x278>)
 80047b0:	f993 3000 	ldrsb.w	r3, [r3]
 80047b4:	461a      	mov	r2, r3
 80047b6:	4b38      	ldr	r3, [pc, #224]	; (8004898 <RobotstateManagement+0x27c>)
 80047b8:	5c9b      	ldrb	r3, [r3, r2]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	4a37      	ldr	r2, [pc, #220]	; (800489c <RobotstateManagement+0x280>)
 80047be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <RobotstateManagement+0x224>)
 80047cc:	edc3 7a03 	vstr	s15, [r3, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon);
 80047d0:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <RobotstateManagement+0x224>)
 80047d2:	edd3 7a00 	vldr	s15, [r3]
 80047d6:	4b1a      	ldr	r3, [pc, #104]	; (8004840 <RobotstateManagement+0x224>)
 80047d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80047dc:	eef0 0a47 	vmov.f32	s1, s14
 80047e0:	eeb0 0a67 	vmov.f32	s0, s15
 80047e4:	481b      	ldr	r0, [pc, #108]	; (8004854 <RobotstateManagement+0x238>)
 80047e6:	f7fd f807 	bl	80017f8 <CoefficientAndTimeCalculation>
				}
			}

			if(goingToGoalFlag == 0 && doingTaskFlag == 1 && Robot.RunningFlag == 0 && endEffFlag == 1){
 80047ea:	4b28      	ldr	r3, [pc, #160]	; (800488c <RobotstateManagement+0x270>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d120      	bne.n	8004834 <RobotstateManagement+0x218>
 80047f2:	4b22      	ldr	r3, [pc, #136]	; (800487c <RobotstateManagement+0x260>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d11c      	bne.n	8004834 <RobotstateManagement+0x218>
 80047fa:	4b11      	ldr	r3, [pc, #68]	; (8004840 <RobotstateManagement+0x224>)
 80047fc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004800:	2b00      	cmp	r3, #0
 8004802:	d117      	bne.n	8004834 <RobotstateManagement+0x218>
 8004804:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <RobotstateManagement+0x264>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d113      	bne.n	8004834 <RobotstateManagement+0x218>
				RobotState = EndEff;
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <RobotstateManagement+0x220>)
 800480e:	2203      	movs	r2, #3
 8004810:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 8004812:	4b23      	ldr	r3, [pc, #140]	; (80048a0 <RobotstateManagement+0x284>)
 8004814:	2201      	movs	r2, #1
 8004816:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 8004818:	4b22      	ldr	r3, [pc, #136]	; (80048a4 <RobotstateManagement+0x288>)
 800481a:	2201      	movs	r2, #1
 800481c:	701a      	strb	r2, [r3, #0]
				EndEffState = CheckBeforRun;
 800481e:	4b22      	ldr	r3, [pc, #136]	; (80048a8 <RobotstateManagement+0x28c>)
 8004820:	2201      	movs	r2, #1
 8004822:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004824:	e006      	b.n	8004834 <RobotstateManagement+0x218>
		case EndEff:
			EndEffstateManagement();
 8004826:	f000 f887 	bl	8004938 <EndEffstateManagement>
			break;
 800482a:	e004      	b.n	8004836 <RobotstateManagement+0x21a>
		case Emergency:
			// Luv u pls pass
			break;
 800482c:	bf00      	nop
 800482e:	e002      	b.n	8004836 <RobotstateManagement+0x21a>
			break;
 8004830:	bf00      	nop
 8004832:	e000      	b.n	8004836 <RobotstateManagement+0x21a>
			break;
 8004834:	bf00      	nop
	}
}
 8004836:	bf00      	nop
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000635 	.word	0x20000635
 8004840:	20000604 	.word	0x20000604
 8004844:	43b40000 	.word	0x43b40000
 8004848:	200006a0 	.word	0x200006a0
 800484c:	200006a8 	.word	0x200006a8
 8004850:	00000000 	.word	0x00000000
 8004854:	2000072c 	.word	0x2000072c
 8004858:	200007e8 	.word	0x200007e8
 800485c:	200007f0 	.word	0x200007f0
 8004860:	200006b0 	.word	0x200006b0
 8004864:	447a0000 	.word	0x447a0000
 8004868:	20000020 	.word	0x20000020
 800486c:	200006c0 	.word	0x200006c0
 8004870:	200006f4 	.word	0x200006f4
 8004874:	20000668 	.word	0x20000668
 8004878:	20000634 	.word	0x20000634
 800487c:	2000068c 	.word	0x2000068c
 8004880:	2000068a 	.word	0x2000068a
 8004884:	40020400 	.word	0x40020400
 8004888:	20000689 	.word	0x20000689
 800488c:	2000068d 	.word	0x2000068d
 8004890:	20000676 	.word	0x20000676
 8004894:	20000688 	.word	0x20000688
 8004898:	20000678 	.word	0x20000678
 800489c:	20000004 	.word	0x20000004
 80048a0:	2000082a 	.word	0x2000082a
 80048a4:	20000829 	.word	0x20000829
 80048a8:	20000000 	.word	0x20000000

080048ac <I2CWriteFcn>:

void I2CWriteFcn(uint8_t *Wdata) {
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorWriteFlag == 1  && hi2c1.State == HAL_I2C_STATE_READY) {
 80048b4:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <I2CWriteFcn+0x40>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d112      	bne.n	80048e2 <I2CWriteFcn+0x36>
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <I2CWriteFcn+0x44>)
 80048be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d10c      	bne.n	80048e2 <I2CWriteFcn+0x36>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	781a      	ldrb	r2, [r3, #0]
		static uint8_t data[EndEffRxBuf_SIZE];
		memcpy ((uint8_t *)data, (uint8_t *)Wdata, EndEffRxBuf_SIZE);
 80048cc:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <I2CWriteFcn+0x48>)
 80048ce:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, Endeff_ADDR, data, I2CTxDataLen);
 80048d0:	2301      	movs	r3, #1
 80048d2:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <I2CWriteFcn+0x48>)
 80048d4:	2146      	movs	r1, #70	; 0x46
 80048d6:	4806      	ldr	r0, [pc, #24]	; (80048f0 <I2CWriteFcn+0x44>)
 80048d8:	f001 fda6 	bl	8006428 <HAL_I2C_Master_Transmit_IT>
		I2CEndEffectorWriteFlag = 0;
 80048dc:	4b03      	ldr	r3, [pc, #12]	; (80048ec <I2CWriteFcn+0x40>)
 80048de:	2200      	movs	r2, #0
 80048e0:	701a      	strb	r2, [r3, #0]
	}
}
 80048e2:	bf00      	nop
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	2000082a 	.word	0x2000082a
 80048f0:	200003d4 	.word	0x200003d4
 80048f4:	20000844 	.word	0x20000844

080048f8 <I2CReadFcn>:
void I2CReadFcn(uint8_t *Rdata) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY) {
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <I2CReadFcn+0x38>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d10e      	bne.n	8004926 <I2CReadFcn+0x2e>
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <I2CReadFcn+0x3c>)
 800490a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b20      	cmp	r3, #32
 8004912:	d108      	bne.n	8004926 <I2CReadFcn+0x2e>
		HAL_I2C_Master_Receive_IT(&hi2c1, Endeff_ADDR, Rdata, I2CRxDataLen);
 8004914:	2301      	movs	r3, #1
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	2146      	movs	r1, #70	; 0x46
 800491a:	4806      	ldr	r0, [pc, #24]	; (8004934 <I2CReadFcn+0x3c>)
 800491c:	f001 fe2a 	bl	8006574 <HAL_I2C_Master_Receive_IT>
		I2CEndEffectorReadFlag =  0;
 8004920:	4b03      	ldr	r3, [pc, #12]	; (8004930 <I2CReadFcn+0x38>)
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
	}
}
 8004926:	bf00      	nop
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000829 	.word	0x20000829
 8004934:	200003d4 	.word	0x200003d4

08004938 <EndEffstateManagement>:

void EndEffstateManagement()
{
 8004938:	b5b0      	push	{r4, r5, r7, lr}
 800493a:	af00      	add	r7, sp, #0
	switch (EndEffState)
 800493c:	4b85      	ldr	r3, [pc, #532]	; (8004b54 <EndEffstateManagement+0x21c>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b04      	cmp	r3, #4
 8004942:	f200 8105 	bhi.w	8004b50 <EndEffstateManagement+0x218>
 8004946:	a201      	add	r2, pc, #4	; (adr r2, 800494c <EndEffstateManagement+0x14>)
 8004948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494c:	08004961 	.word	0x08004961
 8004950:	08004969 	.word	0x08004969
 8004954:	080049c1 	.word	0x080049c1
 8004958:	08004a2d 	.word	0x08004a2d
 800495c:	08004a55 	.word	0x08004a55
	{
		case idle:
			// Do not thing wait for command
			EndEffStatus = AwaitCommand;
 8004960:	4b7d      	ldr	r3, [pc, #500]	; (8004b58 <EndEffstateManagement+0x220>)
 8004962:	2203      	movs	r2, #3
 8004964:	701a      	strb	r2, [r3, #0]
//			I2CEndEffectorWriteFlag = 1;
			break;
 8004966:	e0f3      	b.n	8004b50 <EndEffstateManagement+0x218>
		case CheckBeforRun:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 8004968:	4b7c      	ldr	r3, [pc, #496]	; (8004b5c <EndEffstateManagement+0x224>)
 800496a:	2223      	movs	r2, #35	; 0x23
 800496c:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 800496e:	487b      	ldr	r0, [pc, #492]	; (8004b5c <EndEffstateManagement+0x224>)
 8004970:	f7ff ff9c 	bl	80048ac <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8004974:	4b7a      	ldr	r3, [pc, #488]	; (8004b60 <EndEffstateManagement+0x228>)
 8004976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b20      	cmp	r3, #32
 800497e:	f040 80e0 	bne.w	8004b42 <EndEffstateManagement+0x20a>
			{
				I2CReadFcn(I2CRxDataBuffer);
 8004982:	4878      	ldr	r0, [pc, #480]	; (8004b64 <EndEffstateManagement+0x22c>)
 8004984:	f7ff ffb8 	bl	80048f8 <I2CReadFcn>
				if(hi2c1.State == HAL_I2C_STATE_READY)
 8004988:	4b75      	ldr	r3, [pc, #468]	; (8004b60 <EndEffstateManagement+0x228>)
 800498a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b20      	cmp	r3, #32
 8004992:	f040 80d6 	bne.w	8004b42 <EndEffstateManagement+0x20a>
				{
					if(I2CRxDataBuffer[0] == 0x78)
 8004996:	4b73      	ldr	r3, [pc, #460]	; (8004b64 <EndEffstateManagement+0x22c>)
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	2b78      	cmp	r3, #120	; 0x78
 800499c:	d10c      	bne.n	80049b8 <EndEffstateManagement+0x80>
					{
						EndEffState = OpenLaser;
 800499e:	4b6d      	ldr	r3, [pc, #436]	; (8004b54 <EndEffstateManagement+0x21c>)
 80049a0:	2202      	movs	r2, #2
 80049a2:	701a      	strb	r2, [r3, #0]
						openLaserWriteFlag = 1;
 80049a4:	4b70      	ldr	r3, [pc, #448]	; (8004b68 <EndEffstateManagement+0x230>)
 80049a6:	2201      	movs	r2, #1
 80049a8:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorWriteFlag = 1;
 80049aa:	4b70      	ldr	r3, [pc, #448]	; (8004b6c <EndEffstateManagement+0x234>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorReadFlag =  0;
 80049b0:	4b6f      	ldr	r3, [pc, #444]	; (8004b70 <EndEffstateManagement+0x238>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
						EndEffState = idle;
					}
				}
			}

		break;
 80049b6:	e0c4      	b.n	8004b42 <EndEffstateManagement+0x20a>
						EndEffState = idle;
 80049b8:	4b66      	ldr	r3, [pc, #408]	; (8004b54 <EndEffstateManagement+0x21c>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]
		break;
 80049be:	e0c0      	b.n	8004b42 <EndEffstateManagement+0x20a>
		case OpenLaser:
			// Open Laser
			if(openLaserWriteFlag == 1){
 80049c0:	4b69      	ldr	r3, [pc, #420]	; (8004b68 <EndEffstateManagement+0x230>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d114      	bne.n	80049f2 <EndEffstateManagement+0xba>
				I2CTxDataBuffer[0] = 0x45;
 80049c8:	4b64      	ldr	r3, [pc, #400]	; (8004b5c <EndEffstateManagement+0x224>)
 80049ca:	2245      	movs	r2, #69	; 0x45
 80049cc:	701a      	strb	r2, [r3, #0]
				I2CWriteFcn(I2CTxDataBuffer);
 80049ce:	4863      	ldr	r0, [pc, #396]	; (8004b5c <EndEffstateManagement+0x224>)
 80049d0:	f7ff ff6c 	bl	80048ac <I2CWriteFcn>
				openLaserWriteFlag = 0;
 80049d4:	4b64      	ldr	r3, [pc, #400]	; (8004b68 <EndEffstateManagement+0x230>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	701a      	strb	r2, [r3, #0]
				endEffLoopTime = Micros();
 80049da:	f7ff f8bb 	bl	8003b54 <Micros>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4964      	ldr	r1, [pc, #400]	; (8004b74 <EndEffstateManagement+0x23c>)
 80049e4:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80049e8:	2201      	movs	r2, #1
 80049ea:	2110      	movs	r1, #16
 80049ec:	4862      	ldr	r0, [pc, #392]	; (8004b78 <EndEffstateManagement+0x240>)
 80049ee:	f001 fb8b 	bl	8006108 <HAL_GPIO_WritePin>
			}
			if(hi2c1.State == HAL_I2C_STATE_READY && Micros() - endEffLoopTime > 5000)
 80049f2:	4b5b      	ldr	r3, [pc, #364]	; (8004b60 <EndEffstateManagement+0x228>)
 80049f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b20      	cmp	r3, #32
 80049fc:	f040 80a3 	bne.w	8004b46 <EndEffstateManagement+0x20e>
 8004a00:	f7ff f8a8 	bl	8003b54 <Micros>
 8004a04:	4b5b      	ldr	r3, [pc, #364]	; (8004b74 <EndEffstateManagement+0x23c>)
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	1a84      	subs	r4, r0, r2
 8004a0c:	eb61 0503 	sbc.w	r5, r1, r3
 8004a10:	f241 3389 	movw	r3, #5001	; 0x1389
 8004a14:	429c      	cmp	r4, r3
 8004a16:	f175 0300 	sbcs.w	r3, r5, #0
 8004a1a:	f0c0 8094 	bcc.w	8004b46 <EndEffstateManagement+0x20e>
			{
				EndEffState = SetupReadStatus;
 8004a1e:	4b4d      	ldr	r3, [pc, #308]	; (8004b54 <EndEffstateManagement+0x21c>)
 8004a20:	2203      	movs	r2, #3
 8004a22:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 8004a24:	4b51      	ldr	r3, [pc, #324]	; (8004b6c <EndEffstateManagement+0x234>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004a2a:	e08c      	b.n	8004b46 <EndEffstateManagement+0x20e>
		case SetupReadStatus:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 8004a2c:	4b4b      	ldr	r3, [pc, #300]	; (8004b5c <EndEffstateManagement+0x224>)
 8004a2e:	2223      	movs	r2, #35	; 0x23
 8004a30:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 8004a32:	484a      	ldr	r0, [pc, #296]	; (8004b5c <EndEffstateManagement+0x224>)
 8004a34:	f7ff ff3a 	bl	80048ac <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8004a38:	4b49      	ldr	r3, [pc, #292]	; (8004b60 <EndEffstateManagement+0x228>)
 8004a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	f040 8082 	bne.w	8004b4a <EndEffstateManagement+0x212>
			{
				EndEffState = ReadStatus;
 8004a46:	4b43      	ldr	r3, [pc, #268]	; (8004b54 <EndEffstateManagement+0x21c>)
 8004a48:	2204      	movs	r2, #4
 8004a4a:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 8004a4c:	4b48      	ldr	r3, [pc, #288]	; (8004b70 <EndEffstateManagement+0x238>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004a52:	e07a      	b.n	8004b4a <EndEffstateManagement+0x212>
		case ReadStatus:
			I2CReadFcn(I2CRxDataBuffer);
 8004a54:	4843      	ldr	r0, [pc, #268]	; (8004b64 <EndEffstateManagement+0x22c>)
 8004a56:	f7ff ff4f 	bl	80048f8 <I2CReadFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8004a5a:	4b41      	ldr	r3, [pc, #260]	; (8004b60 <EndEffstateManagement+0x228>)
 8004a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d173      	bne.n	8004b4e <EndEffstateManagement+0x216>
			{
				I2CEndEffectorReadFlag =  1;
 8004a66:	4b42      	ldr	r3, [pc, #264]	; (8004b70 <EndEffstateManagement+0x238>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	701a      	strb	r2, [r3, #0]
				if(I2CRxDataBuffer[0] == 0x78)
 8004a6c:	4b3d      	ldr	r3, [pc, #244]	; (8004b64 <EndEffstateManagement+0x22c>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b78      	cmp	r3, #120	; 0x78
 8004a72:	d13c      	bne.n	8004aee <EndEffstateManagement+0x1b6>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8004a74:	2200      	movs	r2, #0
 8004a76:	2110      	movs	r1, #16
 8004a78:	483f      	ldr	r0, [pc, #252]	; (8004b78 <EndEffstateManagement+0x240>)
 8004a7a:	f001 fb45 	bl	8006108 <HAL_GPIO_WritePin>
					EndEffState = idle;
 8004a7e:	4b35      	ldr	r3, [pc, #212]	; (8004b54 <EndEffstateManagement+0x21c>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]
					EndEffStatus = AwaitCommand;
 8004a84:	4b34      	ldr	r3, [pc, #208]	; (8004b58 <EndEffstateManagement+0x220>)
 8004a86:	2203      	movs	r2, #3
 8004a88:	701a      	strb	r2, [r3, #0]
					RobotState = NormalOperation;
 8004a8a:	4b3c      	ldr	r3, [pc, #240]	; (8004b7c <EndEffstateManagement+0x244>)
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 8004a90:	4b3b      	ldr	r3, [pc, #236]	; (8004b80 <EndEffstateManagement+0x248>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 1){
 8004a96:	4b3b      	ldr	r3, [pc, #236]	; (8004b84 <EndEffstateManagement+0x24c>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d157      	bne.n	8004b4e <EndEffstateManagement+0x216>
						goalIDX++;
 8004a9e:	4b3a      	ldr	r3, [pc, #232]	; (8004b88 <EndEffstateManagement+0x250>)
 8004aa0:	f993 3000 	ldrsb.w	r3, [r3]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	b25a      	sxtb	r2, r3
 8004aac:	4b36      	ldr	r3, [pc, #216]	; (8004b88 <EndEffstateManagement+0x250>)
 8004aae:	701a      	strb	r2, [r3, #0]
						if(goalIDX > goalAmount-1){
 8004ab0:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <EndEffstateManagement+0x254>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4b34      	ldr	r3, [pc, #208]	; (8004b88 <EndEffstateManagement+0x250>)
 8004ab8:	f993 3000 	ldrsb.w	r3, [r3]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	dc09      	bgt.n	8004ad4 <EndEffstateManagement+0x19c>
							goalIDX = 0;
 8004ac0:	4b31      	ldr	r3, [pc, #196]	; (8004b88 <EndEffstateManagement+0x250>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	701a      	strb	r2, [r3, #0]
							goalFlag = 0;
 8004ac6:	4b32      	ldr	r3, [pc, #200]	; (8004b90 <EndEffstateManagement+0x258>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	701a      	strb	r2, [r3, #0]
							doingTaskFlag = 0;
 8004acc:	4b2d      	ldr	r3, [pc, #180]	; (8004b84 <EndEffstateManagement+0x24c>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	701a      	strb	r2, [r3, #0]
					EndEffStatus = Closing;
					EndEffState = SetupReadStatus;
					I2CEndEffectorWriteFlag = 1;
				}
			}
			break;
 8004ad2:	e03c      	b.n	8004b4e <EndEffstateManagement+0x216>
							Robot.MotorIsOn = 1;
 8004ad4:	4b2f      	ldr	r3, [pc, #188]	; (8004b94 <EndEffstateManagement+0x25c>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2020 	strb.w	r2, [r3, #32]
							Robot.RunningFlag = 1;
 8004adc:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <EndEffstateManagement+0x25c>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
							Robot.flagStartTime = 1;
 8004ae4:	4b2b      	ldr	r3, [pc, #172]	; (8004b94 <EndEffstateManagement+0x25c>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			break;
 8004aec:	e02f      	b.n	8004b4e <EndEffstateManagement+0x216>
				else if(I2CRxDataBuffer[0] == 0x12)
 8004aee:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <EndEffstateManagement+0x22c>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	2b12      	cmp	r3, #18
 8004af4:	d109      	bne.n	8004b0a <EndEffstateManagement+0x1d2>
					EndEffStatus = Opening;
 8004af6:	4b18      	ldr	r3, [pc, #96]	; (8004b58 <EndEffstateManagement+0x220>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004afc:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <EndEffstateManagement+0x21c>)
 8004afe:	2203      	movs	r2, #3
 8004b00:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004b02:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <EndEffstateManagement+0x234>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
			break;
 8004b08:	e021      	b.n	8004b4e <EndEffstateManagement+0x216>
				else if(I2CRxDataBuffer[0] == 0x34)
 8004b0a:	4b16      	ldr	r3, [pc, #88]	; (8004b64 <EndEffstateManagement+0x22c>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b34      	cmp	r3, #52	; 0x34
 8004b10:	d109      	bne.n	8004b26 <EndEffstateManagement+0x1ee>
					EndEffStatus = Working;
 8004b12:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <EndEffstateManagement+0x220>)
 8004b14:	2202      	movs	r2, #2
 8004b16:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004b18:	4b0e      	ldr	r3, [pc, #56]	; (8004b54 <EndEffstateManagement+0x21c>)
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <EndEffstateManagement+0x234>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	701a      	strb	r2, [r3, #0]
			break;
 8004b24:	e013      	b.n	8004b4e <EndEffstateManagement+0x216>
				else if(I2CRxDataBuffer[0] == 0x56)
 8004b26:	4b0f      	ldr	r3, [pc, #60]	; (8004b64 <EndEffstateManagement+0x22c>)
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b56      	cmp	r3, #86	; 0x56
 8004b2c:	d10f      	bne.n	8004b4e <EndEffstateManagement+0x216>
					EndEffStatus = Closing;
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <EndEffstateManagement+0x220>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004b34:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <EndEffstateManagement+0x21c>)
 8004b36:	2203      	movs	r2, #3
 8004b38:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004b3a:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <EndEffstateManagement+0x234>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	701a      	strb	r2, [r3, #0]
			break;
 8004b40:	e005      	b.n	8004b4e <EndEffstateManagement+0x216>
		break;
 8004b42:	bf00      	nop
 8004b44:	e004      	b.n	8004b50 <EndEffstateManagement+0x218>
			break;
 8004b46:	bf00      	nop
 8004b48:	e002      	b.n	8004b50 <EndEffstateManagement+0x218>
			break;
 8004b4a:	bf00      	nop
 8004b4c:	e000      	b.n	8004b50 <EndEffstateManagement+0x218>
			break;
 8004b4e:	bf00      	nop
	}
}
 8004b50:	bf00      	nop
 8004b52:	bdb0      	pop	{r4, r5, r7, pc}
 8004b54:	20000000 	.word	0x20000000
 8004b58:	20000001 	.word	0x20000001
 8004b5c:	20000830 	.word	0x20000830
 8004b60:	200003d4 	.word	0x200003d4
 8004b64:	2000082c 	.word	0x2000082c
 8004b68:	2000068e 	.word	0x2000068e
 8004b6c:	2000082a 	.word	0x2000082a
 8004b70:	20000829 	.word	0x20000829
 8004b74:	20000818 	.word	0x20000818
 8004b78:	40020400 	.word	0x40020400
 8004b7c:	20000635 	.word	0x20000635
 8004b80:	2000068a 	.word	0x2000068a
 8004b84:	2000068c 	.word	0x2000068c
 8004b88:	20000688 	.word	0x20000688
 8004b8c:	20000687 	.word	0x20000687
 8004b90:	20000689 	.word	0x20000689
 8004b94:	20000604 	.word	0x20000604

08004b98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba8:	d103      	bne.n	8004bb2 <HAL_GPIO_EXTI_Callback+0x1a>
	{
//		I2CEndEffectorWriteFlag = 1;
//		I2CEndEffectorReadFlag =  1;
//		EndEffState = CheckBeforRun;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8004baa:	2108      	movs	r1, #8
 8004bac:	4836      	ldr	r0, [pc, #216]	; (8004c88 <HAL_GPIO_EXTI_Callback+0xf0>)
 8004bae:	f001 fac4 	bl	800613a <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_10)
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb8:	d13e      	bne.n	8004c38 <HAL_GPIO_EXTI_Callback+0xa0>
	{
		// Proxi Sensor
		if(Robot.flagSethome == 1)
 8004bba:	4b34      	ldr	r3, [pc, #208]	; (8004c8c <HAL_GPIO_EXTI_Callback+0xf4>)
 8004bbc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d139      	bne.n	8004c38 <HAL_GPIO_EXTI_Callback+0xa0>
		{
			homePoint[homeFF] = PositionDeg[0];
 8004bc4:	4b32      	ldr	r3, [pc, #200]	; (8004c90 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	4b32      	ldr	r3, [pc, #200]	; (8004c94 <HAL_GPIO_EXTI_Callback+0xfc>)
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	4932      	ldr	r1, [pc, #200]	; (8004c98 <HAL_GPIO_EXTI_Callback+0x100>)
 8004bd0:	0083      	lsls	r3, r0, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	601a      	str	r2, [r3, #0]
			homeFF++;
 8004bd6:	4b2e      	ldr	r3, [pc, #184]	; (8004c90 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	4b2c      	ldr	r3, [pc, #176]	; (8004c90 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004be0:	701a      	strb	r2, [r3, #0]
			if(homeFF == 2)
 8004be2:	4b2b      	ldr	r3, [pc, #172]	; (8004c90 <HAL_GPIO_EXTI_Callback+0xf8>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d126      	bne.n	8004c38 <HAL_GPIO_EXTI_Callback+0xa0>
			{
				if(homePoint[1]-homePoint[0] > 180.0)
 8004bea:	4b2b      	ldr	r3, [pc, #172]	; (8004c98 <HAL_GPIO_EXTI_Callback+0x100>)
 8004bec:	ed93 7a01 	vldr	s14, [r3, #4]
 8004bf0:	4b29      	ldr	r3, [pc, #164]	; (8004c98 <HAL_GPIO_EXTI_Callback+0x100>)
 8004bf2:	edd3 7a00 	vldr	s15, [r3]
 8004bf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bfa:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004c9c <HAL_GPIO_EXTI_Callback+0x104>
 8004bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c06:	dd04      	ble.n	8004c12 <HAL_GPIO_EXTI_Callback+0x7a>
				{
					Robot.HomePositon =  0;
 8004c08:	4b20      	ldr	r3, [pc, #128]	; (8004c8c <HAL_GPIO_EXTI_Callback+0xf4>)
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	615a      	str	r2, [r3, #20]
 8004c10:	e00e      	b.n	8004c30 <HAL_GPIO_EXTI_Callback+0x98>
				}
				else
				{
					Robot.HomePositon = (homePoint[0]+homePoint[1])/2.0;
 8004c12:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <HAL_GPIO_EXTI_Callback+0x100>)
 8004c14:	ed93 7a00 	vldr	s14, [r3]
 8004c18:	4b1f      	ldr	r3, [pc, #124]	; (8004c98 <HAL_GPIO_EXTI_Callback+0x100>)
 8004c1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c22:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004c26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c2a:	4b18      	ldr	r3, [pc, #96]	; (8004c8c <HAL_GPIO_EXTI_Callback+0xf4>)
 8004c2c:	edc3 7a05 	vstr	s15, [r3, #20]
				}
				Robot.flagSethome = 2;
 8004c30:	4b16      	ldr	r3, [pc, #88]	; (8004c8c <HAL_GPIO_EXTI_Callback+0xf4>)
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}
		}
//		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	}
	if(GPIO_Pin == GPIO_PIN_5)
 8004c38:	88fb      	ldrh	r3, [r7, #6]
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d11f      	bne.n	8004c7e <HAL_GPIO_EXTI_Callback+0xe6>
	{
//		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
//		HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET)
 8004c3e:	2120      	movs	r1, #32
 8004c40:	4811      	ldr	r0, [pc, #68]	; (8004c88 <HAL_GPIO_EXTI_Callback+0xf0>)
 8004c42:	f001 fa49 	bl	80060d8 <HAL_GPIO_ReadPin>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d109      	bne.n	8004c60 <HAL_GPIO_EXTI_Callback+0xc8>
		{
			RobotState = NormalOperation;
 8004c4c:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <HAL_GPIO_EXTI_Callback+0x108>)
 8004c4e:	2202      	movs	r2, #2
 8004c50:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8004c52:	2200      	movs	r2, #0
 8004c54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c58:	480b      	ldr	r0, [pc, #44]	; (8004c88 <HAL_GPIO_EXTI_Callback+0xf0>)
 8004c5a:	f001 fa55 	bl	8006108 <HAL_GPIO_WritePin>
			RobotState = Emergency;
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		}
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	}
}
 8004c5e:	e00e      	b.n	8004c7e <HAL_GPIO_EXTI_Callback+0xe6>
			checkemer++;
 8004c60:	4b10      	ldr	r3, [pc, #64]	; (8004ca4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	3301      	adds	r3, #1
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8004c6a:	701a      	strb	r2, [r3, #0]
			RobotState = Emergency;
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <HAL_GPIO_EXTI_Callback+0x108>)
 8004c6e:	2204      	movs	r2, #4
 8004c70:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8004c72:	2201      	movs	r2, #1
 8004c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c78:	4803      	ldr	r0, [pc, #12]	; (8004c88 <HAL_GPIO_EXTI_Callback+0xf0>)
 8004c7a:	f001 fa45 	bl	8006108 <HAL_GPIO_WritePin>
}
 8004c7e:	bf00      	nop
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40020400 	.word	0x40020400
 8004c8c:	20000604 	.word	0x20000604
 8004c90:	20000628 	.word	0x20000628
 8004c94:	200006b0 	.word	0x200006b0
 8004c98:	2000062c 	.word	0x2000062c
 8004c9c:	43340000 	.word	0x43340000
 8004ca0:	20000635 	.word	0x20000635
 8004ca4:	20000828 	.word	0x20000828

08004ca8 <RobotRunToPositon>:
void RobotRunToPositon(float Destination)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	ed87 0a01 	vstr	s0, [r7, #4]
	Robot.GoalPositon = Destination;
 8004cb2:	4a12      	ldr	r2, [pc, #72]	; (8004cfc <RobotRunToPositon+0x54>)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60d3      	str	r3, [r2, #12]
	CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon);
 8004cb8:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <RobotRunToPositon+0x54>)
 8004cba:	edd3 7a00 	vldr	s15, [r3]
 8004cbe:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <RobotRunToPositon+0x54>)
 8004cc0:	ed93 7a03 	vldr	s14, [r3, #12]
 8004cc4:	eef0 0a47 	vmov.f32	s1, s14
 8004cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8004ccc:	480c      	ldr	r0, [pc, #48]	; (8004d00 <RobotRunToPositon+0x58>)
 8004cce:	f7fc fd93 	bl	80017f8 <CoefficientAndTimeCalculation>
	// Start Trajectory Evaluator
	Robot.MotorIsOn = 1;
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <RobotRunToPositon+0x54>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2020 	strb.w	r2, [r3, #32]
	Robot.flagStartTime = 1;
 8004cda:	4b08      	ldr	r3, [pc, #32]	; (8004cfc <RobotRunToPositon+0x54>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Robot.RunningFlag = 1;
 8004ce2:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <RobotRunToPositon+0x54>)
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8004cea:	2201      	movs	r2, #1
 8004cec:	2108      	movs	r1, #8
 8004cee:	4805      	ldr	r0, [pc, #20]	; (8004d04 <RobotRunToPositon+0x5c>)
 8004cf0:	f001 fa0a 	bl	8006108 <HAL_GPIO_WritePin>
}
 8004cf4:	bf00      	nop
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	20000604 	.word	0x20000604
 8004d00:	2000072c 	.word	0x2000072c
 8004d04:	40020400 	.word	0x40020400

08004d08 <TIM_ResetCounter>:

void TIM_ResetCounter(TIM_TypeDef* TIMx)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Reset the Counter Register value */
  TIMx->CNT = 0;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d22:	b480      	push	{r7}
 8004d24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d26:	b672      	cpsid	i
}
 8004d28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d2a:	e7fe      	b.n	8004d2a <Error_Handler+0x8>

08004d2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d32:	2300      	movs	r3, #0
 8004d34:	607b      	str	r3, [r7, #4]
 8004d36:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <HAL_MspInit+0x4c>)
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	4a0f      	ldr	r2, [pc, #60]	; (8004d78 <HAL_MspInit+0x4c>)
 8004d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d40:	6453      	str	r3, [r2, #68]	; 0x44
 8004d42:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <HAL_MspInit+0x4c>)
 8004d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d4a:	607b      	str	r3, [r7, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d4e:	2300      	movs	r3, #0
 8004d50:	603b      	str	r3, [r7, #0]
 8004d52:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <HAL_MspInit+0x4c>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	4a08      	ldr	r2, [pc, #32]	; (8004d78 <HAL_MspInit+0x4c>)
 8004d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d5e:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <HAL_MspInit+0x4c>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004d6a:	2007      	movs	r0, #7
 8004d6c:	f000 fbde 	bl	800552c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40023800 	.word	0x40023800

08004d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08a      	sub	sp, #40	; 0x28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d84:	f107 0314 	add.w	r3, r7, #20
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	609a      	str	r2, [r3, #8]
 8004d90:	60da      	str	r2, [r3, #12]
 8004d92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a21      	ldr	r2, [pc, #132]	; (8004e20 <HAL_I2C_MspInit+0xa4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d13c      	bne.n	8004e18 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d9e:	2300      	movs	r3, #0
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	4b20      	ldr	r3, [pc, #128]	; (8004e24 <HAL_I2C_MspInit+0xa8>)
 8004da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da6:	4a1f      	ldr	r2, [pc, #124]	; (8004e24 <HAL_I2C_MspInit+0xa8>)
 8004da8:	f043 0302 	orr.w	r3, r3, #2
 8004dac:	6313      	str	r3, [r2, #48]	; 0x30
 8004dae:	4b1d      	ldr	r3, [pc, #116]	; (8004e24 <HAL_I2C_MspInit+0xa8>)
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004dba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004dc0:	2312      	movs	r3, #18
 8004dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004dcc:	2304      	movs	r3, #4
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dd0:	f107 0314 	add.w	r3, r7, #20
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4814      	ldr	r0, [pc, #80]	; (8004e28 <HAL_I2C_MspInit+0xac>)
 8004dd8:	f000 fffa 	bl	8005dd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	4b10      	ldr	r3, [pc, #64]	; (8004e24 <HAL_I2C_MspInit+0xa8>)
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	4a0f      	ldr	r2, [pc, #60]	; (8004e24 <HAL_I2C_MspInit+0xa8>)
 8004de6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dea:	6413      	str	r3, [r2, #64]	; 0x40
 8004dec:	4b0d      	ldr	r3, [pc, #52]	; (8004e24 <HAL_I2C_MspInit+0xa8>)
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	201f      	movs	r0, #31
 8004dfe:	f000 fba0 	bl	8005542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004e02:	201f      	movs	r0, #31
 8004e04:	f000 fbb9 	bl	800557a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	2020      	movs	r0, #32
 8004e0e:	f000 fb98 	bl	8005542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004e12:	2020      	movs	r0, #32
 8004e14:	f000 fbb1 	bl	800557a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004e18:	bf00      	nop
 8004e1a:	3728      	adds	r7, #40	; 0x28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40005400 	.word	0x40005400
 8004e24:	40023800 	.word	0x40023800
 8004e28:	40020400 	.word	0x40020400

08004e2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a0e      	ldr	r2, [pc, #56]	; (8004e74 <HAL_TIM_PWM_MspInit+0x48>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d115      	bne.n	8004e6a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <HAL_TIM_PWM_MspInit+0x4c>)
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	4a0c      	ldr	r2, [pc, #48]	; (8004e78 <HAL_TIM_PWM_MspInit+0x4c>)
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <HAL_TIM_PWM_MspInit+0x4c>)
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	201a      	movs	r0, #26
 8004e60:	f000 fb6f 	bl	8005542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004e64:	201a      	movs	r0, #26
 8004e66:	f000 fb88 	bl	800557a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004e6a:	bf00      	nop
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40023800 	.word	0x40023800

08004e7c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08a      	sub	sp, #40	; 0x28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e84:	f107 0314 	add.w	r3, r7, #20
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	609a      	str	r2, [r3, #8]
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9c:	d12b      	bne.n	8004ef6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	4b17      	ldr	r3, [pc, #92]	; (8004f00 <HAL_TIM_Encoder_MspInit+0x84>)
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <HAL_TIM_Encoder_MspInit+0x84>)
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	6413      	str	r3, [r2, #64]	; 0x40
 8004eae:	4b14      	ldr	r3, [pc, #80]	; (8004f00 <HAL_TIM_Encoder_MspInit+0x84>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <HAL_TIM_Encoder_MspInit+0x84>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	4a0f      	ldr	r2, [pc, #60]	; (8004f00 <HAL_TIM_Encoder_MspInit+0x84>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eca:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <HAL_TIM_Encoder_MspInit+0x84>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eda:	2302      	movs	r3, #2
 8004edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eea:	f107 0314 	add.w	r3, r7, #20
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4804      	ldr	r0, [pc, #16]	; (8004f04 <HAL_TIM_Encoder_MspInit+0x88>)
 8004ef2:	f000 ff6d 	bl	8005dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004ef6:	bf00      	nop
 8004ef8:	3728      	adds	r7, #40	; 0x28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40023800 	.word	0x40023800
 8004f04:	40020000 	.word	0x40020000

08004f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a0e      	ldr	r2, [pc, #56]	; (8004f50 <HAL_TIM_Base_MspInit+0x48>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d115      	bne.n	8004f46 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	4b0d      	ldr	r3, [pc, #52]	; (8004f54 <HAL_TIM_Base_MspInit+0x4c>)
 8004f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f22:	4a0c      	ldr	r2, [pc, #48]	; (8004f54 <HAL_TIM_Base_MspInit+0x4c>)
 8004f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f28:	6453      	str	r3, [r2, #68]	; 0x44
 8004f2a:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <HAL_TIM_Base_MspInit+0x4c>)
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004f36:	2200      	movs	r2, #0
 8004f38:	2100      	movs	r1, #0
 8004f3a:	201a      	movs	r0, #26
 8004f3c:	f000 fb01 	bl	8005542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004f40:	201a      	movs	r0, #26
 8004f42:	f000 fb1a 	bl	800557a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004f46:	bf00      	nop
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40014800 	.word	0x40014800
 8004f54:	40023800 	.word	0x40023800

08004f58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f60:	f107 030c 	add.w	r3, r7, #12
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	605a      	str	r2, [r3, #4]
 8004f6a:	609a      	str	r2, [r3, #8]
 8004f6c:	60da      	str	r2, [r3, #12]
 8004f6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a12      	ldr	r2, [pc, #72]	; (8004fc0 <HAL_TIM_MspPostInit+0x68>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d11e      	bne.n	8004fb8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <HAL_TIM_MspPostInit+0x6c>)
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	4a10      	ldr	r2, [pc, #64]	; (8004fc4 <HAL_TIM_MspPostInit+0x6c>)
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8a:	4b0e      	ldr	r3, [pc, #56]	; (8004fc4 <HAL_TIM_MspPostInit+0x6c>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	60bb      	str	r3, [r7, #8]
 8004f94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fac:	f107 030c 	add.w	r3, r7, #12
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4805      	ldr	r0, [pc, #20]	; (8004fc8 <HAL_TIM_MspPostInit+0x70>)
 8004fb4:	f000 ff0c 	bl	8005dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004fb8:	bf00      	nop
 8004fba:	3720      	adds	r7, #32
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40010000 	.word	0x40010000
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40020000 	.word	0x40020000

08004fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	; 0x28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd4:	f107 0314 	add.w	r3, r7, #20
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	605a      	str	r2, [r3, #4]
 8004fde:	609a      	str	r2, [r3, #8]
 8004fe0:	60da      	str	r2, [r3, #12]
 8004fe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a4b      	ldr	r2, [pc, #300]	; (8005118 <HAL_UART_MspInit+0x14c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	f040 8090 	bne.w	8005110 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	4b49      	ldr	r3, [pc, #292]	; (800511c <HAL_UART_MspInit+0x150>)
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	4a48      	ldr	r2, [pc, #288]	; (800511c <HAL_UART_MspInit+0x150>)
 8004ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8005000:	4b46      	ldr	r3, [pc, #280]	; (800511c <HAL_UART_MspInit+0x150>)
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	4b42      	ldr	r3, [pc, #264]	; (800511c <HAL_UART_MspInit+0x150>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	4a41      	ldr	r2, [pc, #260]	; (800511c <HAL_UART_MspInit+0x150>)
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	6313      	str	r3, [r2, #48]	; 0x30
 800501c:	4b3f      	ldr	r3, [pc, #252]	; (800511c <HAL_UART_MspInit+0x150>)
 800501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005028:	230c      	movs	r3, #12
 800502a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502c:	2302      	movs	r3, #2
 800502e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005034:	2303      	movs	r3, #3
 8005036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005038:	2307      	movs	r3, #7
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800503c:	f107 0314 	add.w	r3, r7, #20
 8005040:	4619      	mov	r1, r3
 8005042:	4837      	ldr	r0, [pc, #220]	; (8005120 <HAL_UART_MspInit+0x154>)
 8005044:	f000 fec4 	bl	8005dd0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005048:	4b36      	ldr	r3, [pc, #216]	; (8005124 <HAL_UART_MspInit+0x158>)
 800504a:	4a37      	ldr	r2, [pc, #220]	; (8005128 <HAL_UART_MspInit+0x15c>)
 800504c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800504e:	4b35      	ldr	r3, [pc, #212]	; (8005124 <HAL_UART_MspInit+0x158>)
 8005050:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005054:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005056:	4b33      	ldr	r3, [pc, #204]	; (8005124 <HAL_UART_MspInit+0x158>)
 8005058:	2200      	movs	r2, #0
 800505a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800505c:	4b31      	ldr	r3, [pc, #196]	; (8005124 <HAL_UART_MspInit+0x158>)
 800505e:	2200      	movs	r2, #0
 8005060:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005062:	4b30      	ldr	r3, [pc, #192]	; (8005124 <HAL_UART_MspInit+0x158>)
 8005064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005068:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800506a:	4b2e      	ldr	r3, [pc, #184]	; (8005124 <HAL_UART_MspInit+0x158>)
 800506c:	2200      	movs	r2, #0
 800506e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005070:	4b2c      	ldr	r3, [pc, #176]	; (8005124 <HAL_UART_MspInit+0x158>)
 8005072:	2200      	movs	r2, #0
 8005074:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005076:	4b2b      	ldr	r3, [pc, #172]	; (8005124 <HAL_UART_MspInit+0x158>)
 8005078:	2200      	movs	r2, #0
 800507a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800507c:	4b29      	ldr	r3, [pc, #164]	; (8005124 <HAL_UART_MspInit+0x158>)
 800507e:	2200      	movs	r2, #0
 8005080:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005082:	4b28      	ldr	r3, [pc, #160]	; (8005124 <HAL_UART_MspInit+0x158>)
 8005084:	2200      	movs	r2, #0
 8005086:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005088:	4826      	ldr	r0, [pc, #152]	; (8005124 <HAL_UART_MspInit+0x158>)
 800508a:	f000 fa91 	bl	80055b0 <HAL_DMA_Init>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005094:	f7ff fe45 	bl	8004d22 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a22      	ldr	r2, [pc, #136]	; (8005124 <HAL_UART_MspInit+0x158>)
 800509c:	639a      	str	r2, [r3, #56]	; 0x38
 800509e:	4a21      	ldr	r2, [pc, #132]	; (8005124 <HAL_UART_MspInit+0x158>)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80050a4:	4b21      	ldr	r3, [pc, #132]	; (800512c <HAL_UART_MspInit+0x160>)
 80050a6:	4a22      	ldr	r2, [pc, #136]	; (8005130 <HAL_UART_MspInit+0x164>)
 80050a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80050aa:	4b20      	ldr	r3, [pc, #128]	; (800512c <HAL_UART_MspInit+0x160>)
 80050ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80050b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050b2:	4b1e      	ldr	r3, [pc, #120]	; (800512c <HAL_UART_MspInit+0x160>)
 80050b4:	2240      	movs	r2, #64	; 0x40
 80050b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050b8:	4b1c      	ldr	r3, [pc, #112]	; (800512c <HAL_UART_MspInit+0x160>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050be:	4b1b      	ldr	r3, [pc, #108]	; (800512c <HAL_UART_MspInit+0x160>)
 80050c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050c6:	4b19      	ldr	r3, [pc, #100]	; (800512c <HAL_UART_MspInit+0x160>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050cc:	4b17      	ldr	r3, [pc, #92]	; (800512c <HAL_UART_MspInit+0x160>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80050d2:	4b16      	ldr	r3, [pc, #88]	; (800512c <HAL_UART_MspInit+0x160>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80050d8:	4b14      	ldr	r3, [pc, #80]	; (800512c <HAL_UART_MspInit+0x160>)
 80050da:	2200      	movs	r2, #0
 80050dc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050de:	4b13      	ldr	r3, [pc, #76]	; (800512c <HAL_UART_MspInit+0x160>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80050e4:	4811      	ldr	r0, [pc, #68]	; (800512c <HAL_UART_MspInit+0x160>)
 80050e6:	f000 fa63 	bl	80055b0 <HAL_DMA_Init>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80050f0:	f7ff fe17 	bl	8004d22 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a0d      	ldr	r2, [pc, #52]	; (800512c <HAL_UART_MspInit+0x160>)
 80050f8:	635a      	str	r2, [r3, #52]	; 0x34
 80050fa:	4a0c      	ldr	r2, [pc, #48]	; (800512c <HAL_UART_MspInit+0x160>)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005100:	2200      	movs	r2, #0
 8005102:	2100      	movs	r1, #0
 8005104:	2026      	movs	r0, #38	; 0x26
 8005106:	f000 fa1c 	bl	8005542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800510a:	2026      	movs	r0, #38	; 0x26
 800510c:	f000 fa35 	bl	800557a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005110:	bf00      	nop
 8005112:	3728      	adds	r7, #40	; 0x28
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40004400 	.word	0x40004400
 800511c:	40023800 	.word	0x40023800
 8005120:	40020000 	.word	0x40020000
 8005124:	20000544 	.word	0x20000544
 8005128:	40026088 	.word	0x40026088
 800512c:	200005a4 	.word	0x200005a4
 8005130:	400260a0 	.word	0x400260a0

08005134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005138:	e7fe      	b.n	8005138 <NMI_Handler+0x4>

0800513a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800513a:	b480      	push	{r7}
 800513c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800513e:	e7fe      	b.n	800513e <HardFault_Handler+0x4>

08005140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005144:	e7fe      	b.n	8005144 <MemManage_Handler+0x4>

08005146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005146:	b480      	push	{r7}
 8005148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800514a:	e7fe      	b.n	800514a <BusFault_Handler+0x4>

0800514c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005150:	e7fe      	b.n	8005150 <UsageFault_Handler+0x4>

08005152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005152:	b480      	push	{r7}
 8005154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005156:	bf00      	nop
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005164:	bf00      	nop
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800516e:	b480      	push	{r7}
 8005170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005172:	bf00      	nop
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005180:	f000 f8e4 	bl	800534c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005184:	bf00      	nop
 8005186:	bd80      	pop	{r7, pc}

08005188 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800518c:	4802      	ldr	r0, [pc, #8]	; (8005198 <DMA1_Stream5_IRQHandler+0x10>)
 800518e:	f000 fba7 	bl	80058e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005192:	bf00      	nop
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	20000544 	.word	0x20000544

0800519c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80051a0:	4802      	ldr	r0, [pc, #8]	; (80051ac <DMA1_Stream6_IRQHandler+0x10>)
 80051a2:	f000 fb9d 	bl	80058e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80051a6:	bf00      	nop
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	200005a4 	.word	0x200005a4

080051b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Emer_Pin);
 80051b4:	2020      	movs	r0, #32
 80051b6:	f000 ffdb 	bl	8006170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80051ba:	bf00      	nop
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80051c4:	4803      	ldr	r0, [pc, #12]	; (80051d4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80051c6:	f003 fedd 	bl	8008f84 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80051ca:	4803      	ldr	r0, [pc, #12]	; (80051d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80051cc:	f003 feda 	bl	8008f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80051d0:	bf00      	nop
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20000428 	.word	0x20000428
 80051d8:	200004b8 	.word	0x200004b8

080051dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80051e0:	4802      	ldr	r0, [pc, #8]	; (80051ec <I2C1_EV_IRQHandler+0x10>)
 80051e2:	f001 fa75 	bl	80066d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80051e6:	bf00      	nop
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	200003d4 	.word	0x200003d4

080051f0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80051f4:	4802      	ldr	r0, [pc, #8]	; (8005200 <I2C1_ER_IRQHandler+0x10>)
 80051f6:	f001 fbdc 	bl	80069b2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80051fa:	bf00      	nop
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	200003d4 	.word	0x200003d4

08005204 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005208:	4802      	ldr	r0, [pc, #8]	; (8005214 <USART2_IRQHandler+0x10>)
 800520a:	f004 fce5 	bl	8009bd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800520e:	bf00      	nop
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20000500 	.word	0x20000500

08005218 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Proxi_Pin);
 800521c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005220:	f000 ffa6 	bl	8006170 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005224:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005228:	f000 ffa2 	bl	8006170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800522c:	bf00      	nop
 800522e:	bd80      	pop	{r7, pc}

08005230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005234:	4b06      	ldr	r3, [pc, #24]	; (8005250 <SystemInit+0x20>)
 8005236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523a:	4a05      	ldr	r2, [pc, #20]	; (8005250 <SystemInit+0x20>)
 800523c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005244:	bf00      	nop
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	e000ed00 	.word	0xe000ed00

08005254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800528c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005258:	480d      	ldr	r0, [pc, #52]	; (8005290 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800525a:	490e      	ldr	r1, [pc, #56]	; (8005294 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800525c:	4a0e      	ldr	r2, [pc, #56]	; (8005298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800525e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005260:	e002      	b.n	8005268 <LoopCopyDataInit>

08005262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005266:	3304      	adds	r3, #4

08005268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800526a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800526c:	d3f9      	bcc.n	8005262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800526e:	4a0b      	ldr	r2, [pc, #44]	; (800529c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005270:	4c0b      	ldr	r4, [pc, #44]	; (80052a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005274:	e001      	b.n	800527a <LoopFillZerobss>

08005276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005278:	3204      	adds	r2, #4

0800527a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800527a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800527c:	d3fb      	bcc.n	8005276 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800527e:	f7ff ffd7 	bl	8005230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005282:	f006 f86b 	bl	800b35c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005286:	f7fd fe63 	bl	8002f50 <main>
  bx  lr    
 800528a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800528c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005294:	200003b0 	.word	0x200003b0
  ldr r2, =_sidata
 8005298:	0800b418 	.word	0x0800b418
  ldr r2, =_sbss
 800529c:	200003b0 	.word	0x200003b0
  ldr r4, =_ebss
 80052a0:	2000084c 	.word	0x2000084c

080052a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80052a4:	e7fe      	b.n	80052a4 <ADC_IRQHandler>
	...

080052a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80052ac:	4b0e      	ldr	r3, [pc, #56]	; (80052e8 <HAL_Init+0x40>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a0d      	ldr	r2, [pc, #52]	; (80052e8 <HAL_Init+0x40>)
 80052b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <HAL_Init+0x40>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a0a      	ldr	r2, [pc, #40]	; (80052e8 <HAL_Init+0x40>)
 80052be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052c4:	4b08      	ldr	r3, [pc, #32]	; (80052e8 <HAL_Init+0x40>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a07      	ldr	r2, [pc, #28]	; (80052e8 <HAL_Init+0x40>)
 80052ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052d0:	2003      	movs	r0, #3
 80052d2:	f000 f92b 	bl	800552c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052d6:	2000      	movs	r0, #0
 80052d8:	f000 f808 	bl	80052ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052dc:	f7ff fd26 	bl	8004d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	40023c00 	.word	0x40023c00

080052ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052f4:	4b12      	ldr	r3, [pc, #72]	; (8005340 <HAL_InitTick+0x54>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	4b12      	ldr	r3, [pc, #72]	; (8005344 <HAL_InitTick+0x58>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	4619      	mov	r1, r3
 80052fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005302:	fbb3 f3f1 	udiv	r3, r3, r1
 8005306:	fbb2 f3f3 	udiv	r3, r2, r3
 800530a:	4618      	mov	r0, r3
 800530c:	f000 f943 	bl	8005596 <HAL_SYSTICK_Config>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e00e      	b.n	8005338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b0f      	cmp	r3, #15
 800531e:	d80a      	bhi.n	8005336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005320:	2200      	movs	r2, #0
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	f04f 30ff 	mov.w	r0, #4294967295
 8005328:	f000 f90b 	bl	8005542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800532c:	4a06      	ldr	r2, [pc, #24]	; (8005348 <HAL_InitTick+0x5c>)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	e000      	b.n	8005338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
}
 8005338:	4618      	mov	r0, r3
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	200003a4 	.word	0x200003a4
 8005344:	200003ac 	.word	0x200003ac
 8005348:	200003a8 	.word	0x200003a8

0800534c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005350:	4b06      	ldr	r3, [pc, #24]	; (800536c <HAL_IncTick+0x20>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <HAL_IncTick+0x24>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4413      	add	r3, r2
 800535c:	4a04      	ldr	r2, [pc, #16]	; (8005370 <HAL_IncTick+0x24>)
 800535e:	6013      	str	r3, [r2, #0]
}
 8005360:	bf00      	nop
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	200003ac 	.word	0x200003ac
 8005370:	20000848 	.word	0x20000848

08005374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  return uwTick;
 8005378:	4b03      	ldr	r3, [pc, #12]	; (8005388 <HAL_GetTick+0x14>)
 800537a:	681b      	ldr	r3, [r3, #0]
}
 800537c:	4618      	mov	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20000848 	.word	0x20000848

0800538c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800539c:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <__NVIC_SetPriorityGrouping+0x44>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053a8:	4013      	ands	r3, r2
 80053aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053be:	4a04      	ldr	r2, [pc, #16]	; (80053d0 <__NVIC_SetPriorityGrouping+0x44>)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	60d3      	str	r3, [r2, #12]
}
 80053c4:	bf00      	nop
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	e000ed00 	.word	0xe000ed00

080053d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053d8:	4b04      	ldr	r3, [pc, #16]	; (80053ec <__NVIC_GetPriorityGrouping+0x18>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	0a1b      	lsrs	r3, r3, #8
 80053de:	f003 0307 	and.w	r3, r3, #7
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	e000ed00 	.word	0xe000ed00

080053f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	db0b      	blt.n	800541a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	f003 021f 	and.w	r2, r3, #31
 8005408:	4907      	ldr	r1, [pc, #28]	; (8005428 <__NVIC_EnableIRQ+0x38>)
 800540a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	2001      	movs	r0, #1
 8005412:	fa00 f202 	lsl.w	r2, r0, r2
 8005416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	e000e100 	.word	0xe000e100

0800542c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	4603      	mov	r3, r0
 8005434:	6039      	str	r1, [r7, #0]
 8005436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800543c:	2b00      	cmp	r3, #0
 800543e:	db0a      	blt.n	8005456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	b2da      	uxtb	r2, r3
 8005444:	490c      	ldr	r1, [pc, #48]	; (8005478 <__NVIC_SetPriority+0x4c>)
 8005446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800544a:	0112      	lsls	r2, r2, #4
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	440b      	add	r3, r1
 8005450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005454:	e00a      	b.n	800546c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	b2da      	uxtb	r2, r3
 800545a:	4908      	ldr	r1, [pc, #32]	; (800547c <__NVIC_SetPriority+0x50>)
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	3b04      	subs	r3, #4
 8005464:	0112      	lsls	r2, r2, #4
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	440b      	add	r3, r1
 800546a:	761a      	strb	r2, [r3, #24]
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	e000e100 	.word	0xe000e100
 800547c:	e000ed00 	.word	0xe000ed00

08005480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005480:	b480      	push	{r7}
 8005482:	b089      	sub	sp, #36	; 0x24
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f1c3 0307 	rsb	r3, r3, #7
 800549a:	2b04      	cmp	r3, #4
 800549c:	bf28      	it	cs
 800549e:	2304      	movcs	r3, #4
 80054a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	3304      	adds	r3, #4
 80054a6:	2b06      	cmp	r3, #6
 80054a8:	d902      	bls.n	80054b0 <NVIC_EncodePriority+0x30>
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	3b03      	subs	r3, #3
 80054ae:	e000      	b.n	80054b2 <NVIC_EncodePriority+0x32>
 80054b0:	2300      	movs	r3, #0
 80054b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054b4:	f04f 32ff 	mov.w	r2, #4294967295
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43da      	mvns	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	401a      	ands	r2, r3
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054c8:	f04f 31ff 	mov.w	r1, #4294967295
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	fa01 f303 	lsl.w	r3, r1, r3
 80054d2:	43d9      	mvns	r1, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054d8:	4313      	orrs	r3, r2
         );
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3724      	adds	r7, #36	; 0x24
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054f8:	d301      	bcc.n	80054fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054fa:	2301      	movs	r3, #1
 80054fc:	e00f      	b.n	800551e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054fe:	4a0a      	ldr	r2, [pc, #40]	; (8005528 <SysTick_Config+0x40>)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3b01      	subs	r3, #1
 8005504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005506:	210f      	movs	r1, #15
 8005508:	f04f 30ff 	mov.w	r0, #4294967295
 800550c:	f7ff ff8e 	bl	800542c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <SysTick_Config+0x40>)
 8005512:	2200      	movs	r2, #0
 8005514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005516:	4b04      	ldr	r3, [pc, #16]	; (8005528 <SysTick_Config+0x40>)
 8005518:	2207      	movs	r2, #7
 800551a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	e000e010 	.word	0xe000e010

0800552c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7ff ff29 	bl	800538c <__NVIC_SetPriorityGrouping>
}
 800553a:	bf00      	nop
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005542:	b580      	push	{r7, lr}
 8005544:	b086      	sub	sp, #24
 8005546:	af00      	add	r7, sp, #0
 8005548:	4603      	mov	r3, r0
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	607a      	str	r2, [r7, #4]
 800554e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005554:	f7ff ff3e 	bl	80053d4 <__NVIC_GetPriorityGrouping>
 8005558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	6978      	ldr	r0, [r7, #20]
 8005560:	f7ff ff8e 	bl	8005480 <NVIC_EncodePriority>
 8005564:	4602      	mov	r2, r0
 8005566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800556a:	4611      	mov	r1, r2
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff ff5d 	bl	800542c <__NVIC_SetPriority>
}
 8005572:	bf00      	nop
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	4603      	mov	r3, r0
 8005582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff ff31 	bl	80053f0 <__NVIC_EnableIRQ>
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff ffa2 	bl	80054e8 <SysTick_Config>
 80055a4:	4603      	mov	r3, r0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80055bc:	f7ff feda 	bl	8005374 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e099      	b.n	8005700 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0201 	bic.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055ec:	e00f      	b.n	800560e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055ee:	f7ff fec1 	bl	8005374 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b05      	cmp	r3, #5
 80055fa:	d908      	bls.n	800560e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2203      	movs	r2, #3
 8005606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e078      	b.n	8005700 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e8      	bne.n	80055ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4b38      	ldr	r3, [pc, #224]	; (8005708 <HAL_DMA_Init+0x158>)
 8005628:	4013      	ands	r3, r2
 800562a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800563a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	2b04      	cmp	r3, #4
 8005666:	d107      	bne.n	8005678 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005670:	4313      	orrs	r3, r2
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f023 0307 	bic.w	r3, r3, #7
 800568e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d117      	bne.n	80056d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00e      	beq.n	80056d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fb0f 	bl	8005cd8 <DMA_CheckFifoParam>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d008      	beq.n	80056d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2240      	movs	r2, #64	; 0x40
 80056c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80056ce:	2301      	movs	r3, #1
 80056d0:	e016      	b.n	8005700 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fac6 	bl	8005c6c <DMA_CalcBaseAndBitshift>
 80056e0:	4603      	mov	r3, r0
 80056e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e8:	223f      	movs	r2, #63	; 0x3f
 80056ea:	409a      	lsls	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	f010803f 	.word	0xf010803f

0800570c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005722:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800572a:	2b01      	cmp	r3, #1
 800572c:	d101      	bne.n	8005732 <HAL_DMA_Start_IT+0x26>
 800572e:	2302      	movs	r3, #2
 8005730:	e040      	b.n	80057b4 <HAL_DMA_Start_IT+0xa8>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b01      	cmp	r3, #1
 8005744:	d12f      	bne.n	80057a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2202      	movs	r2, #2
 800574a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	68b9      	ldr	r1, [r7, #8]
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 fa58 	bl	8005c10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005764:	223f      	movs	r2, #63	; 0x3f
 8005766:	409a      	lsls	r2, r3
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0216 	orr.w	r2, r2, #22
 800577a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0208 	orr.w	r2, r2, #8
 8005792:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	e005      	b.n	80057b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80057ae:	2302      	movs	r3, #2
 80057b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80057b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80057ca:	f7ff fdd3 	bl	8005374 <HAL_GetTick>
 80057ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d008      	beq.n	80057ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2280      	movs	r2, #128	; 0x80
 80057e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e052      	b.n	8005894 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 0216 	bic.w	r2, r2, #22
 80057fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695a      	ldr	r2, [r3, #20]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800580c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d103      	bne.n	800581e <HAL_DMA_Abort+0x62>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800581a:	2b00      	cmp	r3, #0
 800581c:	d007      	beq.n	800582e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0208 	bic.w	r2, r2, #8
 800582c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0201 	bic.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800583e:	e013      	b.n	8005868 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005840:	f7ff fd98 	bl	8005374 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b05      	cmp	r3, #5
 800584c:	d90c      	bls.n	8005868 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2203      	movs	r2, #3
 8005858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e015      	b.n	8005894 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1e4      	bne.n	8005840 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587a:	223f      	movs	r2, #63	; 0x3f
 800587c:	409a      	lsls	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d004      	beq.n	80058ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2280      	movs	r2, #128	; 0x80
 80058b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e00c      	b.n	80058d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2205      	movs	r2, #5
 80058be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0201 	bic.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058ec:	4b8e      	ldr	r3, [pc, #568]	; (8005b28 <HAL_DMA_IRQHandler+0x248>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a8e      	ldr	r2, [pc, #568]	; (8005b2c <HAL_DMA_IRQHandler+0x24c>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	0a9b      	lsrs	r3, r3, #10
 80058f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800590a:	2208      	movs	r2, #8
 800590c:	409a      	lsls	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4013      	ands	r3, r2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d01a      	beq.n	800594c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d013      	beq.n	800594c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0204 	bic.w	r2, r2, #4
 8005932:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005938:	2208      	movs	r2, #8
 800593a:	409a      	lsls	r2, r3
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005944:	f043 0201 	orr.w	r2, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005950:	2201      	movs	r2, #1
 8005952:	409a      	lsls	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4013      	ands	r3, r2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d012      	beq.n	8005982 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00b      	beq.n	8005982 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800596e:	2201      	movs	r2, #1
 8005970:	409a      	lsls	r2, r3
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597a:	f043 0202 	orr.w	r2, r3, #2
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005986:	2204      	movs	r2, #4
 8005988:	409a      	lsls	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4013      	ands	r3, r2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d012      	beq.n	80059b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00b      	beq.n	80059b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a4:	2204      	movs	r2, #4
 80059a6:	409a      	lsls	r2, r3
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b0:	f043 0204 	orr.w	r2, r3, #4
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059bc:	2210      	movs	r2, #16
 80059be:	409a      	lsls	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4013      	ands	r3, r2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d043      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d03c      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059da:	2210      	movs	r2, #16
 80059dc:	409a      	lsls	r2, r3
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d018      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d108      	bne.n	8005a10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d024      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	4798      	blx	r3
 8005a0e:	e01f      	b.n	8005a50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01b      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	4798      	blx	r3
 8005a20:	e016      	b.n	8005a50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d107      	bne.n	8005a40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0208 	bic.w	r2, r2, #8
 8005a3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a54:	2220      	movs	r2, #32
 8005a56:	409a      	lsls	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 808f 	beq.w	8005b80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0310 	and.w	r3, r3, #16
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 8087 	beq.w	8005b80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a76:	2220      	movs	r2, #32
 8005a78:	409a      	lsls	r2, r3
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b05      	cmp	r3, #5
 8005a88:	d136      	bne.n	8005af8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0216 	bic.w	r2, r2, #22
 8005a98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695a      	ldr	r2, [r3, #20]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aa8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <HAL_DMA_IRQHandler+0x1da>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0208 	bic.w	r2, r2, #8
 8005ac8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ace:	223f      	movs	r2, #63	; 0x3f
 8005ad0:	409a      	lsls	r2, r3
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d07e      	beq.n	8005bec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	4798      	blx	r3
        }
        return;
 8005af6:	e079      	b.n	8005bec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d01d      	beq.n	8005b42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10d      	bne.n	8005b30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d031      	beq.n	8005b80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	4798      	blx	r3
 8005b24:	e02c      	b.n	8005b80 <HAL_DMA_IRQHandler+0x2a0>
 8005b26:	bf00      	nop
 8005b28:	200003a4 	.word	0x200003a4
 8005b2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d023      	beq.n	8005b80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	4798      	blx	r3
 8005b40:	e01e      	b.n	8005b80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10f      	bne.n	8005b70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0210 	bic.w	r2, r2, #16
 8005b5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d032      	beq.n	8005bee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d022      	beq.n	8005bda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2205      	movs	r2, #5
 8005b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0201 	bic.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	60bb      	str	r3, [r7, #8]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d307      	bcc.n	8005bc8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f2      	bne.n	8005bac <HAL_DMA_IRQHandler+0x2cc>
 8005bc6:	e000      	b.n	8005bca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005bc8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d005      	beq.n	8005bee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	4798      	blx	r3
 8005bea:	e000      	b.n	8005bee <HAL_DMA_IRQHandler+0x30e>
        return;
 8005bec:	bf00      	nop
    }
  }
}
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c02:	b2db      	uxtb	r3, r3
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	2b40      	cmp	r3, #64	; 0x40
 8005c3c:	d108      	bne.n	8005c50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c4e:	e007      	b.n	8005c60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	60da      	str	r2, [r3, #12]
}
 8005c60:	bf00      	nop
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	3b10      	subs	r3, #16
 8005c7c:	4a14      	ldr	r2, [pc, #80]	; (8005cd0 <DMA_CalcBaseAndBitshift+0x64>)
 8005c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c82:	091b      	lsrs	r3, r3, #4
 8005c84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c86:	4a13      	ldr	r2, [pc, #76]	; (8005cd4 <DMA_CalcBaseAndBitshift+0x68>)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d909      	bls.n	8005cae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ca2:	f023 0303 	bic.w	r3, r3, #3
 8005ca6:	1d1a      	adds	r2, r3, #4
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	659a      	str	r2, [r3, #88]	; 0x58
 8005cac:	e007      	b.n	8005cbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cb6:	f023 0303 	bic.w	r3, r3, #3
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	aaaaaaab 	.word	0xaaaaaaab
 8005cd4:	0800b400 	.word	0x0800b400

08005cd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d11f      	bne.n	8005d32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d856      	bhi.n	8005da6 <DMA_CheckFifoParam+0xce>
 8005cf8:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <DMA_CheckFifoParam+0x28>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d23 	.word	0x08005d23
 8005d08:	08005d11 	.word	0x08005d11
 8005d0c:	08005da7 	.word	0x08005da7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d046      	beq.n	8005daa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d20:	e043      	b.n	8005daa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d2a:	d140      	bne.n	8005dae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d30:	e03d      	b.n	8005dae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d3a:	d121      	bne.n	8005d80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d837      	bhi.n	8005db2 <DMA_CheckFifoParam+0xda>
 8005d42:	a201      	add	r2, pc, #4	; (adr r2, 8005d48 <DMA_CheckFifoParam+0x70>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005d59 	.word	0x08005d59
 8005d4c:	08005d5f 	.word	0x08005d5f
 8005d50:	08005d59 	.word	0x08005d59
 8005d54:	08005d71 	.word	0x08005d71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d5c:	e030      	b.n	8005dc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d025      	beq.n	8005db6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d6e:	e022      	b.n	8005db6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d78:	d11f      	bne.n	8005dba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d7e:	e01c      	b.n	8005dba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d903      	bls.n	8005d8e <DMA_CheckFifoParam+0xb6>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b03      	cmp	r3, #3
 8005d8a:	d003      	beq.n	8005d94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d8c:	e018      	b.n	8005dc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	73fb      	strb	r3, [r7, #15]
      break;
 8005d92:	e015      	b.n	8005dc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00e      	beq.n	8005dbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	73fb      	strb	r3, [r7, #15]
      break;
 8005da4:	e00b      	b.n	8005dbe <DMA_CheckFifoParam+0xe6>
      break;
 8005da6:	bf00      	nop
 8005da8:	e00a      	b.n	8005dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8005daa:	bf00      	nop
 8005dac:	e008      	b.n	8005dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8005dae:	bf00      	nop
 8005db0:	e006      	b.n	8005dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8005db2:	bf00      	nop
 8005db4:	e004      	b.n	8005dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8005db6:	bf00      	nop
 8005db8:	e002      	b.n	8005dc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8005dba:	bf00      	nop
 8005dbc:	e000      	b.n	8005dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8005dbe:	bf00      	nop
    }
  } 
  
  return status; 
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop

08005dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b089      	sub	sp, #36	; 0x24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005de6:	2300      	movs	r3, #0
 8005de8:	61fb      	str	r3, [r7, #28]
 8005dea:	e159      	b.n	80060a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005dec:	2201      	movs	r2, #1
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	f040 8148 	bne.w	800609a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d005      	beq.n	8005e22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d130      	bne.n	8005e84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	2203      	movs	r2, #3
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	43db      	mvns	r3, r3
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	4013      	ands	r3, r2
 8005e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e58:	2201      	movs	r2, #1
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	43db      	mvns	r3, r3
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	4013      	ands	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	091b      	lsrs	r3, r3, #4
 8005e6e:	f003 0201 	and.w	r2, r3, #1
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d017      	beq.n	8005ec0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	2203      	movs	r2, #3
 8005e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea0:	43db      	mvns	r3, r3
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d123      	bne.n	8005f14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	08da      	lsrs	r2, r3, #3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3208      	adds	r2, #8
 8005ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	220f      	movs	r2, #15
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	4013      	ands	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	08da      	lsrs	r2, r3, #3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3208      	adds	r2, #8
 8005f0e:	69b9      	ldr	r1, [r7, #24]
 8005f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	2203      	movs	r2, #3
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	43db      	mvns	r3, r3
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f003 0203 	and.w	r2, r3, #3
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 80a2 	beq.w	800609a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	4b57      	ldr	r3, [pc, #348]	; (80060b8 <HAL_GPIO_Init+0x2e8>)
 8005f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5e:	4a56      	ldr	r2, [pc, #344]	; (80060b8 <HAL_GPIO_Init+0x2e8>)
 8005f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f64:	6453      	str	r3, [r2, #68]	; 0x44
 8005f66:	4b54      	ldr	r3, [pc, #336]	; (80060b8 <HAL_GPIO_Init+0x2e8>)
 8005f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f72:	4a52      	ldr	r2, [pc, #328]	; (80060bc <HAL_GPIO_Init+0x2ec>)
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	089b      	lsrs	r3, r3, #2
 8005f78:	3302      	adds	r3, #2
 8005f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	220f      	movs	r2, #15
 8005f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8e:	43db      	mvns	r3, r3
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	4013      	ands	r3, r2
 8005f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a49      	ldr	r2, [pc, #292]	; (80060c0 <HAL_GPIO_Init+0x2f0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d019      	beq.n	8005fd2 <HAL_GPIO_Init+0x202>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a48      	ldr	r2, [pc, #288]	; (80060c4 <HAL_GPIO_Init+0x2f4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d013      	beq.n	8005fce <HAL_GPIO_Init+0x1fe>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a47      	ldr	r2, [pc, #284]	; (80060c8 <HAL_GPIO_Init+0x2f8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00d      	beq.n	8005fca <HAL_GPIO_Init+0x1fa>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a46      	ldr	r2, [pc, #280]	; (80060cc <HAL_GPIO_Init+0x2fc>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d007      	beq.n	8005fc6 <HAL_GPIO_Init+0x1f6>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a45      	ldr	r2, [pc, #276]	; (80060d0 <HAL_GPIO_Init+0x300>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d101      	bne.n	8005fc2 <HAL_GPIO_Init+0x1f2>
 8005fbe:	2304      	movs	r3, #4
 8005fc0:	e008      	b.n	8005fd4 <HAL_GPIO_Init+0x204>
 8005fc2:	2307      	movs	r3, #7
 8005fc4:	e006      	b.n	8005fd4 <HAL_GPIO_Init+0x204>
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e004      	b.n	8005fd4 <HAL_GPIO_Init+0x204>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e002      	b.n	8005fd4 <HAL_GPIO_Init+0x204>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e000      	b.n	8005fd4 <HAL_GPIO_Init+0x204>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	f002 0203 	and.w	r2, r2, #3
 8005fda:	0092      	lsls	r2, r2, #2
 8005fdc:	4093      	lsls	r3, r2
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fe4:	4935      	ldr	r1, [pc, #212]	; (80060bc <HAL_GPIO_Init+0x2ec>)
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	089b      	lsrs	r3, r3, #2
 8005fea:	3302      	adds	r3, #2
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ff2:	4b38      	ldr	r3, [pc, #224]	; (80060d4 <HAL_GPIO_Init+0x304>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	43db      	mvns	r3, r3
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	4013      	ands	r3, r2
 8006000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006016:	4a2f      	ldr	r2, [pc, #188]	; (80060d4 <HAL_GPIO_Init+0x304>)
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800601c:	4b2d      	ldr	r3, [pc, #180]	; (80060d4 <HAL_GPIO_Init+0x304>)
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	43db      	mvns	r3, r3
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	4013      	ands	r3, r2
 800602a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d003      	beq.n	8006040 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	4313      	orrs	r3, r2
 800603e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006040:	4a24      	ldr	r2, [pc, #144]	; (80060d4 <HAL_GPIO_Init+0x304>)
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006046:	4b23      	ldr	r3, [pc, #140]	; (80060d4 <HAL_GPIO_Init+0x304>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	43db      	mvns	r3, r3
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	4013      	ands	r3, r2
 8006054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800606a:	4a1a      	ldr	r2, [pc, #104]	; (80060d4 <HAL_GPIO_Init+0x304>)
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006070:	4b18      	ldr	r3, [pc, #96]	; (80060d4 <HAL_GPIO_Init+0x304>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	43db      	mvns	r3, r3
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	4013      	ands	r3, r2
 800607e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006094:	4a0f      	ldr	r2, [pc, #60]	; (80060d4 <HAL_GPIO_Init+0x304>)
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	3301      	adds	r3, #1
 800609e:	61fb      	str	r3, [r7, #28]
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	2b0f      	cmp	r3, #15
 80060a4:	f67f aea2 	bls.w	8005dec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	3724      	adds	r7, #36	; 0x24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	40023800 	.word	0x40023800
 80060bc:	40013800 	.word	0x40013800
 80060c0:	40020000 	.word	0x40020000
 80060c4:	40020400 	.word	0x40020400
 80060c8:	40020800 	.word	0x40020800
 80060cc:	40020c00 	.word	0x40020c00
 80060d0:	40021000 	.word	0x40021000
 80060d4:	40013c00 	.word	0x40013c00

080060d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	887b      	ldrh	r3, [r7, #2]
 80060ea:	4013      	ands	r3, r2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060f0:	2301      	movs	r3, #1
 80060f2:	73fb      	strb	r3, [r7, #15]
 80060f4:	e001      	b.n	80060fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060f6:	2300      	movs	r3, #0
 80060f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	807b      	strh	r3, [r7, #2]
 8006114:	4613      	mov	r3, r2
 8006116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006118:	787b      	ldrb	r3, [r7, #1]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800611e:	887a      	ldrh	r2, [r7, #2]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006124:	e003      	b.n	800612e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006126:	887b      	ldrh	r3, [r7, #2]
 8006128:	041a      	lsls	r2, r3, #16
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	619a      	str	r2, [r3, #24]
}
 800612e:	bf00      	nop
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800613a:	b480      	push	{r7}
 800613c:	b085      	sub	sp, #20
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	460b      	mov	r3, r1
 8006144:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800614c:	887a      	ldrh	r2, [r7, #2]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4013      	ands	r3, r2
 8006152:	041a      	lsls	r2, r3, #16
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	43d9      	mvns	r1, r3
 8006158:	887b      	ldrh	r3, [r7, #2]
 800615a:	400b      	ands	r3, r1
 800615c:	431a      	orrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	619a      	str	r2, [r3, #24]
}
 8006162:	bf00      	nop
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	4603      	mov	r3, r0
 8006178:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800617a:	4b08      	ldr	r3, [pc, #32]	; (800619c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800617c:	695a      	ldr	r2, [r3, #20]
 800617e:	88fb      	ldrh	r3, [r7, #6]
 8006180:	4013      	ands	r3, r2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d006      	beq.n	8006194 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006186:	4a05      	ldr	r2, [pc, #20]	; (800619c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006188:	88fb      	ldrh	r3, [r7, #6]
 800618a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800618c:	88fb      	ldrh	r3, [r7, #6]
 800618e:	4618      	mov	r0, r3
 8006190:	f7fe fd02 	bl	8004b98 <HAL_GPIO_EXTI_Callback>
  }
}
 8006194:	bf00      	nop
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40013c00 	.word	0x40013c00

080061a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e12b      	b.n	800640a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d106      	bne.n	80061cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fe fdd8 	bl	8004d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2224      	movs	r2, #36	; 0x24
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0201 	bic.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006202:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006204:	f002 fbb0 	bl	8008968 <HAL_RCC_GetPCLK1Freq>
 8006208:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	4a81      	ldr	r2, [pc, #516]	; (8006414 <HAL_I2C_Init+0x274>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d807      	bhi.n	8006224 <HAL_I2C_Init+0x84>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4a80      	ldr	r2, [pc, #512]	; (8006418 <HAL_I2C_Init+0x278>)
 8006218:	4293      	cmp	r3, r2
 800621a:	bf94      	ite	ls
 800621c:	2301      	movls	r3, #1
 800621e:	2300      	movhi	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	e006      	b.n	8006232 <HAL_I2C_Init+0x92>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4a7d      	ldr	r2, [pc, #500]	; (800641c <HAL_I2C_Init+0x27c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	bf94      	ite	ls
 800622c:	2301      	movls	r3, #1
 800622e:	2300      	movhi	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e0e7      	b.n	800640a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4a78      	ldr	r2, [pc, #480]	; (8006420 <HAL_I2C_Init+0x280>)
 800623e:	fba2 2303 	umull	r2, r3, r2, r3
 8006242:	0c9b      	lsrs	r3, r3, #18
 8006244:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	4a6a      	ldr	r2, [pc, #424]	; (8006414 <HAL_I2C_Init+0x274>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d802      	bhi.n	8006274 <HAL_I2C_Init+0xd4>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	3301      	adds	r3, #1
 8006272:	e009      	b.n	8006288 <HAL_I2C_Init+0xe8>
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800627a:	fb02 f303 	mul.w	r3, r2, r3
 800627e:	4a69      	ldr	r2, [pc, #420]	; (8006424 <HAL_I2C_Init+0x284>)
 8006280:	fba2 2303 	umull	r2, r3, r2, r3
 8006284:	099b      	lsrs	r3, r3, #6
 8006286:	3301      	adds	r3, #1
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6812      	ldr	r2, [r2, #0]
 800628c:	430b      	orrs	r3, r1
 800628e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800629a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	495c      	ldr	r1, [pc, #368]	; (8006414 <HAL_I2C_Init+0x274>)
 80062a4:	428b      	cmp	r3, r1
 80062a6:	d819      	bhi.n	80062dc <HAL_I2C_Init+0x13c>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	1e59      	subs	r1, r3, #1
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80062b6:	1c59      	adds	r1, r3, #1
 80062b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80062bc:	400b      	ands	r3, r1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <HAL_I2C_Init+0x138>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	1e59      	subs	r1, r3, #1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	005b      	lsls	r3, r3, #1
 80062cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80062d0:	3301      	adds	r3, #1
 80062d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d6:	e051      	b.n	800637c <HAL_I2C_Init+0x1dc>
 80062d8:	2304      	movs	r3, #4
 80062da:	e04f      	b.n	800637c <HAL_I2C_Init+0x1dc>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d111      	bne.n	8006308 <HAL_I2C_Init+0x168>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	1e58      	subs	r0, r3, #1
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6859      	ldr	r1, [r3, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	440b      	add	r3, r1
 80062f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80062f6:	3301      	adds	r3, #1
 80062f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	bf0c      	ite	eq
 8006300:	2301      	moveq	r3, #1
 8006302:	2300      	movne	r3, #0
 8006304:	b2db      	uxtb	r3, r3
 8006306:	e012      	b.n	800632e <HAL_I2C_Init+0x18e>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	1e58      	subs	r0, r3, #1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6859      	ldr	r1, [r3, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	440b      	add	r3, r1
 8006316:	0099      	lsls	r1, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	fbb0 f3f3 	udiv	r3, r0, r3
 800631e:	3301      	adds	r3, #1
 8006320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006324:	2b00      	cmp	r3, #0
 8006326:	bf0c      	ite	eq
 8006328:	2301      	moveq	r3, #1
 800632a:	2300      	movne	r3, #0
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <HAL_I2C_Init+0x196>
 8006332:	2301      	movs	r3, #1
 8006334:	e022      	b.n	800637c <HAL_I2C_Init+0x1dc>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10e      	bne.n	800635c <HAL_I2C_Init+0x1bc>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	1e58      	subs	r0, r3, #1
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6859      	ldr	r1, [r3, #4]
 8006346:	460b      	mov	r3, r1
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	440b      	add	r3, r1
 800634c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006350:	3301      	adds	r3, #1
 8006352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800635a:	e00f      	b.n	800637c <HAL_I2C_Init+0x1dc>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	1e58      	subs	r0, r3, #1
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6859      	ldr	r1, [r3, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	440b      	add	r3, r1
 800636a:	0099      	lsls	r1, r3, #2
 800636c:	440b      	add	r3, r1
 800636e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006372:	3301      	adds	r3, #1
 8006374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006378:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	6809      	ldr	r1, [r1, #0]
 8006380:	4313      	orrs	r3, r2
 8006382:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69da      	ldr	r2, [r3, #28]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	431a      	orrs	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80063aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6911      	ldr	r1, [r2, #16]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	68d2      	ldr	r2, [r2, #12]
 80063b6:	4311      	orrs	r1, r2
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	6812      	ldr	r2, [r2, #0]
 80063bc:	430b      	orrs	r3, r1
 80063be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	695a      	ldr	r2, [r3, #20]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	430a      	orrs	r2, r1
 80063da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2220      	movs	r2, #32
 80063f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	000186a0 	.word	0x000186a0
 8006418:	001e847f 	.word	0x001e847f
 800641c:	003d08ff 	.word	0x003d08ff
 8006420:	431bde83 	.word	0x431bde83
 8006424:	10624dd3 	.word	0x10624dd3

08006428 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	607a      	str	r2, [r7, #4]
 8006432:	461a      	mov	r2, r3
 8006434:	460b      	mov	r3, r1
 8006436:	817b      	strh	r3, [r7, #10]
 8006438:	4613      	mov	r3, r2
 800643a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b20      	cmp	r3, #32
 800644a:	f040 8085 	bne.w	8006558 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800644e:	4b46      	ldr	r3, [pc, #280]	; (8006568 <HAL_I2C_Master_Transmit_IT+0x140>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	08db      	lsrs	r3, r3, #3
 8006454:	4a45      	ldr	r2, [pc, #276]	; (800656c <HAL_I2C_Master_Transmit_IT+0x144>)
 8006456:	fba2 2303 	umull	r2, r3, r2, r3
 800645a:	0a1a      	lsrs	r2, r3, #8
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	009a      	lsls	r2, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	3b01      	subs	r3, #1
 800646c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d116      	bne.n	80064a2 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	f043 0220 	orr.w	r2, r3, #32
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e05b      	b.n	800655a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d0db      	beq.n	8006468 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_I2C_Master_Transmit_IT+0x96>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e04d      	b.n	800655a <HAL_I2C_Master_Transmit_IT+0x132>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d007      	beq.n	80064e4 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0201 	orr.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2221      	movs	r2, #33	; 0x21
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2210      	movs	r2, #16
 8006500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	893a      	ldrh	r2, [r7, #8]
 8006514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4a13      	ldr	r2, [pc, #76]	; (8006570 <HAL_I2C_Master_Transmit_IT+0x148>)
 8006524:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006526:	897a      	ldrh	r2, [r7, #10]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006542:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006552:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	e000      	b.n	800655a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8006558:	2302      	movs	r3, #2
  }
}
 800655a:	4618      	mov	r0, r3
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	200003a4 	.word	0x200003a4
 800656c:	14f8b589 	.word	0x14f8b589
 8006570:	ffff0000 	.word	0xffff0000

08006574 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	607a      	str	r2, [r7, #4]
 800657e:	461a      	mov	r2, r3
 8006580:	460b      	mov	r3, r1
 8006582:	817b      	strh	r3, [r7, #10]
 8006584:	4613      	mov	r3, r2
 8006586:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b20      	cmp	r3, #32
 8006596:	f040 808d 	bne.w	80066b4 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800659a:	4b4a      	ldr	r3, [pc, #296]	; (80066c4 <HAL_I2C_Master_Receive_IT+0x150>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	08db      	lsrs	r3, r3, #3
 80065a0:	4a49      	ldr	r2, [pc, #292]	; (80066c8 <HAL_I2C_Master_Receive_IT+0x154>)
 80065a2:	fba2 2303 	umull	r2, r3, r2, r3
 80065a6:	0a1a      	lsrs	r2, r3, #8
 80065a8:	4613      	mov	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	009a      	lsls	r2, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d116      	bne.n	80065ee <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	f043 0220 	orr.w	r2, r3, #32
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e063      	b.n	80066b6 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d0db      	beq.n	80065b4 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006602:	2b01      	cmp	r3, #1
 8006604:	d101      	bne.n	800660a <HAL_I2C_Master_Receive_IT+0x96>
 8006606:	2302      	movs	r3, #2
 8006608:	e055      	b.n	80066b6 <HAL_I2C_Master_Receive_IT+0x142>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b01      	cmp	r3, #1
 800661e:	d007      	beq.n	8006630 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0201 	orr.w	r2, r2, #1
 800662e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800663e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2222      	movs	r2, #34	; 0x22
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2210      	movs	r2, #16
 800664c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	893a      	ldrh	r2, [r7, #8]
 8006660:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4a17      	ldr	r2, [pc, #92]	; (80066cc <HAL_I2C_Master_Receive_IT+0x158>)
 8006670:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006672:	897a      	ldrh	r2, [r7, #10]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800668e:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800669e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ae:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	e000      	b.n	80066b6 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80066b4:	2302      	movs	r3, #2
  }
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	200003a4 	.word	0x200003a4
 80066c8:	14f8b589 	.word	0x14f8b589
 80066cc:	ffff0000 	.word	0xffff0000

080066d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	2b10      	cmp	r3, #16
 80066fe:	d003      	beq.n	8006708 <HAL_I2C_EV_IRQHandler+0x38>
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	2b40      	cmp	r3, #64	; 0x40
 8006704:	f040 80c1 	bne.w	800688a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10d      	bne.n	800673e <HAL_I2C_EV_IRQHandler+0x6e>
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006728:	d003      	beq.n	8006732 <HAL_I2C_EV_IRQHandler+0x62>
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006730:	d101      	bne.n	8006736 <HAL_I2C_EV_IRQHandler+0x66>
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <HAL_I2C_EV_IRQHandler+0x68>
 8006736:	2300      	movs	r3, #0
 8006738:	2b01      	cmp	r3, #1
 800673a:	f000 8132 	beq.w	80069a2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00c      	beq.n	8006762 <HAL_I2C_EV_IRQHandler+0x92>
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	0a5b      	lsrs	r3, r3, #9
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d006      	beq.n	8006762 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 fc7b 	bl	8008050 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fd83 	bl	8007266 <I2C_Master_SB>
 8006760:	e092      	b.n	8006888 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	08db      	lsrs	r3, r3, #3
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d009      	beq.n	8006782 <HAL_I2C_EV_IRQHandler+0xb2>
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	0a5b      	lsrs	r3, r3, #9
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fdf9 	bl	8007372 <I2C_Master_ADD10>
 8006780:	e082      	b.n	8006888 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	085b      	lsrs	r3, r3, #1
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <HAL_I2C_EV_IRQHandler+0xd2>
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	0a5b      	lsrs	r3, r3, #9
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fe13 	bl	80073c6 <I2C_Master_ADDR>
 80067a0:	e072      	b.n	8006888 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	089b      	lsrs	r3, r3, #2
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d03b      	beq.n	8006826 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067bc:	f000 80f3 	beq.w	80069a6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	09db      	lsrs	r3, r3, #7
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00f      	beq.n	80067ec <HAL_I2C_EV_IRQHandler+0x11c>
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	0a9b      	lsrs	r3, r3, #10
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d009      	beq.n	80067ec <HAL_I2C_EV_IRQHandler+0x11c>
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	089b      	lsrs	r3, r3, #2
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d103      	bne.n	80067ec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f9f3 	bl	8006bd0 <I2C_MasterTransmit_TXE>
 80067ea:	e04d      	b.n	8006888 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	089b      	lsrs	r3, r3, #2
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 80d6 	beq.w	80069a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	0a5b      	lsrs	r3, r3, #9
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 80cf 	beq.w	80069a6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006808:	7bbb      	ldrb	r3, [r7, #14]
 800680a:	2b21      	cmp	r3, #33	; 0x21
 800680c:	d103      	bne.n	8006816 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fa7a 	bl	8006d08 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006814:	e0c7      	b.n	80069a6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	2b40      	cmp	r3, #64	; 0x40
 800681a:	f040 80c4 	bne.w	80069a6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fae8 	bl	8006df4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006824:	e0bf      	b.n	80069a6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006834:	f000 80b7 	beq.w	80069a6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	099b      	lsrs	r3, r3, #6
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00f      	beq.n	8006864 <HAL_I2C_EV_IRQHandler+0x194>
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	0a9b      	lsrs	r3, r3, #10
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d009      	beq.n	8006864 <HAL_I2C_EV_IRQHandler+0x194>
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	089b      	lsrs	r3, r3, #2
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d103      	bne.n	8006864 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fb5d 	bl	8006f1c <I2C_MasterReceive_RXNE>
 8006862:	e011      	b.n	8006888 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	089b      	lsrs	r3, r3, #2
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 809a 	beq.w	80069a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	0a5b      	lsrs	r3, r3, #9
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 8093 	beq.w	80069a6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fc06 	bl	8007092 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006886:	e08e      	b.n	80069a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006888:	e08d      	b.n	80069a6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	2b00      	cmp	r3, #0
 8006890:	d004      	beq.n	800689c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	61fb      	str	r3, [r7, #28]
 800689a:	e007      	b.n	80068ac <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	085b      	lsrs	r3, r3, #1
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d012      	beq.n	80068de <HAL_I2C_EV_IRQHandler+0x20e>
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	0a5b      	lsrs	r3, r3, #9
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00c      	beq.n	80068de <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80068d4:	69b9      	ldr	r1, [r7, #24]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 ffc4 	bl	8007864 <I2C_Slave_ADDR>
 80068dc:	e066      	b.n	80069ac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	091b      	lsrs	r3, r3, #4
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d009      	beq.n	80068fe <HAL_I2C_EV_IRQHandler+0x22e>
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	0a5b      	lsrs	r3, r3, #9
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fffe 	bl	80078f8 <I2C_Slave_STOPF>
 80068fc:	e056      	b.n	80069ac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	2b21      	cmp	r3, #33	; 0x21
 8006902:	d002      	beq.n	800690a <HAL_I2C_EV_IRQHandler+0x23a>
 8006904:	7bbb      	ldrb	r3, [r7, #14]
 8006906:	2b29      	cmp	r3, #41	; 0x29
 8006908:	d125      	bne.n	8006956 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	09db      	lsrs	r3, r3, #7
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00f      	beq.n	8006936 <HAL_I2C_EV_IRQHandler+0x266>
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	0a9b      	lsrs	r3, r3, #10
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d009      	beq.n	8006936 <HAL_I2C_EV_IRQHandler+0x266>
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	089b      	lsrs	r3, r3, #2
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d103      	bne.n	8006936 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 feda 	bl	80076e8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006934:	e039      	b.n	80069aa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	089b      	lsrs	r3, r3, #2
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d033      	beq.n	80069aa <HAL_I2C_EV_IRQHandler+0x2da>
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	0a5b      	lsrs	r3, r3, #9
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d02d      	beq.n	80069aa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 ff07 	bl	8007762 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006954:	e029      	b.n	80069aa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	099b      	lsrs	r3, r3, #6
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00f      	beq.n	8006982 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	0a9b      	lsrs	r3, r3, #10
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d009      	beq.n	8006982 <HAL_I2C_EV_IRQHandler+0x2b2>
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	089b      	lsrs	r3, r3, #2
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d103      	bne.n	8006982 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 ff12 	bl	80077a4 <I2C_SlaveReceive_RXNE>
 8006980:	e014      	b.n	80069ac <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	089b      	lsrs	r3, r3, #2
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00e      	beq.n	80069ac <HAL_I2C_EV_IRQHandler+0x2dc>
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	0a5b      	lsrs	r3, r3, #9
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d008      	beq.n	80069ac <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 ff40 	bl	8007820 <I2C_SlaveReceive_BTF>
 80069a0:	e004      	b.n	80069ac <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80069a2:	bf00      	nop
 80069a4:	e002      	b.n	80069ac <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069a6:	bf00      	nop
 80069a8:	e000      	b.n	80069ac <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069aa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80069ac:	3720      	adds	r7, #32
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b08a      	sub	sp, #40	; 0x28
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80069ca:	2300      	movs	r3, #0
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069d4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	0a1b      	lsrs	r3, r3, #8
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00e      	beq.n	8006a00 <HAL_I2C_ER_IRQHandler+0x4e>
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	0a1b      	lsrs	r3, r3, #8
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d008      	beq.n	8006a00 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	f043 0301 	orr.w	r3, r3, #1
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069fe:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	0a5b      	lsrs	r3, r3, #9
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00e      	beq.n	8006a2a <HAL_I2C_ER_IRQHandler+0x78>
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	0a1b      	lsrs	r3, r3, #8
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d008      	beq.n	8006a2a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	f043 0302 	orr.w	r3, r3, #2
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006a28:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	0a9b      	lsrs	r3, r3, #10
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d03f      	beq.n	8006ab6 <HAL_I2C_ER_IRQHandler+0x104>
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	0a1b      	lsrs	r3, r3, #8
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d039      	beq.n	8006ab6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006a42:	7efb      	ldrb	r3, [r7, #27]
 8006a44:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a54:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006a5c:	7ebb      	ldrb	r3, [r7, #26]
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d112      	bne.n	8006a88 <HAL_I2C_ER_IRQHandler+0xd6>
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10f      	bne.n	8006a88 <HAL_I2C_ER_IRQHandler+0xd6>
 8006a68:	7cfb      	ldrb	r3, [r7, #19]
 8006a6a:	2b21      	cmp	r3, #33	; 0x21
 8006a6c:	d008      	beq.n	8006a80 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006a6e:	7cfb      	ldrb	r3, [r7, #19]
 8006a70:	2b29      	cmp	r3, #41	; 0x29
 8006a72:	d005      	beq.n	8006a80 <HAL_I2C_ER_IRQHandler+0xce>
 8006a74:	7cfb      	ldrb	r3, [r7, #19]
 8006a76:	2b28      	cmp	r3, #40	; 0x28
 8006a78:	d106      	bne.n	8006a88 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b21      	cmp	r3, #33	; 0x21
 8006a7e:	d103      	bne.n	8006a88 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 f869 	bl	8007b58 <I2C_Slave_AF>
 8006a86:	e016      	b.n	8006ab6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a90:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	f043 0304 	orr.w	r3, r3, #4
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006a9a:	7efb      	ldrb	r3, [r7, #27]
 8006a9c:	2b10      	cmp	r3, #16
 8006a9e:	d002      	beq.n	8006aa6 <HAL_I2C_ER_IRQHandler+0xf4>
 8006aa0:	7efb      	ldrb	r3, [r7, #27]
 8006aa2:	2b40      	cmp	r3, #64	; 0x40
 8006aa4:	d107      	bne.n	8006ab6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ab4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	0adb      	lsrs	r3, r3, #11
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00e      	beq.n	8006ae0 <HAL_I2C_ER_IRQHandler+0x12e>
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	0a1b      	lsrs	r3, r3, #8
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d008      	beq.n	8006ae0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	f043 0308 	orr.w	r3, r3, #8
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006ade:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d008      	beq.n	8006af8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	431a      	orrs	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 f8a0 	bl	8007c38 <I2C_ITError>
  }
}
 8006af8:	bf00      	nop
 8006afa:	3728      	adds	r7, #40	; 0x28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	70fb      	strb	r3, [r7, #3]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006be6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d150      	bne.n	8006c98 <I2C_MasterTransmit_TXE+0xc8>
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	2b21      	cmp	r3, #33	; 0x21
 8006bfa:	d14d      	bne.n	8006c98 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b08      	cmp	r3, #8
 8006c00:	d01d      	beq.n	8006c3e <I2C_MasterTransmit_TXE+0x6e>
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d01a      	beq.n	8006c3e <I2C_MasterTransmit_TXE+0x6e>
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c0e:	d016      	beq.n	8006c3e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c1e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2211      	movs	r2, #17
 8006c24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7ff ff62 	bl	8006b00 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c3c:	e060      	b.n	8006d00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c4c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c5c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b40      	cmp	r3, #64	; 0x40
 8006c76:	d107      	bne.n	8006c88 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff ff7d 	bl	8006b80 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c86:	e03b      	b.n	8006d00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff ff35 	bl	8006b00 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c96:	e033      	b.n	8006d00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	2b21      	cmp	r3, #33	; 0x21
 8006c9c:	d005      	beq.n	8006caa <I2C_MasterTransmit_TXE+0xda>
 8006c9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ca0:	2b40      	cmp	r3, #64	; 0x40
 8006ca2:	d12d      	bne.n	8006d00 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	2b22      	cmp	r3, #34	; 0x22
 8006ca8:	d12a      	bne.n	8006d00 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d108      	bne.n	8006cc6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006cc4:	e01c      	b.n	8006d00 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b40      	cmp	r3, #64	; 0x40
 8006cd0:	d103      	bne.n	8006cda <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f88e 	bl	8006df4 <I2C_MemoryTransmit_TXE_BTF>
}
 8006cd8:	e012      	b.n	8006d00 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	781a      	ldrb	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006cfe:	e7ff      	b.n	8006d00 <I2C_MasterTransmit_TXE+0x130>
 8006d00:	bf00      	nop
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d14:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b21      	cmp	r3, #33	; 0x21
 8006d20:	d164      	bne.n	8006dec <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d012      	beq.n	8006d52 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	781a      	ldrb	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006d50:	e04c      	b.n	8006dec <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d01d      	beq.n	8006d94 <I2C_MasterTransmit_BTF+0x8c>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2b20      	cmp	r3, #32
 8006d5c:	d01a      	beq.n	8006d94 <I2C_MasterTransmit_BTF+0x8c>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d64:	d016      	beq.n	8006d94 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d74:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2211      	movs	r2, #17
 8006d7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff feb7 	bl	8006b00 <HAL_I2C_MasterTxCpltCallback>
}
 8006d92:	e02b      	b.n	8006dec <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006da2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006db2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b40      	cmp	r3, #64	; 0x40
 8006dcc:	d107      	bne.n	8006dde <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff fed2 	bl	8006b80 <HAL_I2C_MemTxCpltCallback>
}
 8006ddc:	e006      	b.n	8006dec <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7ff fe8a 	bl	8006b00 <HAL_I2C_MasterTxCpltCallback>
}
 8006dec:	bf00      	nop
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d11d      	bne.n	8006e48 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d10b      	bne.n	8006e2c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e24:	1c9a      	adds	r2, r3, #2
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006e2a:	e073      	b.n	8006f14 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	121b      	asrs	r3, r3, #8
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006e46:	e065      	b.n	8006f14 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d10b      	bne.n	8006e68 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006e66:	e055      	b.n	8006f14 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d151      	bne.n	8006f14 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	2b22      	cmp	r3, #34	; 0x22
 8006e74:	d10d      	bne.n	8006e92 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e84:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006e90:	e040      	b.n	8006f14 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d015      	beq.n	8006ec8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	2b21      	cmp	r3, #33	; 0x21
 8006ea0:	d112      	bne.n	8006ec8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	781a      	ldrb	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006ec6:	e025      	b.n	8006f14 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d120      	bne.n	8006f14 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	2b21      	cmp	r3, #33	; 0x21
 8006ed6:	d11d      	bne.n	8006f14 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ee6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ef6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7ff fe36 	bl	8006b80 <HAL_I2C_MemTxCpltCallback>
}
 8006f14:	bf00      	nop
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b22      	cmp	r3, #34	; 0x22
 8006f2e:	f040 80ac 	bne.w	800708a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b03      	cmp	r3, #3
 8006f3e:	d921      	bls.n	8006f84 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691a      	ldr	r2, [r3, #16]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	f040 808c 	bne.w	800708a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f80:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006f82:	e082      	b.n	800708a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d075      	beq.n	8007078 <I2C_MasterReceive_RXNE+0x15c>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d002      	beq.n	8006f98 <I2C_MasterReceive_RXNE+0x7c>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d16f      	bne.n	8007078 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f001 f827 	bl	8007fec <I2C_WaitOnSTOPRequestThroughIT>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d142      	bne.n	800702a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fb2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fc2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691a      	ldr	r2, [r3, #16]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b40      	cmp	r3, #64	; 0x40
 8006ffc:	d10a      	bne.n	8007014 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7ff fdc1 	bl	8006b94 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007012:	e03a      	b.n	800708a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2212      	movs	r2, #18
 8007020:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7ff fd76 	bl	8006b14 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007028:	e02f      	b.n	800708a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007038:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	b2d2      	uxtb	r2, r2
 8007046:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2220      	movs	r2, #32
 8007064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7ff fd99 	bl	8006ba8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007076:	e008      	b.n	800708a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007086:	605a      	str	r2, [r3, #4]
}
 8007088:	e7ff      	b.n	800708a <I2C_MasterReceive_RXNE+0x16e>
 800708a:	bf00      	nop
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d11b      	bne.n	80070e2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070b8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	691a      	ldr	r2, [r3, #16]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	b2d2      	uxtb	r2, r2
 80070c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	1c5a      	adds	r2, r3, #1
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	3b01      	subs	r3, #1
 80070da:	b29a      	uxth	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80070e0:	e0bd      	b.n	800725e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2b03      	cmp	r3, #3
 80070ea:	d129      	bne.n	8007140 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070fa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d00a      	beq.n	8007118 <I2C_MasterReceive_BTF+0x86>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b02      	cmp	r3, #2
 8007106:	d007      	beq.n	8007118 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007116:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691a      	ldr	r2, [r3, #16]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007134:	b29b      	uxth	r3, r3
 8007136:	3b01      	subs	r3, #1
 8007138:	b29a      	uxth	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800713e:	e08e      	b.n	800725e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007144:	b29b      	uxth	r3, r3
 8007146:	2b02      	cmp	r3, #2
 8007148:	d176      	bne.n	8007238 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d002      	beq.n	8007156 <I2C_MasterReceive_BTF+0xc4>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b10      	cmp	r3, #16
 8007154:	d108      	bne.n	8007168 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	e019      	b.n	800719c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2b04      	cmp	r3, #4
 800716c:	d002      	beq.n	8007174 <I2C_MasterReceive_BTF+0xe2>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b02      	cmp	r3, #2
 8007172:	d108      	bne.n	8007186 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	e00a      	b.n	800719c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b10      	cmp	r3, #16
 800718a:	d007      	beq.n	800719c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800719a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691a      	ldr	r2, [r3, #16]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	3b01      	subs	r3, #1
 80071bc:	b29a      	uxth	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	691a      	ldr	r2, [r3, #16]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	b2d2      	uxtb	r2, r2
 80071ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071de:	b29b      	uxth	r3, r3
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80071f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b40      	cmp	r3, #64	; 0x40
 800720a:	d10a      	bne.n	8007222 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff fcba 	bl	8006b94 <HAL_I2C_MemRxCpltCallback>
}
 8007220:	e01d      	b.n	800725e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2212      	movs	r2, #18
 800722e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff fc6f 	bl	8006b14 <HAL_I2C_MasterRxCpltCallback>
}
 8007236:	e012      	b.n	800725e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	691a      	ldr	r2, [r3, #16]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007254:	b29b      	uxth	r3, r3
 8007256:	3b01      	subs	r3, #1
 8007258:	b29a      	uxth	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800725e:	bf00      	nop
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b40      	cmp	r3, #64	; 0x40
 8007278:	d117      	bne.n	80072aa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800727e:	2b00      	cmp	r3, #0
 8007280:	d109      	bne.n	8007296 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007286:	b2db      	uxtb	r3, r3
 8007288:	461a      	mov	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007292:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007294:	e067      	b.n	8007366 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729a:	b2db      	uxtb	r3, r3
 800729c:	f043 0301 	orr.w	r3, r3, #1
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	611a      	str	r2, [r3, #16]
}
 80072a8:	e05d      	b.n	8007366 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072b2:	d133      	bne.n	800731c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b21      	cmp	r3, #33	; 0x21
 80072be:	d109      	bne.n	80072d4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	461a      	mov	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072d0:	611a      	str	r2, [r3, #16]
 80072d2:	e008      	b.n	80072e6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	f043 0301 	orr.w	r3, r3, #1
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d004      	beq.n	80072f8 <I2C_Master_SB+0x92>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d108      	bne.n	800730a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d032      	beq.n	8007366 <I2C_Master_SB+0x100>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007306:	2b00      	cmp	r3, #0
 8007308:	d02d      	beq.n	8007366 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007318:	605a      	str	r2, [r3, #4]
}
 800731a:	e024      	b.n	8007366 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10e      	bne.n	8007342 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007328:	b29b      	uxth	r3, r3
 800732a:	11db      	asrs	r3, r3, #7
 800732c:	b2db      	uxtb	r3, r3
 800732e:	f003 0306 	and.w	r3, r3, #6
 8007332:	b2db      	uxtb	r3, r3
 8007334:	f063 030f 	orn	r3, r3, #15
 8007338:	b2da      	uxtb	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	611a      	str	r2, [r3, #16]
}
 8007340:	e011      	b.n	8007366 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007346:	2b01      	cmp	r3, #1
 8007348:	d10d      	bne.n	8007366 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734e:	b29b      	uxth	r3, r3
 8007350:	11db      	asrs	r3, r3, #7
 8007352:	b2db      	uxtb	r3, r3
 8007354:	f003 0306 	and.w	r3, r3, #6
 8007358:	b2db      	uxtb	r3, r3
 800735a:	f063 030e 	orn	r3, r3, #14
 800735e:	b2da      	uxtb	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	611a      	str	r2, [r3, #16]
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737e:	b2da      	uxtb	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738a:	2b00      	cmp	r3, #0
 800738c:	d004      	beq.n	8007398 <I2C_Master_ADD10+0x26>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007394:	2b00      	cmp	r3, #0
 8007396:	d108      	bne.n	80073aa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00c      	beq.n	80073ba <I2C_Master_ADD10+0x48>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d007      	beq.n	80073ba <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073b8:	605a      	str	r2, [r3, #4]
  }
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b091      	sub	sp, #68	; 0x44
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073dc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b22      	cmp	r3, #34	; 0x22
 80073ee:	f040 8169 	bne.w	80076c4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10f      	bne.n	800741a <I2C_Master_ADDR+0x54>
 80073fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073fe:	2b40      	cmp	r3, #64	; 0x40
 8007400:	d10b      	bne.n	800741a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007402:	2300      	movs	r3, #0
 8007404:	633b      	str	r3, [r7, #48]	; 0x30
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	633b      	str	r3, [r7, #48]	; 0x30
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	633b      	str	r3, [r7, #48]	; 0x30
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	e160      	b.n	80076dc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800741e:	2b00      	cmp	r3, #0
 8007420:	d11d      	bne.n	800745e <I2C_Master_ADDR+0x98>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800742a:	d118      	bne.n	800745e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800742c:	2300      	movs	r3, #0
 800742e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007450:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	651a      	str	r2, [r3, #80]	; 0x50
 800745c:	e13e      	b.n	80076dc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007462:	b29b      	uxth	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d113      	bne.n	8007490 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007468:	2300      	movs	r3, #0
 800746a:	62bb      	str	r3, [r7, #40]	; 0x28
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	62bb      	str	r3, [r7, #40]	; 0x28
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	62bb      	str	r3, [r7, #40]	; 0x28
 800747c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	e115      	b.n	80076bc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007494:	b29b      	uxth	r3, r3
 8007496:	2b01      	cmp	r3, #1
 8007498:	f040 808a 	bne.w	80075b0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800749c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074a2:	d137      	bne.n	8007514 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074b2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074c2:	d113      	bne.n	80074ec <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074d4:	2300      	movs	r3, #0
 80074d6:	627b      	str	r3, [r7, #36]	; 0x24
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	627b      	str	r3, [r7, #36]	; 0x24
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	627b      	str	r3, [r7, #36]	; 0x24
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	e0e7      	b.n	80076bc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ec:	2300      	movs	r3, #0
 80074ee:	623b      	str	r3, [r7, #32]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	623b      	str	r3, [r7, #32]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	623b      	str	r3, [r7, #32]
 8007500:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	e0d3      	b.n	80076bc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007516:	2b08      	cmp	r3, #8
 8007518:	d02e      	beq.n	8007578 <I2C_Master_ADDR+0x1b2>
 800751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751c:	2b20      	cmp	r3, #32
 800751e:	d02b      	beq.n	8007578 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007522:	2b12      	cmp	r3, #18
 8007524:	d102      	bne.n	800752c <I2C_Master_ADDR+0x166>
 8007526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007528:	2b01      	cmp	r3, #1
 800752a:	d125      	bne.n	8007578 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	2b04      	cmp	r3, #4
 8007530:	d00e      	beq.n	8007550 <I2C_Master_ADDR+0x18a>
 8007532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007534:	2b02      	cmp	r3, #2
 8007536:	d00b      	beq.n	8007550 <I2C_Master_ADDR+0x18a>
 8007538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753a:	2b10      	cmp	r3, #16
 800753c:	d008      	beq.n	8007550 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	e007      	b.n	8007560 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800755e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007560:	2300      	movs	r3, #0
 8007562:	61fb      	str	r3, [r7, #28]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	61fb      	str	r3, [r7, #28]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	61fb      	str	r3, [r7, #28]
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	e0a1      	b.n	80076bc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007586:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007588:	2300      	movs	r3, #0
 800758a:	61bb      	str	r3, [r7, #24]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	61bb      	str	r3, [r7, #24]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	61bb      	str	r3, [r7, #24]
 800759c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	e085      	b.n	80076bc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d14d      	bne.n	8007656 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d016      	beq.n	80075ee <I2C_Master_ADDR+0x228>
 80075c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d013      	beq.n	80075ee <I2C_Master_ADDR+0x228>
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	2b10      	cmp	r3, #16
 80075ca:	d010      	beq.n	80075ee <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075da:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	e007      	b.n	80075fe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075fc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800760c:	d117      	bne.n	800763e <I2C_Master_ADDR+0x278>
 800760e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007610:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007614:	d00b      	beq.n	800762e <I2C_Master_ADDR+0x268>
 8007616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007618:	2b01      	cmp	r3, #1
 800761a:	d008      	beq.n	800762e <I2C_Master_ADDR+0x268>
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	2b08      	cmp	r3, #8
 8007620:	d005      	beq.n	800762e <I2C_Master_ADDR+0x268>
 8007622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007624:	2b10      	cmp	r3, #16
 8007626:	d002      	beq.n	800762e <I2C_Master_ADDR+0x268>
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	2b20      	cmp	r3, #32
 800762c:	d107      	bne.n	800763e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800763c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800763e:	2300      	movs	r3, #0
 8007640:	617b      	str	r3, [r7, #20]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	617b      	str	r3, [r7, #20]
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	e032      	b.n	80076bc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007664:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007674:	d117      	bne.n	80076a6 <I2C_Master_ADDR+0x2e0>
 8007676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007678:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800767c:	d00b      	beq.n	8007696 <I2C_Master_ADDR+0x2d0>
 800767e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007680:	2b01      	cmp	r3, #1
 8007682:	d008      	beq.n	8007696 <I2C_Master_ADDR+0x2d0>
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	2b08      	cmp	r3, #8
 8007688:	d005      	beq.n	8007696 <I2C_Master_ADDR+0x2d0>
 800768a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768c:	2b10      	cmp	r3, #16
 800768e:	d002      	beq.n	8007696 <I2C_Master_ADDR+0x2d0>
 8007690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007692:	2b20      	cmp	r3, #32
 8007694:	d107      	bne.n	80076a6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076a6:	2300      	movs	r3, #0
 80076a8:	613b      	str	r3, [r7, #16]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	613b      	str	r3, [r7, #16]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80076c2:	e00b      	b.n	80076dc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076c4:	2300      	movs	r3, #0
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	60fb      	str	r3, [r7, #12]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	68fb      	ldr	r3, [r7, #12]
}
 80076da:	e7ff      	b.n	80076dc <I2C_Master_ADDR+0x316>
 80076dc:	bf00      	nop
 80076de:	3744      	adds	r7, #68	; 0x44
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d02b      	beq.n	800775a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	781a      	ldrb	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771c:	b29b      	uxth	r3, r3
 800771e:	3b01      	subs	r3, #1
 8007720:	b29a      	uxth	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772a:	b29b      	uxth	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d114      	bne.n	800775a <I2C_SlaveTransmit_TXE+0x72>
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	2b29      	cmp	r3, #41	; 0x29
 8007734:	d111      	bne.n	800775a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007744:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2221      	movs	r2, #33	; 0x21
 800774a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2228      	movs	r2, #40	; 0x28
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff f9e7 	bl	8006b28 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800775a:	bf00      	nop
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776e:	b29b      	uxth	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	d011      	beq.n	8007798 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d02c      	beq.n	8007818 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	b2d2      	uxtb	r2, r2
 80077ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	1c5a      	adds	r2, r3, #1
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077da:	b29b      	uxth	r3, r3
 80077dc:	3b01      	subs	r3, #1
 80077de:	b29a      	uxth	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d114      	bne.n	8007818 <I2C_SlaveReceive_RXNE+0x74>
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	2b2a      	cmp	r3, #42	; 0x2a
 80077f2:	d111      	bne.n	8007818 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	685a      	ldr	r2, [r3, #4]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007802:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2222      	movs	r2, #34	; 0x22
 8007808:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2228      	movs	r2, #40	; 0x28
 800780e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7ff f992 	bl	8006b3c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007818:	bf00      	nop
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782c:	b29b      	uxth	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d012      	beq.n	8007858 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	691a      	ldr	r2, [r3, #16]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	b2d2      	uxtb	r2, r2
 800783e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800784e:	b29b      	uxth	r3, r3
 8007850:	3b01      	subs	r3, #1
 8007852:	b29a      	uxth	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007878:	b2db      	uxtb	r3, r3
 800787a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800787e:	2b28      	cmp	r3, #40	; 0x28
 8007880:	d127      	bne.n	80078d2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007890:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	089b      	lsrs	r3, r3, #2
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800789e:	2301      	movs	r3, #1
 80078a0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	09db      	lsrs	r3, r3, #7
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d103      	bne.n	80078b6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	81bb      	strh	r3, [r7, #12]
 80078b4:	e002      	b.n	80078bc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80078c4:	89ba      	ldrh	r2, [r7, #12]
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7ff f940 	bl	8006b50 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80078d0:	e00e      	b.n	80078f0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078d2:	2300      	movs	r3, #0
 80078d4:	60bb      	str	r3, [r7, #8]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	60bb      	str	r3, [r7, #8]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	60bb      	str	r3, [r7, #8]
 80078e6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80078f0:	bf00      	nop
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007906:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007916:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007918:	2300      	movs	r3, #0
 800791a:	60bb      	str	r3, [r7, #8]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	60bb      	str	r3, [r7, #8]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f042 0201 	orr.w	r2, r2, #1
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007944:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007954:	d172      	bne.n	8007a3c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007956:	7bfb      	ldrb	r3, [r7, #15]
 8007958:	2b22      	cmp	r3, #34	; 0x22
 800795a:	d002      	beq.n	8007962 <I2C_Slave_STOPF+0x6a>
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	2b2a      	cmp	r3, #42	; 0x2a
 8007960:	d135      	bne.n	80079ce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	b29a      	uxth	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007974:	b29b      	uxth	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d005      	beq.n	8007986 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	f043 0204 	orr.w	r2, r3, #4
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007994:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799a:	4618      	mov	r0, r3
 800799c:	f7fe f92a 	bl	8005bf4 <HAL_DMA_GetState>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d049      	beq.n	8007a3a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079aa:	4a69      	ldr	r2, [pc, #420]	; (8007b50 <I2C_Slave_STOPF+0x258>)
 80079ac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fd ff72 	bl	800589c <HAL_DMA_Abort_IT>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d03d      	beq.n	8007a3a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079c8:	4610      	mov	r0, r2
 80079ca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80079cc:	e035      	b.n	8007a3a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d005      	beq.n	80079f2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ea:	f043 0204 	orr.w	r2, r3, #4
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fe f8f4 	bl	8005bf4 <HAL_DMA_GetState>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d014      	beq.n	8007a3c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a16:	4a4e      	ldr	r2, [pc, #312]	; (8007b50 <I2C_Slave_STOPF+0x258>)
 8007a18:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fd ff3c 	bl	800589c <HAL_DMA_Abort_IT>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d008      	beq.n	8007a3c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a34:	4610      	mov	r0, r2
 8007a36:	4798      	blx	r3
 8007a38:	e000      	b.n	8007a3c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a3a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d03e      	beq.n	8007ac4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	f003 0304 	and.w	r3, r3, #4
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d112      	bne.n	8007a7a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	691a      	ldr	r2, [r3, #16]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5e:	b2d2      	uxtb	r2, r2
 8007a60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	3b01      	subs	r3, #1
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a84:	2b40      	cmp	r3, #64	; 0x40
 8007a86:	d112      	bne.n	8007aae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	691a      	ldr	r2, [r3, #16]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a92:	b2d2      	uxtb	r2, r2
 8007a94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d005      	beq.n	8007ac4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abc:	f043 0204 	orr.w	r2, r3, #4
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f8b3 	bl	8007c38 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007ad2:	e039      	b.n	8007b48 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad8:	d109      	bne.n	8007aee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2228      	movs	r2, #40	; 0x28
 8007ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7ff f827 	bl	8006b3c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b28      	cmp	r3, #40	; 0x28
 8007af8:	d111      	bne.n	8007b1e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a15      	ldr	r2, [pc, #84]	; (8007b54 <I2C_Slave_STOPF+0x25c>)
 8007afe:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2220      	movs	r2, #32
 8007b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7ff f828 	bl	8006b6c <HAL_I2C_ListenCpltCallback>
}
 8007b1c:	e014      	b.n	8007b48 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b22:	2b22      	cmp	r3, #34	; 0x22
 8007b24:	d002      	beq.n	8007b2c <I2C_Slave_STOPF+0x234>
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	2b22      	cmp	r3, #34	; 0x22
 8007b2a:	d10d      	bne.n	8007b48 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2220      	movs	r2, #32
 8007b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fe fffa 	bl	8006b3c <HAL_I2C_SlaveRxCpltCallback>
}
 8007b48:	bf00      	nop
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	08007e9d 	.word	0x08007e9d
 8007b54:	ffff0000 	.word	0xffff0000

08007b58 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b66:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2b08      	cmp	r3, #8
 8007b72:	d002      	beq.n	8007b7a <I2C_Slave_AF+0x22>
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	d129      	bne.n	8007bce <I2C_Slave_AF+0x76>
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
 8007b7c:	2b28      	cmp	r3, #40	; 0x28
 8007b7e:	d126      	bne.n	8007bce <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a2c      	ldr	r2, [pc, #176]	; (8007c34 <I2C_Slave_AF+0xdc>)
 8007b84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b94:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b9e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bae:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7fe ffd0 	bl	8006b6c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007bcc:	e02e      	b.n	8007c2c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	2b21      	cmp	r3, #33	; 0x21
 8007bd2:	d126      	bne.n	8007c22 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a17      	ldr	r2, [pc, #92]	; (8007c34 <I2C_Slave_AF+0xdc>)
 8007bd8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2221      	movs	r2, #33	; 0x21
 8007bde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bfe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c08:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c18:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fe ff84 	bl	8006b28 <HAL_I2C_SlaveTxCpltCallback>
}
 8007c20:	e004      	b.n	8007c2c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c2a:	615a      	str	r2, [r3, #20]
}
 8007c2c:	bf00      	nop
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	ffff0000 	.word	0xffff0000

08007c38 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c46:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c4e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	2b10      	cmp	r3, #16
 8007c54:	d002      	beq.n	8007c5c <I2C_ITError+0x24>
 8007c56:	7bbb      	ldrb	r3, [r7, #14]
 8007c58:	2b40      	cmp	r3, #64	; 0x40
 8007c5a:	d10a      	bne.n	8007c72 <I2C_ITError+0x3a>
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	2b22      	cmp	r3, #34	; 0x22
 8007c60:	d107      	bne.n	8007c72 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c70:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
 8007c74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c78:	2b28      	cmp	r3, #40	; 0x28
 8007c7a:	d107      	bne.n	8007c8c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2228      	movs	r2, #40	; 0x28
 8007c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007c8a:	e015      	b.n	8007cb8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c9a:	d00a      	beq.n	8007cb2 <I2C_ITError+0x7a>
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
 8007c9e:	2b60      	cmp	r3, #96	; 0x60
 8007ca0:	d007      	beq.n	8007cb2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cc6:	d162      	bne.n	8007d8e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cd6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d020      	beq.n	8007d28 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cea:	4a6a      	ldr	r2, [pc, #424]	; (8007e94 <I2C_ITError+0x25c>)
 8007cec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fd fdd2 	bl	800589c <HAL_DMA_Abort_IT>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 8089 	beq.w	8007e12 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f022 0201 	bic.w	r2, r2, #1
 8007d0e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2220      	movs	r2, #32
 8007d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d22:	4610      	mov	r0, r2
 8007d24:	4798      	blx	r3
 8007d26:	e074      	b.n	8007e12 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2c:	4a59      	ldr	r2, [pc, #356]	; (8007e94 <I2C_ITError+0x25c>)
 8007d2e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fd fdb1 	bl	800589c <HAL_DMA_Abort_IT>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d068      	beq.n	8007e12 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4a:	2b40      	cmp	r3, #64	; 0x40
 8007d4c:	d10b      	bne.n	8007d66 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	691a      	ldr	r2, [r3, #16]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	b2d2      	uxtb	r2, r2
 8007d5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0201 	bic.w	r2, r2, #1
 8007d74:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d88:	4610      	mov	r0, r2
 8007d8a:	4798      	blx	r3
 8007d8c:	e041      	b.n	8007e12 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b60      	cmp	r3, #96	; 0x60
 8007d98:	d125      	bne.n	8007de6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db2:	2b40      	cmp	r3, #64	; 0x40
 8007db4:	d10b      	bne.n	8007dce <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	691a      	ldr	r2, [r3, #16]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc0:	b2d2      	uxtb	r2, r2
 8007dc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 0201 	bic.w	r2, r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7fe feec 	bl	8006bbc <HAL_I2C_AbortCpltCallback>
 8007de4:	e015      	b.n	8007e12 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df0:	2b40      	cmp	r3, #64	; 0x40
 8007df2:	d10b      	bne.n	8007e0c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	691a      	ldr	r2, [r3, #16]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	b2d2      	uxtb	r2, r2
 8007e00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7fe fecb 	bl	8006ba8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e16:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10e      	bne.n	8007e40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d109      	bne.n	8007e40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d104      	bne.n	8007e40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d007      	beq.n	8007e50 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e4e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e56:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	d113      	bne.n	8007e8c <I2C_ITError+0x254>
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
 8007e66:	2b28      	cmp	r3, #40	; 0x28
 8007e68:	d110      	bne.n	8007e8c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a0a      	ldr	r2, [pc, #40]	; (8007e98 <I2C_ITError+0x260>)
 8007e6e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7fe fe70 	bl	8006b6c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	08007e9d 	.word	0x08007e9d
 8007e98:	ffff0000 	.word	0xffff0000

08007e9c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007eb6:	4b4b      	ldr	r3, [pc, #300]	; (8007fe4 <I2C_DMAAbort+0x148>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	08db      	lsrs	r3, r3, #3
 8007ebc:	4a4a      	ldr	r2, [pc, #296]	; (8007fe8 <I2C_DMAAbort+0x14c>)
 8007ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec2:	0a1a      	lsrs	r2, r3, #8
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	00da      	lsls	r2, r3, #3
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d106      	bne.n	8007ee4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eda:	f043 0220 	orr.w	r2, r3, #32
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007ee2:	e00a      	b.n	8007efa <I2C_DMAAbort+0x5e>
    }
    count--;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef8:	d0ea      	beq.n	8007ed0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f06:	2200      	movs	r2, #0
 8007f08:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f16:	2200      	movs	r2, #0
 8007f18:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f28:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d003      	beq.n	8007f40 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f022 0201 	bic.w	r2, r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b60      	cmp	r3, #96	; 0x60
 8007f6a:	d10e      	bne.n	8007f8a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	2220      	movs	r2, #32
 8007f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f82:	6978      	ldr	r0, [r7, #20]
 8007f84:	f7fe fe1a 	bl	8006bbc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f88:	e027      	b.n	8007fda <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f8a:	7cfb      	ldrb	r3, [r7, #19]
 8007f8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f90:	2b28      	cmp	r3, #40	; 0x28
 8007f92:	d117      	bne.n	8007fc4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f042 0201 	orr.w	r2, r2, #1
 8007fa2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fb2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2228      	movs	r2, #40	; 0x28
 8007fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007fc2:	e007      	b.n	8007fd4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007fd4:	6978      	ldr	r0, [r7, #20]
 8007fd6:	f7fe fde7 	bl	8006ba8 <HAL_I2C_ErrorCallback>
}
 8007fda:	bf00      	nop
 8007fdc:	3718      	adds	r7, #24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	200003a4 	.word	0x200003a4
 8007fe8:	14f8b589 	.word	0x14f8b589

08007fec <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ff8:	4b13      	ldr	r3, [pc, #76]	; (8008048 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	08db      	lsrs	r3, r3, #3
 8007ffe:	4a13      	ldr	r2, [pc, #76]	; (800804c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008000:	fba2 2303 	umull	r2, r3, r2, r3
 8008004:	0a1a      	lsrs	r2, r3, #8
 8008006:	4613      	mov	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3b01      	subs	r3, #1
 8008012:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d107      	bne.n	800802a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801e:	f043 0220 	orr.w	r2, r3, #32
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e008      	b.n	800803c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008038:	d0e9      	beq.n	800800e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	200003a4 	.word	0x200003a4
 800804c:	14f8b589 	.word	0x14f8b589

08008050 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008060:	d103      	bne.n	800806a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008068:	e007      	b.n	800807a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008072:	d102      	bne.n	800807a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2208      	movs	r2, #8
 8008078:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800807a:	bf00      	nop
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
	...

08008088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e267      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d075      	beq.n	8008192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080a6:	4b88      	ldr	r3, [pc, #544]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f003 030c 	and.w	r3, r3, #12
 80080ae:	2b04      	cmp	r3, #4
 80080b0:	d00c      	beq.n	80080cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080b2:	4b85      	ldr	r3, [pc, #532]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080ba:	2b08      	cmp	r3, #8
 80080bc:	d112      	bne.n	80080e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080be:	4b82      	ldr	r3, [pc, #520]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080ca:	d10b      	bne.n	80080e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080cc:	4b7e      	ldr	r3, [pc, #504]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d05b      	beq.n	8008190 <HAL_RCC_OscConfig+0x108>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d157      	bne.n	8008190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e242      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ec:	d106      	bne.n	80080fc <HAL_RCC_OscConfig+0x74>
 80080ee:	4b76      	ldr	r3, [pc, #472]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a75      	ldr	r2, [pc, #468]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80080f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080f8:	6013      	str	r3, [r2, #0]
 80080fa:	e01d      	b.n	8008138 <HAL_RCC_OscConfig+0xb0>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008104:	d10c      	bne.n	8008120 <HAL_RCC_OscConfig+0x98>
 8008106:	4b70      	ldr	r3, [pc, #448]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a6f      	ldr	r2, [pc, #444]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 800810c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008110:	6013      	str	r3, [r2, #0]
 8008112:	4b6d      	ldr	r3, [pc, #436]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a6c      	ldr	r2, [pc, #432]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	e00b      	b.n	8008138 <HAL_RCC_OscConfig+0xb0>
 8008120:	4b69      	ldr	r3, [pc, #420]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a68      	ldr	r2, [pc, #416]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800812a:	6013      	str	r3, [r2, #0]
 800812c:	4b66      	ldr	r3, [pc, #408]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a65      	ldr	r2, [pc, #404]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d013      	beq.n	8008168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008140:	f7fd f918 	bl	8005374 <HAL_GetTick>
 8008144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008146:	e008      	b.n	800815a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008148:	f7fd f914 	bl	8005374 <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	2b64      	cmp	r3, #100	; 0x64
 8008154:	d901      	bls.n	800815a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e207      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800815a:	4b5b      	ldr	r3, [pc, #364]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0f0      	beq.n	8008148 <HAL_RCC_OscConfig+0xc0>
 8008166:	e014      	b.n	8008192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008168:	f7fd f904 	bl	8005374 <HAL_GetTick>
 800816c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800816e:	e008      	b.n	8008182 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008170:	f7fd f900 	bl	8005374 <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	2b64      	cmp	r3, #100	; 0x64
 800817c:	d901      	bls.n	8008182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e1f3      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008182:	4b51      	ldr	r3, [pc, #324]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1f0      	bne.n	8008170 <HAL_RCC_OscConfig+0xe8>
 800818e:	e000      	b.n	8008192 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0302 	and.w	r3, r3, #2
 800819a:	2b00      	cmp	r3, #0
 800819c:	d063      	beq.n	8008266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800819e:	4b4a      	ldr	r3, [pc, #296]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f003 030c 	and.w	r3, r3, #12
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00b      	beq.n	80081c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081aa:	4b47      	ldr	r3, [pc, #284]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081b2:	2b08      	cmp	r3, #8
 80081b4:	d11c      	bne.n	80081f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081b6:	4b44      	ldr	r3, [pc, #272]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d116      	bne.n	80081f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081c2:	4b41      	ldr	r3, [pc, #260]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d005      	beq.n	80081da <HAL_RCC_OscConfig+0x152>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d001      	beq.n	80081da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e1c7      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081da:	4b3b      	ldr	r3, [pc, #236]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	4937      	ldr	r1, [pc, #220]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081ee:	e03a      	b.n	8008266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d020      	beq.n	800823a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081f8:	4b34      	ldr	r3, [pc, #208]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 80081fa:	2201      	movs	r2, #1
 80081fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081fe:	f7fd f8b9 	bl	8005374 <HAL_GetTick>
 8008202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008204:	e008      	b.n	8008218 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008206:	f7fd f8b5 	bl	8005374 <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	2b02      	cmp	r3, #2
 8008212:	d901      	bls.n	8008218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e1a8      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008218:	4b2b      	ldr	r3, [pc, #172]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0302 	and.w	r3, r3, #2
 8008220:	2b00      	cmp	r3, #0
 8008222:	d0f0      	beq.n	8008206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008224:	4b28      	ldr	r3, [pc, #160]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	00db      	lsls	r3, r3, #3
 8008232:	4925      	ldr	r1, [pc, #148]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008234:	4313      	orrs	r3, r2
 8008236:	600b      	str	r3, [r1, #0]
 8008238:	e015      	b.n	8008266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800823a:	4b24      	ldr	r3, [pc, #144]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 800823c:	2200      	movs	r2, #0
 800823e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008240:	f7fd f898 	bl	8005374 <HAL_GetTick>
 8008244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008246:	e008      	b.n	800825a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008248:	f7fd f894 	bl	8005374 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d901      	bls.n	800825a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e187      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800825a:	4b1b      	ldr	r3, [pc, #108]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1f0      	bne.n	8008248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0308 	and.w	r3, r3, #8
 800826e:	2b00      	cmp	r3, #0
 8008270:	d036      	beq.n	80082e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d016      	beq.n	80082a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800827a:	4b15      	ldr	r3, [pc, #84]	; (80082d0 <HAL_RCC_OscConfig+0x248>)
 800827c:	2201      	movs	r2, #1
 800827e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008280:	f7fd f878 	bl	8005374 <HAL_GetTick>
 8008284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008286:	e008      	b.n	800829a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008288:	f7fd f874 	bl	8005374 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	2b02      	cmp	r3, #2
 8008294:	d901      	bls.n	800829a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e167      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800829a:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 800829c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0f0      	beq.n	8008288 <HAL_RCC_OscConfig+0x200>
 80082a6:	e01b      	b.n	80082e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082a8:	4b09      	ldr	r3, [pc, #36]	; (80082d0 <HAL_RCC_OscConfig+0x248>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082ae:	f7fd f861 	bl	8005374 <HAL_GetTick>
 80082b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082b4:	e00e      	b.n	80082d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082b6:	f7fd f85d 	bl	8005374 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d907      	bls.n	80082d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e150      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
 80082c8:	40023800 	.word	0x40023800
 80082cc:	42470000 	.word	0x42470000
 80082d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082d4:	4b88      	ldr	r3, [pc, #544]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 80082d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1ea      	bne.n	80082b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0304 	and.w	r3, r3, #4
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 8097 	beq.w	800841c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082ee:	2300      	movs	r3, #0
 80082f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082f2:	4b81      	ldr	r3, [pc, #516]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10f      	bne.n	800831e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082fe:	2300      	movs	r3, #0
 8008300:	60bb      	str	r3, [r7, #8]
 8008302:	4b7d      	ldr	r3, [pc, #500]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	4a7c      	ldr	r2, [pc, #496]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800830c:	6413      	str	r3, [r2, #64]	; 0x40
 800830e:	4b7a      	ldr	r3, [pc, #488]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008316:	60bb      	str	r3, [r7, #8]
 8008318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800831a:	2301      	movs	r3, #1
 800831c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800831e:	4b77      	ldr	r3, [pc, #476]	; (80084fc <HAL_RCC_OscConfig+0x474>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008326:	2b00      	cmp	r3, #0
 8008328:	d118      	bne.n	800835c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800832a:	4b74      	ldr	r3, [pc, #464]	; (80084fc <HAL_RCC_OscConfig+0x474>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a73      	ldr	r2, [pc, #460]	; (80084fc <HAL_RCC_OscConfig+0x474>)
 8008330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008336:	f7fd f81d 	bl	8005374 <HAL_GetTick>
 800833a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800833c:	e008      	b.n	8008350 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800833e:	f7fd f819 	bl	8005374 <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	2b02      	cmp	r3, #2
 800834a:	d901      	bls.n	8008350 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e10c      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008350:	4b6a      	ldr	r3, [pc, #424]	; (80084fc <HAL_RCC_OscConfig+0x474>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008358:	2b00      	cmp	r3, #0
 800835a:	d0f0      	beq.n	800833e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d106      	bne.n	8008372 <HAL_RCC_OscConfig+0x2ea>
 8008364:	4b64      	ldr	r3, [pc, #400]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008368:	4a63      	ldr	r2, [pc, #396]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 800836a:	f043 0301 	orr.w	r3, r3, #1
 800836e:	6713      	str	r3, [r2, #112]	; 0x70
 8008370:	e01c      	b.n	80083ac <HAL_RCC_OscConfig+0x324>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	2b05      	cmp	r3, #5
 8008378:	d10c      	bne.n	8008394 <HAL_RCC_OscConfig+0x30c>
 800837a:	4b5f      	ldr	r3, [pc, #380]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 800837c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837e:	4a5e      	ldr	r2, [pc, #376]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008380:	f043 0304 	orr.w	r3, r3, #4
 8008384:	6713      	str	r3, [r2, #112]	; 0x70
 8008386:	4b5c      	ldr	r3, [pc, #368]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800838a:	4a5b      	ldr	r2, [pc, #364]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 800838c:	f043 0301 	orr.w	r3, r3, #1
 8008390:	6713      	str	r3, [r2, #112]	; 0x70
 8008392:	e00b      	b.n	80083ac <HAL_RCC_OscConfig+0x324>
 8008394:	4b58      	ldr	r3, [pc, #352]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008398:	4a57      	ldr	r2, [pc, #348]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 800839a:	f023 0301 	bic.w	r3, r3, #1
 800839e:	6713      	str	r3, [r2, #112]	; 0x70
 80083a0:	4b55      	ldr	r3, [pc, #340]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 80083a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a4:	4a54      	ldr	r2, [pc, #336]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 80083a6:	f023 0304 	bic.w	r3, r3, #4
 80083aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d015      	beq.n	80083e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083b4:	f7fc ffde 	bl	8005374 <HAL_GetTick>
 80083b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083ba:	e00a      	b.n	80083d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083bc:	f7fc ffda 	bl	8005374 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d901      	bls.n	80083d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e0cb      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083d2:	4b49      	ldr	r3, [pc, #292]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 80083d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0ee      	beq.n	80083bc <HAL_RCC_OscConfig+0x334>
 80083de:	e014      	b.n	800840a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083e0:	f7fc ffc8 	bl	8005374 <HAL_GetTick>
 80083e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083e6:	e00a      	b.n	80083fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083e8:	f7fc ffc4 	bl	8005374 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d901      	bls.n	80083fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e0b5      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083fe:	4b3e      	ldr	r3, [pc, #248]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1ee      	bne.n	80083e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800840a:	7dfb      	ldrb	r3, [r7, #23]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d105      	bne.n	800841c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008410:	4b39      	ldr	r3, [pc, #228]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008414:	4a38      	ldr	r2, [pc, #224]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800841a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 80a1 	beq.w	8008568 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008426:	4b34      	ldr	r3, [pc, #208]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f003 030c 	and.w	r3, r3, #12
 800842e:	2b08      	cmp	r3, #8
 8008430:	d05c      	beq.n	80084ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	2b02      	cmp	r3, #2
 8008438:	d141      	bne.n	80084be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800843a:	4b31      	ldr	r3, [pc, #196]	; (8008500 <HAL_RCC_OscConfig+0x478>)
 800843c:	2200      	movs	r2, #0
 800843e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008440:	f7fc ff98 	bl	8005374 <HAL_GetTick>
 8008444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008446:	e008      	b.n	800845a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008448:	f7fc ff94 	bl	8005374 <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	2b02      	cmp	r3, #2
 8008454:	d901      	bls.n	800845a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e087      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800845a:	4b27      	ldr	r3, [pc, #156]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1f0      	bne.n	8008448 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	69da      	ldr	r2, [r3, #28]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	019b      	lsls	r3, r3, #6
 8008476:	431a      	orrs	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847c:	085b      	lsrs	r3, r3, #1
 800847e:	3b01      	subs	r3, #1
 8008480:	041b      	lsls	r3, r3, #16
 8008482:	431a      	orrs	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008488:	061b      	lsls	r3, r3, #24
 800848a:	491b      	ldr	r1, [pc, #108]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 800848c:	4313      	orrs	r3, r2
 800848e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008490:	4b1b      	ldr	r3, [pc, #108]	; (8008500 <HAL_RCC_OscConfig+0x478>)
 8008492:	2201      	movs	r2, #1
 8008494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008496:	f7fc ff6d 	bl	8005374 <HAL_GetTick>
 800849a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800849c:	e008      	b.n	80084b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800849e:	f7fc ff69 	bl	8005374 <HAL_GetTick>
 80084a2:	4602      	mov	r2, r0
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d901      	bls.n	80084b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e05c      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084b0:	4b11      	ldr	r3, [pc, #68]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d0f0      	beq.n	800849e <HAL_RCC_OscConfig+0x416>
 80084bc:	e054      	b.n	8008568 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084be:	4b10      	ldr	r3, [pc, #64]	; (8008500 <HAL_RCC_OscConfig+0x478>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084c4:	f7fc ff56 	bl	8005374 <HAL_GetTick>
 80084c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084ca:	e008      	b.n	80084de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084cc:	f7fc ff52 	bl	8005374 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d901      	bls.n	80084de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e045      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084de:	4b06      	ldr	r3, [pc, #24]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1f0      	bne.n	80084cc <HAL_RCC_OscConfig+0x444>
 80084ea:	e03d      	b.n	8008568 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d107      	bne.n	8008504 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e038      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
 80084f8:	40023800 	.word	0x40023800
 80084fc:	40007000 	.word	0x40007000
 8008500:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008504:	4b1b      	ldr	r3, [pc, #108]	; (8008574 <HAL_RCC_OscConfig+0x4ec>)
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d028      	beq.n	8008564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800851c:	429a      	cmp	r2, r3
 800851e:	d121      	bne.n	8008564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800852a:	429a      	cmp	r2, r3
 800852c:	d11a      	bne.n	8008564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008534:	4013      	ands	r3, r2
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800853a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800853c:	4293      	cmp	r3, r2
 800853e:	d111      	bne.n	8008564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854a:	085b      	lsrs	r3, r3, #1
 800854c:	3b01      	subs	r3, #1
 800854e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008550:	429a      	cmp	r2, r3
 8008552:	d107      	bne.n	8008564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008560:	429a      	cmp	r2, r3
 8008562:	d001      	beq.n	8008568 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e000      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	40023800 	.word	0x40023800

08008578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e0cc      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800858c:	4b68      	ldr	r3, [pc, #416]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0307 	and.w	r3, r3, #7
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	429a      	cmp	r2, r3
 8008598:	d90c      	bls.n	80085b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800859a:	4b65      	ldr	r3, [pc, #404]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	b2d2      	uxtb	r2, r2
 80085a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085a2:	4b63      	ldr	r3, [pc, #396]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d001      	beq.n	80085b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e0b8      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0302 	and.w	r3, r3, #2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d020      	beq.n	8008602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d005      	beq.n	80085d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085cc:	4b59      	ldr	r3, [pc, #356]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	4a58      	ldr	r2, [pc, #352]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80085d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0308 	and.w	r3, r3, #8
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d005      	beq.n	80085f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085e4:	4b53      	ldr	r3, [pc, #332]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	4a52      	ldr	r2, [pc, #328]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80085ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085f0:	4b50      	ldr	r3, [pc, #320]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	494d      	ldr	r1, [pc, #308]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d044      	beq.n	8008698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d107      	bne.n	8008626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008616:	4b47      	ldr	r3, [pc, #284]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d119      	bne.n	8008656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e07f      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	2b02      	cmp	r3, #2
 800862c:	d003      	beq.n	8008636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008632:	2b03      	cmp	r3, #3
 8008634:	d107      	bne.n	8008646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008636:	4b3f      	ldr	r3, [pc, #252]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d109      	bne.n	8008656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e06f      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008646:	4b3b      	ldr	r3, [pc, #236]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	2b00      	cmp	r3, #0
 8008650:	d101      	bne.n	8008656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e067      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008656:	4b37      	ldr	r3, [pc, #220]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f023 0203 	bic.w	r2, r3, #3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	4934      	ldr	r1, [pc, #208]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008664:	4313      	orrs	r3, r2
 8008666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008668:	f7fc fe84 	bl	8005374 <HAL_GetTick>
 800866c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800866e:	e00a      	b.n	8008686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008670:	f7fc fe80 	bl	8005374 <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	f241 3288 	movw	r2, #5000	; 0x1388
 800867e:	4293      	cmp	r3, r2
 8008680:	d901      	bls.n	8008686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e04f      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008686:	4b2b      	ldr	r3, [pc, #172]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f003 020c 	and.w	r2, r3, #12
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	429a      	cmp	r2, r3
 8008696:	d1eb      	bne.n	8008670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008698:	4b25      	ldr	r3, [pc, #148]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0307 	and.w	r3, r3, #7
 80086a0:	683a      	ldr	r2, [r7, #0]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d20c      	bcs.n	80086c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086a6:	4b22      	ldr	r3, [pc, #136]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	b2d2      	uxtb	r2, r2
 80086ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ae:	4b20      	ldr	r3, [pc, #128]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0307 	and.w	r3, r3, #7
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d001      	beq.n	80086c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e032      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0304 	and.w	r3, r3, #4
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d008      	beq.n	80086de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086cc:	4b19      	ldr	r3, [pc, #100]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	4916      	ldr	r1, [pc, #88]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0308 	and.w	r3, r3, #8
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d009      	beq.n	80086fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086ea:	4b12      	ldr	r3, [pc, #72]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	490e      	ldr	r1, [pc, #56]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80086fa:	4313      	orrs	r3, r2
 80086fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80086fe:	f000 f821 	bl	8008744 <HAL_RCC_GetSysClockFreq>
 8008702:	4602      	mov	r2, r0
 8008704:	4b0b      	ldr	r3, [pc, #44]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	091b      	lsrs	r3, r3, #4
 800870a:	f003 030f 	and.w	r3, r3, #15
 800870e:	490a      	ldr	r1, [pc, #40]	; (8008738 <HAL_RCC_ClockConfig+0x1c0>)
 8008710:	5ccb      	ldrb	r3, [r1, r3]
 8008712:	fa22 f303 	lsr.w	r3, r2, r3
 8008716:	4a09      	ldr	r2, [pc, #36]	; (800873c <HAL_RCC_ClockConfig+0x1c4>)
 8008718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800871a:	4b09      	ldr	r3, [pc, #36]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4618      	mov	r0, r3
 8008720:	f7fc fde4 	bl	80052ec <HAL_InitTick>

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	40023c00 	.word	0x40023c00
 8008734:	40023800 	.word	0x40023800
 8008738:	0800b3e8 	.word	0x0800b3e8
 800873c:	200003a4 	.word	0x200003a4
 8008740:	200003a8 	.word	0x200003a8

08008744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008748:	b094      	sub	sp, #80	; 0x50
 800874a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	647b      	str	r3, [r7, #68]	; 0x44
 8008750:	2300      	movs	r3, #0
 8008752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008754:	2300      	movs	r3, #0
 8008756:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008758:	2300      	movs	r3, #0
 800875a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800875c:	4b79      	ldr	r3, [pc, #484]	; (8008944 <HAL_RCC_GetSysClockFreq+0x200>)
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f003 030c 	and.w	r3, r3, #12
 8008764:	2b08      	cmp	r3, #8
 8008766:	d00d      	beq.n	8008784 <HAL_RCC_GetSysClockFreq+0x40>
 8008768:	2b08      	cmp	r3, #8
 800876a:	f200 80e1 	bhi.w	8008930 <HAL_RCC_GetSysClockFreq+0x1ec>
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <HAL_RCC_GetSysClockFreq+0x34>
 8008772:	2b04      	cmp	r3, #4
 8008774:	d003      	beq.n	800877e <HAL_RCC_GetSysClockFreq+0x3a>
 8008776:	e0db      	b.n	8008930 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008778:	4b73      	ldr	r3, [pc, #460]	; (8008948 <HAL_RCC_GetSysClockFreq+0x204>)
 800877a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800877c:	e0db      	b.n	8008936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800877e:	4b73      	ldr	r3, [pc, #460]	; (800894c <HAL_RCC_GetSysClockFreq+0x208>)
 8008780:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008782:	e0d8      	b.n	8008936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008784:	4b6f      	ldr	r3, [pc, #444]	; (8008944 <HAL_RCC_GetSysClockFreq+0x200>)
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800878c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800878e:	4b6d      	ldr	r3, [pc, #436]	; (8008944 <HAL_RCC_GetSysClockFreq+0x200>)
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d063      	beq.n	8008862 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800879a:	4b6a      	ldr	r3, [pc, #424]	; (8008944 <HAL_RCC_GetSysClockFreq+0x200>)
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	099b      	lsrs	r3, r3, #6
 80087a0:	2200      	movs	r2, #0
 80087a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80087a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80087a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ac:	633b      	str	r3, [r7, #48]	; 0x30
 80087ae:	2300      	movs	r3, #0
 80087b0:	637b      	str	r3, [r7, #52]	; 0x34
 80087b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80087b6:	4622      	mov	r2, r4
 80087b8:	462b      	mov	r3, r5
 80087ba:	f04f 0000 	mov.w	r0, #0
 80087be:	f04f 0100 	mov.w	r1, #0
 80087c2:	0159      	lsls	r1, r3, #5
 80087c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80087c8:	0150      	lsls	r0, r2, #5
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	4621      	mov	r1, r4
 80087d0:	1a51      	subs	r1, r2, r1
 80087d2:	6139      	str	r1, [r7, #16]
 80087d4:	4629      	mov	r1, r5
 80087d6:	eb63 0301 	sbc.w	r3, r3, r1
 80087da:	617b      	str	r3, [r7, #20]
 80087dc:	f04f 0200 	mov.w	r2, #0
 80087e0:	f04f 0300 	mov.w	r3, #0
 80087e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80087e8:	4659      	mov	r1, fp
 80087ea:	018b      	lsls	r3, r1, #6
 80087ec:	4651      	mov	r1, sl
 80087ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80087f2:	4651      	mov	r1, sl
 80087f4:	018a      	lsls	r2, r1, #6
 80087f6:	4651      	mov	r1, sl
 80087f8:	ebb2 0801 	subs.w	r8, r2, r1
 80087fc:	4659      	mov	r1, fp
 80087fe:	eb63 0901 	sbc.w	r9, r3, r1
 8008802:	f04f 0200 	mov.w	r2, #0
 8008806:	f04f 0300 	mov.w	r3, #0
 800880a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800880e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008812:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008816:	4690      	mov	r8, r2
 8008818:	4699      	mov	r9, r3
 800881a:	4623      	mov	r3, r4
 800881c:	eb18 0303 	adds.w	r3, r8, r3
 8008820:	60bb      	str	r3, [r7, #8]
 8008822:	462b      	mov	r3, r5
 8008824:	eb49 0303 	adc.w	r3, r9, r3
 8008828:	60fb      	str	r3, [r7, #12]
 800882a:	f04f 0200 	mov.w	r2, #0
 800882e:	f04f 0300 	mov.w	r3, #0
 8008832:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008836:	4629      	mov	r1, r5
 8008838:	024b      	lsls	r3, r1, #9
 800883a:	4621      	mov	r1, r4
 800883c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008840:	4621      	mov	r1, r4
 8008842:	024a      	lsls	r2, r1, #9
 8008844:	4610      	mov	r0, r2
 8008846:	4619      	mov	r1, r3
 8008848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800884a:	2200      	movs	r2, #0
 800884c:	62bb      	str	r3, [r7, #40]	; 0x28
 800884e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008850:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008854:	f7f8 f8fe 	bl	8000a54 <__aeabi_uldivmod>
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	4613      	mov	r3, r2
 800885e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008860:	e058      	b.n	8008914 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008862:	4b38      	ldr	r3, [pc, #224]	; (8008944 <HAL_RCC_GetSysClockFreq+0x200>)
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	099b      	lsrs	r3, r3, #6
 8008868:	2200      	movs	r2, #0
 800886a:	4618      	mov	r0, r3
 800886c:	4611      	mov	r1, r2
 800886e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008872:	623b      	str	r3, [r7, #32]
 8008874:	2300      	movs	r3, #0
 8008876:	627b      	str	r3, [r7, #36]	; 0x24
 8008878:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800887c:	4642      	mov	r2, r8
 800887e:	464b      	mov	r3, r9
 8008880:	f04f 0000 	mov.w	r0, #0
 8008884:	f04f 0100 	mov.w	r1, #0
 8008888:	0159      	lsls	r1, r3, #5
 800888a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800888e:	0150      	lsls	r0, r2, #5
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4641      	mov	r1, r8
 8008896:	ebb2 0a01 	subs.w	sl, r2, r1
 800889a:	4649      	mov	r1, r9
 800889c:	eb63 0b01 	sbc.w	fp, r3, r1
 80088a0:	f04f 0200 	mov.w	r2, #0
 80088a4:	f04f 0300 	mov.w	r3, #0
 80088a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80088ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80088b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80088b4:	ebb2 040a 	subs.w	r4, r2, sl
 80088b8:	eb63 050b 	sbc.w	r5, r3, fp
 80088bc:	f04f 0200 	mov.w	r2, #0
 80088c0:	f04f 0300 	mov.w	r3, #0
 80088c4:	00eb      	lsls	r3, r5, #3
 80088c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80088ca:	00e2      	lsls	r2, r4, #3
 80088cc:	4614      	mov	r4, r2
 80088ce:	461d      	mov	r5, r3
 80088d0:	4643      	mov	r3, r8
 80088d2:	18e3      	adds	r3, r4, r3
 80088d4:	603b      	str	r3, [r7, #0]
 80088d6:	464b      	mov	r3, r9
 80088d8:	eb45 0303 	adc.w	r3, r5, r3
 80088dc:	607b      	str	r3, [r7, #4]
 80088de:	f04f 0200 	mov.w	r2, #0
 80088e2:	f04f 0300 	mov.w	r3, #0
 80088e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80088ea:	4629      	mov	r1, r5
 80088ec:	028b      	lsls	r3, r1, #10
 80088ee:	4621      	mov	r1, r4
 80088f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80088f4:	4621      	mov	r1, r4
 80088f6:	028a      	lsls	r2, r1, #10
 80088f8:	4610      	mov	r0, r2
 80088fa:	4619      	mov	r1, r3
 80088fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088fe:	2200      	movs	r2, #0
 8008900:	61bb      	str	r3, [r7, #24]
 8008902:	61fa      	str	r2, [r7, #28]
 8008904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008908:	f7f8 f8a4 	bl	8000a54 <__aeabi_uldivmod>
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	4613      	mov	r3, r2
 8008912:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008914:	4b0b      	ldr	r3, [pc, #44]	; (8008944 <HAL_RCC_GetSysClockFreq+0x200>)
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	0c1b      	lsrs	r3, r3, #16
 800891a:	f003 0303 	and.w	r3, r3, #3
 800891e:	3301      	adds	r3, #1
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008924:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008928:	fbb2 f3f3 	udiv	r3, r2, r3
 800892c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800892e:	e002      	b.n	8008936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008930:	4b05      	ldr	r3, [pc, #20]	; (8008948 <HAL_RCC_GetSysClockFreq+0x204>)
 8008932:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008938:	4618      	mov	r0, r3
 800893a:	3750      	adds	r7, #80	; 0x50
 800893c:	46bd      	mov	sp, r7
 800893e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008942:	bf00      	nop
 8008944:	40023800 	.word	0x40023800
 8008948:	00f42400 	.word	0x00f42400
 800894c:	007a1200 	.word	0x007a1200

08008950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008950:	b480      	push	{r7}
 8008952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008954:	4b03      	ldr	r3, [pc, #12]	; (8008964 <HAL_RCC_GetHCLKFreq+0x14>)
 8008956:	681b      	ldr	r3, [r3, #0]
}
 8008958:	4618      	mov	r0, r3
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	200003a4 	.word	0x200003a4

08008968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800896c:	f7ff fff0 	bl	8008950 <HAL_RCC_GetHCLKFreq>
 8008970:	4602      	mov	r2, r0
 8008972:	4b05      	ldr	r3, [pc, #20]	; (8008988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	0a9b      	lsrs	r3, r3, #10
 8008978:	f003 0307 	and.w	r3, r3, #7
 800897c:	4903      	ldr	r1, [pc, #12]	; (800898c <HAL_RCC_GetPCLK1Freq+0x24>)
 800897e:	5ccb      	ldrb	r3, [r1, r3]
 8008980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008984:	4618      	mov	r0, r3
 8008986:	bd80      	pop	{r7, pc}
 8008988:	40023800 	.word	0x40023800
 800898c:	0800b3f8 	.word	0x0800b3f8

08008990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008994:	f7ff ffdc 	bl	8008950 <HAL_RCC_GetHCLKFreq>
 8008998:	4602      	mov	r2, r0
 800899a:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	0b5b      	lsrs	r3, r3, #13
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	4903      	ldr	r1, [pc, #12]	; (80089b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80089a6:	5ccb      	ldrb	r3, [r1, r3]
 80089a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	40023800 	.word	0x40023800
 80089b4:	0800b3f8 	.word	0x0800b3f8

080089b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e041      	b.n	8008a4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d106      	bne.n	80089e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f7fc fa92 	bl	8004f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2202      	movs	r2, #2
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	3304      	adds	r3, #4
 80089f4:	4619      	mov	r1, r3
 80089f6:	4610      	mov	r0, r2
 80089f8:	f000 fcb6 	bl	8009368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d001      	beq.n	8008a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e044      	b.n	8008afa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68da      	ldr	r2, [r3, #12]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f042 0201 	orr.w	r2, r2, #1
 8008a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a1e      	ldr	r2, [pc, #120]	; (8008b08 <HAL_TIM_Base_Start_IT+0xb0>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d018      	beq.n	8008ac4 <HAL_TIM_Base_Start_IT+0x6c>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a9a:	d013      	beq.n	8008ac4 <HAL_TIM_Base_Start_IT+0x6c>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a1a      	ldr	r2, [pc, #104]	; (8008b0c <HAL_TIM_Base_Start_IT+0xb4>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d00e      	beq.n	8008ac4 <HAL_TIM_Base_Start_IT+0x6c>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a19      	ldr	r2, [pc, #100]	; (8008b10 <HAL_TIM_Base_Start_IT+0xb8>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d009      	beq.n	8008ac4 <HAL_TIM_Base_Start_IT+0x6c>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a17      	ldr	r2, [pc, #92]	; (8008b14 <HAL_TIM_Base_Start_IT+0xbc>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d004      	beq.n	8008ac4 <HAL_TIM_Base_Start_IT+0x6c>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a16      	ldr	r2, [pc, #88]	; (8008b18 <HAL_TIM_Base_Start_IT+0xc0>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d111      	bne.n	8008ae8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f003 0307 	and.w	r3, r3, #7
 8008ace:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2b06      	cmp	r3, #6
 8008ad4:	d010      	beq.n	8008af8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f042 0201 	orr.w	r2, r2, #1
 8008ae4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ae6:	e007      	b.n	8008af8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f042 0201 	orr.w	r2, r2, #1
 8008af6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	40010000 	.word	0x40010000
 8008b0c:	40000400 	.word	0x40000400
 8008b10:	40000800 	.word	0x40000800
 8008b14:	40000c00 	.word	0x40000c00
 8008b18:	40014000 	.word	0x40014000

08008b1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e041      	b.n	8008bb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d106      	bne.n	8008b48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7fc f972 	bl	8004e2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	3304      	adds	r3, #4
 8008b58:	4619      	mov	r1, r3
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	f000 fc04 	bl	8009368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
	...

08008bbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d109      	bne.n	8008be0 <HAL_TIM_PWM_Start+0x24>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	bf14      	ite	ne
 8008bd8:	2301      	movne	r3, #1
 8008bda:	2300      	moveq	r3, #0
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	e022      	b.n	8008c26 <HAL_TIM_PWM_Start+0x6a>
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b04      	cmp	r3, #4
 8008be4:	d109      	bne.n	8008bfa <HAL_TIM_PWM_Start+0x3e>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	bf14      	ite	ne
 8008bf2:	2301      	movne	r3, #1
 8008bf4:	2300      	moveq	r3, #0
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	e015      	b.n	8008c26 <HAL_TIM_PWM_Start+0x6a>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b08      	cmp	r3, #8
 8008bfe:	d109      	bne.n	8008c14 <HAL_TIM_PWM_Start+0x58>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	bf14      	ite	ne
 8008c0c:	2301      	movne	r3, #1
 8008c0e:	2300      	moveq	r3, #0
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	e008      	b.n	8008c26 <HAL_TIM_PWM_Start+0x6a>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	bf14      	ite	ne
 8008c20:	2301      	movne	r3, #1
 8008c22:	2300      	moveq	r3, #0
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e068      	b.n	8008d00 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d104      	bne.n	8008c3e <HAL_TIM_PWM_Start+0x82>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c3c:	e013      	b.n	8008c66 <HAL_TIM_PWM_Start+0xaa>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d104      	bne.n	8008c4e <HAL_TIM_PWM_Start+0x92>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2202      	movs	r2, #2
 8008c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c4c:	e00b      	b.n	8008c66 <HAL_TIM_PWM_Start+0xaa>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d104      	bne.n	8008c5e <HAL_TIM_PWM_Start+0xa2>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c5c:	e003      	b.n	8008c66 <HAL_TIM_PWM_Start+0xaa>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2202      	movs	r2, #2
 8008c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fd86 	bl	8009780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a23      	ldr	r2, [pc, #140]	; (8008d08 <HAL_TIM_PWM_Start+0x14c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d107      	bne.n	8008c8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a1d      	ldr	r2, [pc, #116]	; (8008d08 <HAL_TIM_PWM_Start+0x14c>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d018      	beq.n	8008cca <HAL_TIM_PWM_Start+0x10e>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca0:	d013      	beq.n	8008cca <HAL_TIM_PWM_Start+0x10e>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a19      	ldr	r2, [pc, #100]	; (8008d0c <HAL_TIM_PWM_Start+0x150>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d00e      	beq.n	8008cca <HAL_TIM_PWM_Start+0x10e>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a17      	ldr	r2, [pc, #92]	; (8008d10 <HAL_TIM_PWM_Start+0x154>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d009      	beq.n	8008cca <HAL_TIM_PWM_Start+0x10e>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a16      	ldr	r2, [pc, #88]	; (8008d14 <HAL_TIM_PWM_Start+0x158>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d004      	beq.n	8008cca <HAL_TIM_PWM_Start+0x10e>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a14      	ldr	r2, [pc, #80]	; (8008d18 <HAL_TIM_PWM_Start+0x15c>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d111      	bne.n	8008cee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f003 0307 	and.w	r3, r3, #7
 8008cd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2b06      	cmp	r3, #6
 8008cda:	d010      	beq.n	8008cfe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f042 0201 	orr.w	r2, r2, #1
 8008cea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cec:	e007      	b.n	8008cfe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f042 0201 	orr.w	r2, r2, #1
 8008cfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	40010000 	.word	0x40010000
 8008d0c:	40000400 	.word	0x40000400
 8008d10:	40000800 	.word	0x40000800
 8008d14:	40000c00 	.word	0x40000c00
 8008d18:	40014000 	.word	0x40014000

08008d1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e097      	b.n	8008e60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d106      	bne.n	8008d4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7fc f899 	bl	8004e7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	6812      	ldr	r2, [r2, #0]
 8008d5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d60:	f023 0307 	bic.w	r3, r3, #7
 8008d64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	4619      	mov	r1, r3
 8008d70:	4610      	mov	r0, r2
 8008d72:	f000 faf9 	bl	8009368 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6a1b      	ldr	r3, [r3, #32]
 8008d8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d9e:	f023 0303 	bic.w	r3, r3, #3
 8008da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	689a      	ldr	r2, [r3, #8]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	021b      	lsls	r3, r3, #8
 8008dae:	4313      	orrs	r3, r2
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008dbc:	f023 030c 	bic.w	r3, r3, #12
 8008dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	021b      	lsls	r3, r3, #8
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	011a      	lsls	r2, r3, #4
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	031b      	lsls	r3, r3, #12
 8008dec:	4313      	orrs	r3, r2
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008dfa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008e02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	695b      	ldr	r3, [r3, #20]
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008e80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d110      	bne.n	8008eba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d102      	bne.n	8008ea4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e9e:	7b7b      	ldrb	r3, [r7, #13]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d001      	beq.n	8008ea8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e069      	b.n	8008f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008eb8:	e031      	b.n	8008f1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d110      	bne.n	8008ee2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ec0:	7bbb      	ldrb	r3, [r7, #14]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d102      	bne.n	8008ecc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ec6:	7b3b      	ldrb	r3, [r7, #12]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d001      	beq.n	8008ed0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e055      	b.n	8008f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ee0:	e01d      	b.n	8008f1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d108      	bne.n	8008efa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d105      	bne.n	8008efa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008eee:	7b7b      	ldrb	r3, [r7, #13]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d102      	bne.n	8008efa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ef4:	7b3b      	ldrb	r3, [r7, #12]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d001      	beq.n	8008efe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e03e      	b.n	8008f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2202      	movs	r2, #2
 8008f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2202      	movs	r2, #2
 8008f0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2202      	movs	r2, #2
 8008f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2202      	movs	r2, #2
 8008f1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d003      	beq.n	8008f2c <HAL_TIM_Encoder_Start+0xc4>
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	d008      	beq.n	8008f3c <HAL_TIM_Encoder_Start+0xd4>
 8008f2a:	e00f      	b.n	8008f4c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2201      	movs	r2, #1
 8008f32:	2100      	movs	r1, #0
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 fc23 	bl	8009780 <TIM_CCxChannelCmd>
      break;
 8008f3a:	e016      	b.n	8008f6a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2201      	movs	r2, #1
 8008f42:	2104      	movs	r1, #4
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fc1b 	bl	8009780 <TIM_CCxChannelCmd>
      break;
 8008f4a:	e00e      	b.n	8008f6a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2201      	movs	r2, #1
 8008f52:	2100      	movs	r1, #0
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 fc13 	bl	8009780 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	2104      	movs	r1, #4
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 fc0c 	bl	8009780 <TIM_CCxChannelCmd>
      break;
 8008f68:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f042 0201 	orr.w	r2, r2, #1
 8008f78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d122      	bne.n	8008fe0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	f003 0302 	and.w	r3, r3, #2
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d11b      	bne.n	8008fe0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f06f 0202 	mvn.w	r2, #2
 8008fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	f003 0303 	and.w	r3, r3, #3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f9b0 	bl	800932c <HAL_TIM_IC_CaptureCallback>
 8008fcc:	e005      	b.n	8008fda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f9a2 	bl	8009318 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f9b3 	bl	8009340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	f003 0304 	and.w	r3, r3, #4
 8008fea:	2b04      	cmp	r3, #4
 8008fec:	d122      	bne.n	8009034 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	f003 0304 	and.w	r3, r3, #4
 8008ff8:	2b04      	cmp	r3, #4
 8008ffa:	d11b      	bne.n	8009034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f06f 0204 	mvn.w	r2, #4
 8009004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2202      	movs	r2, #2
 800900a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	699b      	ldr	r3, [r3, #24]
 8009012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f986 	bl	800932c <HAL_TIM_IC_CaptureCallback>
 8009020:	e005      	b.n	800902e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f978 	bl	8009318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f989 	bl	8009340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	f003 0308 	and.w	r3, r3, #8
 800903e:	2b08      	cmp	r3, #8
 8009040:	d122      	bne.n	8009088 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	f003 0308 	and.w	r3, r3, #8
 800904c:	2b08      	cmp	r3, #8
 800904e:	d11b      	bne.n	8009088 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f06f 0208 	mvn.w	r2, #8
 8009058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2204      	movs	r2, #4
 800905e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	69db      	ldr	r3, [r3, #28]
 8009066:	f003 0303 	and.w	r3, r3, #3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f95c 	bl	800932c <HAL_TIM_IC_CaptureCallback>
 8009074:	e005      	b.n	8009082 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f94e 	bl	8009318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f95f 	bl	8009340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	f003 0310 	and.w	r3, r3, #16
 8009092:	2b10      	cmp	r3, #16
 8009094:	d122      	bne.n	80090dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	f003 0310 	and.w	r3, r3, #16
 80090a0:	2b10      	cmp	r3, #16
 80090a2:	d11b      	bne.n	80090dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f06f 0210 	mvn.w	r2, #16
 80090ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2208      	movs	r2, #8
 80090b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	69db      	ldr	r3, [r3, #28]
 80090ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f932 	bl	800932c <HAL_TIM_IC_CaptureCallback>
 80090c8:	e005      	b.n	80090d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f924 	bl	8009318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f935 	bl	8009340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d10e      	bne.n	8009108 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	f003 0301 	and.w	r3, r3, #1
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d107      	bne.n	8009108 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f06f 0201 	mvn.w	r2, #1
 8009100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7fa fd0a 	bl	8003b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009112:	2b80      	cmp	r3, #128	; 0x80
 8009114:	d10e      	bne.n	8009134 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009120:	2b80      	cmp	r3, #128	; 0x80
 8009122:	d107      	bne.n	8009134 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800912c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fc16 	bl	8009960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800913e:	2b40      	cmp	r3, #64	; 0x40
 8009140:	d10e      	bne.n	8009160 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914c:	2b40      	cmp	r3, #64	; 0x40
 800914e:	d107      	bne.n	8009160 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f8fa 	bl	8009354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	f003 0320 	and.w	r3, r3, #32
 800916a:	2b20      	cmp	r3, #32
 800916c:	d10e      	bne.n	800918c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	f003 0320 	and.w	r3, r3, #32
 8009178:	2b20      	cmp	r3, #32
 800917a:	d107      	bne.n	800918c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f06f 0220 	mvn.w	r2, #32
 8009184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fbe0 	bl	800994c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800918c:	bf00      	nop
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d101      	bne.n	80091b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80091ae:	2302      	movs	r3, #2
 80091b0:	e0ae      	b.n	8009310 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b0c      	cmp	r3, #12
 80091be:	f200 809f 	bhi.w	8009300 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80091c2:	a201      	add	r2, pc, #4	; (adr r2, 80091c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80091c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c8:	080091fd 	.word	0x080091fd
 80091cc:	08009301 	.word	0x08009301
 80091d0:	08009301 	.word	0x08009301
 80091d4:	08009301 	.word	0x08009301
 80091d8:	0800923d 	.word	0x0800923d
 80091dc:	08009301 	.word	0x08009301
 80091e0:	08009301 	.word	0x08009301
 80091e4:	08009301 	.word	0x08009301
 80091e8:	0800927f 	.word	0x0800927f
 80091ec:	08009301 	.word	0x08009301
 80091f0:	08009301 	.word	0x08009301
 80091f4:	08009301 	.word	0x08009301
 80091f8:	080092bf 	.word	0x080092bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68b9      	ldr	r1, [r7, #8]
 8009202:	4618      	mov	r0, r3
 8009204:	f000 f930 	bl	8009468 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	699a      	ldr	r2, [r3, #24]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f042 0208 	orr.w	r2, r2, #8
 8009216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	699a      	ldr	r2, [r3, #24]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f022 0204 	bic.w	r2, r2, #4
 8009226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6999      	ldr	r1, [r3, #24]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	691a      	ldr	r2, [r3, #16]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	430a      	orrs	r2, r1
 8009238:	619a      	str	r2, [r3, #24]
      break;
 800923a:	e064      	b.n	8009306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68b9      	ldr	r1, [r7, #8]
 8009242:	4618      	mov	r0, r3
 8009244:	f000 f976 	bl	8009534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	699a      	ldr	r2, [r3, #24]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	699a      	ldr	r2, [r3, #24]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	6999      	ldr	r1, [r3, #24]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	021a      	lsls	r2, r3, #8
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	430a      	orrs	r2, r1
 800927a:	619a      	str	r2, [r3, #24]
      break;
 800927c:	e043      	b.n	8009306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68b9      	ldr	r1, [r7, #8]
 8009284:	4618      	mov	r0, r3
 8009286:	f000 f9c1 	bl	800960c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	69da      	ldr	r2, [r3, #28]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f042 0208 	orr.w	r2, r2, #8
 8009298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	69da      	ldr	r2, [r3, #28]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f022 0204 	bic.w	r2, r2, #4
 80092a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	69d9      	ldr	r1, [r3, #28]
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	691a      	ldr	r2, [r3, #16]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	430a      	orrs	r2, r1
 80092ba:	61da      	str	r2, [r3, #28]
      break;
 80092bc:	e023      	b.n	8009306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68b9      	ldr	r1, [r7, #8]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 fa0b 	bl	80096e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	69da      	ldr	r2, [r3, #28]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	69da      	ldr	r2, [r3, #28]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	69d9      	ldr	r1, [r3, #28]
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	021a      	lsls	r2, r3, #8
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	430a      	orrs	r2, r1
 80092fc:	61da      	str	r2, [r3, #28]
      break;
 80092fe:	e002      	b.n	8009306 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	75fb      	strb	r3, [r7, #23]
      break;
 8009304:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800930e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a34      	ldr	r2, [pc, #208]	; (800944c <TIM_Base_SetConfig+0xe4>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d00f      	beq.n	80093a0 <TIM_Base_SetConfig+0x38>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009386:	d00b      	beq.n	80093a0 <TIM_Base_SetConfig+0x38>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a31      	ldr	r2, [pc, #196]	; (8009450 <TIM_Base_SetConfig+0xe8>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d007      	beq.n	80093a0 <TIM_Base_SetConfig+0x38>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a30      	ldr	r2, [pc, #192]	; (8009454 <TIM_Base_SetConfig+0xec>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d003      	beq.n	80093a0 <TIM_Base_SetConfig+0x38>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a2f      	ldr	r2, [pc, #188]	; (8009458 <TIM_Base_SetConfig+0xf0>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d108      	bne.n	80093b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a25      	ldr	r2, [pc, #148]	; (800944c <TIM_Base_SetConfig+0xe4>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d01b      	beq.n	80093f2 <TIM_Base_SetConfig+0x8a>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c0:	d017      	beq.n	80093f2 <TIM_Base_SetConfig+0x8a>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a22      	ldr	r2, [pc, #136]	; (8009450 <TIM_Base_SetConfig+0xe8>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d013      	beq.n	80093f2 <TIM_Base_SetConfig+0x8a>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a21      	ldr	r2, [pc, #132]	; (8009454 <TIM_Base_SetConfig+0xec>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d00f      	beq.n	80093f2 <TIM_Base_SetConfig+0x8a>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a20      	ldr	r2, [pc, #128]	; (8009458 <TIM_Base_SetConfig+0xf0>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d00b      	beq.n	80093f2 <TIM_Base_SetConfig+0x8a>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a1f      	ldr	r2, [pc, #124]	; (800945c <TIM_Base_SetConfig+0xf4>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d007      	beq.n	80093f2 <TIM_Base_SetConfig+0x8a>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a1e      	ldr	r2, [pc, #120]	; (8009460 <TIM_Base_SetConfig+0xf8>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d003      	beq.n	80093f2 <TIM_Base_SetConfig+0x8a>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a1d      	ldr	r2, [pc, #116]	; (8009464 <TIM_Base_SetConfig+0xfc>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d108      	bne.n	8009404 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	4313      	orrs	r3, r2
 8009402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	4313      	orrs	r3, r2
 8009410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a08      	ldr	r2, [pc, #32]	; (800944c <TIM_Base_SetConfig+0xe4>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d103      	bne.n	8009438 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	691a      	ldr	r2, [r3, #16]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	615a      	str	r2, [r3, #20]
}
 800943e:	bf00      	nop
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	40010000 	.word	0x40010000
 8009450:	40000400 	.word	0x40000400
 8009454:	40000800 	.word	0x40000800
 8009458:	40000c00 	.word	0x40000c00
 800945c:	40014000 	.word	0x40014000
 8009460:	40014400 	.word	0x40014400
 8009464:	40014800 	.word	0x40014800

08009468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009468:	b480      	push	{r7}
 800946a:	b087      	sub	sp, #28
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	f023 0201 	bic.w	r2, r3, #1
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a1b      	ldr	r3, [r3, #32]
 8009482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	699b      	ldr	r3, [r3, #24]
 800948e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f023 0303 	bic.w	r3, r3, #3
 800949e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	f023 0302 	bic.w	r3, r3, #2
 80094b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a1c      	ldr	r2, [pc, #112]	; (8009530 <TIM_OC1_SetConfig+0xc8>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d10c      	bne.n	80094de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	f023 0308 	bic.w	r3, r3, #8
 80094ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	697a      	ldr	r2, [r7, #20]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f023 0304 	bic.w	r3, r3, #4
 80094dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a13      	ldr	r2, [pc, #76]	; (8009530 <TIM_OC1_SetConfig+0xc8>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d111      	bne.n	800950a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	695b      	ldr	r3, [r3, #20]
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	4313      	orrs	r3, r2
 8009508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	621a      	str	r2, [r3, #32]
}
 8009524:	bf00      	nop
 8009526:	371c      	adds	r7, #28
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	40010000 	.word	0x40010000

08009534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009534:	b480      	push	{r7}
 8009536:	b087      	sub	sp, #28
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	f023 0210 	bic.w	r2, r3, #16
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800956a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	021b      	lsls	r3, r3, #8
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	4313      	orrs	r3, r2
 8009576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	f023 0320 	bic.w	r3, r3, #32
 800957e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	011b      	lsls	r3, r3, #4
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	4313      	orrs	r3, r2
 800958a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a1e      	ldr	r2, [pc, #120]	; (8009608 <TIM_OC2_SetConfig+0xd4>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d10d      	bne.n	80095b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800959a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	011b      	lsls	r3, r3, #4
 80095a2:	697a      	ldr	r2, [r7, #20]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a15      	ldr	r2, [pc, #84]	; (8009608 <TIM_OC2_SetConfig+0xd4>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d113      	bne.n	80095e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	695b      	ldr	r3, [r3, #20]
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	693a      	ldr	r2, [r7, #16]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	4313      	orrs	r3, r2
 80095de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	685a      	ldr	r2, [r3, #4]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	621a      	str	r2, [r3, #32]
}
 80095fa:	bf00      	nop
 80095fc:	371c      	adds	r7, #28
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	40010000 	.word	0x40010000

0800960c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800960c:	b480      	push	{r7}
 800960e:	b087      	sub	sp, #28
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a1b      	ldr	r3, [r3, #32]
 800961a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800963a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f023 0303 	bic.w	r3, r3, #3
 8009642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	4313      	orrs	r3, r2
 800964c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	021b      	lsls	r3, r3, #8
 800965c:	697a      	ldr	r2, [r7, #20]
 800965e:	4313      	orrs	r3, r2
 8009660:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a1d      	ldr	r2, [pc, #116]	; (80096dc <TIM_OC3_SetConfig+0xd0>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d10d      	bne.n	8009686 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	021b      	lsls	r3, r3, #8
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	4313      	orrs	r3, r2
 800967c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a14      	ldr	r2, [pc, #80]	; (80096dc <TIM_OC3_SetConfig+0xd0>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d113      	bne.n	80096b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800969c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	011b      	lsls	r3, r3, #4
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	011b      	lsls	r3, r3, #4
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	621a      	str	r2, [r3, #32]
}
 80096d0:	bf00      	nop
 80096d2:	371c      	adds	r7, #28
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	40010000 	.word	0x40010000

080096e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	69db      	ldr	r3, [r3, #28]
 8009706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800970e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	021b      	lsls	r3, r3, #8
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	4313      	orrs	r3, r2
 8009722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800972a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	031b      	lsls	r3, r3, #12
 8009732:	693a      	ldr	r2, [r7, #16]
 8009734:	4313      	orrs	r3, r2
 8009736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a10      	ldr	r2, [pc, #64]	; (800977c <TIM_OC4_SetConfig+0x9c>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d109      	bne.n	8009754 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	695b      	ldr	r3, [r3, #20]
 800974c:	019b      	lsls	r3, r3, #6
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	4313      	orrs	r3, r2
 8009752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	621a      	str	r2, [r3, #32]
}
 800976e:	bf00      	nop
 8009770:	371c      	adds	r7, #28
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	40010000 	.word	0x40010000

08009780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	f003 031f 	and.w	r3, r3, #31
 8009792:	2201      	movs	r2, #1
 8009794:	fa02 f303 	lsl.w	r3, r2, r3
 8009798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6a1a      	ldr	r2, [r3, #32]
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	43db      	mvns	r3, r3
 80097a2:	401a      	ands	r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6a1a      	ldr	r2, [r3, #32]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f003 031f 	and.w	r3, r3, #31
 80097b2:	6879      	ldr	r1, [r7, #4]
 80097b4:	fa01 f303 	lsl.w	r3, r1, r3
 80097b8:	431a      	orrs	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	621a      	str	r2, [r3, #32]
}
 80097be:	bf00      	nop
 80097c0:	371c      	adds	r7, #28
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
	...

080097cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d101      	bne.n	80097e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097e0:	2302      	movs	r3, #2
 80097e2:	e050      	b.n	8009886 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2202      	movs	r2, #2
 80097f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800980a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	4313      	orrs	r3, r2
 8009814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a1c      	ldr	r2, [pc, #112]	; (8009894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d018      	beq.n	800985a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009830:	d013      	beq.n	800985a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a18      	ldr	r2, [pc, #96]	; (8009898 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d00e      	beq.n	800985a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a16      	ldr	r2, [pc, #88]	; (800989c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d009      	beq.n	800985a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a15      	ldr	r2, [pc, #84]	; (80098a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d004      	beq.n	800985a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a13      	ldr	r2, [pc, #76]	; (80098a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d10c      	bne.n	8009874 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	4313      	orrs	r3, r2
 800986a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	40010000 	.word	0x40010000
 8009898:	40000400 	.word	0x40000400
 800989c:	40000800 	.word	0x40000800
 80098a0:	40000c00 	.word	0x40000c00
 80098a4:	40014000 	.word	0x40014000

080098a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80098b2:	2300      	movs	r3, #0
 80098b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d101      	bne.n	80098c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80098c0:	2302      	movs	r3, #2
 80098c2:	e03d      	b.n	8009940 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4313      	orrs	r3, r2
 8009902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	4313      	orrs	r3, r2
 8009910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	695b      	ldr	r3, [r3, #20]
 800991c:	4313      	orrs	r3, r2
 800991e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	69db      	ldr	r3, [r3, #28]
 800992a:	4313      	orrs	r3, r2
 800992c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3714      	adds	r7, #20
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e03f      	b.n	8009a06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b00      	cmp	r3, #0
 8009990:	d106      	bne.n	80099a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7fb fb16 	bl	8004fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2224      	movs	r2, #36	; 0x24
 80099a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68da      	ldr	r2, [r3, #12]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 ff81 	bl	800a8c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	691a      	ldr	r2, [r3, #16]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	695a      	ldr	r2, [r3, #20]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80099dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	68da      	ldr	r2, [r3, #12]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2220      	movs	r2, #32
 80099f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2220      	movs	r2, #32
 8009a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
	...

08009a10 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b08c      	sub	sp, #48	; 0x30
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	2b20      	cmp	r3, #32
 8009a28:	d165      	bne.n	8009af6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d002      	beq.n	8009a36 <HAL_UART_Transmit_DMA+0x26>
 8009a30:	88fb      	ldrh	r3, [r7, #6]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d101      	bne.n	8009a3a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	e05e      	b.n	8009af8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d101      	bne.n	8009a48 <HAL_UART_Transmit_DMA+0x38>
 8009a44:	2302      	movs	r3, #2
 8009a46:	e057      	b.n	8009af8 <HAL_UART_Transmit_DMA+0xe8>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	88fa      	ldrh	r2, [r7, #6]
 8009a5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	88fa      	ldrh	r2, [r7, #6]
 8009a60:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2200      	movs	r2, #0
 8009a66:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2221      	movs	r2, #33	; 0x21
 8009a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a74:	4a22      	ldr	r2, [pc, #136]	; (8009b00 <HAL_UART_Transmit_DMA+0xf0>)
 8009a76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7c:	4a21      	ldr	r2, [pc, #132]	; (8009b04 <HAL_UART_Transmit_DMA+0xf4>)
 8009a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a84:	4a20      	ldr	r2, [pc, #128]	; (8009b08 <HAL_UART_Transmit_DMA+0xf8>)
 8009a86:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009a90:	f107 0308 	add.w	r3, r7, #8
 8009a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9c:	6819      	ldr	r1, [r3, #0]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	3304      	adds	r3, #4
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	88fb      	ldrh	r3, [r7, #6]
 8009aa8:	f7fb fe30 	bl	800570c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ab4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	3314      	adds	r3, #20
 8009ac4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	e853 3f00 	ldrex	r3, [r3]
 8009acc:	617b      	str	r3, [r7, #20]
   return(result);
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	3314      	adds	r3, #20
 8009adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ade:	627a      	str	r2, [r7, #36]	; 0x24
 8009ae0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae2:	6a39      	ldr	r1, [r7, #32]
 8009ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ae6:	e841 2300 	strex	r3, r2, [r1]
 8009aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1e5      	bne.n	8009abe <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	e000      	b.n	8009af8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009af6:	2302      	movs	r3, #2
  }
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3730      	adds	r7, #48	; 0x30
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	0800a159 	.word	0x0800a159
 8009b04:	0800a1f3 	.word	0x0800a1f3
 8009b08:	0800a36b 	.word	0x0800a36b

08009b0c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b08c      	sub	sp, #48	; 0x30
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	4613      	mov	r3, r2
 8009b18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b20      	cmp	r3, #32
 8009b24:	d152      	bne.n	8009bcc <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d002      	beq.n	8009b32 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009b2c:	88fb      	ldrh	r3, [r7, #6]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d101      	bne.n	8009b36 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e04b      	b.n	8009bce <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d101      	bne.n	8009b44 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009b40:	2302      	movs	r3, #2
 8009b42:	e044      	b.n	8009bce <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009b52:	88fb      	ldrh	r3, [r7, #6]
 8009b54:	461a      	mov	r2, r3
 8009b56:	68b9      	ldr	r1, [r7, #8]
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f000 fc51 	bl	800a400 <UART_Start_Receive_DMA>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d12c      	bne.n	8009bc6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d125      	bne.n	8009bc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b74:	2300      	movs	r3, #0
 8009b76:	613b      	str	r3, [r7, #16]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	613b      	str	r3, [r7, #16]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	613b      	str	r3, [r7, #16]
 8009b88:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	330c      	adds	r3, #12
 8009b90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	e853 3f00 	ldrex	r3, [r3]
 8009b98:	617b      	str	r3, [r7, #20]
   return(result);
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f043 0310 	orr.w	r3, r3, #16
 8009ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	330c      	adds	r3, #12
 8009ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009baa:	627a      	str	r2, [r7, #36]	; 0x24
 8009bac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bae:	6a39      	ldr	r1, [r7, #32]
 8009bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bb2:	e841 2300 	strex	r3, r2, [r1]
 8009bb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1e5      	bne.n	8009b8a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8009bbe:	e002      	b.n	8009bc6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bca:	e000      	b.n	8009bce <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8009bcc:	2302      	movs	r3, #2
  }
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3730      	adds	r7, #48	; 0x30
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
	...

08009bd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b0ba      	sub	sp, #232	; 0xe8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009c04:	2300      	movs	r3, #0
 8009c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c0e:	f003 030f 	and.w	r3, r3, #15
 8009c12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10f      	bne.n	8009c3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c22:	f003 0320 	and.w	r3, r3, #32
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d009      	beq.n	8009c3e <HAL_UART_IRQHandler+0x66>
 8009c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c2e:	f003 0320 	and.w	r3, r3, #32
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d003      	beq.n	8009c3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fd87 	bl	800a74a <UART_Receive_IT>
      return;
 8009c3c:	e256      	b.n	800a0ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009c3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f000 80de 	beq.w	8009e04 <HAL_UART_IRQHandler+0x22c>
 8009c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c4c:	f003 0301 	and.w	r3, r3, #1
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d106      	bne.n	8009c62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 80d1 	beq.w	8009e04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00b      	beq.n	8009c86 <HAL_UART_IRQHandler+0xae>
 8009c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d005      	beq.n	8009c86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7e:	f043 0201 	orr.w	r2, r3, #1
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c8a:	f003 0304 	and.w	r3, r3, #4
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00b      	beq.n	8009caa <HAL_UART_IRQHandler+0xd2>
 8009c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c96:	f003 0301 	and.w	r3, r3, #1
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d005      	beq.n	8009caa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca2:	f043 0202 	orr.w	r2, r3, #2
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cae:	f003 0302 	and.w	r3, r3, #2
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00b      	beq.n	8009cce <HAL_UART_IRQHandler+0xf6>
 8009cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d005      	beq.n	8009cce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc6:	f043 0204 	orr.w	r2, r3, #4
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cd2:	f003 0308 	and.w	r3, r3, #8
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d011      	beq.n	8009cfe <HAL_UART_IRQHandler+0x126>
 8009cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cde:	f003 0320 	and.w	r3, r3, #32
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d105      	bne.n	8009cf2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d005      	beq.n	8009cfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf6:	f043 0208 	orr.w	r2, r3, #8
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 81ed 	beq.w	800a0e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d0c:	f003 0320 	and.w	r3, r3, #32
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d008      	beq.n	8009d26 <HAL_UART_IRQHandler+0x14e>
 8009d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d18:	f003 0320 	and.w	r3, r3, #32
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d002      	beq.n	8009d26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fd12 	bl	800a74a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	695b      	ldr	r3, [r3, #20]
 8009d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d30:	2b40      	cmp	r3, #64	; 0x40
 8009d32:	bf0c      	ite	eq
 8009d34:	2301      	moveq	r3, #1
 8009d36:	2300      	movne	r3, #0
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d42:	f003 0308 	and.w	r3, r3, #8
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d103      	bne.n	8009d52 <HAL_UART_IRQHandler+0x17a>
 8009d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d04f      	beq.n	8009df2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fc1a 	bl	800a58c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d62:	2b40      	cmp	r3, #64	; 0x40
 8009d64:	d141      	bne.n	8009dea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	3314      	adds	r3, #20
 8009d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d74:	e853 3f00 	ldrex	r3, [r3]
 8009d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	3314      	adds	r3, #20
 8009d8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009d92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009d9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009da2:	e841 2300 	strex	r3, r2, [r1]
 8009da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1d9      	bne.n	8009d66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d013      	beq.n	8009de2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dbe:	4a7d      	ldr	r2, [pc, #500]	; (8009fb4 <HAL_UART_IRQHandler+0x3dc>)
 8009dc0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fb fd68 	bl	800589c <HAL_DMA_Abort_IT>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d016      	beq.n	8009e00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009ddc:	4610      	mov	r0, r2
 8009dde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de0:	e00e      	b.n	8009e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f9ae 	bl	800a144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de8:	e00a      	b.n	8009e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f9aa 	bl	800a144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009df0:	e006      	b.n	8009e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f9a6 	bl	800a144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009dfe:	e170      	b.n	800a0e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e00:	bf00      	nop
    return;
 8009e02:	e16e      	b.n	800a0e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	f040 814a 	bne.w	800a0a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e12:	f003 0310 	and.w	r3, r3, #16
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 8143 	beq.w	800a0a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e20:	f003 0310 	and.w	r3, r3, #16
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f000 813c 	beq.w	800a0a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	60bb      	str	r3, [r7, #8]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	60bb      	str	r3, [r7, #8]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	60bb      	str	r3, [r7, #8]
 8009e3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e4a:	2b40      	cmp	r3, #64	; 0x40
 8009e4c:	f040 80b4 	bne.w	8009fb8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f000 8140 	beq.w	800a0e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	f080 8139 	bcs.w	800a0e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e80:	69db      	ldr	r3, [r3, #28]
 8009e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e86:	f000 8088 	beq.w	8009f9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	330c      	adds	r3, #12
 8009e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e98:	e853 3f00 	ldrex	r3, [r3]
 8009e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	330c      	adds	r3, #12
 8009eb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009eb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009ec2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009ec6:	e841 2300 	strex	r3, r2, [r1]
 8009eca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1d9      	bne.n	8009e8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3314      	adds	r3, #20
 8009edc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ee0:	e853 3f00 	ldrex	r3, [r3]
 8009ee4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ee8:	f023 0301 	bic.w	r3, r3, #1
 8009eec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	3314      	adds	r3, #20
 8009ef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009efa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009efe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009f02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f06:	e841 2300 	strex	r3, r2, [r1]
 8009f0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1e1      	bne.n	8009ed6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3314      	adds	r3, #20
 8009f18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f1c:	e853 3f00 	ldrex	r3, [r3]
 8009f20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3314      	adds	r3, #20
 8009f32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009f36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009f38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009f3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f3e:	e841 2300 	strex	r3, r2, [r1]
 8009f42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009f44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1e3      	bne.n	8009f12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2220      	movs	r2, #32
 8009f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	330c      	adds	r3, #12
 8009f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f62:	e853 3f00 	ldrex	r3, [r3]
 8009f66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f6a:	f023 0310 	bic.w	r3, r3, #16
 8009f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	330c      	adds	r3, #12
 8009f78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009f7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8009f7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f84:	e841 2300 	strex	r3, r2, [r1]
 8009f88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d1e3      	bne.n	8009f58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7fb fc11 	bl	80057bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	1ad3      	subs	r3, r2, r3
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	4619      	mov	r1, r3
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7f9 fef0 	bl	8003d90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009fb0:	e099      	b.n	800a0e6 <HAL_UART_IRQHandler+0x50e>
 8009fb2:	bf00      	nop
 8009fb4:	0800a653 	.word	0x0800a653
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f000 808b 	beq.w	800a0ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 8086 	beq.w	800a0ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	330c      	adds	r3, #12
 8009fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe8:	e853 3f00 	ldrex	r3, [r3]
 8009fec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ff4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	330c      	adds	r3, #12
 8009ffe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a002:	647a      	str	r2, [r7, #68]	; 0x44
 800a004:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a006:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a008:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a00a:	e841 2300 	strex	r3, r2, [r1]
 800a00e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1e3      	bne.n	8009fde <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3314      	adds	r3, #20
 800a01c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	e853 3f00 	ldrex	r3, [r3]
 800a024:	623b      	str	r3, [r7, #32]
   return(result);
 800a026:	6a3b      	ldr	r3, [r7, #32]
 800a028:	f023 0301 	bic.w	r3, r3, #1
 800a02c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3314      	adds	r3, #20
 800a036:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a03a:	633a      	str	r2, [r7, #48]	; 0x30
 800a03c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a042:	e841 2300 	strex	r3, r2, [r1]
 800a046:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1e3      	bne.n	800a016 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2220      	movs	r2, #32
 800a052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	330c      	adds	r3, #12
 800a062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	e853 3f00 	ldrex	r3, [r3]
 800a06a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f023 0310 	bic.w	r3, r3, #16
 800a072:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	330c      	adds	r3, #12
 800a07c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a080:	61fa      	str	r2, [r7, #28]
 800a082:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a084:	69b9      	ldr	r1, [r7, #24]
 800a086:	69fa      	ldr	r2, [r7, #28]
 800a088:	e841 2300 	strex	r3, r2, [r1]
 800a08c:	617b      	str	r3, [r7, #20]
   return(result);
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1e3      	bne.n	800a05c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a094:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a098:	4619      	mov	r1, r3
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7f9 fe78 	bl	8003d90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a0a0:	e023      	b.n	800a0ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a0a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d009      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x4ea>
 800a0ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fadd 	bl	800a67a <UART_Transmit_IT>
    return;
 800a0c0:	e014      	b.n	800a0ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a0c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00e      	beq.n	800a0ec <HAL_UART_IRQHandler+0x514>
 800a0ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d008      	beq.n	800a0ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fb1d 	bl	800a71a <UART_EndTransmit_IT>
    return;
 800a0e0:	e004      	b.n	800a0ec <HAL_UART_IRQHandler+0x514>
    return;
 800a0e2:	bf00      	nop
 800a0e4:	e002      	b.n	800a0ec <HAL_UART_IRQHandler+0x514>
      return;
 800a0e6:	bf00      	nop
 800a0e8:	e000      	b.n	800a0ec <HAL_UART_IRQHandler+0x514>
      return;
 800a0ea:	bf00      	nop
  }
}
 800a0ec:	37e8      	adds	r7, #232	; 0xe8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop

0800a0f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b090      	sub	sp, #64	; 0x40
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a164:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a170:	2b00      	cmp	r3, #0
 800a172:	d137      	bne.n	800a1e4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a176:	2200      	movs	r2, #0
 800a178:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a17a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	3314      	adds	r3, #20
 800a180:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a184:	e853 3f00 	ldrex	r3, [r3]
 800a188:	623b      	str	r3, [r7, #32]
   return(result);
 800a18a:	6a3b      	ldr	r3, [r7, #32]
 800a18c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a190:	63bb      	str	r3, [r7, #56]	; 0x38
 800a192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	3314      	adds	r3, #20
 800a198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a19a:	633a      	str	r2, [r7, #48]	; 0x30
 800a19c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1a2:	e841 2300 	strex	r3, r2, [r1]
 800a1a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1e5      	bne.n	800a17a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	330c      	adds	r3, #12
 800a1b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	e853 3f00 	ldrex	r3, [r3]
 800a1bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	330c      	adds	r3, #12
 800a1cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1ce:	61fa      	str	r2, [r7, #28]
 800a1d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d2:	69b9      	ldr	r1, [r7, #24]
 800a1d4:	69fa      	ldr	r2, [r7, #28]
 800a1d6:	e841 2300 	strex	r3, r2, [r1]
 800a1da:	617b      	str	r3, [r7, #20]
   return(result);
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1e5      	bne.n	800a1ae <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1e2:	e002      	b.n	800a1ea <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a1e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a1e6:	f7ff ff85 	bl	800a0f4 <HAL_UART_TxCpltCallback>
}
 800a1ea:	bf00      	nop
 800a1ec:	3740      	adds	r7, #64	; 0x40
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f7ff ff81 	bl	800a108 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a206:	bf00      	nop
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b09c      	sub	sp, #112	; 0x70
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a226:	2b00      	cmp	r3, #0
 800a228:	d172      	bne.n	800a310 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a22a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a22c:	2200      	movs	r2, #0
 800a22e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	330c      	adds	r3, #12
 800a236:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a23a:	e853 3f00 	ldrex	r3, [r3]
 800a23e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a246:	66bb      	str	r3, [r7, #104]	; 0x68
 800a248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	330c      	adds	r3, #12
 800a24e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a250:	65ba      	str	r2, [r7, #88]	; 0x58
 800a252:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a254:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a256:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a258:	e841 2300 	strex	r3, r2, [r1]
 800a25c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a25e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1e5      	bne.n	800a230 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	3314      	adds	r3, #20
 800a26a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26e:	e853 3f00 	ldrex	r3, [r3]
 800a272:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a276:	f023 0301 	bic.w	r3, r3, #1
 800a27a:	667b      	str	r3, [r7, #100]	; 0x64
 800a27c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	3314      	adds	r3, #20
 800a282:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a284:	647a      	str	r2, [r7, #68]	; 0x44
 800a286:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a288:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a28a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a28c:	e841 2300 	strex	r3, r2, [r1]
 800a290:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1e5      	bne.n	800a264 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	3314      	adds	r3, #20
 800a29e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	e853 3f00 	ldrex	r3, [r3]
 800a2a6:	623b      	str	r3, [r7, #32]
   return(result);
 800a2a8:	6a3b      	ldr	r3, [r7, #32]
 800a2aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2ae:	663b      	str	r3, [r7, #96]	; 0x60
 800a2b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3314      	adds	r3, #20
 800a2b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a2b8:	633a      	str	r2, [r7, #48]	; 0x30
 800a2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2c0:	e841 2300 	strex	r3, r2, [r1]
 800a2c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1e5      	bne.n	800a298 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a2cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ce:	2220      	movs	r2, #32
 800a2d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d119      	bne.n	800a310 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	330c      	adds	r3, #12
 800a2e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	e853 3f00 	ldrex	r3, [r3]
 800a2ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f023 0310 	bic.w	r3, r3, #16
 800a2f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	330c      	adds	r3, #12
 800a2fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a2fc:	61fa      	str	r2, [r7, #28]
 800a2fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a300:	69b9      	ldr	r1, [r7, #24]
 800a302:	69fa      	ldr	r2, [r7, #28]
 800a304:	e841 2300 	strex	r3, r2, [r1]
 800a308:	617b      	str	r3, [r7, #20]
   return(result);
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1e5      	bne.n	800a2dc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a314:	2b01      	cmp	r3, #1
 800a316:	d106      	bne.n	800a326 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a31a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a31c:	4619      	mov	r1, r3
 800a31e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a320:	f7f9 fd36 	bl	8003d90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a324:	e002      	b.n	800a32c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a326:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a328:	f7ff fef8 	bl	800a11c <HAL_UART_RxCpltCallback>
}
 800a32c:	bf00      	nop
 800a32e:	3770      	adds	r7, #112	; 0x70
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a340:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a346:	2b01      	cmp	r3, #1
 800a348:	d108      	bne.n	800a35c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a34e:	085b      	lsrs	r3, r3, #1
 800a350:	b29b      	uxth	r3, r3
 800a352:	4619      	mov	r1, r3
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f7f9 fd1b 	bl	8003d90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a35a:	e002      	b.n	800a362 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f7ff fee7 	bl	800a130 <HAL_UART_RxHalfCpltCallback>
}
 800a362:	bf00      	nop
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b084      	sub	sp, #16
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a372:	2300      	movs	r3, #0
 800a374:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a386:	2b80      	cmp	r3, #128	; 0x80
 800a388:	bf0c      	ite	eq
 800a38a:	2301      	moveq	r3, #1
 800a38c:	2300      	movne	r3, #0
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b21      	cmp	r3, #33	; 0x21
 800a39c:	d108      	bne.n	800a3b0 <UART_DMAError+0x46>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d005      	beq.n	800a3b0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a3aa:	68b8      	ldr	r0, [r7, #8]
 800a3ac:	f000 f8c6 	bl	800a53c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	695b      	ldr	r3, [r3, #20]
 800a3b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ba:	2b40      	cmp	r3, #64	; 0x40
 800a3bc:	bf0c      	ite	eq
 800a3be:	2301      	moveq	r3, #1
 800a3c0:	2300      	movne	r3, #0
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	2b22      	cmp	r3, #34	; 0x22
 800a3d0:	d108      	bne.n	800a3e4 <UART_DMAError+0x7a>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d005      	beq.n	800a3e4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a3de:	68b8      	ldr	r0, [r7, #8]
 800a3e0:	f000 f8d4 	bl	800a58c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e8:	f043 0210 	orr.w	r2, r3, #16
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3f0:	68b8      	ldr	r0, [r7, #8]
 800a3f2:	f7ff fea7 	bl	800a144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3f6:	bf00      	nop
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
	...

0800a400 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b098      	sub	sp, #96	; 0x60
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	4613      	mov	r3, r2
 800a40c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a40e:	68ba      	ldr	r2, [r7, #8]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	88fa      	ldrh	r2, [r7, #6]
 800a418:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2222      	movs	r2, #34	; 0x22
 800a424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42c:	4a40      	ldr	r2, [pc, #256]	; (800a530 <UART_Start_Receive_DMA+0x130>)
 800a42e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a434:	4a3f      	ldr	r2, [pc, #252]	; (800a534 <UART_Start_Receive_DMA+0x134>)
 800a436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43c:	4a3e      	ldr	r2, [pc, #248]	; (800a538 <UART_Start_Receive_DMA+0x138>)
 800a43e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a444:	2200      	movs	r2, #0
 800a446:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a448:	f107 0308 	add.w	r3, r7, #8
 800a44c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3304      	adds	r3, #4
 800a458:	4619      	mov	r1, r3
 800a45a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	88fb      	ldrh	r3, [r7, #6]
 800a460:	f7fb f954 	bl	800570c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a464:	2300      	movs	r3, #0
 800a466:	613b      	str	r3, [r7, #16]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	613b      	str	r3, [r7, #16]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	613b      	str	r3, [r7, #16]
 800a478:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d019      	beq.n	800a4be <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	330c      	adds	r3, #12
 800a490:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a494:	e853 3f00 	ldrex	r3, [r3]
 800a498:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a49c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4a0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	330c      	adds	r3, #12
 800a4a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4aa:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a4ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a4b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4b2:	e841 2300 	strex	r3, r2, [r1]
 800a4b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a4b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1e5      	bne.n	800a48a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	3314      	adds	r3, #20
 800a4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c8:	e853 3f00 	ldrex	r3, [r3]
 800a4cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d0:	f043 0301 	orr.w	r3, r3, #1
 800a4d4:	657b      	str	r3, [r7, #84]	; 0x54
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	3314      	adds	r3, #20
 800a4dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a4de:	63ba      	str	r2, [r7, #56]	; 0x38
 800a4e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a4e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4e6:	e841 2300 	strex	r3, r2, [r1]
 800a4ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1e5      	bne.n	800a4be <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	3314      	adds	r3, #20
 800a4f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	e853 3f00 	ldrex	r3, [r3]
 800a500:	617b      	str	r3, [r7, #20]
   return(result);
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a508:	653b      	str	r3, [r7, #80]	; 0x50
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	3314      	adds	r3, #20
 800a510:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a512:	627a      	str	r2, [r7, #36]	; 0x24
 800a514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a516:	6a39      	ldr	r1, [r7, #32]
 800a518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a51a:	e841 2300 	strex	r3, r2, [r1]
 800a51e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1e5      	bne.n	800a4f2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3760      	adds	r7, #96	; 0x60
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	0800a20f 	.word	0x0800a20f
 800a534:	0800a335 	.word	0x0800a335
 800a538:	0800a36b 	.word	0x0800a36b

0800a53c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b089      	sub	sp, #36	; 0x24
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	330c      	adds	r3, #12
 800a54a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	e853 3f00 	ldrex	r3, [r3]
 800a552:	60bb      	str	r3, [r7, #8]
   return(result);
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a55a:	61fb      	str	r3, [r7, #28]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	330c      	adds	r3, #12
 800a562:	69fa      	ldr	r2, [r7, #28]
 800a564:	61ba      	str	r2, [r7, #24]
 800a566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a568:	6979      	ldr	r1, [r7, #20]
 800a56a:	69ba      	ldr	r2, [r7, #24]
 800a56c:	e841 2300 	strex	r3, r2, [r1]
 800a570:	613b      	str	r3, [r7, #16]
   return(result);
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1e5      	bne.n	800a544 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2220      	movs	r2, #32
 800a57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a580:	bf00      	nop
 800a582:	3724      	adds	r7, #36	; 0x24
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b095      	sub	sp, #84	; 0x54
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	330c      	adds	r3, #12
 800a59a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a59e:	e853 3f00 	ldrex	r3, [r3]
 800a5a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	330c      	adds	r3, #12
 800a5b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a5b4:	643a      	str	r2, [r7, #64]	; 0x40
 800a5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a5ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5bc:	e841 2300 	strex	r3, r2, [r1]
 800a5c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1e5      	bne.n	800a594 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	3314      	adds	r3, #20
 800a5ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d0:	6a3b      	ldr	r3, [r7, #32]
 800a5d2:	e853 3f00 	ldrex	r3, [r3]
 800a5d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	f023 0301 	bic.w	r3, r3, #1
 800a5de:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	3314      	adds	r3, #20
 800a5e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a5ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5f0:	e841 2300 	strex	r3, r2, [r1]
 800a5f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1e5      	bne.n	800a5c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a600:	2b01      	cmp	r3, #1
 800a602:	d119      	bne.n	800a638 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	330c      	adds	r3, #12
 800a60a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	e853 3f00 	ldrex	r3, [r3]
 800a612:	60bb      	str	r3, [r7, #8]
   return(result);
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	f023 0310 	bic.w	r3, r3, #16
 800a61a:	647b      	str	r3, [r7, #68]	; 0x44
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	330c      	adds	r3, #12
 800a622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a624:	61ba      	str	r2, [r7, #24]
 800a626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a628:	6979      	ldr	r1, [r7, #20]
 800a62a:	69ba      	ldr	r2, [r7, #24]
 800a62c:	e841 2300 	strex	r3, r2, [r1]
 800a630:	613b      	str	r3, [r7, #16]
   return(result);
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d1e5      	bne.n	800a604 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2220      	movs	r2, #32
 800a63c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a646:	bf00      	nop
 800a648:	3754      	adds	r7, #84	; 0x54
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr

0800a652 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b084      	sub	sp, #16
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2200      	movs	r2, #0
 800a664:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f7ff fd69 	bl	800a144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a672:	bf00      	nop
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b085      	sub	sp, #20
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	2b21      	cmp	r3, #33	; 0x21
 800a68c:	d13e      	bne.n	800a70c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a696:	d114      	bne.n	800a6c2 <UART_Transmit_IT+0x48>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d110      	bne.n	800a6c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a1b      	ldr	r3, [r3, #32]
 800a6a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	881b      	ldrh	r3, [r3, #0]
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a6b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a1b      	ldr	r3, [r3, #32]
 800a6ba:	1c9a      	adds	r2, r3, #2
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	621a      	str	r2, [r3, #32]
 800a6c0:	e008      	b.n	800a6d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a1b      	ldr	r3, [r3, #32]
 800a6c6:	1c59      	adds	r1, r3, #1
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	6211      	str	r1, [r2, #32]
 800a6cc:	781a      	ldrb	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10f      	bne.n	800a708 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68da      	ldr	r2, [r3, #12]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a6f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68da      	ldr	r2, [r3, #12]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a706:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a708:	2300      	movs	r3, #0
 800a70a:	e000      	b.n	800a70e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a70c:	2302      	movs	r3, #2
  }
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3714      	adds	r7, #20
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b082      	sub	sp, #8
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68da      	ldr	r2, [r3, #12]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a730:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2220      	movs	r2, #32
 800a736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f7ff fcda 	bl	800a0f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b08c      	sub	sp, #48	; 0x30
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	2b22      	cmp	r3, #34	; 0x22
 800a75c:	f040 80ab 	bne.w	800a8b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a768:	d117      	bne.n	800a79a <UART_Receive_IT+0x50>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d113      	bne.n	800a79a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a772:	2300      	movs	r3, #0
 800a774:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a77a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	b29b      	uxth	r3, r3
 800a784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a788:	b29a      	uxth	r2, r3
 800a78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a792:	1c9a      	adds	r2, r3, #2
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	629a      	str	r2, [r3, #40]	; 0x28
 800a798:	e026      	b.n	800a7e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a79e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7ac:	d007      	beq.n	800a7be <UART_Receive_IT+0x74>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d10a      	bne.n	800a7cc <UART_Receive_IT+0x82>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d106      	bne.n	800a7cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	b2da      	uxtb	r2, r3
 800a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c8:	701a      	strb	r2, [r3, #0]
 800a7ca:	e008      	b.n	800a7de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7d8:	b2da      	uxtb	r2, r3
 800a7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e2:	1c5a      	adds	r2, r3, #1
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d15a      	bne.n	800a8b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68da      	ldr	r2, [r3, #12]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f022 0220 	bic.w	r2, r2, #32
 800a80a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	68da      	ldr	r2, [r3, #12]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a81a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	695a      	ldr	r2, [r3, #20]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f022 0201 	bic.w	r2, r2, #1
 800a82a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2220      	movs	r2, #32
 800a830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d135      	bne.n	800a8a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	330c      	adds	r3, #12
 800a848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	e853 3f00 	ldrex	r3, [r3]
 800a850:	613b      	str	r3, [r7, #16]
   return(result);
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	f023 0310 	bic.w	r3, r3, #16
 800a858:	627b      	str	r3, [r7, #36]	; 0x24
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	330c      	adds	r3, #12
 800a860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a862:	623a      	str	r2, [r7, #32]
 800a864:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a866:	69f9      	ldr	r1, [r7, #28]
 800a868:	6a3a      	ldr	r2, [r7, #32]
 800a86a:	e841 2300 	strex	r3, r2, [r1]
 800a86e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1e5      	bne.n	800a842 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 0310 	and.w	r3, r3, #16
 800a880:	2b10      	cmp	r3, #16
 800a882:	d10a      	bne.n	800a89a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a884:	2300      	movs	r3, #0
 800a886:	60fb      	str	r3, [r7, #12]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a89e:	4619      	mov	r1, r3
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f7f9 fa75 	bl	8003d90 <HAL_UARTEx_RxEventCallback>
 800a8a6:	e002      	b.n	800a8ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f7ff fc37 	bl	800a11c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	e002      	b.n	800a8b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	e000      	b.n	800a8b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a8b6:	2302      	movs	r3, #2
  }
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3730      	adds	r7, #48	; 0x30
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8c4:	b0c0      	sub	sp, #256	; 0x100
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a8d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8dc:	68d9      	ldr	r1, [r3, #12]
 800a8de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	ea40 0301 	orr.w	r3, r0, r1
 800a8e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a8ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8ee:	689a      	ldr	r2, [r3, #8]
 800a8f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	431a      	orrs	r2, r3
 800a8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8fc:	695b      	ldr	r3, [r3, #20]
 800a8fe:	431a      	orrs	r2, r3
 800a900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a904:	69db      	ldr	r3, [r3, #28]
 800a906:	4313      	orrs	r3, r2
 800a908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a90c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a918:	f021 010c 	bic.w	r1, r1, #12
 800a91c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a926:	430b      	orrs	r3, r1
 800a928:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a92a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	695b      	ldr	r3, [r3, #20]
 800a932:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a93a:	6999      	ldr	r1, [r3, #24]
 800a93c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	ea40 0301 	orr.w	r3, r0, r1
 800a946:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	4b8f      	ldr	r3, [pc, #572]	; (800ab8c <UART_SetConfig+0x2cc>)
 800a950:	429a      	cmp	r2, r3
 800a952:	d005      	beq.n	800a960 <UART_SetConfig+0xa0>
 800a954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	4b8d      	ldr	r3, [pc, #564]	; (800ab90 <UART_SetConfig+0x2d0>)
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d104      	bne.n	800a96a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a960:	f7fe f816 	bl	8008990 <HAL_RCC_GetPCLK2Freq>
 800a964:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a968:	e003      	b.n	800a972 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a96a:	f7fd fffd 	bl	8008968 <HAL_RCC_GetPCLK1Freq>
 800a96e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a976:	69db      	ldr	r3, [r3, #28]
 800a978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a97c:	f040 810c 	bne.w	800ab98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a984:	2200      	movs	r2, #0
 800a986:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a98a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a98e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a992:	4622      	mov	r2, r4
 800a994:	462b      	mov	r3, r5
 800a996:	1891      	adds	r1, r2, r2
 800a998:	65b9      	str	r1, [r7, #88]	; 0x58
 800a99a:	415b      	adcs	r3, r3
 800a99c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a99e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	eb12 0801 	adds.w	r8, r2, r1
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	eb43 0901 	adc.w	r9, r3, r1
 800a9ae:	f04f 0200 	mov.w	r2, #0
 800a9b2:	f04f 0300 	mov.w	r3, #0
 800a9b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a9ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a9be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a9c2:	4690      	mov	r8, r2
 800a9c4:	4699      	mov	r9, r3
 800a9c6:	4623      	mov	r3, r4
 800a9c8:	eb18 0303 	adds.w	r3, r8, r3
 800a9cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a9d0:	462b      	mov	r3, r5
 800a9d2:	eb49 0303 	adc.w	r3, r9, r3
 800a9d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a9da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a9e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a9ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	18db      	adds	r3, r3, r3
 800a9f2:	653b      	str	r3, [r7, #80]	; 0x50
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	eb42 0303 	adc.w	r3, r2, r3
 800a9fa:	657b      	str	r3, [r7, #84]	; 0x54
 800a9fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800aa00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aa04:	f7f6 f826 	bl	8000a54 <__aeabi_uldivmod>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	4b61      	ldr	r3, [pc, #388]	; (800ab94 <UART_SetConfig+0x2d4>)
 800aa0e:	fba3 2302 	umull	r2, r3, r3, r2
 800aa12:	095b      	lsrs	r3, r3, #5
 800aa14:	011c      	lsls	r4, r3, #4
 800aa16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800aa24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800aa28:	4642      	mov	r2, r8
 800aa2a:	464b      	mov	r3, r9
 800aa2c:	1891      	adds	r1, r2, r2
 800aa2e:	64b9      	str	r1, [r7, #72]	; 0x48
 800aa30:	415b      	adcs	r3, r3
 800aa32:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aa38:	4641      	mov	r1, r8
 800aa3a:	eb12 0a01 	adds.w	sl, r2, r1
 800aa3e:	4649      	mov	r1, r9
 800aa40:	eb43 0b01 	adc.w	fp, r3, r1
 800aa44:	f04f 0200 	mov.w	r2, #0
 800aa48:	f04f 0300 	mov.w	r3, #0
 800aa4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aa50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aa54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa58:	4692      	mov	sl, r2
 800aa5a:	469b      	mov	fp, r3
 800aa5c:	4643      	mov	r3, r8
 800aa5e:	eb1a 0303 	adds.w	r3, sl, r3
 800aa62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa66:	464b      	mov	r3, r9
 800aa68:	eb4b 0303 	adc.w	r3, fp, r3
 800aa6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aa70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800aa80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aa84:	460b      	mov	r3, r1
 800aa86:	18db      	adds	r3, r3, r3
 800aa88:	643b      	str	r3, [r7, #64]	; 0x40
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	eb42 0303 	adc.w	r3, r2, r3
 800aa90:	647b      	str	r3, [r7, #68]	; 0x44
 800aa92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aa96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800aa9a:	f7f5 ffdb 	bl	8000a54 <__aeabi_uldivmod>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	4b3b      	ldr	r3, [pc, #236]	; (800ab94 <UART_SetConfig+0x2d4>)
 800aaa6:	fba3 2301 	umull	r2, r3, r3, r1
 800aaaa:	095b      	lsrs	r3, r3, #5
 800aaac:	2264      	movs	r2, #100	; 0x64
 800aaae:	fb02 f303 	mul.w	r3, r2, r3
 800aab2:	1acb      	subs	r3, r1, r3
 800aab4:	00db      	lsls	r3, r3, #3
 800aab6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800aaba:	4b36      	ldr	r3, [pc, #216]	; (800ab94 <UART_SetConfig+0x2d4>)
 800aabc:	fba3 2302 	umull	r2, r3, r3, r2
 800aac0:	095b      	lsrs	r3, r3, #5
 800aac2:	005b      	lsls	r3, r3, #1
 800aac4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aac8:	441c      	add	r4, r3
 800aaca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aace:	2200      	movs	r2, #0
 800aad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aad4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800aad8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800aadc:	4642      	mov	r2, r8
 800aade:	464b      	mov	r3, r9
 800aae0:	1891      	adds	r1, r2, r2
 800aae2:	63b9      	str	r1, [r7, #56]	; 0x38
 800aae4:	415b      	adcs	r3, r3
 800aae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aae8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aaec:	4641      	mov	r1, r8
 800aaee:	1851      	adds	r1, r2, r1
 800aaf0:	6339      	str	r1, [r7, #48]	; 0x30
 800aaf2:	4649      	mov	r1, r9
 800aaf4:	414b      	adcs	r3, r1
 800aaf6:	637b      	str	r3, [r7, #52]	; 0x34
 800aaf8:	f04f 0200 	mov.w	r2, #0
 800aafc:	f04f 0300 	mov.w	r3, #0
 800ab00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ab04:	4659      	mov	r1, fp
 800ab06:	00cb      	lsls	r3, r1, #3
 800ab08:	4651      	mov	r1, sl
 800ab0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab0e:	4651      	mov	r1, sl
 800ab10:	00ca      	lsls	r2, r1, #3
 800ab12:	4610      	mov	r0, r2
 800ab14:	4619      	mov	r1, r3
 800ab16:	4603      	mov	r3, r0
 800ab18:	4642      	mov	r2, r8
 800ab1a:	189b      	adds	r3, r3, r2
 800ab1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab20:	464b      	mov	r3, r9
 800ab22:	460a      	mov	r2, r1
 800ab24:	eb42 0303 	adc.w	r3, r2, r3
 800ab28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ab38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ab3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ab40:	460b      	mov	r3, r1
 800ab42:	18db      	adds	r3, r3, r3
 800ab44:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab46:	4613      	mov	r3, r2
 800ab48:	eb42 0303 	adc.w	r3, r2, r3
 800ab4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ab52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ab56:	f7f5 ff7d 	bl	8000a54 <__aeabi_uldivmod>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	4b0d      	ldr	r3, [pc, #52]	; (800ab94 <UART_SetConfig+0x2d4>)
 800ab60:	fba3 1302 	umull	r1, r3, r3, r2
 800ab64:	095b      	lsrs	r3, r3, #5
 800ab66:	2164      	movs	r1, #100	; 0x64
 800ab68:	fb01 f303 	mul.w	r3, r1, r3
 800ab6c:	1ad3      	subs	r3, r2, r3
 800ab6e:	00db      	lsls	r3, r3, #3
 800ab70:	3332      	adds	r3, #50	; 0x32
 800ab72:	4a08      	ldr	r2, [pc, #32]	; (800ab94 <UART_SetConfig+0x2d4>)
 800ab74:	fba2 2303 	umull	r2, r3, r2, r3
 800ab78:	095b      	lsrs	r3, r3, #5
 800ab7a:	f003 0207 	and.w	r2, r3, #7
 800ab7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4422      	add	r2, r4
 800ab86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ab88:	e105      	b.n	800ad96 <UART_SetConfig+0x4d6>
 800ab8a:	bf00      	nop
 800ab8c:	40011000 	.word	0x40011000
 800ab90:	40011400 	.word	0x40011400
 800ab94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aba2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aba6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800abaa:	4642      	mov	r2, r8
 800abac:	464b      	mov	r3, r9
 800abae:	1891      	adds	r1, r2, r2
 800abb0:	6239      	str	r1, [r7, #32]
 800abb2:	415b      	adcs	r3, r3
 800abb4:	627b      	str	r3, [r7, #36]	; 0x24
 800abb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800abba:	4641      	mov	r1, r8
 800abbc:	1854      	adds	r4, r2, r1
 800abbe:	4649      	mov	r1, r9
 800abc0:	eb43 0501 	adc.w	r5, r3, r1
 800abc4:	f04f 0200 	mov.w	r2, #0
 800abc8:	f04f 0300 	mov.w	r3, #0
 800abcc:	00eb      	lsls	r3, r5, #3
 800abce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800abd2:	00e2      	lsls	r2, r4, #3
 800abd4:	4614      	mov	r4, r2
 800abd6:	461d      	mov	r5, r3
 800abd8:	4643      	mov	r3, r8
 800abda:	18e3      	adds	r3, r4, r3
 800abdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800abe0:	464b      	mov	r3, r9
 800abe2:	eb45 0303 	adc.w	r3, r5, r3
 800abe6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800abea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800abf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800abfa:	f04f 0200 	mov.w	r2, #0
 800abfe:	f04f 0300 	mov.w	r3, #0
 800ac02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ac06:	4629      	mov	r1, r5
 800ac08:	008b      	lsls	r3, r1, #2
 800ac0a:	4621      	mov	r1, r4
 800ac0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac10:	4621      	mov	r1, r4
 800ac12:	008a      	lsls	r2, r1, #2
 800ac14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ac18:	f7f5 ff1c 	bl	8000a54 <__aeabi_uldivmod>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	4b60      	ldr	r3, [pc, #384]	; (800ada4 <UART_SetConfig+0x4e4>)
 800ac22:	fba3 2302 	umull	r2, r3, r3, r2
 800ac26:	095b      	lsrs	r3, r3, #5
 800ac28:	011c      	lsls	r4, r3, #4
 800ac2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ac34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ac38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ac3c:	4642      	mov	r2, r8
 800ac3e:	464b      	mov	r3, r9
 800ac40:	1891      	adds	r1, r2, r2
 800ac42:	61b9      	str	r1, [r7, #24]
 800ac44:	415b      	adcs	r3, r3
 800ac46:	61fb      	str	r3, [r7, #28]
 800ac48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac4c:	4641      	mov	r1, r8
 800ac4e:	1851      	adds	r1, r2, r1
 800ac50:	6139      	str	r1, [r7, #16]
 800ac52:	4649      	mov	r1, r9
 800ac54:	414b      	adcs	r3, r1
 800ac56:	617b      	str	r3, [r7, #20]
 800ac58:	f04f 0200 	mov.w	r2, #0
 800ac5c:	f04f 0300 	mov.w	r3, #0
 800ac60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac64:	4659      	mov	r1, fp
 800ac66:	00cb      	lsls	r3, r1, #3
 800ac68:	4651      	mov	r1, sl
 800ac6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac6e:	4651      	mov	r1, sl
 800ac70:	00ca      	lsls	r2, r1, #3
 800ac72:	4610      	mov	r0, r2
 800ac74:	4619      	mov	r1, r3
 800ac76:	4603      	mov	r3, r0
 800ac78:	4642      	mov	r2, r8
 800ac7a:	189b      	adds	r3, r3, r2
 800ac7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac80:	464b      	mov	r3, r9
 800ac82:	460a      	mov	r2, r1
 800ac84:	eb42 0303 	adc.w	r3, r2, r3
 800ac88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ac8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	67bb      	str	r3, [r7, #120]	; 0x78
 800ac96:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ac98:	f04f 0200 	mov.w	r2, #0
 800ac9c:	f04f 0300 	mov.w	r3, #0
 800aca0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800aca4:	4649      	mov	r1, r9
 800aca6:	008b      	lsls	r3, r1, #2
 800aca8:	4641      	mov	r1, r8
 800acaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800acae:	4641      	mov	r1, r8
 800acb0:	008a      	lsls	r2, r1, #2
 800acb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800acb6:	f7f5 fecd 	bl	8000a54 <__aeabi_uldivmod>
 800acba:	4602      	mov	r2, r0
 800acbc:	460b      	mov	r3, r1
 800acbe:	4b39      	ldr	r3, [pc, #228]	; (800ada4 <UART_SetConfig+0x4e4>)
 800acc0:	fba3 1302 	umull	r1, r3, r3, r2
 800acc4:	095b      	lsrs	r3, r3, #5
 800acc6:	2164      	movs	r1, #100	; 0x64
 800acc8:	fb01 f303 	mul.w	r3, r1, r3
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	011b      	lsls	r3, r3, #4
 800acd0:	3332      	adds	r3, #50	; 0x32
 800acd2:	4a34      	ldr	r2, [pc, #208]	; (800ada4 <UART_SetConfig+0x4e4>)
 800acd4:	fba2 2303 	umull	r2, r3, r2, r3
 800acd8:	095b      	lsrs	r3, r3, #5
 800acda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acde:	441c      	add	r4, r3
 800ace0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ace4:	2200      	movs	r2, #0
 800ace6:	673b      	str	r3, [r7, #112]	; 0x70
 800ace8:	677a      	str	r2, [r7, #116]	; 0x74
 800acea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800acee:	4642      	mov	r2, r8
 800acf0:	464b      	mov	r3, r9
 800acf2:	1891      	adds	r1, r2, r2
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	415b      	adcs	r3, r3
 800acf8:	60fb      	str	r3, [r7, #12]
 800acfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800acfe:	4641      	mov	r1, r8
 800ad00:	1851      	adds	r1, r2, r1
 800ad02:	6039      	str	r1, [r7, #0]
 800ad04:	4649      	mov	r1, r9
 800ad06:	414b      	adcs	r3, r1
 800ad08:	607b      	str	r3, [r7, #4]
 800ad0a:	f04f 0200 	mov.w	r2, #0
 800ad0e:	f04f 0300 	mov.w	r3, #0
 800ad12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ad16:	4659      	mov	r1, fp
 800ad18:	00cb      	lsls	r3, r1, #3
 800ad1a:	4651      	mov	r1, sl
 800ad1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad20:	4651      	mov	r1, sl
 800ad22:	00ca      	lsls	r2, r1, #3
 800ad24:	4610      	mov	r0, r2
 800ad26:	4619      	mov	r1, r3
 800ad28:	4603      	mov	r3, r0
 800ad2a:	4642      	mov	r2, r8
 800ad2c:	189b      	adds	r3, r3, r2
 800ad2e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad30:	464b      	mov	r3, r9
 800ad32:	460a      	mov	r2, r1
 800ad34:	eb42 0303 	adc.w	r3, r2, r3
 800ad38:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	663b      	str	r3, [r7, #96]	; 0x60
 800ad44:	667a      	str	r2, [r7, #100]	; 0x64
 800ad46:	f04f 0200 	mov.w	r2, #0
 800ad4a:	f04f 0300 	mov.w	r3, #0
 800ad4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ad52:	4649      	mov	r1, r9
 800ad54:	008b      	lsls	r3, r1, #2
 800ad56:	4641      	mov	r1, r8
 800ad58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad5c:	4641      	mov	r1, r8
 800ad5e:	008a      	lsls	r2, r1, #2
 800ad60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ad64:	f7f5 fe76 	bl	8000a54 <__aeabi_uldivmod>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	4b0d      	ldr	r3, [pc, #52]	; (800ada4 <UART_SetConfig+0x4e4>)
 800ad6e:	fba3 1302 	umull	r1, r3, r3, r2
 800ad72:	095b      	lsrs	r3, r3, #5
 800ad74:	2164      	movs	r1, #100	; 0x64
 800ad76:	fb01 f303 	mul.w	r3, r1, r3
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	011b      	lsls	r3, r3, #4
 800ad7e:	3332      	adds	r3, #50	; 0x32
 800ad80:	4a08      	ldr	r2, [pc, #32]	; (800ada4 <UART_SetConfig+0x4e4>)
 800ad82:	fba2 2303 	umull	r2, r3, r2, r3
 800ad86:	095b      	lsrs	r3, r3, #5
 800ad88:	f003 020f 	and.w	r2, r3, #15
 800ad8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4422      	add	r2, r4
 800ad94:	609a      	str	r2, [r3, #8]
}
 800ad96:	bf00      	nop
 800ad98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ada2:	bf00      	nop
 800ada4:	51eb851f 	.word	0x51eb851f

0800ada8 <arm_mat_trans_f32>:
 800ada8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adac:	8802      	ldrh	r2, [r0, #0]
 800adae:	884b      	ldrh	r3, [r1, #2]
 800adb0:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800adb4:	684f      	ldr	r7, [r1, #4]
 800adb6:	8840      	ldrh	r0, [r0, #2]
 800adb8:	4293      	cmp	r3, r2
 800adba:	b083      	sub	sp, #12
 800adbc:	d14c      	bne.n	800ae58 <arm_mat_trans_f32+0xb0>
 800adbe:	f8b1 e000 	ldrh.w	lr, [r1]
 800adc2:	4586      	cmp	lr, r0
 800adc4:	d148      	bne.n	800ae58 <arm_mat_trans_f32+0xb0>
 800adc6:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800adca:	009c      	lsls	r4, r3, #2
 800adcc:	f00e 0e03 	and.w	lr, lr, #3
 800add0:	fb08 f904 	mul.w	r9, r8, r4
 800add4:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800add8:	011d      	lsls	r5, r3, #4
 800adda:	00db      	lsls	r3, r3, #3
 800addc:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800ade0:	eb07 0a04 	add.w	sl, r7, r4
 800ade4:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800ade8:	9201      	str	r2, [sp, #4]
 800adea:	9300      	str	r3, [sp, #0]
 800adec:	463b      	mov	r3, r7
 800adee:	f1b8 0f00 	cmp.w	r8, #0
 800adf2:	d01d      	beq.n	800ae30 <arm_mat_trans_f32+0x88>
 800adf4:	9900      	ldr	r1, [sp, #0]
 800adf6:	f10c 0210 	add.w	r2, ip, #16
 800adfa:	4439      	add	r1, r7
 800adfc:	4640      	mov	r0, r8
 800adfe:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800ae02:	601e      	str	r6, [r3, #0]
 800ae04:	ed52 7a03 	vldr	s15, [r2, #-12]
 800ae08:	191e      	adds	r6, r3, r4
 800ae0a:	edc6 7a00 	vstr	s15, [r6]
 800ae0e:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800ae12:	600e      	str	r6, [r1, #0]
 800ae14:	ed52 7a01 	vldr	s15, [r2, #-4]
 800ae18:	190e      	adds	r6, r1, r4
 800ae1a:	3801      	subs	r0, #1
 800ae1c:	442b      	add	r3, r5
 800ae1e:	f102 0210 	add.w	r2, r2, #16
 800ae22:	edc6 7a00 	vstr	s15, [r6]
 800ae26:	4429      	add	r1, r5
 800ae28:	d1e9      	bne.n	800adfe <arm_mat_trans_f32+0x56>
 800ae2a:	44dc      	add	ip, fp
 800ae2c:	eb09 0307 	add.w	r3, r9, r7
 800ae30:	f1be 0f00 	cmp.w	lr, #0
 800ae34:	d009      	beq.n	800ae4a <arm_mat_trans_f32+0xa2>
 800ae36:	4672      	mov	r2, lr
 800ae38:	4661      	mov	r1, ip
 800ae3a:	f851 0b04 	ldr.w	r0, [r1], #4
 800ae3e:	6018      	str	r0, [r3, #0]
 800ae40:	3a01      	subs	r2, #1
 800ae42:	4423      	add	r3, r4
 800ae44:	d1f9      	bne.n	800ae3a <arm_mat_trans_f32+0x92>
 800ae46:	9b01      	ldr	r3, [sp, #4]
 800ae48:	449c      	add	ip, r3
 800ae4a:	3704      	adds	r7, #4
 800ae4c:	4557      	cmp	r7, sl
 800ae4e:	d1cd      	bne.n	800adec <arm_mat_trans_f32+0x44>
 800ae50:	2000      	movs	r0, #0
 800ae52:	b003      	add	sp, #12
 800ae54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae58:	f06f 0002 	mvn.w	r0, #2
 800ae5c:	e7f9      	b.n	800ae52 <arm_mat_trans_f32+0xaa>
 800ae5e:	bf00      	nop

0800ae60 <arm_mat_sub_f32>:
 800ae60:	b4f0      	push	{r4, r5, r6, r7}
 800ae62:	e9d1 4700 	ldrd	r4, r7, [r1]
 800ae66:	6803      	ldr	r3, [r0, #0]
 800ae68:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800ae6c:	6856      	ldr	r6, [r2, #4]
 800ae6e:	42a3      	cmp	r3, r4
 800ae70:	d15d      	bne.n	800af2e <arm_mat_sub_f32+0xce>
 800ae72:	6812      	ldr	r2, [r2, #0]
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d15a      	bne.n	800af2e <arm_mat_sub_f32+0xce>
 800ae78:	8803      	ldrh	r3, [r0, #0]
 800ae7a:	8844      	ldrh	r4, [r0, #2]
 800ae7c:	fb04 f403 	mul.w	r4, r4, r3
 800ae80:	08a5      	lsrs	r5, r4, #2
 800ae82:	d032      	beq.n	800aeea <arm_mat_sub_f32+0x8a>
 800ae84:	f10c 0110 	add.w	r1, ip, #16
 800ae88:	f107 0210 	add.w	r2, r7, #16
 800ae8c:	f106 0310 	add.w	r3, r6, #16
 800ae90:	4628      	mov	r0, r5
 800ae92:	ed12 7a04 	vldr	s14, [r2, #-16]
 800ae96:	ed51 7a04 	vldr	s15, [r1, #-16]
 800ae9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae9e:	3801      	subs	r0, #1
 800aea0:	ed43 7a04 	vstr	s15, [r3, #-16]
 800aea4:	ed12 7a03 	vldr	s14, [r2, #-12]
 800aea8:	ed51 7a03 	vldr	s15, [r1, #-12]
 800aeac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aeb0:	f101 0110 	add.w	r1, r1, #16
 800aeb4:	ed43 7a03 	vstr	s15, [r3, #-12]
 800aeb8:	ed12 7a02 	vldr	s14, [r2, #-8]
 800aebc:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800aec0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aec4:	f102 0210 	add.w	r2, r2, #16
 800aec8:	ed43 7a02 	vstr	s15, [r3, #-8]
 800aecc:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800aed0:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800aed4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aed8:	f103 0310 	add.w	r3, r3, #16
 800aedc:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800aee0:	d1d7      	bne.n	800ae92 <arm_mat_sub_f32+0x32>
 800aee2:	012b      	lsls	r3, r5, #4
 800aee4:	449c      	add	ip, r3
 800aee6:	441f      	add	r7, r3
 800aee8:	441e      	add	r6, r3
 800aeea:	f014 0403 	ands.w	r4, r4, #3
 800aeee:	d01b      	beq.n	800af28 <arm_mat_sub_f32+0xc8>
 800aef0:	eddc 7a00 	vldr	s15, [ip]
 800aef4:	ed97 7a00 	vldr	s14, [r7]
 800aef8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aefc:	3c01      	subs	r4, #1
 800aefe:	edc6 7a00 	vstr	s15, [r6]
 800af02:	d011      	beq.n	800af28 <arm_mat_sub_f32+0xc8>
 800af04:	eddc 7a01 	vldr	s15, [ip, #4]
 800af08:	ed97 7a01 	vldr	s14, [r7, #4]
 800af0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af10:	2c01      	cmp	r4, #1
 800af12:	edc6 7a01 	vstr	s15, [r6, #4]
 800af16:	d007      	beq.n	800af28 <arm_mat_sub_f32+0xc8>
 800af18:	eddc 7a02 	vldr	s15, [ip, #8]
 800af1c:	ed97 7a02 	vldr	s14, [r7, #8]
 800af20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af24:	edc6 7a02 	vstr	s15, [r6, #8]
 800af28:	2000      	movs	r0, #0
 800af2a:	bcf0      	pop	{r4, r5, r6, r7}
 800af2c:	4770      	bx	lr
 800af2e:	f06f 0002 	mvn.w	r0, #2
 800af32:	e7fa      	b.n	800af2a <arm_mat_sub_f32+0xca>

0800af34 <arm_mat_mult_f32>:
 800af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	8845      	ldrh	r5, [r0, #2]
 800af3a:	880b      	ldrh	r3, [r1, #0]
 800af3c:	8806      	ldrh	r6, [r0, #0]
 800af3e:	6847      	ldr	r7, [r0, #4]
 800af40:	6854      	ldr	r4, [r2, #4]
 800af42:	6848      	ldr	r0, [r1, #4]
 800af44:	b08b      	sub	sp, #44	; 0x2c
 800af46:	42ab      	cmp	r3, r5
 800af48:	9109      	str	r1, [sp, #36]	; 0x24
 800af4a:	9604      	str	r6, [sp, #16]
 800af4c:	8849      	ldrh	r1, [r1, #2]
 800af4e:	f040 808a 	bne.w	800b066 <arm_mat_mult_f32+0x132>
 800af52:	8815      	ldrh	r5, [r2, #0]
 800af54:	42b5      	cmp	r5, r6
 800af56:	f040 8086 	bne.w	800b066 <arm_mat_mult_f32+0x132>
 800af5a:	8852      	ldrh	r2, [r2, #2]
 800af5c:	428a      	cmp	r2, r1
 800af5e:	f040 8082 	bne.w	800b066 <arm_mat_mult_f32+0x132>
 800af62:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800af66:	1d01      	adds	r1, r0, #4
 800af68:	0116      	lsls	r6, r2, #4
 800af6a:	9108      	str	r1, [sp, #32]
 800af6c:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800af70:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800af74:	9101      	str	r1, [sp, #4]
 800af76:	fb06 f108 	mul.w	r1, r6, r8
 800af7a:	0095      	lsls	r5, r2, #2
 800af7c:	9103      	str	r1, [sp, #12]
 800af7e:	00d2      	lsls	r2, r2, #3
 800af80:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800af84:	f003 0903 	and.w	r9, r3, #3
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	f107 0b10 	add.w	fp, r7, #16
 800af8e:	eb04 0a05 	add.w	sl, r4, r5
 800af92:	9107      	str	r1, [sp, #28]
 800af94:	9202      	str	r2, [sp, #8]
 800af96:	9306      	str	r3, [sp, #24]
 800af98:	f1ab 0310 	sub.w	r3, fp, #16
 800af9c:	9305      	str	r3, [sp, #20]
 800af9e:	9b07      	ldr	r3, [sp, #28]
 800afa0:	f8dd e020 	ldr.w	lr, [sp, #32]
 800afa4:	eb03 0c0a 	add.w	ip, r3, sl
 800afa8:	eddf 7a31 	vldr	s15, [pc, #196]	; 800b070 <arm_mat_mult_f32+0x13c>
 800afac:	f1b8 0f00 	cmp.w	r8, #0
 800afb0:	d053      	beq.n	800b05a <arm_mat_mult_f32+0x126>
 800afb2:	9b02      	ldr	r3, [sp, #8]
 800afb4:	4644      	mov	r4, r8
 800afb6:	18c1      	adds	r1, r0, r3
 800afb8:	4602      	mov	r2, r0
 800afba:	465b      	mov	r3, fp
 800afbc:	ed92 6a00 	vldr	s12, [r2]
 800afc0:	ed13 7a04 	vldr	s14, [r3, #-16]
 800afc4:	ed53 4a03 	vldr	s9, [r3, #-12]
 800afc8:	ed53 6a02 	vldr	s13, [r3, #-8]
 800afcc:	ed91 5a00 	vldr	s10, [r1]
 800afd0:	ed53 5a01 	vldr	s11, [r3, #-4]
 800afd4:	1957      	adds	r7, r2, r5
 800afd6:	ee27 7a06 	vmul.f32	s14, s14, s12
 800afda:	ed97 6a00 	vldr	s12, [r7]
 800afde:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afe2:	ee26 6a24 	vmul.f32	s12, s12, s9
 800afe6:	194f      	adds	r7, r1, r5
 800afe8:	ee36 6a27 	vadd.f32	s12, s12, s15
 800afec:	ee26 7a85 	vmul.f32	s14, s13, s10
 800aff0:	edd7 7a00 	vldr	s15, [r7]
 800aff4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800aff8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800affc:	3c01      	subs	r4, #1
 800affe:	4432      	add	r2, r6
 800b000:	4431      	add	r1, r6
 800b002:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b006:	f103 0310 	add.w	r3, r3, #16
 800b00a:	d1d7      	bne.n	800afbc <arm_mat_mult_f32+0x88>
 800b00c:	9b03      	ldr	r3, [sp, #12]
 800b00e:	9a01      	ldr	r2, [sp, #4]
 800b010:	4418      	add	r0, r3
 800b012:	f1b9 0f00 	cmp.w	r9, #0
 800b016:	d00b      	beq.n	800b030 <arm_mat_mult_f32+0xfc>
 800b018:	464b      	mov	r3, r9
 800b01a:	edd0 6a00 	vldr	s13, [r0]
 800b01e:	ecb2 7a01 	vldmia	r2!, {s14}
 800b022:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b026:	3b01      	subs	r3, #1
 800b028:	4428      	add	r0, r5
 800b02a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b02e:	d1f4      	bne.n	800b01a <arm_mat_mult_f32+0xe6>
 800b030:	ecec 7a01 	vstmia	ip!, {s15}
 800b034:	45d4      	cmp	ip, sl
 800b036:	4670      	mov	r0, lr
 800b038:	f10e 0e04 	add.w	lr, lr, #4
 800b03c:	d1b4      	bne.n	800afa8 <arm_mat_mult_f32+0x74>
 800b03e:	9a01      	ldr	r2, [sp, #4]
 800b040:	9b06      	ldr	r3, [sp, #24]
 800b042:	4611      	mov	r1, r2
 800b044:	4419      	add	r1, r3
 800b046:	449b      	add	fp, r3
 800b048:	9b04      	ldr	r3, [sp, #16]
 800b04a:	9101      	str	r1, [sp, #4]
 800b04c:	3b01      	subs	r3, #1
 800b04e:	44aa      	add	sl, r5
 800b050:	9304      	str	r3, [sp, #16]
 800b052:	d004      	beq.n	800b05e <arm_mat_mult_f32+0x12a>
 800b054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b056:	6858      	ldr	r0, [r3, #4]
 800b058:	e79e      	b.n	800af98 <arm_mat_mult_f32+0x64>
 800b05a:	9a05      	ldr	r2, [sp, #20]
 800b05c:	e7d9      	b.n	800b012 <arm_mat_mult_f32+0xde>
 800b05e:	4618      	mov	r0, r3
 800b060:	b00b      	add	sp, #44	; 0x2c
 800b062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b066:	f06f 0002 	mvn.w	r0, #2
 800b06a:	b00b      	add	sp, #44	; 0x2c
 800b06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b070:	00000000 	.word	0x00000000

0800b074 <arm_mat_inverse_f32>:
 800b074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b078:	8843      	ldrh	r3, [r0, #2]
 800b07a:	8804      	ldrh	r4, [r0, #0]
 800b07c:	684e      	ldr	r6, [r1, #4]
 800b07e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800b082:	b087      	sub	sp, #28
 800b084:	429c      	cmp	r4, r3
 800b086:	9301      	str	r3, [sp, #4]
 800b088:	9603      	str	r6, [sp, #12]
 800b08a:	f040 80ea 	bne.w	800b262 <arm_mat_inverse_f32+0x1ee>
 800b08e:	880a      	ldrh	r2, [r1, #0]
 800b090:	884b      	ldrh	r3, [r1, #2]
 800b092:	4293      	cmp	r3, r2
 800b094:	f040 80e5 	bne.w	800b262 <arm_mat_inverse_f32+0x1ee>
 800b098:	429c      	cmp	r4, r3
 800b09a:	f040 80e2 	bne.w	800b262 <arm_mat_inverse_f32+0x1ee>
 800b09e:	9005      	str	r0, [sp, #20]
 800b0a0:	b30c      	cbz	r4, 800b0e6 <arm_mat_inverse_f32+0x72>
 800b0a2:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800b0a6:	1e67      	subs	r7, r4, #1
 800b0a8:	f846 bb04 	str.w	fp, [r6], #4
 800b0ac:	d01b      	beq.n	800b0e6 <arm_mat_inverse_f32+0x72>
 800b0ae:	f04f 0801 	mov.w	r8, #1
 800b0b2:	00ba      	lsls	r2, r7, #2
 800b0b4:	eb06 0a02 	add.w	sl, r6, r2
 800b0b8:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800b0bc:	4630      	mov	r0, r6
 800b0be:	2100      	movs	r1, #0
 800b0c0:	f000 f97e 	bl	800b3c0 <memset>
 800b0c4:	eb0a 0605 	add.w	r6, sl, r5
 800b0c8:	462a      	mov	r2, r5
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	4650      	mov	r0, sl
 800b0ce:	f1b8 0f00 	cmp.w	r8, #0
 800b0d2:	f000 80cb 	beq.w	800b26c <arm_mat_inverse_f32+0x1f8>
 800b0d6:	f000 f973 	bl	800b3c0 <memset>
 800b0da:	3f01      	subs	r7, #1
 800b0dc:	f108 0801 	add.w	r8, r8, #1
 800b0e0:	f846 bb04 	str.w	fp, [r6], #4
 800b0e4:	d1e5      	bne.n	800b0b2 <arm_mat_inverse_f32+0x3e>
 800b0e6:	9b01      	ldr	r3, [sp, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f000 80b5 	beq.w	800b258 <arm_mat_inverse_f32+0x1e4>
 800b0ee:	009d      	lsls	r5, r3, #2
 800b0f0:	eb09 0205 	add.w	r2, r9, r5
 800b0f4:	46cc      	mov	ip, r9
 800b0f6:	9202      	str	r2, [sp, #8]
 800b0f8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b0fc:	1d2a      	adds	r2, r5, #4
 800b0fe:	9204      	str	r2, [sp, #16]
 800b100:	462f      	mov	r7, r5
 800b102:	469e      	mov	lr, r3
 800b104:	2600      	movs	r6, #0
 800b106:	9b02      	ldr	r3, [sp, #8]
 800b108:	eddc 6a00 	vldr	s13, [ip]
 800b10c:	42b4      	cmp	r4, r6
 800b10e:	eba3 0b07 	sub.w	fp, r3, r7
 800b112:	f000 80a1 	beq.w	800b258 <arm_mat_inverse_f32+0x1e4>
 800b116:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800b27c <arm_mat_inverse_f32+0x208>
 800b11a:	4632      	mov	r2, r6
 800b11c:	4663      	mov	r3, ip
 800b11e:	e00b      	b.n	800b138 <arm_mat_inverse_f32+0xc4>
 800b120:	eef4 7a47 	vcmp.f32	s15, s14
 800b124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b128:	f102 0201 	add.w	r2, r2, #1
 800b12c:	bfc8      	it	gt
 800b12e:	eeb0 7a67 	vmovgt.f32	s14, s15
 800b132:	42a2      	cmp	r2, r4
 800b134:	442b      	add	r3, r5
 800b136:	d014      	beq.n	800b162 <arm_mat_inverse_f32+0xee>
 800b138:	edd3 7a00 	vldr	s15, [r3]
 800b13c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b144:	eeb1 6a67 	vneg.f32	s12, s15
 800b148:	dcea      	bgt.n	800b120 <arm_mat_inverse_f32+0xac>
 800b14a:	eeb4 6a47 	vcmp.f32	s12, s14
 800b14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b152:	f102 0201 	add.w	r2, r2, #1
 800b156:	bfc8      	it	gt
 800b158:	eeb0 7a46 	vmovgt.f32	s14, s12
 800b15c:	42a2      	cmp	r2, r4
 800b15e:	442b      	add	r3, r5
 800b160:	d1ea      	bne.n	800b138 <arm_mat_inverse_f32+0xc4>
 800b162:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b16a:	d075      	beq.n	800b258 <arm_mat_inverse_f32+0x1e4>
 800b16c:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b174:	d070      	beq.n	800b258 <arm_mat_inverse_f32+0x1e4>
 800b176:	4672      	mov	r2, lr
 800b178:	4663      	mov	r3, ip
 800b17a:	ed93 7a00 	vldr	s14, [r3]
 800b17e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b182:	3a01      	subs	r2, #1
 800b184:	ece3 7a01 	vstmia	r3!, {s15}
 800b188:	d1f7      	bne.n	800b17a <arm_mat_inverse_f32+0x106>
 800b18a:	9901      	ldr	r1, [sp, #4]
 800b18c:	464b      	mov	r3, r9
 800b18e:	ed93 7a00 	vldr	s14, [r3]
 800b192:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b196:	3901      	subs	r1, #1
 800b198:	ece3 7a01 	vstmia	r3!, {s15}
 800b19c:	d1f7      	bne.n	800b18e <arm_mat_inverse_f32+0x11a>
 800b19e:	9803      	ldr	r0, [sp, #12]
 800b1a0:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800b1a4:	42b1      	cmp	r1, r6
 800b1a6:	d039      	beq.n	800b21c <arm_mat_inverse_f32+0x1a8>
 800b1a8:	eddb 6a00 	vldr	s13, [fp]
 800b1ac:	465a      	mov	r2, fp
 800b1ae:	4673      	mov	r3, lr
 800b1b0:	46e2      	mov	sl, ip
 800b1b2:	ecba 7a01 	vldmia	sl!, {s14}
 800b1b6:	edd2 7a00 	vldr	s15, [r2]
 800b1ba:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b1c4:	ece2 7a01 	vstmia	r2!, {s15}
 800b1c8:	d1f3      	bne.n	800b1b2 <arm_mat_inverse_f32+0x13e>
 800b1ca:	9b01      	ldr	r3, [sp, #4]
 800b1cc:	44bb      	add	fp, r7
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	46ca      	mov	sl, r9
 800b1d2:	ecba 7a01 	vldmia	sl!, {s14}
 800b1d6:	edd2 7a00 	vldr	s15, [r2]
 800b1da:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b1e4:	ece2 7a01 	vstmia	r2!, {s15}
 800b1e8:	d1f3      	bne.n	800b1d2 <arm_mat_inverse_f32+0x15e>
 800b1ea:	4428      	add	r0, r5
 800b1ec:	3101      	adds	r1, #1
 800b1ee:	428c      	cmp	r4, r1
 800b1f0:	44c3      	add	fp, r8
 800b1f2:	d1d7      	bne.n	800b1a4 <arm_mat_inverse_f32+0x130>
 800b1f4:	9b04      	ldr	r3, [sp, #16]
 800b1f6:	f1be 0e01 	subs.w	lr, lr, #1
 800b1fa:	f106 0601 	add.w	r6, r6, #1
 800b1fe:	449c      	add	ip, r3
 800b200:	f1a7 0704 	sub.w	r7, r7, #4
 800b204:	44a9      	add	r9, r5
 800b206:	f47f af7e 	bne.w	800b106 <arm_mat_inverse_f32+0x92>
 800b20a:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b212:	d006      	beq.n	800b222 <arm_mat_inverse_f32+0x1ae>
 800b214:	2000      	movs	r0, #0
 800b216:	b007      	add	sp, #28
 800b218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21c:	44bb      	add	fp, r7
 800b21e:	4428      	add	r0, r5
 800b220:	e7e4      	b.n	800b1ec <arm_mat_inverse_f32+0x178>
 800b222:	9b05      	ldr	r3, [sp, #20]
 800b224:	9a01      	ldr	r2, [sp, #4]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	edd3 7a00 	vldr	s15, [r3]
 800b22c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b230:	fb02 f204 	mul.w	r2, r2, r4
 800b234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b238:	4614      	mov	r4, r2
 800b23a:	bf08      	it	eq
 800b23c:	3304      	addeq	r3, #4
 800b23e:	d007      	beq.n	800b250 <arm_mat_inverse_f32+0x1dc>
 800b240:	e7e8      	b.n	800b214 <arm_mat_inverse_f32+0x1a0>
 800b242:	ecf3 7a01 	vldmia	r3!, {s15}
 800b246:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b24e:	d1e1      	bne.n	800b214 <arm_mat_inverse_f32+0x1a0>
 800b250:	f10e 0e01 	add.w	lr, lr, #1
 800b254:	4574      	cmp	r4, lr
 800b256:	d1f4      	bne.n	800b242 <arm_mat_inverse_f32+0x1ce>
 800b258:	f06f 0004 	mvn.w	r0, #4
 800b25c:	b007      	add	sp, #28
 800b25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b262:	f06f 0002 	mvn.w	r0, #2
 800b266:	b007      	add	sp, #28
 800b268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b26c:	4656      	mov	r6, sl
 800b26e:	3f01      	subs	r7, #1
 800b270:	f846 bb04 	str.w	fp, [r6], #4
 800b274:	f47f af1b 	bne.w	800b0ae <arm_mat_inverse_f32+0x3a>
 800b278:	e735      	b.n	800b0e6 <arm_mat_inverse_f32+0x72>
 800b27a:	bf00      	nop
 800b27c:	00000000 	.word	0x00000000

0800b280 <arm_mat_init_f32>:
 800b280:	8001      	strh	r1, [r0, #0]
 800b282:	8042      	strh	r2, [r0, #2]
 800b284:	6043      	str	r3, [r0, #4]
 800b286:	4770      	bx	lr

0800b288 <arm_mat_add_f32>:
 800b288:	b4f0      	push	{r4, r5, r6, r7}
 800b28a:	e9d1 4700 	ldrd	r4, r7, [r1]
 800b28e:	6803      	ldr	r3, [r0, #0]
 800b290:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b294:	6856      	ldr	r6, [r2, #4]
 800b296:	42a3      	cmp	r3, r4
 800b298:	d15d      	bne.n	800b356 <arm_mat_add_f32+0xce>
 800b29a:	6812      	ldr	r2, [r2, #0]
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d15a      	bne.n	800b356 <arm_mat_add_f32+0xce>
 800b2a0:	8803      	ldrh	r3, [r0, #0]
 800b2a2:	8844      	ldrh	r4, [r0, #2]
 800b2a4:	fb04 f403 	mul.w	r4, r4, r3
 800b2a8:	08a5      	lsrs	r5, r4, #2
 800b2aa:	d032      	beq.n	800b312 <arm_mat_add_f32+0x8a>
 800b2ac:	f10c 0110 	add.w	r1, ip, #16
 800b2b0:	f107 0210 	add.w	r2, r7, #16
 800b2b4:	f106 0310 	add.w	r3, r6, #16
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	ed12 7a04 	vldr	s14, [r2, #-16]
 800b2be:	ed51 7a04 	vldr	s15, [r1, #-16]
 800b2c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2c6:	3801      	subs	r0, #1
 800b2c8:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b2cc:	ed12 7a03 	vldr	s14, [r2, #-12]
 800b2d0:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b2d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2d8:	f101 0110 	add.w	r1, r1, #16
 800b2dc:	ed43 7a03 	vstr	s15, [r3, #-12]
 800b2e0:	ed12 7a02 	vldr	s14, [r2, #-8]
 800b2e4:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800b2e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2ec:	f102 0210 	add.w	r2, r2, #16
 800b2f0:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b2f4:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800b2f8:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800b2fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b300:	f103 0310 	add.w	r3, r3, #16
 800b304:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800b308:	d1d7      	bne.n	800b2ba <arm_mat_add_f32+0x32>
 800b30a:	012b      	lsls	r3, r5, #4
 800b30c:	449c      	add	ip, r3
 800b30e:	441f      	add	r7, r3
 800b310:	441e      	add	r6, r3
 800b312:	f014 0403 	ands.w	r4, r4, #3
 800b316:	d01b      	beq.n	800b350 <arm_mat_add_f32+0xc8>
 800b318:	edd7 7a00 	vldr	s15, [r7]
 800b31c:	ed9c 7a00 	vldr	s14, [ip]
 800b320:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b324:	3c01      	subs	r4, #1
 800b326:	edc6 7a00 	vstr	s15, [r6]
 800b32a:	d011      	beq.n	800b350 <arm_mat_add_f32+0xc8>
 800b32c:	eddc 7a01 	vldr	s15, [ip, #4]
 800b330:	ed97 7a01 	vldr	s14, [r7, #4]
 800b334:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b338:	2c01      	cmp	r4, #1
 800b33a:	edc6 7a01 	vstr	s15, [r6, #4]
 800b33e:	d007      	beq.n	800b350 <arm_mat_add_f32+0xc8>
 800b340:	eddc 7a02 	vldr	s15, [ip, #8]
 800b344:	ed97 7a02 	vldr	s14, [r7, #8]
 800b348:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b34c:	edc6 7a02 	vstr	s15, [r6, #8]
 800b350:	2000      	movs	r0, #0
 800b352:	bcf0      	pop	{r4, r5, r6, r7}
 800b354:	4770      	bx	lr
 800b356:	f06f 0002 	mvn.w	r0, #2
 800b35a:	e7fa      	b.n	800b352 <arm_mat_add_f32+0xca>

0800b35c <__libc_init_array>:
 800b35c:	b570      	push	{r4, r5, r6, lr}
 800b35e:	4d0d      	ldr	r5, [pc, #52]	; (800b394 <__libc_init_array+0x38>)
 800b360:	4c0d      	ldr	r4, [pc, #52]	; (800b398 <__libc_init_array+0x3c>)
 800b362:	1b64      	subs	r4, r4, r5
 800b364:	10a4      	asrs	r4, r4, #2
 800b366:	2600      	movs	r6, #0
 800b368:	42a6      	cmp	r6, r4
 800b36a:	d109      	bne.n	800b380 <__libc_init_array+0x24>
 800b36c:	4d0b      	ldr	r5, [pc, #44]	; (800b39c <__libc_init_array+0x40>)
 800b36e:	4c0c      	ldr	r4, [pc, #48]	; (800b3a0 <__libc_init_array+0x44>)
 800b370:	f000 f82e 	bl	800b3d0 <_init>
 800b374:	1b64      	subs	r4, r4, r5
 800b376:	10a4      	asrs	r4, r4, #2
 800b378:	2600      	movs	r6, #0
 800b37a:	42a6      	cmp	r6, r4
 800b37c:	d105      	bne.n	800b38a <__libc_init_array+0x2e>
 800b37e:	bd70      	pop	{r4, r5, r6, pc}
 800b380:	f855 3b04 	ldr.w	r3, [r5], #4
 800b384:	4798      	blx	r3
 800b386:	3601      	adds	r6, #1
 800b388:	e7ee      	b.n	800b368 <__libc_init_array+0xc>
 800b38a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b38e:	4798      	blx	r3
 800b390:	3601      	adds	r6, #1
 800b392:	e7f2      	b.n	800b37a <__libc_init_array+0x1e>
 800b394:	0800b410 	.word	0x0800b410
 800b398:	0800b410 	.word	0x0800b410
 800b39c:	0800b410 	.word	0x0800b410
 800b3a0:	0800b414 	.word	0x0800b414

0800b3a4 <memcpy>:
 800b3a4:	440a      	add	r2, r1
 800b3a6:	4291      	cmp	r1, r2
 800b3a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3ac:	d100      	bne.n	800b3b0 <memcpy+0xc>
 800b3ae:	4770      	bx	lr
 800b3b0:	b510      	push	{r4, lr}
 800b3b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3ba:	4291      	cmp	r1, r2
 800b3bc:	d1f9      	bne.n	800b3b2 <memcpy+0xe>
 800b3be:	bd10      	pop	{r4, pc}

0800b3c0 <memset>:
 800b3c0:	4402      	add	r2, r0
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d100      	bne.n	800b3ca <memset+0xa>
 800b3c8:	4770      	bx	lr
 800b3ca:	f803 1b01 	strb.w	r1, [r3], #1
 800b3ce:	e7f9      	b.n	800b3c4 <memset+0x4>

0800b3d0 <_init>:
 800b3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d2:	bf00      	nop
 800b3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3d6:	bc08      	pop	{r3}
 800b3d8:	469e      	mov	lr, r3
 800b3da:	4770      	bx	lr

0800b3dc <_fini>:
 800b3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3de:	bf00      	nop
 800b3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3e2:	bc08      	pop	{r3}
 800b3e4:	469e      	mov	lr, r3
 800b3e6:	4770      	bx	lr
