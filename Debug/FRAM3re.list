
FRAM3re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c644  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800c7dc  0800c7dc  0001c7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7fc  0800c7fc  0002043c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7fc  0800c7fc  0001c7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c804  0800c804  0002043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c804  0800c804  0001c804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c808  0800c808  0001c808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000043c  20000000  0800c80c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  20000440  0800cc48  00020440  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b24  0800cc48  00020b24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a74  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003111  00000000  00000000  00037ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0003aff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  0003c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001789e  00000000  00000000  0003d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016362  00000000  00000000  000549f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093019  00000000  00000000  0006ad58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000fdd71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004994  00000000  00000000  000fde38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  001027cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000440 	.word	0x20000440
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c7c4 	.word	0x0800c7c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000444 	.word	0x20000444
 80001d4:	0800c7c4 	.word	0x0800c7c4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	f00b fc82 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	f00b fc79 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 2, 3, KalmanVar ->MatC_Data);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	2102      	movs	r1, #2
 8000d90:	f00b fc70 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3348      	adds	r3, #72	; 0x48
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2101      	movs	r1, #1
 8000da2:	f00b fc67 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f503 7047 	add.w	r0, r3, #796	; 0x31c
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	334c      	adds	r3, #76	; 0x4c
 8000db0:	2203      	movs	r2, #3
 8000db2:	2103      	movs	r1, #3
 8000db4:	f00b fc5e 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 2, 2, KalmanVar ->MatR_Data);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3370      	adds	r3, #112	; 0x70
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	f00b fc55 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3380      	adds	r3, #128	; 0x80
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	f00b fc4c 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f503 704d 	add.w	r0, r3, #820	; 0x334
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	33a4      	adds	r3, #164	; 0xa4
 8000de6:	2201      	movs	r2, #1
 8000de8:	2103      	movs	r1, #3
 8000dea:	f00b fc43 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	33b0      	adds	r3, #176	; 0xb0
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	f00b fc3a 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	33bc      	adds	r3, #188	; 0xbc
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	f00b fc31 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f503 7053 	add.w	r0, r3, #844	; 0x34c
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	33e0      	adds	r3, #224	; 0xe0
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	2103      	movs	r1, #3
 8000e20:	f00b fc28 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 2, 1, KalmanVar ->MatY_Data);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f503 7055 	add.w	r0, r3, #852	; 0x354
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e30:	2201      	movs	r2, #1
 8000e32:	2102      	movs	r1, #2
 8000e34:	f00b fc1e 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 2, 1, KalmanVar ->MatZ_Data);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000e44:	2201      	movs	r2, #1
 8000e46:	2102      	movs	r1, #2
 8000e48:	f00b fc14 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 2, 2, KalmanVar ->MatS_Data);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8000e58:	2202      	movs	r2, #2
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	f00b fc0a 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 2, KalmanVar ->MatK_Data);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	2103      	movs	r1, #3
 8000e70:	f00b fc00 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f503 705d 	add.w	r0, r3, #884	; 0x374
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000e80:	2203      	movs	r2, #3
 8000e82:	2103      	movs	r1, #3
 8000e84:	f00b fbf6 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f503 705f 	add.w	r0, r3, #892	; 0x37c
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000e94:	2203      	movs	r2, #3
 8000e96:	2103      	movs	r1, #3
 8000e98:	f00b fbec 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f503 7061 	add.w	r0, r3, #900	; 0x384
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	2103      	movs	r1, #3
 8000eac:	f00b fbe2 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQ), 3, 3, KalmanVar ->MatGQ_Data);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f503 7063 	add.w	r0, r3, #908	; 0x38c
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	f00b fbd8 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 2, KalmanVar ->MatCt_Data);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f503 7065 	add.w	r0, r3, #916	; 0x394
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	2103      	movs	r1, #3
 8000ed4:	f00b fbce 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f503 7069 	add.w	r0, r3, #932	; 0x3a4
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	2103      	movs	r1, #3
 8000ee8:	f00b fbc4 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 2, 2, KalmanVar ->MatSinv_Data);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8000ef8:	2202      	movs	r2, #2
 8000efa:	2102      	movs	r1, #2
 8000efc:	f00b fbba 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 2, 3, KalmanVar ->MatCPk_Data);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f503 706b 	add.w	r0, r3, #940	; 0x3ac
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	2102      	movs	r1, #2
 8000f10:	f00b fbb0 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f503 706d 	add.w	r0, r3, #948	; 0x3b4
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000f20:	2203      	movs	r2, #3
 8000f22:	2103      	movs	r1, #3
 8000f24:	f00b fba6 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f503 706f 	add.w	r0, r3, #956	; 0x3bc
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8000f34:	2203      	movs	r2, #3
 8000f36:	2103      	movs	r1, #3
 8000f38:	f00b fb9c 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 2, 1, KalmanVar ->MatCXk_Data);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	f00b fb92 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 2, 2, KalmanVar ->MatCPkCt_Data);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	2102      	movs	r1, #2
 8000f60:	f00b fb88 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 2, KalmanVar ->MatPkCt_Data);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f503 7075 	add.w	r0, r3, #980	; 0x3d4
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8000f70:	2202      	movs	r2, #2
 8000f72:	2103      	movs	r1, #3
 8000f74:	f00b fb7e 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f503 7077 	add.w	r0, r3, #988	; 0x3dc
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8000f84:	2201      	movs	r2, #1
 8000f86:	2103      	movs	r1, #3
 8000f88:	f00b fb74 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f503 7079 	add.w	r0, r3, #996	; 0x3e4
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8000f98:	2203      	movs	r2, #3
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	f00b fb6a 	bl	800c674 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f503 707b 	add.w	r0, r3, #1004	; 0x3ec
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8000fac:	2203      	movs	r2, #3
 8000fae:	2103      	movs	r1, #3
 8000fb0:	f00b fb60 	bl	800c674 <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f503 723f 	add.w	r2, r3, #764	; 0x2fc
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	f00b f8ea 	bl	800c19c <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	f00b f8e0 	bl	800c19c <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f503 7243 	add.w	r2, r3, #780	; 0x30c
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4610      	mov	r0, r2
 8000fec:	f00b f8d6 	bl	800c19c <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQ));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8001002:	461a      	mov	r2, r3
 8001004:	f00b f990 	bl	800c328 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQ), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f503 7063 	add.w	r0, r3, #908	; 0x38c
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f503 7161 	add.w	r1, r3, #900	; 0x384
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800101a:	461a      	mov	r2, r3
 800101c:	f00b f984 	bl	800c328 <arm_mat_mult_f32>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <KalmanMatrixReset>:

void KalmanMatrixReset(KalmanFilterVar *KalmanVar , float Pvar)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	ed87 0a00 	vstr	s0, [r7]
	for (int index = 0; index < 3; ++index)
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	e013      	b.n	8001062 <KalmanMatrixReset+0x3a>
	{
		KalmanVar ->MatStateLast_Data[index] = 0.0;
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	332c      	adds	r3, #44	; 0x2c
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
		KalmanVar ->MatState_Data[index] = 0.0;
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3328      	adds	r3, #40	; 0x28
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	3304      	adds	r3, #4
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
	for (int index = 0; index < 3; ++index)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3301      	adds	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2b02      	cmp	r3, #2
 8001066:	dde8      	ble.n	800103a <KalmanMatrixReset+0x12>
	}

	KalmanVar ->MatPredict_Data[0] = Pvar;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	KalmanVar ->MatPredictLast_Data[0] = Pvar;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	KalmanVar ->MatPredict_Data[1] = 0.0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	KalmanVar ->MatPredictLast_Data[1] = 0.0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	KalmanVar ->MatPredict_Data[2] = 0.0;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	KalmanVar ->MatPredictLast_Data[2] = 0.0;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	KalmanVar ->MatPredict_Data[3] = 0.0;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	KalmanVar ->MatPredictLast_Data[3] = 0.0;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	KalmanVar ->MatPredict_Data[4] = Pvar;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	KalmanVar ->MatPredictLast_Data[4] = Pvar;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	KalmanVar ->MatPredict_Data[5] = 0.0;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	KalmanVar ->MatPredictLast_Data[5] = 0.0;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

	KalmanVar ->MatPredict_Data[6] = 0.0;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	KalmanVar ->MatPredictLast_Data[6] = 0.0;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	KalmanVar ->MatPredict_Data[7] = 0.0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	KalmanVar ->MatPredictLast_Data[7] = 0.0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	KalmanVar ->MatPredict_Data[8] = Pvar;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	KalmanVar ->MatPredictLast_Data[8] = Pvar;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg,float32_t VelocityDeg)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	ed87 0a02 	vstr	s0, [r7, #8]
 8001128:	edc7 0a01 	vstr	s1, [r7, #4]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f503 714f 	add.w	r1, r3, #828	; 0x33c
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800113e:	461a      	mov	r2, r3
 8001140:	f00b f8f2 	bl	800c328 <arm_mat_mult_f32>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f503 7153 	add.w	r1, r3, #844	; 0x34c
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8001160:	461a      	mov	r2, r3
 8001162:	f00b f8e1 	bl	800c328 <arm_mat_mult_f32>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f503 706d 	add.w	r0, r3, #948	; 0x3b4
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f503 715f 	add.w	r1, r3, #892	; 0x37c
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001182:	461a      	mov	r2, r3
 8001184:	f00b f8d0 	bl	800c328 <arm_mat_mult_f32>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f503 706f 	add.w	r0, r3, #956	; 0x3bc
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80011a4:	461a      	mov	r2, r3
 80011a6:	f00b fa69 	bl	800c67c <arm_mat_add_f32>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	KalmanVar -> MatZ_Data[1] = VelocityDeg; // Sensor Input
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f503 714d 	add.w	r1, r3, #820	; 0x334
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80011d6:	461a      	mov	r2, r3
 80011d8:	f00b f8a6 	bl	800c328 <arm_mat_mult_f32>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f503 7171 	add.w	r1, r3, #964	; 0x3c4
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80011f8:	461a      	mov	r2, r3
 80011fa:	f00b f82b 	bl	800c254 <arm_mat_sub_f32>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f503 7151 	add.w	r1, r3, #836	; 0x344
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 800121a:	461a      	mov	r2, r3
 800121c:	f00b f884 	bl	800c328 <arm_mat_mult_f32>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f503 706b 	add.w	r0, r3, #940	; 0x3ac
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f503 7165 	add.w	r1, r3, #916	; 0x394
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 800123c:	461a      	mov	r2, r3
 800123e:	f00b f873 	bl	800c328 <arm_mat_mult_f32>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f503 7149 	add.w	r1, r3, #804	; 0x324
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800125e:	461a      	mov	r2, r3
 8001260:	f00b fa0c 	bl	800c67c <arm_mat_add_f32>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f503 7259 	add.w	r2, r3, #868	; 0x364
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 800127a:	4619      	mov	r1, r3
 800127c:	4610      	mov	r0, r2
 800127e:	f00b f8f3 	bl	800c468 <arm_mat_inverse_f32>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f503 7165 	add.w	r1, r3, #916	; 0x394
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 800129e:	461a      	mov	r2, r3
 80012a0:	f00b f842 	bl	800c328 <arm_mat_mult_f32>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f503 7075 	add.w	r0, r3, #980	; 0x3d4
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f503 7167 	add.w	r1, r3, #924	; 0x39c
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80012c0:	461a      	mov	r2, r3
 80012c2:	f00b f831 	bl	800c328 <arm_mat_mult_f32>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f503 7155 	add.w	r1, r3, #852	; 0x354
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80012e2:	461a      	mov	r2, r3
 80012e4:	f00b f820 	bl	800c328 <arm_mat_mult_f32>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f503 7077 	add.w	r0, r3, #988	; 0x3dc
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f503 714d 	add.w	r1, r3, #820	; 0x334
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8001304:	461a      	mov	r2, r3
 8001306:	f00b f9b9 	bl	800c67c <arm_mat_add_f32>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f503 7143 	add.w	r1, r3, #780	; 0x30c
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8001326:	461a      	mov	r2, r3
 8001328:	f00a fffe 	bl	800c328 <arm_mat_mult_f32>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f503 705d 	add.w	r0, r3, #884	; 0x374
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f503 7179 	add.w	r1, r3, #996	; 0x3e4
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8001348:	461a      	mov	r2, r3
 800134a:	f00a ff83 	bl	800c254 <arm_mat_sub_f32>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f503 707b 	add.w	r0, r3, #1004	; 0x3ec
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f503 7151 	add.w	r1, r3, #836	; 0x344
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800136a:	461a      	mov	r2, r3
 800136c:	f00a ffdc 	bl	800c328 <arm_mat_mult_f32>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <PIDAController_Init>:

#define PID_LIM_MIN_INT -10000.0f
#define PID_LIM_MAX_INT  10000.0f

void PIDAController_Init(PIDAController *pid)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	pid->Last1Error = 0.0f;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
	pid->Last2Error = 0.0f;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	625a      	str	r2, [r3, #36]	; 0x24

	pid->differentiatorOutput = 0.0f;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
	pid->integratorOutput = 0.0f;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
	pid->proportionalOutput = 0.0f;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	61da      	str	r2, [r3, #28]

	pid->ControllerOut = 0.0f;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
	pid->ControllerLastOut = 0.0f;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c

	pid->OutputMax = PID_LIM_MAX_INT;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <PIDAController_Init+0x58>)
 80013c8:	611a      	str	r2, [r3, #16]
	pid->OutputMin = PID_LIM_MIN_INT;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <PIDAController_Init+0x5c>)
 80013ce:	60da      	str	r2, [r3, #12]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	461c4000 	.word	0x461c4000
 80013e0:	c61c4000 	.word	0xc61c4000

080013e4 <PIDAPositonController_Update>:

float PIDAPositonController_Update(PIDAController *pid,TrajectoryG *traject, float setpoint, float measurement,float VfromTraject,float VMCal)
{
 80013e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013e8:	ed2d 8b02 	vpush	{d8}
 80013ec:	b088      	sub	sp, #32
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6178      	str	r0, [r7, #20]
 80013f2:	6139      	str	r1, [r7, #16]
 80013f4:	ed87 0a03 	vstr	s0, [r7, #12]
 80013f8:	edc7 0a02 	vstr	s1, [r7, #8]
 80013fc:	ed87 1a01 	vstr	s2, [r7, #4]
 8001400:	edc7 1a00 	vstr	s3, [r7]
    float error = setpoint - measurement;
 8001404:	ed97 7a03 	vldr	s14, [r7, #12]
 8001408:	edd7 7a02 	vldr	s15, [r7, #8]
 800140c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001410:	edc7 7a07 	vstr	s15, [r7, #28]
    float errorDZ = error;
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	61bb      	str	r3, [r7, #24]

	if(traject ->TrajectoryMode == 0) // S-curve
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800141e:	2b00      	cmp	r3, #0
 8001420:	d16d      	bne.n	80014fe <PIDAPositonController_Update+0x11a>
	{
	    if(AbsVal(VfromTraject) < AbsVal(VMCal) && traject->TrajectoryFlag == 0)
 8001422:	ed97 0a01 	vldr	s0, [r7, #4]
 8001426:	f000 fad5 	bl	80019d4 <AbsVal>
 800142a:	eeb0 8a40 	vmov.f32	s16, s0
 800142e:	ed97 0a00 	vldr	s0, [r7]
 8001432:	f000 facf 	bl	80019d4 <AbsVal>
 8001436:	eef0 7a40 	vmov.f32	s15, s0
 800143a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800143e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001442:	d513      	bpl.n	800146c <PIDAPositonController_Update+0x88>
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	edd3 7a86 	vldr	s15, [r3, #536]	; 0x218
 800144a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	d10b      	bne.n	800146c <PIDAPositonController_Update+0x88>
	    {
	    	pid->Kp  = 10.0;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	4a83      	ldr	r2, [pc, #524]	; (8001664 <PIDAPositonController_Update+0x280>)
 8001458:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 0.0;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 0.0;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	e058      	b.n	800151e <PIDAPositonController_Update+0x13a>
	    }
	    else if (AbsVal(VfromTraject) == AbsVal(VMCal))
 800146c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001470:	f000 fab0 	bl	80019d4 <AbsVal>
 8001474:	eeb0 8a40 	vmov.f32	s16, s0
 8001478:	ed97 0a00 	vldr	s0, [r7]
 800147c:	f000 faaa 	bl	80019d4 <AbsVal>
 8001480:	eef0 7a40 	vmov.f32	s15, s0
 8001484:	eeb4 8a67 	vcmp.f32	s16, s15
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	d110      	bne.n	80014b0 <PIDAPositonController_Update+0xcc>
	    {
	    	pid->Kp  = 6.0;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	4a75      	ldr	r2, [pc, #468]	; (8001668 <PIDAPositonController_Update+0x284>)
 8001492:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 0.0;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 0.0;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
	    	traject->TrajectoryFlag = 1;
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 80014ae:	e036      	b.n	800151e <PIDAPositonController_Update+0x13a>
	    }
	    else if (AbsVal(VfromTraject) == AbsVal(VMCal) && traject->TrajectoryFlag == 1)
 80014b0:	ed97 0a01 	vldr	s0, [r7, #4]
 80014b4:	f000 fa8e 	bl	80019d4 <AbsVal>
 80014b8:	eeb0 8a40 	vmov.f32	s16, s0
 80014bc:	ed97 0a00 	vldr	s0, [r7]
 80014c0:	f000 fa88 	bl	80019d4 <AbsVal>
 80014c4:	eef0 7a40 	vmov.f32	s15, s0
 80014c8:	eeb4 8a67 	vcmp.f32	s16, s15
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	d125      	bne.n	800151e <PIDAPositonController_Update+0x13a>
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	edd3 7a86 	vldr	s15, [r3, #536]	; 0x218
 80014d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014dc:	eef4 7a47 	vcmp.f32	s15, s14
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	d11b      	bne.n	800151e <PIDAPositonController_Update+0x13a>
	    {
	    	pid->Kp  = 6.0;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	4a5f      	ldr	r2, [pc, #380]	; (8001668 <PIDAPositonController_Update+0x284>)
 80014ea:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 0.0;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 0.0;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	e00f      	b.n	800151e <PIDAPositonController_Update+0x13a>
	    }
	}
	else if(traject ->TrajectoryMode == 1) //Quintic
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8001504:	2b01      	cmp	r3, #1
 8001506:	d10a      	bne.n	800151e <PIDAPositonController_Update+0x13a>
	{
			pid->Kp  = 6.0;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	4a57      	ldr	r2, [pc, #348]	; (8001668 <PIDAPositonController_Update+0x284>)
 800150c:	601a      	str	r2, [r3, #0]
			pid->Ki  = 0.0;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
			pid->Kd  = 0.0;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
	}
	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	ed93 7a00 	vldr	s14, [r3]
 8001524:	edd7 7a06 	vldr	s15, [r7, #24]
 8001528:	ee27 7a27 	vmul.f32	s14, s14, s15
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	edd3 6a00 	vldr	s13, [r3]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	edd3 7a08 	vldr	s15, [r3, #32]
 8001538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800153c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	ed93 7a01 	vldr	s14, [r3, #4]
 800154c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ff9e 	bl	80004a0 <__aeabi_f2d>
 8001564:	4604      	mov	r4, r0
 8001566:	460d      	mov	r5, r1
 8001568:	69b8      	ldr	r0, [r7, #24]
 800156a:	f7fe ff99 	bl	80004a0 <__aeabi_f2d>
 800156e:	4680      	mov	r8, r0
 8001570:	4689      	mov	r9, r1
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ff92 	bl	80004a0 <__aeabi_f2d>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	f7fe fe30 	bl	80001e4 <__adddf3>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4640      	mov	r0, r8
 800158a:	4649      	mov	r1, r9
 800158c:	f7fe fe28 	bl	80001e0 <__aeabi_dsub>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4690      	mov	r8, r2
 8001596:	4699      	mov	r9, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ff7f 	bl	80004a0 <__aeabi_f2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4640      	mov	r0, r8
 80015a8:	4649      	mov	r1, r9
 80015aa:	f7fe fe1b 	bl	80001e4 <__adddf3>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f7fe ffcb 	bl	8000550 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff f9f7 	bl	80009b4 <__aeabi_d2f>
 80015c6:	4602      	mov	r2, r0
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	ed93 7a07 	vldr	s14, [r3, #28]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80015d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	edd3 7a06 	vldr	s15, [r3, #24]
 80015e2:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80015ec:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001602:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160a:	dd04      	ble.n	8001616 <PIDAPositonController_Update+0x232>

    	pid->ControllerOut = pid->OutputMax;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
 8001614:	e00e      	b.n	8001634 <PIDAPositonController_Update+0x250>

    } else if (pid->ControllerOut < pid->OutputMin) {
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001622:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	d503      	bpl.n	8001634 <PIDAPositonController_Update+0x250>

    	pid->ControllerOut = pid->OutputMin;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	6a1a      	ldr	r2, [r3, #32]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	ee07 3a90 	vmov	s15, r3
}
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	ecbd 8b02 	vpop	{d8}
 800165e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001662:	bf00      	nop
 8001664:	41200000 	.word	0x41200000
 8001668:	40c00000 	.word	0x40c00000

0800166c <PIDAVelocityController_Update>:



float PIDAVelocityController_Update(PIDAController *pid,TrajectoryG *traject, float setpoint, float measurement,float VfromTraject,float VMCal){
 800166c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001670:	ed2d 8b02 	vpush	{d8}
 8001674:	b088      	sub	sp, #32
 8001676:	af00      	add	r7, sp, #0
 8001678:	6178      	str	r0, [r7, #20]
 800167a:	6139      	str	r1, [r7, #16]
 800167c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001680:	edc7 0a02 	vstr	s1, [r7, #8]
 8001684:	ed87 1a01 	vstr	s2, [r7, #4]
 8001688:	edc7 1a00 	vstr	s3, [r7]

    float error = setpoint - measurement;
 800168c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001690:	edd7 7a02 	vldr	s15, [r7, #8]
 8001694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001698:	edc7 7a07 	vstr	s15, [r7, #28]
    float errorDZ = error;
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	61bb      	str	r3, [r7, #24]
	if(traject ->TrajectoryMode == 0) // S-curve
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d169      	bne.n	800177e <PIDAVelocityController_Update+0x112>
	{
	    if(AbsVal(VfromTraject) < AbsVal(VMCal) && traject->TrajectoryFlag == 0) // 10 deg/s
 80016aa:	ed97 0a01 	vldr	s0, [r7, #4]
 80016ae:	f000 f991 	bl	80019d4 <AbsVal>
 80016b2:	eeb0 8a40 	vmov.f32	s16, s0
 80016b6:	ed97 0a00 	vldr	s0, [r7]
 80016ba:	f000 f98b 	bl	80019d4 <AbsVal>
 80016be:	eef0 7a40 	vmov.f32	s15, s0
 80016c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80016c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ca:	d511      	bpl.n	80016f0 <PIDAVelocityController_Update+0x84>
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	edd3 7a86 	vldr	s15, [r3, #536]	; 0x218
 80016d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016da:	d109      	bne.n	80016f0 <PIDAVelocityController_Update+0x84>
	    {
	    	pid->Kp  = 20.0;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	4a80      	ldr	r2, [pc, #512]	; (80018e0 <PIDAVelocityController_Update+0x274>)
 80016e0:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 1.6;
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	4a7f      	ldr	r2, [pc, #508]	; (80018e4 <PIDAVelocityController_Update+0x278>)
 80016e6:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 2.5;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	4a7f      	ldr	r2, [pc, #508]	; (80018e8 <PIDAVelocityController_Update+0x27c>)
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	e054      	b.n	800179a <PIDAVelocityController_Update+0x12e>
	    }
	    else if (AbsVal(VfromTraject) == AbsVal(VMCal))
 80016f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80016f4:	f000 f96e 	bl	80019d4 <AbsVal>
 80016f8:	eeb0 8a40 	vmov.f32	s16, s0
 80016fc:	ed97 0a00 	vldr	s0, [r7]
 8001700:	f000 f968 	bl	80019d4 <AbsVal>
 8001704:	eef0 7a40 	vmov.f32	s15, s0
 8001708:	eeb4 8a67 	vcmp.f32	s16, s15
 800170c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001710:	d10f      	bne.n	8001732 <PIDAVelocityController_Update+0xc6>
	    {
	    	pid->Kp  = 0.160041136848727;
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	4a75      	ldr	r2, [pc, #468]	; (80018ec <PIDAVelocityController_Update+0x280>)
 8001716:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 3.13946329365331;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	4a75      	ldr	r2, [pc, #468]	; (80018f0 <PIDAVelocityController_Update+0x284>)
 800171c:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 0;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
	    	traject->TrajectoryFlag = 1;
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800172c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8001730:	e033      	b.n	800179a <PIDAVelocityController_Update+0x12e>
	    }
	    else if (AbsVal(VfromTraject) == AbsVal(VMCal) && traject->TrajectoryFlag == 1)
 8001732:	ed97 0a01 	vldr	s0, [r7, #4]
 8001736:	f000 f94d 	bl	80019d4 <AbsVal>
 800173a:	eeb0 8a40 	vmov.f32	s16, s0
 800173e:	ed97 0a00 	vldr	s0, [r7]
 8001742:	f000 f947 	bl	80019d4 <AbsVal>
 8001746:	eef0 7a40 	vmov.f32	s15, s0
 800174a:	eeb4 8a67 	vcmp.f32	s16, s15
 800174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001752:	d122      	bne.n	800179a <PIDAVelocityController_Update+0x12e>
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	edd3 7a86 	vldr	s15, [r3, #536]	; 0x218
 800175a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800175e:	eef4 7a47 	vcmp.f32	s15, s14
 8001762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001766:	d118      	bne.n	800179a <PIDAVelocityController_Update+0x12e>
	    {
	    	pid->Kp  = 0.27;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	4a62      	ldr	r2, [pc, #392]	; (80018f4 <PIDAVelocityController_Update+0x288>)
 800176c:	601a      	str	r2, [r3, #0]
	    	pid->Ki  = 2.2;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	4a61      	ldr	r2, [pc, #388]	; (80018f8 <PIDAVelocityController_Update+0x28c>)
 8001772:	605a      	str	r2, [r3, #4]
	    	pid->Kd  = 0;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	e00d      	b.n	800179a <PIDAVelocityController_Update+0x12e>
	    }
	}
	else if(traject ->TrajectoryMode == 1) //Quintic
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8001784:	2b01      	cmp	r3, #1
 8001786:	d108      	bne.n	800179a <PIDAVelocityController_Update+0x12e>
	{
			pid->Kp  = 0.27;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	4a5a      	ldr	r2, [pc, #360]	; (80018f4 <PIDAVelocityController_Update+0x288>)
 800178c:	601a      	str	r2, [r3, #0]
			pid->Ki  = 2.2;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	4a59      	ldr	r2, [pc, #356]	; (80018f8 <PIDAVelocityController_Update+0x28c>)
 8001792:	605a      	str	r2, [r3, #4]
			pid->Kd  = 0.0095;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	4a59      	ldr	r2, [pc, #356]	; (80018fc <PIDAVelocityController_Update+0x290>)
 8001798:	609a      	str	r2, [r3, #8]
	}
	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	ed93 7a00 	vldr	s14, [r3]
 80017a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80017a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	edd3 6a00 	vldr	s13, [r3]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	edd3 7a08 	vldr	s15, [r3, #32]
 80017b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80017c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80017cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fe60 	bl	80004a0 <__aeabi_f2d>
 80017e0:	4604      	mov	r4, r0
 80017e2:	460d      	mov	r5, r1
 80017e4:	69b8      	ldr	r0, [r7, #24]
 80017e6:	f7fe fe5b 	bl	80004a0 <__aeabi_f2d>
 80017ea:	4680      	mov	r8, r0
 80017ec:	4689      	mov	r9, r1
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fe54 	bl	80004a0 <__aeabi_f2d>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	f7fe fcf2 	bl	80001e4 <__adddf3>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4640      	mov	r0, r8
 8001806:	4649      	mov	r1, r9
 8001808:	f7fe fcea 	bl	80001e0 <__aeabi_dsub>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4690      	mov	r8, r2
 8001812:	4699      	mov	r9, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe41 	bl	80004a0 <__aeabi_f2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4640      	mov	r0, r8
 8001824:	4649      	mov	r1, r9
 8001826:	f7fe fcdd 	bl	80001e4 <__adddf3>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4620      	mov	r0, r4
 8001830:	4629      	mov	r1, r5
 8001832:	f7fe fe8d 	bl	8000550 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff f8b9 	bl	80009b4 <__aeabi_d2f>
 8001842:	4602      	mov	r2, r0
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	ed93 7a07 	vldr	s14, [r3, #28]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	edd3 7a05 	vldr	s15, [r3, #20]
 8001854:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	edd3 7a06 	vldr	s15, [r3, #24]
 800185e:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	edd3 7a04 	vldr	s15, [r3, #16]
 800187e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001886:	dd04      	ble.n	8001892 <PIDAVelocityController_Update+0x226>

    	pid->ControllerOut = pid->OutputMax;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	629a      	str	r2, [r3, #40]	; 0x28
 8001890:	e00e      	b.n	80018b0 <PIDAVelocityController_Update+0x244>

    } else if (pid->ControllerOut < pid->OutputMin) {
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	edd3 7a03 	vldr	s15, [r3, #12]
 800189e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a6:	d503      	bpl.n	80018b0 <PIDAVelocityController_Update+0x244>

    	pid->ControllerOut = pid->OutputMin;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	6a1a      	ldr	r2, [r3, #32]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ca:	ee07 3a90 	vmov	s15, r3
}
 80018ce:	eeb0 0a67 	vmov.f32	s0, s15
 80018d2:	3720      	adds	r7, #32
 80018d4:	46bd      	mov	sp, r7
 80018d6:	ecbd 8b02 	vpop	{d8}
 80018da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018de:	bf00      	nop
 80018e0:	41a00000 	.word	0x41a00000
 80018e4:	3fcccccd 	.word	0x3fcccccd
 80018e8:	40200000 	.word	0x40200000
 80018ec:	3e23e1d3 	.word	0x3e23e1d3
 80018f0:	4048ecf7 	.word	0x4048ecf7
 80018f4:	3e8a3d71 	.word	0x3e8a3d71
 80018f8:	400ccccd 	.word	0x400ccccd
 80018fc:	3c1ba5e3 	.word	0x3c1ba5e3

08001900 <Robotinit>:


#include "Trajectory.h"

void Robotinit(RobotManagement *Robot)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	  Robot -> Position = 0.0;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
	  Robot -> Velocity = 0.0;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	605a      	str	r2, [r3, #4]
	  Robot -> CurrentStation = 0;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	811a      	strh	r2, [r3, #8]
	  Robot -> GoalPositon = 0.0;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
	  Robot -> HomePositon = 0.0;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
	  Robot -> QX = 0.0;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
	  Robot -> QV = 0.0;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
	  Robot -> QVMax = 0.0;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	621a      	str	r2, [r3, #32]

	  Robot -> flagSethome = 0;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  Robot -> flagStartTime = 0;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  Robot -> RunningFlag = 0;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	  Robot -> MotorIsOn = 0;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <TrajectorInit>:

void TrajectorInit(TrajectoryG *traject)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
	arm_mat_init_f32(&(traject ->MatTime), 6, 6, traject ->MatTime_Data);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f503 7007 	add.w	r0, r3, #540	; 0x21c
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2206      	movs	r2, #6
 8001984:	2106      	movs	r1, #6
 8001986:	f00a fe75 	bl	800c674 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatTimeINV), 6, 6, traject ->MatTimeINV_Data);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f503 7009 	add.w	r0, r3, #548	; 0x224
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3390      	adds	r3, #144	; 0x90
 8001994:	2206      	movs	r2, #6
 8001996:	2106      	movs	r1, #6
 8001998:	f00a fe6c 	bl	800c674 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatCondition), 6, 1, traject ->MatCondition_Data);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f503 700b 	add.w	r0, r3, #556	; 0x22c
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80019a8:	2201      	movs	r2, #1
 80019aa:	2106      	movs	r1, #6
 80019ac:	f00a fe62 	bl	800c674 <arm_mat_init_f32>
	arm_mat_init_f32(&(traject ->MatA), 6, 1, traject ->MatTA_Data);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f503 700d 	add.w	r0, r3, #564	; 0x234
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80019bc:	2201      	movs	r2, #1
 80019be:	2106      	movs	r1, #6
 80019c0:	f00a fe58 	bl	800c674 <arm_mat_init_f32>
	traject -> TrajectoryMode = 0;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <AbsVal>:
{
	Robot -> HomePositon = homePoint;
}

float AbsVal(float number)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 80019de:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	d50e      	bpl.n	8001a0a <AbsVal+0x36>
  {
    return number*-1.0;
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7fe fd57 	bl	80004a0 <__aeabi_f2d>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4610      	mov	r0, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	f7fe ffdb 	bl	80009b4 <__aeabi_d2f>
 80019fe:	4603      	mov	r3, r0
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eef1 7a67 	vneg.f32	s15, s15
 8001a08:	e001      	b.n	8001a0e <AbsVal+0x3a>
  }
  else
  {
    return number;
 8001a0a:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 8001a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal, float Veloinput){
 8001a18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a1c:	b088      	sub	sp, #32
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a26:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a2a:	ed87 1a00 	vstr	s2, [r7]

	traject -> Qin = Qinitial;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	traject -> Qfinal = Qfinal;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	// Set initial = 0;
	traject -> QRelative = traject -> Qfinal - traject -> Qin;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	ed93 7a7c 	vldr	s14, [r3, #496]	; 0x1f0
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	edd3 7a7a 	vldr	s15, [r3, #488]	; 0x1e8
 8001a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	edc3 7a7b 	vstr	s15, [r3, #492]	; 0x1ec
	// Set Vmax Amax Jmax
	traject -> Vmax = 0.0;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	traject -> Amax = 21.77;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4a20      	ldr	r2, [pc, #128]	; (8001ae4 <CoefficientAndTimeCalculation+0xcc>)
 8001a62:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	traject -> Jmax = 114.59 ;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4a1f      	ldr	r2, [pc, #124]	; (8001ae8 <CoefficientAndTimeCalculation+0xd0>)
 8001a6a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	float gain = 0.0;
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
	if(traject -> QRelative < 0.0)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8001a7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a82:	d502      	bpl.n	8001a8a <CoefficientAndTimeCalculation+0x72>
	{
		gain = -1.0;
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <CoefficientAndTimeCalculation+0xd4>)
 8001a86:	61fb      	str	r3, [r7, #28]
 8001a88:	e002      	b.n	8001a90 <CoefficientAndTimeCalculation+0x78>
	}
	else
	{
		gain = 1.0;
 8001a8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a8e:	61fb      	str	r3, [r7, #28]
	}
	// Find Speed limit
	float DistanceABS = AbsVal(traject -> QRelative);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	edd3 7a7b 	vldr	s15, [r3, #492]	; 0x1ec
 8001a96:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9a:	f7ff ff9b 	bl	80019d4 <AbsVal>
 8001a9e:	ed87 0a06 	vstr	s0, [r7, #24]
	// Check Trajectory mode
	if(DistanceABS <= 1.0)
 8001aa2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab2:	d804      	bhi.n	8001abe <CoefficientAndTimeCalculation+0xa6>
	{
		traject -> TrajectoryMode = 1;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
 8001abc:	e003      	b.n	8001ac6 <CoefficientAndTimeCalculation+0xae>
	}
	else
	{
		traject -> TrajectoryMode = 0;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	}

	if(DistanceABS >= 130)
 8001ac6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aca:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001af0 <CoefficientAndTimeCalculation+0xd8>
 8001ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	db0f      	blt.n	8001af8 <CoefficientAndTimeCalculation+0xe0>
	{
//		traject -> Vmax = 60;
		traject -> Vmax = 51;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4a06      	ldr	r2, [pc, #24]	; (8001af4 <CoefficientAndTimeCalculation+0xdc>)
 8001adc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8001ae0:	e07b      	b.n	8001bda <CoefficientAndTimeCalculation+0x1c2>
 8001ae2:	bf00      	nop
 8001ae4:	41ae28f6 	.word	0x41ae28f6
 8001ae8:	42e52e14 	.word	0x42e52e14
 8001aec:	bf800000 	.word	0xbf800000
 8001af0:	43020000 	.word	0x43020000
 8001af4:	424c0000 	.word	0x424c0000
	}
	else
	{
//		traject -> Vmax = (-0.0000003*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00009*(DistanceABS*DistanceABS*DistanceABS))-(0.0115*(DistanceABS*DistanceABS))+(0.995*DistanceABS)+7.1259;
		traject -> Vmax = (-0.0000001*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00005*(DistanceABS*DistanceABS*DistanceABS))-(0.0082*(DistanceABS*DistanceABS))+(0.8134*DistanceABS)+4.0415;
 8001af8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001afc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b00:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b08:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b10:	ee17 0a90 	vmov	r0, s15
 8001b14:	f7fe fcc4 	bl	80004a0 <__aeabi_f2d>
 8001b18:	f60f 33ac 	addw	r3, pc, #2988	; 0xbac
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe fd16 	bl	8000550 <__aeabi_dmul>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4690      	mov	r8, r2
 8001b2a:	4699      	mov	r9, r3
 8001b2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b30:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b34:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3c:	ee17 0a90 	vmov	r0, s15
 8001b40:	f7fe fcae 	bl	80004a0 <__aeabi_f2d>
 8001b44:	f60f 3388 	addw	r3, pc, #2952	; 0xb88
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	f7fe fd00 	bl	8000550 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4640      	mov	r0, r8
 8001b56:	4649      	mov	r1, r9
 8001b58:	f7fe fb44 	bl	80001e4 <__adddf3>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4690      	mov	r8, r2
 8001b62:	4699      	mov	r9, r3
 8001b64:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b68:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b6c:	ee17 0a90 	vmov	r0, s15
 8001b70:	f7fe fc96 	bl	80004a0 <__aeabi_f2d>
 8001b74:	f60f 3360 	addw	r3, pc, #2912	; 0xb60
 8001b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7c:	f7fe fce8 	bl	8000550 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4640      	mov	r0, r8
 8001b86:	4649      	mov	r1, r9
 8001b88:	f7fe fb2a 	bl	80001e0 <__aeabi_dsub>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4690      	mov	r8, r2
 8001b92:	4699      	mov	r9, r3
 8001b94:	69b8      	ldr	r0, [r7, #24]
 8001b96:	f7fe fc83 	bl	80004a0 <__aeabi_f2d>
 8001b9a:	f60f 3344 	addw	r3, pc, #2884	; 0xb44
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f7fe fcd5 	bl	8000550 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4640      	mov	r0, r8
 8001bac:	4649      	mov	r1, r9
 8001bae:	f7fe fb19 	bl	80001e4 <__adddf3>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f60f 332c 	addw	r3, pc, #2860	; 0xb2c
 8001bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc2:	f7fe fb0f 	bl	80001e4 <__adddf3>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7fe fef1 	bl	80009b4 <__aeabi_d2f>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		//		traject -> Vmax = (-0.0000002*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00007*(DistanceABS*DistanceABS*DistanceABS))-(0.0092*(DistanceABS*DistanceABS))+(0.8419*DistanceABS)+4.8492;
	}

	if(traject -> Vmax > Veloinput)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8001be0:	ed97 7a00 	vldr	s14, [r7]
 8001be4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bec:	d503      	bpl.n	8001bf6 <CoefficientAndTimeCalculation+0x1de>
	{
		traject -> Vmax = Veloinput;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  traject -> Vmax *gain;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	ed93 7a56 	vldr	s14, [r3, #344]	; 0x158
 8001bfc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158
	traject -> Amax =  traject -> Amax *gain;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8001c10:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
	traject -> Jmax =  traject -> Jmax *gain;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 8001c24:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154

	if(traject ->TrajectoryMode == 0) // S-curve
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f040 8559 	bne.w	80026f0 <CoefficientAndTimeCalculation+0xcd8>
	{
		// Calculate time
			traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8001c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001c5a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001c5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	ed93 6a7b 	vldr	s12, [r3, #492]	; 0x1ec
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	edd3 6a56 	vldr	s13, [r3, #344]	; 0x158
 8001c6e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	edc3 7a79 	vstr	s15, [r3, #484]	; 0x1e4
			traject -> T[0] = (traject -> Amax/traject -> Jmax);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 8001c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
			traject -> T[1] = (traject -> Vmax/traject -> Amax);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	edd3 6a56 	vldr	s13, [r3, #344]	; 0x158
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8001c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	edc3 7a74 	vstr	s15, [r3, #464]	; 0x1d0
			traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8001cb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8001cc4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	edc3 7a75 	vstr	s15, [r3, #468]	; 0x1d4
			traject -> T[3] = traject -> T[6] - traject -> T[2];
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	ed93 7a79 	vldr	s14, [r3, #484]	; 0x1e4
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	edc3 7a76 	vstr	s15, [r3, #472]	; 0x1d8
			traject -> T[4] = traject -> T[6] - traject -> T[1];
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	ed93 7a79 	vldr	s14, [r3, #484]	; 0x1e4
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	edc3 7a77 	vstr	s15, [r3, #476]	; 0x1dc
			traject -> T[5] = traject -> T[6] - traject -> T[0];
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	ed93 7a79 	vldr	s14, [r3, #484]	; 0x1e4
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	edc3 7a78 	vstr	s15, [r3, #480]	; 0x1e0

			traject -> A[0] = traject -> Jmax;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
			traject -> A[1] = 0;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
			traject -> A[2] = -1.0 * traject -> Jmax;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fbb5 	bl	80004a0 <__aeabi_f2d>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f7fe fe39 	bl	80009b4 <__aeabi_d2f>
 8001d42:	4603      	mov	r3, r0
 8001d44:	ee07 3a90 	vmov	s15, r3
 8001d48:	eef1 7a67 	vneg.f32	s15, s15
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	edc3 7a59 	vstr	s15, [r3, #356]	; 0x164
			traject -> A[3] = 0;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
			traject -> A[4] = -1.0 * traject -> Jmax;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fb9c 	bl	80004a0 <__aeabi_f2d>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7fe fe20 	bl	80009b4 <__aeabi_d2f>
 8001d74:	4603      	mov	r3, r0
 8001d76:	ee07 3a90 	vmov	s15, r3
 8001d7a:	eef1 7a67 	vneg.f32	s15, s15
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	edc3 7a5b 	vstr	s15, [r3, #364]	; 0x16c
			traject -> A[5] = 0;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
			traject -> A[6] = traject -> Jmax;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

			traject -> B[0] = 0;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
			traject -> B[1] = traject -> Amax;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
			traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	edd3 6a55 	vldr	s13, [r3, #340]	; 0x154
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	edc3 7a60 	vstr	s15, [r3, #384]	; 0x180
			traject -> B[3] = 0;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
			traject -> B[4] = traject -> Jmax * traject -> T[3];
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8001de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	edc3 7a62 	vstr	s15, [r3, #392]	; 0x188
			traject -> B[5] = (-1.0 * traject ->Amax);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fb52 	bl	80004a0 <__aeabi_f2d>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7fe fdd6 	bl	80009b4 <__aeabi_d2f>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef1 7a67 	vneg.f32	s15, s15
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	edc3 7a63 	vstr	s15, [r3, #396]	; 0x18c
			traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fb3e 	bl	80004a0 <__aeabi_f2d>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4614      	mov	r4, r2
 8001e2a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	ed93 7a55 	vldr	s14, [r3, #340]	; 0x154
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8001e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3e:	ee17 0a90 	vmov	r0, s15
 8001e42:	f7fe fb2d 	bl	80004a0 <__aeabi_f2d>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	f7fe f9c7 	bl	80001e0 <__aeabi_dsub>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f7fe fdab 	bl	80009b4 <__aeabi_d2f>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

			traject -> C[0] = 0;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
			traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	edd3 6a73 	vldr	s13, [r3, #460]	; 0x1cc
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001e82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001e9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 8001eac:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	edd3 6a58 	vldr	s13, [r3, #352]	; 0x160
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	ed93 6a73 	vldr	s12, [r3, #460]	; 0x1cc
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001ec2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eca:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001ece:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	ed93 6a5f 	vldr	s12, [r3, #380]	; 0x17c
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8001ede:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ee6:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	edc3 7a66 	vstr	s15, [r3, #408]	; 0x198
			traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	edd3 6a74 	vldr	s13, [r3, #464]	; 0x1d0
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001f02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001f1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	edd3 7a66 	vldr	s15, [r3, #408]	; 0x198
 8001f2c:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	edd3 6a59 	vldr	s13, [r3, #356]	; 0x164
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	ed93 6a74 	vldr	s12, [r3, #464]	; 0x1d0
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001f42:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f4e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	ed93 6a60 	vldr	s12, [r3, #384]	; 0x180
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8001f5e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f66:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	edc3 7a67 	vstr	s15, [r3, #412]	; 0x19c
			traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	edd3 6a75 	vldr	s13, [r3, #468]	; 0x1d4
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 8001fac:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	edd3 6a5a 	vldr	s13, [r3, #360]	; 0x168
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	ed93 6a75 	vldr	s12, [r3, #468]	; 0x1d4
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001fc2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fca:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001fce:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	ed93 6a61 	vldr	s12, [r3, #388]	; 0x184
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8001fde:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	edc3 7a68 	vstr	s15, [r3, #416]	; 0x1a0
			traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	edd3 6a76 	vldr	s13, [r3, #472]	; 0x1d8
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002002:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800200e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 800201e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002022:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	edd3 7a68 	vldr	s15, [r3, #416]	; 0x1a0
 800202c:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	edd3 6a5b 	vldr	s13, [r3, #364]	; 0x16c
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	ed93 6a76 	vldr	s12, [r3, #472]	; 0x1d8
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002042:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002046:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800204a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800204e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	ed93 6a62 	vldr	s12, [r3, #392]	; 0x188
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 800205e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002066:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	edc3 7a69 	vstr	s15, [r3, #420]	; 0x1a4
			traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	edd3 6a77 	vldr	s13, [r3, #476]	; 0x1dc
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8002082:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800208e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 800209e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 80020ac:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	edd3 6a5c 	vldr	s13, [r3, #368]	; 0x170
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	ed93 6a77 	vldr	s12, [r3, #476]	; 0x1dc
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80020c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ca:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80020ce:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	ed93 6a63 	vldr	s12, [r3, #396]	; 0x18c
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80020de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020e6:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	edc3 7a6a 	vstr	s15, [r3, #424]	; 0x1a8
			traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	edd3 6a78 	vldr	s13, [r3, #480]	; 0x1e0
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800210e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 800211e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002122:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 800212c:	ee37 7a27 	vadd.f32	s14, s14, s15
							-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	edd3 6a5d 	vldr	s13, [r3, #372]	; 0x174
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	ed93 6a78 	vldr	s12, [r3, #480]	; 0x1e0
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002142:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800214a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800214e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	ed93 6a64 	vldr	s12, [r3, #400]	; 0x190
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 800215e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002166:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	edc3 7a6b 	vstr	s15, [r3, #428]	; 0x1ac

			traject -> D[0] = 0;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
			traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	edd3 6a73 	vldr	s13, [r3, #460]	; 0x1cc
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800218c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8002196:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800219a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80021a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	ed93 6a73 	vldr	s12, [r3, #460]	; 0x1cc
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 80021b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021c0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80021c4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	edd3 6a65 	vldr	s13, [r3, #404]	; 0x194
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 80021d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 80021e6:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	edd3 6a58 	vldr	s13, [r3, #352]	; 0x160
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	ed93 6a73 	vldr	s12, [r3, #460]	; 0x1cc
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 80021fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8002206:	ee66 7a27 	vmul.f32	s15, s12, s15
 800220a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800220e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002212:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	ed93 6a5f 	vldr	s12, [r3, #380]	; 0x17c
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	edd3 5a73 	vldr	s11, [r3, #460]	; 0x1cc
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8002228:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800222c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002230:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002238:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	ed93 6a66 	vldr	s12, [r3, #408]	; 0x198
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8002248:	ee66 7a27 	vmul.f32	s15, s12, s15
 800224c:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8002250:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4

			traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	edd3 6a74 	vldr	s13, [r3, #464]	; 0x1d0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 800226c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8002276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800227a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002282:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	ed93 6a74 	vldr	s12, [r3, #464]	; 0x1d0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8002298:	ee66 7a27 	vmul.f32	s15, s12, s15
 800229c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022a0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80022a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80022a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	edd3 6a66 	vldr	s13, [r3, #408]	; 0x198
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 80022b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 80022c6:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	edd3 6a59 	vldr	s13, [r3, #356]	; 0x164
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	ed93 6a74 	vldr	s12, [r3, #464]	; 0x1d0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 80022dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 80022e6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ee:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80022f2:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	ed93 6a60 	vldr	s12, [r3, #384]	; 0x180
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	edd3 5a74 	vldr	s11, [r3, #464]	; 0x1d0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8002308:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800230c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002310:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002314:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002318:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	ed93 6a67 	vldr	s12, [r3, #412]	; 0x19c
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8002328:	ee66 7a27 	vmul.f32	s15, s12, s15
 800232c:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8002330:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8

			traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	edd3 6a75 	vldr	s13, [r3, #468]	; 0x1d4
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 800234c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8002356:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800235a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002362:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	ed93 6a75 	vldr	s12, [r3, #468]	; 0x1d4
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8002378:	ee66 7a27 	vmul.f32	s15, s12, s15
 800237c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002380:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002384:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002388:	ee37 7a27 	vadd.f32	s14, s14, s15
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	edd3 6a67 	vldr	s13, [r3, #412]	; 0x19c
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8002398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 80023a6:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	edd3 6a5a 	vldr	s13, [r3, #360]	; 0x168
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	ed93 6a75 	vldr	s12, [r3, #468]	; 0x1d4
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80023bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80023c6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ce:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80023d2:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	ed93 6a61 	vldr	s12, [r3, #388]	; 0x184
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	edd3 5a75 	vldr	s11, [r3, #468]	; 0x1d4
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80023e8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80023ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023f0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80023f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	ed93 6a68 	vldr	s12, [r3, #416]	; 0x1a0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8002408:	ee66 7a27 	vmul.f32	s15, s12, s15
 800240c:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8002410:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	edc3 7a6f 	vstr	s15, [r3, #444]	; 0x1bc
			traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	edd3 6a76 	vldr	s13, [r3, #472]	; 0x1d8
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 800242c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002442:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	ed93 6a76 	vldr	s12, [r3, #472]	; 0x1d8
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002458:	ee66 7a27 	vmul.f32	s15, s12, s15
 800245c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002460:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002464:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002468:	ee37 7a27 	vadd.f32	s14, s14, s15
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	edd3 6a68 	vldr	s13, [r3, #416]	; 0x1a0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 8002478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800247c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	edd3 7a6f 	vldr	s15, [r3, #444]	; 0x1bc
 8002486:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	edd3 6a5b 	vldr	s13, [r3, #364]	; 0x16c
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	ed93 6a76 	vldr	s12, [r3, #472]	; 0x1d8
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 800249c:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 80024a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ae:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80024b2:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	ed93 6a62 	vldr	s12, [r3, #392]	; 0x188
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	edd3 5a76 	vldr	s11, [r3, #472]	; 0x1d8
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 80024c8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80024cc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024d0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80024d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	ed93 6a69 	vldr	s12, [r3, #420]	; 0x1a4
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	edd3 7a76 	vldr	s15, [r3, #472]	; 0x1d8
 80024e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 80024f0:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	edc3 7a70 	vstr	s15, [r3, #448]	; 0x1c0
			traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	edd3 6a77 	vldr	s13, [r3, #476]	; 0x1dc
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 800250c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8002516:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800251a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002522:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	ed93 6a77 	vldr	s12, [r3, #476]	; 0x1dc
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8002538:	ee66 7a27 	vmul.f32	s15, s12, s15
 800253c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002540:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002544:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002548:	ee37 7a27 	vadd.f32	s14, s14, s15
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	edd3 6a69 	vldr	s13, [r3, #420]	; 0x1a4
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8002558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800255c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	edd3 7a70 	vldr	s15, [r3, #448]	; 0x1c0
 8002566:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	edd3 6a5c 	vldr	s13, [r3, #368]	; 0x170
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	ed93 6a77 	vldr	s12, [r3, #476]	; 0x1dc
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 800257c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8002586:	ee66 7a27 	vmul.f32	s15, s12, s15
 800258a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800258e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002592:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	ed93 6a63 	vldr	s12, [r3, #396]	; 0x18c
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	edd3 5a77 	vldr	s11, [r3, #476]	; 0x1dc
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80025a8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80025ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025b0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80025b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	ed93 6a6a 	vldr	s12, [r3, #424]	; 0x1a8
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 80025c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80025d0:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	edc3 7a71 	vstr	s15, [r3, #452]	; 0x1c4
			traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	edd3 6a78 	vldr	s13, [r3, #480]	; 0x1e0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 80025ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 80025f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fe:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002602:	ee87 7aa6 	vdiv.f32	s14, s15, s13
							+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	ed93 6a78 	vldr	s12, [r3, #480]	; 0x1e0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002618:	ee66 7a27 	vmul.f32	s15, s12, s15
 800261c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002620:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002624:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	edd3 6a6a 	vldr	s13, [r3, #424]	; 0x1a8
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800263c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	edd3 7a71 	vldr	s15, [r3, #452]	; 0x1c4
 8002646:	ee37 7a27 	vadd.f32	s14, s14, s15
							- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	edd3 6a5d 	vldr	s13, [r3, #372]	; 0x174
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	ed93 6a78 	vldr	s12, [r3, #480]	; 0x1e0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 800265c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002666:	ee66 7a27 	vmul.f32	s15, s12, s15
 800266a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800266e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002672:	eec7 6a86 	vdiv.f32	s13, s15, s12
							+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	ed93 6a64 	vldr	s12, [r3, #400]	; 0x190
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	edd3 5a78 	vldr	s11, [r3, #480]	; 0x1e0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8002688:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800268c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002690:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002694:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002698:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	ed93 6a6b 	vldr	s12, [r3, #428]	; 0x1ac
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 80026a8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
							- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80026b0:	ee77 7a67 	vsub.f32	s15, s14, s15
			traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	edc3 7a72 	vstr	s15, [r3, #456]	; 0x1c8
			traject -> VMCal = traject -> Vmax;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		   traject -> Trajectorystatus = arm_mat_mult_f32(&(traject ->MatTimeINV), &(traject ->MatCondition), &(traject ->MatA));

		   float t = (traject -> TimeFinal)/2.0;
		   traject -> VMCal = (traject -> MatTA_Data[1]) + (2*traject -> MatTA_Data[2]*t) + (3*traject -> MatTA_Data[3]*(t*t)) + (4*traject -> MatTA_Data[4]*(t*t*t)) + (5*traject -> MatTA_Data[5]*(t*t*t*t));
	}
}
 80026c6:	e3b9      	b.n	8002e3c <CoefficientAndTimeCalculation+0x1424>
 80026c8:	9abcaf48 	.word	0x9abcaf48
 80026cc:	be7ad7f2 	.word	0xbe7ad7f2
 80026d0:	eb1c432d 	.word	0xeb1c432d
 80026d4:	3f0a36e2 	.word	0x3f0a36e2
 80026d8:	5e9e1b09 	.word	0x5e9e1b09
 80026dc:	3f80cb29 	.word	0x3f80cb29
 80026e0:	6fd21ff3 	.word	0x6fd21ff3
 80026e4:	3fea075f 	.word	0x3fea075f
 80026e8:	f9db22d1 	.word	0xf9db22d1
 80026ec:	40102a7e 	.word	0x40102a7e
	else if(traject ->TrajectoryMode == 1) //Quintic
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	f040 83a0 	bne.w	8002e3c <CoefficientAndTimeCalculation+0x1424>
		   traject -> TimeInit = 0.0;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		   traject -> TimeFinal = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
 8002712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 8002722:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	ed93 6a7b 	vldr	s12, [r3, #492]	; 0x1ec
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	edd3 6a56 	vldr	s13, [r3, #344]	; 0x158
 8002736:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800273a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	edc3 7a83 	vstr	s15, [r3, #524]	; 0x20c
		   traject -> MatTime_Data[0] = 1.0;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800274a:	601a      	str	r2, [r3, #0]
		   traject -> MatTime_Data[1] = traject -> TimeInit;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	605a      	str	r2, [r3, #4]
		   traject -> MatTime_Data[2] = traject -> TimeInit*traject -> TimeInit;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8002762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	edc3 7a02 	vstr	s15, [r3, #8]
		   traject -> MatTime_Data[3] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8002778:	ee27 7a27 	vmul.f32	s14, s14, s15
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8002782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	edc3 7a03 	vstr	s15, [r3, #12]
		   traject -> MatTime_Data[4] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8002798:	ee27 7a27 	vmul.f32	s14, s14, s15
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	edc3 7a04 	vstr	s15, [r3, #16]
		   traject -> MatTime_Data[5] = traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	ed93 7a82 	vldr	s14, [r3, #520]	; 0x208
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 80027e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	edc3 7a05 	vstr	s15, [r3, #20]
		   traject -> MatTime_Data[6] = 0.0;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	619a      	str	r2, [r3, #24]
		   traject -> MatTime_Data[7] = 1.0;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80027f8:	61da      	str	r2, [r3, #28]
		   traject -> MatTime_Data[8] = 2.0*traject -> TimeInit;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8002800:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	edc3 7a08 	vstr	s15, [r3, #32]
		   traject -> MatTime_Data[9] = 3.0*traject -> TimeInit*traject -> TimeInit;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fe45 	bl	80004a0 <__aeabi_f2d>
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	4bce      	ldr	r3, [pc, #824]	; (8002b54 <CoefficientAndTimeCalculation+0x113c>)
 800281c:	f7fd fe98 	bl	8000550 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4614      	mov	r4, r2
 8002826:	461d      	mov	r5, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd fe36 	bl	80004a0 <__aeabi_f2d>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4620      	mov	r0, r4
 800283a:	4629      	mov	r1, r5
 800283c:	f7fd fe88 	bl	8000550 <__aeabi_dmul>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	f7fe f8b4 	bl	80009b4 <__aeabi_d2f>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	625a      	str	r2, [r3, #36]	; 0x24
		   traject -> MatTime_Data[10] = 4.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe21 	bl	80004a0 <__aeabi_f2d>
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	4bbd      	ldr	r3, [pc, #756]	; (8002b58 <CoefficientAndTimeCalculation+0x1140>)
 8002864:	f7fd fe74 	bl	8000550 <__aeabi_dmul>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4614      	mov	r4, r2
 800286e:	461d      	mov	r5, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fe12 	bl	80004a0 <__aeabi_f2d>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4620      	mov	r0, r4
 8002882:	4629      	mov	r1, r5
 8002884:	f7fd fe64 	bl	8000550 <__aeabi_dmul>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4614      	mov	r4, r2
 800288e:	461d      	mov	r5, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fe02 	bl	80004a0 <__aeabi_f2d>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4620      	mov	r0, r4
 80028a2:	4629      	mov	r1, r5
 80028a4:	f7fd fe54 	bl	8000550 <__aeabi_dmul>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	f7fe f880 	bl	80009b4 <__aeabi_d2f>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	629a      	str	r2, [r3, #40]	; 0x28
		   traject -> MatTime_Data[11] = 5.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fded 	bl	80004a0 <__aeabi_f2d>
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	4ba4      	ldr	r3, [pc, #656]	; (8002b5c <CoefficientAndTimeCalculation+0x1144>)
 80028cc:	f7fd fe40 	bl	8000550 <__aeabi_dmul>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4614      	mov	r4, r2
 80028d6:	461d      	mov	r5, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fd fdde 	bl	80004a0 <__aeabi_f2d>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4620      	mov	r0, r4
 80028ea:	4629      	mov	r1, r5
 80028ec:	f7fd fe30 	bl	8000550 <__aeabi_dmul>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4614      	mov	r4, r2
 80028f6:	461d      	mov	r5, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fd fdce 	bl	80004a0 <__aeabi_f2d>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4620      	mov	r0, r4
 800290a:	4629      	mov	r1, r5
 800290c:	f7fd fe20 	bl	8000550 <__aeabi_dmul>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4614      	mov	r4, r2
 8002916:	461d      	mov	r5, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800291e:	4618      	mov	r0, r3
 8002920:	f7fd fdbe 	bl	80004a0 <__aeabi_f2d>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4620      	mov	r0, r4
 800292a:	4629      	mov	r1, r5
 800292c:	f7fd fe10 	bl	8000550 <__aeabi_dmul>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	f7fe f83c 	bl	80009b4 <__aeabi_d2f>
 800293c:	4602      	mov	r2, r0
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c
		   traject -> MatTime_Data[12] = 0.0;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	631a      	str	r2, [r3, #48]	; 0x30
		   traject -> MatTime_Data[13] = 0.0;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	635a      	str	r2, [r3, #52]	; 0x34
		   traject -> MatTime_Data[14] = 2.0;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002958:	639a      	str	r2, [r3, #56]	; 0x38
		   traject -> MatTime_Data[15] = 6.0*traject -> TimeInit;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	edd3 7a82 	vldr	s15, [r3, #520]	; 0x208
 8002960:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		   traject -> MatTime_Data[16] = 12.0*traject -> TimeInit*traject -> TimeInit;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002974:	4618      	mov	r0, r3
 8002976:	f7fd fd93 	bl	80004a0 <__aeabi_f2d>
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	4b78      	ldr	r3, [pc, #480]	; (8002b60 <CoefficientAndTimeCalculation+0x1148>)
 8002980:	f7fd fde6 	bl	8000550 <__aeabi_dmul>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4614      	mov	r4, r2
 800298a:	461d      	mov	r5, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fd84 	bl	80004a0 <__aeabi_f2d>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4620      	mov	r0, r4
 800299e:	4629      	mov	r1, r5
 80029a0:	f7fd fdd6 	bl	8000550 <__aeabi_dmul>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	f7fe f802 	bl	80009b4 <__aeabi_d2f>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40
		   traject -> MatTime_Data[17] = 20.0*traject -> TimeInit*traject -> TimeInit*traject -> TimeInit;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fd6f 	bl	80004a0 <__aeabi_f2d>
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	4b67      	ldr	r3, [pc, #412]	; (8002b64 <CoefficientAndTimeCalculation+0x114c>)
 80029c8:	f7fd fdc2 	bl	8000550 <__aeabi_dmul>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4614      	mov	r4, r2
 80029d2:	461d      	mov	r5, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fd60 	bl	80004a0 <__aeabi_f2d>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4620      	mov	r0, r4
 80029e6:	4629      	mov	r1, r5
 80029e8:	f7fd fdb2 	bl	8000550 <__aeabi_dmul>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4614      	mov	r4, r2
 80029f2:	461d      	mov	r5, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fd fd50 	bl	80004a0 <__aeabi_f2d>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4620      	mov	r0, r4
 8002a06:	4629      	mov	r1, r5
 8002a08:	f7fd fda2 	bl	8000550 <__aeabi_dmul>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	f7fd ffce 	bl	80009b4 <__aeabi_d2f>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	645a      	str	r2, [r3, #68]	; 0x44
		   traject -> MatTime_Data[18] = 1.0;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a24:	649a      	str	r2, [r3, #72]	; 0x48
		   traject -> MatTime_Data[19] = traject -> TimeFinal;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	64da      	str	r2, [r3, #76]	; 0x4c
		   traject -> MatTime_Data[20] = traject -> TimeFinal*traject -> TimeFinal;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		   traject -> MatTime_Data[21] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		   traject -> MatTime_Data[22] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		   traject -> MatTime_Data[23] = traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002a9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002aa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002ab0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		   traject -> MatTime_Data[24] = 0.0;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	661a      	str	r2, [r3, #96]	; 0x60
		   traject -> MatTime_Data[25] = 1.0;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ad2:	665a      	str	r2, [r3, #100]	; 0x64
		   traject -> MatTime_Data[26] = 2.0*traject -> TimeFinal;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002ada:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		   traject -> MatTime_Data[27] = 3.0*traject -> TimeFinal*traject -> TimeFinal;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fcd8 	bl	80004a0 <__aeabi_f2d>
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <CoefficientAndTimeCalculation+0x113c>)
 8002af6:	f7fd fd2b 	bl	8000550 <__aeabi_dmul>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4614      	mov	r4, r2
 8002b00:	461d      	mov	r5, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd fcc9 	bl	80004a0 <__aeabi_f2d>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4620      	mov	r0, r4
 8002b14:	4629      	mov	r1, r5
 8002b16:	f7fd fd1b 	bl	8000550 <__aeabi_dmul>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4610      	mov	r0, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	f7fd ff47 	bl	80009b4 <__aeabi_d2f>
 8002b26:	4602      	mov	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	66da      	str	r2, [r3, #108]	; 0x6c
		   traject -> MatTime_Data[28] = 4.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fcb4 	bl	80004a0 <__aeabi_f2d>
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <CoefficientAndTimeCalculation+0x1140>)
 8002b3e:	f7fd fd07 	bl	8000550 <__aeabi_dmul>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4614      	mov	r4, r2
 8002b48:	461d      	mov	r5, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002b50:	e00a      	b.n	8002b68 <CoefficientAndTimeCalculation+0x1150>
 8002b52:	bf00      	nop
 8002b54:	40080000 	.word	0x40080000
 8002b58:	40100000 	.word	0x40100000
 8002b5c:	40140000 	.word	0x40140000
 8002b60:	40280000 	.word	0x40280000
 8002b64:	40340000 	.word	0x40340000
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fc99 	bl	80004a0 <__aeabi_f2d>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4620      	mov	r0, r4
 8002b74:	4629      	mov	r1, r5
 8002b76:	f7fd fceb 	bl	8000550 <__aeabi_dmul>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4614      	mov	r4, r2
 8002b80:	461d      	mov	r5, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fc89 	bl	80004a0 <__aeabi_f2d>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4620      	mov	r0, r4
 8002b94:	4629      	mov	r1, r5
 8002b96:	f7fd fcdb 	bl	8000550 <__aeabi_dmul>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f7fd ff07 	bl	80009b4 <__aeabi_d2f>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	671a      	str	r2, [r3, #112]	; 0x70
		   traject -> MatTime_Data[29] = 5.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fc74 	bl	80004a0 <__aeabi_f2d>
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	4ba2      	ldr	r3, [pc, #648]	; (8002e48 <CoefficientAndTimeCalculation+0x1430>)
 8002bbe:	f7fd fcc7 	bl	8000550 <__aeabi_dmul>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4614      	mov	r4, r2
 8002bc8:	461d      	mov	r5, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fc65 	bl	80004a0 <__aeabi_f2d>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4620      	mov	r0, r4
 8002bdc:	4629      	mov	r1, r5
 8002bde:	f7fd fcb7 	bl	8000550 <__aeabi_dmul>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4614      	mov	r4, r2
 8002be8:	461d      	mov	r5, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fd fc55 	bl	80004a0 <__aeabi_f2d>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	4629      	mov	r1, r5
 8002bfe:	f7fd fca7 	bl	8000550 <__aeabi_dmul>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4614      	mov	r4, r2
 8002c08:	461d      	mov	r5, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fd fc45 	bl	80004a0 <__aeabi_f2d>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	f7fd fc97 	bl	8000550 <__aeabi_dmul>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f7fd fec3 	bl	80009b4 <__aeabi_d2f>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	675a      	str	r2, [r3, #116]	; 0x74
		   traject -> MatTime_Data[30] = 0.0;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	679a      	str	r2, [r3, #120]	; 0x78
		   traject -> MatTime_Data[31] = 0.0;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	67da      	str	r2, [r3, #124]	; 0x7c
		   traject -> MatTime_Data[32] = 2.0;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		   traject -> MatTime_Data[33] = 6.0*traject -> TimeFinal;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	edd3 7a83 	vldr	s15, [r3, #524]	; 0x20c
 8002c54:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		   traject -> MatTime_Data[34] = 12.0*traject -> TimeFinal*traject -> TimeFinal;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fc19 	bl	80004a0 <__aeabi_f2d>
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	4b76      	ldr	r3, [pc, #472]	; (8002e4c <CoefficientAndTimeCalculation+0x1434>)
 8002c74:	f7fd fc6c 	bl	8000550 <__aeabi_dmul>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4614      	mov	r4, r2
 8002c7e:	461d      	mov	r5, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc0a 	bl	80004a0 <__aeabi_f2d>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4620      	mov	r0, r4
 8002c92:	4629      	mov	r1, r5
 8002c94:	f7fd fc5c 	bl	8000550 <__aeabi_dmul>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	f7fd fe88 	bl	80009b4 <__aeabi_d2f>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		   traject -> MatTime_Data[35] = 20.0*traject -> TimeFinal*traject -> TimeFinal*traject -> TimeFinal;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fbf4 	bl	80004a0 <__aeabi_f2d>
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	4b64      	ldr	r3, [pc, #400]	; (8002e50 <CoefficientAndTimeCalculation+0x1438>)
 8002cbe:	f7fd fc47 	bl	8000550 <__aeabi_dmul>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4614      	mov	r4, r2
 8002cc8:	461d      	mov	r5, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fbe5 	bl	80004a0 <__aeabi_f2d>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4620      	mov	r0, r4
 8002cdc:	4629      	mov	r1, r5
 8002cde:	f7fd fc37 	bl	8000550 <__aeabi_dmul>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4614      	mov	r4, r2
 8002ce8:	461d      	mov	r5, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd fbd5 	bl	80004a0 <__aeabi_f2d>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	f7fd fc27 	bl	8000550 <__aeabi_dmul>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f7fd fe53 	bl	80009b4 <__aeabi_d2f>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		   traject -> MatCondition_Data[0] = traject -> Qin;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		   traject -> MatCondition_Data[1] = 0;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		   traject -> MatCondition_Data[2] = 0;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
		   traject -> MatCondition_Data[3] = traject -> Qfinal;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		   traject -> MatCondition_Data[4] = 0;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
		   traject -> MatCondition_Data[5] = 0;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		   traject -> Trajectorystatus = arm_mat_inverse_f32(&(traject ->MatTime), &(traject ->MatTimeINV));
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f503 7207 	add.w	r2, r3, #540	; 0x21c
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8002d62:	4619      	mov	r1, r3
 8002d64:	4610      	mov	r0, r2
 8002d66:	f009 fb7f 	bl	800c468 <arm_mat_inverse_f32>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
		   traject -> Trajectorystatus = arm_mat_mult_f32(&(traject ->MatTimeINV), &(traject ->MatCondition), &(traject ->MatA));
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f503 7009 	add.w	r0, r3, #548	; 0x224
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f503 710b 	add.w	r1, r3, #556	; 0x22c
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8002d86:	461a      	mov	r2, r3
 8002d88:	f009 face 	bl	800c328 <arm_mat_mult_f32>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
		   float t = (traject -> TimeFinal)/2.0;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8002d9c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002da0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002da4:	edc7 7a05 	vstr	s15, [r7, #20]
		   traject -> VMCal = (traject -> MatTA_Data[1]) + (2*traject -> MatTA_Data[2]*t) + (3*traject -> MatTA_Data[3]*(t*t)) + (4*traject -> MatTA_Data[4]*(t*t*t)) + (5*traject -> MatTA_Data[5]*(t*t*t*t));
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8002db4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002db8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8002dca:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002dce:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002dd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dd6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002dda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8002de8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002dec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002df0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002df4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8002df8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dfc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8002e0e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002e12:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002e16:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e1a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8002e1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e22:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e26:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e2a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	edc3 7a84 	vstr	s15, [r3, #528]	; 0x210
}
 8002e3c:	bf00      	nop
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e46:	bf00      	nop
 8002e48:	40140000 	.word	0x40140000
 8002e4c:	40280000 	.word	0x40280000
 8002e50:	40340000 	.word	0x40340000
 8002e54:	00000000 	.word	0x00000000

08002e58 <TrajectoryEvaluation>:

void TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime, uint64_t PredictTime){
 8002e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	e9c7 2300 	strd	r2, r3, [r7]
   // Microsec to sec
   static float t = 0;
   static float tP = 0;
   t  = (CurrentTime - StartTime)/1000000.0;
 8002e66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e6e:	ebb0 0802 	subs.w	r8, r0, r2
 8002e72:	eb61 0903 	sbc.w	r9, r1, r3
 8002e76:	4640      	mov	r0, r8
 8002e78:	4649      	mov	r1, r9
 8002e7a:	f7fd fb33 	bl	80004e4 <__aeabi_ul2d>
 8002e7e:	a3cc      	add	r3, pc, #816	; (adr r3, 80031b0 <TrajectoryEvaluation+0x358>)
 8002e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e84:	f7fd fc8e 	bl	80007a4 <__aeabi_ddiv>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4619      	mov	r1, r3
 8002e90:	f7fd fd90 	bl	80009b4 <__aeabi_d2f>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4ac8      	ldr	r2, [pc, #800]	; (80031b8 <TrajectoryEvaluation+0x360>)
 8002e98:	6013      	str	r3, [r2, #0]
   tP = (PredictTime - StartTime)/1000000.0;
 8002e9a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ea2:	1a84      	subs	r4, r0, r2
 8002ea4:	eb61 0503 	sbc.w	r5, r1, r3
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	4629      	mov	r1, r5
 8002eac:	f7fd fb1a 	bl	80004e4 <__aeabi_ul2d>
 8002eb0:	a3bf      	add	r3, pc, #764	; (adr r3, 80031b0 <TrajectoryEvaluation+0x358>)
 8002eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb6:	f7fd fc75 	bl	80007a4 <__aeabi_ddiv>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f7fd fd77 	bl	80009b4 <__aeabi_d2f>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4abc      	ldr	r2, [pc, #752]	; (80031bc <TrajectoryEvaluation+0x364>)
 8002eca:	6013      	str	r3, [r2, #0]

	if(traject ->TrajectoryMode == 0) // S-curve
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f040 8526 	bne.w	8003924 <TrajectoryEvaluation+0xacc>
	{
		if(t >= 0 && t < traject -> T[0])
 8002ed8:	4bb7      	ldr	r3, [pc, #732]	; (80031b8 <TrajectoryEvaluation+0x360>)
 8002eda:	edd3 7a00 	vldr	s15, [r3]
 8002ede:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee6:	f2c0 80aa 	blt.w	800303e <TrajectoryEvaluation+0x1e6>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	ed93 7a73 	vldr	s14, [r3, #460]	; 0x1cc
 8002ef0:	4bb1      	ldr	r3, [pc, #708]	; (80031b8 <TrajectoryEvaluation+0x360>)
 8002ef2:	edd3 7a00 	vldr	s15, [r3]
 8002ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efe:	f340 809e 	ble.w	800303e <TrajectoryEvaluation+0x1e6>
		   {
		      traject -> QJ = traject -> A[0];
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[0]*t + traject -> B[0];
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 8002f14:	4ba8      	ldr	r3, [pc, #672]	; (80031b8 <TrajectoryEvaluation+0x360>)
 8002f16:	edd3 7a00 	vldr	s15, [r3]
 8002f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 8002f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 8002f34:	4ba0      	ldr	r3, [pc, #640]	; (80031b8 <TrajectoryEvaluation+0x360>)
 8002f36:	edd3 6a00 	vldr	s13, [r3]
 8002f3a:	4b9f      	ldr	r3, [pc, #636]	; (80031b8 <TrajectoryEvaluation+0x360>)
 8002f3c:	edd3 7a00 	vldr	s15, [r3]
 8002f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f48:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002f4c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 8002f56:	4b98      	ldr	r3, [pc, #608]	; (80031b8 <TrajectoryEvaluation+0x360>)
 8002f58:	edd3 7a00 	vldr	s15, [r3]
 8002f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 8002f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[0]*(tP*tP)/2 + traject -> B[0]*tP + traject -> C[0];
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	ed93 7a57 	vldr	s14, [r3, #348]	; 0x15c
 8002f7a:	4b90      	ldr	r3, [pc, #576]	; (80031bc <TrajectoryEvaluation+0x364>)
 8002f7c:	edd3 6a00 	vldr	s13, [r3]
 8002f80:	4b8e      	ldr	r3, [pc, #568]	; (80031bc <TrajectoryEvaluation+0x364>)
 8002f82:	edd3 7a00 	vldr	s15, [r3]
 8002f86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002f92:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 8002f9c:	4b87      	ldr	r3, [pc, #540]	; (80031bc <TrajectoryEvaluation+0x364>)
 8002f9e:	edd3 7a00 	vldr	s15, [r3]
 8002fa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 8002fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	edd3 6a57 	vldr	s13, [r3, #348]	; 0x15c
 8002fc6:	4b7c      	ldr	r3, [pc, #496]	; (80031b8 <TrajectoryEvaluation+0x360>)
 8002fc8:	ed93 6a00 	vldr	s12, [r3]
 8002fcc:	4b7a      	ldr	r3, [pc, #488]	; (80031b8 <TrajectoryEvaluation+0x360>)
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002fd6:	4b78      	ldr	r3, [pc, #480]	; (80031b8 <TrajectoryEvaluation+0x360>)
 8002fd8:	edd3 7a00 	vldr	s15, [r3]
 8002fdc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002fe0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fe4:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002fe8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	edd3 6a5e 	vldr	s13, [r3, #376]	; 0x178
 8002ff6:	4b70      	ldr	r3, [pc, #448]	; (80031b8 <TrajectoryEvaluation+0x360>)
 8002ff8:	ed93 6a00 	vldr	s12, [r3]
 8002ffc:	4b6e      	ldr	r3, [pc, #440]	; (80031b8 <TrajectoryEvaluation+0x360>)
 8002ffe:	edd3 7a00 	vldr	s15, [r3]
 8003002:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003006:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800300a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800300e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003012:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	edd3 6a65 	vldr	s13, [r3, #404]	; 0x194
 800301c:	4b66      	ldr	r3, [pc, #408]	; (80031b8 <TrajectoryEvaluation+0x360>)
 800301e:	edd3 7a00 	vldr	s15, [r3]
 8003022:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003026:	ee37 7a27 	vadd.f32	s14, s14, s15
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 8003030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 800303a:	f000 be08 	b.w	8003c4e <TrajectoryEvaluation+0xdf6>
		   }
		   else if( t >= traject -> T[0] && t < traject -> T[1])
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	ed93 7a73 	vldr	s14, [r3, #460]	; 0x1cc
 8003044:	4b5c      	ldr	r3, [pc, #368]	; (80031b8 <TrajectoryEvaluation+0x360>)
 8003046:	edd3 7a00 	vldr	s15, [r3]
 800304a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800304e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003052:	f200 80b5 	bhi.w	80031c0 <TrajectoryEvaluation+0x368>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	ed93 7a74 	vldr	s14, [r3, #464]	; 0x1d0
 800305c:	4b56      	ldr	r3, [pc, #344]	; (80031b8 <TrajectoryEvaluation+0x360>)
 800305e:	edd3 7a00 	vldr	s15, [r3]
 8003062:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306a:	f340 80a9 	ble.w	80031c0 <TrajectoryEvaluation+0x368>
		   {
		      traject -> QJ = traject -> A[1];
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[1]*t + traject -> B[1];
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 8003080:	4b4d      	ldr	r3, [pc, #308]	; (80031b8 <TrajectoryEvaluation+0x360>)
 8003082:	edd3 7a00 	vldr	s15, [r3]
 8003086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8003090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 80030a0:	4b45      	ldr	r3, [pc, #276]	; (80031b8 <TrajectoryEvaluation+0x360>)
 80030a2:	edd3 6a00 	vldr	s13, [r3]
 80030a6:	4b44      	ldr	r3, [pc, #272]	; (80031b8 <TrajectoryEvaluation+0x360>)
 80030a8:	edd3 7a00 	vldr	s15, [r3]
 80030ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80030b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 80030c2:	4b3d      	ldr	r3, [pc, #244]	; (80031b8 <TrajectoryEvaluation+0x360>)
 80030c4:	edd3 7a00 	vldr	s15, [r3]
 80030c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	edd3 7a66 	vldr	s15, [r3, #408]	; 0x198
 80030d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[1]*(tP*tP)/2 + traject -> B[1]*tP + traject -> C[1];
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 80030e6:	4b35      	ldr	r3, [pc, #212]	; (80031bc <TrajectoryEvaluation+0x364>)
 80030e8:	edd3 6a00 	vldr	s13, [r3]
 80030ec:	4b33      	ldr	r3, [pc, #204]	; (80031bc <TrajectoryEvaluation+0x364>)
 80030ee:	edd3 7a00 	vldr	s15, [r3]
 80030f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80030fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 8003108:	4b2c      	ldr	r3, [pc, #176]	; (80031bc <TrajectoryEvaluation+0x364>)
 800310a:	edd3 7a00 	vldr	s15, [r3]
 800310e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003112:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	edd3 7a66 	vldr	s15, [r3, #408]	; 0x198
 800311c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	edd3 6a58 	vldr	s13, [r3, #352]	; 0x160
 8003132:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <TrajectoryEvaluation+0x360>)
 8003134:	ed93 6a00 	vldr	s12, [r3]
 8003138:	4b1f      	ldr	r3, [pc, #124]	; (80031b8 <TrajectoryEvaluation+0x360>)
 800313a:	edd3 7a00 	vldr	s15, [r3]
 800313e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003142:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <TrajectoryEvaluation+0x360>)
 8003144:	edd3 7a00 	vldr	s15, [r3]
 8003148:	ee66 7a27 	vmul.f32	s15, s12, s15
 800314c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003150:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8003154:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003158:	ee37 7a27 	vadd.f32	s14, s14, s15
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	edd3 6a5f 	vldr	s13, [r3, #380]	; 0x17c
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <TrajectoryEvaluation+0x360>)
 8003164:	ed93 6a00 	vldr	s12, [r3]
 8003168:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <TrajectoryEvaluation+0x360>)
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003172:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003176:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800317a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800317e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	edd3 6a66 	vldr	s13, [r3, #408]	; 0x198
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <TrajectoryEvaluation+0x360>)
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003192:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 800319c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 80031a6:	f000 bd52 	b.w	8003c4e <TrajectoryEvaluation+0xdf6>
 80031aa:	bf00      	nop
 80031ac:	f3af 8000 	nop.w
 80031b0:	00000000 	.word	0x00000000
 80031b4:	412e8480 	.word	0x412e8480
 80031b8:	2000045c 	.word	0x2000045c
 80031bc:	20000460 	.word	0x20000460
		   }
		   else if( t >= traject -> T[1] && t < traject -> T[2])
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	ed93 7a74 	vldr	s14, [r3, #464]	; 0x1d0
 80031c6:	4bb4      	ldr	r3, [pc, #720]	; (8003498 <TrajectoryEvaluation+0x640>)
 80031c8:	edd3 7a00 	vldr	s15, [r3]
 80031cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d4:	f200 80aa 	bhi.w	800332c <TrajectoryEvaluation+0x4d4>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	ed93 7a75 	vldr	s14, [r3, #468]	; 0x1d4
 80031de:	4bae      	ldr	r3, [pc, #696]	; (8003498 <TrajectoryEvaluation+0x640>)
 80031e0:	edd3 7a00 	vldr	s15, [r3]
 80031e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	f340 809e 	ble.w	800332c <TrajectoryEvaluation+0x4d4>
		   {
		      traject -> QJ = traject -> A[2];
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[2]*t + traject -> B[2];
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 8003202:	4ba5      	ldr	r3, [pc, #660]	; (8003498 <TrajectoryEvaluation+0x640>)
 8003204:	edd3 7a00 	vldr	s15, [r3]
 8003208:	ee27 7a27 	vmul.f32	s14, s14, s15
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	edd3 7a60 	vldr	s15, [r3, #384]	; 0x180
 8003212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 8003222:	4b9d      	ldr	r3, [pc, #628]	; (8003498 <TrajectoryEvaluation+0x640>)
 8003224:	edd3 6a00 	vldr	s13, [r3]
 8003228:	4b9b      	ldr	r3, [pc, #620]	; (8003498 <TrajectoryEvaluation+0x640>)
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003236:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800323a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 8003244:	4b94      	ldr	r3, [pc, #592]	; (8003498 <TrajectoryEvaluation+0x640>)
 8003246:	edd3 7a00 	vldr	s15, [r3]
 800324a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800324e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 8003258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[2]*(tP*tP)/2 + traject -> B[2]*tP + traject -> C[2];
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
 8003268:	4b8c      	ldr	r3, [pc, #560]	; (800349c <TrajectoryEvaluation+0x644>)
 800326a:	edd3 6a00 	vldr	s13, [r3]
 800326e:	4b8b      	ldr	r3, [pc, #556]	; (800349c <TrajectoryEvaluation+0x644>)
 8003270:	edd3 7a00 	vldr	s15, [r3]
 8003274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003280:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 800328a:	4b84      	ldr	r3, [pc, #528]	; (800349c <TrajectoryEvaluation+0x644>)
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003294:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 800329e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	edd3 6a59 	vldr	s13, [r3, #356]	; 0x164
 80032b4:	4b78      	ldr	r3, [pc, #480]	; (8003498 <TrajectoryEvaluation+0x640>)
 80032b6:	ed93 6a00 	vldr	s12, [r3]
 80032ba:	4b77      	ldr	r3, [pc, #476]	; (8003498 <TrajectoryEvaluation+0x640>)
 80032bc:	edd3 7a00 	vldr	s15, [r3]
 80032c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80032c4:	4b74      	ldr	r3, [pc, #464]	; (8003498 <TrajectoryEvaluation+0x640>)
 80032c6:	edd3 7a00 	vldr	s15, [r3]
 80032ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80032ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032d2:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80032d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	edd3 6a60 	vldr	s13, [r3, #384]	; 0x180
 80032e4:	4b6c      	ldr	r3, [pc, #432]	; (8003498 <TrajectoryEvaluation+0x640>)
 80032e6:	ed93 6a00 	vldr	s12, [r3]
 80032ea:	4b6b      	ldr	r3, [pc, #428]	; (8003498 <TrajectoryEvaluation+0x640>)
 80032ec:	edd3 7a00 	vldr	s15, [r3]
 80032f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80032f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032f8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80032fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003300:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	edd3 6a67 	vldr	s13, [r3, #412]	; 0x19c
 800330a:	4b63      	ldr	r3, [pc, #396]	; (8003498 <TrajectoryEvaluation+0x640>)
 800330c:	edd3 7a00 	vldr	s15, [r3]
 8003310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003314:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 800331e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 8003328:	f000 bc91 	b.w	8003c4e <TrajectoryEvaluation+0xdf6>
		   }
		   else if( t >= traject -> T[2] && t < traject -> T[3])
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	ed93 7a75 	vldr	s14, [r3, #468]	; 0x1d4
 8003332:	4b59      	ldr	r3, [pc, #356]	; (8003498 <TrajectoryEvaluation+0x640>)
 8003334:	edd3 7a00 	vldr	s15, [r3]
 8003338:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800333c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003340:	f200 80ae 	bhi.w	80034a0 <TrajectoryEvaluation+0x648>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	ed93 7a76 	vldr	s14, [r3, #472]	; 0x1d8
 800334a:	4b53      	ldr	r3, [pc, #332]	; (8003498 <TrajectoryEvaluation+0x640>)
 800334c:	edd3 7a00 	vldr	s15, [r3]
 8003350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003358:	f340 80a2 	ble.w	80034a0 <TrajectoryEvaluation+0x648>
		   {
		      traject -> QJ = traject -> A[3];
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[3]*t + traject -> B[3];
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 800336e:	4b4a      	ldr	r3, [pc, #296]	; (8003498 <TrajectoryEvaluation+0x640>)
 8003370:	edd3 7a00 	vldr	s15, [r3]
 8003374:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	edd3 7a61 	vldr	s15, [r3, #388]	; 0x184
 800337e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 800338e:	4b42      	ldr	r3, [pc, #264]	; (8003498 <TrajectoryEvaluation+0x640>)
 8003390:	edd3 6a00 	vldr	s13, [r3]
 8003394:	4b40      	ldr	r3, [pc, #256]	; (8003498 <TrajectoryEvaluation+0x640>)
 8003396:	edd3 7a00 	vldr	s15, [r3]
 800339a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800339e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80033a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 80033b0:	4b39      	ldr	r3, [pc, #228]	; (8003498 <TrajectoryEvaluation+0x640>)
 80033b2:	edd3 7a00 	vldr	s15, [r3]
 80033b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	edd3 7a68 	vldr	s15, [r3, #416]	; 0x1a0
 80033c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[3]*(tP*tP)/2 + traject -> B[3]*tP + traject -> C[3];
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 80033d4:	4b31      	ldr	r3, [pc, #196]	; (800349c <TrajectoryEvaluation+0x644>)
 80033d6:	edd3 6a00 	vldr	s13, [r3]
 80033da:	4b30      	ldr	r3, [pc, #192]	; (800349c <TrajectoryEvaluation+0x644>)
 80033dc:	edd3 7a00 	vldr	s15, [r3]
 80033e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80033ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 80033f6:	4b29      	ldr	r3, [pc, #164]	; (800349c <TrajectoryEvaluation+0x644>)
 80033f8:	edd3 7a00 	vldr	s15, [r3]
 80033fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	edd3 7a68 	vldr	s15, [r3, #416]	; 0x1a0
 800340a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	edd3 6a5a 	vldr	s13, [r3, #360]	; 0x168
 8003420:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <TrajectoryEvaluation+0x640>)
 8003422:	ed93 6a00 	vldr	s12, [r3]
 8003426:	4b1c      	ldr	r3, [pc, #112]	; (8003498 <TrajectoryEvaluation+0x640>)
 8003428:	edd3 7a00 	vldr	s15, [r3]
 800342c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003430:	4b19      	ldr	r3, [pc, #100]	; (8003498 <TrajectoryEvaluation+0x640>)
 8003432:	edd3 7a00 	vldr	s15, [r3]
 8003436:	ee66 7a27 	vmul.f32	s15, s12, s15
 800343a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800343e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8003442:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003446:	ee37 7a27 	vadd.f32	s14, s14, s15
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	edd3 6a61 	vldr	s13, [r3, #388]	; 0x184
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <TrajectoryEvaluation+0x640>)
 8003452:	ed93 6a00 	vldr	s12, [r3]
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <TrajectoryEvaluation+0x640>)
 8003458:	edd3 7a00 	vldr	s15, [r3]
 800345c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003460:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003464:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8003468:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800346c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	edd3 6a68 	vldr	s13, [r3, #416]	; 0x1a0
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <TrajectoryEvaluation+0x640>)
 8003478:	edd3 7a00 	vldr	s15, [r3]
 800347c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003480:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	edd3 7a6f 	vldr	s15, [r3, #444]	; 0x1bc
 800348a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 8003494:	e3db      	b.n	8003c4e <TrajectoryEvaluation+0xdf6>
 8003496:	bf00      	nop
 8003498:	2000045c 	.word	0x2000045c
 800349c:	20000460 	.word	0x20000460
		   }
		   else if( t >= traject -> T[3] && t < traject -> T[4])
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	ed93 7a76 	vldr	s14, [r3, #472]	; 0x1d8
 80034a6:	4bb3      	ldr	r3, [pc, #716]	; (8003774 <TrajectoryEvaluation+0x91c>)
 80034a8:	edd3 7a00 	vldr	s15, [r3]
 80034ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b4:	f200 80a9 	bhi.w	800360a <TrajectoryEvaluation+0x7b2>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	ed93 7a77 	vldr	s14, [r3, #476]	; 0x1dc
 80034be:	4bad      	ldr	r3, [pc, #692]	; (8003774 <TrajectoryEvaluation+0x91c>)
 80034c0:	edd3 7a00 	vldr	s15, [r3]
 80034c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034cc:	f340 809d 	ble.w	800360a <TrajectoryEvaluation+0x7b2>
		   {
		      traject -> QJ = traject -> A[4];
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[4]*t + traject -> B[4];
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 80034e2:	4ba4      	ldr	r3, [pc, #656]	; (8003774 <TrajectoryEvaluation+0x91c>)
 80034e4:	edd3 7a00 	vldr	s15, [r3]
 80034e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	edd3 7a62 	vldr	s15, [r3, #392]	; 0x188
 80034f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 8003502:	4b9c      	ldr	r3, [pc, #624]	; (8003774 <TrajectoryEvaluation+0x91c>)
 8003504:	edd3 6a00 	vldr	s13, [r3]
 8003508:	4b9a      	ldr	r3, [pc, #616]	; (8003774 <TrajectoryEvaluation+0x91c>)
 800350a:	edd3 7a00 	vldr	s15, [r3]
 800350e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003516:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800351a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 8003524:	4b93      	ldr	r3, [pc, #588]	; (8003774 <TrajectoryEvaluation+0x91c>)
 8003526:	edd3 7a00 	vldr	s15, [r3]
 800352a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800352e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 8003538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[4]*(tP*tP)/2 + traject -> B[4]*tP + traject -> C[4];
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	ed93 7a5b 	vldr	s14, [r3, #364]	; 0x16c
 8003548:	4b8b      	ldr	r3, [pc, #556]	; (8003778 <TrajectoryEvaluation+0x920>)
 800354a:	edd3 6a00 	vldr	s13, [r3]
 800354e:	4b8a      	ldr	r3, [pc, #552]	; (8003778 <TrajectoryEvaluation+0x920>)
 8003550:	edd3 7a00 	vldr	s15, [r3]
 8003554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003560:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 800356a:	4b83      	ldr	r3, [pc, #524]	; (8003778 <TrajectoryEvaluation+0x920>)
 800356c:	edd3 7a00 	vldr	s15, [r3]
 8003570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003574:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 800357e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	edd3 6a5b 	vldr	s13, [r3, #364]	; 0x16c
 8003594:	4b77      	ldr	r3, [pc, #476]	; (8003774 <TrajectoryEvaluation+0x91c>)
 8003596:	ed93 6a00 	vldr	s12, [r3]
 800359a:	4b76      	ldr	r3, [pc, #472]	; (8003774 <TrajectoryEvaluation+0x91c>)
 800359c:	edd3 7a00 	vldr	s15, [r3]
 80035a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80035a4:	4b73      	ldr	r3, [pc, #460]	; (8003774 <TrajectoryEvaluation+0x91c>)
 80035a6:	edd3 7a00 	vldr	s15, [r3]
 80035aa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80035ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035b2:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80035b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80035ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	edd3 6a62 	vldr	s13, [r3, #392]	; 0x188
 80035c4:	4b6b      	ldr	r3, [pc, #428]	; (8003774 <TrajectoryEvaluation+0x91c>)
 80035c6:	ed93 6a00 	vldr	s12, [r3]
 80035ca:	4b6a      	ldr	r3, [pc, #424]	; (8003774 <TrajectoryEvaluation+0x91c>)
 80035cc:	edd3 7a00 	vldr	s15, [r3]
 80035d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80035d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035d8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80035dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80035e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	edd3 6a69 	vldr	s13, [r3, #420]	; 0x1a4
 80035ea:	4b62      	ldr	r3, [pc, #392]	; (8003774 <TrajectoryEvaluation+0x91c>)
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	edd3 7a70 	vldr	s15, [r3, #448]	; 0x1c0
 80035fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 8003608:	e321      	b.n	8003c4e <TrajectoryEvaluation+0xdf6>
		   }
		   else if( t >= traject -> T[4] && t < traject -> T[5])
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	ed93 7a77 	vldr	s14, [r3, #476]	; 0x1dc
 8003610:	4b58      	ldr	r3, [pc, #352]	; (8003774 <TrajectoryEvaluation+0x91c>)
 8003612:	edd3 7a00 	vldr	s15, [r3]
 8003616:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800361a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361e:	f200 80ad 	bhi.w	800377c <TrajectoryEvaluation+0x924>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	ed93 7a78 	vldr	s14, [r3, #480]	; 0x1e0
 8003628:	4b52      	ldr	r3, [pc, #328]	; (8003774 <TrajectoryEvaluation+0x91c>)
 800362a:	edd3 7a00 	vldr	s15, [r3]
 800362e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003636:	f340 80a1 	ble.w	800377c <TrajectoryEvaluation+0x924>
		   {
		      traject -> QJ = traject -> A[5];
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[5]*t + traject -> B[5];
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 800364c:	4b49      	ldr	r3, [pc, #292]	; (8003774 <TrajectoryEvaluation+0x91c>)
 800364e:	edd3 7a00 	vldr	s15, [r3]
 8003652:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	edd3 7a63 	vldr	s15, [r3, #396]	; 0x18c
 800365c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 800366c:	4b41      	ldr	r3, [pc, #260]	; (8003774 <TrajectoryEvaluation+0x91c>)
 800366e:	edd3 6a00 	vldr	s13, [r3]
 8003672:	4b40      	ldr	r3, [pc, #256]	; (8003774 <TrajectoryEvaluation+0x91c>)
 8003674:	edd3 7a00 	vldr	s15, [r3]
 8003678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800367c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003680:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003684:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 800368e:	4b39      	ldr	r3, [pc, #228]	; (8003774 <TrajectoryEvaluation+0x91c>)
 8003690:	edd3 7a00 	vldr	s15, [r3]
 8003694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003698:	ee37 7a27 	vadd.f32	s14, s14, s15
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 80036a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[5]*(tP*tP)/2 + traject -> B[5]*tP + traject -> C[5];
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 80036b2:	4b31      	ldr	r3, [pc, #196]	; (8003778 <TrajectoryEvaluation+0x920>)
 80036b4:	edd3 6a00 	vldr	s13, [r3]
 80036b8:	4b2f      	ldr	r3, [pc, #188]	; (8003778 <TrajectoryEvaluation+0x920>)
 80036ba:	edd3 7a00 	vldr	s15, [r3]
 80036be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80036ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 80036d4:	4b28      	ldr	r3, [pc, #160]	; (8003778 <TrajectoryEvaluation+0x920>)
 80036d6:	edd3 7a00 	vldr	s15, [r3]
 80036da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 80036e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	edd3 6a5c 	vldr	s13, [r3, #368]	; 0x170
 80036fe:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <TrajectoryEvaluation+0x91c>)
 8003700:	ed93 6a00 	vldr	s12, [r3]
 8003704:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <TrajectoryEvaluation+0x91c>)
 8003706:	edd3 7a00 	vldr	s15, [r3]
 800370a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800370e:	4b19      	ldr	r3, [pc, #100]	; (8003774 <TrajectoryEvaluation+0x91c>)
 8003710:	edd3 7a00 	vldr	s15, [r3]
 8003714:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003718:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800371c:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8003720:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003724:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
 800372e:	4b11      	ldr	r3, [pc, #68]	; (8003774 <TrajectoryEvaluation+0x91c>)
 8003730:	ed93 6a00 	vldr	s12, [r3]
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <TrajectoryEvaluation+0x91c>)
 8003736:	edd3 7a00 	vldr	s15, [r3]
 800373a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800373e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003742:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8003746:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800374a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	edd3 6a6a 	vldr	s13, [r3, #424]	; 0x1a8
 8003754:	4b07      	ldr	r3, [pc, #28]	; (8003774 <TrajectoryEvaluation+0x91c>)
 8003756:	edd3 7a00 	vldr	s15, [r3]
 800375a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800375e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	edd3 7a71 	vldr	s15, [r3, #452]	; 0x1c4
 8003768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 8003772:	e26c      	b.n	8003c4e <TrajectoryEvaluation+0xdf6>
 8003774:	2000045c 	.word	0x2000045c
 8003778:	20000460 	.word	0x20000460
		   }
		   else if( t >= traject -> T[5] && t < traject -> T[6])
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	ed93 7a78 	vldr	s14, [r3, #480]	; 0x1e0
 8003782:	4b66      	ldr	r3, [pc, #408]	; (800391c <TrajectoryEvaluation+0xac4>)
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800378c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003790:	f200 80a9 	bhi.w	80038e6 <TrajectoryEvaluation+0xa8e>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	ed93 7a79 	vldr	s14, [r3, #484]	; 0x1e4
 800379a:	4b60      	ldr	r3, [pc, #384]	; (800391c <TrajectoryEvaluation+0xac4>)
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a8:	f340 809d 	ble.w	80038e6 <TrajectoryEvaluation+0xa8e>
		   {
		      traject -> QJ = traject -> A[6];
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = traject -> A[6]*t + traject -> B[6];
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	ed93 7a5d 	vldr	s14, [r3, #372]	; 0x174
 80037be:	4b57      	ldr	r3, [pc, #348]	; (800391c <TrajectoryEvaluation+0xac4>)
 80037c0:	edd3 7a00 	vldr	s15, [r3]
 80037c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	edd3 7a64 	vldr	s15, [r3, #400]	; 0x190
 80037ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
		      traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	ed93 7a5d 	vldr	s14, [r3, #372]	; 0x174
 80037de:	4b4f      	ldr	r3, [pc, #316]	; (800391c <TrajectoryEvaluation+0xac4>)
 80037e0:	edd3 6a00 	vldr	s13, [r3]
 80037e4:	4b4d      	ldr	r3, [pc, #308]	; (800391c <TrajectoryEvaluation+0xac4>)
 80037e6:	edd3 7a00 	vldr	s15, [r3]
 80037ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80037f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	edd3 6a64 	vldr	s13, [r3, #400]	; 0x190
 8003800:	4b46      	ldr	r3, [pc, #280]	; (800391c <TrajectoryEvaluation+0xac4>)
 8003802:	edd3 7a00 	vldr	s15, [r3]
 8003806:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800380a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 8003814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
		      traject -> QVP = traject -> A[6]*(tP*tP)/2 + traject -> B[6]*tP + traject -> C[6];
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	ed93 7a5d 	vldr	s14, [r3, #372]	; 0x174
 8003824:	4b3e      	ldr	r3, [pc, #248]	; (8003920 <TrajectoryEvaluation+0xac8>)
 8003826:	edd3 6a00 	vldr	s13, [r3]
 800382a:	4b3d      	ldr	r3, [pc, #244]	; (8003920 <TrajectoryEvaluation+0xac8>)
 800382c:	edd3 7a00 	vldr	s15, [r3]
 8003830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003838:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800383c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	edd3 6a64 	vldr	s13, [r3, #400]	; 0x190
 8003846:	4b36      	ldr	r3, [pc, #216]	; (8003920 <TrajectoryEvaluation+0xac8>)
 8003848:	edd3 7a00 	vldr	s15, [r3]
 800384c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003850:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 800385a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qin + traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	ed93 7a7a 	vldr	s14, [r3, #488]	; 0x1e8
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	edd3 6a5d 	vldr	s13, [r3, #372]	; 0x174
 8003870:	4b2a      	ldr	r3, [pc, #168]	; (800391c <TrajectoryEvaluation+0xac4>)
 8003872:	ed93 6a00 	vldr	s12, [r3]
 8003876:	4b29      	ldr	r3, [pc, #164]	; (800391c <TrajectoryEvaluation+0xac4>)
 8003878:	edd3 7a00 	vldr	s15, [r3]
 800387c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003880:	4b26      	ldr	r3, [pc, #152]	; (800391c <TrajectoryEvaluation+0xac4>)
 8003882:	edd3 7a00 	vldr	s15, [r3]
 8003886:	ee66 7a27 	vmul.f32	s15, s12, s15
 800388a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800388e:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8003892:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003896:	ee37 7a27 	vadd.f32	s14, s14, s15
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	edd3 6a64 	vldr	s13, [r3, #400]	; 0x190
 80038a0:	4b1e      	ldr	r3, [pc, #120]	; (800391c <TrajectoryEvaluation+0xac4>)
 80038a2:	ed93 6a00 	vldr	s12, [r3]
 80038a6:	4b1d      	ldr	r3, [pc, #116]	; (800391c <TrajectoryEvaluation+0xac4>)
 80038a8:	edd3 7a00 	vldr	s15, [r3]
 80038ac:	ee66 7a27 	vmul.f32	s15, s12, s15
 80038b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038b4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80038b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80038bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	edd3 6a6b 	vldr	s13, [r3, #428]	; 0x1ac
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <TrajectoryEvaluation+0xac4>)
 80038c8:	edd3 7a00 	vldr	s15, [r3]
 80038cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 80038da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 80038e4:	e1b3      	b.n	8003c4e <TrajectoryEvaluation+0xdf6>
		   }
		   else
		   {
		      traject -> QJ = 0;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		      traject -> QA = 0;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
		      traject -> QV = 0;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		      traject -> QVP = 0;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		      traject -> QX = traject -> Qfinal;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		  traject -> QV = 0;
		  traject -> QVP = 0;
		  traject -> QX = traject -> Qfinal;
	   }
	}
   return 1.0;
 800391a:	e199      	b.n	8003c50 <TrajectoryEvaluation+0xdf8>
 800391c:	2000045c 	.word	0x2000045c
 8003920:	20000460 	.word	0x20000460
	else if(traject ->TrajectoryMode == 1) //Quintic
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
 800392a:	2b01      	cmp	r3, #1
 800392c:	f040 8190 	bne.w	8003c50 <TrajectoryEvaluation+0xdf8>
	   if(t >= 0 && t < traject -> TimeFinal)
 8003930:	4bca      	ldr	r3, [pc, #808]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003932:	edd3 7a00 	vldr	s15, [r3]
 8003936:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800393a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393e:	f2c0 816c 	blt.w	8003c1a <TrajectoryEvaluation+0xdc2>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	ed93 7a83 	vldr	s14, [r3, #524]	; 0x20c
 8003948:	4bc4      	ldr	r3, [pc, #784]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 800394a:	edd3 7a00 	vldr	s15, [r3]
 800394e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003956:	f340 8160 	ble.w	8003c1a <TrajectoryEvaluation+0xdc2>
			 traject -> QA = (2*traject -> MatTA_Data[2]) + (6*traject -> MatTA_Data[3]*t) + (12*traject -> MatTA_Data[4]*(t*t)) + (20*traject -> MatTA_Data[5]*(t*t*t));
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8003960:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 800396a:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800396e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003972:	4bba      	ldr	r3, [pc, #744]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003974:	edd3 7a00 	vldr	s15, [r3]
 8003978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800397c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8003986:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800398a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800398e:	4bb3      	ldr	r3, [pc, #716]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003990:	ed93 6a00 	vldr	s12, [r3]
 8003994:	4bb1      	ldr	r3, [pc, #708]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003996:	edd3 7a00 	vldr	s15, [r3]
 800399a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800399e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 80039ac:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80039b0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80039b4:	4ba9      	ldr	r3, [pc, #676]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 80039b6:	ed93 6a00 	vldr	s12, [r3]
 80039ba:	4ba8      	ldr	r3, [pc, #672]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 80039bc:	edd3 7a00 	vldr	s15, [r3]
 80039c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80039c4:	4ba5      	ldr	r3, [pc, #660]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 80039c6:	edd3 7a00 	vldr	s15, [r3]
 80039ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80039ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
			 traject -> QV = (traject -> MatTA_Data[1]) + (2*traject -> MatTA_Data[2]*t) + (3*traject -> MatTA_Data[3]*(t*t)) + (4*traject -> MatTA_Data[4]*(t*t*t)) + (5*traject -> MatTA_Data[5]*(t*t*t*t));
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 80039e8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80039ec:	4b9b      	ldr	r3, [pc, #620]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 80039ee:	edd3 7a00 	vldr	s15, [r3]
 80039f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8003a00:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003a04:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003a08:	4b94      	ldr	r3, [pc, #592]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003a0a:	ed93 6a00 	vldr	s12, [r3]
 8003a0e:	4b93      	ldr	r3, [pc, #588]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003a10:	edd3 7a00 	vldr	s15, [r3]
 8003a14:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8003a26:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003a2a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003a2e:	4b8b      	ldr	r3, [pc, #556]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003a30:	ed93 6a00 	vldr	s12, [r3]
 8003a34:	4b89      	ldr	r3, [pc, #548]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003a36:	edd3 7a00 	vldr	s15, [r3]
 8003a3a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a3e:	4b87      	ldr	r3, [pc, #540]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003a40:	edd3 7a00 	vldr	s15, [r3]
 8003a44:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8003a56:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003a5a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003a5e:	4b7f      	ldr	r3, [pc, #508]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003a60:	ed93 6a00 	vldr	s12, [r3]
 8003a64:	4b7d      	ldr	r3, [pc, #500]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003a66:	edd3 7a00 	vldr	s15, [r3]
 8003a6a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a6e:	4b7b      	ldr	r3, [pc, #492]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003a70:	edd3 7a00 	vldr	s15, [r3]
 8003a74:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a78:	4b78      	ldr	r3, [pc, #480]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003a7a:	edd3 7a00 	vldr	s15, [r3]
 8003a7e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003a82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
			 traject -> QVP = (traject -> MatTA_Data[1]) + (2*traject -> MatTA_Data[2]*tP) + (3*traject -> MatTA_Data[3]*(tP*tP)) + (4*traject -> MatTA_Data[4]*(tP*tP*tP)) + (5*traject -> MatTA_Data[5]*(tP*tP*tP*tP));
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8003a9c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003aa0:	4b6f      	ldr	r3, [pc, #444]	; (8003c60 <TrajectoryEvaluation+0xe08>)
 8003aa2:	edd3 7a00 	vldr	s15, [r3]
 8003aa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8003ab4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003ab8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003abc:	4b68      	ldr	r3, [pc, #416]	; (8003c60 <TrajectoryEvaluation+0xe08>)
 8003abe:	ed93 6a00 	vldr	s12, [r3]
 8003ac2:	4b67      	ldr	r3, [pc, #412]	; (8003c60 <TrajectoryEvaluation+0xe08>)
 8003ac4:	edd3 7a00 	vldr	s15, [r3]
 8003ac8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8003ada:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003ade:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003ae2:	4b5f      	ldr	r3, [pc, #380]	; (8003c60 <TrajectoryEvaluation+0xe08>)
 8003ae4:	ed93 6a00 	vldr	s12, [r3]
 8003ae8:	4b5d      	ldr	r3, [pc, #372]	; (8003c60 <TrajectoryEvaluation+0xe08>)
 8003aea:	edd3 7a00 	vldr	s15, [r3]
 8003aee:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003af2:	4b5b      	ldr	r3, [pc, #364]	; (8003c60 <TrajectoryEvaluation+0xe08>)
 8003af4:	edd3 7a00 	vldr	s15, [r3]
 8003af8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003afc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8003b0a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003b0e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003b12:	4b53      	ldr	r3, [pc, #332]	; (8003c60 <TrajectoryEvaluation+0xe08>)
 8003b14:	ed93 6a00 	vldr	s12, [r3]
 8003b18:	4b51      	ldr	r3, [pc, #324]	; (8003c60 <TrajectoryEvaluation+0xe08>)
 8003b1a:	edd3 7a00 	vldr	s15, [r3]
 8003b1e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003b22:	4b4f      	ldr	r3, [pc, #316]	; (8003c60 <TrajectoryEvaluation+0xe08>)
 8003b24:	edd3 7a00 	vldr	s15, [r3]
 8003b28:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003b2c:	4b4c      	ldr	r3, [pc, #304]	; (8003c60 <TrajectoryEvaluation+0xe08>)
 8003b2e:	edd3 7a00 	vldr	s15, [r3]
 8003b32:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
			 traject -> QX = (traject -> MatTA_Data[0]) + (traject -> MatTA_Data[1]*t) + (traject -> MatTA_Data[2]*(t*t)) + (traject -> MatTA_Data[3]*(t*t*t)) + (traject -> MatTA_Data[4]*(t*t*t*t))+ (traject -> MatTA_Data[5]*(t*t*t*t*t));
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	ed93 7a4e 	vldr	s14, [r3, #312]	; 0x138
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	edd3 6a4f 	vldr	s13, [r3, #316]	; 0x13c
 8003b50:	4b42      	ldr	r3, [pc, #264]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003b52:	edd3 7a00 	vldr	s15, [r3]
 8003b56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	edd3 6a50 	vldr	s13, [r3, #320]	; 0x140
 8003b64:	4b3d      	ldr	r3, [pc, #244]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003b66:	ed93 6a00 	vldr	s12, [r3]
 8003b6a:	4b3c      	ldr	r3, [pc, #240]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003b6c:	edd3 7a00 	vldr	s15, [r3]
 8003b70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	edd3 6a51 	vldr	s13, [r3, #324]	; 0x144
 8003b82:	4b36      	ldr	r3, [pc, #216]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003b84:	ed93 6a00 	vldr	s12, [r3]
 8003b88:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003b8a:	edd3 7a00 	vldr	s15, [r3]
 8003b8e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003b92:	4b32      	ldr	r3, [pc, #200]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003b94:	edd3 7a00 	vldr	s15, [r3]
 8003b98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ba0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	edd3 6a52 	vldr	s13, [r3, #328]	; 0x148
 8003baa:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003bac:	ed93 6a00 	vldr	s12, [r3]
 8003bb0:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003bb2:	edd3 7a00 	vldr	s15, [r3]
 8003bb6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bba:	4b28      	ldr	r3, [pc, #160]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003bbc:	edd3 7a00 	vldr	s15, [r3]
 8003bc0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bc4:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003bc6:	edd3 7a00 	vldr	s15, [r3]
 8003bca:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003bce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	edd3 6a53 	vldr	s13, [r3, #332]	; 0x14c
 8003bdc:	4b1f      	ldr	r3, [pc, #124]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003bde:	ed93 6a00 	vldr	s12, [r3]
 8003be2:	4b1e      	ldr	r3, [pc, #120]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003be4:	edd3 7a00 	vldr	s15, [r3]
 8003be8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bec:	4b1b      	ldr	r3, [pc, #108]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003bee:	edd3 7a00 	vldr	s15, [r3]
 8003bf2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bf6:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003bf8:	edd3 7a00 	vldr	s15, [r3]
 8003bfc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003c00:	4b16      	ldr	r3, [pc, #88]	; (8003c5c <TrajectoryEvaluation+0xe04>)
 8003c02:	edd3 7a00 	vldr	s15, [r3]
 8003c06:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	edc3 7a81 	vstr	s15, [r3, #516]	; 0x204
 8003c18:	e019      	b.n	8003c4e <TrajectoryEvaluation+0xdf6>
		  traject -> QJ = 0;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		  traject -> QA = 0;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
		  traject -> QV = 0;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		  traject -> QVP = 0;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		  traject -> QX = traject -> Qfinal;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
   return 1.0;
 8003c4e:	bf00      	nop
 8003c50:	bf00      	nop
}
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c5a:	bf00      	nop
 8003c5c:	2000045c 	.word	0x2000045c
 8003c60:	20000460 	.word	0x20000460

08003c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c6c:	f002 fb86 	bl	800637c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c70:	f000 f8d6 	bl	8003e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c74:	f000 fb08 	bl	8004288 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c78:	f000 fade 	bl	8004238 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003c7c:	f000 fab0 	bl	80041e0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003c80:	f000 f936 	bl	8003ef0 <MX_I2C1_Init>
  MX_TIM11_Init();
 8003c84:	f000 fa88 	bl	8004198 <MX_TIM11_Init>
  MX_TIM1_Init();
 8003c88:	f000 f960 	bl	8003f4c <MX_TIM1_Init>
  MX_TIM2_Init();
 8003c8c:	f000 f9e2 	bl	8004054 <MX_TIM2_Init>
  MX_TIM5_Init();
 8003c90:	f000 fa34 	bl	80040fc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
//  HAL_Delay(1000);
  Ringbuf_Init();
 8003c94:	f000 fe5e 	bl	8004954 <Ringbuf_Init>
  KalmanMatrixInit(&KalmanVar);
 8003c98:	484e      	ldr	r0, [pc, #312]	; (8003dd4 <main+0x170>)
 8003c9a:	f7fd f85d 	bl	8000d58 <KalmanMatrixInit>
  TrajectorInit(&traject);
 8003c9e:	484e      	ldr	r0, [pc, #312]	; (8003dd8 <main+0x174>)
 8003ca0:	f7fd fe67 	bl	8001972 <TrajectorInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	484d      	ldr	r0, [pc, #308]	; (8003ddc <main+0x178>)
 8003ca8:	f006 f820 	bl	8009cec <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8003cac:	484c      	ldr	r0, [pc, #304]	; (8003de0 <main+0x17c>)
 8003cae:	f005 ff3d 	bl	8009b2c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8003cb2:	213c      	movs	r1, #60	; 0x3c
 8003cb4:	484b      	ldr	r0, [pc, #300]	; (8003de4 <main+0x180>)
 8003cb6:	f006 f96f 	bl	8009f98 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 8003cba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4b49      	ldr	r3, [pc, #292]	; (8003de8 <main+0x184>)
 8003cc4:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 8003cc6:	4b48      	ldr	r3, [pc, #288]	; (8003de8 <main+0x184>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a47      	ldr	r2, [pc, #284]	; (8003de8 <main+0x184>)
 8003ccc:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 8003cce:	4b46      	ldr	r3, [pc, #280]	; (8003de8 <main+0x184>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a46      	ldr	r2, [pc, #280]	; (8003dec <main+0x188>)
 8003cd4:	6013      	str	r3, [r2, #0]
  PIDAController_Init(&PidVelo);
 8003cd6:	4846      	ldr	r0, [pc, #280]	; (8003df0 <main+0x18c>)
 8003cd8:	f7fd fb54 	bl	8001384 <PIDAController_Init>
  PIDAController_Init(&PidPos);
 8003cdc:	4845      	ldr	r0, [pc, #276]	; (8003df4 <main+0x190>)
 8003cde:	f7fd fb51 	bl	8001384 <PIDAController_Init>
  // Reset all Parameter
  Robotinit(&Robot);
 8003ce2:	4845      	ldr	r0, [pc, #276]	; (8003df8 <main+0x194>)
 8003ce4:	f7fd fe0c 	bl	8001900 <Robotinit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timeElapsed[0] = Micros();
 8003ce8:	f002 f844 	bl	8005d74 <Micros>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4942      	ldr	r1, [pc, #264]	; (8003dfc <main+0x198>)
 8003cf2:	e9c1 2300 	strd	r2, r3, [r1]
	  timeElapsed[1] = HAL_GetTick();
 8003cf6:	f002 fba7 	bl	8006448 <HAL_GetTick>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	607a      	str	r2, [r7, #4]
 8003d02:	4b3e      	ldr	r3, [pc, #248]	; (8003dfc <main+0x198>)
 8003d04:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d08:	e9c3 1202 	strd	r1, r2, [r3, #8]
	  RobotstateManagement();
 8003d0c:	f001 fb28 	bl	8005360 <RobotstateManagement>
	  if(Micros() - EndEffLoopTime > 100000)
 8003d10:	f002 f830 	bl	8005d74 <Micros>
 8003d14:	4b3a      	ldr	r3, [pc, #232]	; (8003e00 <main+0x19c>)
 8003d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1a:	1a84      	subs	r4, r0, r2
 8003d1c:	eb61 0503 	sbc.w	r5, r1, r3
 8003d20:	4b38      	ldr	r3, [pc, #224]	; (8003e04 <main+0x1a0>)
 8003d22:	429c      	cmp	r4, r3
 8003d24:	f175 0300 	sbcs.w	r3, r5, #0
 8003d28:	d308      	bcc.n	8003d3c <main+0xd8>
	  {
		  EndEffLoopTime = Micros();
 8003d2a:	f002 f823 	bl	8005d74 <Micros>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4933      	ldr	r1, [pc, #204]	; (8003e00 <main+0x19c>)
 8003d34:	e9c1 2300 	strd	r2, r3, [r1]
		  EndEffstateManagement();
 8003d38:	f001 fc62 	bl	8005600 <EndEffstateManagement>
	  }
	  if(Micros() - ControlLoopTime >= 10000)
 8003d3c:	f002 f81a 	bl	8005d74 <Micros>
 8003d40:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <main+0x1a4>)
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	ebb0 0802 	subs.w	r8, r0, r2
 8003d4a:	eb61 0903 	sbc.w	r9, r1, r3
 8003d4e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003d52:	4598      	cmp	r8, r3
 8003d54:	f179 0300 	sbcs.w	r3, r9, #0
 8003d58:	d3c6      	bcc.n	8003ce8 <main+0x84>
	  {
		ControlLoopTime  = Micros();
 8003d5a:	f002 f80b 	bl	8005d74 <Micros>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4929      	ldr	r1, [pc, #164]	; (8003e08 <main+0x1a4>)
 8003d64:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStartTime = Micros();
 8003d68:	f002 f804 	bl	8005d74 <Micros>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4926      	ldr	r1, [pc, #152]	; (8003e0c <main+0x1a8>)
 8003d72:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 8003d76:	f000 fb4b 	bl	8004410 <EncoderRead>
//		KalmanFilterFunction(&KalmanVar,PositionDeg[0]);
		KalmanFilterFunction(&KalmanVar,PositionDeg[0],VelocityDeg);
 8003d7a:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <main+0x1ac>)
 8003d7c:	edd3 7a00 	vldr	s15, [r3]
 8003d80:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <main+0x1b0>)
 8003d82:	ed93 7a00 	vldr	s14, [r3]
 8003d86:	eef0 0a47 	vmov.f32	s1, s14
 8003d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d8e:	4811      	ldr	r0, [pc, #68]	; (8003dd4 <main+0x170>)
 8003d90:	f7fd f9c4 	bl	800111c <KalmanFilterFunction>
		Robot.Position = PositionDeg[0];
 8003d94:	4b1e      	ldr	r3, [pc, #120]	; (8003e10 <main+0x1ac>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <main+0x194>)
 8003d9a:	6013      	str	r3, [r2, #0]
		Robot.Velocity = KalmanVar.MatState_Data[1];
 8003d9c:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <main+0x170>)
 8003d9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003da2:	4a15      	ldr	r2, [pc, #84]	; (8003df8 <main+0x194>)
 8003da4:	6053      	str	r3, [r2, #4]
		ControllLoopAndErrorHandler();
 8003da6:	f000 fca9 	bl	80046fc <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 8003daa:	f001 ffe3 	bl	8005d74 <Micros>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4919      	ldr	r1, [pc, #100]	; (8003e18 <main+0x1b4>)
 8003db4:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 8003db8:	4b17      	ldr	r3, [pc, #92]	; (8003e18 <main+0x1b4>)
 8003dba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dbe:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <main+0x1a8>)
 8003dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc4:	ebb0 0a02 	subs.w	sl, r0, r2
 8003dc8:	eb61 0b03 	sbc.w	fp, r1, r3
 8003dcc:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <main+0x1b8>)
 8003dce:	e9c3 ab00 	strd	sl, fp, [r3]
	  timeElapsed[0] = Micros();
 8003dd2:	e789      	b.n	8003ce8 <main+0x84>
 8003dd4:	20000034 	.word	0x20000034
 8003dd8:	2000086c 	.word	0x2000086c
 8003ddc:	200004b8 	.word	0x200004b8
 8003de0:	20000590 	.word	0x20000590
 8003de4:	20000500 	.word	0x20000500
 8003de8:	200007e8 	.word	0x200007e8
 8003dec:	200007f4 	.word	0x200007f4
 8003df0:	20000808 	.word	0x20000808
 8003df4:	20000838 	.word	0x20000838
 8003df8:	200006dc 	.word	0x200006dc
 8003dfc:	20000780 	.word	0x20000780
 8003e00:	20000790 	.word	0x20000790
 8003e04:	000186a1 	.word	0x000186a1
 8003e08:	20000af8 	.word	0x20000af8
 8003e0c:	20000ac8 	.word	0x20000ac8
 8003e10:	200007f8 	.word	0x200007f8
 8003e14:	20000800 	.word	0x20000800
 8003e18:	20000ad0 	.word	0x20000ad0
 8003e1c:	20000ad8 	.word	0x20000ad8

08003e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b094      	sub	sp, #80	; 0x50
 8003e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e26:	f107 0320 	add.w	r3, r7, #32
 8003e2a:	2230      	movs	r2, #48	; 0x30
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f008 fcc0 	bl	800c7b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e34:	f107 030c 	add.w	r3, r7, #12
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e44:	2300      	movs	r3, #0
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <SystemClock_Config+0xc8>)
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	4a26      	ldr	r2, [pc, #152]	; (8003ee8 <SystemClock_Config+0xc8>)
 8003e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e52:	6413      	str	r3, [r2, #64]	; 0x40
 8003e54:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <SystemClock_Config+0xc8>)
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e60:	2300      	movs	r3, #0
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	4b21      	ldr	r3, [pc, #132]	; (8003eec <SystemClock_Config+0xcc>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a20      	ldr	r2, [pc, #128]	; (8003eec <SystemClock_Config+0xcc>)
 8003e6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <SystemClock_Config+0xcc>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e80:	2301      	movs	r3, #1
 8003e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e84:	2310      	movs	r3, #16
 8003e86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e88:	2302      	movs	r3, #2
 8003e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003e90:	2308      	movs	r3, #8
 8003e92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003e94:	2364      	movs	r3, #100	; 0x64
 8003e96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003e9c:	2304      	movs	r3, #4
 8003e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ea0:	f107 0320 	add.w	r3, r7, #32
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f005 f959 	bl	800915c <HAL_RCC_OscConfig>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003eb0:	f001 ff78 	bl	8005da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003eb4:	230f      	movs	r3, #15
 8003eb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ec4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003eca:	f107 030c 	add.w	r3, r7, #12
 8003ece:	2103      	movs	r1, #3
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f005 fbbb 	bl	800964c <HAL_RCC_ClockConfig>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003edc:	f001 ff62 	bl	8005da4 <Error_Handler>
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	3750      	adds	r7, #80	; 0x50
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40007000 	.word	0x40007000

08003ef0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ef4:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003ef6:	4a13      	ldr	r2, [pc, #76]	; (8003f44 <MX_I2C1_Init+0x54>)
 8003ef8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003efa:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003efc:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <MX_I2C1_Init+0x58>)
 8003efe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003f06:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003f0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f2c:	4804      	ldr	r0, [pc, #16]	; (8003f40 <MX_I2C1_Init+0x50>)
 8003f2e:	f003 f9a1 	bl	8007274 <HAL_I2C_Init>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003f38:	f001 ff34 	bl	8005da4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f3c:	bf00      	nop
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000464 	.word	0x20000464
 8003f44:	40005400 	.word	0x40005400
 8003f48:	00061a80 	.word	0x00061a80

08003f4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b092      	sub	sp, #72	; 0x48
 8003f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	60da      	str	r2, [r3, #12]
 8003f6a:	611a      	str	r2, [r3, #16]
 8003f6c:	615a      	str	r2, [r3, #20]
 8003f6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f70:	1d3b      	adds	r3, r7, #4
 8003f72:	2220      	movs	r2, #32
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f008 fc1c 	bl	800c7b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f7c:	4b33      	ldr	r3, [pc, #204]	; (800404c <MX_TIM1_Init+0x100>)
 8003f7e:	4a34      	ldr	r2, [pc, #208]	; (8004050 <MX_TIM1_Init+0x104>)
 8003f80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003f82:	4b32      	ldr	r3, [pc, #200]	; (800404c <MX_TIM1_Init+0x100>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f88:	4b30      	ldr	r3, [pc, #192]	; (800404c <MX_TIM1_Init+0x100>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8003f8e:	4b2f      	ldr	r3, [pc, #188]	; (800404c <MX_TIM1_Init+0x100>)
 8003f90:	f242 720f 	movw	r2, #9999	; 0x270f
 8003f94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f96:	4b2d      	ldr	r3, [pc, #180]	; (800404c <MX_TIM1_Init+0x100>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	; (800404c <MX_TIM1_Init+0x100>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fa2:	4b2a      	ldr	r3, [pc, #168]	; (800404c <MX_TIM1_Init+0x100>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003fa8:	4828      	ldr	r0, [pc, #160]	; (800404c <MX_TIM1_Init+0x100>)
 8003faa:	f005 fe50 	bl	8009c4e <HAL_TIM_PWM_Init>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003fb4:	f001 fef6 	bl	8005da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4821      	ldr	r0, [pc, #132]	; (800404c <MX_TIM1_Init+0x100>)
 8003fc8:	f006 fdfa 	bl	800abc0 <HAL_TIMEx_MasterConfigSynchronization>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003fd2:	f001 fee7 	bl	8005da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fd6:	2360      	movs	r3, #96	; 0x60
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003fea:	2300      	movs	r3, #0
 8003fec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4814      	ldr	r0, [pc, #80]	; (800404c <MX_TIM1_Init+0x100>)
 8003ffc:	f006 f962 	bl	800a2c4 <HAL_TIM_PWM_ConfigChannel>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8004006:	f001 fecd 	bl	8005da4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800400a:	2300      	movs	r3, #0
 800400c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800401e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004022:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004024:	2300      	movs	r3, #0
 8004026:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004028:	1d3b      	adds	r3, r7, #4
 800402a:	4619      	mov	r1, r3
 800402c:	4807      	ldr	r0, [pc, #28]	; (800404c <MX_TIM1_Init+0x100>)
 800402e:	f006 fe35 	bl	800ac9c <HAL_TIMEx_ConfigBreakDeadTime>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8004038:	f001 feb4 	bl	8005da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800403c:	4803      	ldr	r0, [pc, #12]	; (800404c <MX_TIM1_Init+0x100>)
 800403e:	f001 ffeb 	bl	8006018 <HAL_TIM_MspPostInit>

}
 8004042:	bf00      	nop
 8004044:	3748      	adds	r7, #72	; 0x48
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	200004b8 	.word	0x200004b8
 8004050:	40010000 	.word	0x40010000

08004054 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08c      	sub	sp, #48	; 0x30
 8004058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800405a:	f107 030c 	add.w	r3, r7, #12
 800405e:	2224      	movs	r2, #36	; 0x24
 8004060:	2100      	movs	r1, #0
 8004062:	4618      	mov	r0, r3
 8004064:	f008 fba6 	bl	800c7b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004068:	1d3b      	adds	r3, r7, #4
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004070:	4b21      	ldr	r3, [pc, #132]	; (80040f8 <MX_TIM2_Init+0xa4>)
 8004072:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004076:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004078:	4b1f      	ldr	r3, [pc, #124]	; (80040f8 <MX_TIM2_Init+0xa4>)
 800407a:	2200      	movs	r2, #0
 800407c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800407e:	4b1e      	ldr	r3, [pc, #120]	; (80040f8 <MX_TIM2_Init+0xa4>)
 8004080:	2200      	movs	r2, #0
 8004082:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 8004084:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <MX_TIM2_Init+0xa4>)
 8004086:	f642 62df 	movw	r2, #11999	; 0x2edf
 800408a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800408c:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <MX_TIM2_Init+0xa4>)
 800408e:	2200      	movs	r2, #0
 8004090:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004092:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <MX_TIM2_Init+0xa4>)
 8004094:	2200      	movs	r2, #0
 8004096:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004098:	2303      	movs	r3, #3
 800409a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800409c:	2300      	movs	r3, #0
 800409e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80040a0:	2301      	movs	r3, #1
 80040a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80040a4:	2300      	movs	r3, #0
 80040a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80040ac:	2300      	movs	r3, #0
 80040ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80040b0:	2301      	movs	r3, #1
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80040b4:	2300      	movs	r3, #0
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80040bc:	f107 030c 	add.w	r3, r7, #12
 80040c0:	4619      	mov	r1, r3
 80040c2:	480d      	ldr	r0, [pc, #52]	; (80040f8 <MX_TIM2_Init+0xa4>)
 80040c4:	f005 fec2 	bl	8009e4c <HAL_TIM_Encoder_Init>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80040ce:	f001 fe69 	bl	8005da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040d2:	2300      	movs	r3, #0
 80040d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80040da:	1d3b      	adds	r3, r7, #4
 80040dc:	4619      	mov	r1, r3
 80040de:	4806      	ldr	r0, [pc, #24]	; (80040f8 <MX_TIM2_Init+0xa4>)
 80040e0:	f006 fd6e 	bl	800abc0 <HAL_TIMEx_MasterConfigSynchronization>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80040ea:	f001 fe5b 	bl	8005da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80040ee:	bf00      	nop
 80040f0:	3730      	adds	r7, #48	; 0x30
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000500 	.word	0x20000500

080040fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004102:	f107 0308 	add.w	r3, r7, #8
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	605a      	str	r2, [r3, #4]
 800410c:	609a      	str	r2, [r3, #8]
 800410e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004110:	463b      	mov	r3, r7
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004118:	4b1c      	ldr	r3, [pc, #112]	; (800418c <MX_TIM5_Init+0x90>)
 800411a:	4a1d      	ldr	r2, [pc, #116]	; (8004190 <MX_TIM5_Init+0x94>)
 800411c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 800411e:	4b1b      	ldr	r3, [pc, #108]	; (800418c <MX_TIM5_Init+0x90>)
 8004120:	2263      	movs	r2, #99	; 0x63
 8004122:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004124:	4b19      	ldr	r3, [pc, #100]	; (800418c <MX_TIM5_Init+0x90>)
 8004126:	2200      	movs	r2, #0
 8004128:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99999;
 800412a:	4b18      	ldr	r3, [pc, #96]	; (800418c <MX_TIM5_Init+0x90>)
 800412c:	4a19      	ldr	r2, [pc, #100]	; (8004194 <MX_TIM5_Init+0x98>)
 800412e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004130:	4b16      	ldr	r3, [pc, #88]	; (800418c <MX_TIM5_Init+0x90>)
 8004132:	2200      	movs	r2, #0
 8004134:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004136:	4b15      	ldr	r3, [pc, #84]	; (800418c <MX_TIM5_Init+0x90>)
 8004138:	2200      	movs	r2, #0
 800413a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800413c:	4813      	ldr	r0, [pc, #76]	; (800418c <MX_TIM5_Init+0x90>)
 800413e:	f005 fca5 	bl	8009a8c <HAL_TIM_Base_Init>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8004148:	f001 fe2c 	bl	8005da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800414c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004150:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004152:	f107 0308 	add.w	r3, r7, #8
 8004156:	4619      	mov	r1, r3
 8004158:	480c      	ldr	r0, [pc, #48]	; (800418c <MX_TIM5_Init+0x90>)
 800415a:	f006 f975 	bl	800a448 <HAL_TIM_ConfigClockSource>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8004164:	f001 fe1e 	bl	8005da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004168:	2320      	movs	r3, #32
 800416a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800416c:	2300      	movs	r3, #0
 800416e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004170:	463b      	mov	r3, r7
 8004172:	4619      	mov	r1, r3
 8004174:	4805      	ldr	r0, [pc, #20]	; (800418c <MX_TIM5_Init+0x90>)
 8004176:	f006 fd23 	bl	800abc0 <HAL_TIMEx_MasterConfigSynchronization>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8004180:	f001 fe10 	bl	8005da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004184:	bf00      	nop
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20000548 	.word	0x20000548
 8004190:	40000c00 	.word	0x40000c00
 8004194:	0001869f 	.word	0x0001869f

08004198 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800419c:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <MX_TIM11_Init+0x40>)
 800419e:	4a0f      	ldr	r2, [pc, #60]	; (80041dc <MX_TIM11_Init+0x44>)
 80041a0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80041a2:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <MX_TIM11_Init+0x40>)
 80041a4:	2263      	movs	r2, #99	; 0x63
 80041a6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <MX_TIM11_Init+0x40>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80041ae:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <MX_TIM11_Init+0x40>)
 80041b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041b4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041b6:	4b08      	ldr	r3, [pc, #32]	; (80041d8 <MX_TIM11_Init+0x40>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041bc:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <MX_TIM11_Init+0x40>)
 80041be:	2200      	movs	r2, #0
 80041c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80041c2:	4805      	ldr	r0, [pc, #20]	; (80041d8 <MX_TIM11_Init+0x40>)
 80041c4:	f005 fc62 	bl	8009a8c <HAL_TIM_Base_Init>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80041ce:	f001 fde9 	bl	8005da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000590 	.word	0x20000590
 80041dc:	40014800 	.word	0x40014800

080041e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <MX_USART2_UART_Init+0x50>)
 80041e6:	4a13      	ldr	r2, [pc, #76]	; (8004234 <MX_USART2_UART_Init+0x54>)
 80041e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <MX_USART2_UART_Init+0x50>)
 80041ec:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80041f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80041f2:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <MX_USART2_UART_Init+0x50>)
 80041f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041f8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80041fa:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <MX_USART2_UART_Init+0x50>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <MX_USART2_UART_Init+0x50>)
 8004202:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004208:	4b09      	ldr	r3, [pc, #36]	; (8004230 <MX_USART2_UART_Init+0x50>)
 800420a:	220c      	movs	r2, #12
 800420c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800420e:	4b08      	ldr	r3, [pc, #32]	; (8004230 <MX_USART2_UART_Init+0x50>)
 8004210:	2200      	movs	r2, #0
 8004212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <MX_USART2_UART_Init+0x50>)
 8004216:	2200      	movs	r2, #0
 8004218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800421a:	4805      	ldr	r0, [pc, #20]	; (8004230 <MX_USART2_UART_Init+0x50>)
 800421c:	f006 fda4 	bl	800ad68 <HAL_UART_Init>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8004226:	f001 fdbd 	bl	8005da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800422a:	bf00      	nop
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	200005d8 	.word	0x200005d8
 8004234:	40004400 	.word	0x40004400

08004238 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800423e:	2300      	movs	r3, #0
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	4b10      	ldr	r3, [pc, #64]	; (8004284 <MX_DMA_Init+0x4c>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	4a0f      	ldr	r2, [pc, #60]	; (8004284 <MX_DMA_Init+0x4c>)
 8004248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800424c:	6313      	str	r3, [r2, #48]	; 0x30
 800424e:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <MX_DMA_Init+0x4c>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004256:	607b      	str	r3, [r7, #4]
 8004258:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800425a:	2200      	movs	r2, #0
 800425c:	2100      	movs	r1, #0
 800425e:	2010      	movs	r0, #16
 8004260:	f002 f9d9 	bl	8006616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004264:	2010      	movs	r0, #16
 8004266:	f002 f9f2 	bl	800664e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800426a:	2200      	movs	r2, #0
 800426c:	2100      	movs	r1, #0
 800426e:	2011      	movs	r0, #17
 8004270:	f002 f9d1 	bl	8006616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004274:	2011      	movs	r0, #17
 8004276:	f002 f9ea 	bl	800664e <HAL_NVIC_EnableIRQ>

}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40023800 	.word	0x40023800

08004288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	; 0x28
 800428c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800428e:	f107 0314 	add.w	r3, r7, #20
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	609a      	str	r2, [r3, #8]
 800429a:	60da      	str	r2, [r3, #12]
 800429c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	4b4e      	ldr	r3, [pc, #312]	; (80043dc <MX_GPIO_Init+0x154>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	4a4d      	ldr	r2, [pc, #308]	; (80043dc <MX_GPIO_Init+0x154>)
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	6313      	str	r3, [r2, #48]	; 0x30
 80042ae:	4b4b      	ldr	r3, [pc, #300]	; (80043dc <MX_GPIO_Init+0x154>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042ba:	2300      	movs	r3, #0
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	4b47      	ldr	r3, [pc, #284]	; (80043dc <MX_GPIO_Init+0x154>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	4a46      	ldr	r2, [pc, #280]	; (80043dc <MX_GPIO_Init+0x154>)
 80042c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ca:	4b44      	ldr	r3, [pc, #272]	; (80043dc <MX_GPIO_Init+0x154>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	4b40      	ldr	r3, [pc, #256]	; (80043dc <MX_GPIO_Init+0x154>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	4a3f      	ldr	r2, [pc, #252]	; (80043dc <MX_GPIO_Init+0x154>)
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	6313      	str	r3, [r2, #48]	; 0x30
 80042e6:	4b3d      	ldr	r3, [pc, #244]	; (80043dc <MX_GPIO_Init+0x154>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	60bb      	str	r3, [r7, #8]
 80042f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	4b39      	ldr	r3, [pc, #228]	; (80043dc <MX_GPIO_Init+0x154>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	4a38      	ldr	r2, [pc, #224]	; (80043dc <MX_GPIO_Init+0x154>)
 80042fc:	f043 0302 	orr.w	r3, r3, #2
 8004300:	6313      	str	r3, [r2, #48]	; 0x30
 8004302:	4b36      	ldr	r3, [pc, #216]	; (80043dc <MX_GPIO_Init+0x154>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	607b      	str	r3, [r7, #4]
 800430c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 800430e:	2200      	movs	r2, #0
 8004310:	f44f 7108 	mov.w	r1, #544	; 0x220
 8004314:	4832      	ldr	r0, [pc, #200]	; (80043e0 <MX_GPIO_Init+0x158>)
 8004316:	f002 ff61 	bl	80071dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin, GPIO_PIN_RESET);
 800431a:	2200      	movs	r2, #0
 800431c:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8004320:	4830      	ldr	r0, [pc, #192]	; (80043e4 <MX_GPIO_Init+0x15c>)
 8004322:	f002 ff5b 	bl	80071dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800432a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800432c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004336:	f107 0314 	add.w	r3, r7, #20
 800433a:	4619      	mov	r1, r3
 800433c:	482a      	ldr	r0, [pc, #168]	; (80043e8 <MX_GPIO_Init+0x160>)
 800433e:	f002 fdb1 	bl	8006ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 8004342:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004348:	2301      	movs	r3, #1
 800434a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434c:	2300      	movs	r3, #0
 800434e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004350:	2300      	movs	r3, #0
 8004352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004354:	f107 0314 	add.w	r3, r7, #20
 8004358:	4619      	mov	r1, r3
 800435a:	4821      	ldr	r0, [pc, #132]	; (80043e0 <MX_GPIO_Init+0x158>)
 800435c:	f002 fda2 	bl	8006ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_RedLamp_Pin Pin_YelLamp_Pin Pin_BlueLamp_Pin */
  GPIO_InitStruct.Pin = Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin;
 8004360:	f44f 6383 	mov.w	r3, #1048	; 0x418
 8004364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004366:	2301      	movs	r3, #1
 8004368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436a:	2300      	movs	r3, #0
 800436c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800436e:	2300      	movs	r3, #0
 8004370:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004372:	f107 0314 	add.w	r3, r7, #20
 8004376:	4619      	mov	r1, r3
 8004378:	481a      	ldr	r0, [pc, #104]	; (80043e4 <MX_GPIO_Init+0x15c>)
 800437a:	f002 fd93 	bl	8006ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Proxi_Pin */
  GPIO_InitStruct.Pin = Pin_Proxi_Pin;
 800437e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004384:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8004388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Proxi_GPIO_Port, &GPIO_InitStruct);
 800438e:	f107 0314 	add.w	r3, r7, #20
 8004392:	4619      	mov	r1, r3
 8004394:	4812      	ldr	r0, [pc, #72]	; (80043e0 <MX_GPIO_Init+0x158>)
 8004396:	f002 fd85 	bl	8006ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Emer_Pin */
  GPIO_InitStruct.Pin = Pin_Emer_Pin;
 800439a:	2320      	movs	r3, #32
 800439c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800439e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80043a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Emer_GPIO_Port, &GPIO_InitStruct);
 80043a8:	f107 0314 	add.w	r3, r7, #20
 80043ac:	4619      	mov	r1, r3
 80043ae:	480d      	ldr	r0, [pc, #52]	; (80043e4 <MX_GPIO_Init+0x15c>)
 80043b0:	f002 fd78 	bl	8006ea4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80043b4:	2200      	movs	r2, #0
 80043b6:	2100      	movs	r1, #0
 80043b8:	2017      	movs	r0, #23
 80043ba:	f002 f92c 	bl	8006616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80043be:	2017      	movs	r0, #23
 80043c0:	f002 f945 	bl	800664e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80043c4:	2200      	movs	r2, #0
 80043c6:	2100      	movs	r1, #0
 80043c8:	2028      	movs	r0, #40	; 0x28
 80043ca:	f002 f924 	bl	8006616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043ce:	2028      	movs	r0, #40	; 0x28
 80043d0:	f002 f93d 	bl	800664e <HAL_NVIC_EnableIRQ>

}
 80043d4:	bf00      	nop
 80043d6:	3728      	adds	r7, #40	; 0x28
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40023800 	.word	0x40023800
 80043e0:	40020000 	.word	0x40020000
 80043e4:	40020400 	.word	0x40020400
 80043e8:	40020800 	.word	0x40020800

080043ec <Int32Abs>:

/* USER CODE BEGIN 4 */
uint32_t Int32Abs(int32_t number)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
	if(number<0){
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	da02      	bge.n	8004400 <Int32Abs+0x14>
		return number*-1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	425b      	negs	r3, r3
 80043fe:	e000      	b.n	8004402 <Int32Abs+0x16>
	}else{
		return number;
 8004400:	687b      	ldr	r3, [r7, #4]
	}
}
 8004402:	4618      	mov	r0, r3
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <EncoderRead>:

void EncoderRead()
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 8004414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	461a      	mov	r2, r3
 800441c:	4b32      	ldr	r3, [pc, #200]	; (80044e8 <EncoderRead+0xd8>)
 800441e:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 8004420:	4b31      	ldr	r3, [pc, #196]	; (80044e8 <EncoderRead+0xd8>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b30      	ldr	r3, [pc, #192]	; (80044e8 <EncoderRead+0xd8>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	1ad2      	subs	r2, r2, r3
 800442a:	4b30      	ldr	r3, [pc, #192]	; (80044ec <EncoderRead+0xdc>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	425b      	negs	r3, r3
 8004430:	429a      	cmp	r2, r3
 8004432:	da07      	bge.n	8004444 <EncoderRead+0x34>
		WrappingStep+=12000;
 8004434:	4b2e      	ldr	r3, [pc, #184]	; (80044f0 <EncoderRead+0xe0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 800443c:	3320      	adds	r3, #32
 800443e:	4a2c      	ldr	r2, [pc, #176]	; (80044f0 <EncoderRead+0xe0>)
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	e00f      	b.n	8004464 <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 8004444:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <EncoderRead+0xd8>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4b27      	ldr	r3, [pc, #156]	; (80044e8 <EncoderRead+0xd8>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	1ad2      	subs	r2, r2, r3
 800444e:	4b27      	ldr	r3, [pc, #156]	; (80044ec <EncoderRead+0xdc>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	db06      	blt.n	8004464 <EncoderRead+0x54>
		WrappingStep-=12000;
 8004456:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <EncoderRead+0xe0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 800445e:	3b20      	subs	r3, #32
 8004460:	4a23      	ldr	r2, [pc, #140]	; (80044f0 <EncoderRead+0xe0>)
 8004462:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 8004464:	4b20      	ldr	r3, [pc, #128]	; (80044e8 <EncoderRead+0xd8>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4b21      	ldr	r3, [pc, #132]	; (80044f0 <EncoderRead+0xe0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4413      	add	r3, r2
 800446e:	4a21      	ldr	r2, [pc, #132]	; (80044f4 <EncoderRead+0xe4>)
 8004470:	6013      	str	r3, [r2, #0]
	PositionDeg[0] = (PositionRaw/12000.0)*360.0;
 8004472:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <EncoderRead+0xe4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fc f800 	bl	800047c <__aeabi_i2d>
 800447c:	a318      	add	r3, pc, #96	; (adr r3, 80044e0 <EncoderRead+0xd0>)
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	f7fc f98f 	bl	80007a4 <__aeabi_ddiv>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	4610      	mov	r0, r2
 800448c:	4619      	mov	r1, r3
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <EncoderRead+0xe8>)
 8004494:	f7fc f85c 	bl	8000550 <__aeabi_dmul>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4610      	mov	r0, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	f7fc fa88 	bl	80009b4 <__aeabi_d2f>
 80044a4:	4603      	mov	r3, r0
 80044a6:	4a15      	ldr	r2, [pc, #84]	; (80044fc <EncoderRead+0xec>)
 80044a8:	6013      	str	r3, [r2, #0]
	VelocityDeg = ((PositionDeg[0] - PositionDeg[1])/dt);
 80044aa:	4b14      	ldr	r3, [pc, #80]	; (80044fc <EncoderRead+0xec>)
 80044ac:	ed93 7a00 	vldr	s14, [r3]
 80044b0:	4b12      	ldr	r3, [pc, #72]	; (80044fc <EncoderRead+0xec>)
 80044b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80044b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044ba:	eddf 6a11 	vldr	s13, [pc, #68]	; 8004500 <EncoderRead+0xf0>
 80044be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044c2:	4b10      	ldr	r3, [pc, #64]	; (8004504 <EncoderRead+0xf4>)
 80044c4:	edc3 7a00 	vstr	s15, [r3]
	EncoderRawData[1] = EncoderRawData[0];
 80044c8:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <EncoderRead+0xd8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a06      	ldr	r2, [pc, #24]	; (80044e8 <EncoderRead+0xd8>)
 80044ce:	6053      	str	r3, [r2, #4]
	PositionDeg[1] = PositionDeg[0];
 80044d0:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <EncoderRead+0xec>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a09      	ldr	r2, [pc, #36]	; (80044fc <EncoderRead+0xec>)
 80044d6:	6053      	str	r3, [r2, #4]
}
 80044d8:	bf00      	nop
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	f3af 8000 	nop.w
 80044e0:	00000000 	.word	0x00000000
 80044e4:	40c77000 	.word	0x40c77000
 80044e8:	200007e8 	.word	0x200007e8
 80044ec:	2000042c 	.word	0x2000042c
 80044f0:	200007f0 	.word	0x200007f0
 80044f4:	200007f4 	.word	0x200007f4
 80044f8:	40768000 	.word	0x40768000
 80044fc:	200007f8 	.word	0x200007f8
 8004500:	3c23d70a 	.word	0x3c23d70a
 8004504:	20000800 	.word	0x20000800

08004508 <Drivemotor>:

void Drivemotor(int32_t PWM){
 8004508:	b590      	push	{r4, r7, lr}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
		if(PWM<=0 && PWM>=-PWM_MAX){
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	dc11      	bgt.n	800453a <Drivemotor+0x32>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a25      	ldr	r2, [pc, #148]	; (80045b0 <Drivemotor+0xa8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	db0d      	blt.n	800453a <Drivemotor+0x32>
			htim1.Instance->CCR1=Int32Abs(PWM);
 800451e:	4b25      	ldr	r3, [pc, #148]	; (80045b4 <Drivemotor+0xac>)
 8004520:	681c      	ldr	r4, [r3, #0]
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff ff62 	bl	80043ec <Int32Abs>
 8004528:	4603      	mov	r3, r0
 800452a:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 800452c:	2200      	movs	r2, #0
 800452e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004532:	4821      	ldr	r0, [pc, #132]	; (80045b8 <Drivemotor+0xb0>)
 8004534:	f002 fe52 	bl	80071dc <HAL_GPIO_WritePin>
 8004538:	e036      	b.n	80045a8 <Drivemotor+0xa0>
		}else if (PWM<-PWM_MAX){
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <Drivemotor+0xa8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	da0b      	bge.n	800455a <Drivemotor+0x52>
			htim1.Instance->CCR1=PWM_MAX;
 8004542:	4b1c      	ldr	r3, [pc, #112]	; (80045b4 <Drivemotor+0xac>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f242 7210 	movw	r2, #10000	; 0x2710
 800454a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 800454c:	2200      	movs	r2, #0
 800454e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004552:	4819      	ldr	r0, [pc, #100]	; (80045b8 <Drivemotor+0xb0>)
 8004554:	f002 fe42 	bl	80071dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}else if(PWM>PWM_MAX){
			htim1.Instance->CCR1=PWM_MAX;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}
}
 8004558:	e026      	b.n	80045a8 <Drivemotor+0xa0>
		}else if(PWM>=0 && PWM<=PWM_MAX){
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	db12      	blt.n	8004586 <Drivemotor+0x7e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f242 7210 	movw	r2, #10000	; 0x2710
 8004566:	4293      	cmp	r3, r2
 8004568:	dc0d      	bgt.n	8004586 <Drivemotor+0x7e>
			htim1.Instance->CCR1=Int32Abs(PWM);
 800456a:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <Drivemotor+0xac>)
 800456c:	681c      	ldr	r4, [r3, #0]
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff ff3c 	bl	80043ec <Int32Abs>
 8004574:	4603      	mov	r3, r0
 8004576:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8004578:	2201      	movs	r2, #1
 800457a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800457e:	480e      	ldr	r0, [pc, #56]	; (80045b8 <Drivemotor+0xb0>)
 8004580:	f002 fe2c 	bl	80071dc <HAL_GPIO_WritePin>
 8004584:	e010      	b.n	80045a8 <Drivemotor+0xa0>
		}else if(PWM>PWM_MAX){
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f242 7210 	movw	r2, #10000	; 0x2710
 800458c:	4293      	cmp	r3, r2
 800458e:	dd0b      	ble.n	80045a8 <Drivemotor+0xa0>
			htim1.Instance->CCR1=PWM_MAX;
 8004590:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <Drivemotor+0xac>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f242 7210 	movw	r2, #10000	; 0x2710
 8004598:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 800459a:	2201      	movs	r2, #1
 800459c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045a0:	4805      	ldr	r0, [pc, #20]	; (80045b8 <Drivemotor+0xb0>)
 80045a2:	f002 fe1b 	bl	80071dc <HAL_GPIO_WritePin>
}
 80045a6:	e7ff      	b.n	80045a8 <Drivemotor+0xa0>
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd90      	pop	{r4, r7, pc}
 80045b0:	ffffd8f0 	.word	0xffffd8f0
 80045b4:	200004b8 	.word	0x200004b8
 80045b8:	40020000 	.word	0x40020000
 80045bc:	00000000 	.word	0x00000000

080045c0 <InverseTFofMotor>:

float InverseTFofMotor(float Velo, float PredictVelo)
{
 80045c0:	b5b0      	push	{r4, r5, r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80045ca:	edc7 0a00 	vstr	s1, [r7]
	static float VeloLast = 0;
	static float Voltage = 0;
	static float VoltageLast = 0;
	static float Pwm = 0;
	Voltage = (PredictVelo - (1.298649403776808*Velo) + (0.413830007244888*VeloLast) - (0.492093238713741*VoltageLast))/0.660367603263632;
 80045ce:	6838      	ldr	r0, [r7, #0]
 80045d0:	f7fb ff66 	bl	80004a0 <__aeabi_f2d>
 80045d4:	4604      	mov	r4, r0
 80045d6:	460d      	mov	r5, r1
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7fb ff61 	bl	80004a0 <__aeabi_f2d>
 80045de:	a345      	add	r3, pc, #276	; (adr r3, 80046f4 <InverseTFofMotor+0x134>)
 80045e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e4:	f7fb ffb4 	bl	8000550 <__aeabi_dmul>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4620      	mov	r0, r4
 80045ee:	4629      	mov	r1, r5
 80045f0:	f7fb fdf6 	bl	80001e0 <__aeabi_dsub>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4614      	mov	r4, r2
 80045fa:	461d      	mov	r5, r3
 80045fc:	4b38      	ldr	r3, [pc, #224]	; (80046e0 <InverseTFofMotor+0x120>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7fb ff4d 	bl	80004a0 <__aeabi_f2d>
 8004606:	a32e      	add	r3, pc, #184	; (adr r3, 80046c0 <InverseTFofMotor+0x100>)
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	f7fb ffa0 	bl	8000550 <__aeabi_dmul>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4620      	mov	r0, r4
 8004616:	4629      	mov	r1, r5
 8004618:	f7fb fde4 	bl	80001e4 <__adddf3>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4614      	mov	r4, r2
 8004622:	461d      	mov	r5, r3
 8004624:	4b2f      	ldr	r3, [pc, #188]	; (80046e4 <InverseTFofMotor+0x124>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f7fb ff39 	bl	80004a0 <__aeabi_f2d>
 800462e:	a326      	add	r3, pc, #152	; (adr r3, 80046c8 <InverseTFofMotor+0x108>)
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	f7fb ff8c 	bl	8000550 <__aeabi_dmul>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	4620      	mov	r0, r4
 800463e:	4629      	mov	r1, r5
 8004640:	f7fb fdce 	bl	80001e0 <__aeabi_dsub>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4610      	mov	r0, r2
 800464a:	4619      	mov	r1, r3
 800464c:	a320      	add	r3, pc, #128	; (adr r3, 80046d0 <InverseTFofMotor+0x110>)
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	f7fc f8a7 	bl	80007a4 <__aeabi_ddiv>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4610      	mov	r0, r2
 800465c:	4619      	mov	r1, r3
 800465e:	f7fc f9a9 	bl	80009b4 <__aeabi_d2f>
 8004662:	4603      	mov	r3, r0
 8004664:	4a20      	ldr	r2, [pc, #128]	; (80046e8 <InverseTFofMotor+0x128>)
 8004666:	6013      	str	r3, [r2, #0]
	Pwm = (Voltage * 10000.0)/12.0;
 8004668:	4b1f      	ldr	r3, [pc, #124]	; (80046e8 <InverseTFofMotor+0x128>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f7fb ff17 	bl	80004a0 <__aeabi_f2d>
 8004672:	a319      	add	r3, pc, #100	; (adr r3, 80046d8 <InverseTFofMotor+0x118>)
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f7fb ff6a 	bl	8000550 <__aeabi_dmul>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4610      	mov	r0, r2
 8004682:	4619      	mov	r1, r3
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	4b18      	ldr	r3, [pc, #96]	; (80046ec <InverseTFofMotor+0x12c>)
 800468a:	f7fc f88b 	bl	80007a4 <__aeabi_ddiv>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4610      	mov	r0, r2
 8004694:	4619      	mov	r1, r3
 8004696:	f7fc f98d 	bl	80009b4 <__aeabi_d2f>
 800469a:	4603      	mov	r3, r0
 800469c:	4a14      	ldr	r2, [pc, #80]	; (80046f0 <InverseTFofMotor+0x130>)
 800469e:	6013      	str	r3, [r2, #0]
	VoltageLast = Voltage;
 80046a0:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <InverseTFofMotor+0x128>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a0f      	ldr	r2, [pc, #60]	; (80046e4 <InverseTFofMotor+0x124>)
 80046a6:	6013      	str	r3, [r2, #0]
	VeloLast = Velo;
 80046a8:	4a0d      	ldr	r2, [pc, #52]	; (80046e0 <InverseTFofMotor+0x120>)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6013      	str	r3, [r2, #0]
	return Pwm;
 80046ae:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <InverseTFofMotor+0x130>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	ee07 3a90 	vmov	s15, r3
}
 80046b6:	eeb0 0a67 	vmov.f32	s0, s15
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bdb0      	pop	{r4, r5, r7, pc}
 80046c0:	dace185d 	.word	0xdace185d
 80046c4:	3fda7c30 	.word	0x3fda7c30
 80046c8:	a3b6ed62 	.word	0xa3b6ed62
 80046cc:	3fdf7e74 	.word	0x3fdf7e74
 80046d0:	3d6b5dd1 	.word	0x3d6b5dd1
 80046d4:	3fe521bb 	.word	0x3fe521bb
 80046d8:	00000000 	.word	0x00000000
 80046dc:	40c38800 	.word	0x40c38800
 80046e0:	20000b0c 	.word	0x20000b0c
 80046e4:	20000b10 	.word	0x20000b10
 80046e8:	20000b14 	.word	0x20000b14
 80046ec:	40280000 	.word	0x40280000
 80046f0:	20000b18 	.word	0x20000b18
 80046f4:	98e30f85 	.word	0x98e30f85
 80046f8:	3ff4c744 	.word	0x3ff4c744

080046fc <ControllLoopAndErrorHandler>:


void ControllLoopAndErrorHandler()
{
 80046fc:	b5b0      	push	{r4, r5, r7, lr}
 80046fe:	ed2d 8b02 	vpush	{d8}
 8004702:	b084      	sub	sp, #16
 8004704:	af04      	add	r7, sp, #16
//		Robot.flagStartTime = 0;
//	}
//	CurrentTime = Micros();
//	PredictTime = CurrentTime + 10000;
//	TrajectoryEvaluation(&traject,StartTime,CurrentTime,PredictTime);
	if(Robot.MotorIsOn == 1)
 8004706:	4b89      	ldr	r3, [pc, #548]	; (800492c <ControllLoopAndErrorHandler+0x230>)
 8004708:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800470c:	2b01      	cmp	r3, #1
 800470e:	f040 80fb 	bne.w	8004908 <ControllLoopAndErrorHandler+0x20c>
	{
		if (Robot.flagStartTime == 1)
 8004712:	4b86      	ldr	r3, [pc, #536]	; (800492c <ControllLoopAndErrorHandler+0x230>)
 8004714:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004718:	2b01      	cmp	r3, #1
 800471a:	d10f      	bne.n	800473c <ControllLoopAndErrorHandler+0x40>
		{
			StartTime = Micros();
 800471c:	f001 fb2a 	bl	8005d74 <Micros>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4982      	ldr	r1, [pc, #520]	; (8004930 <ControllLoopAndErrorHandler+0x234>)
 8004726:	e9c1 2300 	strd	r2, r3, [r1]
			Robot.flagStartTime = 0;
 800472a:	4b80      	ldr	r3, [pc, #512]	; (800492c <ControllLoopAndErrorHandler+0x230>)
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			traject.TrajectoryFlag = 0;
 8004732:	4b80      	ldr	r3, [pc, #512]	; (8004934 <ControllLoopAndErrorHandler+0x238>)
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		CurrentTime = Micros();
 800473c:	f001 fb1a 	bl	8005d74 <Micros>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	497c      	ldr	r1, [pc, #496]	; (8004938 <ControllLoopAndErrorHandler+0x23c>)
 8004746:	e9c1 2300 	strd	r2, r3, [r1]
		PredictTime = CurrentTime + 10000;
 800474a:	4b7b      	ldr	r3, [pc, #492]	; (8004938 <ControllLoopAndErrorHandler+0x23c>)
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	f242 7110 	movw	r1, #10000	; 0x2710
 8004754:	1854      	adds	r4, r2, r1
 8004756:	f143 0500 	adc.w	r5, r3, #0
 800475a:	4b78      	ldr	r3, [pc, #480]	; (800493c <ControllLoopAndErrorHandler+0x240>)
 800475c:	e9c3 4500 	strd	r4, r5, [r3]
		TrajectoryEvaluation(&traject,StartTime,CurrentTime,PredictTime);
 8004760:	4b73      	ldr	r3, [pc, #460]	; (8004930 <ControllLoopAndErrorHandler+0x234>)
 8004762:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004766:	4b74      	ldr	r3, [pc, #464]	; (8004938 <ControllLoopAndErrorHandler+0x23c>)
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	4973      	ldr	r1, [pc, #460]	; (800493c <ControllLoopAndErrorHandler+0x240>)
 800476e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004772:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004776:	e9cd 2300 	strd	r2, r3, [sp]
 800477a:	4622      	mov	r2, r4
 800477c:	462b      	mov	r3, r5
 800477e:	486d      	ldr	r0, [pc, #436]	; (8004934 <ControllLoopAndErrorHandler+0x238>)
 8004780:	f7fe fb6a 	bl	8002e58 <TrajectoryEvaluation>
		Robot.QX = traject.QX;
 8004784:	4b6b      	ldr	r3, [pc, #428]	; (8004934 <ControllLoopAndErrorHandler+0x238>)
 8004786:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800478a:	4a68      	ldr	r2, [pc, #416]	; (800492c <ControllLoopAndErrorHandler+0x230>)
 800478c:	6193      	str	r3, [r2, #24]
		Robot.QV = traject.QV;
 800478e:	4b69      	ldr	r3, [pc, #420]	; (8004934 <ControllLoopAndErrorHandler+0x238>)
 8004790:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8004794:	4a65      	ldr	r2, [pc, #404]	; (800492c <ControllLoopAndErrorHandler+0x230>)
 8004796:	61d3      	str	r3, [r2, #28]
		if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0 && AbsVal(Robot.GoalPositon) == AbsVal(traject.QX))
 8004798:	4b64      	ldr	r3, [pc, #400]	; (800492c <ControllLoopAndErrorHandler+0x230>)
 800479a:	ed93 7a03 	vldr	s14, [r3, #12]
 800479e:	4b63      	ldr	r3, [pc, #396]	; (800492c <ControllLoopAndErrorHandler+0x230>)
 80047a0:	edd3 7a00 	vldr	s15, [r3]
 80047a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047a8:	eeb0 0a67 	vmov.f32	s0, s15
 80047ac:	f7fd f912 	bl	80019d4 <AbsVal>
 80047b0:	eef0 7a40 	vmov.f32	s15, s0
 80047b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c0:	d547      	bpl.n	8004852 <ControllLoopAndErrorHandler+0x156>
 80047c2:	4b5a      	ldr	r3, [pc, #360]	; (800492c <ControllLoopAndErrorHandler+0x230>)
 80047c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80047c8:	eeb0 0a67 	vmov.f32	s0, s15
 80047cc:	f7fd f902 	bl	80019d4 <AbsVal>
 80047d0:	eef0 7a40 	vmov.f32	s15, s0
 80047d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e0:	d537      	bpl.n	8004852 <ControllLoopAndErrorHandler+0x156>
 80047e2:	4b52      	ldr	r3, [pc, #328]	; (800492c <ControllLoopAndErrorHandler+0x230>)
 80047e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80047e8:	eeb0 0a67 	vmov.f32	s0, s15
 80047ec:	f7fd f8f2 	bl	80019d4 <AbsVal>
 80047f0:	eeb0 8a40 	vmov.f32	s16, s0
 80047f4:	4b4f      	ldr	r3, [pc, #316]	; (8004934 <ControllLoopAndErrorHandler+0x238>)
 80047f6:	edd3 7a81 	vldr	s15, [r3, #516]	; 0x204
 80047fa:	eeb0 0a67 	vmov.f32	s0, s15
 80047fe:	f7fd f8e9 	bl	80019d4 <AbsVal>
 8004802:	eef0 7a40 	vmov.f32	s15, s0
 8004806:	eeb4 8a67 	vcmp.f32	s16, s15
 800480a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480e:	d120      	bne.n	8004852 <ControllLoopAndErrorHandler+0x156>
		{
			PWMCHECKER = 0.0;
 8004810:	4b4b      	ldr	r3, [pc, #300]	; (8004940 <ControllLoopAndErrorHandler+0x244>)
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
			Drivemotor(PWMCHECKER);
 8004818:	4b49      	ldr	r3, [pc, #292]	; (8004940 <ControllLoopAndErrorHandler+0x244>)
 800481a:	edd3 7a00 	vldr	s15, [r3]
 800481e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004822:	ee17 0a90 	vmov	r0, s15
 8004826:	f7ff fe6f 	bl	8004508 <Drivemotor>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800482a:	2200      	movs	r2, #0
 800482c:	2108      	movs	r1, #8
 800482e:	4845      	ldr	r0, [pc, #276]	; (8004944 <ControllLoopAndErrorHandler+0x248>)
 8004830:	f002 fcd4 	bl	80071dc <HAL_GPIO_WritePin>
			Robot.RunningFlag = 0;
 8004834:	4b3d      	ldr	r3, [pc, #244]	; (800492c <ControllLoopAndErrorHandler+0x230>)
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			Robot.MotorIsOn = 0;
 800483c:	4b3b      	ldr	r3, [pc, #236]	; (800492c <ControllLoopAndErrorHandler+0x230>)
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PIDAController_Init(&PidVelo);
 8004844:	4840      	ldr	r0, [pc, #256]	; (8004948 <ControllLoopAndErrorHandler+0x24c>)
 8004846:	f7fc fd9d 	bl	8001384 <PIDAController_Init>
			PIDAController_Init(&PidPos);
 800484a:	4840      	ldr	r0, [pc, #256]	; (800494c <ControllLoopAndErrorHandler+0x250>)
 800484c:	f7fc fd9a 	bl	8001384 <PIDAController_Init>
	else
	{
		PWMCHECKER = 0.0;
		Drivemotor(PWMCHECKER);
	}
}
 8004850:	e067      	b.n	8004922 <ControllLoopAndErrorHandler+0x226>
			PIDAPositonController_Update(&PidPos, &traject, Robot.QX , Robot.Position, Robot.QV ,traject.Vmax);
 8004852:	4b36      	ldr	r3, [pc, #216]	; (800492c <ControllLoopAndErrorHandler+0x230>)
 8004854:	edd3 7a06 	vldr	s15, [r3, #24]
 8004858:	4b34      	ldr	r3, [pc, #208]	; (800492c <ControllLoopAndErrorHandler+0x230>)
 800485a:	ed93 7a00 	vldr	s14, [r3]
 800485e:	4b33      	ldr	r3, [pc, #204]	; (800492c <ControllLoopAndErrorHandler+0x230>)
 8004860:	edd3 6a07 	vldr	s13, [r3, #28]
 8004864:	4b33      	ldr	r3, [pc, #204]	; (8004934 <ControllLoopAndErrorHandler+0x238>)
 8004866:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 800486a:	eef0 1a46 	vmov.f32	s3, s12
 800486e:	eeb0 1a66 	vmov.f32	s2, s13
 8004872:	eef0 0a47 	vmov.f32	s1, s14
 8004876:	eeb0 0a67 	vmov.f32	s0, s15
 800487a:	492e      	ldr	r1, [pc, #184]	; (8004934 <ControllLoopAndErrorHandler+0x238>)
 800487c:	4833      	ldr	r0, [pc, #204]	; (800494c <ControllLoopAndErrorHandler+0x250>)
 800487e:	f7fc fdb1 	bl	80013e4 <PIDAPositonController_Update>
			PIDAVelocityController_Update(&PidVelo, &traject, Robot.QV + PidPos.ControllerOut , Robot.Velocity, Robot.QV ,traject.Vmax);
 8004882:	4b2a      	ldr	r3, [pc, #168]	; (800492c <ControllLoopAndErrorHandler+0x230>)
 8004884:	ed93 7a07 	vldr	s14, [r3, #28]
 8004888:	4b30      	ldr	r3, [pc, #192]	; (800494c <ControllLoopAndErrorHandler+0x250>)
 800488a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800488e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004892:	4b26      	ldr	r3, [pc, #152]	; (800492c <ControllLoopAndErrorHandler+0x230>)
 8004894:	ed93 7a01 	vldr	s14, [r3, #4]
 8004898:	4b24      	ldr	r3, [pc, #144]	; (800492c <ControllLoopAndErrorHandler+0x230>)
 800489a:	edd3 6a07 	vldr	s13, [r3, #28]
 800489e:	4b25      	ldr	r3, [pc, #148]	; (8004934 <ControllLoopAndErrorHandler+0x238>)
 80048a0:	ed93 6a56 	vldr	s12, [r3, #344]	; 0x158
 80048a4:	eef0 1a46 	vmov.f32	s3, s12
 80048a8:	eeb0 1a66 	vmov.f32	s2, s13
 80048ac:	eef0 0a47 	vmov.f32	s1, s14
 80048b0:	eeb0 0a67 	vmov.f32	s0, s15
 80048b4:	491f      	ldr	r1, [pc, #124]	; (8004934 <ControllLoopAndErrorHandler+0x238>)
 80048b6:	4824      	ldr	r0, [pc, #144]	; (8004948 <ControllLoopAndErrorHandler+0x24c>)
 80048b8:	f7fc fed8 	bl	800166c <PIDAVelocityController_Update>
			invTFOutput = InverseTFofMotor(traject.QV,traject.QVP);
 80048bc:	4b1d      	ldr	r3, [pc, #116]	; (8004934 <ControllLoopAndErrorHandler+0x238>)
 80048be:	edd3 7a7f 	vldr	s15, [r3, #508]	; 0x1fc
 80048c2:	4b1c      	ldr	r3, [pc, #112]	; (8004934 <ControllLoopAndErrorHandler+0x238>)
 80048c4:	ed93 7a80 	vldr	s14, [r3, #512]	; 0x200
 80048c8:	eef0 0a47 	vmov.f32	s1, s14
 80048cc:	eeb0 0a67 	vmov.f32	s0, s15
 80048d0:	f7ff fe76 	bl	80045c0 <InverseTFofMotor>
 80048d4:	eef0 7a40 	vmov.f32	s15, s0
 80048d8:	4b1d      	ldr	r3, [pc, #116]	; (8004950 <ControllLoopAndErrorHandler+0x254>)
 80048da:	edc3 7a00 	vstr	s15, [r3]
			PWMCHECKER = PidVelo.ControllerOut + invTFOutput;
 80048de:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <ControllLoopAndErrorHandler+0x24c>)
 80048e0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80048e4:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <ControllLoopAndErrorHandler+0x254>)
 80048e6:	edd3 7a00 	vldr	s15, [r3]
 80048ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ee:	4b14      	ldr	r3, [pc, #80]	; (8004940 <ControllLoopAndErrorHandler+0x244>)
 80048f0:	edc3 7a00 	vstr	s15, [r3]
			Drivemotor(PWMCHECKER);
 80048f4:	4b12      	ldr	r3, [pc, #72]	; (8004940 <ControllLoopAndErrorHandler+0x244>)
 80048f6:	edd3 7a00 	vldr	s15, [r3]
 80048fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048fe:	ee17 0a90 	vmov	r0, s15
 8004902:	f7ff fe01 	bl	8004508 <Drivemotor>
}
 8004906:	e00c      	b.n	8004922 <ControllLoopAndErrorHandler+0x226>
		PWMCHECKER = 0.0;
 8004908:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <ControllLoopAndErrorHandler+0x244>)
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
		Drivemotor(PWMCHECKER);
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <ControllLoopAndErrorHandler+0x244>)
 8004912:	edd3 7a00 	vldr	s15, [r3]
 8004916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800491a:	ee17 0a90 	vmov	r0, s15
 800491e:	f7ff fdf3 	bl	8004508 <Drivemotor>
}
 8004922:	bf00      	nop
 8004924:	46bd      	mov	sp, r7
 8004926:	ecbd 8b02 	vpop	{d8}
 800492a:	bdb0      	pop	{r4, r5, r7, pc}
 800492c:	200006dc 	.word	0x200006dc
 8004930:	20000ab0 	.word	0x20000ab0
 8004934:	2000086c 	.word	0x2000086c
 8004938:	20000ab8 	.word	0x20000ab8
 800493c:	20000ac0 	.word	0x20000ac0
 8004940:	20000868 	.word	0x20000868
 8004944:	40020400 	.word	0x40020400
 8004948:	20000808 	.word	0x20000808
 800494c:	20000838 	.word	0x20000838
 8004950:	20000804 	.word	0x20000804

08004954 <Ringbuf_Init>:

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 8004958:	2214      	movs	r2, #20
 800495a:	2100      	movs	r1, #0
 800495c:	480e      	ldr	r0, [pc, #56]	; (8004998 <Ringbuf_Init+0x44>)
 800495e:	f007 ff29 	bl	800c7b4 <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 8004962:	2214      	movs	r2, #20
 8004964:	2100      	movs	r1, #0
 8004966:	480d      	ldr	r0, [pc, #52]	; (800499c <Ringbuf_Init+0x48>)
 8004968:	f007 ff24 	bl	800c7b4 <memset>

	oldPos = 0;
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <Ringbuf_Init+0x4c>)
 800496e:	2200      	movs	r2, #0
 8004970:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8004972:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <Ringbuf_Init+0x50>)
 8004974:	2200      	movs	r2, #0
 8004976:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 8004978:	2214      	movs	r2, #20
 800497a:	4907      	ldr	r1, [pc, #28]	; (8004998 <Ringbuf_Init+0x44>)
 800497c:	480a      	ldr	r0, [pc, #40]	; (80049a8 <Ringbuf_Init+0x54>)
 800497e:	f006 fabf 	bl	800af00 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8004982:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <Ringbuf_Init+0x58>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	4b08      	ldr	r3, [pc, #32]	; (80049ac <Ringbuf_Init+0x58>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0208 	bic.w	r2, r2, #8
 8004990:	601a      	str	r2, [r3, #0]
}
 8004992:	bf00      	nop
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000714 	.word	0x20000714
 800499c:	20000728 	.word	0x20000728
 80049a0:	20000746 	.word	0x20000746
 80049a4:	20000748 	.word	0x20000748
 80049a8:	200005d8 	.word	0x200005d8
 80049ac:	2000061c 	.word	0x2000061c

080049b0 <checkSum>:
	oldPos = 0;
	newPos = 0;
}

void checkSum (uint8_t *buffertoCheckSum, uint16_t Size)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	807b      	strh	r3, [r7, #2]
	uint8_t sum = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	73fb      	strb	r3, [r7, #15]
	modeByte = 0;
 80049c0:	4b52      	ldr	r3, [pc, #328]	; (8004b0c <checkSum+0x15c>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]
	switch(Size){
 80049c6:	887b      	ldrh	r3, [r7, #2]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d84f      	bhi.n	8004a6e <checkSum+0xbe>
 80049ce:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <checkSum+0x24>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	08004ac5 	.word	0x08004ac5
 80049d8:	080049e5 	.word	0x080049e5
 80049dc:	08004ac5 	.word	0x08004ac5
 80049e0:	08004a0b 	.word	0x08004a0b
	case 1:
	case 3:
		break;
	case 2:
		if(!(checkAck(buffertoCheckSum, Size))) modeByte = sum = buffertoCheckSum[oldPos];
 80049e4:	887b      	ldrh	r3, [r7, #2]
 80049e6:	4619      	mov	r1, r3
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f897 	bl	8004b1c <checkAck>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d169      	bne.n	8004ac8 <checkSum+0x118>
 80049f4:	4b46      	ldr	r3, [pc, #280]	; (8004b10 <checkSum+0x160>)
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4413      	add	r3, r2
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	73fb      	strb	r3, [r7, #15]
 8004a02:	4a42      	ldr	r2, [pc, #264]	; (8004b0c <checkSum+0x15c>)
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	7013      	strb	r3, [r2, #0]
		break;
 8004a08:	e05e      	b.n	8004ac8 <checkSum+0x118>
	case 4:
		if(checkAck(buffertoCheckSum, Size)) modeByte = sum = buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8004a0a:	887b      	ldrh	r3, [r7, #2]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f884 	bl	8004b1c <checkAck>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <checkSum+0x80>
 8004a1a:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <checkSum+0x160>)
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	3302      	adds	r3, #2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	4413      	add	r3, r2
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	73fb      	strb	r3, [r7, #15]
 8004a28:	4a38      	ldr	r2, [pc, #224]	; (8004b0c <checkSum+0x15c>)
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	7013      	strb	r3, [r2, #0]
		else{
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
			modeByte = buffertoCheckSum[oldPos];
		}
		break;
 8004a2e:	e04c      	b.n	8004aca <checkSum+0x11a>
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8004a30:	4b37      	ldr	r3, [pc, #220]	; (8004b10 <checkSum+0x160>)
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4413      	add	r3, r2
 8004a3a:	781a      	ldrb	r2, [r3, #0]
 8004a3c:	4b34      	ldr	r3, [pc, #208]	; (8004b10 <checkSum+0x160>)
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	3301      	adds	r3, #1
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	440b      	add	r3, r1
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	4413      	add	r3, r2
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	4b30      	ldr	r3, [pc, #192]	; (8004b10 <checkSum+0x160>)
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	3302      	adds	r3, #2
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	440b      	add	r3, r1
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	4413      	add	r3, r2
 8004a5a:	73fb      	strb	r3, [r7, #15]
			modeByte = buffertoCheckSum[oldPos];
 8004a5c:	4b2c      	ldr	r3, [pc, #176]	; (8004b10 <checkSum+0x160>)
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4413      	add	r3, r2
 8004a66:	781a      	ldrb	r2, [r3, #0]
 8004a68:	4b28      	ldr	r3, [pc, #160]	; (8004b0c <checkSum+0x15c>)
 8004a6a:	701a      	strb	r2, [r3, #0]
		break;
 8004a6c:	e02d      	b.n	8004aca <checkSum+0x11a>
	default:
		modeByte = buffertoCheckSum[oldPos];
 8004a6e:	4b28      	ldr	r3, [pc, #160]	; (8004b10 <checkSum+0x160>)
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4413      	add	r3, r2
 8004a78:	781a      	ldrb	r2, [r3, #0]
 8004a7a:	4b24      	ldr	r3, [pc, #144]	; (8004b0c <checkSum+0x15c>)
 8004a7c:	701a      	strb	r2, [r3, #0]
		for (int index = 0; index < Size-1; ++index)
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	e019      	b.n	8004ab8 <checkSum+0x108>
		{
			sum = sum + buffertoCheckSum[oldPos+index % MainBuf_SIZE];
 8004a84:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <checkSum+0x160>)
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	4b21      	ldr	r3, [pc, #132]	; (8004b14 <checkSum+0x164>)
 8004a8e:	fb83 2301 	smull	r2, r3, r3, r1
 8004a92:	10da      	asrs	r2, r3, #3
 8004a94:	17cb      	asrs	r3, r1, #31
 8004a96:	1ad2      	subs	r2, r2, r3
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	1aca      	subs	r2, r1, r3
 8004aa2:	1883      	adds	r3, r0, r2
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	781a      	ldrb	r2, [r3, #0]
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	4413      	add	r3, r2
 8004ab0:	73fb      	strb	r3, [r7, #15]
		for (int index = 0; index < Size-1; ++index)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	60bb      	str	r3, [r7, #8]
 8004ab8:	887b      	ldrh	r3, [r7, #2]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	dbe0      	blt.n	8004a84 <checkSum+0xd4>
 8004ac2:	e002      	b.n	8004aca <checkSum+0x11a>
		break;
 8004ac4:	bf00      	nop
 8004ac6:	e000      	b.n	8004aca <checkSum+0x11a>
		break;
 8004ac8:	bf00      	nop
		}
	}

	if((uint8_t)buffertoCheckSum[oldPos+(Size-1) % MainBuf_SIZE] == (uint8_t)(~sum)) UARTstateManagement(MainBuf);
 8004aca:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <checkSum+0x160>)
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	887b      	ldrh	r3, [r7, #2]
 8004ad2:	1e59      	subs	r1, r3, #1
 8004ad4:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <checkSum+0x164>)
 8004ad6:	fb83 2301 	smull	r2, r3, r3, r1
 8004ada:	10da      	asrs	r2, r3, #3
 8004adc:	17cb      	asrs	r3, r1, #31
 8004ade:	1ad2      	subs	r2, r2, r3
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	1aca      	subs	r2, r1, r3
 8004aea:	1883      	adds	r3, r0, r2
 8004aec:	461a      	mov	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4413      	add	r3, r2
 8004af2:	781a      	ldrb	r2, [r3, #0]
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	43db      	mvns	r3, r3
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d102      	bne.n	8004b04 <checkSum+0x154>
 8004afe:	4806      	ldr	r0, [pc, #24]	; (8004b18 <checkSum+0x168>)
 8004b00:	f000 f89a 	bl	8004c38 <UARTstateManagement>
}
 8004b04:	bf00      	nop
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20000771 	.word	0x20000771
 8004b10:	20000746 	.word	0x20000746
 8004b14:	66666667 	.word	0x66666667
 8004b18:	20000728 	.word	0x20000728

08004b1c <checkAck>:

uint8_t checkAck (uint8_t *buffertoCheckAck, uint16_t Size)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	807b      	strh	r3, [r7, #2]
	if((buffertoCheckAck[oldPos] == 0b01011000) && (buffertoCheckAck[oldPos+1 % MainBuf_SIZE] == 0b01110101)) return 1;
 8004b28:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <checkAck+0x40>)
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4413      	add	r3, r2
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b58      	cmp	r3, #88	; 0x58
 8004b36:	d109      	bne.n	8004b4c <checkAck+0x30>
 8004b38:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <checkAck+0x40>)
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	4413      	add	r3, r2
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b75      	cmp	r3, #117	; 0x75
 8004b46:	d101      	bne.n	8004b4c <checkAck+0x30>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <checkAck+0x32>
	else return 0;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	20000746 	.word	0x20000746

08004b60 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	807b      	strh	r3, [r7, #2]
        if (huart->Instance == USART2)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a28      	ldr	r2, [pc, #160]	; (8004c14 <HAL_UARTEx_RxEventCallback+0xb4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d14a      	bne.n	8004c0c <HAL_UARTEx_RxEventCallback+0xac>
        {
                oldPos = newPos;
 8004b76:	4b28      	ldr	r3, [pc, #160]	; (8004c18 <HAL_UARTEx_RxEventCallback+0xb8>)
 8004b78:	881a      	ldrh	r2, [r3, #0]
 8004b7a:	4b28      	ldr	r3, [pc, #160]	; (8004c1c <HAL_UARTEx_RxEventCallback+0xbc>)
 8004b7c:	801a      	strh	r2, [r3, #0]
                dataSize = Size;
 8004b7e:	4a28      	ldr	r2, [pc, #160]	; (8004c20 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004b80:	887b      	ldrh	r3, [r7, #2]
 8004b82:	8013      	strh	r3, [r2, #0]
                if (oldPos+dataSize > MainBuf_SIZE)
 8004b84:	4b25      	ldr	r3, [pc, #148]	; (8004c1c <HAL_UARTEx_RxEventCallback+0xbc>)
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4b25      	ldr	r3, [pc, #148]	; (8004c20 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	4413      	add	r3, r2
 8004b90:	2b14      	cmp	r3, #20
 8004b92:	dd16      	ble.n	8004bc2 <HAL_UARTEx_RxEventCallback+0x62>
                {
                        oldPos = 0;
 8004b94:	4b21      	ldr	r3, [pc, #132]	; (8004c1c <HAL_UARTEx_RxEventCallback+0xbc>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	801a      	strh	r2, [r3, #0]
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8004b9a:	4b20      	ldr	r3, [pc, #128]	; (8004c1c <HAL_UARTEx_RxEventCallback+0xbc>)
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	4b20      	ldr	r3, [pc, #128]	; (8004c24 <HAL_UARTEx_RxEventCallback+0xc4>)
 8004ba2:	4413      	add	r3, r2
 8004ba4:	4a1e      	ldr	r2, [pc, #120]	; (8004c20 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004ba6:	8812      	ldrh	r2, [r2, #0]
 8004ba8:	491f      	ldr	r1, [pc, #124]	; (8004c28 <HAL_UARTEx_RxEventCallback+0xc8>)
 8004baa:	4618      	mov	r0, r3
 8004bac:	f007 fdf4 	bl	800c798 <memcpy>
                        newPos = dataSize+oldPos;
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	; (8004c20 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004bb2:	881a      	ldrh	r2, [r3, #0]
 8004bb4:	4b19      	ldr	r3, [pc, #100]	; (8004c1c <HAL_UARTEx_RxEventCallback+0xbc>)
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	4413      	add	r3, r2
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <HAL_UARTEx_RxEventCallback+0xb8>)
 8004bbe:	801a      	strh	r2, [r3, #0]
 8004bc0:	e012      	b.n	8004be8 <HAL_UARTEx_RxEventCallback+0x88>
                }
                else
                {
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8004bc2:	4b16      	ldr	r3, [pc, #88]	; (8004c1c <HAL_UARTEx_RxEventCallback+0xbc>)
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	4b16      	ldr	r3, [pc, #88]	; (8004c24 <HAL_UARTEx_RxEventCallback+0xc4>)
 8004bca:	4413      	add	r3, r2
 8004bcc:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004bce:	8812      	ldrh	r2, [r2, #0]
 8004bd0:	4915      	ldr	r1, [pc, #84]	; (8004c28 <HAL_UARTEx_RxEventCallback+0xc8>)
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f007 fde0 	bl	800c798 <memcpy>
                        newPos = dataSize+oldPos;
 8004bd8:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <HAL_UARTEx_RxEventCallback+0xc0>)
 8004bda:	881a      	ldrh	r2, [r3, #0]
 8004bdc:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <HAL_UARTEx_RxEventCallback+0xbc>)
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	4413      	add	r3, r2
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <HAL_UARTEx_RxEventCallback+0xb8>)
 8004be6:	801a      	strh	r2, [r3, #0]
                }

                checkSum(MainBuf, Size);
 8004be8:	887b      	ldrh	r3, [r7, #2]
 8004bea:	4619      	mov	r1, r3
 8004bec:	480d      	ldr	r0, [pc, #52]	; (8004c24 <HAL_UARTEx_RxEventCallback+0xc4>)
 8004bee:	f7ff fedf 	bl	80049b0 <checkSum>
                HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 8004bf2:	2214      	movs	r2, #20
 8004bf4:	490c      	ldr	r1, [pc, #48]	; (8004c28 <HAL_UARTEx_RxEventCallback+0xc8>)
 8004bf6:	480d      	ldr	r0, [pc, #52]	; (8004c2c <HAL_UARTEx_RxEventCallback+0xcc>)
 8004bf8:	f006 f982 	bl	800af00 <HAL_UARTEx_ReceiveToIdle_DMA>
                __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8004bfc:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <HAL_UARTEx_RxEventCallback+0xd0>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_UARTEx_RxEventCallback+0xd0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0208 	bic.w	r2, r2, #8
 8004c0a:	601a      	str	r2, [r3, #0]
        }
}
 8004c0c:	bf00      	nop
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40004400 	.word	0x40004400
 8004c18:	20000748 	.word	0x20000748
 8004c1c:	20000746 	.word	0x20000746
 8004c20:	2000074a 	.word	0x2000074a
 8004c24:	20000728 	.word	0x20000728
 8004c28:	20000714 	.word	0x20000714
 8004c2c:	200005d8 	.word	0x200005d8
 8004c30:	2000061c 	.word	0x2000061c
 8004c34:	00000000 	.word	0x00000000

08004c38 <UARTstateManagement>:

void UARTstateManagement(uint8_t *Mainbuffer)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
	switch (UARTState)
 8004c40:	4bad      	ldr	r3, [pc, #692]	; (8004ef8 <UARTstateManagement+0x2c0>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d01d      	beq.n	8004c84 <UARTstateManagement+0x4c>
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	f300 835a 	bgt.w	8005302 <UARTstateManagement+0x6ca>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 8354 	beq.w	80052fc <UARTstateManagement+0x6c4>
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d000      	beq.n	8004c5a <UARTstateManagement+0x22>
					homingFlag = 1;
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
					break;
				}
	}
}
 8004c58:	e353      	b.n	8005302 <UARTstateManagement+0x6ca>
			if(Mainbuffer[oldPos] == 0b10010010)
 8004c5a:	4ba8      	ldr	r3, [pc, #672]	; (8004efc <UARTstateManagement+0x2c4>)
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4413      	add	r3, r2
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b92      	cmp	r3, #146	; 0x92
 8004c68:	f040 834a 	bne.w	8005300 <UARTstateManagement+0x6c8>
				modeNo = 2;
 8004c6c:	4ba4      	ldr	r3, [pc, #656]	; (8004f00 <UARTstateManagement+0x2c8>)
 8004c6e:	2202      	movs	r2, #2
 8004c70:	701a      	strb	r2, [r3, #0]
				UARTState = MCUConnect;
 8004c72:	4ba1      	ldr	r3, [pc, #644]	; (8004ef8 <UARTstateManagement+0x2c0>)
 8004c74:	2202      	movs	r2, #2
 8004c76:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004c78:	2202      	movs	r2, #2
 8004c7a:	49a2      	ldr	r1, [pc, #648]	; (8004f04 <UARTstateManagement+0x2cc>)
 8004c7c:	48a2      	ldr	r0, [pc, #648]	; (8004f08 <UARTstateManagement+0x2d0>)
 8004c7e:	f006 f8c1 	bl	800ae04 <HAL_UART_Transmit_DMA>
			break;
 8004c82:	e33d      	b.n	8005300 <UARTstateManagement+0x6c8>
			stateSwitch = modeByte;
 8004c84:	4ba1      	ldr	r3, [pc, #644]	; (8004f0c <UARTstateManagement+0x2d4>)
 8004c86:	781a      	ldrb	r2, [r3, #0]
 8004c88:	4ba1      	ldr	r3, [pc, #644]	; (8004f10 <UARTstateManagement+0x2d8>)
 8004c8a:	701a      	strb	r2, [r3, #0]
			switch (stateSwitch)
 8004c8c:	4ba0      	ldr	r3, [pc, #640]	; (8004f10 <UARTstateManagement+0x2d8>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	3b91      	subs	r3, #145	; 0x91
 8004c92:	2b0d      	cmp	r3, #13
 8004c94:	f200 8335 	bhi.w	8005302 <UARTstateManagement+0x6ca>
 8004c98:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <UARTstateManagement+0x68>)
 8004c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9e:	bf00      	nop
 8004ca0:	08004cd9 	.word	0x08004cd9
 8004ca4:	08004ceb 	.word	0x08004ceb
 8004ca8:	08004d03 	.word	0x08004d03
 8004cac:	08004d1b 	.word	0x08004d1b
 8004cb0:	08004d7b 	.word	0x08004d7b
 8004cb4:	08004de9 	.word	0x08004de9
 8004cb8:	08004e21 	.word	0x08004e21
 8004cbc:	08004f35 	.word	0x08004f35
 8004cc0:	08004f79 	.word	0x08004f79
 8004cc4:	0800501f 	.word	0x0800501f
 8004cc8:	08005195 	.word	0x08005195
 8004ccc:	0800528b 	.word	0x0800528b
 8004cd0:	080052bb 	.word	0x080052bb
 8004cd4:	080052d3 	.word	0x080052d3
					modeNo = 1;
 8004cd8:	4b89      	ldr	r3, [pc, #548]	; (8004f00 <UARTstateManagement+0x2c8>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004cde:	2202      	movs	r2, #2
 8004ce0:	4988      	ldr	r1, [pc, #544]	; (8004f04 <UARTstateManagement+0x2cc>)
 8004ce2:	4889      	ldr	r0, [pc, #548]	; (8004f08 <UARTstateManagement+0x2d0>)
 8004ce4:	f006 f88e 	bl	800ae04 <HAL_UART_Transmit_DMA>
					break;
 8004ce8:	e30b      	b.n	8005302 <UARTstateManagement+0x6ca>
					modeNo = 2;
 8004cea:	4b85      	ldr	r3, [pc, #532]	; (8004f00 <UARTstateManagement+0x2c8>)
 8004cec:	2202      	movs	r2, #2
 8004cee:	701a      	strb	r2, [r3, #0]
					UARTState = MCUConnect;
 8004cf0:	4b81      	ldr	r3, [pc, #516]	; (8004ef8 <UARTstateManagement+0x2c0>)
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	4982      	ldr	r1, [pc, #520]	; (8004f04 <UARTstateManagement+0x2cc>)
 8004cfa:	4883      	ldr	r0, [pc, #524]	; (8004f08 <UARTstateManagement+0x2d0>)
 8004cfc:	f006 f882 	bl	800ae04 <HAL_UART_Transmit_DMA>
					break;
 8004d00:	e2ff      	b.n	8005302 <UARTstateManagement+0x6ca>
					modeNo = 3;
 8004d02:	4b7f      	ldr	r3, [pc, #508]	; (8004f00 <UARTstateManagement+0x2c8>)
 8004d04:	2203      	movs	r2, #3
 8004d06:	701a      	strb	r2, [r3, #0]
					UARTState = MCUDisconnect;
 8004d08:	4b7b      	ldr	r3, [pc, #492]	; (8004ef8 <UARTstateManagement+0x2c0>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004d0e:	2202      	movs	r2, #2
 8004d10:	497c      	ldr	r1, [pc, #496]	; (8004f04 <UARTstateManagement+0x2cc>)
 8004d12:	487d      	ldr	r0, [pc, #500]	; (8004f08 <UARTstateManagement+0x2d0>)
 8004d14:	f006 f876 	bl	800ae04 <HAL_UART_Transmit_DMA>
					break;
 8004d18:	e2f3      	b.n	8005302 <UARTstateManagement+0x6ca>
					modeNo = 4;
 8004d1a:	4b79      	ldr	r3, [pc, #484]	; (8004f00 <UARTstateManagement+0x2c8>)
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	701a      	strb	r2, [r3, #0]
					uartVelo = (float)((Mainbuffer[oldPos + 2 % MainBuf_SIZE])/255.0)*10.0;
 8004d20:	4b76      	ldr	r3, [pc, #472]	; (8004efc <UARTstateManagement+0x2c4>)
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	3302      	adds	r3, #2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	4413      	add	r3, r2
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fb fba5 	bl	800047c <__aeabi_i2d>
 8004d32:	a36d      	add	r3, pc, #436	; (adr r3, 8004ee8 <UARTstateManagement+0x2b0>)
 8004d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d38:	f7fb fd34 	bl	80007a4 <__aeabi_ddiv>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4610      	mov	r0, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	f7fb fe36 	bl	80009b4 <__aeabi_d2f>
 8004d48:	ee07 0a10 	vmov	s14, r0
 8004d4c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8004d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d54:	4b6f      	ldr	r3, [pc, #444]	; (8004f14 <UARTstateManagement+0x2dc>)
 8004d56:	edc3 7a00 	vstr	s15, [r3]
					Robot.QVMax = uartVelo*6.0;
 8004d5a:	4b6e      	ldr	r3, [pc, #440]	; (8004f14 <UARTstateManagement+0x2dc>)
 8004d5c:	edd3 7a00 	vldr	s15, [r3]
 8004d60:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d68:	4b6b      	ldr	r3, [pc, #428]	; (8004f18 <UARTstateManagement+0x2e0>)
 8004d6a:	edc3 7a08 	vstr	s15, [r3, #32]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004d6e:	2202      	movs	r2, #2
 8004d70:	4964      	ldr	r1, [pc, #400]	; (8004f04 <UARTstateManagement+0x2cc>)
 8004d72:	4865      	ldr	r0, [pc, #404]	; (8004f08 <UARTstateManagement+0x2d0>)
 8004d74:	f006 f846 	bl	800ae04 <HAL_UART_Transmit_DMA>
					break;
 8004d78:	e2c3      	b.n	8005302 <UARTstateManagement+0x6ca>
					modeNo = 5;
 8004d7a:	4b61      	ldr	r3, [pc, #388]	; (8004f00 <UARTstateManagement+0x2c8>)
 8004d7c:	2205      	movs	r2, #5
 8004d7e:	701a      	strb	r2, [r3, #0]
					goalFlag = 1;
 8004d80:	4b66      	ldr	r3, [pc, #408]	; (8004f1c <UARTstateManagement+0x2e4>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	701a      	strb	r2, [r3, #0]
					goalAmount = 1;
 8004d86:	4b66      	ldr	r3, [pc, #408]	; (8004f20 <UARTstateManagement+0x2e8>)
 8004d88:	2201      	movs	r2, #1
 8004d8a:	701a      	strb	r2, [r3, #0]
					uartPos = (float)((((Mainbuffer[oldPos + 1 % MainBuf_SIZE] << 8) | Mainbuffer[oldPos + 2 % MainBuf_SIZE])*360.0)/62800);
 8004d8c:	4b5b      	ldr	r3, [pc, #364]	; (8004efc <UARTstateManagement+0x2c4>)
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	3301      	adds	r3, #1
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	4413      	add	r3, r2
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	021b      	lsls	r3, r3, #8
 8004d9a:	4a58      	ldr	r2, [pc, #352]	; (8004efc <UARTstateManagement+0x2c4>)
 8004d9c:	8812      	ldrh	r2, [r2, #0]
 8004d9e:	3202      	adds	r2, #2
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	440a      	add	r2, r1
 8004da4:	7812      	ldrb	r2, [r2, #0]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fb fb67 	bl	800047c <__aeabi_i2d>
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	4b5c      	ldr	r3, [pc, #368]	; (8004f24 <UARTstateManagement+0x2ec>)
 8004db4:	f7fb fbcc 	bl	8000550 <__aeabi_dmul>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	a34b      	add	r3, pc, #300	; (adr r3, 8004ef0 <UARTstateManagement+0x2b8>)
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	f7fb fced 	bl	80007a4 <__aeabi_ddiv>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4610      	mov	r0, r2
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	f7fb fdef 	bl	80009b4 <__aeabi_d2f>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	4a53      	ldr	r2, [pc, #332]	; (8004f28 <UARTstateManagement+0x2f0>)
 8004dda:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004ddc:	2202      	movs	r2, #2
 8004dde:	4949      	ldr	r1, [pc, #292]	; (8004f04 <UARTstateManagement+0x2cc>)
 8004de0:	4849      	ldr	r0, [pc, #292]	; (8004f08 <UARTstateManagement+0x2d0>)
 8004de2:	f006 f80f 	bl	800ae04 <HAL_UART_Transmit_DMA>
					break;
 8004de6:	e28c      	b.n	8005302 <UARTstateManagement+0x6ca>
					modeNo = 6;
 8004de8:	4b45      	ldr	r3, [pc, #276]	; (8004f00 <UARTstateManagement+0x2c8>)
 8004dea:	2206      	movs	r2, #6
 8004dec:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8004dee:	4b4b      	ldr	r3, [pc, #300]	; (8004f1c <UARTstateManagement+0x2e4>)
 8004df0:	2202      	movs	r2, #2
 8004df2:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8004df4:	220f      	movs	r2, #15
 8004df6:	2100      	movs	r1, #0
 8004df8:	484c      	ldr	r0, [pc, #304]	; (8004f2c <UARTstateManagement+0x2f4>)
 8004dfa:	f007 fcdb 	bl	800c7b4 <memset>
					goalAmount = 1;
 8004dfe:	4b48      	ldr	r3, [pc, #288]	; (8004f20 <UARTstateManagement+0x2e8>)
 8004e00:	2201      	movs	r2, #1
 8004e02:	701a      	strb	r2, [r3, #0]
					uartGoal[0] = Mainbuffer[oldPos + 2 % MainBuf_SIZE];
 8004e04:	4b3d      	ldr	r3, [pc, #244]	; (8004efc <UARTstateManagement+0x2c4>)
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	3302      	adds	r3, #2
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	781a      	ldrb	r2, [r3, #0]
 8004e10:	4b46      	ldr	r3, [pc, #280]	; (8004f2c <UARTstateManagement+0x2f4>)
 8004e12:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004e14:	2202      	movs	r2, #2
 8004e16:	493b      	ldr	r1, [pc, #236]	; (8004f04 <UARTstateManagement+0x2cc>)
 8004e18:	483b      	ldr	r0, [pc, #236]	; (8004f08 <UARTstateManagement+0x2d0>)
 8004e1a:	f005 fff3 	bl	800ae04 <HAL_UART_Transmit_DMA>
					break;
 8004e1e:	e270      	b.n	8005302 <UARTstateManagement+0x6ca>
					modeNo = 7;
 8004e20:	4b37      	ldr	r3, [pc, #220]	; (8004f00 <UARTstateManagement+0x2c8>)
 8004e22:	2207      	movs	r2, #7
 8004e24:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8004e26:	4b3d      	ldr	r3, [pc, #244]	; (8004f1c <UARTstateManagement+0x2e4>)
 8004e28:	2202      	movs	r2, #2
 8004e2a:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8004e2c:	220f      	movs	r2, #15
 8004e2e:	2100      	movs	r1, #0
 8004e30:	483e      	ldr	r0, [pc, #248]	; (8004f2c <UARTstateManagement+0x2f4>)
 8004e32:	f007 fcbf 	bl	800c7b4 <memset>
					goalAmount = Mainbuffer[oldPos + 1 % MainBuf_SIZE];
 8004e36:	4b31      	ldr	r3, [pc, #196]	; (8004efc <UARTstateManagement+0x2c4>)
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	4413      	add	r3, r2
 8004e40:	781a      	ldrb	r2, [r3, #0]
 8004e42:	4b37      	ldr	r3, [pc, #220]	; (8004f20 <UARTstateManagement+0x2e8>)
 8004e44:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	e03a      	b.n	8004ec2 <UARTstateManagement+0x28a>
						uartGoal[0+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] & 15; // low 8 bit (last 4 bit)
 8004e4c:	4b2b      	ldr	r3, [pc, #172]	; (8004efc <UARTstateManagement+0x2c4>)
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1c99      	adds	r1, r3, #2
 8004e56:	4b36      	ldr	r3, [pc, #216]	; (8004f30 <UARTstateManagement+0x2f8>)
 8004e58:	fb83 2301 	smull	r2, r3, r3, r1
 8004e5c:	10da      	asrs	r2, r3, #3
 8004e5e:	17cb      	asrs	r3, r1, #31
 8004e60:	1ad2      	subs	r2, r2, r3
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	1aca      	subs	r2, r1, r3
 8004e6c:	1883      	adds	r3, r0, r2
 8004e6e:	461a      	mov	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4413      	add	r3, r2
 8004e74:	781a      	ldrb	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	f002 020f 	and.w	r2, r2, #15
 8004e7e:	b2d1      	uxtb	r1, r2
 8004e80:	4a2a      	ldr	r2, [pc, #168]	; (8004f2c <UARTstateManagement+0x2f4>)
 8004e82:	54d1      	strb	r1, [r2, r3]
						uartGoal[1+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] >> 4; // high 8 bit (first 4 bit)
 8004e84:	4b1d      	ldr	r3, [pc, #116]	; (8004efc <UARTstateManagement+0x2c4>)
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1c99      	adds	r1, r3, #2
 8004e8e:	4b28      	ldr	r3, [pc, #160]	; (8004f30 <UARTstateManagement+0x2f8>)
 8004e90:	fb83 2301 	smull	r2, r3, r3, r1
 8004e94:	10da      	asrs	r2, r3, #3
 8004e96:	17cb      	asrs	r3, r1, #31
 8004e98:	1ad2      	subs	r2, r2, r3
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	1aca      	subs	r2, r1, r3
 8004ea4:	1883      	adds	r3, r0, r2
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4413      	add	r3, r2
 8004eac:	781a      	ldrb	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	0912      	lsrs	r2, r2, #4
 8004eb6:	b2d1      	uxtb	r1, r2
 8004eb8:	4a1c      	ldr	r2, [pc, #112]	; (8004f2c <UARTstateManagement+0x2f4>)
 8004eba:	54d1      	strb	r1, [r2, r3]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	4b17      	ldr	r3, [pc, #92]	; (8004f20 <UARTstateManagement+0x2e8>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	0fda      	lsrs	r2, r3, #31
 8004eca:	4413      	add	r3, r2
 8004ecc:	105b      	asrs	r3, r3, #1
 8004ece:	461a      	mov	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	dbba      	blt.n	8004e4c <UARTstateManagement+0x214>
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	490a      	ldr	r1, [pc, #40]	; (8004f04 <UARTstateManagement+0x2cc>)
 8004eda:	480b      	ldr	r0, [pc, #44]	; (8004f08 <UARTstateManagement+0x2d0>)
 8004edc:	f005 ff92 	bl	800ae04 <HAL_UART_Transmit_DMA>
					break;
 8004ee0:	e20f      	b.n	8005302 <UARTstateManagement+0x6ca>
 8004ee2:	bf00      	nop
 8004ee4:	f3af 8000 	nop.w
 8004ee8:	00000000 	.word	0x00000000
 8004eec:	406fe000 	.word	0x406fe000
 8004ef0:	00000000 	.word	0x00000000
 8004ef4:	40eeaa00 	.word	0x40eeaa00
 8004ef8:	20000710 	.word	0x20000710
 8004efc:	20000746 	.word	0x20000746
 8004f00:	20000770 	.word	0x20000770
 8004f04:	2000002c 	.word	0x2000002c
 8004f08:	200005d8 	.word	0x200005d8
 8004f0c:	20000771 	.word	0x20000771
 8004f10:	20000744 	.word	0x20000744
 8004f14:	20000750 	.word	0x20000750
 8004f18:	200006dc 	.word	0x200006dc
 8004f1c:	20000769 	.word	0x20000769
 8004f20:	20000767 	.word	0x20000767
 8004f24:	40768000 	.word	0x40768000
 8004f28:	20000754 	.word	0x20000754
 8004f2c:	20000758 	.word	0x20000758
 8004f30:	66666667 	.word	0x66666667
					modeNo = 8;
 8004f34:	4b8a      	ldr	r3, [pc, #552]	; (8005160 <UARTstateManagement+0x528>)
 8004f36:	2208      	movs	r2, #8
 8004f38:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 0){
 8004f3a:	4b8a      	ldr	r3, [pc, #552]	; (8005164 <UARTstateManagement+0x52c>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d114      	bne.n	8004f6c <UARTstateManagement+0x334>
					goingToGoalFlag = 0;
 8004f42:	4b89      	ldr	r3, [pc, #548]	; (8005168 <UARTstateManagement+0x530>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	701a      	strb	r2, [r3, #0]
					Robot.MotorIsOn = 1;
 8004f48:	4b88      	ldr	r3, [pc, #544]	; (800516c <UARTstateManagement+0x534>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					Robot.flagStartTime = 1;
 8004f50:	4b86      	ldr	r3, [pc, #536]	; (800516c <UARTstateManagement+0x534>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					Robot.RunningFlag = 1;
 8004f58:	4b84      	ldr	r3, [pc, #528]	; (800516c <UARTstateManagement+0x534>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					doingTaskFlag = 1;
 8004f60:	4b80      	ldr	r3, [pc, #512]	; (8005164 <UARTstateManagement+0x52c>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	701a      	strb	r2, [r3, #0]
					goalIDX = 0;
 8004f66:	4b82      	ldr	r3, [pc, #520]	; (8005170 <UARTstateManagement+0x538>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	4981      	ldr	r1, [pc, #516]	; (8005174 <UARTstateManagement+0x53c>)
 8004f70:	4881      	ldr	r0, [pc, #516]	; (8005178 <UARTstateManagement+0x540>)
 8004f72:	f005 ff47 	bl	800ae04 <HAL_UART_Transmit_DMA>
					break;
 8004f76:	e1c4      	b.n	8005302 <UARTstateManagement+0x6ca>
					modeNo = 9;
 8004f78:	4b79      	ldr	r3, [pc, #484]	; (8005160 <UARTstateManagement+0x528>)
 8004f7a:	2209      	movs	r2, #9
 8004f7c:	701a      	strb	r2, [r3, #0]
					Robot.CurrentStation = 0;
 8004f7e:	4b7b      	ldr	r3, [pc, #492]	; (800516c <UARTstateManagement+0x534>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	811a      	strh	r2, [r3, #8]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8004f84:	4b77      	ldr	r3, [pc, #476]	; (8005164 <UARTstateManagement+0x52c>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d004      	beq.n	8004f96 <UARTstateManagement+0x35e>
 8004f8c:	4b77      	ldr	r3, [pc, #476]	; (800516c <UARTstateManagement+0x534>)
 8004f8e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d11f      	bne.n	8004fd6 <UARTstateManagement+0x39e>
 8004f96:	4b77      	ldr	r3, [pc, #476]	; (8005174 <UARTstateManagement+0x53c>)
 8004f98:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 8004f9a:	4b78      	ldr	r3, [pc, #480]	; (800517c <UARTstateManagement+0x544>)
 8004f9c:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 153; // start-mode
 8004f9e:	4b77      	ldr	r3, [pc, #476]	; (800517c <UARTstateManagement+0x544>)
 8004fa0:	2299      	movs	r2, #153	; 0x99
 8004fa2:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = Robot.CurrentStation; // set current goal
 8004fa4:	4b71      	ldr	r3, [pc, #452]	; (800516c <UARTstateManagement+0x534>)
 8004fa6:	891b      	ldrh	r3, [r3, #8]
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	4b74      	ldr	r3, [pc, #464]	; (800517c <UARTstateManagement+0x544>)
 8004fac:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 8004fae:	4b73      	ldr	r3, [pc, #460]	; (800517c <UARTstateManagement+0x544>)
 8004fb0:	789a      	ldrb	r2, [r3, #2]
 8004fb2:	4b72      	ldr	r3, [pc, #456]	; (800517c <UARTstateManagement+0x544>)
 8004fb4:	78db      	ldrb	r3, [r3, #3]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	4b70      	ldr	r3, [pc, #448]	; (800517c <UARTstateManagement+0x544>)
 8004fbc:	791b      	ldrb	r3, [r3, #4]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	4b6d      	ldr	r3, [pc, #436]	; (800517c <UARTstateManagement+0x544>)
 8004fc8:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8004fca:	2206      	movs	r2, #6
 8004fcc:	496b      	ldr	r1, [pc, #428]	; (800517c <UARTstateManagement+0x544>)
 8004fce:	486a      	ldr	r0, [pc, #424]	; (8005178 <UARTstateManagement+0x540>)
 8004fd0:	f005 ff18 	bl	800ae04 <HAL_UART_Transmit_DMA>
					break;
 8004fd4:	e195      	b.n	8005302 <UARTstateManagement+0x6ca>
 8004fd6:	4b6a      	ldr	r3, [pc, #424]	; (8005180 <UARTstateManagement+0x548>)
 8004fd8:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8004fda:	4b68      	ldr	r3, [pc, #416]	; (800517c <UARTstateManagement+0x544>)
 8004fdc:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 8004fde:	4a69      	ldr	r2, [pc, #420]	; (8005184 <UARTstateManagement+0x54c>)
 8004fe0:	4b64      	ldr	r3, [pc, #400]	; (8005174 <UARTstateManagement+0x53c>)
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 153; // start-mode
 8004fe6:	4b65      	ldr	r3, [pc, #404]	; (800517c <UARTstateManagement+0x544>)
 8004fe8:	2299      	movs	r2, #153	; 0x99
 8004fea:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = Robot.CurrentStation; // set currentStation
 8004fec:	4b5f      	ldr	r3, [pc, #380]	; (800516c <UARTstateManagement+0x534>)
 8004fee:	891b      	ldrh	r3, [r3, #8]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	4b62      	ldr	r3, [pc, #392]	; (800517c <UARTstateManagement+0x544>)
 8004ff4:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8004ff6:	4b61      	ldr	r3, [pc, #388]	; (800517c <UARTstateManagement+0x544>)
 8004ff8:	791a      	ldrb	r2, [r3, #4]
 8004ffa:	4b60      	ldr	r3, [pc, #384]	; (800517c <UARTstateManagement+0x544>)
 8004ffc:	795b      	ldrb	r3, [r3, #5]
 8004ffe:	4413      	add	r3, r2
 8005000:	b2da      	uxtb	r2, r3
 8005002:	4b5e      	ldr	r3, [pc, #376]	; (800517c <UARTstateManagement+0x544>)
 8005004:	799b      	ldrb	r3, [r3, #6]
 8005006:	4413      	add	r3, r2
 8005008:	b2db      	uxtb	r3, r3
 800500a:	43db      	mvns	r3, r3
 800500c:	b2da      	uxtb	r2, r3
 800500e:	4b5b      	ldr	r3, [pc, #364]	; (800517c <UARTstateManagement+0x544>)
 8005010:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 8005012:	2208      	movs	r2, #8
 8005014:	4959      	ldr	r1, [pc, #356]	; (800517c <UARTstateManagement+0x544>)
 8005016:	4858      	ldr	r0, [pc, #352]	; (8005178 <UARTstateManagement+0x540>)
 8005018:	f005 fef4 	bl	800ae04 <HAL_UART_Transmit_DMA>
					break;
 800501c:	e171      	b.n	8005302 <UARTstateManagement+0x6ca>
					modeNo = 10;
 800501e:	4b50      	ldr	r3, [pc, #320]	; (8005160 <UARTstateManagement+0x528>)
 8005020:	220a      	movs	r2, #10
 8005022:	701a      	strb	r2, [r3, #0]
					posData = (uint16_t)(((((Robot.Position)*10000.0)*M_PI)/180.0));
 8005024:	4b51      	ldr	r3, [pc, #324]	; (800516c <UARTstateManagement+0x534>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f7fb fa39 	bl	80004a0 <__aeabi_f2d>
 800502e:	a348      	add	r3, pc, #288	; (adr r3, 8005150 <UARTstateManagement+0x518>)
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	f7fb fa8c 	bl	8000550 <__aeabi_dmul>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4610      	mov	r0, r2
 800503e:	4619      	mov	r1, r3
 8005040:	a345      	add	r3, pc, #276	; (adr r3, 8005158 <UARTstateManagement+0x520>)
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	f7fb fa83 	bl	8000550 <__aeabi_dmul>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4610      	mov	r0, r2
 8005050:	4619      	mov	r1, r3
 8005052:	f04f 0200 	mov.w	r2, #0
 8005056:	4b4c      	ldr	r3, [pc, #304]	; (8005188 <UARTstateManagement+0x550>)
 8005058:	f7fb fba4 	bl	80007a4 <__aeabi_ddiv>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	4610      	mov	r0, r2
 8005062:	4619      	mov	r1, r3
 8005064:	f7fb fc86 	bl	8000974 <__aeabi_d2uiz>
 8005068:	4603      	mov	r3, r0
 800506a:	b29a      	uxth	r2, r3
 800506c:	4b47      	ldr	r3, [pc, #284]	; (800518c <UARTstateManagement+0x554>)
 800506e:	801a      	strh	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8005070:	4b3c      	ldr	r3, [pc, #240]	; (8005164 <UARTstateManagement+0x52c>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d004      	beq.n	8005082 <UARTstateManagement+0x44a>
 8005078:	4b3c      	ldr	r3, [pc, #240]	; (800516c <UARTstateManagement+0x534>)
 800507a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800507e:	2b01      	cmp	r3, #1
 8005080:	d126      	bne.n	80050d0 <UARTstateManagement+0x498>
 8005082:	4b3c      	ldr	r3, [pc, #240]	; (8005174 <UARTstateManagement+0x53c>)
 8005084:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 8005086:	4b3d      	ldr	r3, [pc, #244]	; (800517c <UARTstateManagement+0x544>)
 8005088:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 154; // start-mode
 800508a:	4b3c      	ldr	r3, [pc, #240]	; (800517c <UARTstateManagement+0x544>)
 800508c:	229a      	movs	r2, #154	; 0x9a
 800508e:	709a      	strb	r2, [r3, #2]
						TxBuf[3] = (posData) >> 8 ; // set high byte posData
 8005090:	4b3e      	ldr	r3, [pc, #248]	; (800518c <UARTstateManagement+0x554>)
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	0a1b      	lsrs	r3, r3, #8
 8005096:	b29b      	uxth	r3, r3
 8005098:	b2da      	uxtb	r2, r3
 800509a:	4b38      	ldr	r3, [pc, #224]	; (800517c <UARTstateManagement+0x544>)
 800509c:	70da      	strb	r2, [r3, #3]
						TxBuf[4] = (posData) & 0xff; // set low byte posData
 800509e:	4b3b      	ldr	r3, [pc, #236]	; (800518c <UARTstateManagement+0x554>)
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	4b35      	ldr	r3, [pc, #212]	; (800517c <UARTstateManagement+0x544>)
 80050a6:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 80050a8:	4b34      	ldr	r3, [pc, #208]	; (800517c <UARTstateManagement+0x544>)
 80050aa:	789a      	ldrb	r2, [r3, #2]
 80050ac:	4b33      	ldr	r3, [pc, #204]	; (800517c <UARTstateManagement+0x544>)
 80050ae:	78db      	ldrb	r3, [r3, #3]
 80050b0:	4413      	add	r3, r2
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	4b31      	ldr	r3, [pc, #196]	; (800517c <UARTstateManagement+0x544>)
 80050b6:	791b      	ldrb	r3, [r3, #4]
 80050b8:	4413      	add	r3, r2
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	43db      	mvns	r3, r3
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	4b2e      	ldr	r3, [pc, #184]	; (800517c <UARTstateManagement+0x544>)
 80050c2:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 80050c4:	2206      	movs	r2, #6
 80050c6:	492d      	ldr	r1, [pc, #180]	; (800517c <UARTstateManagement+0x544>)
 80050c8:	482b      	ldr	r0, [pc, #172]	; (8005178 <UARTstateManagement+0x540>)
 80050ca:	f005 fe9b 	bl	800ae04 <HAL_UART_Transmit_DMA>
					break;
 80050ce:	e118      	b.n	8005302 <UARTstateManagement+0x6ca>
 80050d0:	4b2b      	ldr	r3, [pc, #172]	; (8005180 <UARTstateManagement+0x548>)
 80050d2:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 80050d4:	4b29      	ldr	r3, [pc, #164]	; (800517c <UARTstateManagement+0x544>)
 80050d6:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 80050d8:	4a2a      	ldr	r2, [pc, #168]	; (8005184 <UARTstateManagement+0x54c>)
 80050da:	4b26      	ldr	r3, [pc, #152]	; (8005174 <UARTstateManagement+0x53c>)
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 154; // start-mode
 80050e0:	4b26      	ldr	r3, [pc, #152]	; (800517c <UARTstateManagement+0x544>)
 80050e2:	229a      	movs	r2, #154	; 0x9a
 80050e4:	711a      	strb	r2, [r3, #4]
						if(homingFlag == 1 && Robot.Position <= 0.5){
 80050e6:	4b2a      	ldr	r3, [pc, #168]	; (8005190 <UARTstateManagement+0x558>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d110      	bne.n	8005110 <UARTstateManagement+0x4d8>
 80050ee:	4b1f      	ldr	r3, [pc, #124]	; (800516c <UARTstateManagement+0x534>)
 80050f0:	edd3 7a00 	vldr	s15, [r3]
 80050f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80050f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005100:	d806      	bhi.n	8005110 <UARTstateManagement+0x4d8>
							TxBuf[5] = 0; // set high byte posData
 8005102:	4b1e      	ldr	r3, [pc, #120]	; (800517c <UARTstateManagement+0x544>)
 8005104:	2200      	movs	r2, #0
 8005106:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = 0; // set low byte posData
 8005108:	4b1c      	ldr	r3, [pc, #112]	; (800517c <UARTstateManagement+0x544>)
 800510a:	2200      	movs	r2, #0
 800510c:	719a      	strb	r2, [r3, #6]
 800510e:	e00b      	b.n	8005128 <UARTstateManagement+0x4f0>
							TxBuf[5] = (posData) >> 8 ; // set high byte posData
 8005110:	4b1e      	ldr	r3, [pc, #120]	; (800518c <UARTstateManagement+0x554>)
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	0a1b      	lsrs	r3, r3, #8
 8005116:	b29b      	uxth	r3, r3
 8005118:	b2da      	uxtb	r2, r3
 800511a:	4b18      	ldr	r3, [pc, #96]	; (800517c <UARTstateManagement+0x544>)
 800511c:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = (posData) & 0xff; // set low byte posData
 800511e:	4b1b      	ldr	r3, [pc, #108]	; (800518c <UARTstateManagement+0x554>)
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	b2da      	uxtb	r2, r3
 8005124:	4b15      	ldr	r3, [pc, #84]	; (800517c <UARTstateManagement+0x544>)
 8005126:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8005128:	4b14      	ldr	r3, [pc, #80]	; (800517c <UARTstateManagement+0x544>)
 800512a:	791a      	ldrb	r2, [r3, #4]
 800512c:	4b13      	ldr	r3, [pc, #76]	; (800517c <UARTstateManagement+0x544>)
 800512e:	795b      	ldrb	r3, [r3, #5]
 8005130:	4413      	add	r3, r2
 8005132:	b2da      	uxtb	r2, r3
 8005134:	4b11      	ldr	r3, [pc, #68]	; (800517c <UARTstateManagement+0x544>)
 8005136:	799b      	ldrb	r3, [r3, #6]
 8005138:	4413      	add	r3, r2
 800513a:	b2db      	uxtb	r3, r3
 800513c:	43db      	mvns	r3, r3
 800513e:	b2da      	uxtb	r2, r3
 8005140:	4b0e      	ldr	r3, [pc, #56]	; (800517c <UARTstateManagement+0x544>)
 8005142:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 8005144:	2208      	movs	r2, #8
 8005146:	490d      	ldr	r1, [pc, #52]	; (800517c <UARTstateManagement+0x544>)
 8005148:	480b      	ldr	r0, [pc, #44]	; (8005178 <UARTstateManagement+0x540>)
 800514a:	f005 fe5b 	bl	800ae04 <HAL_UART_Transmit_DMA>
					break;
 800514e:	e0d8      	b.n	8005302 <UARTstateManagement+0x6ca>
 8005150:	00000000 	.word	0x00000000
 8005154:	40c38800 	.word	0x40c38800
 8005158:	54442d18 	.word	0x54442d18
 800515c:	400921fb 	.word	0x400921fb
 8005160:	20000770 	.word	0x20000770
 8005164:	2000076c 	.word	0x2000076c
 8005168:	2000076d 	.word	0x2000076d
 800516c:	200006dc 	.word	0x200006dc
 8005170:	20000768 	.word	0x20000768
 8005174:	2000002c 	.word	0x2000002c
 8005178:	200005d8 	.word	0x200005d8
 800517c:	2000073c 	.word	0x2000073c
 8005180:	20000030 	.word	0x20000030
 8005184:	2000073e 	.word	0x2000073e
 8005188:	40668000 	.word	0x40668000
 800518c:	2000074c 	.word	0x2000074c
 8005190:	2000076b 	.word	0x2000076b
					modeNo = 11;
 8005194:	4b60      	ldr	r3, [pc, #384]	; (8005318 <UARTstateManagement+0x6e0>)
 8005196:	220b      	movs	r2, #11
 8005198:	701a      	strb	r2, [r3, #0]
					veloData = (((AbsVal(Robot.Velocity)/6.0)*255.0)/10.0);
 800519a:	4b60      	ldr	r3, [pc, #384]	; (800531c <UARTstateManagement+0x6e4>)
 800519c:	edd3 7a01 	vldr	s15, [r3, #4]
 80051a0:	eeb0 0a67 	vmov.f32	s0, s15
 80051a4:	f7fc fc16 	bl	80019d4 <AbsVal>
 80051a8:	ee10 3a10 	vmov	r3, s0
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fb f977 	bl	80004a0 <__aeabi_f2d>
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	4b5a      	ldr	r3, [pc, #360]	; (8005320 <UARTstateManagement+0x6e8>)
 80051b8:	f7fb faf4 	bl	80007a4 <__aeabi_ddiv>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4610      	mov	r0, r2
 80051c2:	4619      	mov	r1, r3
 80051c4:	a352      	add	r3, pc, #328	; (adr r3, 8005310 <UARTstateManagement+0x6d8>)
 80051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ca:	f7fb f9c1 	bl	8000550 <__aeabi_dmul>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4610      	mov	r0, r2
 80051d4:	4619      	mov	r1, r3
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	4b52      	ldr	r3, [pc, #328]	; (8005324 <UARTstateManagement+0x6ec>)
 80051dc:	f7fb fae2 	bl	80007a4 <__aeabi_ddiv>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4610      	mov	r0, r2
 80051e6:	4619      	mov	r1, r3
 80051e8:	f7fb fbc4 	bl	8000974 <__aeabi_d2uiz>
 80051ec:	4603      	mov	r3, r0
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	4b4d      	ldr	r3, [pc, #308]	; (8005328 <UARTstateManagement+0x6f0>)
 80051f2:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 80051f4:	4b4d      	ldr	r3, [pc, #308]	; (800532c <UARTstateManagement+0x6f4>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d004      	beq.n	8005206 <UARTstateManagement+0x5ce>
 80051fc:	4b47      	ldr	r3, [pc, #284]	; (800531c <UARTstateManagement+0x6e4>)
 80051fe:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005202:	2b01      	cmp	r3, #1
 8005204:	d11e      	bne.n	8005244 <UARTstateManagement+0x60c>
 8005206:	4b4a      	ldr	r3, [pc, #296]	; (8005330 <UARTstateManagement+0x6f8>)
 8005208:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 800520a:	4b4a      	ldr	r3, [pc, #296]	; (8005334 <UARTstateManagement+0x6fc>)
 800520c:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 155;
 800520e:	4b49      	ldr	r3, [pc, #292]	; (8005334 <UARTstateManagement+0x6fc>)
 8005210:	229b      	movs	r2, #155	; 0x9b
 8005212:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = veloData; // set low byte posData
 8005214:	4b44      	ldr	r3, [pc, #272]	; (8005328 <UARTstateManagement+0x6f0>)
 8005216:	781a      	ldrb	r2, [r3, #0]
 8005218:	4b46      	ldr	r3, [pc, #280]	; (8005334 <UARTstateManagement+0x6fc>)
 800521a:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 800521c:	4b45      	ldr	r3, [pc, #276]	; (8005334 <UARTstateManagement+0x6fc>)
 800521e:	789a      	ldrb	r2, [r3, #2]
 8005220:	4b44      	ldr	r3, [pc, #272]	; (8005334 <UARTstateManagement+0x6fc>)
 8005222:	78db      	ldrb	r3, [r3, #3]
 8005224:	4413      	add	r3, r2
 8005226:	b2da      	uxtb	r2, r3
 8005228:	4b42      	ldr	r3, [pc, #264]	; (8005334 <UARTstateManagement+0x6fc>)
 800522a:	791b      	ldrb	r3, [r3, #4]
 800522c:	4413      	add	r3, r2
 800522e:	b2db      	uxtb	r3, r3
 8005230:	43db      	mvns	r3, r3
 8005232:	b2da      	uxtb	r2, r3
 8005234:	4b3f      	ldr	r3, [pc, #252]	; (8005334 <UARTstateManagement+0x6fc>)
 8005236:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8005238:	2206      	movs	r2, #6
 800523a:	493e      	ldr	r1, [pc, #248]	; (8005334 <UARTstateManagement+0x6fc>)
 800523c:	483e      	ldr	r0, [pc, #248]	; (8005338 <UARTstateManagement+0x700>)
 800523e:	f005 fde1 	bl	800ae04 <HAL_UART_Transmit_DMA>
					break;
 8005242:	e05e      	b.n	8005302 <UARTstateManagement+0x6ca>
 8005244:	4b3d      	ldr	r3, [pc, #244]	; (800533c <UARTstateManagement+0x704>)
 8005246:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8005248:	4b3a      	ldr	r3, [pc, #232]	; (8005334 <UARTstateManagement+0x6fc>)
 800524a:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 800524c:	4a3c      	ldr	r2, [pc, #240]	; (8005340 <UARTstateManagement+0x708>)
 800524e:	4b38      	ldr	r3, [pc, #224]	; (8005330 <UARTstateManagement+0x6f8>)
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 155; // start-mode
 8005254:	4b37      	ldr	r3, [pc, #220]	; (8005334 <UARTstateManagement+0x6fc>)
 8005256:	229b      	movs	r2, #155	; 0x9b
 8005258:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = veloData; // set low byte posData
 800525a:	4b33      	ldr	r3, [pc, #204]	; (8005328 <UARTstateManagement+0x6f0>)
 800525c:	781a      	ldrb	r2, [r3, #0]
 800525e:	4b35      	ldr	r3, [pc, #212]	; (8005334 <UARTstateManagement+0x6fc>)
 8005260:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 8005262:	4b34      	ldr	r3, [pc, #208]	; (8005334 <UARTstateManagement+0x6fc>)
 8005264:	791a      	ldrb	r2, [r3, #4]
 8005266:	4b33      	ldr	r3, [pc, #204]	; (8005334 <UARTstateManagement+0x6fc>)
 8005268:	795b      	ldrb	r3, [r3, #5]
 800526a:	4413      	add	r3, r2
 800526c:	b2da      	uxtb	r2, r3
 800526e:	4b31      	ldr	r3, [pc, #196]	; (8005334 <UARTstateManagement+0x6fc>)
 8005270:	799b      	ldrb	r3, [r3, #6]
 8005272:	4413      	add	r3, r2
 8005274:	b2db      	uxtb	r3, r3
 8005276:	43db      	mvns	r3, r3
 8005278:	b2da      	uxtb	r2, r3
 800527a:	4b2e      	ldr	r3, [pc, #184]	; (8005334 <UARTstateManagement+0x6fc>)
 800527c:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 800527e:	2208      	movs	r2, #8
 8005280:	492c      	ldr	r1, [pc, #176]	; (8005334 <UARTstateManagement+0x6fc>)
 8005282:	482d      	ldr	r0, [pc, #180]	; (8005338 <UARTstateManagement+0x700>)
 8005284:	f005 fdbe 	bl	800ae04 <HAL_UART_Transmit_DMA>
					break;
 8005288:	e03b      	b.n	8005302 <UARTstateManagement+0x6ca>
					modeNo = 12;
 800528a:	4b23      	ldr	r3, [pc, #140]	; (8005318 <UARTstateManagement+0x6e0>)
 800528c:	220c      	movs	r2, #12
 800528e:	701a      	strb	r2, [r3, #0]
					RobotState = EndEff;
 8005290:	4b2c      	ldr	r3, [pc, #176]	; (8005344 <UARTstateManagement+0x70c>)
 8005292:	2203      	movs	r2, #3
 8005294:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8005296:	4b2c      	ldr	r3, [pc, #176]	; (8005348 <UARTstateManagement+0x710>)
 8005298:	2201      	movs	r2, #1
 800529a:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorReadFlag =  1;
 800529c:	4b2b      	ldr	r3, [pc, #172]	; (800534c <UARTstateManagement+0x714>)
 800529e:	2201      	movs	r2, #1
 80052a0:	701a      	strb	r2, [r3, #0]
					EndEffState = CheckBeforRun;
 80052a2:	4b2b      	ldr	r3, [pc, #172]	; (8005350 <UARTstateManagement+0x718>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	701a      	strb	r2, [r3, #0]
					endEffFlag = 1;
 80052a8:	4b2a      	ldr	r3, [pc, #168]	; (8005354 <UARTstateManagement+0x71c>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80052ae:	2202      	movs	r2, #2
 80052b0:	491f      	ldr	r1, [pc, #124]	; (8005330 <UARTstateManagement+0x6f8>)
 80052b2:	4821      	ldr	r0, [pc, #132]	; (8005338 <UARTstateManagement+0x700>)
 80052b4:	f005 fda6 	bl	800ae04 <HAL_UART_Transmit_DMA>
					break;
 80052b8:	e023      	b.n	8005302 <UARTstateManagement+0x6ca>
					modeNo = 13;
 80052ba:	4b17      	ldr	r3, [pc, #92]	; (8005318 <UARTstateManagement+0x6e0>)
 80052bc:	220d      	movs	r2, #13
 80052be:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 80052c0:	4b24      	ldr	r3, [pc, #144]	; (8005354 <UARTstateManagement+0x71c>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80052c6:	2202      	movs	r2, #2
 80052c8:	4919      	ldr	r1, [pc, #100]	; (8005330 <UARTstateManagement+0x6f8>)
 80052ca:	481b      	ldr	r0, [pc, #108]	; (8005338 <UARTstateManagement+0x700>)
 80052cc:	f005 fd9a 	bl	800ae04 <HAL_UART_Transmit_DMA>
					break;
 80052d0:	e017      	b.n	8005302 <UARTstateManagement+0x6ca>
					modeNo = 14;
 80052d2:	4b11      	ldr	r3, [pc, #68]	; (8005318 <UARTstateManagement+0x6e0>)
 80052d4:	220e      	movs	r2, #14
 80052d6:	701a      	strb	r2, [r3, #0]
					RobotRunToPositon(Robot.HomePositon,51.0);
 80052d8:	4b10      	ldr	r3, [pc, #64]	; (800531c <UARTstateManagement+0x6e4>)
 80052da:	edd3 7a05 	vldr	s15, [r3, #20]
 80052de:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8005358 <UARTstateManagement+0x720>
 80052e2:	eeb0 0a67 	vmov.f32	s0, s15
 80052e6:	f000 fbe5 	bl	8005ab4 <RobotRunToPositon>
					homingFlag = 1;
 80052ea:	4b1c      	ldr	r3, [pc, #112]	; (800535c <UARTstateManagement+0x724>)
 80052ec:	2201      	movs	r2, #1
 80052ee:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80052f0:	2202      	movs	r2, #2
 80052f2:	490f      	ldr	r1, [pc, #60]	; (8005330 <UARTstateManagement+0x6f8>)
 80052f4:	4810      	ldr	r0, [pc, #64]	; (8005338 <UARTstateManagement+0x700>)
 80052f6:	f005 fd85 	bl	800ae04 <HAL_UART_Transmit_DMA>
					break;
 80052fa:	e002      	b.n	8005302 <UARTstateManagement+0x6ca>
			break;
 80052fc:	bf00      	nop
 80052fe:	e000      	b.n	8005302 <UARTstateManagement+0x6ca>
			break;
 8005300:	bf00      	nop
}
 8005302:	bf00      	nop
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	f3af 8000 	nop.w
 8005310:	00000000 	.word	0x00000000
 8005314:	406fe000 	.word	0x406fe000
 8005318:	20000770 	.word	0x20000770
 800531c:	200006dc 	.word	0x200006dc
 8005320:	40180000 	.word	0x40180000
 8005324:	40240000 	.word	0x40240000
 8005328:	2000074e 	.word	0x2000074e
 800532c:	2000076c 	.word	0x2000076c
 8005330:	2000002c 	.word	0x2000002c
 8005334:	2000073c 	.word	0x2000073c
 8005338:	200005d8 	.word	0x200005d8
 800533c:	20000030 	.word	0x20000030
 8005340:	2000073e 	.word	0x2000073e
 8005344:	20000711 	.word	0x20000711
 8005348:	20000b01 	.word	0x20000b01
 800534c:	20000b00 	.word	0x20000b00
 8005350:	20000000 	.word	0x20000000
 8005354:	2000076a 	.word	0x2000076a
 8005358:	424c0000 	.word	0x424c0000
 800535c:	2000076b 	.word	0x2000076b

08005360 <RobotstateManagement>:

void RobotstateManagement()
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
	switch (RobotState)
 8005364:	4b91      	ldr	r3, [pc, #580]	; (80055ac <RobotstateManagement+0x24c>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b04      	cmp	r3, #4
 800536a:	f200 811d 	bhi.w	80055a8 <RobotstateManagement+0x248>
 800536e:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <RobotstateManagement+0x14>)
 8005370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005374:	08005389 	.word	0x08005389
 8005378:	080053a5 	.word	0x080053a5
 800537c:	080053fd 	.word	0x080053fd
 8005380:	0800559f 	.word	0x0800559f
 8005384:	08005589 	.word	0x08005589
	{
		case init:
			// Start Finding home Position
			Robot.flagSethome = 1;
 8005388:	4b89      	ldr	r3, [pc, #548]	; (80055b0 <RobotstateManagement+0x250>)
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			// Turn 360 Deg
			RobotRunToPositon(360.0,51.0);
 8005390:	eddf 0a88 	vldr	s1, [pc, #544]	; 80055b4 <RobotstateManagement+0x254>
 8005394:	ed9f 0a88 	vldr	s0, [pc, #544]	; 80055b8 <RobotstateManagement+0x258>
 8005398:	f000 fb8c 	bl	8005ab4 <RobotRunToPositon>
			// Goto next State
			RobotState = FindHome;
 800539c:	4b83      	ldr	r3, [pc, #524]	; (80055ac <RobotstateManagement+0x24c>)
 800539e:	2201      	movs	r2, #1
 80053a0:	701a      	strb	r2, [r3, #0]
			break;
 80053a2:	e101      	b.n	80055a8 <RobotstateManagement+0x248>
		case FindHome:
			if(Robot.RunningFlag == 0)
 80053a4:	4b82      	ldr	r3, [pc, #520]	; (80055b0 <RobotstateManagement+0x250>)
 80053a6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f040 80f9 	bne.w	80055a2 <RobotstateManagement+0x242>
			{
				if(Robot.flagSethome == 2)
 80053b0:	4b7f      	ldr	r3, [pc, #508]	; (80055b0 <RobotstateManagement+0x250>)
 80053b2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d111      	bne.n	80053de <RobotstateManagement+0x7e>
				{
					RobotRunToPositon(Robot.HomePositon,51.0);
 80053ba:	4b7d      	ldr	r3, [pc, #500]	; (80055b0 <RobotstateManagement+0x250>)
 80053bc:	edd3 7a05 	vldr	s15, [r3, #20]
 80053c0:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80055b4 <RobotstateManagement+0x254>
 80053c4:	eeb0 0a67 	vmov.f32	s0, s15
 80053c8:	f000 fb74 	bl	8005ab4 <RobotRunToPositon>
					Robot.RunningFlag = 1;
 80053cc:	4b78      	ldr	r3, [pc, #480]	; (80055b0 <RobotstateManagement+0x250>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					Robot.flagSethome = 3;
 80053d4:	4b76      	ldr	r3, [pc, #472]	; (80055b0 <RobotstateManagement+0x250>)
 80053d6:	2203      	movs	r2, #3
 80053d8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					RobotResetAll();
					UARTState = MCUConnect;
					RobotState = NormalOperation;
				}
			}
			break;
 80053dc:	e0e1      	b.n	80055a2 <RobotstateManagement+0x242>
				else if(Robot.flagSethome == 3)
 80053de:	4b74      	ldr	r3, [pc, #464]	; (80055b0 <RobotstateManagement+0x250>)
 80053e0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	f040 80dc 	bne.w	80055a2 <RobotstateManagement+0x242>
					RobotResetAll();
 80053ea:	f000 fb9d 	bl	8005b28 <RobotResetAll>
					UARTState = MCUConnect;
 80053ee:	4b73      	ldr	r3, [pc, #460]	; (80055bc <RobotstateManagement+0x25c>)
 80053f0:	2202      	movs	r2, #2
 80053f2:	701a      	strb	r2, [r3, #0]
					RobotState = NormalOperation;
 80053f4:	4b6d      	ldr	r3, [pc, #436]	; (80055ac <RobotstateManagement+0x24c>)
 80053f6:	2202      	movs	r2, #2
 80053f8:	701a      	strb	r2, [r3, #0]
			break;
 80053fa:	e0d2      	b.n	80055a2 <RobotstateManagement+0x242>
		case NormalOperation:
			if(notContinueFlag == 1){
 80053fc:	4b70      	ldr	r3, [pc, #448]	; (80055c0 <RobotstateManagement+0x260>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d10e      	bne.n	8005422 <RobotstateManagement+0xc2>
				Robot.MotorIsOn = 1;
 8005404:	4b6a      	ldr	r3, [pc, #424]	; (80055b0 <RobotstateManagement+0x250>)
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				Robot.RunningFlag = 1;
 800540c:	4b68      	ldr	r3, [pc, #416]	; (80055b0 <RobotstateManagement+0x250>)
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				Robot.flagStartTime = 1;
 8005414:	4b66      	ldr	r3, [pc, #408]	; (80055b0 <RobotstateManagement+0x250>)
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				notContinueFlag = 0;
 800541c:	4b68      	ldr	r3, [pc, #416]	; (80055c0 <RobotstateManagement+0x260>)
 800541e:	2200      	movs	r2, #0
 8005420:	701a      	strb	r2, [r3, #0]
			}
			if(doingTaskFlag == 1 && Robot.RunningFlag == 1 && endEffFlag == 0){
 8005422:	4b68      	ldr	r3, [pc, #416]	; (80055c4 <RobotstateManagement+0x264>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d159      	bne.n	80054de <RobotstateManagement+0x17e>
 800542a:	4b61      	ldr	r3, [pc, #388]	; (80055b0 <RobotstateManagement+0x250>)
 800542c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005430:	2b01      	cmp	r3, #1
 8005432:	d154      	bne.n	80054de <RobotstateManagement+0x17e>
 8005434:	4b64      	ldr	r3, [pc, #400]	; (80055c8 <RobotstateManagement+0x268>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d150      	bne.n	80054de <RobotstateManagement+0x17e>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800543c:	2201      	movs	r2, #1
 800543e:	2108      	movs	r1, #8
 8005440:	4862      	ldr	r0, [pc, #392]	; (80055cc <RobotstateManagement+0x26c>)
 8005442:	f001 fecb 	bl	80071dc <HAL_GPIO_WritePin>
				if(goalFlag == 1 && goingToGoalFlag == 0){
 8005446:	4b62      	ldr	r3, [pc, #392]	; (80055d0 <RobotstateManagement+0x270>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d11d      	bne.n	800548a <RobotstateManagement+0x12a>
 800544e:	4b61      	ldr	r3, [pc, #388]	; (80055d4 <RobotstateManagement+0x274>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d119      	bne.n	800548a <RobotstateManagement+0x12a>
					goingToGoalFlag = 1;
 8005456:	4b5f      	ldr	r3, [pc, #380]	; (80055d4 <RobotstateManagement+0x274>)
 8005458:	2201      	movs	r2, #1
 800545a:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = uartPos;
 800545c:	4b5e      	ldr	r3, [pc, #376]	; (80055d8 <RobotstateManagement+0x278>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a53      	ldr	r2, [pc, #332]	; (80055b0 <RobotstateManagement+0x250>)
 8005462:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 8005464:	4b52      	ldr	r3, [pc, #328]	; (80055b0 <RobotstateManagement+0x250>)
 8005466:	edd3 7a00 	vldr	s15, [r3]
 800546a:	4b51      	ldr	r3, [pc, #324]	; (80055b0 <RobotstateManagement+0x250>)
 800546c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005470:	4b4f      	ldr	r3, [pc, #316]	; (80055b0 <RobotstateManagement+0x250>)
 8005472:	edd3 6a08 	vldr	s13, [r3, #32]
 8005476:	eeb0 1a66 	vmov.f32	s2, s13
 800547a:	eef0 0a47 	vmov.f32	s1, s14
 800547e:	eeb0 0a67 	vmov.f32	s0, s15
 8005482:	4856      	ldr	r0, [pc, #344]	; (80055dc <RobotstateManagement+0x27c>)
 8005484:	f7fc fac8 	bl	8001a18 <CoefficientAndTimeCalculation>
 8005488:	e029      	b.n	80054de <RobotstateManagement+0x17e>
				}
				else if(goalFlag == 2 && goingToGoalFlag == 0){
 800548a:	4b51      	ldr	r3, [pc, #324]	; (80055d0 <RobotstateManagement+0x270>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d125      	bne.n	80054de <RobotstateManagement+0x17e>
 8005492:	4b50      	ldr	r3, [pc, #320]	; (80055d4 <RobotstateManagement+0x274>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d121      	bne.n	80054de <RobotstateManagement+0x17e>
					goingToGoalFlag = 1;
 800549a:	4b4e      	ldr	r3, [pc, #312]	; (80055d4 <RobotstateManagement+0x274>)
 800549c:	2201      	movs	r2, #1
 800549e:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = goalDeg[uartGoal[goalIDX]-1];
 80054a0:	4b4f      	ldr	r3, [pc, #316]	; (80055e0 <RobotstateManagement+0x280>)
 80054a2:	f993 3000 	ldrsb.w	r3, [r3]
 80054a6:	461a      	mov	r2, r3
 80054a8:	4b4e      	ldr	r3, [pc, #312]	; (80055e4 <RobotstateManagement+0x284>)
 80054aa:	5c9b      	ldrb	r3, [r3, r2]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	4a4e      	ldr	r2, [pc, #312]	; (80055e8 <RobotstateManagement+0x288>)
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a3e      	ldr	r2, [pc, #248]	; (80055b0 <RobotstateManagement+0x250>)
 80054b8:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 80054ba:	4b3d      	ldr	r3, [pc, #244]	; (80055b0 <RobotstateManagement+0x250>)
 80054bc:	edd3 7a00 	vldr	s15, [r3]
 80054c0:	4b3b      	ldr	r3, [pc, #236]	; (80055b0 <RobotstateManagement+0x250>)
 80054c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80054c6:	4b3a      	ldr	r3, [pc, #232]	; (80055b0 <RobotstateManagement+0x250>)
 80054c8:	edd3 6a08 	vldr	s13, [r3, #32]
 80054cc:	eeb0 1a66 	vmov.f32	s2, s13
 80054d0:	eef0 0a47 	vmov.f32	s1, s14
 80054d4:	eeb0 0a67 	vmov.f32	s0, s15
 80054d8:	4840      	ldr	r0, [pc, #256]	; (80055dc <RobotstateManagement+0x27c>)
 80054da:	f7fc fa9d 	bl	8001a18 <CoefficientAndTimeCalculation>
				}
			}

			if(endEffFlag == 0 && goingToGoalFlag == 1 && doingTaskFlag == 1){
 80054de:	4b3a      	ldr	r3, [pc, #232]	; (80055c8 <RobotstateManagement+0x268>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d132      	bne.n	800554c <RobotstateManagement+0x1ec>
 80054e6:	4b3b      	ldr	r3, [pc, #236]	; (80055d4 <RobotstateManagement+0x274>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d12e      	bne.n	800554c <RobotstateManagement+0x1ec>
 80054ee:	4b35      	ldr	r3, [pc, #212]	; (80055c4 <RobotstateManagement+0x264>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d12a      	bne.n	800554c <RobotstateManagement+0x1ec>
				if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0){
 80054f6:	4b2e      	ldr	r3, [pc, #184]	; (80055b0 <RobotstateManagement+0x250>)
 80054f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80054fc:	4b2c      	ldr	r3, [pc, #176]	; (80055b0 <RobotstateManagement+0x250>)
 80054fe:	edd3 7a00 	vldr	s15, [r3]
 8005502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005506:	eeb0 0a67 	vmov.f32	s0, s15
 800550a:	f7fc fa63 	bl	80019d4 <AbsVal>
 800550e:	eef0 7a40 	vmov.f32	s15, s0
 8005512:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800551a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551e:	d515      	bpl.n	800554c <RobotstateManagement+0x1ec>
 8005520:	4b23      	ldr	r3, [pc, #140]	; (80055b0 <RobotstateManagement+0x250>)
 8005522:	edd3 7a01 	vldr	s15, [r3, #4]
 8005526:	eeb0 0a67 	vmov.f32	s0, s15
 800552a:	f7fc fa53 	bl	80019d4 <AbsVal>
 800552e:	eef0 7a40 	vmov.f32	s15, s0
 8005532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800553a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553e:	d505      	bpl.n	800554c <RobotstateManagement+0x1ec>
					endEffFlag = 1;
 8005540:	4b21      	ldr	r3, [pc, #132]	; (80055c8 <RobotstateManagement+0x268>)
 8005542:	2201      	movs	r2, #1
 8005544:	701a      	strb	r2, [r3, #0]
					goingToGoalFlag = 0;
 8005546:	4b23      	ldr	r3, [pc, #140]	; (80055d4 <RobotstateManagement+0x274>)
 8005548:	2200      	movs	r2, #0
 800554a:	701a      	strb	r2, [r3, #0]
				}
			}

			if(goingToGoalFlag == 0 && doingTaskFlag == 1 && Robot.RunningFlag == 0 && endEffFlag == 1){
 800554c:	4b21      	ldr	r3, [pc, #132]	; (80055d4 <RobotstateManagement+0x274>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d128      	bne.n	80055a6 <RobotstateManagement+0x246>
 8005554:	4b1b      	ldr	r3, [pc, #108]	; (80055c4 <RobotstateManagement+0x264>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d124      	bne.n	80055a6 <RobotstateManagement+0x246>
 800555c:	4b14      	ldr	r3, [pc, #80]	; (80055b0 <RobotstateManagement+0x250>)
 800555e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005562:	2b00      	cmp	r3, #0
 8005564:	d11f      	bne.n	80055a6 <RobotstateManagement+0x246>
 8005566:	4b18      	ldr	r3, [pc, #96]	; (80055c8 <RobotstateManagement+0x268>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d11b      	bne.n	80055a6 <RobotstateManagement+0x246>
				RobotState = EndEff;
 800556e:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <RobotstateManagement+0x24c>)
 8005570:	2203      	movs	r2, #3
 8005572:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 8005574:	4b1d      	ldr	r3, [pc, #116]	; (80055ec <RobotstateManagement+0x28c>)
 8005576:	2201      	movs	r2, #1
 8005578:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 800557a:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <RobotstateManagement+0x290>)
 800557c:	2201      	movs	r2, #1
 800557e:	701a      	strb	r2, [r3, #0]
				EndEffState = CheckBeforRun;
 8005580:	4b1c      	ldr	r3, [pc, #112]	; (80055f4 <RobotstateManagement+0x294>)
 8005582:	2201      	movs	r2, #1
 8005584:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005586:	e00e      	b.n	80055a6 <RobotstateManagement+0x246>
		case EndEff:
			break;
		case Emergency:
			Robot.MotorIsOn = 0;
 8005588:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <RobotstateManagement+0x250>)
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PIDAController_Init(&PidVelo);
 8005590:	4819      	ldr	r0, [pc, #100]	; (80055f8 <RobotstateManagement+0x298>)
 8005592:	f7fb fef7 	bl	8001384 <PIDAController_Init>
			PIDAController_Init(&PidPos);
 8005596:	4819      	ldr	r0, [pc, #100]	; (80055fc <RobotstateManagement+0x29c>)
 8005598:	f7fb fef4 	bl	8001384 <PIDAController_Init>
			// Luv u pls pass
			break;
 800559c:	e004      	b.n	80055a8 <RobotstateManagement+0x248>
			break;
 800559e:	bf00      	nop
 80055a0:	e002      	b.n	80055a8 <RobotstateManagement+0x248>
			break;
 80055a2:	bf00      	nop
 80055a4:	e000      	b.n	80055a8 <RobotstateManagement+0x248>
			break;
 80055a6:	bf00      	nop
	}
}
 80055a8:	bf00      	nop
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20000711 	.word	0x20000711
 80055b0:	200006dc 	.word	0x200006dc
 80055b4:	424c0000 	.word	0x424c0000
 80055b8:	43b40000 	.word	0x43b40000
 80055bc:	20000710 	.word	0x20000710
 80055c0:	2000076f 	.word	0x2000076f
 80055c4:	2000076c 	.word	0x2000076c
 80055c8:	2000076a 	.word	0x2000076a
 80055cc:	40020400 	.word	0x40020400
 80055d0:	20000769 	.word	0x20000769
 80055d4:	2000076d 	.word	0x2000076d
 80055d8:	20000754 	.word	0x20000754
 80055dc:	2000086c 	.word	0x2000086c
 80055e0:	20000768 	.word	0x20000768
 80055e4:	20000758 	.word	0x20000758
 80055e8:	20000004 	.word	0x20000004
 80055ec:	20000b01 	.word	0x20000b01
 80055f0:	20000b00 	.word	0x20000b00
 80055f4:	20000000 	.word	0x20000000
 80055f8:	20000808 	.word	0x20000808
 80055fc:	20000838 	.word	0x20000838

08005600 <EndEffstateManagement>:

void EndEffstateManagement()
{
 8005600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005604:	b086      	sub	sp, #24
 8005606:	af00      	add	r7, sp, #0
	switch (EndEffState)
 8005608:	4ba6      	ldr	r3, [pc, #664]	; (80058a4 <EndEffstateManagement+0x2a4>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b04      	cmp	r3, #4
 800560e:	f200 8144 	bhi.w	800589a <EndEffstateManagement+0x29a>
 8005612:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <EndEffstateManagement+0x18>)
 8005614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005618:	0800562d 	.word	0x0800562d
 800561c:	08005635 	.word	0x08005635
 8005620:	080056ef 	.word	0x080056ef
 8005624:	0800576d 	.word	0x0800576d
 8005628:	08005795 	.word	0x08005795
	{
		case idle:
			// Do not thing wait for command
			EndEffStatus = AwaitCommand;
 800562c:	4b9e      	ldr	r3, [pc, #632]	; (80058a8 <EndEffstateManagement+0x2a8>)
 800562e:	2203      	movs	r2, #3
 8005630:	701a      	strb	r2, [r3, #0]
//			I2CEndEffectorWriteFlag = 1;
			break;
 8005632:	e132      	b.n	800589a <EndEffstateManagement+0x29a>
		case CheckBeforRun:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 8005634:	4b9d      	ldr	r3, [pc, #628]	; (80058ac <EndEffstateManagement+0x2ac>)
 8005636:	2223      	movs	r2, #35	; 0x23
 8005638:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 800563a:	489c      	ldr	r0, [pc, #624]	; (80058ac <EndEffstateManagement+0x2ac>)
 800563c:	f000 f956 	bl	80058ec <I2CWriteFcn>
			check[0]++;
 8005640:	4b9b      	ldr	r3, [pc, #620]	; (80058b0 <EndEffstateManagement+0x2b0>)
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	1c51      	adds	r1, r2, #1
 8005648:	6139      	str	r1, [r7, #16]
 800564a:	f143 0300 	adc.w	r3, r3, #0
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	4b97      	ldr	r3, [pc, #604]	; (80058b0 <EndEffstateManagement+0x2b0>)
 8005652:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005656:	e9c3 1200 	strd	r1, r2, [r3]
			if(hi2c1.State == HAL_I2C_STATE_READY)
 800565a:	4b96      	ldr	r3, [pc, #600]	; (80058b4 <EndEffstateManagement+0x2b4>)
 800565c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b20      	cmp	r3, #32
 8005664:	f040 8112 	bne.w	800588c <EndEffstateManagement+0x28c>
			{
				I2CReadFcn(I2CRxDataBuffer);
 8005668:	4893      	ldr	r0, [pc, #588]	; (80058b8 <EndEffstateManagement+0x2b8>)
 800566a:	f000 f965 	bl	8005938 <I2CReadFcn>
				check[1]++;
 800566e:	4b90      	ldr	r3, [pc, #576]	; (80058b0 <EndEffstateManagement+0x2b0>)
 8005670:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005674:	1c51      	adds	r1, r2, #1
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	f143 0300 	adc.w	r3, r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	4b8c      	ldr	r3, [pc, #560]	; (80058b0 <EndEffstateManagement+0x2b0>)
 8005680:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005684:	e9c3 1202 	strd	r1, r2, [r3, #8]
				if(hi2c1.State == HAL_I2C_STATE_READY)
 8005688:	4b8a      	ldr	r3, [pc, #552]	; (80058b4 <EndEffstateManagement+0x2b4>)
 800568a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b20      	cmp	r3, #32
 8005692:	f040 80fb 	bne.w	800588c <EndEffstateManagement+0x28c>
				{
					if(I2CRxDataBuffer[0] == 0x78)
 8005696:	4b88      	ldr	r3, [pc, #544]	; (80058b8 <EndEffstateManagement+0x2b8>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b78      	cmp	r3, #120	; 0x78
 800569c:	d119      	bne.n	80056d2 <EndEffstateManagement+0xd2>
					{
						check[2]++;
 800569e:	4b84      	ldr	r3, [pc, #528]	; (80058b0 <EndEffstateManagement+0x2b0>)
 80056a0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80056a4:	1c51      	adds	r1, r2, #1
 80056a6:	6039      	str	r1, [r7, #0]
 80056a8:	f143 0300 	adc.w	r3, r3, #0
 80056ac:	607b      	str	r3, [r7, #4]
 80056ae:	4b80      	ldr	r3, [pc, #512]	; (80058b0 <EndEffstateManagement+0x2b0>)
 80056b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80056b4:	e9c3 1204 	strd	r1, r2, [r3, #16]
						EndEffState = OpenLaser;
 80056b8:	4b7a      	ldr	r3, [pc, #488]	; (80058a4 <EndEffstateManagement+0x2a4>)
 80056ba:	2202      	movs	r2, #2
 80056bc:	701a      	strb	r2, [r3, #0]
						openLaserWriteFlag = 1;
 80056be:	4b7f      	ldr	r3, [pc, #508]	; (80058bc <EndEffstateManagement+0x2bc>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorWriteFlag = 1;
 80056c4:	4b7e      	ldr	r3, [pc, #504]	; (80058c0 <EndEffstateManagement+0x2c0>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorReadFlag =  0;
 80056ca:	4b7e      	ldr	r3, [pc, #504]	; (80058c4 <EndEffstateManagement+0x2c4>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	701a      	strb	r2, [r3, #0]
						EndEffState = idle;
					}
				}
			}

		break;
 80056d0:	e0dc      	b.n	800588c <EndEffstateManagement+0x28c>
						check[3]++;
 80056d2:	4b77      	ldr	r3, [pc, #476]	; (80058b0 <EndEffstateManagement+0x2b0>)
 80056d4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80056d8:	f112 0a01 	adds.w	sl, r2, #1
 80056dc:	f143 0b00 	adc.w	fp, r3, #0
 80056e0:	4b73      	ldr	r3, [pc, #460]	; (80058b0 <EndEffstateManagement+0x2b0>)
 80056e2:	e9c3 ab06 	strd	sl, fp, [r3, #24]
						EndEffState = idle;
 80056e6:	4b6f      	ldr	r3, [pc, #444]	; (80058a4 <EndEffstateManagement+0x2a4>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	701a      	strb	r2, [r3, #0]
		break;
 80056ec:	e0ce      	b.n	800588c <EndEffstateManagement+0x28c>
		case OpenLaser:
			// Open Laser
			if(openLaserWriteFlag == 1){
 80056ee:	4b73      	ldr	r3, [pc, #460]	; (80058bc <EndEffstateManagement+0x2bc>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d11d      	bne.n	8005732 <EndEffstateManagement+0x132>
				check[4]++;
 80056f6:	4b6e      	ldr	r3, [pc, #440]	; (80058b0 <EndEffstateManagement+0x2b0>)
 80056f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056fc:	1c50      	adds	r0, r2, #1
 80056fe:	f143 0100 	adc.w	r1, r3, #0
 8005702:	4b6b      	ldr	r3, [pc, #428]	; (80058b0 <EndEffstateManagement+0x2b0>)
 8005704:	e9c3 0108 	strd	r0, r1, [r3, #32]
				I2CTxDataBuffer[0] = 0x45;
 8005708:	4b68      	ldr	r3, [pc, #416]	; (80058ac <EndEffstateManagement+0x2ac>)
 800570a:	2245      	movs	r2, #69	; 0x45
 800570c:	701a      	strb	r2, [r3, #0]
				I2CWriteFcn(I2CTxDataBuffer);
 800570e:	4867      	ldr	r0, [pc, #412]	; (80058ac <EndEffstateManagement+0x2ac>)
 8005710:	f000 f8ec 	bl	80058ec <I2CWriteFcn>
				openLaserWriteFlag = 0;
 8005714:	4b69      	ldr	r3, [pc, #420]	; (80058bc <EndEffstateManagement+0x2bc>)
 8005716:	2200      	movs	r2, #0
 8005718:	701a      	strb	r2, [r3, #0]
				endEffLoopTime = Micros();
 800571a:	f000 fb2b 	bl	8005d74 <Micros>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4969      	ldr	r1, [pc, #420]	; (80058c8 <EndEffstateManagement+0x2c8>)
 8005724:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8005728:	2201      	movs	r2, #1
 800572a:	2110      	movs	r1, #16
 800572c:	4867      	ldr	r0, [pc, #412]	; (80058cc <EndEffstateManagement+0x2cc>)
 800572e:	f001 fd55 	bl	80071dc <HAL_GPIO_WritePin>
			}
			if(hi2c1.State == HAL_I2C_STATE_READY && Micros() - endEffLoopTime > 50000)
 8005732:	4b60      	ldr	r3, [pc, #384]	; (80058b4 <EndEffstateManagement+0x2b4>)
 8005734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b20      	cmp	r3, #32
 800573c:	f040 80a8 	bne.w	8005890 <EndEffstateManagement+0x290>
 8005740:	f000 fb18 	bl	8005d74 <Micros>
 8005744:	4b60      	ldr	r3, [pc, #384]	; (80058c8 <EndEffstateManagement+0x2c8>)
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	1a84      	subs	r4, r0, r2
 800574c:	eb61 0503 	sbc.w	r5, r1, r3
 8005750:	f24c 3351 	movw	r3, #50001	; 0xc351
 8005754:	429c      	cmp	r4, r3
 8005756:	f175 0300 	sbcs.w	r3, r5, #0
 800575a:	f0c0 8099 	bcc.w	8005890 <EndEffstateManagement+0x290>
			{
				EndEffState = SetupReadStatus;
 800575e:	4b51      	ldr	r3, [pc, #324]	; (80058a4 <EndEffstateManagement+0x2a4>)
 8005760:	2203      	movs	r2, #3
 8005762:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 8005764:	4b56      	ldr	r3, [pc, #344]	; (80058c0 <EndEffstateManagement+0x2c0>)
 8005766:	2201      	movs	r2, #1
 8005768:	701a      	strb	r2, [r3, #0]
			}
			break;
 800576a:	e091      	b.n	8005890 <EndEffstateManagement+0x290>
		case SetupReadStatus:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 800576c:	4b4f      	ldr	r3, [pc, #316]	; (80058ac <EndEffstateManagement+0x2ac>)
 800576e:	2223      	movs	r2, #35	; 0x23
 8005770:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 8005772:	484e      	ldr	r0, [pc, #312]	; (80058ac <EndEffstateManagement+0x2ac>)
 8005774:	f000 f8ba 	bl	80058ec <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8005778:	4b4e      	ldr	r3, [pc, #312]	; (80058b4 <EndEffstateManagement+0x2b4>)
 800577a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b20      	cmp	r3, #32
 8005782:	f040 8087 	bne.w	8005894 <EndEffstateManagement+0x294>
			{
				EndEffState = ReadStatus;
 8005786:	4b47      	ldr	r3, [pc, #284]	; (80058a4 <EndEffstateManagement+0x2a4>)
 8005788:	2204      	movs	r2, #4
 800578a:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 800578c:	4b4d      	ldr	r3, [pc, #308]	; (80058c4 <EndEffstateManagement+0x2c4>)
 800578e:	2201      	movs	r2, #1
 8005790:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005792:	e07f      	b.n	8005894 <EndEffstateManagement+0x294>
		case ReadStatus:
			I2CReadFcn(I2CRxDataBuffer);
 8005794:	4848      	ldr	r0, [pc, #288]	; (80058b8 <EndEffstateManagement+0x2b8>)
 8005796:	f000 f8cf 	bl	8005938 <I2CReadFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 800579a:	4b46      	ldr	r3, [pc, #280]	; (80058b4 <EndEffstateManagement+0x2b4>)
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d178      	bne.n	8005898 <EndEffstateManagement+0x298>
			{
				I2CEndEffectorReadFlag =  1;
 80057a6:	4b47      	ldr	r3, [pc, #284]	; (80058c4 <EndEffstateManagement+0x2c4>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	701a      	strb	r2, [r3, #0]
				if(I2CRxDataBuffer[0] == 0x78)
 80057ac:	4b42      	ldr	r3, [pc, #264]	; (80058b8 <EndEffstateManagement+0x2b8>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	2b78      	cmp	r3, #120	; 0x78
 80057b2:	d141      	bne.n	8005838 <EndEffstateManagement+0x238>
				{
					check[5]++;
 80057b4:	4b3e      	ldr	r3, [pc, #248]	; (80058b0 <EndEffstateManagement+0x2b0>)
 80057b6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80057ba:	f112 0801 	adds.w	r8, r2, #1
 80057be:	f143 0900 	adc.w	r9, r3, #0
 80057c2:	4b3b      	ldr	r3, [pc, #236]	; (80058b0 <EndEffstateManagement+0x2b0>)
 80057c4:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80057c8:	2200      	movs	r2, #0
 80057ca:	2110      	movs	r1, #16
 80057cc:	483f      	ldr	r0, [pc, #252]	; (80058cc <EndEffstateManagement+0x2cc>)
 80057ce:	f001 fd05 	bl	80071dc <HAL_GPIO_WritePin>
					EndEffState = idle;
 80057d2:	4b34      	ldr	r3, [pc, #208]	; (80058a4 <EndEffstateManagement+0x2a4>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	701a      	strb	r2, [r3, #0]
					EndEffStatus = AwaitCommand;
 80057d8:	4b33      	ldr	r3, [pc, #204]	; (80058a8 <EndEffstateManagement+0x2a8>)
 80057da:	2203      	movs	r2, #3
 80057dc:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 80057de:	4b3c      	ldr	r3, [pc, #240]	; (80058d0 <EndEffstateManagement+0x2d0>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
					if(RobotState != Emergency){
 80057e4:	4b3b      	ldr	r3, [pc, #236]	; (80058d4 <EndEffstateManagement+0x2d4>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d002      	beq.n	80057f2 <EndEffstateManagement+0x1f2>
						RobotState = NormalOperation;
 80057ec:	4b39      	ldr	r3, [pc, #228]	; (80058d4 <EndEffstateManagement+0x2d4>)
 80057ee:	2202      	movs	r2, #2
 80057f0:	701a      	strb	r2, [r3, #0]
					}
					if(doingTaskFlag == 1){
 80057f2:	4b39      	ldr	r3, [pc, #228]	; (80058d8 <EndEffstateManagement+0x2d8>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d14e      	bne.n	8005898 <EndEffstateManagement+0x298>
						goalIDX++;
 80057fa:	4b38      	ldr	r3, [pc, #224]	; (80058dc <EndEffstateManagement+0x2dc>)
 80057fc:	f993 3000 	ldrsb.w	r3, [r3]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	3301      	adds	r3, #1
 8005804:	b2db      	uxtb	r3, r3
 8005806:	b25a      	sxtb	r2, r3
 8005808:	4b34      	ldr	r3, [pc, #208]	; (80058dc <EndEffstateManagement+0x2dc>)
 800580a:	701a      	strb	r2, [r3, #0]
						if(goalIDX > goalAmount-1){
 800580c:	4b34      	ldr	r3, [pc, #208]	; (80058e0 <EndEffstateManagement+0x2e0>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	4b32      	ldr	r3, [pc, #200]	; (80058dc <EndEffstateManagement+0x2dc>)
 8005814:	f993 3000 	ldrsb.w	r3, [r3]
 8005818:	429a      	cmp	r2, r3
 800581a:	dc09      	bgt.n	8005830 <EndEffstateManagement+0x230>
							goalIDX = 0;
 800581c:	4b2f      	ldr	r3, [pc, #188]	; (80058dc <EndEffstateManagement+0x2dc>)
 800581e:	2200      	movs	r2, #0
 8005820:	701a      	strb	r2, [r3, #0]
							goalFlag = 0;
 8005822:	4b30      	ldr	r3, [pc, #192]	; (80058e4 <EndEffstateManagement+0x2e4>)
 8005824:	2200      	movs	r2, #0
 8005826:	701a      	strb	r2, [r3, #0]
							doingTaskFlag = 0;
 8005828:	4b2b      	ldr	r3, [pc, #172]	; (80058d8 <EndEffstateManagement+0x2d8>)
 800582a:	2200      	movs	r2, #0
 800582c:	701a      	strb	r2, [r3, #0]
					EndEffStatus = Closing;
					EndEffState = SetupReadStatus;
					I2CEndEffectorWriteFlag = 1;
				}
			}
			break;
 800582e:	e033      	b.n	8005898 <EndEffstateManagement+0x298>
							notContinueFlag = 1;
 8005830:	4b2d      	ldr	r3, [pc, #180]	; (80058e8 <EndEffstateManagement+0x2e8>)
 8005832:	2201      	movs	r2, #1
 8005834:	701a      	strb	r2, [r3, #0]
			break;
 8005836:	e02f      	b.n	8005898 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x12)
 8005838:	4b1f      	ldr	r3, [pc, #124]	; (80058b8 <EndEffstateManagement+0x2b8>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b12      	cmp	r3, #18
 800583e:	d109      	bne.n	8005854 <EndEffstateManagement+0x254>
					EndEffStatus = Opening;
 8005840:	4b19      	ldr	r3, [pc, #100]	; (80058a8 <EndEffstateManagement+0x2a8>)
 8005842:	2200      	movs	r2, #0
 8005844:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8005846:	4b17      	ldr	r3, [pc, #92]	; (80058a4 <EndEffstateManagement+0x2a4>)
 8005848:	2203      	movs	r2, #3
 800584a:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 800584c:	4b1c      	ldr	r3, [pc, #112]	; (80058c0 <EndEffstateManagement+0x2c0>)
 800584e:	2201      	movs	r2, #1
 8005850:	701a      	strb	r2, [r3, #0]
			break;
 8005852:	e021      	b.n	8005898 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x34)
 8005854:	4b18      	ldr	r3, [pc, #96]	; (80058b8 <EndEffstateManagement+0x2b8>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b34      	cmp	r3, #52	; 0x34
 800585a:	d109      	bne.n	8005870 <EndEffstateManagement+0x270>
					EndEffStatus = Working;
 800585c:	4b12      	ldr	r3, [pc, #72]	; (80058a8 <EndEffstateManagement+0x2a8>)
 800585e:	2202      	movs	r2, #2
 8005860:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8005862:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <EndEffstateManagement+0x2a4>)
 8005864:	2203      	movs	r2, #3
 8005866:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8005868:	4b15      	ldr	r3, [pc, #84]	; (80058c0 <EndEffstateManagement+0x2c0>)
 800586a:	2201      	movs	r2, #1
 800586c:	701a      	strb	r2, [r3, #0]
			break;
 800586e:	e013      	b.n	8005898 <EndEffstateManagement+0x298>
				else if(I2CRxDataBuffer[0] == 0x56)
 8005870:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <EndEffstateManagement+0x2b8>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b56      	cmp	r3, #86	; 0x56
 8005876:	d10f      	bne.n	8005898 <EndEffstateManagement+0x298>
					EndEffStatus = Closing;
 8005878:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <EndEffstateManagement+0x2a8>)
 800587a:	2201      	movs	r2, #1
 800587c:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 800587e:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <EndEffstateManagement+0x2a4>)
 8005880:	2203      	movs	r2, #3
 8005882:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8005884:	4b0e      	ldr	r3, [pc, #56]	; (80058c0 <EndEffstateManagement+0x2c0>)
 8005886:	2201      	movs	r2, #1
 8005888:	701a      	strb	r2, [r3, #0]
			break;
 800588a:	e005      	b.n	8005898 <EndEffstateManagement+0x298>
		break;
 800588c:	bf00      	nop
 800588e:	e004      	b.n	800589a <EndEffstateManagement+0x29a>
			break;
 8005890:	bf00      	nop
 8005892:	e002      	b.n	800589a <EndEffstateManagement+0x29a>
			break;
 8005894:	bf00      	nop
 8005896:	e000      	b.n	800589a <EndEffstateManagement+0x29a>
			break;
 8005898:	bf00      	nop
	}
}
 800589a:	bf00      	nop
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058a4:	20000000 	.word	0x20000000
 80058a8:	20000001 	.word	0x20000001
 80058ac:	20000b08 	.word	0x20000b08
 80058b0:	20000798 	.word	0x20000798
 80058b4:	20000464 	.word	0x20000464
 80058b8:	20000b04 	.word	0x20000b04
 80058bc:	2000076e 	.word	0x2000076e
 80058c0:	20000b01 	.word	0x20000b01
 80058c4:	20000b00 	.word	0x20000b00
 80058c8:	20000af0 	.word	0x20000af0
 80058cc:	40020400 	.word	0x40020400
 80058d0:	2000076a 	.word	0x2000076a
 80058d4:	20000711 	.word	0x20000711
 80058d8:	2000076c 	.word	0x2000076c
 80058dc:	20000768 	.word	0x20000768
 80058e0:	20000767 	.word	0x20000767
 80058e4:	20000769 	.word	0x20000769
 80058e8:	2000076f 	.word	0x2000076f

080058ec <I2CWriteFcn>:

void I2CWriteFcn(uint8_t *Wdata) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorWriteFlag == 1  && hi2c1.State == HAL_I2C_STATE_READY) {
 80058f4:	4b0d      	ldr	r3, [pc, #52]	; (800592c <I2CWriteFcn+0x40>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d112      	bne.n	8005922 <I2CWriteFcn+0x36>
 80058fc:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <I2CWriteFcn+0x44>)
 80058fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b20      	cmp	r3, #32
 8005906:	d10c      	bne.n	8005922 <I2CWriteFcn+0x36>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	781a      	ldrb	r2, [r3, #0]
		static uint8_t data[EndEffRxBuf_SIZE];
		memcpy ((uint8_t *)data, (uint8_t *)Wdata, EndEffRxBuf_SIZE);
 800590c:	4b09      	ldr	r3, [pc, #36]	; (8005934 <I2CWriteFcn+0x48>)
 800590e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, Endeff_ADDR, data, I2CTxDataLen);
 8005910:	2301      	movs	r3, #1
 8005912:	4a08      	ldr	r2, [pc, #32]	; (8005934 <I2CWriteFcn+0x48>)
 8005914:	2146      	movs	r1, #70	; 0x46
 8005916:	4806      	ldr	r0, [pc, #24]	; (8005930 <I2CWriteFcn+0x44>)
 8005918:	f001 fdf0 	bl	80074fc <HAL_I2C_Master_Transmit_IT>
		I2CEndEffectorWriteFlag = 0;
 800591c:	4b03      	ldr	r3, [pc, #12]	; (800592c <I2CWriteFcn+0x40>)
 800591e:	2200      	movs	r2, #0
 8005920:	701a      	strb	r2, [r3, #0]
	}
}
 8005922:	bf00      	nop
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000b01 	.word	0x20000b01
 8005930:	20000464 	.word	0x20000464
 8005934:	20000b1c 	.word	0x20000b1c

08005938 <I2CReadFcn>:
void I2CReadFcn(uint8_t *Rdata) {
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY) {
 8005940:	4b0b      	ldr	r3, [pc, #44]	; (8005970 <I2CReadFcn+0x38>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d10e      	bne.n	8005966 <I2CReadFcn+0x2e>
 8005948:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <I2CReadFcn+0x3c>)
 800594a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b20      	cmp	r3, #32
 8005952:	d108      	bne.n	8005966 <I2CReadFcn+0x2e>
		HAL_I2C_Master_Receive_IT(&hi2c1, Endeff_ADDR, Rdata, I2CRxDataLen);
 8005954:	2301      	movs	r3, #1
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	2146      	movs	r1, #70	; 0x46
 800595a:	4806      	ldr	r0, [pc, #24]	; (8005974 <I2CReadFcn+0x3c>)
 800595c:	f001 fe74 	bl	8007648 <HAL_I2C_Master_Receive_IT>
		I2CEndEffectorReadFlag =  0;
 8005960:	4b03      	ldr	r3, [pc, #12]	; (8005970 <I2CReadFcn+0x38>)
 8005962:	2200      	movs	r2, #0
 8005964:	701a      	strb	r2, [r3, #0]
	}
}
 8005966:	bf00      	nop
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000b00 	.word	0x20000b00
 8005974:	20000464 	.word	0x20000464

08005978 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005978:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	4603      	mov	r3, r0
 8005982:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8005984:	88fb      	ldrh	r3, [r7, #6]
 8005986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800598a:	d103      	bne.n	8005994 <HAL_GPIO_EXTI_Callback+0x1c>
	{
//		I2CEndEffectorWriteFlag = 1;
//		I2CEndEffectorReadFlag =  1;
//		EndEffState = CheckBeforRun;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800598c:	2108      	movs	r1, #8
 800598e:	483e      	ldr	r0, [pc, #248]	; (8005a88 <HAL_GPIO_EXTI_Callback+0x110>)
 8005990:	f001 fc3d 	bl	800720e <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_10)
 8005994:	88fb      	ldrh	r3, [r7, #6]
 8005996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599a:	d13e      	bne.n	8005a1a <HAL_GPIO_EXTI_Callback+0xa2>
	{
		// Proxi Sensor
		if(Robot.flagSethome == 1)
 800599c:	4b3b      	ldr	r3, [pc, #236]	; (8005a8c <HAL_GPIO_EXTI_Callback+0x114>)
 800599e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d139      	bne.n	8005a1a <HAL_GPIO_EXTI_Callback+0xa2>
		{
			homePoint[homeFF] = PositionDeg[0];
 80059a6:	4b3a      	ldr	r3, [pc, #232]	; (8005a90 <HAL_GPIO_EXTI_Callback+0x118>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	4618      	mov	r0, r3
 80059ac:	4b39      	ldr	r3, [pc, #228]	; (8005a94 <HAL_GPIO_EXTI_Callback+0x11c>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	4939      	ldr	r1, [pc, #228]	; (8005a98 <HAL_GPIO_EXTI_Callback+0x120>)
 80059b2:	0083      	lsls	r3, r0, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	601a      	str	r2, [r3, #0]
			homeFF++;
 80059b8:	4b35      	ldr	r3, [pc, #212]	; (8005a90 <HAL_GPIO_EXTI_Callback+0x118>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	3301      	adds	r3, #1
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	4b33      	ldr	r3, [pc, #204]	; (8005a90 <HAL_GPIO_EXTI_Callback+0x118>)
 80059c2:	701a      	strb	r2, [r3, #0]
			if(homeFF == 2)
 80059c4:	4b32      	ldr	r3, [pc, #200]	; (8005a90 <HAL_GPIO_EXTI_Callback+0x118>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d126      	bne.n	8005a1a <HAL_GPIO_EXTI_Callback+0xa2>
			{
				if(homePoint[1]-homePoint[0] > 180.0)
 80059cc:	4b32      	ldr	r3, [pc, #200]	; (8005a98 <HAL_GPIO_EXTI_Callback+0x120>)
 80059ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80059d2:	4b31      	ldr	r3, [pc, #196]	; (8005a98 <HAL_GPIO_EXTI_Callback+0x120>)
 80059d4:	edd3 7a00 	vldr	s15, [r3]
 80059d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059dc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005a9c <HAL_GPIO_EXTI_Callback+0x124>
 80059e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e8:	dd04      	ble.n	80059f4 <HAL_GPIO_EXTI_Callback+0x7c>
				{
					Robot.HomePositon =  0;
 80059ea:	4b28      	ldr	r3, [pc, #160]	; (8005a8c <HAL_GPIO_EXTI_Callback+0x114>)
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	615a      	str	r2, [r3, #20]
 80059f2:	e00e      	b.n	8005a12 <HAL_GPIO_EXTI_Callback+0x9a>
				}
				else
				{
					Robot.HomePositon = (homePoint[0]+homePoint[1])/2.0;
 80059f4:	4b28      	ldr	r3, [pc, #160]	; (8005a98 <HAL_GPIO_EXTI_Callback+0x120>)
 80059f6:	ed93 7a00 	vldr	s14, [r3]
 80059fa:	4b27      	ldr	r3, [pc, #156]	; (8005a98 <HAL_GPIO_EXTI_Callback+0x120>)
 80059fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a04:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005a08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a0c:	4b1f      	ldr	r3, [pc, #124]	; (8005a8c <HAL_GPIO_EXTI_Callback+0x114>)
 8005a0e:	edc3 7a05 	vstr	s15, [r3, #20]
				}
				Robot.flagSethome = 2;
 8005a12:	4b1e      	ldr	r3, [pc, #120]	; (8005a8c <HAL_GPIO_EXTI_Callback+0x114>)
 8005a14:	2202      	movs	r2, #2
 8005a16:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			}
		}
	}
	if(GPIO_Pin == GPIO_PIN_5)
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	2b20      	cmp	r3, #32
 8005a1e:	d12e      	bne.n	8005a7e <HAL_GPIO_EXTI_Callback+0x106>
	{
		if(EmertimeoutFlag == 0)
 8005a20:	4b1f      	ldr	r3, [pc, #124]	; (8005aa0 <HAL_GPIO_EXTI_Callback+0x128>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d102      	bne.n	8005a2e <HAL_GPIO_EXTI_Callback+0xb6>
		{
			EmertimeoutFlag = 1;
 8005a28:	4b1d      	ldr	r3, [pc, #116]	; (8005aa0 <HAL_GPIO_EXTI_Callback+0x128>)
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	701a      	strb	r2, [r3, #0]
		}

		if(Micros() - EmergencycalloutTime > 100000 && EmertimeoutFlag == 1)
 8005a2e:	f000 f9a1 	bl	8005d74 <Micros>
 8005a32:	4b1c      	ldr	r3, [pc, #112]	; (8005aa4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	1a84      	subs	r4, r0, r2
 8005a3a:	eb61 0503 	sbc.w	r5, r1, r3
 8005a3e:	4b1a      	ldr	r3, [pc, #104]	; (8005aa8 <HAL_GPIO_EXTI_Callback+0x130>)
 8005a40:	429c      	cmp	r4, r3
 8005a42:	f175 0300 	sbcs.w	r3, r5, #0
 8005a46:	d31a      	bcc.n	8005a7e <HAL_GPIO_EXTI_Callback+0x106>
 8005a48:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <HAL_GPIO_EXTI_Callback+0x128>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d116      	bne.n	8005a7e <HAL_GPIO_EXTI_Callback+0x106>
		{
			check[6]++;
 8005a50:	4b16      	ldr	r3, [pc, #88]	; (8005aac <HAL_GPIO_EXTI_Callback+0x134>)
 8005a52:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005a56:	f112 0801 	adds.w	r8, r2, #1
 8005a5a:	f143 0900 	adc.w	r9, r3, #0
 8005a5e:	4b13      	ldr	r3, [pc, #76]	; (8005aac <HAL_GPIO_EXTI_Callback+0x134>)
 8005a60:	e9c3 890c 	strd	r8, r9, [r3, #48]	; 0x30
			EmergencycalloutTime = Micros();
 8005a64:	f000 f986 	bl	8005d74 <Micros>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	490d      	ldr	r1, [pc, #52]	; (8005aa4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8005a6e:	e9c1 2300 	strd	r2, r3, [r1]
			EmertimeoutFlag = 0;
 8005a72:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <HAL_GPIO_EXTI_Callback+0x128>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	701a      	strb	r2, [r3, #0]
			//Docode
			HAL_TIM_Base_Start_IT(&htim5);
 8005a78:	480d      	ldr	r0, [pc, #52]	; (8005ab0 <HAL_GPIO_EXTI_Callback+0x138>)
 8005a7a:	f004 f857 	bl	8009b2c <HAL_TIM_Base_Start_IT>
		}
	}
}
 8005a7e:	bf00      	nop
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005a88:	40020400 	.word	0x40020400
 8005a8c:	200006dc 	.word	0x200006dc
 8005a90:	20000704 	.word	0x20000704
 8005a94:	200007f8 	.word	0x200007f8
 8005a98:	20000708 	.word	0x20000708
 8005a9c:	43340000 	.word	0x43340000
 8005aa0:	20000ae8 	.word	0x20000ae8
 8005aa4:	20000ae0 	.word	0x20000ae0
 8005aa8:	000186a1 	.word	0x000186a1
 8005aac:	20000798 	.word	0x20000798
 8005ab0:	20000548 	.word	0x20000548

08005ab4 <RobotRunToPositon>:
void RobotRunToPositon(float Destination , float VeloInput)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	ed87 0a01 	vstr	s0, [r7, #4]
 8005abe:	edc7 0a00 	vstr	s1, [r7]
	Robot.GoalPositon = Destination;
 8005ac2:	4a16      	ldr	r2, [pc, #88]	; (8005b1c <RobotRunToPositon+0x68>)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	60d3      	str	r3, [r2, #12]
	Robot.QVMax = VeloInput;
 8005ac8:	4a14      	ldr	r2, [pc, #80]	; (8005b1c <RobotRunToPositon+0x68>)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	6213      	str	r3, [r2, #32]
	CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 8005ace:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <RobotRunToPositon+0x68>)
 8005ad0:	edd3 7a00 	vldr	s15, [r3]
 8005ad4:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <RobotRunToPositon+0x68>)
 8005ad6:	ed93 7a03 	vldr	s14, [r3, #12]
 8005ada:	4b10      	ldr	r3, [pc, #64]	; (8005b1c <RobotRunToPositon+0x68>)
 8005adc:	edd3 6a08 	vldr	s13, [r3, #32]
 8005ae0:	eeb0 1a66 	vmov.f32	s2, s13
 8005ae4:	eef0 0a47 	vmov.f32	s1, s14
 8005ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8005aec:	480c      	ldr	r0, [pc, #48]	; (8005b20 <RobotRunToPositon+0x6c>)
 8005aee:	f7fb ff93 	bl	8001a18 <CoefficientAndTimeCalculation>
	// Start Trajectory Evaluator
	Robot.MotorIsOn = 1;
 8005af2:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <RobotRunToPositon+0x68>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Robot.flagStartTime = 1;
 8005afa:	4b08      	ldr	r3, [pc, #32]	; (8005b1c <RobotRunToPositon+0x68>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Robot.RunningFlag = 1;
 8005b02:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <RobotRunToPositon+0x68>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	2108      	movs	r1, #8
 8005b0e:	4805      	ldr	r0, [pc, #20]	; (8005b24 <RobotRunToPositon+0x70>)
 8005b10:	f001 fb64 	bl	80071dc <HAL_GPIO_WritePin>
}
 8005b14:	bf00      	nop
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	200006dc 	.word	0x200006dc
 8005b20:	2000086c 	.word	0x2000086c
 8005b24:	40020400 	.word	0x40020400

08005b28 <RobotResetAll>:


void RobotResetAll()
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
	// Reset Encoder
	TIM_ResetCounter(TIM2);
 8005b2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005b30:	f000 f866 	bl	8005c00 <TIM_ResetCounter>
	EncoderRawData[0] = 0;
 8005b34:	4b23      	ldr	r3, [pc, #140]	; (8005bc4 <RobotResetAll+0x9c>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]
	EncoderRawData[1] = 0;
 8005b3a:	4b22      	ldr	r3, [pc, #136]	; (8005bc4 <RobotResetAll+0x9c>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	605a      	str	r2, [r3, #4]
	WrappingStep = 0;
 8005b40:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <RobotResetAll+0xa0>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
	// Reset Trajectory
	CoefficientAndTimeCalculation(&traject,0.0,0.0,60);
 8005b46:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8005bcc <RobotResetAll+0xa4>
 8005b4a:	eddf 0a21 	vldr	s1, [pc, #132]	; 8005bd0 <RobotResetAll+0xa8>
 8005b4e:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8005bd0 <RobotResetAll+0xa8>
 8005b52:	4820      	ldr	r0, [pc, #128]	; (8005bd4 <RobotResetAll+0xac>)
 8005b54:	f7fb ff60 	bl	8001a18 <CoefficientAndTimeCalculation>
	Robot.flagStartTime = 1;
 8005b58:	4b1f      	ldr	r3, [pc, #124]	; (8005bd8 <RobotResetAll+0xb0>)
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	StartTime = 0;
 8005b60:	491e      	ldr	r1, [pc, #120]	; (8005bdc <RobotResetAll+0xb4>)
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	f04f 0300 	mov.w	r3, #0
 8005b6a:	e9c1 2300 	strd	r2, r3, [r1]
	CurrentTime = 0;
 8005b6e:	491c      	ldr	r1, [pc, #112]	; (8005be0 <RobotResetAll+0xb8>)
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	f04f 0300 	mov.w	r3, #0
 8005b78:	e9c1 2300 	strd	r2, r3, [r1]
	// Reset Position
	PositionDeg[0] = 0;
 8005b7c:	4b19      	ldr	r3, [pc, #100]	; (8005be4 <RobotResetAll+0xbc>)
 8005b7e:	f04f 0200 	mov.w	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]
	PositionDeg[1] = 0;
 8005b84:	4b17      	ldr	r3, [pc, #92]	; (8005be4 <RobotResetAll+0xbc>)
 8005b86:	f04f 0200 	mov.w	r2, #0
 8005b8a:	605a      	str	r2, [r3, #4]
	KalmanMatrixReset(&KalmanVar, Pvar);
 8005b8c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8005be8 <RobotResetAll+0xc0>
 8005b90:	4816      	ldr	r0, [pc, #88]	; (8005bec <RobotResetAll+0xc4>)
 8005b92:	f7fb fa49 	bl	8001028 <KalmanMatrixReset>
	Robotinit(&Robot);
 8005b96:	4810      	ldr	r0, [pc, #64]	; (8005bd8 <RobotResetAll+0xb0>)
 8005b98:	f7fb feb2 	bl	8001900 <Robotinit>
	// Reset Pid
	PIDAController_Init(&PidVelo);
 8005b9c:	4814      	ldr	r0, [pc, #80]	; (8005bf0 <RobotResetAll+0xc8>)
 8005b9e:	f7fb fbf1 	bl	8001384 <PIDAController_Init>
	PIDAController_Init(&PidPos);
 8005ba2:	4814      	ldr	r0, [pc, #80]	; (8005bf4 <RobotResetAll+0xcc>)
 8005ba4:	f7fb fbee 	bl	8001384 <PIDAController_Init>
	// Reset Home Buffer
	homePoint[0] = 0;
 8005ba8:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <RobotResetAll+0xd0>)
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]
	homePoint[1] = 0;
 8005bb0:	4b11      	ldr	r3, [pc, #68]	; (8005bf8 <RobotResetAll+0xd0>)
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	605a      	str	r2, [r3, #4]
	homeFF = 0;
 8005bb8:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <RobotResetAll+0xd4>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	701a      	strb	r2, [r3, #0]
}
 8005bbe:	bf00      	nop
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	200007e8 	.word	0x200007e8
 8005bc8:	200007f0 	.word	0x200007f0
 8005bcc:	42700000 	.word	0x42700000
 8005bd0:	00000000 	.word	0x00000000
 8005bd4:	2000086c 	.word	0x2000086c
 8005bd8:	200006dc 	.word	0x200006dc
 8005bdc:	20000ab0 	.word	0x20000ab0
 8005be0:	20000ab8 	.word	0x20000ab8
 8005be4:	200007f8 	.word	0x200007f8
 8005be8:	447a0000 	.word	0x447a0000
 8005bec:	20000034 	.word	0x20000034
 8005bf0:	20000808 	.word	0x20000808
 8005bf4:	20000838 	.word	0x20000838
 8005bf8:	20000708 	.word	0x20000708
 8005bfc:	20000704 	.word	0x20000704

08005c00 <TIM_ResetCounter>:

void TIM_ResetCounter(TIM_TypeDef* TIMx)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Reset the Counter Register value */
  TIMx->CNT = 0;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
	...

08005c1c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a47      	ldr	r2, [pc, #284]	; (8005d48 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d10b      	bne.n	8005c46 <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micro += 65535;
 8005c2e:	4b47      	ldr	r3, [pc, #284]	; (8005d4c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c38:	eb12 0a01 	adds.w	sl, r2, r1
 8005c3c:	f143 0b00 	adc.w	fp, r3, #0
 8005c40:	4b42      	ldr	r3, [pc, #264]	; (8005d4c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005c42:	e9c3 ab00 	strd	sl, fp, [r3]
	}
	if (htim == &htim5){
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a41      	ldr	r2, [pc, #260]	; (8005d50 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d177      	bne.n	8005d3e <HAL_TIM_PeriodElapsedCallback+0x122>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET)
 8005c4e:	2120      	movs	r1, #32
 8005c50:	4840      	ldr	r0, [pc, #256]	; (8005d54 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005c52:	f001 faab 	bl	80071ac <HAL_GPIO_ReadPin>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d15b      	bne.n	8005d14 <HAL_TIM_PeriodElapsedCallback+0xf8>
		{
			check[7]++;
 8005c5c:	4b3e      	ldr	r3, [pc, #248]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005c5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005c62:	f112 0801 	adds.w	r8, r2, #1
 8005c66:	f143 0900 	adc.w	r9, r3, #0
 8005c6a:	4b3b      	ldr	r3, [pc, #236]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005c6c:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
			if(EndEffState != idle)
 8005c70:	4b3a      	ldr	r3, [pc, #232]	; (8005d5c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <HAL_TIM_PeriodElapsedCallback+0x64>
			{
				RobotState = EndEff;
 8005c78:	4b39      	ldr	r3, [pc, #228]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005c7a:	2203      	movs	r2, #3
 8005c7c:	701a      	strb	r2, [r3, #0]
 8005c7e:	e002      	b.n	8005c86 <HAL_TIM_PeriodElapsedCallback+0x6a>
			}
			else
			{
				RobotState = NormalOperation;
 8005c80:	4b37      	ldr	r3, [pc, #220]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005c82:	2202      	movs	r2, #2
 8005c84:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8005c86:	2200      	movs	r2, #0
 8005c88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c8c:	4831      	ldr	r0, [pc, #196]	; (8005d54 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005c8e:	f001 faa5 	bl	80071dc <HAL_GPIO_WritePin>
			if((doingTaskFlag == 1 && goingToGoalFlag == 1) || homingFlag == 1)
 8005c92:	4b34      	ldr	r3, [pc, #208]	; (8005d64 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d103      	bne.n	8005ca2 <HAL_TIM_PeriodElapsedCallback+0x86>
 8005c9a:	4b33      	ldr	r3, [pc, #204]	; (8005d68 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d003      	beq.n	8005caa <HAL_TIM_PeriodElapsedCallback+0x8e>
 8005ca2:	4b32      	ldr	r3, [pc, #200]	; (8005d6c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d10b      	bne.n	8005cc2 <HAL_TIM_PeriodElapsedCallback+0xa6>
			{
				RobotRunToPositon(Robot.GoalPositon,Robot.QVMax);
 8005caa:	4b31      	ldr	r3, [pc, #196]	; (8005d70 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005cac:	edd3 7a03 	vldr	s15, [r3, #12]
 8005cb0:	4b2f      	ldr	r3, [pc, #188]	; (8005d70 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005cb2:	ed93 7a08 	vldr	s14, [r3, #32]
 8005cb6:	eef0 0a47 	vmov.f32	s1, s14
 8005cba:	eeb0 0a67 	vmov.f32	s0, s15
 8005cbe:	f7ff fef9 	bl	8005ab4 <RobotRunToPositon>
			}
			if(Robot.flagSethome == 1){
 8005cc2:	4b2b      	ldr	r3, [pc, #172]	; (8005d70 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005cc4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d105      	bne.n	8005cd8 <HAL_TIM_PeriodElapsedCallback+0xbc>
				RobotResetAll();
 8005ccc:	f7ff ff2c 	bl	8005b28 <RobotResetAll>
				RobotState = init;
 8005cd0:	4b23      	ldr	r3, [pc, #140]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	e02f      	b.n	8005d38 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
			else if(Robot.flagSethome == 2 || Robot.flagSethome == 3)
 8005cd8:	4b25      	ldr	r3, [pc, #148]	; (8005d70 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005cda:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d004      	beq.n	8005cec <HAL_TIM_PeriodElapsedCallback+0xd0>
 8005ce2:	4b23      	ldr	r3, [pc, #140]	; (8005d70 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005ce4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d125      	bne.n	8005d38 <HAL_TIM_PeriodElapsedCallback+0x11c>
			{
				Robot.flagSethome = 3;
 8005cec:	4b20      	ldr	r3, [pc, #128]	; (8005d70 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005cee:	2203      	movs	r2, #3
 8005cf0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				RobotRunToPositon(Robot.HomePositon,Robot.QVMax);
 8005cf4:	4b1e      	ldr	r3, [pc, #120]	; (8005d70 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005cf6:	edd3 7a05 	vldr	s15, [r3, #20]
 8005cfa:	4b1d      	ldr	r3, [pc, #116]	; (8005d70 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8005cfc:	ed93 7a08 	vldr	s14, [r3, #32]
 8005d00:	eef0 0a47 	vmov.f32	s1, s14
 8005d04:	eeb0 0a67 	vmov.f32	s0, s15
 8005d08:	f7ff fed4 	bl	8005ab4 <RobotRunToPositon>
				RobotState = FindHome;
 8005d0c:	4b14      	ldr	r3, [pc, #80]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	701a      	strb	r2, [r3, #0]
 8005d12:	e011      	b.n	8005d38 <HAL_TIM_PeriodElapsedCallback+0x11c>
			}
		}
		else
		{
			check[8]++;
 8005d14:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005d16:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8005d1a:	1c54      	adds	r4, r2, #1
 8005d1c:	f143 0500 	adc.w	r5, r3, #0
 8005d20:	4b0d      	ldr	r3, [pc, #52]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8005d22:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
			RobotState = Emergency;
 8005d26:	4b0e      	ldr	r3, [pc, #56]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005d28:	2204      	movs	r2, #4
 8005d2a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d32:	4808      	ldr	r0, [pc, #32]	; (8005d54 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005d34:	f001 fa52 	bl	80071dc <HAL_GPIO_WritePin>
		}
		HAL_TIM_Base_Stop_IT(&htim5);
 8005d38:	4805      	ldr	r0, [pc, #20]	; (8005d50 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005d3a:	f003 ff59 	bl	8009bf0 <HAL_TIM_Base_Stop_IT>
	}
}
 8005d3e:	bf00      	nop
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d48:	20000590 	.word	0x20000590
 8005d4c:	20000778 	.word	0x20000778
 8005d50:	20000548 	.word	0x20000548
 8005d54:	40020400 	.word	0x40020400
 8005d58:	20000798 	.word	0x20000798
 8005d5c:	20000000 	.word	0x20000000
 8005d60:	20000711 	.word	0x20000711
 8005d64:	2000076c 	.word	0x2000076c
 8005d68:	2000076d 	.word	0x2000076d
 8005d6c:	2000076b 	.word	0x2000076b
 8005d70:	200006dc 	.word	0x200006dc

08005d74 <Micros>:

uint64_t Micros(){
 8005d74:	b4b0      	push	{r4, r5, r7}
 8005d76:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8005d78:	4b08      	ldr	r3, [pc, #32]	; (8005d9c <Micros+0x28>)
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	4618      	mov	r0, r3
 8005d80:	4611      	mov	r1, r2
 8005d82:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <Micros+0x2c>)
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	1884      	adds	r4, r0, r2
 8005d8a:	eb41 0503 	adc.w	r5, r1, r3
 8005d8e:	4622      	mov	r2, r4
 8005d90:	462b      	mov	r3, r5
}
 8005d92:	4610      	mov	r0, r2
 8005d94:	4619      	mov	r1, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bcb0      	pop	{r4, r5, r7}
 8005d9a:	4770      	bx	lr
 8005d9c:	40014800 	.word	0x40014800
 8005da0:	20000778 	.word	0x20000778

08005da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005da8:	b672      	cpsid	i
}
 8005daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005dac:	e7fe      	b.n	8005dac <Error_Handler+0x8>
	...

08005db0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005db6:	2300      	movs	r3, #0
 8005db8:	607b      	str	r3, [r7, #4]
 8005dba:	4b10      	ldr	r3, [pc, #64]	; (8005dfc <HAL_MspInit+0x4c>)
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbe:	4a0f      	ldr	r2, [pc, #60]	; (8005dfc <HAL_MspInit+0x4c>)
 8005dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8005dc6:	4b0d      	ldr	r3, [pc, #52]	; (8005dfc <HAL_MspInit+0x4c>)
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dce:	607b      	str	r3, [r7, #4]
 8005dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	603b      	str	r3, [r7, #0]
 8005dd6:	4b09      	ldr	r3, [pc, #36]	; (8005dfc <HAL_MspInit+0x4c>)
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	4a08      	ldr	r2, [pc, #32]	; (8005dfc <HAL_MspInit+0x4c>)
 8005ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de0:	6413      	str	r3, [r2, #64]	; 0x40
 8005de2:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <HAL_MspInit+0x4c>)
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005dee:	2007      	movs	r0, #7
 8005df0:	f000 fc06 	bl	8006600 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005df4:	bf00      	nop
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40023800 	.word	0x40023800

08005e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08a      	sub	sp, #40	; 0x28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e08:	f107 0314 	add.w	r3, r7, #20
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	605a      	str	r2, [r3, #4]
 8005e12:	609a      	str	r2, [r3, #8]
 8005e14:	60da      	str	r2, [r3, #12]
 8005e16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a21      	ldr	r2, [pc, #132]	; (8005ea4 <HAL_I2C_MspInit+0xa4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d13c      	bne.n	8005e9c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e22:	2300      	movs	r3, #0
 8005e24:	613b      	str	r3, [r7, #16]
 8005e26:	4b20      	ldr	r3, [pc, #128]	; (8005ea8 <HAL_I2C_MspInit+0xa8>)
 8005e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2a:	4a1f      	ldr	r2, [pc, #124]	; (8005ea8 <HAL_I2C_MspInit+0xa8>)
 8005e2c:	f043 0302 	orr.w	r3, r3, #2
 8005e30:	6313      	str	r3, [r2, #48]	; 0x30
 8005e32:	4b1d      	ldr	r3, [pc, #116]	; (8005ea8 <HAL_I2C_MspInit+0xa8>)
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	613b      	str	r3, [r7, #16]
 8005e3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005e3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e44:	2312      	movs	r3, #18
 8005e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005e50:	2304      	movs	r3, #4
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e54:	f107 0314 	add.w	r3, r7, #20
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4814      	ldr	r0, [pc, #80]	; (8005eac <HAL_I2C_MspInit+0xac>)
 8005e5c:	f001 f822 	bl	8006ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	4b10      	ldr	r3, [pc, #64]	; (8005ea8 <HAL_I2C_MspInit+0xa8>)
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	4a0f      	ldr	r2, [pc, #60]	; (8005ea8 <HAL_I2C_MspInit+0xa8>)
 8005e6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8005e70:	4b0d      	ldr	r3, [pc, #52]	; (8005ea8 <HAL_I2C_MspInit+0xa8>)
 8005e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2100      	movs	r1, #0
 8005e80:	201f      	movs	r0, #31
 8005e82:	f000 fbc8 	bl	8006616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005e86:	201f      	movs	r0, #31
 8005e88:	f000 fbe1 	bl	800664e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2100      	movs	r1, #0
 8005e90:	2020      	movs	r0, #32
 8005e92:	f000 fbc0 	bl	8006616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005e96:	2020      	movs	r0, #32
 8005e98:	f000 fbd9 	bl	800664e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005e9c:	bf00      	nop
 8005e9e:	3728      	adds	r7, #40	; 0x28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	40005400 	.word	0x40005400
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	40020400 	.word	0x40020400

08005eb0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a0e      	ldr	r2, [pc, #56]	; (8005ef8 <HAL_TIM_PWM_MspInit+0x48>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d115      	bne.n	8005eee <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <HAL_TIM_PWM_MspInit+0x4c>)
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eca:	4a0c      	ldr	r2, [pc, #48]	; (8005efc <HAL_TIM_PWM_MspInit+0x4c>)
 8005ecc:	f043 0301 	orr.w	r3, r3, #1
 8005ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <HAL_TIM_PWM_MspInit+0x4c>)
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005ede:	2200      	movs	r2, #0
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	201a      	movs	r0, #26
 8005ee4:	f000 fb97 	bl	8006616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005ee8:	201a      	movs	r0, #26
 8005eea:	f000 fbb0 	bl	800664e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40010000 	.word	0x40010000
 8005efc:	40023800 	.word	0x40023800

08005f00 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08a      	sub	sp, #40	; 0x28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f08:	f107 0314 	add.w	r3, r7, #20
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	605a      	str	r2, [r3, #4]
 8005f12:	609a      	str	r2, [r3, #8]
 8005f14:	60da      	str	r2, [r3, #12]
 8005f16:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f20:	d12b      	bne.n	8005f7a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f22:	2300      	movs	r3, #0
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	4b17      	ldr	r3, [pc, #92]	; (8005f84 <HAL_TIM_Encoder_MspInit+0x84>)
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	4a16      	ldr	r2, [pc, #88]	; (8005f84 <HAL_TIM_Encoder_MspInit+0x84>)
 8005f2c:	f043 0301 	orr.w	r3, r3, #1
 8005f30:	6413      	str	r3, [r2, #64]	; 0x40
 8005f32:	4b14      	ldr	r3, [pc, #80]	; (8005f84 <HAL_TIM_Encoder_MspInit+0x84>)
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	4b10      	ldr	r3, [pc, #64]	; (8005f84 <HAL_TIM_Encoder_MspInit+0x84>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	4a0f      	ldr	r2, [pc, #60]	; (8005f84 <HAL_TIM_Encoder_MspInit+0x84>)
 8005f48:	f043 0301 	orr.w	r3, r3, #1
 8005f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f4e:	4b0d      	ldr	r3, [pc, #52]	; (8005f84 <HAL_TIM_Encoder_MspInit+0x84>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f5e:	2302      	movs	r3, #2
 8005f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f66:	2300      	movs	r3, #0
 8005f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f6e:	f107 0314 	add.w	r3, r7, #20
 8005f72:	4619      	mov	r1, r3
 8005f74:	4804      	ldr	r0, [pc, #16]	; (8005f88 <HAL_TIM_Encoder_MspInit+0x88>)
 8005f76:	f000 ff95 	bl	8006ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005f7a:	bf00      	nop
 8005f7c:	3728      	adds	r7, #40	; 0x28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40023800 	.word	0x40023800
 8005f88:	40020000 	.word	0x40020000

08005f8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1c      	ldr	r2, [pc, #112]	; (800600c <HAL_TIM_Base_MspInit+0x80>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d116      	bne.n	8005fcc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	4b1b      	ldr	r3, [pc, #108]	; (8006010 <HAL_TIM_Base_MspInit+0x84>)
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	4a1a      	ldr	r2, [pc, #104]	; (8006010 <HAL_TIM_Base_MspInit+0x84>)
 8005fa8:	f043 0308 	orr.w	r3, r3, #8
 8005fac:	6413      	str	r3, [r2, #64]	; 0x40
 8005fae:	4b18      	ldr	r3, [pc, #96]	; (8006010 <HAL_TIM_Base_MspInit+0x84>)
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005fba:	2200      	movs	r2, #0
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	2032      	movs	r0, #50	; 0x32
 8005fc0:	f000 fb29 	bl	8006616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005fc4:	2032      	movs	r0, #50	; 0x32
 8005fc6:	f000 fb42 	bl	800664e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8005fca:	e01a      	b.n	8006002 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a10      	ldr	r2, [pc, #64]	; (8006014 <HAL_TIM_Base_MspInit+0x88>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d115      	bne.n	8006002 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60bb      	str	r3, [r7, #8]
 8005fda:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <HAL_TIM_Base_MspInit+0x84>)
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fde:	4a0c      	ldr	r2, [pc, #48]	; (8006010 <HAL_TIM_Base_MspInit+0x84>)
 8005fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8005fe6:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <HAL_TIM_Base_MspInit+0x84>)
 8005fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fee:	60bb      	str	r3, [r7, #8]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	201a      	movs	r0, #26
 8005ff8:	f000 fb0d 	bl	8006616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005ffc:	201a      	movs	r0, #26
 8005ffe:	f000 fb26 	bl	800664e <HAL_NVIC_EnableIRQ>
}
 8006002:	bf00      	nop
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40000c00 	.word	0x40000c00
 8006010:	40023800 	.word	0x40023800
 8006014:	40014800 	.word	0x40014800

08006018 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006020:	f107 030c 	add.w	r3, r7, #12
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	605a      	str	r2, [r3, #4]
 800602a:	609a      	str	r2, [r3, #8]
 800602c:	60da      	str	r2, [r3, #12]
 800602e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a12      	ldr	r2, [pc, #72]	; (8006080 <HAL_TIM_MspPostInit+0x68>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d11e      	bne.n	8006078 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800603a:	2300      	movs	r3, #0
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	4b11      	ldr	r3, [pc, #68]	; (8006084 <HAL_TIM_MspPostInit+0x6c>)
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	4a10      	ldr	r2, [pc, #64]	; (8006084 <HAL_TIM_MspPostInit+0x6c>)
 8006044:	f043 0301 	orr.w	r3, r3, #1
 8006048:	6313      	str	r3, [r2, #48]	; 0x30
 800604a:	4b0e      	ldr	r3, [pc, #56]	; (8006084 <HAL_TIM_MspPostInit+0x6c>)
 800604c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	60bb      	str	r3, [r7, #8]
 8006054:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006056:	f44f 7380 	mov.w	r3, #256	; 0x100
 800605a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800605c:	2302      	movs	r3, #2
 800605e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006064:	2300      	movs	r3, #0
 8006066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006068:	2301      	movs	r3, #1
 800606a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800606c:	f107 030c 	add.w	r3, r7, #12
 8006070:	4619      	mov	r1, r3
 8006072:	4805      	ldr	r0, [pc, #20]	; (8006088 <HAL_TIM_MspPostInit+0x70>)
 8006074:	f000 ff16 	bl	8006ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006078:	bf00      	nop
 800607a:	3720      	adds	r7, #32
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40010000 	.word	0x40010000
 8006084:	40023800 	.word	0x40023800
 8006088:	40020000 	.word	0x40020000

0800608c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	; 0x28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006094:	f107 0314 	add.w	r3, r7, #20
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	605a      	str	r2, [r3, #4]
 800609e:	609a      	str	r2, [r3, #8]
 80060a0:	60da      	str	r2, [r3, #12]
 80060a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a4b      	ldr	r2, [pc, #300]	; (80061d8 <HAL_UART_MspInit+0x14c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	f040 8090 	bne.w	80061d0 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80060b0:	2300      	movs	r3, #0
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	4b49      	ldr	r3, [pc, #292]	; (80061dc <HAL_UART_MspInit+0x150>)
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	4a48      	ldr	r2, [pc, #288]	; (80061dc <HAL_UART_MspInit+0x150>)
 80060ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060be:	6413      	str	r3, [r2, #64]	; 0x40
 80060c0:	4b46      	ldr	r3, [pc, #280]	; (80061dc <HAL_UART_MspInit+0x150>)
 80060c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	4b42      	ldr	r3, [pc, #264]	; (80061dc <HAL_UART_MspInit+0x150>)
 80060d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d4:	4a41      	ldr	r2, [pc, #260]	; (80061dc <HAL_UART_MspInit+0x150>)
 80060d6:	f043 0301 	orr.w	r3, r3, #1
 80060da:	6313      	str	r3, [r2, #48]	; 0x30
 80060dc:	4b3f      	ldr	r3, [pc, #252]	; (80061dc <HAL_UART_MspInit+0x150>)
 80060de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80060e8:	230c      	movs	r3, #12
 80060ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ec:	2302      	movs	r3, #2
 80060ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f0:	2300      	movs	r3, #0
 80060f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060f4:	2303      	movs	r3, #3
 80060f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80060f8:	2307      	movs	r3, #7
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060fc:	f107 0314 	add.w	r3, r7, #20
 8006100:	4619      	mov	r1, r3
 8006102:	4837      	ldr	r0, [pc, #220]	; (80061e0 <HAL_UART_MspInit+0x154>)
 8006104:	f000 fece 	bl	8006ea4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006108:	4b36      	ldr	r3, [pc, #216]	; (80061e4 <HAL_UART_MspInit+0x158>)
 800610a:	4a37      	ldr	r2, [pc, #220]	; (80061e8 <HAL_UART_MspInit+0x15c>)
 800610c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800610e:	4b35      	ldr	r3, [pc, #212]	; (80061e4 <HAL_UART_MspInit+0x158>)
 8006110:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006114:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006116:	4b33      	ldr	r3, [pc, #204]	; (80061e4 <HAL_UART_MspInit+0x158>)
 8006118:	2200      	movs	r2, #0
 800611a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800611c:	4b31      	ldr	r3, [pc, #196]	; (80061e4 <HAL_UART_MspInit+0x158>)
 800611e:	2200      	movs	r2, #0
 8006120:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006122:	4b30      	ldr	r3, [pc, #192]	; (80061e4 <HAL_UART_MspInit+0x158>)
 8006124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006128:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800612a:	4b2e      	ldr	r3, [pc, #184]	; (80061e4 <HAL_UART_MspInit+0x158>)
 800612c:	2200      	movs	r2, #0
 800612e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006130:	4b2c      	ldr	r3, [pc, #176]	; (80061e4 <HAL_UART_MspInit+0x158>)
 8006132:	2200      	movs	r2, #0
 8006134:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006136:	4b2b      	ldr	r3, [pc, #172]	; (80061e4 <HAL_UART_MspInit+0x158>)
 8006138:	2200      	movs	r2, #0
 800613a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800613c:	4b29      	ldr	r3, [pc, #164]	; (80061e4 <HAL_UART_MspInit+0x158>)
 800613e:	2200      	movs	r2, #0
 8006140:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006142:	4b28      	ldr	r3, [pc, #160]	; (80061e4 <HAL_UART_MspInit+0x158>)
 8006144:	2200      	movs	r2, #0
 8006146:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006148:	4826      	ldr	r0, [pc, #152]	; (80061e4 <HAL_UART_MspInit+0x158>)
 800614a:	f000 fa9b 	bl	8006684 <HAL_DMA_Init>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8006154:	f7ff fe26 	bl	8005da4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a22      	ldr	r2, [pc, #136]	; (80061e4 <HAL_UART_MspInit+0x158>)
 800615c:	639a      	str	r2, [r3, #56]	; 0x38
 800615e:	4a21      	ldr	r2, [pc, #132]	; (80061e4 <HAL_UART_MspInit+0x158>)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006164:	4b21      	ldr	r3, [pc, #132]	; (80061ec <HAL_UART_MspInit+0x160>)
 8006166:	4a22      	ldr	r2, [pc, #136]	; (80061f0 <HAL_UART_MspInit+0x164>)
 8006168:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800616a:	4b20      	ldr	r3, [pc, #128]	; (80061ec <HAL_UART_MspInit+0x160>)
 800616c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006170:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006172:	4b1e      	ldr	r3, [pc, #120]	; (80061ec <HAL_UART_MspInit+0x160>)
 8006174:	2240      	movs	r2, #64	; 0x40
 8006176:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006178:	4b1c      	ldr	r3, [pc, #112]	; (80061ec <HAL_UART_MspInit+0x160>)
 800617a:	2200      	movs	r2, #0
 800617c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800617e:	4b1b      	ldr	r3, [pc, #108]	; (80061ec <HAL_UART_MspInit+0x160>)
 8006180:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006184:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006186:	4b19      	ldr	r3, [pc, #100]	; (80061ec <HAL_UART_MspInit+0x160>)
 8006188:	2200      	movs	r2, #0
 800618a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800618c:	4b17      	ldr	r3, [pc, #92]	; (80061ec <HAL_UART_MspInit+0x160>)
 800618e:	2200      	movs	r2, #0
 8006190:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006192:	4b16      	ldr	r3, [pc, #88]	; (80061ec <HAL_UART_MspInit+0x160>)
 8006194:	2200      	movs	r2, #0
 8006196:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006198:	4b14      	ldr	r3, [pc, #80]	; (80061ec <HAL_UART_MspInit+0x160>)
 800619a:	2200      	movs	r2, #0
 800619c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800619e:	4b13      	ldr	r3, [pc, #76]	; (80061ec <HAL_UART_MspInit+0x160>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80061a4:	4811      	ldr	r0, [pc, #68]	; (80061ec <HAL_UART_MspInit+0x160>)
 80061a6:	f000 fa6d 	bl	8006684 <HAL_DMA_Init>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80061b0:	f7ff fdf8 	bl	8005da4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a0d      	ldr	r2, [pc, #52]	; (80061ec <HAL_UART_MspInit+0x160>)
 80061b8:	635a      	str	r2, [r3, #52]	; 0x34
 80061ba:	4a0c      	ldr	r2, [pc, #48]	; (80061ec <HAL_UART_MspInit+0x160>)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80061c0:	2200      	movs	r2, #0
 80061c2:	2100      	movs	r1, #0
 80061c4:	2026      	movs	r0, #38	; 0x26
 80061c6:	f000 fa26 	bl	8006616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80061ca:	2026      	movs	r0, #38	; 0x26
 80061cc:	f000 fa3f 	bl	800664e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80061d0:	bf00      	nop
 80061d2:	3728      	adds	r7, #40	; 0x28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	40004400 	.word	0x40004400
 80061dc:	40023800 	.word	0x40023800
 80061e0:	40020000 	.word	0x40020000
 80061e4:	2000061c 	.word	0x2000061c
 80061e8:	40026088 	.word	0x40026088
 80061ec:	2000067c 	.word	0x2000067c
 80061f0:	400260a0 	.word	0x400260a0

080061f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80061f4:	b480      	push	{r7}
 80061f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80061f8:	e7fe      	b.n	80061f8 <NMI_Handler+0x4>

080061fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80061fa:	b480      	push	{r7}
 80061fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80061fe:	e7fe      	b.n	80061fe <HardFault_Handler+0x4>

08006200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006204:	e7fe      	b.n	8006204 <MemManage_Handler+0x4>

08006206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006206:	b480      	push	{r7}
 8006208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800620a:	e7fe      	b.n	800620a <BusFault_Handler+0x4>

0800620c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006210:	e7fe      	b.n	8006210 <UsageFault_Handler+0x4>

08006212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006212:	b480      	push	{r7}
 8006214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006216:	bf00      	nop
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006224:	bf00      	nop
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800622e:	b480      	push	{r7}
 8006230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006232:	bf00      	nop
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006240:	f000 f8ee 	bl	8006420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006244:	bf00      	nop
 8006246:	bd80      	pop	{r7, pc}

08006248 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800624c:	4802      	ldr	r0, [pc, #8]	; (8006258 <DMA1_Stream5_IRQHandler+0x10>)
 800624e:	f000 fbb1 	bl	80069b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006252:	bf00      	nop
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	2000061c 	.word	0x2000061c

0800625c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006260:	4802      	ldr	r0, [pc, #8]	; (800626c <DMA1_Stream6_IRQHandler+0x10>)
 8006262:	f000 fba7 	bl	80069b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8006266:	bf00      	nop
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	2000067c 	.word	0x2000067c

08006270 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Emer_Pin);
 8006274:	2020      	movs	r0, #32
 8006276:	f000 ffe5 	bl	8007244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800627a:	bf00      	nop
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006284:	4803      	ldr	r0, [pc, #12]	; (8006294 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8006286:	f003 ff15 	bl	800a0b4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800628a:	4803      	ldr	r0, [pc, #12]	; (8006298 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800628c:	f003 ff12 	bl	800a0b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006290:	bf00      	nop
 8006292:	bd80      	pop	{r7, pc}
 8006294:	200004b8 	.word	0x200004b8
 8006298:	20000590 	.word	0x20000590

0800629c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80062a0:	4802      	ldr	r0, [pc, #8]	; (80062ac <I2C1_EV_IRQHandler+0x10>)
 80062a2:	f001 fa7f 	bl	80077a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80062a6:	bf00      	nop
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000464 	.word	0x20000464

080062b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80062b4:	4802      	ldr	r0, [pc, #8]	; (80062c0 <I2C1_ER_IRQHandler+0x10>)
 80062b6:	f001 fbe6 	bl	8007a86 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80062ba:	bf00      	nop
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000464 	.word	0x20000464

080062c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80062c8:	4802      	ldr	r0, [pc, #8]	; (80062d4 <USART2_IRQHandler+0x10>)
 80062ca:	f004 fe7f 	bl	800afcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80062ce:	bf00      	nop
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	200005d8 	.word	0x200005d8

080062d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Proxi_Pin);
 80062dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80062e0:	f000 ffb0 	bl	8007244 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80062e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80062e8:	f000 ffac 	bl	8007244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80062ec:	bf00      	nop
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80062f4:	4802      	ldr	r0, [pc, #8]	; (8006300 <TIM5_IRQHandler+0x10>)
 80062f6:	f003 fedd 	bl	800a0b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80062fa:	bf00      	nop
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000548 	.word	0x20000548

08006304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006308:	4b06      	ldr	r3, [pc, #24]	; (8006324 <SystemInit+0x20>)
 800630a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630e:	4a05      	ldr	r2, [pc, #20]	; (8006324 <SystemInit+0x20>)
 8006310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006318:	bf00      	nop
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	e000ed00 	.word	0xe000ed00

08006328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006360 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800632c:	480d      	ldr	r0, [pc, #52]	; (8006364 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800632e:	490e      	ldr	r1, [pc, #56]	; (8006368 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006330:	4a0e      	ldr	r2, [pc, #56]	; (800636c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006334:	e002      	b.n	800633c <LoopCopyDataInit>

08006336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800633a:	3304      	adds	r3, #4

0800633c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800633c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800633e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006340:	d3f9      	bcc.n	8006336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006342:	4a0b      	ldr	r2, [pc, #44]	; (8006370 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006344:	4c0b      	ldr	r4, [pc, #44]	; (8006374 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006348:	e001      	b.n	800634e <LoopFillZerobss>

0800634a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800634a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800634c:	3204      	adds	r2, #4

0800634e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800634e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006350:	d3fb      	bcc.n	800634a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006352:	f7ff ffd7 	bl	8006304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006356:	f006 f9fb 	bl	800c750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800635a:	f7fd fc83 	bl	8003c64 <main>
  bx  lr    
 800635e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006368:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 800636c:	0800c80c 	.word	0x0800c80c
  ldr r2, =_sbss
 8006370:	20000440 	.word	0x20000440
  ldr r4, =_ebss
 8006374:	20000b24 	.word	0x20000b24

08006378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006378:	e7fe      	b.n	8006378 <ADC_IRQHandler>
	...

0800637c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006380:	4b0e      	ldr	r3, [pc, #56]	; (80063bc <HAL_Init+0x40>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a0d      	ldr	r2, [pc, #52]	; (80063bc <HAL_Init+0x40>)
 8006386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800638a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800638c:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <HAL_Init+0x40>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a0a      	ldr	r2, [pc, #40]	; (80063bc <HAL_Init+0x40>)
 8006392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006398:	4b08      	ldr	r3, [pc, #32]	; (80063bc <HAL_Init+0x40>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a07      	ldr	r2, [pc, #28]	; (80063bc <HAL_Init+0x40>)
 800639e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063a4:	2003      	movs	r0, #3
 80063a6:	f000 f92b 	bl	8006600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80063aa:	2000      	movs	r0, #0
 80063ac:	f000 f808 	bl	80063c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80063b0:	f7ff fcfe 	bl	8005db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	40023c00 	.word	0x40023c00

080063c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80063c8:	4b12      	ldr	r3, [pc, #72]	; (8006414 <HAL_InitTick+0x54>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4b12      	ldr	r3, [pc, #72]	; (8006418 <HAL_InitTick+0x58>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	4619      	mov	r1, r3
 80063d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80063da:	fbb2 f3f3 	udiv	r3, r2, r3
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 f943 	bl	800666a <HAL_SYSTICK_Config>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e00e      	b.n	800640c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b0f      	cmp	r3, #15
 80063f2:	d80a      	bhi.n	800640a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80063f4:	2200      	movs	r2, #0
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	f04f 30ff 	mov.w	r0, #4294967295
 80063fc:	f000 f90b 	bl	8006616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006400:	4a06      	ldr	r2, [pc, #24]	; (800641c <HAL_InitTick+0x5c>)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	e000      	b.n	800640c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
}
 800640c:	4618      	mov	r0, r3
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	20000430 	.word	0x20000430
 8006418:	20000438 	.word	0x20000438
 800641c:	20000434 	.word	0x20000434

08006420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006424:	4b06      	ldr	r3, [pc, #24]	; (8006440 <HAL_IncTick+0x20>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	4b06      	ldr	r3, [pc, #24]	; (8006444 <HAL_IncTick+0x24>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4413      	add	r3, r2
 8006430:	4a04      	ldr	r2, [pc, #16]	; (8006444 <HAL_IncTick+0x24>)
 8006432:	6013      	str	r3, [r2, #0]
}
 8006434:	bf00      	nop
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	20000438 	.word	0x20000438
 8006444:	20000b20 	.word	0x20000b20

08006448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006448:	b480      	push	{r7}
 800644a:	af00      	add	r7, sp, #0
  return uwTick;
 800644c:	4b03      	ldr	r3, [pc, #12]	; (800645c <HAL_GetTick+0x14>)
 800644e:	681b      	ldr	r3, [r3, #0]
}
 8006450:	4618      	mov	r0, r3
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	20000b20 	.word	0x20000b20

08006460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006470:	4b0c      	ldr	r3, [pc, #48]	; (80064a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800647c:	4013      	ands	r3, r2
 800647e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800648c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006492:	4a04      	ldr	r2, [pc, #16]	; (80064a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	60d3      	str	r3, [r2, #12]
}
 8006498:	bf00      	nop
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	e000ed00 	.word	0xe000ed00

080064a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064ac:	4b04      	ldr	r3, [pc, #16]	; (80064c0 <__NVIC_GetPriorityGrouping+0x18>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	0a1b      	lsrs	r3, r3, #8
 80064b2:	f003 0307 	and.w	r3, r3, #7
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	e000ed00 	.word	0xe000ed00

080064c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	4603      	mov	r3, r0
 80064cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	db0b      	blt.n	80064ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	f003 021f 	and.w	r2, r3, #31
 80064dc:	4907      	ldr	r1, [pc, #28]	; (80064fc <__NVIC_EnableIRQ+0x38>)
 80064de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e2:	095b      	lsrs	r3, r3, #5
 80064e4:	2001      	movs	r0, #1
 80064e6:	fa00 f202 	lsl.w	r2, r0, r2
 80064ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80064ee:	bf00      	nop
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	e000e100 	.word	0xe000e100

08006500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	4603      	mov	r3, r0
 8006508:	6039      	str	r1, [r7, #0]
 800650a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800650c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006510:	2b00      	cmp	r3, #0
 8006512:	db0a      	blt.n	800652a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	b2da      	uxtb	r2, r3
 8006518:	490c      	ldr	r1, [pc, #48]	; (800654c <__NVIC_SetPriority+0x4c>)
 800651a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800651e:	0112      	lsls	r2, r2, #4
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	440b      	add	r3, r1
 8006524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006528:	e00a      	b.n	8006540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	b2da      	uxtb	r2, r3
 800652e:	4908      	ldr	r1, [pc, #32]	; (8006550 <__NVIC_SetPriority+0x50>)
 8006530:	79fb      	ldrb	r3, [r7, #7]
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	3b04      	subs	r3, #4
 8006538:	0112      	lsls	r2, r2, #4
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	440b      	add	r3, r1
 800653e:	761a      	strb	r2, [r3, #24]
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	e000e100 	.word	0xe000e100
 8006550:	e000ed00 	.word	0xe000ed00

08006554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006554:	b480      	push	{r7}
 8006556:	b089      	sub	sp, #36	; 0x24
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	f1c3 0307 	rsb	r3, r3, #7
 800656e:	2b04      	cmp	r3, #4
 8006570:	bf28      	it	cs
 8006572:	2304      	movcs	r3, #4
 8006574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	3304      	adds	r3, #4
 800657a:	2b06      	cmp	r3, #6
 800657c:	d902      	bls.n	8006584 <NVIC_EncodePriority+0x30>
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	3b03      	subs	r3, #3
 8006582:	e000      	b.n	8006586 <NVIC_EncodePriority+0x32>
 8006584:	2300      	movs	r3, #0
 8006586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006588:	f04f 32ff 	mov.w	r2, #4294967295
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	fa02 f303 	lsl.w	r3, r2, r3
 8006592:	43da      	mvns	r2, r3
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	401a      	ands	r2, r3
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800659c:	f04f 31ff 	mov.w	r1, #4294967295
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	fa01 f303 	lsl.w	r3, r1, r3
 80065a6:	43d9      	mvns	r1, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065ac:	4313      	orrs	r3, r2
         );
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3724      	adds	r7, #36	; 0x24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065cc:	d301      	bcc.n	80065d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065ce:	2301      	movs	r3, #1
 80065d0:	e00f      	b.n	80065f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065d2:	4a0a      	ldr	r2, [pc, #40]	; (80065fc <SysTick_Config+0x40>)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065da:	210f      	movs	r1, #15
 80065dc:	f04f 30ff 	mov.w	r0, #4294967295
 80065e0:	f7ff ff8e 	bl	8006500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065e4:	4b05      	ldr	r3, [pc, #20]	; (80065fc <SysTick_Config+0x40>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065ea:	4b04      	ldr	r3, [pc, #16]	; (80065fc <SysTick_Config+0x40>)
 80065ec:	2207      	movs	r2, #7
 80065ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	e000e010 	.word	0xe000e010

08006600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7ff ff29 	bl	8006460 <__NVIC_SetPriorityGrouping>
}
 800660e:	bf00      	nop
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006616:	b580      	push	{r7, lr}
 8006618:	b086      	sub	sp, #24
 800661a:	af00      	add	r7, sp, #0
 800661c:	4603      	mov	r3, r0
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	607a      	str	r2, [r7, #4]
 8006622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006624:	2300      	movs	r3, #0
 8006626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006628:	f7ff ff3e 	bl	80064a8 <__NVIC_GetPriorityGrouping>
 800662c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	6978      	ldr	r0, [r7, #20]
 8006634:	f7ff ff8e 	bl	8006554 <NVIC_EncodePriority>
 8006638:	4602      	mov	r2, r0
 800663a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800663e:	4611      	mov	r1, r2
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff ff5d 	bl	8006500 <__NVIC_SetPriority>
}
 8006646:	bf00      	nop
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	4603      	mov	r3, r0
 8006656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800665c:	4618      	mov	r0, r3
 800665e:	f7ff ff31 	bl	80064c4 <__NVIC_EnableIRQ>
}
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff ffa2 	bl	80065bc <SysTick_Config>
 8006678:	4603      	mov	r3, r0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006690:	f7ff feda 	bl	8006448 <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e099      	b.n	80067d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0201 	bic.w	r2, r2, #1
 80066be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066c0:	e00f      	b.n	80066e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066c2:	f7ff fec1 	bl	8006448 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b05      	cmp	r3, #5
 80066ce:	d908      	bls.n	80066e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2203      	movs	r2, #3
 80066da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e078      	b.n	80067d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1e8      	bne.n	80066c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	4b38      	ldr	r3, [pc, #224]	; (80067dc <HAL_DMA_Init+0x158>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800670e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800671a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006726:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	4313      	orrs	r3, r2
 8006732:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	2b04      	cmp	r3, #4
 800673a:	d107      	bne.n	800674c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006744:	4313      	orrs	r3, r2
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	4313      	orrs	r3, r2
 800674a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f023 0307 	bic.w	r3, r3, #7
 8006762:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	4313      	orrs	r3, r2
 800676c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	2b04      	cmp	r3, #4
 8006774:	d117      	bne.n	80067a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00e      	beq.n	80067a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fb0f 	bl	8006dac <DMA_CheckFifoParam>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d008      	beq.n	80067a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2240      	movs	r2, #64	; 0x40
 8006798:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80067a2:	2301      	movs	r3, #1
 80067a4:	e016      	b.n	80067d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fac6 	bl	8006d40 <DMA_CalcBaseAndBitshift>
 80067b4:	4603      	mov	r3, r0
 80067b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067bc:	223f      	movs	r2, #63	; 0x3f
 80067be:	409a      	lsls	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	f010803f 	.word	0xf010803f

080067e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
 80067ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <HAL_DMA_Start_IT+0x26>
 8006802:	2302      	movs	r3, #2
 8006804:	e040      	b.n	8006888 <HAL_DMA_Start_IT+0xa8>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b01      	cmp	r3, #1
 8006818:	d12f      	bne.n	800687a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2202      	movs	r2, #2
 800681e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	68b9      	ldr	r1, [r7, #8]
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 fa58 	bl	8006ce4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006838:	223f      	movs	r2, #63	; 0x3f
 800683a:	409a      	lsls	r2, r3
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0216 	orr.w	r2, r2, #22
 800684e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0208 	orr.w	r2, r2, #8
 8006866:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0201 	orr.w	r2, r2, #1
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	e005      	b.n	8006886 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006882:	2302      	movs	r3, #2
 8006884:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006886:	7dfb      	ldrb	r3, [r7, #23]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800689e:	f7ff fdd3 	bl	8006448 <HAL_GetTick>
 80068a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d008      	beq.n	80068c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2280      	movs	r2, #128	; 0x80
 80068b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e052      	b.n	8006968 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0216 	bic.w	r2, r2, #22
 80068d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	695a      	ldr	r2, [r3, #20]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d103      	bne.n	80068f2 <HAL_DMA_Abort+0x62>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d007      	beq.n	8006902 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0208 	bic.w	r2, r2, #8
 8006900:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0201 	bic.w	r2, r2, #1
 8006910:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006912:	e013      	b.n	800693c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006914:	f7ff fd98 	bl	8006448 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b05      	cmp	r3, #5
 8006920:	d90c      	bls.n	800693c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2203      	movs	r2, #3
 800692c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e015      	b.n	8006968 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e4      	bne.n	8006914 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694e:	223f      	movs	r2, #63	; 0x3f
 8006950:	409a      	lsls	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d004      	beq.n	800698e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2280      	movs	r2, #128	; 0x80
 8006988:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e00c      	b.n	80069a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2205      	movs	r2, #5
 8006992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 0201 	bic.w	r2, r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80069c0:	4b8e      	ldr	r3, [pc, #568]	; (8006bfc <HAL_DMA_IRQHandler+0x248>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a8e      	ldr	r2, [pc, #568]	; (8006c00 <HAL_DMA_IRQHandler+0x24c>)
 80069c6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ca:	0a9b      	lsrs	r3, r3, #10
 80069cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069de:	2208      	movs	r2, #8
 80069e0:	409a      	lsls	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4013      	ands	r3, r2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d01a      	beq.n	8006a20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d013      	beq.n	8006a20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0204 	bic.w	r2, r2, #4
 8006a06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	409a      	lsls	r2, r3
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a18:	f043 0201 	orr.w	r2, r3, #1
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a24:	2201      	movs	r2, #1
 8006a26:	409a      	lsls	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d012      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00b      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a42:	2201      	movs	r2, #1
 8006a44:	409a      	lsls	r2, r3
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4e:	f043 0202 	orr.w	r2, r3, #2
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	409a      	lsls	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d012      	beq.n	8006a8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a78:	2204      	movs	r2, #4
 8006a7a:	409a      	lsls	r2, r3
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a84:	f043 0204 	orr.w	r2, r3, #4
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a90:	2210      	movs	r2, #16
 8006a92:	409a      	lsls	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4013      	ands	r3, r2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d043      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0308 	and.w	r3, r3, #8
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d03c      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aae:	2210      	movs	r2, #16
 8006ab0:	409a      	lsls	r2, r3
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d018      	beq.n	8006af6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d108      	bne.n	8006ae4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d024      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	4798      	blx	r3
 8006ae2:	e01f      	b.n	8006b24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d01b      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	4798      	blx	r3
 8006af4:	e016      	b.n	8006b24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d107      	bne.n	8006b14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0208 	bic.w	r2, r2, #8
 8006b12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b28:	2220      	movs	r2, #32
 8006b2a:	409a      	lsls	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4013      	ands	r3, r2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 808f 	beq.w	8006c54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0310 	and.w	r3, r3, #16
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8087 	beq.w	8006c54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	409a      	lsls	r2, r3
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b05      	cmp	r3, #5
 8006b5c:	d136      	bne.n	8006bcc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 0216 	bic.w	r2, r2, #22
 8006b6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	695a      	ldr	r2, [r3, #20]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d103      	bne.n	8006b8e <HAL_DMA_IRQHandler+0x1da>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d007      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 0208 	bic.w	r2, r2, #8
 8006b9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba2:	223f      	movs	r2, #63	; 0x3f
 8006ba4:	409a      	lsls	r2, r3
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d07e      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4798      	blx	r3
        }
        return;
 8006bca:	e079      	b.n	8006cc0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d01d      	beq.n	8006c16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10d      	bne.n	8006c04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d031      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	4798      	blx	r3
 8006bf8:	e02c      	b.n	8006c54 <HAL_DMA_IRQHandler+0x2a0>
 8006bfa:	bf00      	nop
 8006bfc:	20000430 	.word	0x20000430
 8006c00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d023      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	4798      	blx	r3
 8006c14:	e01e      	b.n	8006c54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10f      	bne.n	8006c44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0210 	bic.w	r2, r2, #16
 8006c32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d032      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d022      	beq.n	8006cae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2205      	movs	r2, #5
 8006c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0201 	bic.w	r2, r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	3301      	adds	r3, #1
 8006c84:	60bb      	str	r3, [r7, #8]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d307      	bcc.n	8006c9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1f2      	bne.n	8006c80 <HAL_DMA_IRQHandler+0x2cc>
 8006c9a:	e000      	b.n	8006c9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006c9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
 8006cbe:	e000      	b.n	8006cc2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006cc0:	bf00      	nop
    }
  }
}
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cd6:	b2db      	uxtb	r3, r3
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	2b40      	cmp	r3, #64	; 0x40
 8006d10:	d108      	bne.n	8006d24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006d22:	e007      	b.n	8006d34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	60da      	str	r2, [r3, #12]
}
 8006d34:	bf00      	nop
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	3b10      	subs	r3, #16
 8006d50:	4a14      	ldr	r2, [pc, #80]	; (8006da4 <DMA_CalcBaseAndBitshift+0x64>)
 8006d52:	fba2 2303 	umull	r2, r3, r2, r3
 8006d56:	091b      	lsrs	r3, r3, #4
 8006d58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006d5a:	4a13      	ldr	r2, [pc, #76]	; (8006da8 <DMA_CalcBaseAndBitshift+0x68>)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	461a      	mov	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d909      	bls.n	8006d82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006d76:	f023 0303 	bic.w	r3, r3, #3
 8006d7a:	1d1a      	adds	r2, r3, #4
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	659a      	str	r2, [r3, #88]	; 0x58
 8006d80:	e007      	b.n	8006d92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006d8a:	f023 0303 	bic.w	r3, r3, #3
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	aaaaaaab 	.word	0xaaaaaaab
 8006da8:	0800c7f4 	.word	0x0800c7f4

08006dac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d11f      	bne.n	8006e06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	d856      	bhi.n	8006e7a <DMA_CheckFifoParam+0xce>
 8006dcc:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <DMA_CheckFifoParam+0x28>)
 8006dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd2:	bf00      	nop
 8006dd4:	08006de5 	.word	0x08006de5
 8006dd8:	08006df7 	.word	0x08006df7
 8006ddc:	08006de5 	.word	0x08006de5
 8006de0:	08006e7b 	.word	0x08006e7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d046      	beq.n	8006e7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006df4:	e043      	b.n	8006e7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006dfe:	d140      	bne.n	8006e82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e04:	e03d      	b.n	8006e82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e0e:	d121      	bne.n	8006e54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d837      	bhi.n	8006e86 <DMA_CheckFifoParam+0xda>
 8006e16:	a201      	add	r2, pc, #4	; (adr r2, 8006e1c <DMA_CheckFifoParam+0x70>)
 8006e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1c:	08006e2d 	.word	0x08006e2d
 8006e20:	08006e33 	.word	0x08006e33
 8006e24:	08006e2d 	.word	0x08006e2d
 8006e28:	08006e45 	.word	0x08006e45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e30:	e030      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d025      	beq.n	8006e8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e42:	e022      	b.n	8006e8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e4c:	d11f      	bne.n	8006e8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006e52:	e01c      	b.n	8006e8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d903      	bls.n	8006e62 <DMA_CheckFifoParam+0xb6>
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d003      	beq.n	8006e68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006e60:	e018      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	73fb      	strb	r3, [r7, #15]
      break;
 8006e66:	e015      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00e      	beq.n	8006e92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	73fb      	strb	r3, [r7, #15]
      break;
 8006e78:	e00b      	b.n	8006e92 <DMA_CheckFifoParam+0xe6>
      break;
 8006e7a:	bf00      	nop
 8006e7c:	e00a      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>
      break;
 8006e7e:	bf00      	nop
 8006e80:	e008      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>
      break;
 8006e82:	bf00      	nop
 8006e84:	e006      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>
      break;
 8006e86:	bf00      	nop
 8006e88:	e004      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>
      break;
 8006e8a:	bf00      	nop
 8006e8c:	e002      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>
      break;   
 8006e8e:	bf00      	nop
 8006e90:	e000      	b.n	8006e94 <DMA_CheckFifoParam+0xe8>
      break;
 8006e92:	bf00      	nop
    }
  } 
  
  return status; 
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop

08006ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b089      	sub	sp, #36	; 0x24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006eba:	2300      	movs	r3, #0
 8006ebc:	61fb      	str	r3, [r7, #28]
 8006ebe:	e159      	b.n	8007174 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	f040 8148 	bne.w	800716e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f003 0303 	and.w	r3, r3, #3
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d005      	beq.n	8006ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d130      	bne.n	8006f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	005b      	lsls	r3, r3, #1
 8006f00:	2203      	movs	r2, #3
 8006f02:	fa02 f303 	lsl.w	r3, r2, r3
 8006f06:	43db      	mvns	r3, r3
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	43db      	mvns	r3, r3
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	4013      	ands	r3, r2
 8006f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	091b      	lsrs	r3, r3, #4
 8006f42:	f003 0201 	and.w	r2, r3, #1
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f003 0303 	and.w	r3, r3, #3
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d017      	beq.n	8006f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	2203      	movs	r2, #3
 8006f70:	fa02 f303 	lsl.w	r3, r2, r3
 8006f74:	43db      	mvns	r3, r3
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	4013      	ands	r3, r2
 8006f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	005b      	lsls	r3, r3, #1
 8006f84:	fa02 f303 	lsl.w	r3, r2, r3
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f003 0303 	and.w	r3, r3, #3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d123      	bne.n	8006fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	08da      	lsrs	r2, r3, #3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	3208      	adds	r2, #8
 8006fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	f003 0307 	and.w	r3, r3, #7
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	220f      	movs	r2, #15
 8006fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbc:	43db      	mvns	r3, r3
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	691a      	ldr	r2, [r3, #16]
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	08da      	lsrs	r2, r3, #3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	3208      	adds	r2, #8
 8006fe2:	69b9      	ldr	r1, [r7, #24]
 8006fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	2203      	movs	r2, #3
 8006ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff8:	43db      	mvns	r3, r3
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f003 0203 	and.w	r2, r3, #3
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	fa02 f303 	lsl.w	r3, r2, r3
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	4313      	orrs	r3, r2
 8007014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 80a2 	beq.w	800716e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800702a:	2300      	movs	r3, #0
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	4b57      	ldr	r3, [pc, #348]	; (800718c <HAL_GPIO_Init+0x2e8>)
 8007030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007032:	4a56      	ldr	r2, [pc, #344]	; (800718c <HAL_GPIO_Init+0x2e8>)
 8007034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007038:	6453      	str	r3, [r2, #68]	; 0x44
 800703a:	4b54      	ldr	r3, [pc, #336]	; (800718c <HAL_GPIO_Init+0x2e8>)
 800703c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800703e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007046:	4a52      	ldr	r2, [pc, #328]	; (8007190 <HAL_GPIO_Init+0x2ec>)
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	089b      	lsrs	r3, r3, #2
 800704c:	3302      	adds	r3, #2
 800704e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	f003 0303 	and.w	r3, r3, #3
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	220f      	movs	r2, #15
 800705e:	fa02 f303 	lsl.w	r3, r2, r3
 8007062:	43db      	mvns	r3, r3
 8007064:	69ba      	ldr	r2, [r7, #24]
 8007066:	4013      	ands	r3, r2
 8007068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a49      	ldr	r2, [pc, #292]	; (8007194 <HAL_GPIO_Init+0x2f0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d019      	beq.n	80070a6 <HAL_GPIO_Init+0x202>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a48      	ldr	r2, [pc, #288]	; (8007198 <HAL_GPIO_Init+0x2f4>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d013      	beq.n	80070a2 <HAL_GPIO_Init+0x1fe>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a47      	ldr	r2, [pc, #284]	; (800719c <HAL_GPIO_Init+0x2f8>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00d      	beq.n	800709e <HAL_GPIO_Init+0x1fa>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a46      	ldr	r2, [pc, #280]	; (80071a0 <HAL_GPIO_Init+0x2fc>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d007      	beq.n	800709a <HAL_GPIO_Init+0x1f6>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a45      	ldr	r2, [pc, #276]	; (80071a4 <HAL_GPIO_Init+0x300>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d101      	bne.n	8007096 <HAL_GPIO_Init+0x1f2>
 8007092:	2304      	movs	r3, #4
 8007094:	e008      	b.n	80070a8 <HAL_GPIO_Init+0x204>
 8007096:	2307      	movs	r3, #7
 8007098:	e006      	b.n	80070a8 <HAL_GPIO_Init+0x204>
 800709a:	2303      	movs	r3, #3
 800709c:	e004      	b.n	80070a8 <HAL_GPIO_Init+0x204>
 800709e:	2302      	movs	r3, #2
 80070a0:	e002      	b.n	80070a8 <HAL_GPIO_Init+0x204>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e000      	b.n	80070a8 <HAL_GPIO_Init+0x204>
 80070a6:	2300      	movs	r3, #0
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	f002 0203 	and.w	r2, r2, #3
 80070ae:	0092      	lsls	r2, r2, #2
 80070b0:	4093      	lsls	r3, r2
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80070b8:	4935      	ldr	r1, [pc, #212]	; (8007190 <HAL_GPIO_Init+0x2ec>)
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	089b      	lsrs	r3, r3, #2
 80070be:	3302      	adds	r3, #2
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070c6:	4b38      	ldr	r3, [pc, #224]	; (80071a8 <HAL_GPIO_Init+0x304>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	43db      	mvns	r3, r3
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	4013      	ands	r3, r2
 80070d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070ea:	4a2f      	ldr	r2, [pc, #188]	; (80071a8 <HAL_GPIO_Init+0x304>)
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80070f0:	4b2d      	ldr	r3, [pc, #180]	; (80071a8 <HAL_GPIO_Init+0x304>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	43db      	mvns	r3, r3
 80070fa:	69ba      	ldr	r2, [r7, #24]
 80070fc:	4013      	ands	r3, r2
 80070fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d003      	beq.n	8007114 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	4313      	orrs	r3, r2
 8007112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007114:	4a24      	ldr	r2, [pc, #144]	; (80071a8 <HAL_GPIO_Init+0x304>)
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800711a:	4b23      	ldr	r3, [pc, #140]	; (80071a8 <HAL_GPIO_Init+0x304>)
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	43db      	mvns	r3, r3
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	4013      	ands	r3, r2
 8007128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	4313      	orrs	r3, r2
 800713c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800713e:	4a1a      	ldr	r2, [pc, #104]	; (80071a8 <HAL_GPIO_Init+0x304>)
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007144:	4b18      	ldr	r3, [pc, #96]	; (80071a8 <HAL_GPIO_Init+0x304>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	43db      	mvns	r3, r3
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	4013      	ands	r3, r2
 8007152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	4313      	orrs	r3, r2
 8007166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007168:	4a0f      	ldr	r2, [pc, #60]	; (80071a8 <HAL_GPIO_Init+0x304>)
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	3301      	adds	r3, #1
 8007172:	61fb      	str	r3, [r7, #28]
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	2b0f      	cmp	r3, #15
 8007178:	f67f aea2 	bls.w	8006ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800717c:	bf00      	nop
 800717e:	bf00      	nop
 8007180:	3724      	adds	r7, #36	; 0x24
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40023800 	.word	0x40023800
 8007190:	40013800 	.word	0x40013800
 8007194:	40020000 	.word	0x40020000
 8007198:	40020400 	.word	0x40020400
 800719c:	40020800 	.word	0x40020800
 80071a0:	40020c00 	.word	0x40020c00
 80071a4:	40021000 	.word	0x40021000
 80071a8:	40013c00 	.word	0x40013c00

080071ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691a      	ldr	r2, [r3, #16]
 80071bc:	887b      	ldrh	r3, [r7, #2]
 80071be:	4013      	ands	r3, r2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80071c4:	2301      	movs	r3, #1
 80071c6:	73fb      	strb	r3, [r7, #15]
 80071c8:	e001      	b.n	80071ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80071ca:	2300      	movs	r3, #0
 80071cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	807b      	strh	r3, [r7, #2]
 80071e8:	4613      	mov	r3, r2
 80071ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071ec:	787b      	ldrb	r3, [r7, #1]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071f2:	887a      	ldrh	r2, [r7, #2]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80071f8:	e003      	b.n	8007202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80071fa:	887b      	ldrh	r3, [r7, #2]
 80071fc:	041a      	lsls	r2, r3, #16
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	619a      	str	r2, [r3, #24]
}
 8007202:	bf00      	nop
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800720e:	b480      	push	{r7}
 8007210:	b085      	sub	sp, #20
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	460b      	mov	r3, r1
 8007218:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007220:	887a      	ldrh	r2, [r7, #2]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4013      	ands	r3, r2
 8007226:	041a      	lsls	r2, r3, #16
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	43d9      	mvns	r1, r3
 800722c:	887b      	ldrh	r3, [r7, #2]
 800722e:	400b      	ands	r3, r1
 8007230:	431a      	orrs	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	619a      	str	r2, [r3, #24]
}
 8007236:	bf00      	nop
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
	...

08007244 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	4603      	mov	r3, r0
 800724c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800724e:	4b08      	ldr	r3, [pc, #32]	; (8007270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007250:	695a      	ldr	r2, [r3, #20]
 8007252:	88fb      	ldrh	r3, [r7, #6]
 8007254:	4013      	ands	r3, r2
 8007256:	2b00      	cmp	r3, #0
 8007258:	d006      	beq.n	8007268 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800725a:	4a05      	ldr	r2, [pc, #20]	; (8007270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800725c:	88fb      	ldrh	r3, [r7, #6]
 800725e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007260:	88fb      	ldrh	r3, [r7, #6]
 8007262:	4618      	mov	r0, r3
 8007264:	f7fe fb88 	bl	8005978 <HAL_GPIO_EXTI_Callback>
  }
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	40013c00 	.word	0x40013c00

08007274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e12b      	b.n	80074de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d106      	bne.n	80072a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7fe fdb0 	bl	8005e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2224      	movs	r2, #36	; 0x24
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 0201 	bic.w	r2, r2, #1
 80072b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80072d8:	f002 fbb0 	bl	8009a3c <HAL_RCC_GetPCLK1Freq>
 80072dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	4a81      	ldr	r2, [pc, #516]	; (80074e8 <HAL_I2C_Init+0x274>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d807      	bhi.n	80072f8 <HAL_I2C_Init+0x84>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4a80      	ldr	r2, [pc, #512]	; (80074ec <HAL_I2C_Init+0x278>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	bf94      	ite	ls
 80072f0:	2301      	movls	r3, #1
 80072f2:	2300      	movhi	r3, #0
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	e006      	b.n	8007306 <HAL_I2C_Init+0x92>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4a7d      	ldr	r2, [pc, #500]	; (80074f0 <HAL_I2C_Init+0x27c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	bf94      	ite	ls
 8007300:	2301      	movls	r3, #1
 8007302:	2300      	movhi	r3, #0
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e0e7      	b.n	80074de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4a78      	ldr	r2, [pc, #480]	; (80074f4 <HAL_I2C_Init+0x280>)
 8007312:	fba2 2303 	umull	r2, r3, r2, r3
 8007316:	0c9b      	lsrs	r3, r3, #18
 8007318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	430a      	orrs	r2, r1
 800732c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	4a6a      	ldr	r2, [pc, #424]	; (80074e8 <HAL_I2C_Init+0x274>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d802      	bhi.n	8007348 <HAL_I2C_Init+0xd4>
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	3301      	adds	r3, #1
 8007346:	e009      	b.n	800735c <HAL_I2C_Init+0xe8>
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800734e:	fb02 f303 	mul.w	r3, r2, r3
 8007352:	4a69      	ldr	r2, [pc, #420]	; (80074f8 <HAL_I2C_Init+0x284>)
 8007354:	fba2 2303 	umull	r2, r3, r2, r3
 8007358:	099b      	lsrs	r3, r3, #6
 800735a:	3301      	adds	r3, #1
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6812      	ldr	r2, [r2, #0]
 8007360:	430b      	orrs	r3, r1
 8007362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800736e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	495c      	ldr	r1, [pc, #368]	; (80074e8 <HAL_I2C_Init+0x274>)
 8007378:	428b      	cmp	r3, r1
 800737a:	d819      	bhi.n	80073b0 <HAL_I2C_Init+0x13c>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	1e59      	subs	r1, r3, #1
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	fbb1 f3f3 	udiv	r3, r1, r3
 800738a:	1c59      	adds	r1, r3, #1
 800738c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007390:	400b      	ands	r3, r1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00a      	beq.n	80073ac <HAL_I2C_Init+0x138>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	1e59      	subs	r1, r3, #1
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80073a4:	3301      	adds	r3, #1
 80073a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073aa:	e051      	b.n	8007450 <HAL_I2C_Init+0x1dc>
 80073ac:	2304      	movs	r3, #4
 80073ae:	e04f      	b.n	8007450 <HAL_I2C_Init+0x1dc>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d111      	bne.n	80073dc <HAL_I2C_Init+0x168>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	1e58      	subs	r0, r3, #1
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6859      	ldr	r1, [r3, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	440b      	add	r3, r1
 80073c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80073ca:	3301      	adds	r3, #1
 80073cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	bf0c      	ite	eq
 80073d4:	2301      	moveq	r3, #1
 80073d6:	2300      	movne	r3, #0
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	e012      	b.n	8007402 <HAL_I2C_Init+0x18e>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	1e58      	subs	r0, r3, #1
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6859      	ldr	r1, [r3, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	440b      	add	r3, r1
 80073ea:	0099      	lsls	r1, r3, #2
 80073ec:	440b      	add	r3, r1
 80073ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80073f2:	3301      	adds	r3, #1
 80073f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	bf0c      	ite	eq
 80073fc:	2301      	moveq	r3, #1
 80073fe:	2300      	movne	r3, #0
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <HAL_I2C_Init+0x196>
 8007406:	2301      	movs	r3, #1
 8007408:	e022      	b.n	8007450 <HAL_I2C_Init+0x1dc>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10e      	bne.n	8007430 <HAL_I2C_Init+0x1bc>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	1e58      	subs	r0, r3, #1
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6859      	ldr	r1, [r3, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	005b      	lsls	r3, r3, #1
 800741e:	440b      	add	r3, r1
 8007420:	fbb0 f3f3 	udiv	r3, r0, r3
 8007424:	3301      	adds	r3, #1
 8007426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800742a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800742e:	e00f      	b.n	8007450 <HAL_I2C_Init+0x1dc>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	1e58      	subs	r0, r3, #1
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6859      	ldr	r1, [r3, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	440b      	add	r3, r1
 800743e:	0099      	lsls	r1, r3, #2
 8007440:	440b      	add	r3, r1
 8007442:	fbb0 f3f3 	udiv	r3, r0, r3
 8007446:	3301      	adds	r3, #1
 8007448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800744c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	6809      	ldr	r1, [r1, #0]
 8007454:	4313      	orrs	r3, r2
 8007456:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69da      	ldr	r2, [r3, #28]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	431a      	orrs	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	430a      	orrs	r2, r1
 8007472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800747e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6911      	ldr	r1, [r2, #16]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	68d2      	ldr	r2, [r2, #12]
 800748a:	4311      	orrs	r1, r2
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6812      	ldr	r2, [r2, #0]
 8007490:	430b      	orrs	r3, r1
 8007492:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	695a      	ldr	r2, [r3, #20]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0201 	orr.w	r2, r2, #1
 80074be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	000186a0 	.word	0x000186a0
 80074ec:	001e847f 	.word	0x001e847f
 80074f0:	003d08ff 	.word	0x003d08ff
 80074f4:	431bde83 	.word	0x431bde83
 80074f8:	10624dd3 	.word	0x10624dd3

080074fc <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	607a      	str	r2, [r7, #4]
 8007506:	461a      	mov	r2, r3
 8007508:	460b      	mov	r3, r1
 800750a:	817b      	strh	r3, [r7, #10]
 800750c:	4613      	mov	r3, r2
 800750e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b20      	cmp	r3, #32
 800751e:	f040 8085 	bne.w	800762c <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007522:	4b46      	ldr	r3, [pc, #280]	; (800763c <HAL_I2C_Master_Transmit_IT+0x140>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	08db      	lsrs	r3, r3, #3
 8007528:	4a45      	ldr	r2, [pc, #276]	; (8007640 <HAL_I2C_Master_Transmit_IT+0x144>)
 800752a:	fba2 2303 	umull	r2, r3, r2, r3
 800752e:	0a1a      	lsrs	r2, r3, #8
 8007530:	4613      	mov	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	009a      	lsls	r2, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	3b01      	subs	r3, #1
 8007540:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d116      	bne.n	8007576 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2220      	movs	r2, #32
 8007552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	f043 0220 	orr.w	r2, r3, #32
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e05b      	b.n	800762e <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b02      	cmp	r3, #2
 8007582:	d0db      	beq.n	800753c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800758a:	2b01      	cmp	r3, #1
 800758c:	d101      	bne.n	8007592 <HAL_I2C_Master_Transmit_IT+0x96>
 800758e:	2302      	movs	r3, #2
 8007590:	e04d      	b.n	800762e <HAL_I2C_Master_Transmit_IT+0x132>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d007      	beq.n	80075b8 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0201 	orr.w	r2, r2, #1
 80075b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2221      	movs	r2, #33	; 0x21
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2210      	movs	r2, #16
 80075d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	893a      	ldrh	r2, [r7, #8]
 80075e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4a13      	ldr	r2, [pc, #76]	; (8007644 <HAL_I2C_Master_Transmit_IT+0x148>)
 80075f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80075fa:	897a      	ldrh	r2, [r7, #10]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007616:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007626:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	e000      	b.n	800762e <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800762c:	2302      	movs	r3, #2
  }
}
 800762e:	4618      	mov	r0, r3
 8007630:	371c      	adds	r7, #28
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	20000430 	.word	0x20000430
 8007640:	14f8b589 	.word	0x14f8b589
 8007644:	ffff0000 	.word	0xffff0000

08007648 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	607a      	str	r2, [r7, #4]
 8007652:	461a      	mov	r2, r3
 8007654:	460b      	mov	r3, r1
 8007656:	817b      	strh	r3, [r7, #10]
 8007658:	4613      	mov	r3, r2
 800765a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b20      	cmp	r3, #32
 800766a:	f040 808d 	bne.w	8007788 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800766e:	4b4a      	ldr	r3, [pc, #296]	; (8007798 <HAL_I2C_Master_Receive_IT+0x150>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	08db      	lsrs	r3, r3, #3
 8007674:	4a49      	ldr	r2, [pc, #292]	; (800779c <HAL_I2C_Master_Receive_IT+0x154>)
 8007676:	fba2 2303 	umull	r2, r3, r2, r3
 800767a:	0a1a      	lsrs	r2, r3, #8
 800767c:	4613      	mov	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	009a      	lsls	r2, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	3b01      	subs	r3, #1
 800768c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d116      	bne.n	80076c2 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2220      	movs	r2, #32
 800769e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ae:	f043 0220 	orr.w	r2, r3, #32
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e063      	b.n	800778a <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d0db      	beq.n	8007688 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d101      	bne.n	80076de <HAL_I2C_Master_Receive_IT+0x96>
 80076da:	2302      	movs	r3, #2
 80076dc:	e055      	b.n	800778a <HAL_I2C_Master_Receive_IT+0x142>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d007      	beq.n	8007704 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f042 0201 	orr.w	r2, r2, #1
 8007702:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007712:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2222      	movs	r2, #34	; 0x22
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2210      	movs	r2, #16
 8007720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	893a      	ldrh	r2, [r7, #8]
 8007734:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800773a:	b29a      	uxth	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4a17      	ldr	r2, [pc, #92]	; (80077a0 <HAL_I2C_Master_Receive_IT+0x158>)
 8007744:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007746:	897a      	ldrh	r2, [r7, #10]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685a      	ldr	r2, [r3, #4]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007762:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007772:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007782:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	e000      	b.n	800778a <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8007788:	2302      	movs	r3, #2
  }
}
 800778a:	4618      	mov	r0, r3
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	20000430 	.word	0x20000430
 800779c:	14f8b589 	.word	0x14f8b589
 80077a0:	ffff0000 	.word	0xffff0000

080077a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b088      	sub	sp, #32
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077cc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	2b10      	cmp	r3, #16
 80077d2:	d003      	beq.n	80077dc <HAL_I2C_EV_IRQHandler+0x38>
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	2b40      	cmp	r3, #64	; 0x40
 80077d8:	f040 80c1 	bne.w	800795e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10d      	bne.n	8007812 <HAL_I2C_EV_IRQHandler+0x6e>
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80077fc:	d003      	beq.n	8007806 <HAL_I2C_EV_IRQHandler+0x62>
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007804:	d101      	bne.n	800780a <HAL_I2C_EV_IRQHandler+0x66>
 8007806:	2301      	movs	r3, #1
 8007808:	e000      	b.n	800780c <HAL_I2C_EV_IRQHandler+0x68>
 800780a:	2300      	movs	r3, #0
 800780c:	2b01      	cmp	r3, #1
 800780e:	f000 8132 	beq.w	8007a76 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00c      	beq.n	8007836 <HAL_I2C_EV_IRQHandler+0x92>
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	0a5b      	lsrs	r3, r3, #9
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	d006      	beq.n	8007836 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f001 fc7b 	bl	8009124 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fd83 	bl	800833a <I2C_Master_SB>
 8007834:	e092      	b.n	800795c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	08db      	lsrs	r3, r3, #3
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d009      	beq.n	8007856 <HAL_I2C_EV_IRQHandler+0xb2>
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	0a5b      	lsrs	r3, r3, #9
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fdf9 	bl	8008446 <I2C_Master_ADD10>
 8007854:	e082      	b.n	800795c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	085b      	lsrs	r3, r3, #1
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d009      	beq.n	8007876 <HAL_I2C_EV_IRQHandler+0xd2>
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	0a5b      	lsrs	r3, r3, #9
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	d003      	beq.n	8007876 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fe13 	bl	800849a <I2C_Master_ADDR>
 8007874:	e072      	b.n	800795c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	089b      	lsrs	r3, r3, #2
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	d03b      	beq.n	80078fa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800788c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007890:	f000 80f3 	beq.w	8007a7a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	09db      	lsrs	r3, r3, #7
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00f      	beq.n	80078c0 <HAL_I2C_EV_IRQHandler+0x11c>
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	0a9b      	lsrs	r3, r3, #10
 80078a4:	f003 0301 	and.w	r3, r3, #1
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d009      	beq.n	80078c0 <HAL_I2C_EV_IRQHandler+0x11c>
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	089b      	lsrs	r3, r3, #2
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d103      	bne.n	80078c0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f9f3 	bl	8007ca4 <I2C_MasterTransmit_TXE>
 80078be:	e04d      	b.n	800795c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	089b      	lsrs	r3, r3, #2
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f000 80d6 	beq.w	8007a7a <HAL_I2C_EV_IRQHandler+0x2d6>
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	0a5b      	lsrs	r3, r3, #9
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 80cf 	beq.w	8007a7a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	2b21      	cmp	r3, #33	; 0x21
 80078e0:	d103      	bne.n	80078ea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fa7a 	bl	8007ddc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078e8:	e0c7      	b.n	8007a7a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
 80078ec:	2b40      	cmp	r3, #64	; 0x40
 80078ee:	f040 80c4 	bne.w	8007a7a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fae8 	bl	8007ec8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078f8:	e0bf      	b.n	8007a7a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007908:	f000 80b7 	beq.w	8007a7a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	099b      	lsrs	r3, r3, #6
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00f      	beq.n	8007938 <HAL_I2C_EV_IRQHandler+0x194>
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	0a9b      	lsrs	r3, r3, #10
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b00      	cmp	r3, #0
 8007922:	d009      	beq.n	8007938 <HAL_I2C_EV_IRQHandler+0x194>
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	089b      	lsrs	r3, r3, #2
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b00      	cmp	r3, #0
 800792e:	d103      	bne.n	8007938 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fb5d 	bl	8007ff0 <I2C_MasterReceive_RXNE>
 8007936:	e011      	b.n	800795c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	089b      	lsrs	r3, r3, #2
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 809a 	beq.w	8007a7a <HAL_I2C_EV_IRQHandler+0x2d6>
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	0a5b      	lsrs	r3, r3, #9
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 8093 	beq.w	8007a7a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fc06 	bl	8008166 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800795a:	e08e      	b.n	8007a7a <HAL_I2C_EV_IRQHandler+0x2d6>
 800795c:	e08d      	b.n	8007a7a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	d004      	beq.n	8007970 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	61fb      	str	r3, [r7, #28]
 800796e:	e007      	b.n	8007980 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	085b      	lsrs	r3, r3, #1
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b00      	cmp	r3, #0
 800798a:	d012      	beq.n	80079b2 <HAL_I2C_EV_IRQHandler+0x20e>
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	0a5b      	lsrs	r3, r3, #9
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00c      	beq.n	80079b2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80079a8:	69b9      	ldr	r1, [r7, #24]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 ffc4 	bl	8008938 <I2C_Slave_ADDR>
 80079b0:	e066      	b.n	8007a80 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	091b      	lsrs	r3, r3, #4
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d009      	beq.n	80079d2 <HAL_I2C_EV_IRQHandler+0x22e>
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	0a5b      	lsrs	r3, r3, #9
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fffe 	bl	80089cc <I2C_Slave_STOPF>
 80079d0:	e056      	b.n	8007a80 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b21      	cmp	r3, #33	; 0x21
 80079d6:	d002      	beq.n	80079de <HAL_I2C_EV_IRQHandler+0x23a>
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	2b29      	cmp	r3, #41	; 0x29
 80079dc:	d125      	bne.n	8007a2a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	09db      	lsrs	r3, r3, #7
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00f      	beq.n	8007a0a <HAL_I2C_EV_IRQHandler+0x266>
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	0a9b      	lsrs	r3, r3, #10
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d009      	beq.n	8007a0a <HAL_I2C_EV_IRQHandler+0x266>
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	089b      	lsrs	r3, r3, #2
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d103      	bne.n	8007a0a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 feda 	bl	80087bc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a08:	e039      	b.n	8007a7e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	089b      	lsrs	r3, r3, #2
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d033      	beq.n	8007a7e <HAL_I2C_EV_IRQHandler+0x2da>
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	0a5b      	lsrs	r3, r3, #9
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d02d      	beq.n	8007a7e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 ff07 	bl	8008836 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a28:	e029      	b.n	8007a7e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	099b      	lsrs	r3, r3, #6
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00f      	beq.n	8007a56 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	0a9b      	lsrs	r3, r3, #10
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d009      	beq.n	8007a56 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	089b      	lsrs	r3, r3, #2
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d103      	bne.n	8007a56 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 ff12 	bl	8008878 <I2C_SlaveReceive_RXNE>
 8007a54:	e014      	b.n	8007a80 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	089b      	lsrs	r3, r3, #2
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00e      	beq.n	8007a80 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	0a5b      	lsrs	r3, r3, #9
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d008      	beq.n	8007a80 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 ff40 	bl	80088f4 <I2C_SlaveReceive_BTF>
 8007a74:	e004      	b.n	8007a80 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007a76:	bf00      	nop
 8007a78:	e002      	b.n	8007a80 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a7a:	bf00      	nop
 8007a7c:	e000      	b.n	8007a80 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a7e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007a80:	3720      	adds	r7, #32
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b08a      	sub	sp, #40	; 0x28
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007aa8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	0a1b      	lsrs	r3, r3, #8
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00e      	beq.n	8007ad4 <HAL_I2C_ER_IRQHandler+0x4e>
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	0a1b      	lsrs	r3, r3, #8
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d008      	beq.n	8007ad4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac4:	f043 0301 	orr.w	r3, r3, #1
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007ad2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	0a5b      	lsrs	r3, r3, #9
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00e      	beq.n	8007afe <HAL_I2C_ER_IRQHandler+0x78>
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	0a1b      	lsrs	r3, r3, #8
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d008      	beq.n	8007afe <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	f043 0302 	orr.w	r3, r3, #2
 8007af2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007afc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	0a9b      	lsrs	r3, r3, #10
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d03f      	beq.n	8007b8a <HAL_I2C_ER_IRQHandler+0x104>
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	0a1b      	lsrs	r3, r3, #8
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d039      	beq.n	8007b8a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007b16:	7efb      	ldrb	r3, [r7, #27]
 8007b18:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b28:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007b30:	7ebb      	ldrb	r3, [r7, #26]
 8007b32:	2b20      	cmp	r3, #32
 8007b34:	d112      	bne.n	8007b5c <HAL_I2C_ER_IRQHandler+0xd6>
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10f      	bne.n	8007b5c <HAL_I2C_ER_IRQHandler+0xd6>
 8007b3c:	7cfb      	ldrb	r3, [r7, #19]
 8007b3e:	2b21      	cmp	r3, #33	; 0x21
 8007b40:	d008      	beq.n	8007b54 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007b42:	7cfb      	ldrb	r3, [r7, #19]
 8007b44:	2b29      	cmp	r3, #41	; 0x29
 8007b46:	d005      	beq.n	8007b54 <HAL_I2C_ER_IRQHandler+0xce>
 8007b48:	7cfb      	ldrb	r3, [r7, #19]
 8007b4a:	2b28      	cmp	r3, #40	; 0x28
 8007b4c:	d106      	bne.n	8007b5c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2b21      	cmp	r3, #33	; 0x21
 8007b52:	d103      	bne.n	8007b5c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f001 f869 	bl	8008c2c <I2C_Slave_AF>
 8007b5a:	e016      	b.n	8007b8a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b64:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	f043 0304 	orr.w	r3, r3, #4
 8007b6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007b6e:	7efb      	ldrb	r3, [r7, #27]
 8007b70:	2b10      	cmp	r3, #16
 8007b72:	d002      	beq.n	8007b7a <HAL_I2C_ER_IRQHandler+0xf4>
 8007b74:	7efb      	ldrb	r3, [r7, #27]
 8007b76:	2b40      	cmp	r3, #64	; 0x40
 8007b78:	d107      	bne.n	8007b8a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b88:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	0adb      	lsrs	r3, r3, #11
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00e      	beq.n	8007bb4 <HAL_I2C_ER_IRQHandler+0x12e>
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	0a1b      	lsrs	r3, r3, #8
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d008      	beq.n	8007bb4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba4:	f043 0308 	orr.w	r3, r3, #8
 8007ba8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007bb2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d008      	beq.n	8007bcc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 f8a0 	bl	8008d0c <I2C_ITError>
  }
}
 8007bcc:	bf00      	nop
 8007bce:	3728      	adds	r7, #40	; 0x28
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	70fb      	strb	r3, [r7, #3]
 8007c30:	4613      	mov	r3, r2
 8007c32:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d150      	bne.n	8007d6c <I2C_MasterTransmit_TXE+0xc8>
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	2b21      	cmp	r3, #33	; 0x21
 8007cce:	d14d      	bne.n	8007d6c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b08      	cmp	r3, #8
 8007cd4:	d01d      	beq.n	8007d12 <I2C_MasterTransmit_TXE+0x6e>
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	d01a      	beq.n	8007d12 <I2C_MasterTransmit_TXE+0x6e>
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ce2:	d016      	beq.n	8007d12 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007cf2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2211      	movs	r2, #17
 8007cf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7ff ff62 	bl	8007bd4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d10:	e060      	b.n	8007dd4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d20:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d30:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b40      	cmp	r3, #64	; 0x40
 8007d4a:	d107      	bne.n	8007d5c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff ff7d 	bl	8007c54 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d5a:	e03b      	b.n	8007dd4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff ff35 	bl	8007bd4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d6a:	e033      	b.n	8007dd4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
 8007d6e:	2b21      	cmp	r3, #33	; 0x21
 8007d70:	d005      	beq.n	8007d7e <I2C_MasterTransmit_TXE+0xda>
 8007d72:	7bbb      	ldrb	r3, [r7, #14]
 8007d74:	2b40      	cmp	r3, #64	; 0x40
 8007d76:	d12d      	bne.n	8007dd4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	2b22      	cmp	r3, #34	; 0x22
 8007d7c:	d12a      	bne.n	8007dd4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d108      	bne.n	8007d9a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d96:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007d98:	e01c      	b.n	8007dd4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b40      	cmp	r3, #64	; 0x40
 8007da4:	d103      	bne.n	8007dae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f88e 	bl	8007ec8 <I2C_MemoryTransmit_TXE_BTF>
}
 8007dac:	e012      	b.n	8007dd4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	781a      	ldrb	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbe:	1c5a      	adds	r2, r3, #1
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007dd2:	e7ff      	b.n	8007dd4 <I2C_MasterTransmit_TXE+0x130>
 8007dd4:	bf00      	nop
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b21      	cmp	r3, #33	; 0x21
 8007df4:	d164      	bne.n	8007ec0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d012      	beq.n	8007e26 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e04:	781a      	ldrb	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	1c5a      	adds	r2, r3, #1
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007e24:	e04c      	b.n	8007ec0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	d01d      	beq.n	8007e68 <I2C_MasterTransmit_BTF+0x8c>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2b20      	cmp	r3, #32
 8007e30:	d01a      	beq.n	8007e68 <I2C_MasterTransmit_BTF+0x8c>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e38:	d016      	beq.n	8007e68 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e48:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2211      	movs	r2, #17
 8007e4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7ff feb7 	bl	8007bd4 <HAL_I2C_MasterTxCpltCallback>
}
 8007e66:	e02b      	b.n	8007ec0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e76:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e86:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b40      	cmp	r3, #64	; 0x40
 8007ea0:	d107      	bne.n	8007eb2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7ff fed2 	bl	8007c54 <HAL_I2C_MemTxCpltCallback>
}
 8007eb0:	e006      	b.n	8007ec0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7ff fe8a 	bl	8007bd4 <HAL_I2C_MasterTxCpltCallback>
}
 8007ec0:	bf00      	nop
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d11d      	bne.n	8007f1c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d10b      	bne.n	8007f00 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef8:	1c9a      	adds	r2, r3, #2
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007efe:	e073      	b.n	8007fe8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	121b      	asrs	r3, r3, #8
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007f1a:	e065      	b.n	8007fe8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d10b      	bne.n	8007f3c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007f3a:	e055      	b.n	8007fe8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d151      	bne.n	8007fe8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
 8007f46:	2b22      	cmp	r3, #34	; 0x22
 8007f48:	d10d      	bne.n	8007f66 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f58:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f5e:	1c5a      	adds	r2, r3, #1
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007f64:	e040      	b.n	8007fe8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d015      	beq.n	8007f9c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	2b21      	cmp	r3, #33	; 0x21
 8007f74:	d112      	bne.n	8007f9c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	781a      	ldrb	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	1c5a      	adds	r2, r3, #1
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	3b01      	subs	r3, #1
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007f9a:	e025      	b.n	8007fe8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d120      	bne.n	8007fe8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
 8007fa8:	2b21      	cmp	r3, #33	; 0x21
 8007faa:	d11d      	bne.n	8007fe8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007fba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7ff fe36 	bl	8007c54 <HAL_I2C_MemTxCpltCallback>
}
 8007fe8:	bf00      	nop
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b22      	cmp	r3, #34	; 0x22
 8008002:	f040 80ac 	bne.w	800815e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800800a:	b29b      	uxth	r3, r3
 800800c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2b03      	cmp	r3, #3
 8008012:	d921      	bls.n	8008058 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	691a      	ldr	r2, [r3, #16]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801e:	b2d2      	uxtb	r2, r2
 8008020:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008030:	b29b      	uxth	r3, r3
 8008032:	3b01      	subs	r3, #1
 8008034:	b29a      	uxth	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800803e:	b29b      	uxth	r3, r3
 8008040:	2b03      	cmp	r3, #3
 8008042:	f040 808c 	bne.w	800815e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008054:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008056:	e082      	b.n	800815e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	2b02      	cmp	r3, #2
 800805e:	d075      	beq.n	800814c <I2C_MasterReceive_RXNE+0x15c>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d002      	beq.n	800806c <I2C_MasterReceive_RXNE+0x7c>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d16f      	bne.n	800814c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f001 f827 	bl	80090c0 <I2C_WaitOnSTOPRequestThroughIT>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d142      	bne.n	80080fe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008086:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008096:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	691a      	ldr	r2, [r3, #16]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	b2d2      	uxtb	r2, r2
 80080a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	3b01      	subs	r3, #1
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2220      	movs	r2, #32
 80080c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b40      	cmp	r3, #64	; 0x40
 80080d0:	d10a      	bne.n	80080e8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7ff fdc1 	bl	8007c68 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80080e6:	e03a      	b.n	800815e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2212      	movs	r2, #18
 80080f4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7ff fd76 	bl	8007be8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80080fc:	e02f      	b.n	800815e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800810c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	691a      	ldr	r2, [r3, #16]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	b2d2      	uxtb	r2, r2
 800811a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800812a:	b29b      	uxth	r3, r3
 800812c:	3b01      	subs	r3, #1
 800812e:	b29a      	uxth	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2220      	movs	r2, #32
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff fd99 	bl	8007c7c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800814a:	e008      	b.n	800815e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800815a:	605a      	str	r2, [r3, #4]
}
 800815c:	e7ff      	b.n	800815e <I2C_MasterReceive_RXNE+0x16e>
 800815e:	bf00      	nop
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008172:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008178:	b29b      	uxth	r3, r3
 800817a:	2b04      	cmp	r3, #4
 800817c:	d11b      	bne.n	80081b6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800818c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	691a      	ldr	r2, [r3, #16]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008198:	b2d2      	uxtb	r2, r2
 800819a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	3b01      	subs	r3, #1
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80081b4:	e0bd      	b.n	8008332 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	2b03      	cmp	r3, #3
 80081be:	d129      	bne.n	8008214 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081ce:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d00a      	beq.n	80081ec <I2C_MasterReceive_BTF+0x86>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d007      	beq.n	80081ec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691a      	ldr	r2, [r3, #16]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	b2d2      	uxtb	r2, r2
 80081f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008208:	b29b      	uxth	r3, r3
 800820a:	3b01      	subs	r3, #1
 800820c:	b29a      	uxth	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008212:	e08e      	b.n	8008332 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008218:	b29b      	uxth	r3, r3
 800821a:	2b02      	cmp	r3, #2
 800821c:	d176      	bne.n	800830c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d002      	beq.n	800822a <I2C_MasterReceive_BTF+0xc4>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b10      	cmp	r3, #16
 8008228:	d108      	bne.n	800823c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	e019      	b.n	8008270 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b04      	cmp	r3, #4
 8008240:	d002      	beq.n	8008248 <I2C_MasterReceive_BTF+0xe2>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2b02      	cmp	r3, #2
 8008246:	d108      	bne.n	800825a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	e00a      	b.n	8008270 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2b10      	cmp	r3, #16
 800825e:	d007      	beq.n	8008270 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800826e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	691a      	ldr	r2, [r3, #16]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827a:	b2d2      	uxtb	r2, r2
 800827c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800828c:	b29b      	uxth	r3, r3
 800828e:	3b01      	subs	r3, #1
 8008290:	b29a      	uxth	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	691a      	ldr	r2, [r3, #16]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	b2d2      	uxtb	r2, r2
 80082a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	1c5a      	adds	r2, r3, #1
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	3b01      	subs	r3, #1
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685a      	ldr	r2, [r3, #4]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80082ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b40      	cmp	r3, #64	; 0x40
 80082de:	d10a      	bne.n	80082f6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7ff fcba 	bl	8007c68 <HAL_I2C_MemRxCpltCallback>
}
 80082f4:	e01d      	b.n	8008332 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2212      	movs	r2, #18
 8008302:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7ff fc6f 	bl	8007be8 <HAL_I2C_MasterRxCpltCallback>
}
 800830a:	e012      	b.n	8008332 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	691a      	ldr	r2, [r3, #16]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	b2d2      	uxtb	r2, r2
 8008318:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	1c5a      	adds	r2, r3, #1
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008328:	b29b      	uxth	r3, r3
 800832a:	3b01      	subs	r3, #1
 800832c:	b29a      	uxth	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008332:	bf00      	nop
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b40      	cmp	r3, #64	; 0x40
 800834c:	d117      	bne.n	800837e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008352:	2b00      	cmp	r3, #0
 8008354:	d109      	bne.n	800836a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800835a:	b2db      	uxtb	r3, r3
 800835c:	461a      	mov	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008366:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008368:	e067      	b.n	800843a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800836e:	b2db      	uxtb	r3, r3
 8008370:	f043 0301 	orr.w	r3, r3, #1
 8008374:	b2da      	uxtb	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	611a      	str	r2, [r3, #16]
}
 800837c:	e05d      	b.n	800843a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008386:	d133      	bne.n	80083f0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b21      	cmp	r3, #33	; 0x21
 8008392:	d109      	bne.n	80083a8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008398:	b2db      	uxtb	r3, r3
 800839a:	461a      	mov	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80083a4:	611a      	str	r2, [r3, #16]
 80083a6:	e008      	b.n	80083ba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	f043 0301 	orr.w	r3, r3, #1
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d004      	beq.n	80083cc <I2C_Master_SB+0x92>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d108      	bne.n	80083de <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d032      	beq.n	800843a <I2C_Master_SB+0x100>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d02d      	beq.n	800843a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083ec:	605a      	str	r2, [r3, #4]
}
 80083ee:	e024      	b.n	800843a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10e      	bne.n	8008416 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	11db      	asrs	r3, r3, #7
 8008400:	b2db      	uxtb	r3, r3
 8008402:	f003 0306 	and.w	r3, r3, #6
 8008406:	b2db      	uxtb	r3, r3
 8008408:	f063 030f 	orn	r3, r3, #15
 800840c:	b2da      	uxtb	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	611a      	str	r2, [r3, #16]
}
 8008414:	e011      	b.n	800843a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800841a:	2b01      	cmp	r3, #1
 800841c:	d10d      	bne.n	800843a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008422:	b29b      	uxth	r3, r3
 8008424:	11db      	asrs	r3, r3, #7
 8008426:	b2db      	uxtb	r3, r3
 8008428:	f003 0306 	and.w	r3, r3, #6
 800842c:	b2db      	uxtb	r3, r3
 800842e:	f063 030e 	orn	r3, r3, #14
 8008432:	b2da      	uxtb	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	611a      	str	r2, [r3, #16]
}
 800843a:	bf00      	nop
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008452:	b2da      	uxtb	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845e:	2b00      	cmp	r3, #0
 8008460:	d004      	beq.n	800846c <I2C_Master_ADD10+0x26>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008468:	2b00      	cmp	r3, #0
 800846a:	d108      	bne.n	800847e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00c      	beq.n	800848e <I2C_Master_ADD10+0x48>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847a:	2b00      	cmp	r3, #0
 800847c:	d007      	beq.n	800848e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800848c:	605a      	str	r2, [r3, #4]
  }
}
 800848e:	bf00      	nop
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800849a:	b480      	push	{r7}
 800849c:	b091      	sub	sp, #68	; 0x44
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b22      	cmp	r3, #34	; 0x22
 80084c2:	f040 8169 	bne.w	8008798 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10f      	bne.n	80084ee <I2C_Master_ADDR+0x54>
 80084ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80084d2:	2b40      	cmp	r3, #64	; 0x40
 80084d4:	d10b      	bne.n	80084ee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084d6:	2300      	movs	r3, #0
 80084d8:	633b      	str	r3, [r7, #48]	; 0x30
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	633b      	str	r3, [r7, #48]	; 0x30
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	633b      	str	r3, [r7, #48]	; 0x30
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	e160      	b.n	80087b0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d11d      	bne.n	8008532 <I2C_Master_ADDR+0x98>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80084fe:	d118      	bne.n	8008532 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008500:	2300      	movs	r3, #0
 8008502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008524:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	651a      	str	r2, [r3, #80]	; 0x50
 8008530:	e13e      	b.n	80087b0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008536:	b29b      	uxth	r3, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	d113      	bne.n	8008564 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800853c:	2300      	movs	r3, #0
 800853e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	62bb      	str	r3, [r7, #40]	; 0x28
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008550:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	e115      	b.n	8008790 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008568:	b29b      	uxth	r3, r3
 800856a:	2b01      	cmp	r3, #1
 800856c:	f040 808a 	bne.w	8008684 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008576:	d137      	bne.n	80085e8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008586:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008596:	d113      	bne.n	80085c0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085a6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085a8:	2300      	movs	r3, #0
 80085aa:	627b      	str	r3, [r7, #36]	; 0x24
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	627b      	str	r3, [r7, #36]	; 0x24
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	627b      	str	r3, [r7, #36]	; 0x24
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	e0e7      	b.n	8008790 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085c0:	2300      	movs	r3, #0
 80085c2:	623b      	str	r3, [r7, #32]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	623b      	str	r3, [r7, #32]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	623b      	str	r3, [r7, #32]
 80085d4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	e0d3      	b.n	8008790 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80085e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ea:	2b08      	cmp	r3, #8
 80085ec:	d02e      	beq.n	800864c <I2C_Master_ADDR+0x1b2>
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	2b20      	cmp	r3, #32
 80085f2:	d02b      	beq.n	800864c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80085f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f6:	2b12      	cmp	r3, #18
 80085f8:	d102      	bne.n	8008600 <I2C_Master_ADDR+0x166>
 80085fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d125      	bne.n	800864c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008602:	2b04      	cmp	r3, #4
 8008604:	d00e      	beq.n	8008624 <I2C_Master_ADDR+0x18a>
 8008606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008608:	2b02      	cmp	r3, #2
 800860a:	d00b      	beq.n	8008624 <I2C_Master_ADDR+0x18a>
 800860c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860e:	2b10      	cmp	r3, #16
 8008610:	d008      	beq.n	8008624 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	e007      	b.n	8008634 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008632:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008634:	2300      	movs	r3, #0
 8008636:	61fb      	str	r3, [r7, #28]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	61fb      	str	r3, [r7, #28]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	61fb      	str	r3, [r7, #28]
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	e0a1      	b.n	8008790 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800865a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800865c:	2300      	movs	r3, #0
 800865e:	61bb      	str	r3, [r7, #24]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	61bb      	str	r3, [r7, #24]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	61bb      	str	r3, [r7, #24]
 8008670:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	e085      	b.n	8008790 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008688:	b29b      	uxth	r3, r3
 800868a:	2b02      	cmp	r3, #2
 800868c:	d14d      	bne.n	800872a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800868e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008690:	2b04      	cmp	r3, #4
 8008692:	d016      	beq.n	80086c2 <I2C_Master_ADDR+0x228>
 8008694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008696:	2b02      	cmp	r3, #2
 8008698:	d013      	beq.n	80086c2 <I2C_Master_ADDR+0x228>
 800869a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869c:	2b10      	cmp	r3, #16
 800869e:	d010      	beq.n	80086c2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086ae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	e007      	b.n	80086d2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086d0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086e0:	d117      	bne.n	8008712 <I2C_Master_ADDR+0x278>
 80086e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086e8:	d00b      	beq.n	8008702 <I2C_Master_ADDR+0x268>
 80086ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d008      	beq.n	8008702 <I2C_Master_ADDR+0x268>
 80086f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f2:	2b08      	cmp	r3, #8
 80086f4:	d005      	beq.n	8008702 <I2C_Master_ADDR+0x268>
 80086f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f8:	2b10      	cmp	r3, #16
 80086fa:	d002      	beq.n	8008702 <I2C_Master_ADDR+0x268>
 80086fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fe:	2b20      	cmp	r3, #32
 8008700:	d107      	bne.n	8008712 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008710:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008712:	2300      	movs	r3, #0
 8008714:	617b      	str	r3, [r7, #20]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	617b      	str	r3, [r7, #20]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	617b      	str	r3, [r7, #20]
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	e032      	b.n	8008790 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008738:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008748:	d117      	bne.n	800877a <I2C_Master_ADDR+0x2e0>
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008750:	d00b      	beq.n	800876a <I2C_Master_ADDR+0x2d0>
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	2b01      	cmp	r3, #1
 8008756:	d008      	beq.n	800876a <I2C_Master_ADDR+0x2d0>
 8008758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875a:	2b08      	cmp	r3, #8
 800875c:	d005      	beq.n	800876a <I2C_Master_ADDR+0x2d0>
 800875e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008760:	2b10      	cmp	r3, #16
 8008762:	d002      	beq.n	800876a <I2C_Master_ADDR+0x2d0>
 8008764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008766:	2b20      	cmp	r3, #32
 8008768:	d107      	bne.n	800877a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008778:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800877a:	2300      	movs	r3, #0
 800877c:	613b      	str	r3, [r7, #16]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	613b      	str	r3, [r7, #16]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	613b      	str	r3, [r7, #16]
 800878e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008796:	e00b      	b.n	80087b0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008798:	2300      	movs	r3, #0
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	60fb      	str	r3, [r7, #12]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	68fb      	ldr	r3, [r7, #12]
}
 80087ae:	e7ff      	b.n	80087b0 <I2C_Master_ADDR+0x316>
 80087b0:	bf00      	nop
 80087b2:	3744      	adds	r7, #68	; 0x44
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d02b      	beq.n	800882e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	781a      	ldrb	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	1c5a      	adds	r2, r3, #1
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	3b01      	subs	r3, #1
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087fe:	b29b      	uxth	r3, r3
 8008800:	2b00      	cmp	r3, #0
 8008802:	d114      	bne.n	800882e <I2C_SlaveTransmit_TXE+0x72>
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	2b29      	cmp	r3, #41	; 0x29
 8008808:	d111      	bne.n	800882e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008818:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2221      	movs	r2, #33	; 0x21
 800881e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2228      	movs	r2, #40	; 0x28
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff f9e7 	bl	8007bfc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800882e:	bf00      	nop
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008836:	b480      	push	{r7}
 8008838:	b083      	sub	sp, #12
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008842:	b29b      	uxth	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	d011      	beq.n	800886c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884c:	781a      	ldrb	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	1c5a      	adds	r2, r3, #1
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008862:	b29b      	uxth	r3, r3
 8008864:	3b01      	subs	r3, #1
 8008866:	b29a      	uxth	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008886:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800888c:	b29b      	uxth	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d02c      	beq.n	80088ec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	691a      	ldr	r2, [r3, #16]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	b2d2      	uxtb	r2, r2
 800889e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	3b01      	subs	r3, #1
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d114      	bne.n	80088ec <I2C_SlaveReceive_RXNE+0x74>
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
 80088c4:	2b2a      	cmp	r3, #42	; 0x2a
 80088c6:	d111      	bne.n	80088ec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2222      	movs	r2, #34	; 0x22
 80088dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2228      	movs	r2, #40	; 0x28
 80088e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff f992 	bl	8007c10 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80088ec:	bf00      	nop
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008900:	b29b      	uxth	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d012      	beq.n	800892c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	691a      	ldr	r2, [r3, #16]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	b2d2      	uxtb	r2, r2
 8008912:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008922:	b29b      	uxth	r3, r3
 8008924:	3b01      	subs	r3, #1
 8008926:	b29a      	uxth	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008942:	2300      	movs	r3, #0
 8008944:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800894c:	b2db      	uxtb	r3, r3
 800894e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008952:	2b28      	cmp	r3, #40	; 0x28
 8008954:	d127      	bne.n	80089a6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008964:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	089b      	lsrs	r3, r3, #2
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008972:	2301      	movs	r3, #1
 8008974:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	09db      	lsrs	r3, r3, #7
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	d103      	bne.n	800898a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	81bb      	strh	r3, [r7, #12]
 8008988:	e002      	b.n	8008990 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008998:	89ba      	ldrh	r2, [r7, #12]
 800899a:	7bfb      	ldrb	r3, [r7, #15]
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7ff f940 	bl	8007c24 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80089a4:	e00e      	b.n	80089c4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089a6:	2300      	movs	r3, #0
 80089a8:	60bb      	str	r3, [r7, #8]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	695b      	ldr	r3, [r3, #20]
 80089b0:	60bb      	str	r3, [r7, #8]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	60bb      	str	r3, [r7, #8]
 80089ba:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80089c4:	bf00      	nop
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089da:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685a      	ldr	r2, [r3, #4]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80089ea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80089ec:	2300      	movs	r3, #0
 80089ee:	60bb      	str	r3, [r7, #8]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	60bb      	str	r3, [r7, #8]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f042 0201 	orr.w	r2, r2, #1
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a18:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a28:	d172      	bne.n	8008b10 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
 8008a2c:	2b22      	cmp	r3, #34	; 0x22
 8008a2e:	d002      	beq.n	8008a36 <I2C_Slave_STOPF+0x6a>
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	2b2a      	cmp	r3, #42	; 0x2a
 8008a34:	d135      	bne.n	8008aa2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d005      	beq.n	8008a5a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a52:	f043 0204 	orr.w	r2, r3, #4
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe f92a 	bl	8006cc8 <HAL_DMA_GetState>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d049      	beq.n	8008b0e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7e:	4a69      	ldr	r2, [pc, #420]	; (8008c24 <I2C_Slave_STOPF+0x258>)
 8008a80:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fd ff72 	bl	8006970 <HAL_DMA_Abort_IT>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d03d      	beq.n	8008b0e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008aa0:	e035      	b.n	8008b0e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d005      	beq.n	8008ac6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abe:	f043 0204 	orr.w	r2, r3, #4
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ad4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe f8f4 	bl	8006cc8 <HAL_DMA_GetState>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d014      	beq.n	8008b10 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aea:	4a4e      	ldr	r2, [pc, #312]	; (8008c24 <I2C_Slave_STOPF+0x258>)
 8008aec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fd ff3c 	bl	8006970 <HAL_DMA_Abort_IT>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d008      	beq.n	8008b10 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b08:	4610      	mov	r0, r2
 8008b0a:	4798      	blx	r3
 8008b0c:	e000      	b.n	8008b10 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008b0e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d03e      	beq.n	8008b98 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	f003 0304 	and.w	r3, r3, #4
 8008b24:	2b04      	cmp	r3, #4
 8008b26:	d112      	bne.n	8008b4e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	691a      	ldr	r2, [r3, #16]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b32:	b2d2      	uxtb	r2, r2
 8008b34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3a:	1c5a      	adds	r2, r3, #1
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	3b01      	subs	r3, #1
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b58:	2b40      	cmp	r3, #64	; 0x40
 8008b5a:	d112      	bne.n	8008b82 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	691a      	ldr	r2, [r3, #16]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	b2d2      	uxtb	r2, r2
 8008b68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6e:	1c5a      	adds	r2, r3, #1
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d005      	beq.n	8008b98 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b90:	f043 0204 	orr.w	r2, r3, #4
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d003      	beq.n	8008ba8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f8b3 	bl	8008d0c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008ba6:	e039      	b.n	8008c1c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
 8008baa:	2b2a      	cmp	r3, #42	; 0x2a
 8008bac:	d109      	bne.n	8008bc2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2228      	movs	r2, #40	; 0x28
 8008bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff f827 	bl	8007c10 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b28      	cmp	r3, #40	; 0x28
 8008bcc:	d111      	bne.n	8008bf2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a15      	ldr	r2, [pc, #84]	; (8008c28 <I2C_Slave_STOPF+0x25c>)
 8008bd2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2220      	movs	r2, #32
 8008bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7ff f828 	bl	8007c40 <HAL_I2C_ListenCpltCallback>
}
 8008bf0:	e014      	b.n	8008c1c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf6:	2b22      	cmp	r3, #34	; 0x22
 8008bf8:	d002      	beq.n	8008c00 <I2C_Slave_STOPF+0x234>
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	2b22      	cmp	r3, #34	; 0x22
 8008bfe:	d10d      	bne.n	8008c1c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7fe fffa 	bl	8007c10 <HAL_I2C_SlaveRxCpltCallback>
}
 8008c1c:	bf00      	nop
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	08008f71 	.word	0x08008f71
 8008c28:	ffff0000 	.word	0xffff0000

08008c2c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c40:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b08      	cmp	r3, #8
 8008c46:	d002      	beq.n	8008c4e <I2C_Slave_AF+0x22>
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b20      	cmp	r3, #32
 8008c4c:	d129      	bne.n	8008ca2 <I2C_Slave_AF+0x76>
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
 8008c50:	2b28      	cmp	r3, #40	; 0x28
 8008c52:	d126      	bne.n	8008ca2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a2c      	ldr	r2, [pc, #176]	; (8008d08 <I2C_Slave_AF+0xdc>)
 8008c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008c68:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c72:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c82:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7fe ffd0 	bl	8007c40 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008ca0:	e02e      	b.n	8008d00 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
 8008ca4:	2b21      	cmp	r3, #33	; 0x21
 8008ca6:	d126      	bne.n	8008cf6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a17      	ldr	r2, [pc, #92]	; (8008d08 <I2C_Slave_AF+0xdc>)
 8008cac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2221      	movs	r2, #33	; 0x21
 8008cb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008cd2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008cdc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7fe ff84 	bl	8007bfc <HAL_I2C_SlaveTxCpltCallback>
}
 8008cf4:	e004      	b.n	8008d00 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008cfe:	615a      	str	r2, [r3, #20]
}
 8008d00:	bf00      	nop
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	ffff0000 	.word	0xffff0000

08008d0c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008d24:	7bbb      	ldrb	r3, [r7, #14]
 8008d26:	2b10      	cmp	r3, #16
 8008d28:	d002      	beq.n	8008d30 <I2C_ITError+0x24>
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	2b40      	cmp	r3, #64	; 0x40
 8008d2e:	d10a      	bne.n	8008d46 <I2C_ITError+0x3a>
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
 8008d32:	2b22      	cmp	r3, #34	; 0x22
 8008d34:	d107      	bne.n	8008d46 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d44:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
 8008d48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008d4c:	2b28      	cmp	r3, #40	; 0x28
 8008d4e:	d107      	bne.n	8008d60 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2228      	movs	r2, #40	; 0x28
 8008d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008d5e:	e015      	b.n	8008d8c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d6e:	d00a      	beq.n	8008d86 <I2C_ITError+0x7a>
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	2b60      	cmp	r3, #96	; 0x60
 8008d74:	d007      	beq.n	8008d86 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2220      	movs	r2, #32
 8008d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d9a:	d162      	bne.n	8008e62 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008daa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d020      	beq.n	8008dfc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dbe:	4a6a      	ldr	r2, [pc, #424]	; (8008f68 <I2C_ITError+0x25c>)
 8008dc0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fd fdd2 	bl	8006970 <HAL_DMA_Abort_IT>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f000 8089 	beq.w	8008ee6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f022 0201 	bic.w	r2, r2, #1
 8008de2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2220      	movs	r2, #32
 8008de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008df6:	4610      	mov	r0, r2
 8008df8:	4798      	blx	r3
 8008dfa:	e074      	b.n	8008ee6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e00:	4a59      	ldr	r2, [pc, #356]	; (8008f68 <I2C_ITError+0x25c>)
 8008e02:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7fd fdb1 	bl	8006970 <HAL_DMA_Abort_IT>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d068      	beq.n	8008ee6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1e:	2b40      	cmp	r3, #64	; 0x40
 8008e20:	d10b      	bne.n	8008e3a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	691a      	ldr	r2, [r3, #16]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2c:	b2d2      	uxtb	r2, r2
 8008e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f022 0201 	bic.w	r2, r2, #1
 8008e48:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2220      	movs	r2, #32
 8008e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	4798      	blx	r3
 8008e60:	e041      	b.n	8008ee6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b60      	cmp	r3, #96	; 0x60
 8008e6c:	d125      	bne.n	8008eba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2220      	movs	r2, #32
 8008e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e86:	2b40      	cmp	r3, #64	; 0x40
 8008e88:	d10b      	bne.n	8008ea2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	691a      	ldr	r2, [r3, #16]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e94:	b2d2      	uxtb	r2, r2
 8008e96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9c:	1c5a      	adds	r2, r3, #1
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f022 0201 	bic.w	r2, r2, #1
 8008eb0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7fe feec 	bl	8007c90 <HAL_I2C_AbortCpltCallback>
 8008eb8:	e015      	b.n	8008ee6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec4:	2b40      	cmp	r3, #64	; 0x40
 8008ec6:	d10b      	bne.n	8008ee0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	691a      	ldr	r2, [r3, #16]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed2:	b2d2      	uxtb	r2, r2
 8008ed4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7fe fecb 	bl	8007c7c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10e      	bne.n	8008f14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d109      	bne.n	8008f14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d104      	bne.n	8008f14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d007      	beq.n	8008f24 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	685a      	ldr	r2, [r3, #4]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f22:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f2a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f30:	f003 0304 	and.w	r3, r3, #4
 8008f34:	2b04      	cmp	r3, #4
 8008f36:	d113      	bne.n	8008f60 <I2C_ITError+0x254>
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	2b28      	cmp	r3, #40	; 0x28
 8008f3c:	d110      	bne.n	8008f60 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a0a      	ldr	r2, [pc, #40]	; (8008f6c <I2C_ITError+0x260>)
 8008f42:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7fe fe70 	bl	8007c40 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008f60:	bf00      	nop
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	08008f71 	.word	0x08008f71
 8008f6c:	ffff0000 	.word	0xffff0000

08008f70 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f80:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f88:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008f8a:	4b4b      	ldr	r3, [pc, #300]	; (80090b8 <I2C_DMAAbort+0x148>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	08db      	lsrs	r3, r3, #3
 8008f90:	4a4a      	ldr	r2, [pc, #296]	; (80090bc <I2C_DMAAbort+0x14c>)
 8008f92:	fba2 2303 	umull	r2, r3, r2, r3
 8008f96:	0a1a      	lsrs	r2, r3, #8
 8008f98:	4613      	mov	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4413      	add	r3, r2
 8008f9e:	00da      	lsls	r2, r3, #3
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d106      	bne.n	8008fb8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fae:	f043 0220 	orr.w	r2, r3, #32
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008fb6:	e00a      	b.n	8008fce <I2C_DMAAbort+0x5e>
    }
    count--;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fcc:	d0ea      	beq.n	8008fa4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d003      	beq.n	8008fde <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fda:	2200      	movs	r2, #0
 8008fdc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d003      	beq.n	8008fee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fea:	2200      	movs	r2, #0
 8008fec:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ffc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2200      	movs	r2, #0
 8009002:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009008:	2b00      	cmp	r3, #0
 800900a:	d003      	beq.n	8009014 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009010:	2200      	movs	r2, #0
 8009012:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009020:	2200      	movs	r2, #0
 8009022:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f022 0201 	bic.w	r2, r2, #1
 8009032:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b60      	cmp	r3, #96	; 0x60
 800903e:	d10e      	bne.n	800905e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	2220      	movs	r2, #32
 8009044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	2200      	movs	r2, #0
 8009054:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009056:	6978      	ldr	r0, [r7, #20]
 8009058:	f7fe fe1a 	bl	8007c90 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800905c:	e027      	b.n	80090ae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800905e:	7cfb      	ldrb	r3, [r7, #19]
 8009060:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009064:	2b28      	cmp	r3, #40	; 0x28
 8009066:	d117      	bne.n	8009098 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f042 0201 	orr.w	r2, r2, #1
 8009076:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009086:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	2200      	movs	r2, #0
 800908c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2228      	movs	r2, #40	; 0x28
 8009092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009096:	e007      	b.n	80090a8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	2220      	movs	r2, #32
 800909c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80090a8:	6978      	ldr	r0, [r7, #20]
 80090aa:	f7fe fde7 	bl	8007c7c <HAL_I2C_ErrorCallback>
}
 80090ae:	bf00      	nop
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	20000430 	.word	0x20000430
 80090bc:	14f8b589 	.word	0x14f8b589

080090c0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80090cc:	4b13      	ldr	r3, [pc, #76]	; (800911c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	08db      	lsrs	r3, r3, #3
 80090d2:	4a13      	ldr	r2, [pc, #76]	; (8009120 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80090d4:	fba2 2303 	umull	r2, r3, r2, r3
 80090d8:	0a1a      	lsrs	r2, r3, #8
 80090da:	4613      	mov	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4413      	add	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3b01      	subs	r3, #1
 80090e6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d107      	bne.n	80090fe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f2:	f043 0220 	orr.w	r2, r3, #32
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e008      	b.n	8009110 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800910c:	d0e9      	beq.n	80090e2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	20000430 	.word	0x20000430
 8009120:	14f8b589 	.word	0x14f8b589

08009124 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009130:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009134:	d103      	bne.n	800913e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2201      	movs	r2, #1
 800913a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800913c:	e007      	b.n	800914e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009142:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009146:	d102      	bne.n	800914e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2208      	movs	r2, #8
 800914c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800914e:	bf00      	nop
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
	...

0800915c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e267      	b.n	800963e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0301 	and.w	r3, r3, #1
 8009176:	2b00      	cmp	r3, #0
 8009178:	d075      	beq.n	8009266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800917a:	4b88      	ldr	r3, [pc, #544]	; (800939c <HAL_RCC_OscConfig+0x240>)
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	f003 030c 	and.w	r3, r3, #12
 8009182:	2b04      	cmp	r3, #4
 8009184:	d00c      	beq.n	80091a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009186:	4b85      	ldr	r3, [pc, #532]	; (800939c <HAL_RCC_OscConfig+0x240>)
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800918e:	2b08      	cmp	r3, #8
 8009190:	d112      	bne.n	80091b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009192:	4b82      	ldr	r3, [pc, #520]	; (800939c <HAL_RCC_OscConfig+0x240>)
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800919a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800919e:	d10b      	bne.n	80091b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091a0:	4b7e      	ldr	r3, [pc, #504]	; (800939c <HAL_RCC_OscConfig+0x240>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d05b      	beq.n	8009264 <HAL_RCC_OscConfig+0x108>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d157      	bne.n	8009264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	e242      	b.n	800963e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091c0:	d106      	bne.n	80091d0 <HAL_RCC_OscConfig+0x74>
 80091c2:	4b76      	ldr	r3, [pc, #472]	; (800939c <HAL_RCC_OscConfig+0x240>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a75      	ldr	r2, [pc, #468]	; (800939c <HAL_RCC_OscConfig+0x240>)
 80091c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	e01d      	b.n	800920c <HAL_RCC_OscConfig+0xb0>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091d8:	d10c      	bne.n	80091f4 <HAL_RCC_OscConfig+0x98>
 80091da:	4b70      	ldr	r3, [pc, #448]	; (800939c <HAL_RCC_OscConfig+0x240>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a6f      	ldr	r2, [pc, #444]	; (800939c <HAL_RCC_OscConfig+0x240>)
 80091e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80091e4:	6013      	str	r3, [r2, #0]
 80091e6:	4b6d      	ldr	r3, [pc, #436]	; (800939c <HAL_RCC_OscConfig+0x240>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a6c      	ldr	r2, [pc, #432]	; (800939c <HAL_RCC_OscConfig+0x240>)
 80091ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091f0:	6013      	str	r3, [r2, #0]
 80091f2:	e00b      	b.n	800920c <HAL_RCC_OscConfig+0xb0>
 80091f4:	4b69      	ldr	r3, [pc, #420]	; (800939c <HAL_RCC_OscConfig+0x240>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a68      	ldr	r2, [pc, #416]	; (800939c <HAL_RCC_OscConfig+0x240>)
 80091fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091fe:	6013      	str	r3, [r2, #0]
 8009200:	4b66      	ldr	r3, [pc, #408]	; (800939c <HAL_RCC_OscConfig+0x240>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a65      	ldr	r2, [pc, #404]	; (800939c <HAL_RCC_OscConfig+0x240>)
 8009206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800920a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d013      	beq.n	800923c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009214:	f7fd f918 	bl	8006448 <HAL_GetTick>
 8009218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800921a:	e008      	b.n	800922e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800921c:	f7fd f914 	bl	8006448 <HAL_GetTick>
 8009220:	4602      	mov	r2, r0
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	2b64      	cmp	r3, #100	; 0x64
 8009228:	d901      	bls.n	800922e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e207      	b.n	800963e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800922e:	4b5b      	ldr	r3, [pc, #364]	; (800939c <HAL_RCC_OscConfig+0x240>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d0f0      	beq.n	800921c <HAL_RCC_OscConfig+0xc0>
 800923a:	e014      	b.n	8009266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800923c:	f7fd f904 	bl	8006448 <HAL_GetTick>
 8009240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009242:	e008      	b.n	8009256 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009244:	f7fd f900 	bl	8006448 <HAL_GetTick>
 8009248:	4602      	mov	r2, r0
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	2b64      	cmp	r3, #100	; 0x64
 8009250:	d901      	bls.n	8009256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009252:	2303      	movs	r3, #3
 8009254:	e1f3      	b.n	800963e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009256:	4b51      	ldr	r3, [pc, #324]	; (800939c <HAL_RCC_OscConfig+0x240>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1f0      	bne.n	8009244 <HAL_RCC_OscConfig+0xe8>
 8009262:	e000      	b.n	8009266 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0302 	and.w	r3, r3, #2
 800926e:	2b00      	cmp	r3, #0
 8009270:	d063      	beq.n	800933a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009272:	4b4a      	ldr	r3, [pc, #296]	; (800939c <HAL_RCC_OscConfig+0x240>)
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	f003 030c 	and.w	r3, r3, #12
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00b      	beq.n	8009296 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800927e:	4b47      	ldr	r3, [pc, #284]	; (800939c <HAL_RCC_OscConfig+0x240>)
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009286:	2b08      	cmp	r3, #8
 8009288:	d11c      	bne.n	80092c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800928a:	4b44      	ldr	r3, [pc, #272]	; (800939c <HAL_RCC_OscConfig+0x240>)
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009292:	2b00      	cmp	r3, #0
 8009294:	d116      	bne.n	80092c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009296:	4b41      	ldr	r3, [pc, #260]	; (800939c <HAL_RCC_OscConfig+0x240>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d005      	beq.n	80092ae <HAL_RCC_OscConfig+0x152>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d001      	beq.n	80092ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e1c7      	b.n	800963e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092ae:	4b3b      	ldr	r3, [pc, #236]	; (800939c <HAL_RCC_OscConfig+0x240>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	00db      	lsls	r3, r3, #3
 80092bc:	4937      	ldr	r1, [pc, #220]	; (800939c <HAL_RCC_OscConfig+0x240>)
 80092be:	4313      	orrs	r3, r2
 80092c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092c2:	e03a      	b.n	800933a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d020      	beq.n	800930e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80092cc:	4b34      	ldr	r3, [pc, #208]	; (80093a0 <HAL_RCC_OscConfig+0x244>)
 80092ce:	2201      	movs	r2, #1
 80092d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d2:	f7fd f8b9 	bl	8006448 <HAL_GetTick>
 80092d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092d8:	e008      	b.n	80092ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092da:	f7fd f8b5 	bl	8006448 <HAL_GetTick>
 80092de:	4602      	mov	r2, r0
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d901      	bls.n	80092ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e1a8      	b.n	800963e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092ec:	4b2b      	ldr	r3, [pc, #172]	; (800939c <HAL_RCC_OscConfig+0x240>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 0302 	and.w	r3, r3, #2
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d0f0      	beq.n	80092da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092f8:	4b28      	ldr	r3, [pc, #160]	; (800939c <HAL_RCC_OscConfig+0x240>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	00db      	lsls	r3, r3, #3
 8009306:	4925      	ldr	r1, [pc, #148]	; (800939c <HAL_RCC_OscConfig+0x240>)
 8009308:	4313      	orrs	r3, r2
 800930a:	600b      	str	r3, [r1, #0]
 800930c:	e015      	b.n	800933a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800930e:	4b24      	ldr	r3, [pc, #144]	; (80093a0 <HAL_RCC_OscConfig+0x244>)
 8009310:	2200      	movs	r2, #0
 8009312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009314:	f7fd f898 	bl	8006448 <HAL_GetTick>
 8009318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800931a:	e008      	b.n	800932e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800931c:	f7fd f894 	bl	8006448 <HAL_GetTick>
 8009320:	4602      	mov	r2, r0
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	2b02      	cmp	r3, #2
 8009328:	d901      	bls.n	800932e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e187      	b.n	800963e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800932e:	4b1b      	ldr	r3, [pc, #108]	; (800939c <HAL_RCC_OscConfig+0x240>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 0302 	and.w	r3, r3, #2
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1f0      	bne.n	800931c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 0308 	and.w	r3, r3, #8
 8009342:	2b00      	cmp	r3, #0
 8009344:	d036      	beq.n	80093b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d016      	beq.n	800937c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800934e:	4b15      	ldr	r3, [pc, #84]	; (80093a4 <HAL_RCC_OscConfig+0x248>)
 8009350:	2201      	movs	r2, #1
 8009352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009354:	f7fd f878 	bl	8006448 <HAL_GetTick>
 8009358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800935a:	e008      	b.n	800936e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800935c:	f7fd f874 	bl	8006448 <HAL_GetTick>
 8009360:	4602      	mov	r2, r0
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	2b02      	cmp	r3, #2
 8009368:	d901      	bls.n	800936e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e167      	b.n	800963e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800936e:	4b0b      	ldr	r3, [pc, #44]	; (800939c <HAL_RCC_OscConfig+0x240>)
 8009370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009372:	f003 0302 	and.w	r3, r3, #2
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0f0      	beq.n	800935c <HAL_RCC_OscConfig+0x200>
 800937a:	e01b      	b.n	80093b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800937c:	4b09      	ldr	r3, [pc, #36]	; (80093a4 <HAL_RCC_OscConfig+0x248>)
 800937e:	2200      	movs	r2, #0
 8009380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009382:	f7fd f861 	bl	8006448 <HAL_GetTick>
 8009386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009388:	e00e      	b.n	80093a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800938a:	f7fd f85d 	bl	8006448 <HAL_GetTick>
 800938e:	4602      	mov	r2, r0
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	2b02      	cmp	r3, #2
 8009396:	d907      	bls.n	80093a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009398:	2303      	movs	r3, #3
 800939a:	e150      	b.n	800963e <HAL_RCC_OscConfig+0x4e2>
 800939c:	40023800 	.word	0x40023800
 80093a0:	42470000 	.word	0x42470000
 80093a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093a8:	4b88      	ldr	r3, [pc, #544]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 80093aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093ac:	f003 0302 	and.w	r3, r3, #2
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1ea      	bne.n	800938a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0304 	and.w	r3, r3, #4
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 8097 	beq.w	80094f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093c2:	2300      	movs	r3, #0
 80093c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093c6:	4b81      	ldr	r3, [pc, #516]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 80093c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10f      	bne.n	80093f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093d2:	2300      	movs	r3, #0
 80093d4:	60bb      	str	r3, [r7, #8]
 80093d6:	4b7d      	ldr	r3, [pc, #500]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 80093d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093da:	4a7c      	ldr	r2, [pc, #496]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 80093dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093e0:	6413      	str	r3, [r2, #64]	; 0x40
 80093e2:	4b7a      	ldr	r3, [pc, #488]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 80093e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093ea:	60bb      	str	r3, [r7, #8]
 80093ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80093ee:	2301      	movs	r3, #1
 80093f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093f2:	4b77      	ldr	r3, [pc, #476]	; (80095d0 <HAL_RCC_OscConfig+0x474>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d118      	bne.n	8009430 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80093fe:	4b74      	ldr	r3, [pc, #464]	; (80095d0 <HAL_RCC_OscConfig+0x474>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a73      	ldr	r2, [pc, #460]	; (80095d0 <HAL_RCC_OscConfig+0x474>)
 8009404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800940a:	f7fd f81d 	bl	8006448 <HAL_GetTick>
 800940e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009410:	e008      	b.n	8009424 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009412:	f7fd f819 	bl	8006448 <HAL_GetTick>
 8009416:	4602      	mov	r2, r0
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	2b02      	cmp	r3, #2
 800941e:	d901      	bls.n	8009424 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	e10c      	b.n	800963e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009424:	4b6a      	ldr	r3, [pc, #424]	; (80095d0 <HAL_RCC_OscConfig+0x474>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800942c:	2b00      	cmp	r3, #0
 800942e:	d0f0      	beq.n	8009412 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d106      	bne.n	8009446 <HAL_RCC_OscConfig+0x2ea>
 8009438:	4b64      	ldr	r3, [pc, #400]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 800943a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800943c:	4a63      	ldr	r2, [pc, #396]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 800943e:	f043 0301 	orr.w	r3, r3, #1
 8009442:	6713      	str	r3, [r2, #112]	; 0x70
 8009444:	e01c      	b.n	8009480 <HAL_RCC_OscConfig+0x324>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	2b05      	cmp	r3, #5
 800944c:	d10c      	bne.n	8009468 <HAL_RCC_OscConfig+0x30c>
 800944e:	4b5f      	ldr	r3, [pc, #380]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 8009450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009452:	4a5e      	ldr	r2, [pc, #376]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 8009454:	f043 0304 	orr.w	r3, r3, #4
 8009458:	6713      	str	r3, [r2, #112]	; 0x70
 800945a:	4b5c      	ldr	r3, [pc, #368]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 800945c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800945e:	4a5b      	ldr	r2, [pc, #364]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 8009460:	f043 0301 	orr.w	r3, r3, #1
 8009464:	6713      	str	r3, [r2, #112]	; 0x70
 8009466:	e00b      	b.n	8009480 <HAL_RCC_OscConfig+0x324>
 8009468:	4b58      	ldr	r3, [pc, #352]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 800946a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800946c:	4a57      	ldr	r2, [pc, #348]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 800946e:	f023 0301 	bic.w	r3, r3, #1
 8009472:	6713      	str	r3, [r2, #112]	; 0x70
 8009474:	4b55      	ldr	r3, [pc, #340]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 8009476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009478:	4a54      	ldr	r2, [pc, #336]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 800947a:	f023 0304 	bic.w	r3, r3, #4
 800947e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d015      	beq.n	80094b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009488:	f7fc ffde 	bl	8006448 <HAL_GetTick>
 800948c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800948e:	e00a      	b.n	80094a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009490:	f7fc ffda 	bl	8006448 <HAL_GetTick>
 8009494:	4602      	mov	r2, r0
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	f241 3288 	movw	r2, #5000	; 0x1388
 800949e:	4293      	cmp	r3, r2
 80094a0:	d901      	bls.n	80094a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e0cb      	b.n	800963e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094a6:	4b49      	ldr	r3, [pc, #292]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 80094a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094aa:	f003 0302 	and.w	r3, r3, #2
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d0ee      	beq.n	8009490 <HAL_RCC_OscConfig+0x334>
 80094b2:	e014      	b.n	80094de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094b4:	f7fc ffc8 	bl	8006448 <HAL_GetTick>
 80094b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094ba:	e00a      	b.n	80094d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094bc:	f7fc ffc4 	bl	8006448 <HAL_GetTick>
 80094c0:	4602      	mov	r2, r0
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d901      	bls.n	80094d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	e0b5      	b.n	800963e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094d2:	4b3e      	ldr	r3, [pc, #248]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 80094d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d6:	f003 0302 	and.w	r3, r3, #2
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1ee      	bne.n	80094bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094de:	7dfb      	ldrb	r3, [r7, #23]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d105      	bne.n	80094f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094e4:	4b39      	ldr	r3, [pc, #228]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 80094e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e8:	4a38      	ldr	r2, [pc, #224]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 80094ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f000 80a1 	beq.w	800963c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80094fa:	4b34      	ldr	r3, [pc, #208]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f003 030c 	and.w	r3, r3, #12
 8009502:	2b08      	cmp	r3, #8
 8009504:	d05c      	beq.n	80095c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	2b02      	cmp	r3, #2
 800950c:	d141      	bne.n	8009592 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800950e:	4b31      	ldr	r3, [pc, #196]	; (80095d4 <HAL_RCC_OscConfig+0x478>)
 8009510:	2200      	movs	r2, #0
 8009512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009514:	f7fc ff98 	bl	8006448 <HAL_GetTick>
 8009518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800951a:	e008      	b.n	800952e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800951c:	f7fc ff94 	bl	8006448 <HAL_GetTick>
 8009520:	4602      	mov	r2, r0
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	2b02      	cmp	r3, #2
 8009528:	d901      	bls.n	800952e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e087      	b.n	800963e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800952e:	4b27      	ldr	r3, [pc, #156]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1f0      	bne.n	800951c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	69da      	ldr	r2, [r3, #28]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	431a      	orrs	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009548:	019b      	lsls	r3, r3, #6
 800954a:	431a      	orrs	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009550:	085b      	lsrs	r3, r3, #1
 8009552:	3b01      	subs	r3, #1
 8009554:	041b      	lsls	r3, r3, #16
 8009556:	431a      	orrs	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955c:	061b      	lsls	r3, r3, #24
 800955e:	491b      	ldr	r1, [pc, #108]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 8009560:	4313      	orrs	r3, r2
 8009562:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009564:	4b1b      	ldr	r3, [pc, #108]	; (80095d4 <HAL_RCC_OscConfig+0x478>)
 8009566:	2201      	movs	r2, #1
 8009568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800956a:	f7fc ff6d 	bl	8006448 <HAL_GetTick>
 800956e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009570:	e008      	b.n	8009584 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009572:	f7fc ff69 	bl	8006448 <HAL_GetTick>
 8009576:	4602      	mov	r2, r0
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	2b02      	cmp	r3, #2
 800957e:	d901      	bls.n	8009584 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009580:	2303      	movs	r3, #3
 8009582:	e05c      	b.n	800963e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009584:	4b11      	ldr	r3, [pc, #68]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800958c:	2b00      	cmp	r3, #0
 800958e:	d0f0      	beq.n	8009572 <HAL_RCC_OscConfig+0x416>
 8009590:	e054      	b.n	800963c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009592:	4b10      	ldr	r3, [pc, #64]	; (80095d4 <HAL_RCC_OscConfig+0x478>)
 8009594:	2200      	movs	r2, #0
 8009596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009598:	f7fc ff56 	bl	8006448 <HAL_GetTick>
 800959c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800959e:	e008      	b.n	80095b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095a0:	f7fc ff52 	bl	8006448 <HAL_GetTick>
 80095a4:	4602      	mov	r2, r0
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d901      	bls.n	80095b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e045      	b.n	800963e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095b2:	4b06      	ldr	r3, [pc, #24]	; (80095cc <HAL_RCC_OscConfig+0x470>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1f0      	bne.n	80095a0 <HAL_RCC_OscConfig+0x444>
 80095be:	e03d      	b.n	800963c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d107      	bne.n	80095d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e038      	b.n	800963e <HAL_RCC_OscConfig+0x4e2>
 80095cc:	40023800 	.word	0x40023800
 80095d0:	40007000 	.word	0x40007000
 80095d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80095d8:	4b1b      	ldr	r3, [pc, #108]	; (8009648 <HAL_RCC_OscConfig+0x4ec>)
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d028      	beq.n	8009638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d121      	bne.n	8009638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095fe:	429a      	cmp	r2, r3
 8009600:	d11a      	bne.n	8009638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009608:	4013      	ands	r3, r2
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800960e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009610:	4293      	cmp	r3, r2
 8009612:	d111      	bne.n	8009638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961e:	085b      	lsrs	r3, r3, #1
 8009620:	3b01      	subs	r3, #1
 8009622:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009624:	429a      	cmp	r2, r3
 8009626:	d107      	bne.n	8009638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009632:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009634:	429a      	cmp	r2, r3
 8009636:	d001      	beq.n	800963c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e000      	b.n	800963e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3718      	adds	r7, #24
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	40023800 	.word	0x40023800

0800964c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d101      	bne.n	8009660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	e0cc      	b.n	80097fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009660:	4b68      	ldr	r3, [pc, #416]	; (8009804 <HAL_RCC_ClockConfig+0x1b8>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 0307 	and.w	r3, r3, #7
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	429a      	cmp	r2, r3
 800966c:	d90c      	bls.n	8009688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800966e:	4b65      	ldr	r3, [pc, #404]	; (8009804 <HAL_RCC_ClockConfig+0x1b8>)
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	b2d2      	uxtb	r2, r2
 8009674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009676:	4b63      	ldr	r3, [pc, #396]	; (8009804 <HAL_RCC_ClockConfig+0x1b8>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 0307 	and.w	r3, r3, #7
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	429a      	cmp	r2, r3
 8009682:	d001      	beq.n	8009688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e0b8      	b.n	80097fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0302 	and.w	r3, r3, #2
 8009690:	2b00      	cmp	r3, #0
 8009692:	d020      	beq.n	80096d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 0304 	and.w	r3, r3, #4
 800969c:	2b00      	cmp	r3, #0
 800969e:	d005      	beq.n	80096ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80096a0:	4b59      	ldr	r3, [pc, #356]	; (8009808 <HAL_RCC_ClockConfig+0x1bc>)
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	4a58      	ldr	r2, [pc, #352]	; (8009808 <HAL_RCC_ClockConfig+0x1bc>)
 80096a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80096aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0308 	and.w	r3, r3, #8
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d005      	beq.n	80096c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096b8:	4b53      	ldr	r3, [pc, #332]	; (8009808 <HAL_RCC_ClockConfig+0x1bc>)
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	4a52      	ldr	r2, [pc, #328]	; (8009808 <HAL_RCC_ClockConfig+0x1bc>)
 80096be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80096c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096c4:	4b50      	ldr	r3, [pc, #320]	; (8009808 <HAL_RCC_ClockConfig+0x1bc>)
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	494d      	ldr	r1, [pc, #308]	; (8009808 <HAL_RCC_ClockConfig+0x1bc>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 0301 	and.w	r3, r3, #1
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d044      	beq.n	800976c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d107      	bne.n	80096fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096ea:	4b47      	ldr	r3, [pc, #284]	; (8009808 <HAL_RCC_ClockConfig+0x1bc>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d119      	bne.n	800972a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e07f      	b.n	80097fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d003      	beq.n	800970a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009706:	2b03      	cmp	r3, #3
 8009708:	d107      	bne.n	800971a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800970a:	4b3f      	ldr	r3, [pc, #252]	; (8009808 <HAL_RCC_ClockConfig+0x1bc>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009712:	2b00      	cmp	r3, #0
 8009714:	d109      	bne.n	800972a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e06f      	b.n	80097fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800971a:	4b3b      	ldr	r3, [pc, #236]	; (8009808 <HAL_RCC_ClockConfig+0x1bc>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 0302 	and.w	r3, r3, #2
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e067      	b.n	80097fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800972a:	4b37      	ldr	r3, [pc, #220]	; (8009808 <HAL_RCC_ClockConfig+0x1bc>)
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f023 0203 	bic.w	r2, r3, #3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	4934      	ldr	r1, [pc, #208]	; (8009808 <HAL_RCC_ClockConfig+0x1bc>)
 8009738:	4313      	orrs	r3, r2
 800973a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800973c:	f7fc fe84 	bl	8006448 <HAL_GetTick>
 8009740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009742:	e00a      	b.n	800975a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009744:	f7fc fe80 	bl	8006448 <HAL_GetTick>
 8009748:	4602      	mov	r2, r0
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009752:	4293      	cmp	r3, r2
 8009754:	d901      	bls.n	800975a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e04f      	b.n	80097fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800975a:	4b2b      	ldr	r3, [pc, #172]	; (8009808 <HAL_RCC_ClockConfig+0x1bc>)
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	f003 020c 	and.w	r2, r3, #12
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	429a      	cmp	r2, r3
 800976a:	d1eb      	bne.n	8009744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800976c:	4b25      	ldr	r3, [pc, #148]	; (8009804 <HAL_RCC_ClockConfig+0x1b8>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 0307 	and.w	r3, r3, #7
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	429a      	cmp	r2, r3
 8009778:	d20c      	bcs.n	8009794 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800977a:	4b22      	ldr	r3, [pc, #136]	; (8009804 <HAL_RCC_ClockConfig+0x1b8>)
 800977c:	683a      	ldr	r2, [r7, #0]
 800977e:	b2d2      	uxtb	r2, r2
 8009780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009782:	4b20      	ldr	r3, [pc, #128]	; (8009804 <HAL_RCC_ClockConfig+0x1b8>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0307 	and.w	r3, r3, #7
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	429a      	cmp	r2, r3
 800978e:	d001      	beq.n	8009794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e032      	b.n	80097fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0304 	and.w	r3, r3, #4
 800979c:	2b00      	cmp	r3, #0
 800979e:	d008      	beq.n	80097b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097a0:	4b19      	ldr	r3, [pc, #100]	; (8009808 <HAL_RCC_ClockConfig+0x1bc>)
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	4916      	ldr	r1, [pc, #88]	; (8009808 <HAL_RCC_ClockConfig+0x1bc>)
 80097ae:	4313      	orrs	r3, r2
 80097b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 0308 	and.w	r3, r3, #8
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d009      	beq.n	80097d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097be:	4b12      	ldr	r3, [pc, #72]	; (8009808 <HAL_RCC_ClockConfig+0x1bc>)
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	00db      	lsls	r3, r3, #3
 80097cc:	490e      	ldr	r1, [pc, #56]	; (8009808 <HAL_RCC_ClockConfig+0x1bc>)
 80097ce:	4313      	orrs	r3, r2
 80097d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80097d2:	f000 f821 	bl	8009818 <HAL_RCC_GetSysClockFreq>
 80097d6:	4602      	mov	r2, r0
 80097d8:	4b0b      	ldr	r3, [pc, #44]	; (8009808 <HAL_RCC_ClockConfig+0x1bc>)
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	091b      	lsrs	r3, r3, #4
 80097de:	f003 030f 	and.w	r3, r3, #15
 80097e2:	490a      	ldr	r1, [pc, #40]	; (800980c <HAL_RCC_ClockConfig+0x1c0>)
 80097e4:	5ccb      	ldrb	r3, [r1, r3]
 80097e6:	fa22 f303 	lsr.w	r3, r2, r3
 80097ea:	4a09      	ldr	r2, [pc, #36]	; (8009810 <HAL_RCC_ClockConfig+0x1c4>)
 80097ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80097ee:	4b09      	ldr	r3, [pc, #36]	; (8009814 <HAL_RCC_ClockConfig+0x1c8>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7fc fde4 	bl	80063c0 <HAL_InitTick>

  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	40023c00 	.word	0x40023c00
 8009808:	40023800 	.word	0x40023800
 800980c:	0800c7dc 	.word	0x0800c7dc
 8009810:	20000430 	.word	0x20000430
 8009814:	20000434 	.word	0x20000434

08009818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800981c:	b094      	sub	sp, #80	; 0x50
 800981e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009820:	2300      	movs	r3, #0
 8009822:	647b      	str	r3, [r7, #68]	; 0x44
 8009824:	2300      	movs	r3, #0
 8009826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009828:	2300      	movs	r3, #0
 800982a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800982c:	2300      	movs	r3, #0
 800982e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009830:	4b79      	ldr	r3, [pc, #484]	; (8009a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	f003 030c 	and.w	r3, r3, #12
 8009838:	2b08      	cmp	r3, #8
 800983a:	d00d      	beq.n	8009858 <HAL_RCC_GetSysClockFreq+0x40>
 800983c:	2b08      	cmp	r3, #8
 800983e:	f200 80e1 	bhi.w	8009a04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009842:	2b00      	cmp	r3, #0
 8009844:	d002      	beq.n	800984c <HAL_RCC_GetSysClockFreq+0x34>
 8009846:	2b04      	cmp	r3, #4
 8009848:	d003      	beq.n	8009852 <HAL_RCC_GetSysClockFreq+0x3a>
 800984a:	e0db      	b.n	8009a04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800984c:	4b73      	ldr	r3, [pc, #460]	; (8009a1c <HAL_RCC_GetSysClockFreq+0x204>)
 800984e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009850:	e0db      	b.n	8009a0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009852:	4b73      	ldr	r3, [pc, #460]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x208>)
 8009854:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009856:	e0d8      	b.n	8009a0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009858:	4b6f      	ldr	r3, [pc, #444]	; (8009a18 <HAL_RCC_GetSysClockFreq+0x200>)
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009860:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009862:	4b6d      	ldr	r3, [pc, #436]	; (8009a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800986a:	2b00      	cmp	r3, #0
 800986c:	d063      	beq.n	8009936 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800986e:	4b6a      	ldr	r3, [pc, #424]	; (8009a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	099b      	lsrs	r3, r3, #6
 8009874:	2200      	movs	r2, #0
 8009876:	63bb      	str	r3, [r7, #56]	; 0x38
 8009878:	63fa      	str	r2, [r7, #60]	; 0x3c
 800987a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009880:	633b      	str	r3, [r7, #48]	; 0x30
 8009882:	2300      	movs	r3, #0
 8009884:	637b      	str	r3, [r7, #52]	; 0x34
 8009886:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800988a:	4622      	mov	r2, r4
 800988c:	462b      	mov	r3, r5
 800988e:	f04f 0000 	mov.w	r0, #0
 8009892:	f04f 0100 	mov.w	r1, #0
 8009896:	0159      	lsls	r1, r3, #5
 8009898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800989c:	0150      	lsls	r0, r2, #5
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	4621      	mov	r1, r4
 80098a4:	1a51      	subs	r1, r2, r1
 80098a6:	6139      	str	r1, [r7, #16]
 80098a8:	4629      	mov	r1, r5
 80098aa:	eb63 0301 	sbc.w	r3, r3, r1
 80098ae:	617b      	str	r3, [r7, #20]
 80098b0:	f04f 0200 	mov.w	r2, #0
 80098b4:	f04f 0300 	mov.w	r3, #0
 80098b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098bc:	4659      	mov	r1, fp
 80098be:	018b      	lsls	r3, r1, #6
 80098c0:	4651      	mov	r1, sl
 80098c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80098c6:	4651      	mov	r1, sl
 80098c8:	018a      	lsls	r2, r1, #6
 80098ca:	4651      	mov	r1, sl
 80098cc:	ebb2 0801 	subs.w	r8, r2, r1
 80098d0:	4659      	mov	r1, fp
 80098d2:	eb63 0901 	sbc.w	r9, r3, r1
 80098d6:	f04f 0200 	mov.w	r2, #0
 80098da:	f04f 0300 	mov.w	r3, #0
 80098de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80098e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80098e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80098ea:	4690      	mov	r8, r2
 80098ec:	4699      	mov	r9, r3
 80098ee:	4623      	mov	r3, r4
 80098f0:	eb18 0303 	adds.w	r3, r8, r3
 80098f4:	60bb      	str	r3, [r7, #8]
 80098f6:	462b      	mov	r3, r5
 80098f8:	eb49 0303 	adc.w	r3, r9, r3
 80098fc:	60fb      	str	r3, [r7, #12]
 80098fe:	f04f 0200 	mov.w	r2, #0
 8009902:	f04f 0300 	mov.w	r3, #0
 8009906:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800990a:	4629      	mov	r1, r5
 800990c:	024b      	lsls	r3, r1, #9
 800990e:	4621      	mov	r1, r4
 8009910:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009914:	4621      	mov	r1, r4
 8009916:	024a      	lsls	r2, r1, #9
 8009918:	4610      	mov	r0, r2
 800991a:	4619      	mov	r1, r3
 800991c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800991e:	2200      	movs	r2, #0
 8009920:	62bb      	str	r3, [r7, #40]	; 0x28
 8009922:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009924:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009928:	f7f7 f894 	bl	8000a54 <__aeabi_uldivmod>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	4613      	mov	r3, r2
 8009932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009934:	e058      	b.n	80099e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009936:	4b38      	ldr	r3, [pc, #224]	; (8009a18 <HAL_RCC_GetSysClockFreq+0x200>)
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	099b      	lsrs	r3, r3, #6
 800993c:	2200      	movs	r2, #0
 800993e:	4618      	mov	r0, r3
 8009940:	4611      	mov	r1, r2
 8009942:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009946:	623b      	str	r3, [r7, #32]
 8009948:	2300      	movs	r3, #0
 800994a:	627b      	str	r3, [r7, #36]	; 0x24
 800994c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009950:	4642      	mov	r2, r8
 8009952:	464b      	mov	r3, r9
 8009954:	f04f 0000 	mov.w	r0, #0
 8009958:	f04f 0100 	mov.w	r1, #0
 800995c:	0159      	lsls	r1, r3, #5
 800995e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009962:	0150      	lsls	r0, r2, #5
 8009964:	4602      	mov	r2, r0
 8009966:	460b      	mov	r3, r1
 8009968:	4641      	mov	r1, r8
 800996a:	ebb2 0a01 	subs.w	sl, r2, r1
 800996e:	4649      	mov	r1, r9
 8009970:	eb63 0b01 	sbc.w	fp, r3, r1
 8009974:	f04f 0200 	mov.w	r2, #0
 8009978:	f04f 0300 	mov.w	r3, #0
 800997c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009980:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009984:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009988:	ebb2 040a 	subs.w	r4, r2, sl
 800998c:	eb63 050b 	sbc.w	r5, r3, fp
 8009990:	f04f 0200 	mov.w	r2, #0
 8009994:	f04f 0300 	mov.w	r3, #0
 8009998:	00eb      	lsls	r3, r5, #3
 800999a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800999e:	00e2      	lsls	r2, r4, #3
 80099a0:	4614      	mov	r4, r2
 80099a2:	461d      	mov	r5, r3
 80099a4:	4643      	mov	r3, r8
 80099a6:	18e3      	adds	r3, r4, r3
 80099a8:	603b      	str	r3, [r7, #0]
 80099aa:	464b      	mov	r3, r9
 80099ac:	eb45 0303 	adc.w	r3, r5, r3
 80099b0:	607b      	str	r3, [r7, #4]
 80099b2:	f04f 0200 	mov.w	r2, #0
 80099b6:	f04f 0300 	mov.w	r3, #0
 80099ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80099be:	4629      	mov	r1, r5
 80099c0:	028b      	lsls	r3, r1, #10
 80099c2:	4621      	mov	r1, r4
 80099c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80099c8:	4621      	mov	r1, r4
 80099ca:	028a      	lsls	r2, r1, #10
 80099cc:	4610      	mov	r0, r2
 80099ce:	4619      	mov	r1, r3
 80099d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099d2:	2200      	movs	r2, #0
 80099d4:	61bb      	str	r3, [r7, #24]
 80099d6:	61fa      	str	r2, [r7, #28]
 80099d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099dc:	f7f7 f83a 	bl	8000a54 <__aeabi_uldivmod>
 80099e0:	4602      	mov	r2, r0
 80099e2:	460b      	mov	r3, r1
 80099e4:	4613      	mov	r3, r2
 80099e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80099e8:	4b0b      	ldr	r3, [pc, #44]	; (8009a18 <HAL_RCC_GetSysClockFreq+0x200>)
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	0c1b      	lsrs	r3, r3, #16
 80099ee:	f003 0303 	and.w	r3, r3, #3
 80099f2:	3301      	adds	r3, #1
 80099f4:	005b      	lsls	r3, r3, #1
 80099f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80099f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a02:	e002      	b.n	8009a0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009a04:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <HAL_RCC_GetSysClockFreq+0x204>)
 8009a06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3750      	adds	r7, #80	; 0x50
 8009a10:	46bd      	mov	sp, r7
 8009a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a16:	bf00      	nop
 8009a18:	40023800 	.word	0x40023800
 8009a1c:	00f42400 	.word	0x00f42400
 8009a20:	007a1200 	.word	0x007a1200

08009a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a24:	b480      	push	{r7}
 8009a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a28:	4b03      	ldr	r3, [pc, #12]	; (8009a38 <HAL_RCC_GetHCLKFreq+0x14>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	20000430 	.word	0x20000430

08009a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009a40:	f7ff fff0 	bl	8009a24 <HAL_RCC_GetHCLKFreq>
 8009a44:	4602      	mov	r2, r0
 8009a46:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	0a9b      	lsrs	r3, r3, #10
 8009a4c:	f003 0307 	and.w	r3, r3, #7
 8009a50:	4903      	ldr	r1, [pc, #12]	; (8009a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a52:	5ccb      	ldrb	r3, [r1, r3]
 8009a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	40023800 	.word	0x40023800
 8009a60:	0800c7ec 	.word	0x0800c7ec

08009a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009a68:	f7ff ffdc 	bl	8009a24 <HAL_RCC_GetHCLKFreq>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	4b05      	ldr	r3, [pc, #20]	; (8009a84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	0b5b      	lsrs	r3, r3, #13
 8009a74:	f003 0307 	and.w	r3, r3, #7
 8009a78:	4903      	ldr	r1, [pc, #12]	; (8009a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a7a:	5ccb      	ldrb	r3, [r1, r3]
 8009a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	40023800 	.word	0x40023800
 8009a88:	0800c7ec 	.word	0x0800c7ec

08009a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d101      	bne.n	8009a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e041      	b.n	8009b22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d106      	bne.n	8009ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7fc fa6a 	bl	8005f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2202      	movs	r2, #2
 8009abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	3304      	adds	r3, #4
 8009ac8:	4619      	mov	r1, r3
 8009aca:	4610      	mov	r0, r2
 8009acc:	f000 fdac 	bl	800a628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
	...

08009b2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d001      	beq.n	8009b44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	e044      	b.n	8009bce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2202      	movs	r2, #2
 8009b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68da      	ldr	r2, [r3, #12]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f042 0201 	orr.w	r2, r2, #1
 8009b5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a1e      	ldr	r2, [pc, #120]	; (8009bdc <HAL_TIM_Base_Start_IT+0xb0>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d018      	beq.n	8009b98 <HAL_TIM_Base_Start_IT+0x6c>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b6e:	d013      	beq.n	8009b98 <HAL_TIM_Base_Start_IT+0x6c>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a1a      	ldr	r2, [pc, #104]	; (8009be0 <HAL_TIM_Base_Start_IT+0xb4>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d00e      	beq.n	8009b98 <HAL_TIM_Base_Start_IT+0x6c>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a19      	ldr	r2, [pc, #100]	; (8009be4 <HAL_TIM_Base_Start_IT+0xb8>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d009      	beq.n	8009b98 <HAL_TIM_Base_Start_IT+0x6c>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a17      	ldr	r2, [pc, #92]	; (8009be8 <HAL_TIM_Base_Start_IT+0xbc>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d004      	beq.n	8009b98 <HAL_TIM_Base_Start_IT+0x6c>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a16      	ldr	r2, [pc, #88]	; (8009bec <HAL_TIM_Base_Start_IT+0xc0>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d111      	bne.n	8009bbc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	f003 0307 	and.w	r3, r3, #7
 8009ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b06      	cmp	r3, #6
 8009ba8:	d010      	beq.n	8009bcc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f042 0201 	orr.w	r2, r2, #1
 8009bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bba:	e007      	b.n	8009bcc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f042 0201 	orr.w	r2, r2, #1
 8009bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	40010000 	.word	0x40010000
 8009be0:	40000400 	.word	0x40000400
 8009be4:	40000800 	.word	0x40000800
 8009be8:	40000c00 	.word	0x40000c00
 8009bec:	40014000 	.word	0x40014000

08009bf0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68da      	ldr	r2, [r3, #12]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f022 0201 	bic.w	r2, r2, #1
 8009c06:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	6a1a      	ldr	r2, [r3, #32]
 8009c0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c12:	4013      	ands	r3, r2
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10f      	bne.n	8009c38 <HAL_TIM_Base_Stop_IT+0x48>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	6a1a      	ldr	r2, [r3, #32]
 8009c1e:	f240 4344 	movw	r3, #1092	; 0x444
 8009c22:	4013      	ands	r3, r2
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d107      	bne.n	8009c38 <HAL_TIM_Base_Stop_IT+0x48>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f022 0201 	bic.w	r2, r2, #1
 8009c36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b082      	sub	sp, #8
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d101      	bne.n	8009c60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e041      	b.n	8009ce4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d106      	bne.n	8009c7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7fc f91b 	bl	8005eb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2202      	movs	r2, #2
 8009c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	3304      	adds	r3, #4
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	4610      	mov	r0, r2
 8009c8e:	f000 fccb 	bl	800a628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d109      	bne.n	8009d10 <HAL_TIM_PWM_Start+0x24>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	bf14      	ite	ne
 8009d08:	2301      	movne	r3, #1
 8009d0a:	2300      	moveq	r3, #0
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	e022      	b.n	8009d56 <HAL_TIM_PWM_Start+0x6a>
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	2b04      	cmp	r3, #4
 8009d14:	d109      	bne.n	8009d2a <HAL_TIM_PWM_Start+0x3e>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	bf14      	ite	ne
 8009d22:	2301      	movne	r3, #1
 8009d24:	2300      	moveq	r3, #0
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	e015      	b.n	8009d56 <HAL_TIM_PWM_Start+0x6a>
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	2b08      	cmp	r3, #8
 8009d2e:	d109      	bne.n	8009d44 <HAL_TIM_PWM_Start+0x58>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	bf14      	ite	ne
 8009d3c:	2301      	movne	r3, #1
 8009d3e:	2300      	moveq	r3, #0
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	e008      	b.n	8009d56 <HAL_TIM_PWM_Start+0x6a>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	bf14      	ite	ne
 8009d50:	2301      	movne	r3, #1
 8009d52:	2300      	moveq	r3, #0
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e068      	b.n	8009e30 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d104      	bne.n	8009d6e <HAL_TIM_PWM_Start+0x82>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2202      	movs	r2, #2
 8009d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d6c:	e013      	b.n	8009d96 <HAL_TIM_PWM_Start+0xaa>
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2b04      	cmp	r3, #4
 8009d72:	d104      	bne.n	8009d7e <HAL_TIM_PWM_Start+0x92>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2202      	movs	r2, #2
 8009d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d7c:	e00b      	b.n	8009d96 <HAL_TIM_PWM_Start+0xaa>
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	2b08      	cmp	r3, #8
 8009d82:	d104      	bne.n	8009d8e <HAL_TIM_PWM_Start+0xa2>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2202      	movs	r2, #2
 8009d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d8c:	e003      	b.n	8009d96 <HAL_TIM_PWM_Start+0xaa>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2202      	movs	r2, #2
 8009d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f000 fee8 	bl	800ab74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a23      	ldr	r2, [pc, #140]	; (8009e38 <HAL_TIM_PWM_Start+0x14c>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d107      	bne.n	8009dbe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009dbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a1d      	ldr	r2, [pc, #116]	; (8009e38 <HAL_TIM_PWM_Start+0x14c>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d018      	beq.n	8009dfa <HAL_TIM_PWM_Start+0x10e>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dd0:	d013      	beq.n	8009dfa <HAL_TIM_PWM_Start+0x10e>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a19      	ldr	r2, [pc, #100]	; (8009e3c <HAL_TIM_PWM_Start+0x150>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d00e      	beq.n	8009dfa <HAL_TIM_PWM_Start+0x10e>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a17      	ldr	r2, [pc, #92]	; (8009e40 <HAL_TIM_PWM_Start+0x154>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d009      	beq.n	8009dfa <HAL_TIM_PWM_Start+0x10e>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a16      	ldr	r2, [pc, #88]	; (8009e44 <HAL_TIM_PWM_Start+0x158>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d004      	beq.n	8009dfa <HAL_TIM_PWM_Start+0x10e>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a14      	ldr	r2, [pc, #80]	; (8009e48 <HAL_TIM_PWM_Start+0x15c>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d111      	bne.n	8009e1e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	f003 0307 	and.w	r3, r3, #7
 8009e04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2b06      	cmp	r3, #6
 8009e0a:	d010      	beq.n	8009e2e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f042 0201 	orr.w	r2, r2, #1
 8009e1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e1c:	e007      	b.n	8009e2e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f042 0201 	orr.w	r2, r2, #1
 8009e2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	40010000 	.word	0x40010000
 8009e3c:	40000400 	.word	0x40000400
 8009e40:	40000800 	.word	0x40000800
 8009e44:	40000c00 	.word	0x40000c00
 8009e48:	40014000 	.word	0x40014000

08009e4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e097      	b.n	8009f90 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d106      	bne.n	8009e7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7fc f843 	bl	8005f00 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2202      	movs	r2, #2
 8009e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	6812      	ldr	r2, [r2, #0]
 8009e8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e90:	f023 0307 	bic.w	r3, r3, #7
 8009e94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	f000 fbc1 	bl	800a628 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	6a1b      	ldr	r3, [r3, #32]
 8009ebc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ece:	f023 0303 	bic.w	r3, r3, #3
 8009ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	689a      	ldr	r2, [r3, #8]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	021b      	lsls	r3, r3, #8
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009eec:	f023 030c 	bic.w	r3, r3, #12
 8009ef0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ef8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009efc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	68da      	ldr	r2, [r3, #12]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	69db      	ldr	r3, [r3, #28]
 8009f06:	021b      	lsls	r3, r3, #8
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	011a      	lsls	r2, r3, #4
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	031b      	lsls	r3, r3, #12
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009f2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009f32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	685a      	ldr	r2, [r3, #4]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	695b      	ldr	r3, [r3, #20]
 8009f3c:	011b      	lsls	r3, r3, #4
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3718      	adds	r7, #24
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fa8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009fb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009fb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009fc0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d110      	bne.n	8009fea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d102      	bne.n	8009fd4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009fce:	7b7b      	ldrb	r3, [r7, #13]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d001      	beq.n	8009fd8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e069      	b.n	800a0ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fe8:	e031      	b.n	800a04e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2b04      	cmp	r3, #4
 8009fee:	d110      	bne.n	800a012 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ff0:	7bbb      	ldrb	r3, [r7, #14]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d102      	bne.n	8009ffc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ff6:	7b3b      	ldrb	r3, [r7, #12]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d001      	beq.n	800a000 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e055      	b.n	800a0ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2202      	movs	r2, #2
 800a004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2202      	movs	r2, #2
 800a00c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a010:	e01d      	b.n	800a04e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a012:	7bfb      	ldrb	r3, [r7, #15]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d108      	bne.n	800a02a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a018:	7bbb      	ldrb	r3, [r7, #14]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d105      	bne.n	800a02a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a01e:	7b7b      	ldrb	r3, [r7, #13]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d102      	bne.n	800a02a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a024:	7b3b      	ldrb	r3, [r7, #12]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d001      	beq.n	800a02e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e03e      	b.n	800a0ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2202      	movs	r2, #2
 800a032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2202      	movs	r2, #2
 800a03a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2202      	movs	r2, #2
 800a042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2202      	movs	r2, #2
 800a04a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d003      	beq.n	800a05c <HAL_TIM_Encoder_Start+0xc4>
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	2b04      	cmp	r3, #4
 800a058:	d008      	beq.n	800a06c <HAL_TIM_Encoder_Start+0xd4>
 800a05a:	e00f      	b.n	800a07c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2201      	movs	r2, #1
 800a062:	2100      	movs	r1, #0
 800a064:	4618      	mov	r0, r3
 800a066:	f000 fd85 	bl	800ab74 <TIM_CCxChannelCmd>
      break;
 800a06a:	e016      	b.n	800a09a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2201      	movs	r2, #1
 800a072:	2104      	movs	r1, #4
 800a074:	4618      	mov	r0, r3
 800a076:	f000 fd7d 	bl	800ab74 <TIM_CCxChannelCmd>
      break;
 800a07a:	e00e      	b.n	800a09a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2201      	movs	r2, #1
 800a082:	2100      	movs	r1, #0
 800a084:	4618      	mov	r0, r3
 800a086:	f000 fd75 	bl	800ab74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2201      	movs	r2, #1
 800a090:	2104      	movs	r1, #4
 800a092:	4618      	mov	r0, r3
 800a094:	f000 fd6e 	bl	800ab74 <TIM_CCxChannelCmd>
      break;
 800a098:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f042 0201 	orr.w	r2, r2, #1
 800a0a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	691b      	ldr	r3, [r3, #16]
 800a0c2:	f003 0302 	and.w	r3, r3, #2
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d122      	bne.n	800a110 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	f003 0302 	and.w	r3, r3, #2
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d11b      	bne.n	800a110 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f06f 0202 	mvn.w	r2, #2
 800a0e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	699b      	ldr	r3, [r3, #24]
 800a0ee:	f003 0303 	and.w	r3, r3, #3
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d003      	beq.n	800a0fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 fa77 	bl	800a5ea <HAL_TIM_IC_CaptureCallback>
 800a0fc:	e005      	b.n	800a10a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fa69 	bl	800a5d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fa7a 	bl	800a5fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	f003 0304 	and.w	r3, r3, #4
 800a11a:	2b04      	cmp	r3, #4
 800a11c:	d122      	bne.n	800a164 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	2b04      	cmp	r3, #4
 800a12a:	d11b      	bne.n	800a164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f06f 0204 	mvn.w	r2, #4
 800a134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2202      	movs	r2, #2
 800a13a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	699b      	ldr	r3, [r3, #24]
 800a142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a146:	2b00      	cmp	r3, #0
 800a148:	d003      	beq.n	800a152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fa4d 	bl	800a5ea <HAL_TIM_IC_CaptureCallback>
 800a150:	e005      	b.n	800a15e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fa3f 	bl	800a5d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fa50 	bl	800a5fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	f003 0308 	and.w	r3, r3, #8
 800a16e:	2b08      	cmp	r3, #8
 800a170:	d122      	bne.n	800a1b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	f003 0308 	and.w	r3, r3, #8
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	d11b      	bne.n	800a1b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f06f 0208 	mvn.w	r2, #8
 800a188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2204      	movs	r2, #4
 800a18e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	69db      	ldr	r3, [r3, #28]
 800a196:	f003 0303 	and.w	r3, r3, #3
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d003      	beq.n	800a1a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fa23 	bl	800a5ea <HAL_TIM_IC_CaptureCallback>
 800a1a4:	e005      	b.n	800a1b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fa15 	bl	800a5d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 fa26 	bl	800a5fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	f003 0310 	and.w	r3, r3, #16
 800a1c2:	2b10      	cmp	r3, #16
 800a1c4:	d122      	bne.n	800a20c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	f003 0310 	and.w	r3, r3, #16
 800a1d0:	2b10      	cmp	r3, #16
 800a1d2:	d11b      	bne.n	800a20c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f06f 0210 	mvn.w	r2, #16
 800a1dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2208      	movs	r2, #8
 800a1e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	69db      	ldr	r3, [r3, #28]
 800a1ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f9f9 	bl	800a5ea <HAL_TIM_IC_CaptureCallback>
 800a1f8:	e005      	b.n	800a206 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f9eb 	bl	800a5d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f9fc 	bl	800a5fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	f003 0301 	and.w	r3, r3, #1
 800a216:	2b01      	cmp	r3, #1
 800a218:	d10e      	bne.n	800a238 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	f003 0301 	and.w	r3, r3, #1
 800a224:	2b01      	cmp	r3, #1
 800a226:	d107      	bne.n	800a238 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f06f 0201 	mvn.w	r2, #1
 800a230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7fb fcf2 	bl	8005c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a242:	2b80      	cmp	r3, #128	; 0x80
 800a244:	d10e      	bne.n	800a264 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a250:	2b80      	cmp	r3, #128	; 0x80
 800a252:	d107      	bne.n	800a264 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a25c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fd78 	bl	800ad54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a26e:	2b40      	cmp	r3, #64	; 0x40
 800a270:	d10e      	bne.n	800a290 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a27c:	2b40      	cmp	r3, #64	; 0x40
 800a27e:	d107      	bne.n	800a290 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f9c1 	bl	800a612 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	f003 0320 	and.w	r3, r3, #32
 800a29a:	2b20      	cmp	r3, #32
 800a29c:	d10e      	bne.n	800a2bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	f003 0320 	and.w	r3, r3, #32
 800a2a8:	2b20      	cmp	r3, #32
 800a2aa:	d107      	bne.n	800a2bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f06f 0220 	mvn.w	r2, #32
 800a2b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fd42 	bl	800ad40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2bc:	bf00      	nop
 800a2be:	3708      	adds	r7, #8
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d101      	bne.n	800a2e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a2de:	2302      	movs	r3, #2
 800a2e0:	e0ae      	b.n	800a440 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b0c      	cmp	r3, #12
 800a2ee:	f200 809f 	bhi.w	800a430 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a2f2:	a201      	add	r2, pc, #4	; (adr r2, 800a2f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f8:	0800a32d 	.word	0x0800a32d
 800a2fc:	0800a431 	.word	0x0800a431
 800a300:	0800a431 	.word	0x0800a431
 800a304:	0800a431 	.word	0x0800a431
 800a308:	0800a36d 	.word	0x0800a36d
 800a30c:	0800a431 	.word	0x0800a431
 800a310:	0800a431 	.word	0x0800a431
 800a314:	0800a431 	.word	0x0800a431
 800a318:	0800a3af 	.word	0x0800a3af
 800a31c:	0800a431 	.word	0x0800a431
 800a320:	0800a431 	.word	0x0800a431
 800a324:	0800a431 	.word	0x0800a431
 800a328:	0800a3ef 	.word	0x0800a3ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68b9      	ldr	r1, [r7, #8]
 800a332:	4618      	mov	r0, r3
 800a334:	f000 f9f8 	bl	800a728 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	699a      	ldr	r2, [r3, #24]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f042 0208 	orr.w	r2, r2, #8
 800a346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	699a      	ldr	r2, [r3, #24]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f022 0204 	bic.w	r2, r2, #4
 800a356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	6999      	ldr	r1, [r3, #24]
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	691a      	ldr	r2, [r3, #16]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	430a      	orrs	r2, r1
 800a368:	619a      	str	r2, [r3, #24]
      break;
 800a36a:	e064      	b.n	800a436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68b9      	ldr	r1, [r7, #8]
 800a372:	4618      	mov	r0, r3
 800a374:	f000 fa3e 	bl	800a7f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	699a      	ldr	r2, [r3, #24]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	699a      	ldr	r2, [r3, #24]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	6999      	ldr	r1, [r3, #24]
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	691b      	ldr	r3, [r3, #16]
 800a3a2:	021a      	lsls	r2, r3, #8
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	430a      	orrs	r2, r1
 800a3aa:	619a      	str	r2, [r3, #24]
      break;
 800a3ac:	e043      	b.n	800a436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68b9      	ldr	r1, [r7, #8]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 fa89 	bl	800a8cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	69da      	ldr	r2, [r3, #28]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f042 0208 	orr.w	r2, r2, #8
 800a3c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	69da      	ldr	r2, [r3, #28]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f022 0204 	bic.w	r2, r2, #4
 800a3d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	69d9      	ldr	r1, [r3, #28]
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	691a      	ldr	r2, [r3, #16]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	430a      	orrs	r2, r1
 800a3ea:	61da      	str	r2, [r3, #28]
      break;
 800a3ec:	e023      	b.n	800a436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68b9      	ldr	r1, [r7, #8]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f000 fad3 	bl	800a9a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	69da      	ldr	r2, [r3, #28]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	69da      	ldr	r2, [r3, #28]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	69d9      	ldr	r1, [r3, #28]
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	021a      	lsls	r2, r3, #8
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	430a      	orrs	r2, r1
 800a42c:	61da      	str	r2, [r3, #28]
      break;
 800a42e:	e002      	b.n	800a436 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	75fb      	strb	r3, [r7, #23]
      break;
 800a434:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3718      	adds	r7, #24
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a452:	2300      	movs	r3, #0
 800a454:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d101      	bne.n	800a464 <HAL_TIM_ConfigClockSource+0x1c>
 800a460:	2302      	movs	r3, #2
 800a462:	e0b4      	b.n	800a5ce <HAL_TIM_ConfigClockSource+0x186>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2202      	movs	r2, #2
 800a470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a48a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68ba      	ldr	r2, [r7, #8]
 800a492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a49c:	d03e      	beq.n	800a51c <HAL_TIM_ConfigClockSource+0xd4>
 800a49e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4a2:	f200 8087 	bhi.w	800a5b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4aa:	f000 8086 	beq.w	800a5ba <HAL_TIM_ConfigClockSource+0x172>
 800a4ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4b2:	d87f      	bhi.n	800a5b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4b4:	2b70      	cmp	r3, #112	; 0x70
 800a4b6:	d01a      	beq.n	800a4ee <HAL_TIM_ConfigClockSource+0xa6>
 800a4b8:	2b70      	cmp	r3, #112	; 0x70
 800a4ba:	d87b      	bhi.n	800a5b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4bc:	2b60      	cmp	r3, #96	; 0x60
 800a4be:	d050      	beq.n	800a562 <HAL_TIM_ConfigClockSource+0x11a>
 800a4c0:	2b60      	cmp	r3, #96	; 0x60
 800a4c2:	d877      	bhi.n	800a5b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4c4:	2b50      	cmp	r3, #80	; 0x50
 800a4c6:	d03c      	beq.n	800a542 <HAL_TIM_ConfigClockSource+0xfa>
 800a4c8:	2b50      	cmp	r3, #80	; 0x50
 800a4ca:	d873      	bhi.n	800a5b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4cc:	2b40      	cmp	r3, #64	; 0x40
 800a4ce:	d058      	beq.n	800a582 <HAL_TIM_ConfigClockSource+0x13a>
 800a4d0:	2b40      	cmp	r3, #64	; 0x40
 800a4d2:	d86f      	bhi.n	800a5b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4d4:	2b30      	cmp	r3, #48	; 0x30
 800a4d6:	d064      	beq.n	800a5a2 <HAL_TIM_ConfigClockSource+0x15a>
 800a4d8:	2b30      	cmp	r3, #48	; 0x30
 800a4da:	d86b      	bhi.n	800a5b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4dc:	2b20      	cmp	r3, #32
 800a4de:	d060      	beq.n	800a5a2 <HAL_TIM_ConfigClockSource+0x15a>
 800a4e0:	2b20      	cmp	r3, #32
 800a4e2:	d867      	bhi.n	800a5b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d05c      	beq.n	800a5a2 <HAL_TIM_ConfigClockSource+0x15a>
 800a4e8:	2b10      	cmp	r3, #16
 800a4ea:	d05a      	beq.n	800a5a2 <HAL_TIM_ConfigClockSource+0x15a>
 800a4ec:	e062      	b.n	800a5b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6818      	ldr	r0, [r3, #0]
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	6899      	ldr	r1, [r3, #8]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	685a      	ldr	r2, [r3, #4]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	f000 fb19 	bl	800ab34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a510:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	609a      	str	r2, [r3, #8]
      break;
 800a51a:	e04f      	b.n	800a5bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6818      	ldr	r0, [r3, #0]
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	6899      	ldr	r1, [r3, #8]
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	f000 fb02 	bl	800ab34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	689a      	ldr	r2, [r3, #8]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a53e:	609a      	str	r2, [r3, #8]
      break;
 800a540:	e03c      	b.n	800a5bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6818      	ldr	r0, [r3, #0]
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	6859      	ldr	r1, [r3, #4]
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	461a      	mov	r2, r3
 800a550:	f000 fa76 	bl	800aa40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2150      	movs	r1, #80	; 0x50
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 facf 	bl	800aafe <TIM_ITRx_SetConfig>
      break;
 800a560:	e02c      	b.n	800a5bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6818      	ldr	r0, [r3, #0]
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	6859      	ldr	r1, [r3, #4]
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	461a      	mov	r2, r3
 800a570:	f000 fa95 	bl	800aa9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2160      	movs	r1, #96	; 0x60
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 fabf 	bl	800aafe <TIM_ITRx_SetConfig>
      break;
 800a580:	e01c      	b.n	800a5bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6818      	ldr	r0, [r3, #0]
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	6859      	ldr	r1, [r3, #4]
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	461a      	mov	r2, r3
 800a590:	f000 fa56 	bl	800aa40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2140      	movs	r1, #64	; 0x40
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 faaf 	bl	800aafe <TIM_ITRx_SetConfig>
      break;
 800a5a0:	e00c      	b.n	800a5bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	f000 faa6 	bl	800aafe <TIM_ITRx_SetConfig>
      break;
 800a5b2:	e003      	b.n	800a5bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a5b8:	e000      	b.n	800a5bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a5ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	b083      	sub	sp, #12
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a5de:	bf00      	nop
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a5ea:	b480      	push	{r7}
 800a5ec:	b083      	sub	sp, #12
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a5f2:	bf00      	nop
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a5fe:	b480      	push	{r7}
 800a600:	b083      	sub	sp, #12
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a606:	bf00      	nop
 800a608:	370c      	adds	r7, #12
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a612:	b480      	push	{r7}
 800a614:	b083      	sub	sp, #12
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a61a:	bf00      	nop
 800a61c:	370c      	adds	r7, #12
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
	...

0800a628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a34      	ldr	r2, [pc, #208]	; (800a70c <TIM_Base_SetConfig+0xe4>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d00f      	beq.n	800a660 <TIM_Base_SetConfig+0x38>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a646:	d00b      	beq.n	800a660 <TIM_Base_SetConfig+0x38>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	4a31      	ldr	r2, [pc, #196]	; (800a710 <TIM_Base_SetConfig+0xe8>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d007      	beq.n	800a660 <TIM_Base_SetConfig+0x38>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	4a30      	ldr	r2, [pc, #192]	; (800a714 <TIM_Base_SetConfig+0xec>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d003      	beq.n	800a660 <TIM_Base_SetConfig+0x38>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4a2f      	ldr	r2, [pc, #188]	; (800a718 <TIM_Base_SetConfig+0xf0>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d108      	bne.n	800a672 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	4313      	orrs	r3, r2
 800a670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4a25      	ldr	r2, [pc, #148]	; (800a70c <TIM_Base_SetConfig+0xe4>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d01b      	beq.n	800a6b2 <TIM_Base_SetConfig+0x8a>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a680:	d017      	beq.n	800a6b2 <TIM_Base_SetConfig+0x8a>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a22      	ldr	r2, [pc, #136]	; (800a710 <TIM_Base_SetConfig+0xe8>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d013      	beq.n	800a6b2 <TIM_Base_SetConfig+0x8a>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a21      	ldr	r2, [pc, #132]	; (800a714 <TIM_Base_SetConfig+0xec>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d00f      	beq.n	800a6b2 <TIM_Base_SetConfig+0x8a>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a20      	ldr	r2, [pc, #128]	; (800a718 <TIM_Base_SetConfig+0xf0>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d00b      	beq.n	800a6b2 <TIM_Base_SetConfig+0x8a>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a1f      	ldr	r2, [pc, #124]	; (800a71c <TIM_Base_SetConfig+0xf4>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d007      	beq.n	800a6b2 <TIM_Base_SetConfig+0x8a>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a1e      	ldr	r2, [pc, #120]	; (800a720 <TIM_Base_SetConfig+0xf8>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d003      	beq.n	800a6b2 <TIM_Base_SetConfig+0x8a>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4a1d      	ldr	r2, [pc, #116]	; (800a724 <TIM_Base_SetConfig+0xfc>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d108      	bne.n	800a6c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	689a      	ldr	r2, [r3, #8]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4a08      	ldr	r2, [pc, #32]	; (800a70c <TIM_Base_SetConfig+0xe4>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d103      	bne.n	800a6f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	691a      	ldr	r2, [r3, #16]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	615a      	str	r2, [r3, #20]
}
 800a6fe:	bf00      	nop
 800a700:	3714      	adds	r7, #20
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	40010000 	.word	0x40010000
 800a710:	40000400 	.word	0x40000400
 800a714:	40000800 	.word	0x40000800
 800a718:	40000c00 	.word	0x40000c00
 800a71c:	40014000 	.word	0x40014000
 800a720:	40014400 	.word	0x40014400
 800a724:	40014800 	.word	0x40014800

0800a728 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a728:	b480      	push	{r7}
 800a72a:	b087      	sub	sp, #28
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6a1b      	ldr	r3, [r3, #32]
 800a736:	f023 0201 	bic.w	r2, r3, #1
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a1b      	ldr	r3, [r3, #32]
 800a742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	699b      	ldr	r3, [r3, #24]
 800a74e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f023 0303 	bic.w	r3, r3, #3
 800a75e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	4313      	orrs	r3, r2
 800a768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	f023 0302 	bic.w	r3, r3, #2
 800a770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	697a      	ldr	r2, [r7, #20]
 800a778:	4313      	orrs	r3, r2
 800a77a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a1c      	ldr	r2, [pc, #112]	; (800a7f0 <TIM_OC1_SetConfig+0xc8>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d10c      	bne.n	800a79e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f023 0308 	bic.w	r3, r3, #8
 800a78a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	697a      	ldr	r2, [r7, #20]
 800a792:	4313      	orrs	r3, r2
 800a794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	f023 0304 	bic.w	r3, r3, #4
 800a79c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4a13      	ldr	r2, [pc, #76]	; (800a7f0 <TIM_OC1_SetConfig+0xc8>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d111      	bne.n	800a7ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	695b      	ldr	r3, [r3, #20]
 800a7ba:	693a      	ldr	r2, [r7, #16]
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	693a      	ldr	r2, [r7, #16]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	693a      	ldr	r2, [r7, #16]
 800a7ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	685a      	ldr	r2, [r3, #4]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	697a      	ldr	r2, [r7, #20]
 800a7e2:	621a      	str	r2, [r3, #32]
}
 800a7e4:	bf00      	nop
 800a7e6:	371c      	adds	r7, #28
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	40010000 	.word	0x40010000

0800a7f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b087      	sub	sp, #28
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a1b      	ldr	r3, [r3, #32]
 800a802:	f023 0210 	bic.w	r2, r3, #16
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a1b      	ldr	r3, [r3, #32]
 800a80e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	699b      	ldr	r3, [r3, #24]
 800a81a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a82a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	021b      	lsls	r3, r3, #8
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	4313      	orrs	r3, r2
 800a836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f023 0320 	bic.w	r3, r3, #32
 800a83e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	011b      	lsls	r3, r3, #4
 800a846:	697a      	ldr	r2, [r7, #20]
 800a848:	4313      	orrs	r3, r2
 800a84a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a1e      	ldr	r2, [pc, #120]	; (800a8c8 <TIM_OC2_SetConfig+0xd4>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d10d      	bne.n	800a870 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a85a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	011b      	lsls	r3, r3, #4
 800a862:	697a      	ldr	r2, [r7, #20]
 800a864:	4313      	orrs	r3, r2
 800a866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a86e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a15      	ldr	r2, [pc, #84]	; (800a8c8 <TIM_OC2_SetConfig+0xd4>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d113      	bne.n	800a8a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a87e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a886:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	695b      	ldr	r3, [r3, #20]
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	693a      	ldr	r2, [r7, #16]
 800a890:	4313      	orrs	r3, r2
 800a892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	699b      	ldr	r3, [r3, #24]
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	693a      	ldr	r2, [r7, #16]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	685a      	ldr	r2, [r3, #4]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	697a      	ldr	r2, [r7, #20]
 800a8b8:	621a      	str	r2, [r3, #32]
}
 800a8ba:	bf00      	nop
 800a8bc:	371c      	adds	r7, #28
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	40010000 	.word	0x40010000

0800a8cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b087      	sub	sp, #28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a1b      	ldr	r3, [r3, #32]
 800a8da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	69db      	ldr	r3, [r3, #28]
 800a8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f023 0303 	bic.w	r3, r3, #3
 800a902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	021b      	lsls	r3, r3, #8
 800a91c:	697a      	ldr	r2, [r7, #20]
 800a91e:	4313      	orrs	r3, r2
 800a920:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a1d      	ldr	r2, [pc, #116]	; (800a99c <TIM_OC3_SetConfig+0xd0>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d10d      	bne.n	800a946 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a930:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	021b      	lsls	r3, r3, #8
 800a938:	697a      	ldr	r2, [r7, #20]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a14      	ldr	r2, [pc, #80]	; (800a99c <TIM_OC3_SetConfig+0xd0>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d113      	bne.n	800a976 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a95c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	011b      	lsls	r3, r3, #4
 800a964:	693a      	ldr	r2, [r7, #16]
 800a966:	4313      	orrs	r3, r2
 800a968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	011b      	lsls	r3, r3, #4
 800a970:	693a      	ldr	r2, [r7, #16]
 800a972:	4313      	orrs	r3, r2
 800a974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	697a      	ldr	r2, [r7, #20]
 800a98e:	621a      	str	r2, [r3, #32]
}
 800a990:	bf00      	nop
 800a992:	371c      	adds	r7, #28
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	40010000 	.word	0x40010000

0800a9a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b087      	sub	sp, #28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a1b      	ldr	r3, [r3, #32]
 800a9ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a1b      	ldr	r3, [r3, #32]
 800a9ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	021b      	lsls	r3, r3, #8
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a9ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	031b      	lsls	r3, r3, #12
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4a10      	ldr	r2, [pc, #64]	; (800aa3c <TIM_OC4_SetConfig+0x9c>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d109      	bne.n	800aa14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	695b      	ldr	r3, [r3, #20]
 800aa0c:	019b      	lsls	r3, r3, #6
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	685a      	ldr	r2, [r3, #4]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	693a      	ldr	r2, [r7, #16]
 800aa2c:	621a      	str	r2, [r3, #32]
}
 800aa2e:	bf00      	nop
 800aa30:	371c      	adds	r7, #28
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	40010000 	.word	0x40010000

0800aa40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b087      	sub	sp, #28
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6a1b      	ldr	r3, [r3, #32]
 800aa50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	f023 0201 	bic.w	r2, r3, #1
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	699b      	ldr	r3, [r3, #24]
 800aa62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	011b      	lsls	r3, r3, #4
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f023 030a 	bic.w	r3, r3, #10
 800aa7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	693a      	ldr	r2, [r7, #16]
 800aa8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	621a      	str	r2, [r3, #32]
}
 800aa92:	bf00      	nop
 800aa94:	371c      	adds	r7, #28
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b087      	sub	sp, #28
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	60f8      	str	r0, [r7, #12]
 800aaa6:	60b9      	str	r1, [r7, #8]
 800aaa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	f023 0210 	bic.w	r2, r3, #16
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	699b      	ldr	r3, [r3, #24]
 800aaba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6a1b      	ldr	r3, [r3, #32]
 800aac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	031b      	lsls	r3, r3, #12
 800aace:	697a      	ldr	r2, [r7, #20]
 800aad0:	4313      	orrs	r3, r2
 800aad2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aada:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	011b      	lsls	r3, r3, #4
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	697a      	ldr	r2, [r7, #20]
 800aaea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	693a      	ldr	r2, [r7, #16]
 800aaf0:	621a      	str	r2, [r3, #32]
}
 800aaf2:	bf00      	nop
 800aaf4:	371c      	adds	r7, #28
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b085      	sub	sp, #20
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab16:	683a      	ldr	r2, [r7, #0]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	f043 0307 	orr.w	r3, r3, #7
 800ab20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	609a      	str	r2, [r3, #8]
}
 800ab28:	bf00      	nop
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b087      	sub	sp, #28
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
 800ab40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	021a      	lsls	r2, r3, #8
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	431a      	orrs	r2, r3
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	697a      	ldr	r2, [r7, #20]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	697a      	ldr	r2, [r7, #20]
 800ab66:	609a      	str	r2, [r3, #8]
}
 800ab68:	bf00      	nop
 800ab6a:	371c      	adds	r7, #28
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b087      	sub	sp, #28
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	f003 031f 	and.w	r3, r3, #31
 800ab86:	2201      	movs	r2, #1
 800ab88:	fa02 f303 	lsl.w	r3, r2, r3
 800ab8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6a1a      	ldr	r2, [r3, #32]
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	43db      	mvns	r3, r3
 800ab96:	401a      	ands	r2, r3
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6a1a      	ldr	r2, [r3, #32]
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	f003 031f 	and.w	r3, r3, #31
 800aba6:	6879      	ldr	r1, [r7, #4]
 800aba8:	fa01 f303 	lsl.w	r3, r1, r3
 800abac:	431a      	orrs	r2, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	621a      	str	r2, [r3, #32]
}
 800abb2:	bf00      	nop
 800abb4:	371c      	adds	r7, #28
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
	...

0800abc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d101      	bne.n	800abd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abd4:	2302      	movs	r3, #2
 800abd6:	e050      	b.n	800ac7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2202      	movs	r2, #2
 800abe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a1c      	ldr	r2, [pc, #112]	; (800ac88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d018      	beq.n	800ac4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac24:	d013      	beq.n	800ac4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a18      	ldr	r2, [pc, #96]	; (800ac8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d00e      	beq.n	800ac4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a16      	ldr	r2, [pc, #88]	; (800ac90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d009      	beq.n	800ac4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a15      	ldr	r2, [pc, #84]	; (800ac94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d004      	beq.n	800ac4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a13      	ldr	r2, [pc, #76]	; (800ac98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d10c      	bne.n	800ac68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	40010000 	.word	0x40010000
 800ac8c:	40000400 	.word	0x40000400
 800ac90:	40000800 	.word	0x40000800
 800ac94:	40000c00 	.word	0x40000c00
 800ac98:	40014000 	.word	0x40014000

0800ac9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aca6:	2300      	movs	r3, #0
 800aca8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d101      	bne.n	800acb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800acb4:	2302      	movs	r3, #2
 800acb6:	e03d      	b.n	800ad34 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	4313      	orrs	r3, r2
 800accc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	4313      	orrs	r3, r2
 800acda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	695b      	ldr	r3, [r3, #20]
 800ad10:	4313      	orrs	r3, r2
 800ad12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	69db      	ldr	r3, [r3, #28]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3714      	adds	r7, #20
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad48:	bf00      	nop
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d101      	bne.n	800ad7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad76:	2301      	movs	r3, #1
 800ad78:	e03f      	b.n	800adfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d106      	bne.n	800ad94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f7fb f97c 	bl	800608c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2224      	movs	r2, #36	; 0x24
 800ad98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68da      	ldr	r2, [r3, #12]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800adaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 ff81 	bl	800bcb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	691a      	ldr	r2, [r3, #16]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800adc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	695a      	ldr	r2, [r3, #20]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800add0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68da      	ldr	r2, [r3, #12]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ade0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2220      	movs	r2, #32
 800adec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2220      	movs	r2, #32
 800adf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
	...

0800ae04 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b08c      	sub	sp, #48	; 0x30
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	4613      	mov	r3, r2
 800ae10:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	2b20      	cmp	r3, #32
 800ae1c:	d165      	bne.n	800aeea <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <HAL_UART_Transmit_DMA+0x26>
 800ae24:	88fb      	ldrh	r3, [r7, #6]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d101      	bne.n	800ae2e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e05e      	b.n	800aeec <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d101      	bne.n	800ae3c <HAL_UART_Transmit_DMA+0x38>
 800ae38:	2302      	movs	r3, #2
 800ae3a:	e057      	b.n	800aeec <HAL_UART_Transmit_DMA+0xe8>
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	88fa      	ldrh	r2, [r7, #6]
 800ae4e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	88fa      	ldrh	r2, [r7, #6]
 800ae54:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2221      	movs	r2, #33	; 0x21
 800ae60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae68:	4a22      	ldr	r2, [pc, #136]	; (800aef4 <HAL_UART_Transmit_DMA+0xf0>)
 800ae6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae70:	4a21      	ldr	r2, [pc, #132]	; (800aef8 <HAL_UART_Transmit_DMA+0xf4>)
 800ae72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae78:	4a20      	ldr	r2, [pc, #128]	; (800aefc <HAL_UART_Transmit_DMA+0xf8>)
 800ae7a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae80:	2200      	movs	r2, #0
 800ae82:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800ae84:	f107 0308 	add.w	r3, r7, #8
 800ae88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ae8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae90:	6819      	ldr	r1, [r3, #0]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	3304      	adds	r3, #4
 800ae98:	461a      	mov	r2, r3
 800ae9a:	88fb      	ldrh	r3, [r7, #6]
 800ae9c:	f7fb fca0 	bl	80067e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aea8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	3314      	adds	r3, #20
 800aeb8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	e853 3f00 	ldrex	r3, [r3]
 800aec0:	617b      	str	r3, [r7, #20]
   return(result);
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aec8:	62bb      	str	r3, [r7, #40]	; 0x28
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	3314      	adds	r3, #20
 800aed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aed2:	627a      	str	r2, [r7, #36]	; 0x24
 800aed4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed6:	6a39      	ldr	r1, [r7, #32]
 800aed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeda:	e841 2300 	strex	r3, r2, [r1]
 800aede:	61fb      	str	r3, [r7, #28]
   return(result);
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d1e5      	bne.n	800aeb2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800aee6:	2300      	movs	r3, #0
 800aee8:	e000      	b.n	800aeec <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800aeea:	2302      	movs	r3, #2
  }
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3730      	adds	r7, #48	; 0x30
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	0800b54d 	.word	0x0800b54d
 800aef8:	0800b5e7 	.word	0x0800b5e7
 800aefc:	0800b75f 	.word	0x0800b75f

0800af00 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b08c      	sub	sp, #48	; 0x30
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	4613      	mov	r3, r2
 800af0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af14:	b2db      	uxtb	r3, r3
 800af16:	2b20      	cmp	r3, #32
 800af18:	d152      	bne.n	800afc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d002      	beq.n	800af26 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800af20:	88fb      	ldrh	r3, [r7, #6]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d101      	bne.n	800af2a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	e04b      	b.n	800afc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af30:	2b01      	cmp	r3, #1
 800af32:	d101      	bne.n	800af38 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800af34:	2302      	movs	r3, #2
 800af36:	e044      	b.n	800afc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2201      	movs	r2, #1
 800af44:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800af46:	88fb      	ldrh	r3, [r7, #6]
 800af48:	461a      	mov	r2, r3
 800af4a:	68b9      	ldr	r1, [r7, #8]
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f000 fc51 	bl	800b7f4 <UART_Start_Receive_DMA>
 800af52:	4603      	mov	r3, r0
 800af54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800af58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d12c      	bne.n	800afba <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af64:	2b01      	cmp	r3, #1
 800af66:	d125      	bne.n	800afb4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af68:	2300      	movs	r3, #0
 800af6a:	613b      	str	r3, [r7, #16]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	613b      	str	r3, [r7, #16]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	613b      	str	r3, [r7, #16]
 800af7c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	330c      	adds	r3, #12
 800af84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	e853 3f00 	ldrex	r3, [r3]
 800af8c:	617b      	str	r3, [r7, #20]
   return(result);
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f043 0310 	orr.w	r3, r3, #16
 800af94:	62bb      	str	r3, [r7, #40]	; 0x28
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	330c      	adds	r3, #12
 800af9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af9e:	627a      	str	r2, [r7, #36]	; 0x24
 800afa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa2:	6a39      	ldr	r1, [r7, #32]
 800afa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afa6:	e841 2300 	strex	r3, r2, [r1]
 800afaa:	61fb      	str	r3, [r7, #28]
   return(result);
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d1e5      	bne.n	800af7e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800afb2:	e002      	b.n	800afba <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800afba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afbe:	e000      	b.n	800afc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800afc0:	2302      	movs	r3, #2
  }
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3730      	adds	r7, #48	; 0x30
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
	...

0800afcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b0ba      	sub	sp, #232	; 0xe8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	695b      	ldr	r3, [r3, #20]
 800afee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800aff2:	2300      	movs	r3, #0
 800aff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800aff8:	2300      	movs	r3, #0
 800affa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800affe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b002:	f003 030f 	and.w	r3, r3, #15
 800b006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b00a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10f      	bne.n	800b032 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b016:	f003 0320 	and.w	r3, r3, #32
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d009      	beq.n	800b032 <HAL_UART_IRQHandler+0x66>
 800b01e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b022:	f003 0320 	and.w	r3, r3, #32
 800b026:	2b00      	cmp	r3, #0
 800b028:	d003      	beq.n	800b032 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 fd87 	bl	800bb3e <UART_Receive_IT>
      return;
 800b030:	e256      	b.n	800b4e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b036:	2b00      	cmp	r3, #0
 800b038:	f000 80de 	beq.w	800b1f8 <HAL_UART_IRQHandler+0x22c>
 800b03c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b040:	f003 0301 	and.w	r3, r3, #1
 800b044:	2b00      	cmp	r3, #0
 800b046:	d106      	bne.n	800b056 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b04c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b050:	2b00      	cmp	r3, #0
 800b052:	f000 80d1 	beq.w	800b1f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b05a:	f003 0301 	and.w	r3, r3, #1
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00b      	beq.n	800b07a <HAL_UART_IRQHandler+0xae>
 800b062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d005      	beq.n	800b07a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b072:	f043 0201 	orr.w	r2, r3, #1
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b07a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b07e:	f003 0304 	and.w	r3, r3, #4
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00b      	beq.n	800b09e <HAL_UART_IRQHandler+0xd2>
 800b086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b08a:	f003 0301 	and.w	r3, r3, #1
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d005      	beq.n	800b09e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b096:	f043 0202 	orr.w	r2, r3, #2
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b09e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00b      	beq.n	800b0c2 <HAL_UART_IRQHandler+0xf6>
 800b0aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d005      	beq.n	800b0c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ba:	f043 0204 	orr.w	r2, r3, #4
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b0c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0c6:	f003 0308 	and.w	r3, r3, #8
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d011      	beq.n	800b0f2 <HAL_UART_IRQHandler+0x126>
 800b0ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0d2:	f003 0320 	and.w	r3, r3, #32
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d105      	bne.n	800b0e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b0da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0de:	f003 0301 	and.w	r3, r3, #1
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d005      	beq.n	800b0f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ea:	f043 0208 	orr.w	r2, r3, #8
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f000 81ed 	beq.w	800b4d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b0fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b100:	f003 0320 	and.w	r3, r3, #32
 800b104:	2b00      	cmp	r3, #0
 800b106:	d008      	beq.n	800b11a <HAL_UART_IRQHandler+0x14e>
 800b108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b10c:	f003 0320 	and.w	r3, r3, #32
 800b110:	2b00      	cmp	r3, #0
 800b112:	d002      	beq.n	800b11a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fd12 	bl	800bb3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	695b      	ldr	r3, [r3, #20]
 800b120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b124:	2b40      	cmp	r3, #64	; 0x40
 800b126:	bf0c      	ite	eq
 800b128:	2301      	moveq	r3, #1
 800b12a:	2300      	movne	r3, #0
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b136:	f003 0308 	and.w	r3, r3, #8
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d103      	bne.n	800b146 <HAL_UART_IRQHandler+0x17a>
 800b13e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b142:	2b00      	cmp	r3, #0
 800b144:	d04f      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fc1a 	bl	800b980 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	695b      	ldr	r3, [r3, #20]
 800b152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b156:	2b40      	cmp	r3, #64	; 0x40
 800b158:	d141      	bne.n	800b1de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	3314      	adds	r3, #20
 800b160:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b168:	e853 3f00 	ldrex	r3, [r3]
 800b16c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	3314      	adds	r3, #20
 800b182:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b186:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b18a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b192:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b196:	e841 2300 	strex	r3, r2, [r1]
 800b19a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b19e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1d9      	bne.n	800b15a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d013      	beq.n	800b1d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b2:	4a7d      	ldr	r2, [pc, #500]	; (800b3a8 <HAL_UART_IRQHandler+0x3dc>)
 800b1b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fb fbd8 	bl	8006970 <HAL_DMA_Abort_IT>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d016      	beq.n	800b1f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b1d0:	4610      	mov	r0, r2
 800b1d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1d4:	e00e      	b.n	800b1f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 f9ae 	bl	800b538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1dc:	e00a      	b.n	800b1f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f9aa 	bl	800b538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1e4:	e006      	b.n	800b1f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 f9a6 	bl	800b538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b1f2:	e170      	b.n	800b4d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1f4:	bf00      	nop
    return;
 800b1f6:	e16e      	b.n	800b4d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	f040 814a 	bne.w	800b496 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b206:	f003 0310 	and.w	r3, r3, #16
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f000 8143 	beq.w	800b496 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b214:	f003 0310 	and.w	r3, r3, #16
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f000 813c 	beq.w	800b496 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b21e:	2300      	movs	r3, #0
 800b220:	60bb      	str	r3, [r7, #8]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	60bb      	str	r3, [r7, #8]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	60bb      	str	r3, [r7, #8]
 800b232:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	695b      	ldr	r3, [r3, #20]
 800b23a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b23e:	2b40      	cmp	r3, #64	; 0x40
 800b240:	f040 80b4 	bne.w	800b3ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b250:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b254:	2b00      	cmp	r3, #0
 800b256:	f000 8140 	beq.w	800b4da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b25e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b262:	429a      	cmp	r2, r3
 800b264:	f080 8139 	bcs.w	800b4da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b26e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b274:	69db      	ldr	r3, [r3, #28]
 800b276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b27a:	f000 8088 	beq.w	800b38e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	330c      	adds	r3, #12
 800b284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b288:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b28c:	e853 3f00 	ldrex	r3, [r3]
 800b290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b29c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	330c      	adds	r3, #12
 800b2a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b2aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b2ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b2b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b2ba:	e841 2300 	strex	r3, r2, [r1]
 800b2be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b2c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1d9      	bne.n	800b27e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	3314      	adds	r3, #20
 800b2d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2d4:	e853 3f00 	ldrex	r3, [r3]
 800b2d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b2da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2dc:	f023 0301 	bic.w	r3, r3, #1
 800b2e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3314      	adds	r3, #20
 800b2ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b2ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b2f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b2f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b2fa:	e841 2300 	strex	r3, r2, [r1]
 800b2fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b302:	2b00      	cmp	r3, #0
 800b304:	d1e1      	bne.n	800b2ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	3314      	adds	r3, #20
 800b30c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b310:	e853 3f00 	ldrex	r3, [r3]
 800b314:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b31c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	3314      	adds	r3, #20
 800b326:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b32a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b32c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b32e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b330:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b332:	e841 2300 	strex	r3, r2, [r1]
 800b336:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d1e3      	bne.n	800b306 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2220      	movs	r2, #32
 800b342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	330c      	adds	r3, #12
 800b352:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b356:	e853 3f00 	ldrex	r3, [r3]
 800b35a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b35c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b35e:	f023 0310 	bic.w	r3, r3, #16
 800b362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	330c      	adds	r3, #12
 800b36c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b370:	65ba      	str	r2, [r7, #88]	; 0x58
 800b372:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b374:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b376:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b378:	e841 2300 	strex	r3, r2, [r1]
 800b37c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b37e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b380:	2b00      	cmp	r3, #0
 800b382:	d1e3      	bne.n	800b34c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b388:	4618      	mov	r0, r3
 800b38a:	f7fb fa81 	bl	8006890 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b396:	b29b      	uxth	r3, r3
 800b398:	1ad3      	subs	r3, r2, r3
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	4619      	mov	r1, r3
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f7f9 fbde 	bl	8004b60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b3a4:	e099      	b.n	800b4da <HAL_UART_IRQHandler+0x50e>
 800b3a6:	bf00      	nop
 800b3a8:	0800ba47 	.word	0x0800ba47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f000 808b 	beq.w	800b4de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b3c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f000 8086 	beq.w	800b4de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	330c      	adds	r3, #12
 800b3d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3dc:	e853 3f00 	ldrex	r3, [r3]
 800b3e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b3e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	330c      	adds	r3, #12
 800b3f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b3f6:	647a      	str	r2, [r7, #68]	; 0x44
 800b3f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b3fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3fe:	e841 2300 	strex	r3, r2, [r1]
 800b402:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1e3      	bne.n	800b3d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	3314      	adds	r3, #20
 800b410:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b414:	e853 3f00 	ldrex	r3, [r3]
 800b418:	623b      	str	r3, [r7, #32]
   return(result);
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	f023 0301 	bic.w	r3, r3, #1
 800b420:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3314      	adds	r3, #20
 800b42a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b42e:	633a      	str	r2, [r7, #48]	; 0x30
 800b430:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b436:	e841 2300 	strex	r3, r2, [r1]
 800b43a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1e3      	bne.n	800b40a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2220      	movs	r2, #32
 800b446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	330c      	adds	r3, #12
 800b456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	e853 3f00 	ldrex	r3, [r3]
 800b45e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f023 0310 	bic.w	r3, r3, #16
 800b466:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	330c      	adds	r3, #12
 800b470:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b474:	61fa      	str	r2, [r7, #28]
 800b476:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b478:	69b9      	ldr	r1, [r7, #24]
 800b47a:	69fa      	ldr	r2, [r7, #28]
 800b47c:	e841 2300 	strex	r3, r2, [r1]
 800b480:	617b      	str	r3, [r7, #20]
   return(result);
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1e3      	bne.n	800b450 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b48c:	4619      	mov	r1, r3
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f7f9 fb66 	bl	8004b60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b494:	e023      	b.n	800b4de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b49a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d009      	beq.n	800b4b6 <HAL_UART_IRQHandler+0x4ea>
 800b4a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d003      	beq.n	800b4b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 fadd 	bl	800ba6e <UART_Transmit_IT>
    return;
 800b4b4:	e014      	b.n	800b4e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b4b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00e      	beq.n	800b4e0 <HAL_UART_IRQHandler+0x514>
 800b4c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d008      	beq.n	800b4e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fb1d 	bl	800bb0e <UART_EndTransmit_IT>
    return;
 800b4d4:	e004      	b.n	800b4e0 <HAL_UART_IRQHandler+0x514>
    return;
 800b4d6:	bf00      	nop
 800b4d8:	e002      	b.n	800b4e0 <HAL_UART_IRQHandler+0x514>
      return;
 800b4da:	bf00      	nop
 800b4dc:	e000      	b.n	800b4e0 <HAL_UART_IRQHandler+0x514>
      return;
 800b4de:	bf00      	nop
  }
}
 800b4e0:	37e8      	adds	r7, #232	; 0xe8
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop

0800b4e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b4f0:	bf00      	nop
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr

0800b4fc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b504:	bf00      	nop
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b518:	bf00      	nop
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b52c:	bf00      	nop
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b540:	bf00      	nop
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b090      	sub	sp, #64	; 0x40
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b558:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b564:	2b00      	cmp	r3, #0
 800b566:	d137      	bne.n	800b5d8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b56a:	2200      	movs	r2, #0
 800b56c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	3314      	adds	r3, #20
 800b574:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b578:	e853 3f00 	ldrex	r3, [r3]
 800b57c:	623b      	str	r3, [r7, #32]
   return(result);
 800b57e:	6a3b      	ldr	r3, [r7, #32]
 800b580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b584:	63bb      	str	r3, [r7, #56]	; 0x38
 800b586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3314      	adds	r3, #20
 800b58c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b58e:	633a      	str	r2, [r7, #48]	; 0x30
 800b590:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b592:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b596:	e841 2300 	strex	r3, r2, [r1]
 800b59a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1e5      	bne.n	800b56e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	330c      	adds	r3, #12
 800b5a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	e853 3f00 	ldrex	r3, [r3]
 800b5b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5b8:	637b      	str	r3, [r7, #52]	; 0x34
 800b5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	330c      	adds	r3, #12
 800b5c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5c2:	61fa      	str	r2, [r7, #28]
 800b5c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c6:	69b9      	ldr	r1, [r7, #24]
 800b5c8:	69fa      	ldr	r2, [r7, #28]
 800b5ca:	e841 2300 	strex	r3, r2, [r1]
 800b5ce:	617b      	str	r3, [r7, #20]
   return(result);
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1e5      	bne.n	800b5a2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b5d6:	e002      	b.n	800b5de <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b5d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b5da:	f7ff ff85 	bl	800b4e8 <HAL_UART_TxCpltCallback>
}
 800b5de:	bf00      	nop
 800b5e0:	3740      	adds	r7, #64	; 0x40
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b084      	sub	sp, #16
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f7ff ff81 	bl	800b4fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5fa:	bf00      	nop
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b09c      	sub	sp, #112	; 0x70
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b60e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d172      	bne.n	800b704 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b61e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b620:	2200      	movs	r2, #0
 800b622:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	330c      	adds	r3, #12
 800b62a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b62e:	e853 3f00 	ldrex	r3, [r3]
 800b632:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b636:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b63a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b63c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	330c      	adds	r3, #12
 800b642:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b644:	65ba      	str	r2, [r7, #88]	; 0x58
 800b646:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b648:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b64a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b64c:	e841 2300 	strex	r3, r2, [r1]
 800b650:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1e5      	bne.n	800b624 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	3314      	adds	r3, #20
 800b65e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b662:	e853 3f00 	ldrex	r3, [r3]
 800b666:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b66a:	f023 0301 	bic.w	r3, r3, #1
 800b66e:	667b      	str	r3, [r7, #100]	; 0x64
 800b670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	3314      	adds	r3, #20
 800b676:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b678:	647a      	str	r2, [r7, #68]	; 0x44
 800b67a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b67e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b680:	e841 2300 	strex	r3, r2, [r1]
 800b684:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1e5      	bne.n	800b658 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b68c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	3314      	adds	r3, #20
 800b692:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b696:	e853 3f00 	ldrex	r3, [r3]
 800b69a:	623b      	str	r3, [r7, #32]
   return(result);
 800b69c:	6a3b      	ldr	r3, [r7, #32]
 800b69e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6a2:	663b      	str	r3, [r7, #96]	; 0x60
 800b6a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	3314      	adds	r3, #20
 800b6aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b6ac:	633a      	str	r2, [r7, #48]	; 0x30
 800b6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6b4:	e841 2300 	strex	r3, r2, [r1]
 800b6b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d1e5      	bne.n	800b68c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b6c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6c2:	2220      	movs	r2, #32
 800b6c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d119      	bne.n	800b704 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	330c      	adds	r3, #12
 800b6d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	e853 3f00 	ldrex	r3, [r3]
 800b6de:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f023 0310 	bic.w	r3, r3, #16
 800b6e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	330c      	adds	r3, #12
 800b6ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b6f0:	61fa      	str	r2, [r7, #28]
 800b6f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f4:	69b9      	ldr	r1, [r7, #24]
 800b6f6:	69fa      	ldr	r2, [r7, #28]
 800b6f8:	e841 2300 	strex	r3, r2, [r1]
 800b6fc:	617b      	str	r3, [r7, #20]
   return(result);
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1e5      	bne.n	800b6d0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d106      	bne.n	800b71a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b70c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b70e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b710:	4619      	mov	r1, r3
 800b712:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b714:	f7f9 fa24 	bl	8004b60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b718:	e002      	b.n	800b720 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b71a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b71c:	f7ff fef8 	bl	800b510 <HAL_UART_RxCpltCallback>
}
 800b720:	bf00      	nop
 800b722:	3770      	adds	r7, #112	; 0x70
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b734:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d108      	bne.n	800b750 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b742:	085b      	lsrs	r3, r3, #1
 800b744:	b29b      	uxth	r3, r3
 800b746:	4619      	mov	r1, r3
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f7f9 fa09 	bl	8004b60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b74e:	e002      	b.n	800b756 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f7ff fee7 	bl	800b524 <HAL_UART_RxHalfCpltCallback>
}
 800b756:	bf00      	nop
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b084      	sub	sp, #16
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b766:	2300      	movs	r3, #0
 800b768:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	695b      	ldr	r3, [r3, #20]
 800b776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b77a:	2b80      	cmp	r3, #128	; 0x80
 800b77c:	bf0c      	ite	eq
 800b77e:	2301      	moveq	r3, #1
 800b780:	2300      	movne	r3, #0
 800b782:	b2db      	uxtb	r3, r3
 800b784:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	2b21      	cmp	r3, #33	; 0x21
 800b790:	d108      	bne.n	800b7a4 <UART_DMAError+0x46>
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d005      	beq.n	800b7a4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	2200      	movs	r2, #0
 800b79c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b79e:	68b8      	ldr	r0, [r7, #8]
 800b7a0:	f000 f8c6 	bl	800b930 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	695b      	ldr	r3, [r3, #20]
 800b7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ae:	2b40      	cmp	r3, #64	; 0x40
 800b7b0:	bf0c      	ite	eq
 800b7b2:	2301      	moveq	r3, #1
 800b7b4:	2300      	movne	r3, #0
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	2b22      	cmp	r3, #34	; 0x22
 800b7c4:	d108      	bne.n	800b7d8 <UART_DMAError+0x7a>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d005      	beq.n	800b7d8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b7d2:	68b8      	ldr	r0, [r7, #8]
 800b7d4:	f000 f8d4 	bl	800b980 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7dc:	f043 0210 	orr.w	r2, r3, #16
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7e4:	68b8      	ldr	r0, [r7, #8]
 800b7e6:	f7ff fea7 	bl	800b538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7ea:	bf00      	nop
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
	...

0800b7f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b098      	sub	sp, #96	; 0x60
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	4613      	mov	r3, r2
 800b800:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	88fa      	ldrh	r2, [r7, #6]
 800b80c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2200      	movs	r2, #0
 800b812:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2222      	movs	r2, #34	; 0x22
 800b818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b820:	4a40      	ldr	r2, [pc, #256]	; (800b924 <UART_Start_Receive_DMA+0x130>)
 800b822:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b828:	4a3f      	ldr	r2, [pc, #252]	; (800b928 <UART_Start_Receive_DMA+0x134>)
 800b82a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b830:	4a3e      	ldr	r2, [pc, #248]	; (800b92c <UART_Start_Receive_DMA+0x138>)
 800b832:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b838:	2200      	movs	r2, #0
 800b83a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b83c:	f107 0308 	add.w	r3, r7, #8
 800b840:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	3304      	adds	r3, #4
 800b84c:	4619      	mov	r1, r3
 800b84e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	88fb      	ldrh	r3, [r7, #6]
 800b854:	f7fa ffc4 	bl	80067e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b858:	2300      	movs	r3, #0
 800b85a:	613b      	str	r3, [r7, #16]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	613b      	str	r3, [r7, #16]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	613b      	str	r3, [r7, #16]
 800b86c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d019      	beq.n	800b8b2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	330c      	adds	r3, #12
 800b884:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b888:	e853 3f00 	ldrex	r3, [r3]
 800b88c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b88e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b894:	65bb      	str	r3, [r7, #88]	; 0x58
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	330c      	adds	r3, #12
 800b89c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b89e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b8a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b8a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8a6:	e841 2300 	strex	r3, r2, [r1]
 800b8aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b8ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1e5      	bne.n	800b87e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	3314      	adds	r3, #20
 800b8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8bc:	e853 3f00 	ldrex	r3, [r3]
 800b8c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c4:	f043 0301 	orr.w	r3, r3, #1
 800b8c8:	657b      	str	r3, [r7, #84]	; 0x54
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	3314      	adds	r3, #20
 800b8d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b8d2:	63ba      	str	r2, [r7, #56]	; 0x38
 800b8d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8da:	e841 2300 	strex	r3, r2, [r1]
 800b8de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d1e5      	bne.n	800b8b2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	3314      	adds	r3, #20
 800b8ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	e853 3f00 	ldrex	r3, [r3]
 800b8f4:	617b      	str	r3, [r7, #20]
   return(result);
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8fc:	653b      	str	r3, [r7, #80]	; 0x50
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	3314      	adds	r3, #20
 800b904:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b906:	627a      	str	r2, [r7, #36]	; 0x24
 800b908:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90a:	6a39      	ldr	r1, [r7, #32]
 800b90c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b90e:	e841 2300 	strex	r3, r2, [r1]
 800b912:	61fb      	str	r3, [r7, #28]
   return(result);
 800b914:	69fb      	ldr	r3, [r7, #28]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1e5      	bne.n	800b8e6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3760      	adds	r7, #96	; 0x60
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	0800b603 	.word	0x0800b603
 800b928:	0800b729 	.word	0x0800b729
 800b92c:	0800b75f 	.word	0x0800b75f

0800b930 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b930:	b480      	push	{r7}
 800b932:	b089      	sub	sp, #36	; 0x24
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	330c      	adds	r3, #12
 800b93e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	e853 3f00 	ldrex	r3, [r3]
 800b946:	60bb      	str	r3, [r7, #8]
   return(result);
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b94e:	61fb      	str	r3, [r7, #28]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	330c      	adds	r3, #12
 800b956:	69fa      	ldr	r2, [r7, #28]
 800b958:	61ba      	str	r2, [r7, #24]
 800b95a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95c:	6979      	ldr	r1, [r7, #20]
 800b95e:	69ba      	ldr	r2, [r7, #24]
 800b960:	e841 2300 	strex	r3, r2, [r1]
 800b964:	613b      	str	r3, [r7, #16]
   return(result);
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1e5      	bne.n	800b938 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2220      	movs	r2, #32
 800b970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b974:	bf00      	nop
 800b976:	3724      	adds	r7, #36	; 0x24
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b980:	b480      	push	{r7}
 800b982:	b095      	sub	sp, #84	; 0x54
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	330c      	adds	r3, #12
 800b98e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b992:	e853 3f00 	ldrex	r3, [r3]
 800b996:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b99e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	330c      	adds	r3, #12
 800b9a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b9a8:	643a      	str	r2, [r7, #64]	; 0x40
 800b9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b9ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9b0:	e841 2300 	strex	r3, r2, [r1]
 800b9b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1e5      	bne.n	800b988 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	3314      	adds	r3, #20
 800b9c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c4:	6a3b      	ldr	r3, [r7, #32]
 800b9c6:	e853 3f00 	ldrex	r3, [r3]
 800b9ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	f023 0301 	bic.w	r3, r3, #1
 800b9d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	3314      	adds	r3, #20
 800b9da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9e4:	e841 2300 	strex	r3, r2, [r1]
 800b9e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d1e5      	bne.n	800b9bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d119      	bne.n	800ba2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	330c      	adds	r3, #12
 800b9fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	e853 3f00 	ldrex	r3, [r3]
 800ba06:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	f023 0310 	bic.w	r3, r3, #16
 800ba0e:	647b      	str	r3, [r7, #68]	; 0x44
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	330c      	adds	r3, #12
 800ba16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba18:	61ba      	str	r2, [r7, #24]
 800ba1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1c:	6979      	ldr	r1, [r7, #20]
 800ba1e:	69ba      	ldr	r2, [r7, #24]
 800ba20:	e841 2300 	strex	r3, r2, [r1]
 800ba24:	613b      	str	r3, [r7, #16]
   return(result);
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1e5      	bne.n	800b9f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2220      	movs	r2, #32
 800ba30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ba3a:	bf00      	nop
 800ba3c:	3754      	adds	r7, #84	; 0x54
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr

0800ba46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b084      	sub	sp, #16
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2200      	movs	r2, #0
 800ba58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f7ff fd69 	bl	800b538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba66:	bf00      	nop
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b085      	sub	sp, #20
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	2b21      	cmp	r3, #33	; 0x21
 800ba80:	d13e      	bne.n	800bb00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba8a:	d114      	bne.n	800bab6 <UART_Transmit_IT+0x48>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	691b      	ldr	r3, [r3, #16]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d110      	bne.n	800bab6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a1b      	ldr	r3, [r3, #32]
 800ba98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	881b      	ldrh	r3, [r3, #0]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800baa8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a1b      	ldr	r3, [r3, #32]
 800baae:	1c9a      	adds	r2, r3, #2
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	621a      	str	r2, [r3, #32]
 800bab4:	e008      	b.n	800bac8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6a1b      	ldr	r3, [r3, #32]
 800baba:	1c59      	adds	r1, r3, #1
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	6211      	str	r1, [r2, #32]
 800bac0:	781a      	ldrb	r2, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bacc:	b29b      	uxth	r3, r3
 800bace:	3b01      	subs	r3, #1
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	4619      	mov	r1, r3
 800bad6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d10f      	bne.n	800bafc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	68da      	ldr	r2, [r3, #12]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800baea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	68da      	ldr	r2, [r3, #12]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bafa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	e000      	b.n	800bb02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bb00:	2302      	movs	r3, #2
  }
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3714      	adds	r7, #20
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b082      	sub	sp, #8
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	68da      	ldr	r2, [r3, #12]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2220      	movs	r2, #32
 800bb2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f7ff fcda 	bl	800b4e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b08c      	sub	sp, #48	; 0x30
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	2b22      	cmp	r3, #34	; 0x22
 800bb50:	f040 80ab 	bne.w	800bcaa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb5c:	d117      	bne.n	800bb8e <UART_Receive_IT+0x50>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d113      	bne.n	800bb8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bb66:	2300      	movs	r3, #0
 800bb68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb7c:	b29a      	uxth	r2, r3
 800bb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb86:	1c9a      	adds	r2, r3, #2
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	629a      	str	r2, [r3, #40]	; 0x28
 800bb8c:	e026      	b.n	800bbdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bb94:	2300      	movs	r3, #0
 800bb96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bba0:	d007      	beq.n	800bbb2 <UART_Receive_IT+0x74>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	689b      	ldr	r3, [r3, #8]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10a      	bne.n	800bbc0 <UART_Receive_IT+0x82>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	691b      	ldr	r3, [r3, #16]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d106      	bne.n	800bbc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbbc:	701a      	strb	r2, [r3, #0]
 800bbbe:	e008      	b.n	800bbd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbcc:	b2da      	uxtb	r2, r3
 800bbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbd6:	1c5a      	adds	r2, r3, #1
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	3b01      	subs	r3, #1
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	4619      	mov	r1, r3
 800bbea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d15a      	bne.n	800bca6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	68da      	ldr	r2, [r3, #12]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f022 0220 	bic.w	r2, r2, #32
 800bbfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68da      	ldr	r2, [r3, #12]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	695a      	ldr	r2, [r3, #20]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f022 0201 	bic.w	r2, r2, #1
 800bc1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2220      	movs	r2, #32
 800bc24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d135      	bne.n	800bc9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	330c      	adds	r3, #12
 800bc3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	e853 3f00 	ldrex	r3, [r3]
 800bc44:	613b      	str	r3, [r7, #16]
   return(result);
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	f023 0310 	bic.w	r3, r3, #16
 800bc4c:	627b      	str	r3, [r7, #36]	; 0x24
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	330c      	adds	r3, #12
 800bc54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc56:	623a      	str	r2, [r7, #32]
 800bc58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5a:	69f9      	ldr	r1, [r7, #28]
 800bc5c:	6a3a      	ldr	r2, [r7, #32]
 800bc5e:	e841 2300 	strex	r3, r2, [r1]
 800bc62:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d1e5      	bne.n	800bc36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 0310 	and.w	r3, r3, #16
 800bc74:	2b10      	cmp	r3, #16
 800bc76:	d10a      	bne.n	800bc8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc78:	2300      	movs	r3, #0
 800bc7a:	60fb      	str	r3, [r7, #12]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	60fb      	str	r3, [r7, #12]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	60fb      	str	r3, [r7, #12]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc92:	4619      	mov	r1, r3
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7f8 ff63 	bl	8004b60 <HAL_UARTEx_RxEventCallback>
 800bc9a:	e002      	b.n	800bca2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f7ff fc37 	bl	800b510 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bca2:	2300      	movs	r3, #0
 800bca4:	e002      	b.n	800bcac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bca6:	2300      	movs	r3, #0
 800bca8:	e000      	b.n	800bcac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bcaa:	2302      	movs	r3, #2
  }
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3730      	adds	r7, #48	; 0x30
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bcb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bcb8:	b0c0      	sub	sp, #256	; 0x100
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bcc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	691b      	ldr	r3, [r3, #16]
 800bcc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcd0:	68d9      	ldr	r1, [r3, #12]
 800bcd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	ea40 0301 	orr.w	r3, r0, r1
 800bcdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bcde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bce2:	689a      	ldr	r2, [r3, #8]
 800bce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bce8:	691b      	ldr	r3, [r3, #16]
 800bcea:	431a      	orrs	r2, r3
 800bcec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	431a      	orrs	r2, r3
 800bcf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcf8:	69db      	ldr	r3, [r3, #28]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bd00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bd0c:	f021 010c 	bic.w	r1, r1, #12
 800bd10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bd1a:	430b      	orrs	r3, r1
 800bd1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bd1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	695b      	ldr	r3, [r3, #20]
 800bd26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bd2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd2e:	6999      	ldr	r1, [r3, #24]
 800bd30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	ea40 0301 	orr.w	r3, r0, r1
 800bd3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bd3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	4b8f      	ldr	r3, [pc, #572]	; (800bf80 <UART_SetConfig+0x2cc>)
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d005      	beq.n	800bd54 <UART_SetConfig+0xa0>
 800bd48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	4b8d      	ldr	r3, [pc, #564]	; (800bf84 <UART_SetConfig+0x2d0>)
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d104      	bne.n	800bd5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bd54:	f7fd fe86 	bl	8009a64 <HAL_RCC_GetPCLK2Freq>
 800bd58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bd5c:	e003      	b.n	800bd66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bd5e:	f7fd fe6d 	bl	8009a3c <HAL_RCC_GetPCLK1Freq>
 800bd62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd6a:	69db      	ldr	r3, [r3, #28]
 800bd6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd70:	f040 810c 	bne.w	800bf8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bd74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bd82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bd86:	4622      	mov	r2, r4
 800bd88:	462b      	mov	r3, r5
 800bd8a:	1891      	adds	r1, r2, r2
 800bd8c:	65b9      	str	r1, [r7, #88]	; 0x58
 800bd8e:	415b      	adcs	r3, r3
 800bd90:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bd96:	4621      	mov	r1, r4
 800bd98:	eb12 0801 	adds.w	r8, r2, r1
 800bd9c:	4629      	mov	r1, r5
 800bd9e:	eb43 0901 	adc.w	r9, r3, r1
 800bda2:	f04f 0200 	mov.w	r2, #0
 800bda6:	f04f 0300 	mov.w	r3, #0
 800bdaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bdae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bdb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bdb6:	4690      	mov	r8, r2
 800bdb8:	4699      	mov	r9, r3
 800bdba:	4623      	mov	r3, r4
 800bdbc:	eb18 0303 	adds.w	r3, r8, r3
 800bdc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bdc4:	462b      	mov	r3, r5
 800bdc6:	eb49 0303 	adc.w	r3, r9, r3
 800bdca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bdce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bdda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bdde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bde2:	460b      	mov	r3, r1
 800bde4:	18db      	adds	r3, r3, r3
 800bde6:	653b      	str	r3, [r7, #80]	; 0x50
 800bde8:	4613      	mov	r3, r2
 800bdea:	eb42 0303 	adc.w	r3, r2, r3
 800bdee:	657b      	str	r3, [r7, #84]	; 0x54
 800bdf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bdf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bdf8:	f7f4 fe2c 	bl	8000a54 <__aeabi_uldivmod>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4b61      	ldr	r3, [pc, #388]	; (800bf88 <UART_SetConfig+0x2d4>)
 800be02:	fba3 2302 	umull	r2, r3, r3, r2
 800be06:	095b      	lsrs	r3, r3, #5
 800be08:	011c      	lsls	r4, r3, #4
 800be0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be0e:	2200      	movs	r2, #0
 800be10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800be18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800be1c:	4642      	mov	r2, r8
 800be1e:	464b      	mov	r3, r9
 800be20:	1891      	adds	r1, r2, r2
 800be22:	64b9      	str	r1, [r7, #72]	; 0x48
 800be24:	415b      	adcs	r3, r3
 800be26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800be2c:	4641      	mov	r1, r8
 800be2e:	eb12 0a01 	adds.w	sl, r2, r1
 800be32:	4649      	mov	r1, r9
 800be34:	eb43 0b01 	adc.w	fp, r3, r1
 800be38:	f04f 0200 	mov.w	r2, #0
 800be3c:	f04f 0300 	mov.w	r3, #0
 800be40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800be44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800be48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be4c:	4692      	mov	sl, r2
 800be4e:	469b      	mov	fp, r3
 800be50:	4643      	mov	r3, r8
 800be52:	eb1a 0303 	adds.w	r3, sl, r3
 800be56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be5a:	464b      	mov	r3, r9
 800be5c:	eb4b 0303 	adc.w	r3, fp, r3
 800be60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800be64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800be74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800be78:	460b      	mov	r3, r1
 800be7a:	18db      	adds	r3, r3, r3
 800be7c:	643b      	str	r3, [r7, #64]	; 0x40
 800be7e:	4613      	mov	r3, r2
 800be80:	eb42 0303 	adc.w	r3, r2, r3
 800be84:	647b      	str	r3, [r7, #68]	; 0x44
 800be86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800be8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800be8e:	f7f4 fde1 	bl	8000a54 <__aeabi_uldivmod>
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	4611      	mov	r1, r2
 800be98:	4b3b      	ldr	r3, [pc, #236]	; (800bf88 <UART_SetConfig+0x2d4>)
 800be9a:	fba3 2301 	umull	r2, r3, r3, r1
 800be9e:	095b      	lsrs	r3, r3, #5
 800bea0:	2264      	movs	r2, #100	; 0x64
 800bea2:	fb02 f303 	mul.w	r3, r2, r3
 800bea6:	1acb      	subs	r3, r1, r3
 800bea8:	00db      	lsls	r3, r3, #3
 800beaa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800beae:	4b36      	ldr	r3, [pc, #216]	; (800bf88 <UART_SetConfig+0x2d4>)
 800beb0:	fba3 2302 	umull	r2, r3, r3, r2
 800beb4:	095b      	lsrs	r3, r3, #5
 800beb6:	005b      	lsls	r3, r3, #1
 800beb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bebc:	441c      	add	r4, r3
 800bebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bec2:	2200      	movs	r2, #0
 800bec4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bec8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800becc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bed0:	4642      	mov	r2, r8
 800bed2:	464b      	mov	r3, r9
 800bed4:	1891      	adds	r1, r2, r2
 800bed6:	63b9      	str	r1, [r7, #56]	; 0x38
 800bed8:	415b      	adcs	r3, r3
 800beda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bedc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bee0:	4641      	mov	r1, r8
 800bee2:	1851      	adds	r1, r2, r1
 800bee4:	6339      	str	r1, [r7, #48]	; 0x30
 800bee6:	4649      	mov	r1, r9
 800bee8:	414b      	adcs	r3, r1
 800beea:	637b      	str	r3, [r7, #52]	; 0x34
 800beec:	f04f 0200 	mov.w	r2, #0
 800bef0:	f04f 0300 	mov.w	r3, #0
 800bef4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bef8:	4659      	mov	r1, fp
 800befa:	00cb      	lsls	r3, r1, #3
 800befc:	4651      	mov	r1, sl
 800befe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf02:	4651      	mov	r1, sl
 800bf04:	00ca      	lsls	r2, r1, #3
 800bf06:	4610      	mov	r0, r2
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	4642      	mov	r2, r8
 800bf0e:	189b      	adds	r3, r3, r2
 800bf10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf14:	464b      	mov	r3, r9
 800bf16:	460a      	mov	r2, r1
 800bf18:	eb42 0303 	adc.w	r3, r2, r3
 800bf1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bf2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bf30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bf34:	460b      	mov	r3, r1
 800bf36:	18db      	adds	r3, r3, r3
 800bf38:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	eb42 0303 	adc.w	r3, r2, r3
 800bf40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bf46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bf4a:	f7f4 fd83 	bl	8000a54 <__aeabi_uldivmod>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	460b      	mov	r3, r1
 800bf52:	4b0d      	ldr	r3, [pc, #52]	; (800bf88 <UART_SetConfig+0x2d4>)
 800bf54:	fba3 1302 	umull	r1, r3, r3, r2
 800bf58:	095b      	lsrs	r3, r3, #5
 800bf5a:	2164      	movs	r1, #100	; 0x64
 800bf5c:	fb01 f303 	mul.w	r3, r1, r3
 800bf60:	1ad3      	subs	r3, r2, r3
 800bf62:	00db      	lsls	r3, r3, #3
 800bf64:	3332      	adds	r3, #50	; 0x32
 800bf66:	4a08      	ldr	r2, [pc, #32]	; (800bf88 <UART_SetConfig+0x2d4>)
 800bf68:	fba2 2303 	umull	r2, r3, r2, r3
 800bf6c:	095b      	lsrs	r3, r3, #5
 800bf6e:	f003 0207 	and.w	r2, r3, #7
 800bf72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4422      	add	r2, r4
 800bf7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bf7c:	e105      	b.n	800c18a <UART_SetConfig+0x4d6>
 800bf7e:	bf00      	nop
 800bf80:	40011000 	.word	0x40011000
 800bf84:	40011400 	.word	0x40011400
 800bf88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf90:	2200      	movs	r2, #0
 800bf92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bf96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bf9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bf9e:	4642      	mov	r2, r8
 800bfa0:	464b      	mov	r3, r9
 800bfa2:	1891      	adds	r1, r2, r2
 800bfa4:	6239      	str	r1, [r7, #32]
 800bfa6:	415b      	adcs	r3, r3
 800bfa8:	627b      	str	r3, [r7, #36]	; 0x24
 800bfaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bfae:	4641      	mov	r1, r8
 800bfb0:	1854      	adds	r4, r2, r1
 800bfb2:	4649      	mov	r1, r9
 800bfb4:	eb43 0501 	adc.w	r5, r3, r1
 800bfb8:	f04f 0200 	mov.w	r2, #0
 800bfbc:	f04f 0300 	mov.w	r3, #0
 800bfc0:	00eb      	lsls	r3, r5, #3
 800bfc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bfc6:	00e2      	lsls	r2, r4, #3
 800bfc8:	4614      	mov	r4, r2
 800bfca:	461d      	mov	r5, r3
 800bfcc:	4643      	mov	r3, r8
 800bfce:	18e3      	adds	r3, r4, r3
 800bfd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bfd4:	464b      	mov	r3, r9
 800bfd6:	eb45 0303 	adc.w	r3, r5, r3
 800bfda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bfde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bfea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bfee:	f04f 0200 	mov.w	r2, #0
 800bff2:	f04f 0300 	mov.w	r3, #0
 800bff6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bffa:	4629      	mov	r1, r5
 800bffc:	008b      	lsls	r3, r1, #2
 800bffe:	4621      	mov	r1, r4
 800c000:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c004:	4621      	mov	r1, r4
 800c006:	008a      	lsls	r2, r1, #2
 800c008:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c00c:	f7f4 fd22 	bl	8000a54 <__aeabi_uldivmod>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	4b60      	ldr	r3, [pc, #384]	; (800c198 <UART_SetConfig+0x4e4>)
 800c016:	fba3 2302 	umull	r2, r3, r3, r2
 800c01a:	095b      	lsrs	r3, r3, #5
 800c01c:	011c      	lsls	r4, r3, #4
 800c01e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c022:	2200      	movs	r2, #0
 800c024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c028:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c02c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c030:	4642      	mov	r2, r8
 800c032:	464b      	mov	r3, r9
 800c034:	1891      	adds	r1, r2, r2
 800c036:	61b9      	str	r1, [r7, #24]
 800c038:	415b      	adcs	r3, r3
 800c03a:	61fb      	str	r3, [r7, #28]
 800c03c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c040:	4641      	mov	r1, r8
 800c042:	1851      	adds	r1, r2, r1
 800c044:	6139      	str	r1, [r7, #16]
 800c046:	4649      	mov	r1, r9
 800c048:	414b      	adcs	r3, r1
 800c04a:	617b      	str	r3, [r7, #20]
 800c04c:	f04f 0200 	mov.w	r2, #0
 800c050:	f04f 0300 	mov.w	r3, #0
 800c054:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c058:	4659      	mov	r1, fp
 800c05a:	00cb      	lsls	r3, r1, #3
 800c05c:	4651      	mov	r1, sl
 800c05e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c062:	4651      	mov	r1, sl
 800c064:	00ca      	lsls	r2, r1, #3
 800c066:	4610      	mov	r0, r2
 800c068:	4619      	mov	r1, r3
 800c06a:	4603      	mov	r3, r0
 800c06c:	4642      	mov	r2, r8
 800c06e:	189b      	adds	r3, r3, r2
 800c070:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c074:	464b      	mov	r3, r9
 800c076:	460a      	mov	r2, r1
 800c078:	eb42 0303 	adc.w	r3, r2, r3
 800c07c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	67bb      	str	r3, [r7, #120]	; 0x78
 800c08a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c08c:	f04f 0200 	mov.w	r2, #0
 800c090:	f04f 0300 	mov.w	r3, #0
 800c094:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c098:	4649      	mov	r1, r9
 800c09a:	008b      	lsls	r3, r1, #2
 800c09c:	4641      	mov	r1, r8
 800c09e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c0a2:	4641      	mov	r1, r8
 800c0a4:	008a      	lsls	r2, r1, #2
 800c0a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c0aa:	f7f4 fcd3 	bl	8000a54 <__aeabi_uldivmod>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	4b39      	ldr	r3, [pc, #228]	; (800c198 <UART_SetConfig+0x4e4>)
 800c0b4:	fba3 1302 	umull	r1, r3, r3, r2
 800c0b8:	095b      	lsrs	r3, r3, #5
 800c0ba:	2164      	movs	r1, #100	; 0x64
 800c0bc:	fb01 f303 	mul.w	r3, r1, r3
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	011b      	lsls	r3, r3, #4
 800c0c4:	3332      	adds	r3, #50	; 0x32
 800c0c6:	4a34      	ldr	r2, [pc, #208]	; (800c198 <UART_SetConfig+0x4e4>)
 800c0c8:	fba2 2303 	umull	r2, r3, r2, r3
 800c0cc:	095b      	lsrs	r3, r3, #5
 800c0ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0d2:	441c      	add	r4, r3
 800c0d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0d8:	2200      	movs	r2, #0
 800c0da:	673b      	str	r3, [r7, #112]	; 0x70
 800c0dc:	677a      	str	r2, [r7, #116]	; 0x74
 800c0de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c0e2:	4642      	mov	r2, r8
 800c0e4:	464b      	mov	r3, r9
 800c0e6:	1891      	adds	r1, r2, r2
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	415b      	adcs	r3, r3
 800c0ec:	60fb      	str	r3, [r7, #12]
 800c0ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c0f2:	4641      	mov	r1, r8
 800c0f4:	1851      	adds	r1, r2, r1
 800c0f6:	6039      	str	r1, [r7, #0]
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	414b      	adcs	r3, r1
 800c0fc:	607b      	str	r3, [r7, #4]
 800c0fe:	f04f 0200 	mov.w	r2, #0
 800c102:	f04f 0300 	mov.w	r3, #0
 800c106:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c10a:	4659      	mov	r1, fp
 800c10c:	00cb      	lsls	r3, r1, #3
 800c10e:	4651      	mov	r1, sl
 800c110:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c114:	4651      	mov	r1, sl
 800c116:	00ca      	lsls	r2, r1, #3
 800c118:	4610      	mov	r0, r2
 800c11a:	4619      	mov	r1, r3
 800c11c:	4603      	mov	r3, r0
 800c11e:	4642      	mov	r2, r8
 800c120:	189b      	adds	r3, r3, r2
 800c122:	66bb      	str	r3, [r7, #104]	; 0x68
 800c124:	464b      	mov	r3, r9
 800c126:	460a      	mov	r2, r1
 800c128:	eb42 0303 	adc.w	r3, r2, r3
 800c12c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	663b      	str	r3, [r7, #96]	; 0x60
 800c138:	667a      	str	r2, [r7, #100]	; 0x64
 800c13a:	f04f 0200 	mov.w	r2, #0
 800c13e:	f04f 0300 	mov.w	r3, #0
 800c142:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c146:	4649      	mov	r1, r9
 800c148:	008b      	lsls	r3, r1, #2
 800c14a:	4641      	mov	r1, r8
 800c14c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c150:	4641      	mov	r1, r8
 800c152:	008a      	lsls	r2, r1, #2
 800c154:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c158:	f7f4 fc7c 	bl	8000a54 <__aeabi_uldivmod>
 800c15c:	4602      	mov	r2, r0
 800c15e:	460b      	mov	r3, r1
 800c160:	4b0d      	ldr	r3, [pc, #52]	; (800c198 <UART_SetConfig+0x4e4>)
 800c162:	fba3 1302 	umull	r1, r3, r3, r2
 800c166:	095b      	lsrs	r3, r3, #5
 800c168:	2164      	movs	r1, #100	; 0x64
 800c16a:	fb01 f303 	mul.w	r3, r1, r3
 800c16e:	1ad3      	subs	r3, r2, r3
 800c170:	011b      	lsls	r3, r3, #4
 800c172:	3332      	adds	r3, #50	; 0x32
 800c174:	4a08      	ldr	r2, [pc, #32]	; (800c198 <UART_SetConfig+0x4e4>)
 800c176:	fba2 2303 	umull	r2, r3, r2, r3
 800c17a:	095b      	lsrs	r3, r3, #5
 800c17c:	f003 020f 	and.w	r2, r3, #15
 800c180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4422      	add	r2, r4
 800c188:	609a      	str	r2, [r3, #8]
}
 800c18a:	bf00      	nop
 800c18c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c190:	46bd      	mov	sp, r7
 800c192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c196:	bf00      	nop
 800c198:	51eb851f 	.word	0x51eb851f

0800c19c <arm_mat_trans_f32>:
 800c19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a0:	8802      	ldrh	r2, [r0, #0]
 800c1a2:	884b      	ldrh	r3, [r1, #2]
 800c1a4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c1a8:	684f      	ldr	r7, [r1, #4]
 800c1aa:	8840      	ldrh	r0, [r0, #2]
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	d14c      	bne.n	800c24c <arm_mat_trans_f32+0xb0>
 800c1b2:	f8b1 e000 	ldrh.w	lr, [r1]
 800c1b6:	4586      	cmp	lr, r0
 800c1b8:	d148      	bne.n	800c24c <arm_mat_trans_f32+0xb0>
 800c1ba:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800c1be:	009c      	lsls	r4, r3, #2
 800c1c0:	f00e 0e03 	and.w	lr, lr, #3
 800c1c4:	fb08 f904 	mul.w	r9, r8, r4
 800c1c8:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800c1cc:	011d      	lsls	r5, r3, #4
 800c1ce:	00db      	lsls	r3, r3, #3
 800c1d0:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800c1d4:	eb07 0a04 	add.w	sl, r7, r4
 800c1d8:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800c1dc:	9201      	str	r2, [sp, #4]
 800c1de:	9300      	str	r3, [sp, #0]
 800c1e0:	463b      	mov	r3, r7
 800c1e2:	f1b8 0f00 	cmp.w	r8, #0
 800c1e6:	d01d      	beq.n	800c224 <arm_mat_trans_f32+0x88>
 800c1e8:	9900      	ldr	r1, [sp, #0]
 800c1ea:	f10c 0210 	add.w	r2, ip, #16
 800c1ee:	4439      	add	r1, r7
 800c1f0:	4640      	mov	r0, r8
 800c1f2:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800c1f6:	601e      	str	r6, [r3, #0]
 800c1f8:	ed52 7a03 	vldr	s15, [r2, #-12]
 800c1fc:	191e      	adds	r6, r3, r4
 800c1fe:	edc6 7a00 	vstr	s15, [r6]
 800c202:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800c206:	600e      	str	r6, [r1, #0]
 800c208:	ed52 7a01 	vldr	s15, [r2, #-4]
 800c20c:	190e      	adds	r6, r1, r4
 800c20e:	3801      	subs	r0, #1
 800c210:	442b      	add	r3, r5
 800c212:	f102 0210 	add.w	r2, r2, #16
 800c216:	edc6 7a00 	vstr	s15, [r6]
 800c21a:	4429      	add	r1, r5
 800c21c:	d1e9      	bne.n	800c1f2 <arm_mat_trans_f32+0x56>
 800c21e:	44dc      	add	ip, fp
 800c220:	eb09 0307 	add.w	r3, r9, r7
 800c224:	f1be 0f00 	cmp.w	lr, #0
 800c228:	d009      	beq.n	800c23e <arm_mat_trans_f32+0xa2>
 800c22a:	4672      	mov	r2, lr
 800c22c:	4661      	mov	r1, ip
 800c22e:	f851 0b04 	ldr.w	r0, [r1], #4
 800c232:	6018      	str	r0, [r3, #0]
 800c234:	3a01      	subs	r2, #1
 800c236:	4423      	add	r3, r4
 800c238:	d1f9      	bne.n	800c22e <arm_mat_trans_f32+0x92>
 800c23a:	9b01      	ldr	r3, [sp, #4]
 800c23c:	449c      	add	ip, r3
 800c23e:	3704      	adds	r7, #4
 800c240:	4557      	cmp	r7, sl
 800c242:	d1cd      	bne.n	800c1e0 <arm_mat_trans_f32+0x44>
 800c244:	2000      	movs	r0, #0
 800c246:	b003      	add	sp, #12
 800c248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c24c:	f06f 0002 	mvn.w	r0, #2
 800c250:	e7f9      	b.n	800c246 <arm_mat_trans_f32+0xaa>
 800c252:	bf00      	nop

0800c254 <arm_mat_sub_f32>:
 800c254:	b4f0      	push	{r4, r5, r6, r7}
 800c256:	e9d1 4700 	ldrd	r4, r7, [r1]
 800c25a:	6803      	ldr	r3, [r0, #0]
 800c25c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c260:	6856      	ldr	r6, [r2, #4]
 800c262:	42a3      	cmp	r3, r4
 800c264:	d15d      	bne.n	800c322 <arm_mat_sub_f32+0xce>
 800c266:	6812      	ldr	r2, [r2, #0]
 800c268:	4293      	cmp	r3, r2
 800c26a:	d15a      	bne.n	800c322 <arm_mat_sub_f32+0xce>
 800c26c:	8803      	ldrh	r3, [r0, #0]
 800c26e:	8844      	ldrh	r4, [r0, #2]
 800c270:	fb04 f403 	mul.w	r4, r4, r3
 800c274:	08a5      	lsrs	r5, r4, #2
 800c276:	d032      	beq.n	800c2de <arm_mat_sub_f32+0x8a>
 800c278:	f10c 0110 	add.w	r1, ip, #16
 800c27c:	f107 0210 	add.w	r2, r7, #16
 800c280:	f106 0310 	add.w	r3, r6, #16
 800c284:	4628      	mov	r0, r5
 800c286:	ed12 7a04 	vldr	s14, [r2, #-16]
 800c28a:	ed51 7a04 	vldr	s15, [r1, #-16]
 800c28e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c292:	3801      	subs	r0, #1
 800c294:	ed43 7a04 	vstr	s15, [r3, #-16]
 800c298:	ed12 7a03 	vldr	s14, [r2, #-12]
 800c29c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c2a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2a4:	f101 0110 	add.w	r1, r1, #16
 800c2a8:	ed43 7a03 	vstr	s15, [r3, #-12]
 800c2ac:	ed12 7a02 	vldr	s14, [r2, #-8]
 800c2b0:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800c2b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2b8:	f102 0210 	add.w	r2, r2, #16
 800c2bc:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c2c0:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800c2c4:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800c2c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2cc:	f103 0310 	add.w	r3, r3, #16
 800c2d0:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800c2d4:	d1d7      	bne.n	800c286 <arm_mat_sub_f32+0x32>
 800c2d6:	012b      	lsls	r3, r5, #4
 800c2d8:	449c      	add	ip, r3
 800c2da:	441f      	add	r7, r3
 800c2dc:	441e      	add	r6, r3
 800c2de:	f014 0403 	ands.w	r4, r4, #3
 800c2e2:	d01b      	beq.n	800c31c <arm_mat_sub_f32+0xc8>
 800c2e4:	eddc 7a00 	vldr	s15, [ip]
 800c2e8:	ed97 7a00 	vldr	s14, [r7]
 800c2ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2f0:	3c01      	subs	r4, #1
 800c2f2:	edc6 7a00 	vstr	s15, [r6]
 800c2f6:	d011      	beq.n	800c31c <arm_mat_sub_f32+0xc8>
 800c2f8:	eddc 7a01 	vldr	s15, [ip, #4]
 800c2fc:	ed97 7a01 	vldr	s14, [r7, #4]
 800c300:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c304:	2c01      	cmp	r4, #1
 800c306:	edc6 7a01 	vstr	s15, [r6, #4]
 800c30a:	d007      	beq.n	800c31c <arm_mat_sub_f32+0xc8>
 800c30c:	eddc 7a02 	vldr	s15, [ip, #8]
 800c310:	ed97 7a02 	vldr	s14, [r7, #8]
 800c314:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c318:	edc6 7a02 	vstr	s15, [r6, #8]
 800c31c:	2000      	movs	r0, #0
 800c31e:	bcf0      	pop	{r4, r5, r6, r7}
 800c320:	4770      	bx	lr
 800c322:	f06f 0002 	mvn.w	r0, #2
 800c326:	e7fa      	b.n	800c31e <arm_mat_sub_f32+0xca>

0800c328 <arm_mat_mult_f32>:
 800c328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c32c:	8845      	ldrh	r5, [r0, #2]
 800c32e:	880b      	ldrh	r3, [r1, #0]
 800c330:	8806      	ldrh	r6, [r0, #0]
 800c332:	6847      	ldr	r7, [r0, #4]
 800c334:	6854      	ldr	r4, [r2, #4]
 800c336:	6848      	ldr	r0, [r1, #4]
 800c338:	b08b      	sub	sp, #44	; 0x2c
 800c33a:	42ab      	cmp	r3, r5
 800c33c:	9109      	str	r1, [sp, #36]	; 0x24
 800c33e:	9604      	str	r6, [sp, #16]
 800c340:	8849      	ldrh	r1, [r1, #2]
 800c342:	f040 808a 	bne.w	800c45a <arm_mat_mult_f32+0x132>
 800c346:	8815      	ldrh	r5, [r2, #0]
 800c348:	42b5      	cmp	r5, r6
 800c34a:	f040 8086 	bne.w	800c45a <arm_mat_mult_f32+0x132>
 800c34e:	8852      	ldrh	r2, [r2, #2]
 800c350:	428a      	cmp	r2, r1
 800c352:	f040 8082 	bne.w	800c45a <arm_mat_mult_f32+0x132>
 800c356:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800c35a:	1d01      	adds	r1, r0, #4
 800c35c:	0116      	lsls	r6, r2, #4
 800c35e:	9108      	str	r1, [sp, #32]
 800c360:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800c364:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800c368:	9101      	str	r1, [sp, #4]
 800c36a:	fb06 f108 	mul.w	r1, r6, r8
 800c36e:	0095      	lsls	r5, r2, #2
 800c370:	9103      	str	r1, [sp, #12]
 800c372:	00d2      	lsls	r2, r2, #3
 800c374:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800c378:	f003 0903 	and.w	r9, r3, #3
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	f107 0b10 	add.w	fp, r7, #16
 800c382:	eb04 0a05 	add.w	sl, r4, r5
 800c386:	9107      	str	r1, [sp, #28]
 800c388:	9202      	str	r2, [sp, #8]
 800c38a:	9306      	str	r3, [sp, #24]
 800c38c:	f1ab 0310 	sub.w	r3, fp, #16
 800c390:	9305      	str	r3, [sp, #20]
 800c392:	9b07      	ldr	r3, [sp, #28]
 800c394:	f8dd e020 	ldr.w	lr, [sp, #32]
 800c398:	eb03 0c0a 	add.w	ip, r3, sl
 800c39c:	eddf 7a31 	vldr	s15, [pc, #196]	; 800c464 <arm_mat_mult_f32+0x13c>
 800c3a0:	f1b8 0f00 	cmp.w	r8, #0
 800c3a4:	d053      	beq.n	800c44e <arm_mat_mult_f32+0x126>
 800c3a6:	9b02      	ldr	r3, [sp, #8]
 800c3a8:	4644      	mov	r4, r8
 800c3aa:	18c1      	adds	r1, r0, r3
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	465b      	mov	r3, fp
 800c3b0:	ed92 6a00 	vldr	s12, [r2]
 800c3b4:	ed13 7a04 	vldr	s14, [r3, #-16]
 800c3b8:	ed53 4a03 	vldr	s9, [r3, #-12]
 800c3bc:	ed53 6a02 	vldr	s13, [r3, #-8]
 800c3c0:	ed91 5a00 	vldr	s10, [r1]
 800c3c4:	ed53 5a01 	vldr	s11, [r3, #-4]
 800c3c8:	1957      	adds	r7, r2, r5
 800c3ca:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c3ce:	ed97 6a00 	vldr	s12, [r7]
 800c3d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3d6:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c3da:	194f      	adds	r7, r1, r5
 800c3dc:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c3e0:	ee26 7a85 	vmul.f32	s14, s13, s10
 800c3e4:	edd7 7a00 	vldr	s15, [r7]
 800c3e8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c3ec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c3f0:	3c01      	subs	r4, #1
 800c3f2:	4432      	add	r2, r6
 800c3f4:	4431      	add	r1, r6
 800c3f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c3fa:	f103 0310 	add.w	r3, r3, #16
 800c3fe:	d1d7      	bne.n	800c3b0 <arm_mat_mult_f32+0x88>
 800c400:	9b03      	ldr	r3, [sp, #12]
 800c402:	9a01      	ldr	r2, [sp, #4]
 800c404:	4418      	add	r0, r3
 800c406:	f1b9 0f00 	cmp.w	r9, #0
 800c40a:	d00b      	beq.n	800c424 <arm_mat_mult_f32+0xfc>
 800c40c:	464b      	mov	r3, r9
 800c40e:	edd0 6a00 	vldr	s13, [r0]
 800c412:	ecb2 7a01 	vldmia	r2!, {s14}
 800c416:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c41a:	3b01      	subs	r3, #1
 800c41c:	4428      	add	r0, r5
 800c41e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c422:	d1f4      	bne.n	800c40e <arm_mat_mult_f32+0xe6>
 800c424:	ecec 7a01 	vstmia	ip!, {s15}
 800c428:	45d4      	cmp	ip, sl
 800c42a:	4670      	mov	r0, lr
 800c42c:	f10e 0e04 	add.w	lr, lr, #4
 800c430:	d1b4      	bne.n	800c39c <arm_mat_mult_f32+0x74>
 800c432:	9a01      	ldr	r2, [sp, #4]
 800c434:	9b06      	ldr	r3, [sp, #24]
 800c436:	4611      	mov	r1, r2
 800c438:	4419      	add	r1, r3
 800c43a:	449b      	add	fp, r3
 800c43c:	9b04      	ldr	r3, [sp, #16]
 800c43e:	9101      	str	r1, [sp, #4]
 800c440:	3b01      	subs	r3, #1
 800c442:	44aa      	add	sl, r5
 800c444:	9304      	str	r3, [sp, #16]
 800c446:	d004      	beq.n	800c452 <arm_mat_mult_f32+0x12a>
 800c448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c44a:	6858      	ldr	r0, [r3, #4]
 800c44c:	e79e      	b.n	800c38c <arm_mat_mult_f32+0x64>
 800c44e:	9a05      	ldr	r2, [sp, #20]
 800c450:	e7d9      	b.n	800c406 <arm_mat_mult_f32+0xde>
 800c452:	4618      	mov	r0, r3
 800c454:	b00b      	add	sp, #44	; 0x2c
 800c456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c45a:	f06f 0002 	mvn.w	r0, #2
 800c45e:	b00b      	add	sp, #44	; 0x2c
 800c460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c464:	00000000 	.word	0x00000000

0800c468 <arm_mat_inverse_f32>:
 800c468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46c:	8843      	ldrh	r3, [r0, #2]
 800c46e:	8804      	ldrh	r4, [r0, #0]
 800c470:	684e      	ldr	r6, [r1, #4]
 800c472:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800c476:	b087      	sub	sp, #28
 800c478:	429c      	cmp	r4, r3
 800c47a:	9301      	str	r3, [sp, #4]
 800c47c:	9603      	str	r6, [sp, #12]
 800c47e:	f040 80ea 	bne.w	800c656 <arm_mat_inverse_f32+0x1ee>
 800c482:	880a      	ldrh	r2, [r1, #0]
 800c484:	884b      	ldrh	r3, [r1, #2]
 800c486:	4293      	cmp	r3, r2
 800c488:	f040 80e5 	bne.w	800c656 <arm_mat_inverse_f32+0x1ee>
 800c48c:	429c      	cmp	r4, r3
 800c48e:	f040 80e2 	bne.w	800c656 <arm_mat_inverse_f32+0x1ee>
 800c492:	9005      	str	r0, [sp, #20]
 800c494:	b30c      	cbz	r4, 800c4da <arm_mat_inverse_f32+0x72>
 800c496:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800c49a:	1e67      	subs	r7, r4, #1
 800c49c:	f846 bb04 	str.w	fp, [r6], #4
 800c4a0:	d01b      	beq.n	800c4da <arm_mat_inverse_f32+0x72>
 800c4a2:	f04f 0801 	mov.w	r8, #1
 800c4a6:	00ba      	lsls	r2, r7, #2
 800c4a8:	eb06 0a02 	add.w	sl, r6, r2
 800c4ac:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	f000 f97e 	bl	800c7b4 <memset>
 800c4b8:	eb0a 0605 	add.w	r6, sl, r5
 800c4bc:	462a      	mov	r2, r5
 800c4be:	2100      	movs	r1, #0
 800c4c0:	4650      	mov	r0, sl
 800c4c2:	f1b8 0f00 	cmp.w	r8, #0
 800c4c6:	f000 80cb 	beq.w	800c660 <arm_mat_inverse_f32+0x1f8>
 800c4ca:	f000 f973 	bl	800c7b4 <memset>
 800c4ce:	3f01      	subs	r7, #1
 800c4d0:	f108 0801 	add.w	r8, r8, #1
 800c4d4:	f846 bb04 	str.w	fp, [r6], #4
 800c4d8:	d1e5      	bne.n	800c4a6 <arm_mat_inverse_f32+0x3e>
 800c4da:	9b01      	ldr	r3, [sp, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f000 80b5 	beq.w	800c64c <arm_mat_inverse_f32+0x1e4>
 800c4e2:	009d      	lsls	r5, r3, #2
 800c4e4:	eb09 0205 	add.w	r2, r9, r5
 800c4e8:	46cc      	mov	ip, r9
 800c4ea:	9202      	str	r2, [sp, #8]
 800c4ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c4f0:	1d2a      	adds	r2, r5, #4
 800c4f2:	9204      	str	r2, [sp, #16]
 800c4f4:	462f      	mov	r7, r5
 800c4f6:	469e      	mov	lr, r3
 800c4f8:	2600      	movs	r6, #0
 800c4fa:	9b02      	ldr	r3, [sp, #8]
 800c4fc:	eddc 6a00 	vldr	s13, [ip]
 800c500:	42b4      	cmp	r4, r6
 800c502:	eba3 0b07 	sub.w	fp, r3, r7
 800c506:	f000 80a1 	beq.w	800c64c <arm_mat_inverse_f32+0x1e4>
 800c50a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800c670 <arm_mat_inverse_f32+0x208>
 800c50e:	4632      	mov	r2, r6
 800c510:	4663      	mov	r3, ip
 800c512:	e00b      	b.n	800c52c <arm_mat_inverse_f32+0xc4>
 800c514:	eef4 7a47 	vcmp.f32	s15, s14
 800c518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c51c:	f102 0201 	add.w	r2, r2, #1
 800c520:	bfc8      	it	gt
 800c522:	eeb0 7a67 	vmovgt.f32	s14, s15
 800c526:	42a2      	cmp	r2, r4
 800c528:	442b      	add	r3, r5
 800c52a:	d014      	beq.n	800c556 <arm_mat_inverse_f32+0xee>
 800c52c:	edd3 7a00 	vldr	s15, [r3]
 800c530:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c538:	eeb1 6a67 	vneg.f32	s12, s15
 800c53c:	dcea      	bgt.n	800c514 <arm_mat_inverse_f32+0xac>
 800c53e:	eeb4 6a47 	vcmp.f32	s12, s14
 800c542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c546:	f102 0201 	add.w	r2, r2, #1
 800c54a:	bfc8      	it	gt
 800c54c:	eeb0 7a46 	vmovgt.f32	s14, s12
 800c550:	42a2      	cmp	r2, r4
 800c552:	442b      	add	r3, r5
 800c554:	d1ea      	bne.n	800c52c <arm_mat_inverse_f32+0xc4>
 800c556:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c55e:	d075      	beq.n	800c64c <arm_mat_inverse_f32+0x1e4>
 800c560:	eef5 6a40 	vcmp.f32	s13, #0.0
 800c564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c568:	d070      	beq.n	800c64c <arm_mat_inverse_f32+0x1e4>
 800c56a:	4672      	mov	r2, lr
 800c56c:	4663      	mov	r3, ip
 800c56e:	ed93 7a00 	vldr	s14, [r3]
 800c572:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c576:	3a01      	subs	r2, #1
 800c578:	ece3 7a01 	vstmia	r3!, {s15}
 800c57c:	d1f7      	bne.n	800c56e <arm_mat_inverse_f32+0x106>
 800c57e:	9901      	ldr	r1, [sp, #4]
 800c580:	464b      	mov	r3, r9
 800c582:	ed93 7a00 	vldr	s14, [r3]
 800c586:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c58a:	3901      	subs	r1, #1
 800c58c:	ece3 7a01 	vstmia	r3!, {s15}
 800c590:	d1f7      	bne.n	800c582 <arm_mat_inverse_f32+0x11a>
 800c592:	9803      	ldr	r0, [sp, #12]
 800c594:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800c598:	42b1      	cmp	r1, r6
 800c59a:	d039      	beq.n	800c610 <arm_mat_inverse_f32+0x1a8>
 800c59c:	eddb 6a00 	vldr	s13, [fp]
 800c5a0:	465a      	mov	r2, fp
 800c5a2:	4673      	mov	r3, lr
 800c5a4:	46e2      	mov	sl, ip
 800c5a6:	ecba 7a01 	vldmia	sl!, {s14}
 800c5aa:	edd2 7a00 	vldr	s15, [r2]
 800c5ae:	ee26 7a87 	vmul.f32	s14, s13, s14
 800c5b2:	3b01      	subs	r3, #1
 800c5b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5b8:	ece2 7a01 	vstmia	r2!, {s15}
 800c5bc:	d1f3      	bne.n	800c5a6 <arm_mat_inverse_f32+0x13e>
 800c5be:	9b01      	ldr	r3, [sp, #4]
 800c5c0:	44bb      	add	fp, r7
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	46ca      	mov	sl, r9
 800c5c6:	ecba 7a01 	vldmia	sl!, {s14}
 800c5ca:	edd2 7a00 	vldr	s15, [r2]
 800c5ce:	ee26 7a87 	vmul.f32	s14, s13, s14
 800c5d2:	3b01      	subs	r3, #1
 800c5d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5d8:	ece2 7a01 	vstmia	r2!, {s15}
 800c5dc:	d1f3      	bne.n	800c5c6 <arm_mat_inverse_f32+0x15e>
 800c5de:	4428      	add	r0, r5
 800c5e0:	3101      	adds	r1, #1
 800c5e2:	428c      	cmp	r4, r1
 800c5e4:	44c3      	add	fp, r8
 800c5e6:	d1d7      	bne.n	800c598 <arm_mat_inverse_f32+0x130>
 800c5e8:	9b04      	ldr	r3, [sp, #16]
 800c5ea:	f1be 0e01 	subs.w	lr, lr, #1
 800c5ee:	f106 0601 	add.w	r6, r6, #1
 800c5f2:	449c      	add	ip, r3
 800c5f4:	f1a7 0704 	sub.w	r7, r7, #4
 800c5f8:	44a9      	add	r9, r5
 800c5fa:	f47f af7e 	bne.w	800c4fa <arm_mat_inverse_f32+0x92>
 800c5fe:	eef5 6a40 	vcmp.f32	s13, #0.0
 800c602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c606:	d006      	beq.n	800c616 <arm_mat_inverse_f32+0x1ae>
 800c608:	2000      	movs	r0, #0
 800c60a:	b007      	add	sp, #28
 800c60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c610:	44bb      	add	fp, r7
 800c612:	4428      	add	r0, r5
 800c614:	e7e4      	b.n	800c5e0 <arm_mat_inverse_f32+0x178>
 800c616:	9b05      	ldr	r3, [sp, #20]
 800c618:	9a01      	ldr	r2, [sp, #4]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	edd3 7a00 	vldr	s15, [r3]
 800c620:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c624:	fb02 f204 	mul.w	r2, r2, r4
 800c628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c62c:	4614      	mov	r4, r2
 800c62e:	bf08      	it	eq
 800c630:	3304      	addeq	r3, #4
 800c632:	d007      	beq.n	800c644 <arm_mat_inverse_f32+0x1dc>
 800c634:	e7e8      	b.n	800c608 <arm_mat_inverse_f32+0x1a0>
 800c636:	ecf3 7a01 	vldmia	r3!, {s15}
 800c63a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c642:	d1e1      	bne.n	800c608 <arm_mat_inverse_f32+0x1a0>
 800c644:	f10e 0e01 	add.w	lr, lr, #1
 800c648:	4574      	cmp	r4, lr
 800c64a:	d1f4      	bne.n	800c636 <arm_mat_inverse_f32+0x1ce>
 800c64c:	f06f 0004 	mvn.w	r0, #4
 800c650:	b007      	add	sp, #28
 800c652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c656:	f06f 0002 	mvn.w	r0, #2
 800c65a:	b007      	add	sp, #28
 800c65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c660:	4656      	mov	r6, sl
 800c662:	3f01      	subs	r7, #1
 800c664:	f846 bb04 	str.w	fp, [r6], #4
 800c668:	f47f af1b 	bne.w	800c4a2 <arm_mat_inverse_f32+0x3a>
 800c66c:	e735      	b.n	800c4da <arm_mat_inverse_f32+0x72>
 800c66e:	bf00      	nop
 800c670:	00000000 	.word	0x00000000

0800c674 <arm_mat_init_f32>:
 800c674:	8001      	strh	r1, [r0, #0]
 800c676:	8042      	strh	r2, [r0, #2]
 800c678:	6043      	str	r3, [r0, #4]
 800c67a:	4770      	bx	lr

0800c67c <arm_mat_add_f32>:
 800c67c:	b4f0      	push	{r4, r5, r6, r7}
 800c67e:	e9d1 4700 	ldrd	r4, r7, [r1]
 800c682:	6803      	ldr	r3, [r0, #0]
 800c684:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c688:	6856      	ldr	r6, [r2, #4]
 800c68a:	42a3      	cmp	r3, r4
 800c68c:	d15d      	bne.n	800c74a <arm_mat_add_f32+0xce>
 800c68e:	6812      	ldr	r2, [r2, #0]
 800c690:	4293      	cmp	r3, r2
 800c692:	d15a      	bne.n	800c74a <arm_mat_add_f32+0xce>
 800c694:	8803      	ldrh	r3, [r0, #0]
 800c696:	8844      	ldrh	r4, [r0, #2]
 800c698:	fb04 f403 	mul.w	r4, r4, r3
 800c69c:	08a5      	lsrs	r5, r4, #2
 800c69e:	d032      	beq.n	800c706 <arm_mat_add_f32+0x8a>
 800c6a0:	f10c 0110 	add.w	r1, ip, #16
 800c6a4:	f107 0210 	add.w	r2, r7, #16
 800c6a8:	f106 0310 	add.w	r3, r6, #16
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	ed12 7a04 	vldr	s14, [r2, #-16]
 800c6b2:	ed51 7a04 	vldr	s15, [r1, #-16]
 800c6b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6ba:	3801      	subs	r0, #1
 800c6bc:	ed43 7a04 	vstr	s15, [r3, #-16]
 800c6c0:	ed12 7a03 	vldr	s14, [r2, #-12]
 800c6c4:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c6c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6cc:	f101 0110 	add.w	r1, r1, #16
 800c6d0:	ed43 7a03 	vstr	s15, [r3, #-12]
 800c6d4:	ed12 7a02 	vldr	s14, [r2, #-8]
 800c6d8:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800c6dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6e0:	f102 0210 	add.w	r2, r2, #16
 800c6e4:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c6e8:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800c6ec:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800c6f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6f4:	f103 0310 	add.w	r3, r3, #16
 800c6f8:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800c6fc:	d1d7      	bne.n	800c6ae <arm_mat_add_f32+0x32>
 800c6fe:	012b      	lsls	r3, r5, #4
 800c700:	449c      	add	ip, r3
 800c702:	441f      	add	r7, r3
 800c704:	441e      	add	r6, r3
 800c706:	f014 0403 	ands.w	r4, r4, #3
 800c70a:	d01b      	beq.n	800c744 <arm_mat_add_f32+0xc8>
 800c70c:	edd7 7a00 	vldr	s15, [r7]
 800c710:	ed9c 7a00 	vldr	s14, [ip]
 800c714:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c718:	3c01      	subs	r4, #1
 800c71a:	edc6 7a00 	vstr	s15, [r6]
 800c71e:	d011      	beq.n	800c744 <arm_mat_add_f32+0xc8>
 800c720:	eddc 7a01 	vldr	s15, [ip, #4]
 800c724:	ed97 7a01 	vldr	s14, [r7, #4]
 800c728:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c72c:	2c01      	cmp	r4, #1
 800c72e:	edc6 7a01 	vstr	s15, [r6, #4]
 800c732:	d007      	beq.n	800c744 <arm_mat_add_f32+0xc8>
 800c734:	eddc 7a02 	vldr	s15, [ip, #8]
 800c738:	ed97 7a02 	vldr	s14, [r7, #8]
 800c73c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c740:	edc6 7a02 	vstr	s15, [r6, #8]
 800c744:	2000      	movs	r0, #0
 800c746:	bcf0      	pop	{r4, r5, r6, r7}
 800c748:	4770      	bx	lr
 800c74a:	f06f 0002 	mvn.w	r0, #2
 800c74e:	e7fa      	b.n	800c746 <arm_mat_add_f32+0xca>

0800c750 <__libc_init_array>:
 800c750:	b570      	push	{r4, r5, r6, lr}
 800c752:	4d0d      	ldr	r5, [pc, #52]	; (800c788 <__libc_init_array+0x38>)
 800c754:	4c0d      	ldr	r4, [pc, #52]	; (800c78c <__libc_init_array+0x3c>)
 800c756:	1b64      	subs	r4, r4, r5
 800c758:	10a4      	asrs	r4, r4, #2
 800c75a:	2600      	movs	r6, #0
 800c75c:	42a6      	cmp	r6, r4
 800c75e:	d109      	bne.n	800c774 <__libc_init_array+0x24>
 800c760:	4d0b      	ldr	r5, [pc, #44]	; (800c790 <__libc_init_array+0x40>)
 800c762:	4c0c      	ldr	r4, [pc, #48]	; (800c794 <__libc_init_array+0x44>)
 800c764:	f000 f82e 	bl	800c7c4 <_init>
 800c768:	1b64      	subs	r4, r4, r5
 800c76a:	10a4      	asrs	r4, r4, #2
 800c76c:	2600      	movs	r6, #0
 800c76e:	42a6      	cmp	r6, r4
 800c770:	d105      	bne.n	800c77e <__libc_init_array+0x2e>
 800c772:	bd70      	pop	{r4, r5, r6, pc}
 800c774:	f855 3b04 	ldr.w	r3, [r5], #4
 800c778:	4798      	blx	r3
 800c77a:	3601      	adds	r6, #1
 800c77c:	e7ee      	b.n	800c75c <__libc_init_array+0xc>
 800c77e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c782:	4798      	blx	r3
 800c784:	3601      	adds	r6, #1
 800c786:	e7f2      	b.n	800c76e <__libc_init_array+0x1e>
 800c788:	0800c804 	.word	0x0800c804
 800c78c:	0800c804 	.word	0x0800c804
 800c790:	0800c804 	.word	0x0800c804
 800c794:	0800c808 	.word	0x0800c808

0800c798 <memcpy>:
 800c798:	440a      	add	r2, r1
 800c79a:	4291      	cmp	r1, r2
 800c79c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7a0:	d100      	bne.n	800c7a4 <memcpy+0xc>
 800c7a2:	4770      	bx	lr
 800c7a4:	b510      	push	{r4, lr}
 800c7a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7ae:	4291      	cmp	r1, r2
 800c7b0:	d1f9      	bne.n	800c7a6 <memcpy+0xe>
 800c7b2:	bd10      	pop	{r4, pc}

0800c7b4 <memset>:
 800c7b4:	4402      	add	r2, r0
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d100      	bne.n	800c7be <memset+0xa>
 800c7bc:	4770      	bx	lr
 800c7be:	f803 1b01 	strb.w	r1, [r3], #1
 800c7c2:	e7f9      	b.n	800c7b8 <memset+0x4>

0800c7c4 <_init>:
 800c7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c6:	bf00      	nop
 800c7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ca:	bc08      	pop	{r3}
 800c7cc:	469e      	mov	lr, r3
 800c7ce:	4770      	bx	lr

0800c7d0 <_fini>:
 800c7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d2:	bf00      	nop
 800c7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7d6:	bc08      	pop	{r3}
 800c7d8:	469e      	mov	lr, r3
 800c7da:	4770      	bx	lr
