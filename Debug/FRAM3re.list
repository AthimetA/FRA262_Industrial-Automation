
FRAM3re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3dc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800b574  0800b574  0001b574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b594  0800b594  000203c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b594  0800b594  0001b594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b59c  0800b59c  000203c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b59c  0800b59c  0001b59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5a0  0800b5a0  0001b5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c4  20000000  0800b5a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  200003c8  0800b968  000203c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008dc  0800b968  000208dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001729d  00000000  00000000  000203f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa1  00000000  00000000  00037691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0003a638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  0003b758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176a8  00000000  00000000  0003c758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a19  00000000  00000000  00053e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f70  00000000  00000000  00069819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000fc789  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048e0  00000000  00000000  000fc850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  00101130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200003c8 	.word	0x200003c8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b55c 	.word	0x0800b55c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200003cc 	.word	0x200003cc
 80001d4:	0800b55c 	.word	0x0800b55c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	f00a fb4e 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	f00a fb45 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 1, 3, KalmanVar ->MatC_Data);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3330      	adds	r3, #48	; 0x30
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	2101      	movs	r1, #1
 8000d90:	f00a fb3c 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f503 7027 	add.w	r0, r3, #668	; 0x29c
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	333c      	adds	r3, #60	; 0x3c
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2101      	movs	r1, #1
 8000da2:	f00a fb33 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f503 7029 	add.w	r0, r3, #676	; 0x2a4
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3340      	adds	r3, #64	; 0x40
 8000db0:	2203      	movs	r2, #3
 8000db2:	2103      	movs	r1, #3
 8000db4:	f00a fb2a 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 1, 1, KalmanVar ->MatR_Data);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3364      	adds	r3, #100	; 0x64
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	f00a fb21 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3368      	adds	r3, #104	; 0x68
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	f00a fb18 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	338c      	adds	r3, #140	; 0x8c
 8000de6:	2201      	movs	r2, #1
 8000de8:	2103      	movs	r1, #3
 8000dea:	f00a fb0f 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3398      	adds	r3, #152	; 0x98
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	f00a fb06 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	33a4      	adds	r3, #164	; 0xa4
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	f00a fafd 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f503 7035 	add.w	r0, r3, #724	; 0x2d4
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	33c8      	adds	r3, #200	; 0xc8
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	2103      	movs	r1, #3
 8000e20:	f00a faf4 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 1, 1, KalmanVar ->MatY_Data);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f503 7037 	add.w	r0, r3, #732	; 0x2dc
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	33ec      	adds	r3, #236	; 0xec
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2101      	movs	r1, #1
 8000e32:	f00a faeb 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 1, 1, KalmanVar ->MatZ_Data);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	33f0      	adds	r3, #240	; 0xf0
 8000e40:	2201      	movs	r2, #1
 8000e42:	2101      	movs	r1, #1
 8000e44:	f00a fae2 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 1, 1, KalmanVar ->MatS_Data);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f503 703b 	add.w	r0, r3, #748	; 0x2ec
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	33f4      	adds	r3, #244	; 0xf4
 8000e52:	2201      	movs	r2, #1
 8000e54:	2101      	movs	r1, #1
 8000e56:	f00a fad9 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 1, KalmanVar ->MatK_Data);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	33f8      	adds	r3, #248	; 0xf8
 8000e64:	2201      	movs	r2, #1
 8000e66:	2103      	movs	r1, #3
 8000e68:	f00a fad0 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e78:	2203      	movs	r2, #3
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	f00a fac6 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	2103      	movs	r1, #3
 8000e90:	f00a fabc 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f503 7043 	add.w	r0, r3, #780	; 0x30c
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	f00a fab2 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQ), 3, 3, KalmanVar ->MatGQ_Data);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	f00a faa8 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 1, KalmanVar ->MatCt_Data);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f503 7047 	add.w	r0, r3, #796	; 0x31c
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2103      	movs	r1, #3
 8000ecc:	f00a fa9e 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8000edc:	2203      	movs	r2, #3
 8000ede:	2103      	movs	r1, #3
 8000ee0:	f00a fa94 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 1, 1, KalmanVar ->MatSinv_Data);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	f00a fa8a 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 1, 3, KalmanVar ->MatCPk_Data);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f503 704d 	add.w	r0, r3, #820	; 0x334
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8000f04:	2203      	movs	r2, #3
 8000f06:	2101      	movs	r1, #1
 8000f08:	f00a fa80 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000f18:	2203      	movs	r2, #3
 8000f1a:	2103      	movs	r1, #3
 8000f1c:	f00a fa76 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f503 7051 	add.w	r0, r3, #836	; 0x344
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	2103      	movs	r1, #3
 8000f30:	f00a fa6c 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 1, 1, KalmanVar ->MatCXk_Data);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 7053 	add.w	r0, r3, #844	; 0x34c
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8000f40:	2201      	movs	r2, #1
 8000f42:	2101      	movs	r1, #1
 8000f44:	f00a fa62 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 1, 1, KalmanVar ->MatCPkCt_Data);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f503 7055 	add.w	r0, r3, #852	; 0x354
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000f54:	2201      	movs	r2, #1
 8000f56:	2101      	movs	r1, #1
 8000f58:	f00a fa58 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 1, KalmanVar ->MatPkCt_Data);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	f00a fa4e 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2103      	movs	r1, #3
 8000f80:	f00a fa44 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000f90:	2203      	movs	r2, #3
 8000f92:	2103      	movs	r1, #3
 8000f94:	f00a fa3a 	bl	800b40c <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f503 705d 	add.w	r0, r3, #884	; 0x374
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	f00a fa30 	bl	800b40c <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f009 ffba 	bl	800af34 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4610      	mov	r0, r2
 8000fd0:	f009 ffb0 	bl	800af34 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f503 7225 	add.w	r2, r3, #660	; 0x294
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	f009 ffa6 	bl	800af34 <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQ));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f503 7129 	add.w	r1, r3, #676	; 0x2a4
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f00a f860 	bl	800b0c0 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQ), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 7143 	add.w	r1, r3, #780	; 0x30c
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8001012:	461a      	mov	r2, r3
 8001014:	f00a f854 	bl	800b0c0 <arm_mat_mult_f32>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <KalmanMatrixReset>:

void KalmanMatrixReset(KalmanFilterVar *KalmanVar , float Pvar)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	ed87 0a00 	vstr	s0, [r7]
	for (int index = 0; index < 3; ++index)
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e013      	b.n	800105a <KalmanMatrixReset+0x3a>
	{
		KalmanVar ->MatStateLast_Data[index] = 0.0;
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3326      	adds	r3, #38	; 0x26
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
		KalmanVar ->MatState_Data[index] = 0.0;
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3322      	adds	r3, #34	; 0x22
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	3304      	adds	r3, #4
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
	for (int index = 0; index < 3; ++index)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b02      	cmp	r3, #2
 800105e:	dde8      	ble.n	8001032 <KalmanMatrixReset+0x12>
	}

	KalmanVar ->MatPredict_Data[0] = Pvar;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	KalmanVar ->MatPredictLast_Data[0] = Pvar;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	KalmanVar ->MatPredict_Data[1] = 0.0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	KalmanVar ->MatPredictLast_Data[1] = 0.0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	KalmanVar ->MatPredict_Data[2] = 0.0;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	KalmanVar ->MatPredictLast_Data[2] = 0.0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	KalmanVar ->MatPredict_Data[3] = 0.0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	KalmanVar ->MatPredictLast_Data[3] = 0.0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	KalmanVar ->MatPredict_Data[4] = Pvar;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	KalmanVar ->MatPredictLast_Data[4] = Pvar;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	KalmanVar ->MatPredict_Data[5] = 0.0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	KalmanVar ->MatPredictLast_Data[5] = 0.0;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	KalmanVar ->MatPredict_Data[6] = 0.0;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	KalmanVar ->MatPredictLast_Data[6] = 0.0;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	KalmanVar ->MatPredict_Data[7] = 0.0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	KalmanVar ->MatPredictLast_Data[7] = 0.0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

	KalmanVar ->MatPredict_Data[8] = Pvar;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	KalmanVar ->MatPredictLast_Data[8] = Pvar;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	ed87 0a00 	vstr	s0, [r7]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001132:	461a      	mov	r2, r3
 8001134:	f009 ffc4 	bl	800b0c0 <arm_mat_mult_f32>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8001154:	461a      	mov	r2, r3
 8001156:	f009 ffb3 	bl	800b0c0 <arm_mat_mult_f32>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f503 704f 	add.w	r0, r3, #828	; 0x33c
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f503 7141 	add.w	r1, r3, #772	; 0x304
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8001176:	461a      	mov	r2, r3
 8001178:	f009 ffa2 	bl	800b0c0 <arm_mat_mult_f32>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f503 7051 	add.w	r0, r3, #836	; 0x344
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f503 714b 	add.w	r1, r3, #812	; 0x32c
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8001198:	461a      	mov	r2, r3
 800119a:	f00a f93b 	bl	800b414 <arm_mat_add_f32>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80011c2:	461a      	mov	r2, r3
 80011c4:	f009 ff7c 	bl	800b0c0 <arm_mat_mult_f32>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f503 7153 	add.w	r1, r3, #844	; 0x34c
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 80011e4:	461a      	mov	r2, r3
 80011e6:	f009 ff01 	bl	800afec <arm_mat_sub_f32>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8001206:	461a      	mov	r2, r3
 8001208:	f009 ff5a 	bl	800b0c0 <arm_mat_mult_f32>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f503 704d 	add.w	r0, r3, #820	; 0x334
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8001228:	461a      	mov	r2, r3
 800122a:	f009 ff49 	bl	800b0c0 <arm_mat_mult_f32>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f503 7055 	add.w	r0, r3, #852	; 0x354
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f503 712b 	add.w	r1, r3, #684	; 0x2ac
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 800124a:	461a      	mov	r2, r3
 800124c:	f00a f8e2 	bl	800b414 <arm_mat_add_f32>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f503 723b 	add.w	r2, r3, #748	; 0x2ec
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001266:	4619      	mov	r1, r3
 8001268:	4610      	mov	r0, r2
 800126a:	f009 ffc9 	bl	800b200 <arm_mat_inverse_f32>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f503 7147 	add.w	r1, r3, #796	; 0x31c
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 800128a:	461a      	mov	r2, r3
 800128c:	f009 ff18 	bl	800b0c0 <arm_mat_mult_f32>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f503 7149 	add.w	r1, r3, #804	; 0x324
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80012ac:	461a      	mov	r2, r3
 80012ae:	f009 ff07 	bl	800b0c0 <arm_mat_mult_f32>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f503 7137 	add.w	r1, r3, #732	; 0x2dc
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80012ce:	461a      	mov	r2, r3
 80012d0:	f009 fef6 	bl	800b0c0 <arm_mat_mult_f32>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f503 7059 	add.w	r0, r3, #868	; 0x364
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80012f0:	461a      	mov	r2, r3
 80012f2:	f00a f88f 	bl	800b414 <arm_mat_add_f32>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f503 7125 	add.w	r1, r3, #660	; 0x294
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8001312:	461a      	mov	r2, r3
 8001314:	f009 fed4 	bl	800b0c0 <arm_mat_mult_f32>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f503 703f 	add.w	r0, r3, #764	; 0x2fc
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f503 715b 	add.w	r1, r3, #876	; 0x36c
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8001334:	461a      	mov	r2, r3
 8001336:	f009 fe59 	bl	800afec <arm_mat_sub_f32>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f503 705d 	add.w	r0, r3, #884	; 0x374
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 8001356:	461a      	mov	r2, r3
 8001358:	f009 feb2 	bl	800b0c0 <arm_mat_mult_f32>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <PIDAController_Init>:
#define PIDVELO_KD  0.0f
#define PID_LIM_MIN_INT -10000.0f
#define PID_LIM_MAX_INT  10000.0f

void PIDAController_Init(PIDAController *pid)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	pid->Last1Error = 0.0f;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
	pid->Last2Error = 0.0f;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	; 0x24

	pid->differentiatorOutput = 0.0f;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
	pid->integratorOutput = 0.0f;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
	pid->proportionalOutput = 0.0f;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	61da      	str	r2, [r3, #28]

	pid->ControllerOut = 0.0f;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
	pid->ControllerLastOut = 0.0f;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c

	pid->OutputMax = PID_LIM_MAX_INT;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <PIDAController_Init+0x58>)
 80013b4:	611a      	str	r2, [r3, #16]
	pid->OutputMin = PID_LIM_MIN_INT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <PIDAController_Init+0x5c>)
 80013ba:	60da      	str	r2, [r3, #12]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	461c4000 	.word	0x461c4000
 80013cc:	c61c4000 	.word	0xc61c4000

080013d0 <PIDAVelocityController_Update>:

float PIDAVelocityController_Update(PIDAController *pid, float setpoint, float measurement){
 80013d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013d4:	b088      	sub	sp, #32
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	ed87 0a02 	vstr	s0, [r7, #8]
 80013de:	edc7 0a01 	vstr	s1, [r7, #4]

    float error = setpoint - measurement;
 80013e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80013e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ee:	edc7 7a07 	vstr	s15, [r7, #28]
    float errorDZ = error;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	61bb      	str	r3, [r7, #24]
    float deadzone = 2.5;
 80013f6:	4b62      	ldr	r3, [pc, #392]	; (8001580 <PIDAVelocityController_Update+0x1b0>)
 80013f8:	617b      	str	r3, [r7, #20]
//    else
//    {
//    	pid->KpUse = pid->Kp;
//    }

    if(AbsVal(setpoint) <= 10.0) // 10 deg/s
 80013fa:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fe:	f000 f9dc 	bl	80017ba <AbsVal>
 8001402:	eef0 7a40 	vmov.f32	s15, s0
 8001406:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800140a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800140e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001412:	d80a      	bhi.n	800142a <PIDAVelocityController_Update+0x5a>
    {
//    	pid->Kp  = 0.2;
//    	pid->Ki  = 6.0;
//    	pid->Kd  = 0.0;
    	pid->Kp  = PIDVELO_KP;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4a5b      	ldr	r2, [pc, #364]	; (8001584 <PIDAVelocityController_Update+0x1b4>)
 8001418:	601a      	str	r2, [r3, #0]
    	pid->Ki  = PIDVELO_KI;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4a5a      	ldr	r2, [pc, #360]	; (8001588 <PIDAVelocityController_Update+0x1b8>)
 800141e:	605a      	str	r2, [r3, #4]
    	pid->Kd  = PIDVELO_KD;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	e009      	b.n	800143e <PIDAVelocityController_Update+0x6e>
    }
    else
    {
    	pid->Kp  = PIDVELO_KP;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4a55      	ldr	r2, [pc, #340]	; (8001584 <PIDAVelocityController_Update+0x1b4>)
 800142e:	601a      	str	r2, [r3, #0]
    	pid->Ki  = PIDVELO_KI;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4a55      	ldr	r2, [pc, #340]	; (8001588 <PIDAVelocityController_Update+0x1b8>)
 8001434:	605a      	str	r2, [r3, #4]
    	pid->Kd  = PIDVELO_KD;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
    }

	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	ed93 7a00 	vldr	s14, [r3]
 8001444:	edd7 7a06 	vldr	s15, [r7, #24]
 8001448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	edd3 6a00 	vldr	s13, [r3]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	edd3 7a08 	vldr	s15, [r3, #32]
 8001458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	ed93 7a01 	vldr	s14, [r3, #4]
 800146c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f80e 	bl	80004a0 <__aeabi_f2d>
 8001484:	4604      	mov	r4, r0
 8001486:	460d      	mov	r5, r1
 8001488:	69b8      	ldr	r0, [r7, #24]
 800148a:	f7ff f809 	bl	80004a0 <__aeabi_f2d>
 800148e:	4680      	mov	r8, r0
 8001490:	4689      	mov	r9, r1
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f802 	bl	80004a0 <__aeabi_f2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	f7fe fea0 	bl	80001e4 <__adddf3>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4640      	mov	r0, r8
 80014aa:	4649      	mov	r1, r9
 80014ac:	f7fe fe98 	bl	80001e0 <__aeabi_dsub>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4690      	mov	r8, r2
 80014b6:	4699      	mov	r9, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe ffef 	bl	80004a0 <__aeabi_f2d>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4640      	mov	r0, r8
 80014c8:	4649      	mov	r1, r9
 80014ca:	f7fe fe8b 	bl	80001e4 <__adddf3>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4620      	mov	r0, r4
 80014d4:	4629      	mov	r1, r5
 80014d6:	f7ff f83b 	bl	8000550 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f7ff fa67 	bl	80009b4 <__aeabi_d2f>
 80014e6:	4602      	mov	r2, r0
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	ed93 7a07 	vldr	s14, [r3, #28]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80014f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8001502:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800150c:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	dd04      	ble.n	8001536 <PIDAVelocityController_Update+0x166>

    	pid->ControllerOut = pid->OutputMax;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
 8001534:	e00e      	b.n	8001554 <PIDAVelocityController_Update+0x184>

    } else if (pid->ControllerOut < pid->OutputMin) {
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154a:	d503      	bpl.n	8001554 <PIDAVelocityController_Update+0x184>

    	pid->ControllerOut = pid->OutputMin;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a1a      	ldr	r2, [r3, #32]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	ee07 3a90 	vmov	s15, r3
}
 8001572:	eeb0 0a67 	vmov.f32	s0, s15
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800157e:	bf00      	nop
 8001580:	40200000 	.word	0x40200000
 8001584:	3e23e1d3 	.word	0x3e23e1d3
 8001588:	4048ecf7 	.word	0x4048ecf7

0800158c <PIDAPositonController_Update>:

float PIDAPositonController_Update(PIDAController *pid, float setpoint, float measurement)
{
 800158c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001590:	b088      	sub	sp, #32
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	ed87 0a02 	vstr	s0, [r7, #8]
 800159a:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = setpoint - measurement;
 800159e:	ed97 7a02 	vldr	s14, [r7, #8]
 80015a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015aa:	edc7 7a07 	vstr	s15, [r7, #28]
    float errorDZ = error;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	61bb      	str	r3, [r7, #24]
    float deadzone = 0.4;
 80015b2:	4b62      	ldr	r3, [pc, #392]	; (800173c <PIDAPositonController_Update+0x1b0>)
 80015b4:	617b      	str	r3, [r7, #20]
//    else
//    {
//    	errorDZ = error + deadzone;
//    }

    if(AbsVal(setpoint) < 10.0) // 10 deg/s
 80015b6:	ed97 0a02 	vldr	s0, [r7, #8]
 80015ba:	f000 f8fe 	bl	80017ba <AbsVal>
 80015be:	eef0 7a40 	vmov.f32	s15, s0
 80015c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ce:	d50a      	bpl.n	80015e6 <PIDAPositonController_Update+0x5a>
    {
    	pid->Kp  = PID_KP;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4a5b      	ldr	r2, [pc, #364]	; (8001740 <PIDAPositonController_Update+0x1b4>)
 80015d4:	601a      	str	r2, [r3, #0]
    	pid->Ki  = PID_KI;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4a5a      	ldr	r2, [pc, #360]	; (8001744 <PIDAPositonController_Update+0x1b8>)
 80015da:	605a      	str	r2, [r3, #4]
    	pid->Kd  = PID_KD;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	e009      	b.n	80015fa <PIDAPositonController_Update+0x6e>
    }
    else
    {
    	pid->Kp  = PID_KP;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4a55      	ldr	r2, [pc, #340]	; (8001740 <PIDAPositonController_Update+0x1b4>)
 80015ea:	601a      	str	r2, [r3, #0]
    	pid->Ki  = PID_KI;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4a55      	ldr	r2, [pc, #340]	; (8001744 <PIDAPositonController_Update+0x1b8>)
 80015f0:	605a      	str	r2, [r3, #4]
    	pid->Kd  = PID_KD;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
    }

	// Compute error of each term

    pid->proportionalOutput = (pid->Kp*errorDZ) - (pid->Kp * pid->Last1Error);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	ed93 7a00 	vldr	s14, [r3]
 8001600:	edd7 7a06 	vldr	s15, [r7, #24]
 8001604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	edd3 6a00 	vldr	s13, [r3]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	edd3 7a08 	vldr	s15, [r3, #32]
 8001614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	edc3 7a07 	vstr	s15, [r3, #28]

    pid->integratorOutput = (pid->Ki * errorDZ);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	ed93 7a01 	vldr	s14, [r3, #4]
 8001628:	edd7 7a06 	vldr	s15, [r7, #24]
 800162c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	edc3 7a05 	vstr	s15, [r3, #20]

    pid->differentiatorOutput = pid->Kd *(errorDZ -(2.0* pid->Last1Error) + pid->Last2Error)	;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff30 	bl	80004a0 <__aeabi_f2d>
 8001640:	4604      	mov	r4, r0
 8001642:	460d      	mov	r5, r1
 8001644:	69b8      	ldr	r0, [r7, #24]
 8001646:	f7fe ff2b 	bl	80004a0 <__aeabi_f2d>
 800164a:	4680      	mov	r8, r0
 800164c:	4689      	mov	r9, r1
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff24 	bl	80004a0 <__aeabi_f2d>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	f7fe fdc2 	bl	80001e4 <__adddf3>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4640      	mov	r0, r8
 8001666:	4649      	mov	r1, r9
 8001668:	f7fe fdba 	bl	80001e0 <__aeabi_dsub>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4690      	mov	r8, r2
 8001672:	4699      	mov	r9, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff11 	bl	80004a0 <__aeabi_f2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4640      	mov	r0, r8
 8001684:	4649      	mov	r1, r9
 8001686:	f7fe fdad 	bl	80001e4 <__adddf3>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4620      	mov	r0, r4
 8001690:	4629      	mov	r1, r5
 8001692:	f7fe ff5d 	bl	8000550 <__aeabi_dmul>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f7ff f989 	bl	80009b4 <__aeabi_d2f>
 80016a2:	4602      	mov	r2, r0
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	619a      	str	r2, [r3, #24]

	// Compute output and apply limits

    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	ed93 7a07 	vldr	s14, [r3, #28]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80016b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80016be:	ee37 7a27 	vadd.f32	s14, s14, s15
    								+ pid->ControllerLastOut;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80016c8:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->ControllerOut = pid->proportionalOutput + pid->integratorOutput + pid->differentiatorOutput
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if (pid->ControllerOut > pid->OutputMax) {
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	edd3 7a04 	vldr	s15, [r3, #16]
 80016de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	dd04      	ble.n	80016f2 <PIDAPositonController_Update+0x166>

    	pid->ControllerOut = pid->OutputMax;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
 80016f0:	e00e      	b.n	8001710 <PIDAPositonController_Update+0x184>

    } else if (pid->ControllerOut < pid->OutputMin) {
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80016fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	d503      	bpl.n	8001710 <PIDAPositonController_Update+0x184>

    	pid->ControllerOut = pid->OutputMin;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // Controller Memory

    pid->ControllerLastOut = pid->ControllerOut;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Last2Error = pid->Last1Error;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a1a      	ldr	r2, [r3, #32]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	625a      	str	r2, [r3, #36]	; 0x24
	pid->Last1Error = errorDZ;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	621a      	str	r2, [r3, #32]

	return pid->ControllerOut;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	ee07 3a90 	vmov	s15, r3
}
 800172e:	eeb0 0a67 	vmov.f32	s0, s15
 8001732:	3720      	adds	r7, #32
 8001734:	46bd      	mov	sp, r7
 8001736:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800173a:	bf00      	nop
 800173c:	3ecccccd 	.word	0x3ecccccd
 8001740:	40c00000 	.word	0x40c00000
 8001744:	3d4ccccd 	.word	0x3d4ccccd

08001748 <Robotinit>:


#include "Trajectory.h"

void Robotinit(RobotManagement *Robot)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	  Robot -> Position = 0.0;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
	  Robot -> Velocity = 0.0;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
	  Robot -> CurrentStation = 0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	811a      	strh	r2, [r3, #8]
	  Robot -> GoalPositon = 0.0;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
	  Robot -> HomePositon = 0.0;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
	  Robot -> QX = 0.0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
	  Robot -> QV = 0.0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
	  Robot -> QVMax = 0.0;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	621a      	str	r2, [r3, #32]

	  Robot -> flagSethome = 0;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  Robot -> flagStartTime = 0;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  Robot -> RunningFlag = 0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	  Robot -> MotorIsOn = 0;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <AbsVal>:
{
	Robot -> HomePositon = homePoint;
}

float AbsVal(float number)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	ed87 0a01 	vstr	s0, [r7, #4]
  if(number<0)
 80017c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d0:	d50e      	bpl.n	80017f0 <AbsVal+0x36>
  {
    return number*-1.0;
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7fe fe64 	bl	80004a0 <__aeabi_f2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f7ff f8e8 	bl	80009b4 <__aeabi_d2f>
 80017e4:	4603      	mov	r3, r0
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef1 7a67 	vneg.f32	s15, s15
 80017ee:	e001      	b.n	80017f4 <AbsVal+0x3a>
  }
  else
  {
    return number;
 80017f0:	edd7 7a01 	vldr	s15, [r7, #4]
  }
}
 80017f4:	eeb0 0a67 	vmov.f32	s0, s15
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal, float Veloinput){
 8001800:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	ed87 0a02 	vstr	s0, [r7, #8]
 800180e:	edc7 0a01 	vstr	s1, [r7, #4]
 8001812:	ed87 1a00 	vstr	s2, [r7]

	traject -> Qin = Qinitial;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	traject -> Qfinal = Qfinal;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	// Set initial = 0;
	traject -> QRelative = traject -> Qfinal - traject -> Qin;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8001832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	// Set Vmax Amax Jmax
	traject -> Vmax = 0.0;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
//	traject -> Amax = 28.64789;
//	traject -> Jmax = 572.957795 ;
	traject -> Amax = 21.77;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4a16      	ldr	r2, [pc, #88]	; (80018a0 <CoefficientAndTimeCalculation+0xa0>)
 8001848:	601a      	str	r2, [r3, #0]
	traject -> Jmax = 114.59 ;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4a15      	ldr	r2, [pc, #84]	; (80018a4 <CoefficientAndTimeCalculation+0xa4>)
 800184e:	605a      	str	r2, [r3, #4]
	float gain = 0.0;
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
	if(traject -> QRelative < 0.0)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800185c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	d502      	bpl.n	800186c <CoefficientAndTimeCalculation+0x6c>
	{
		gain = -1.0;
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <CoefficientAndTimeCalculation+0xa8>)
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	e002      	b.n	8001872 <CoefficientAndTimeCalculation+0x72>
	}
	else
	{
		gain = 1.0;
 800186c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001870:	617b      	str	r3, [r7, #20]
	}
	// Find Speed limit
	float DistanceABS = AbsVal(traject -> QRelative);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8001878:	eeb0 0a67 	vmov.f32	s0, s15
 800187c:	f7ff ff9d 	bl	80017ba <AbsVal>
 8001880:	ed87 0a04 	vstr	s0, [r7, #16]

	if(DistanceABS >= 130)
 8001884:	edd7 7a04 	vldr	s15, [r7, #16]
 8001888:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80018ac <CoefficientAndTimeCalculation+0xac>
 800188c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	db0e      	blt.n	80018b4 <CoefficientAndTimeCalculation+0xb4>
	{
//		traject -> Vmax = 60;
		traject -> Vmax = 51;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <CoefficientAndTimeCalculation+0xb0>)
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	e07a      	b.n	8001994 <CoefficientAndTimeCalculation+0x194>
 800189e:	bf00      	nop
 80018a0:	41ae28f6 	.word	0x41ae28f6
 80018a4:	42e52e14 	.word	0x42e52e14
 80018a8:	bf800000 	.word	0xbf800000
 80018ac:	43020000 	.word	0x43020000
 80018b0:	424c0000 	.word	0x424c0000
	}
	else
	{
//		traject -> Vmax = (-0.0000003*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00009*(DistanceABS*DistanceABS*DistanceABS))-(0.0115*(DistanceABS*DistanceABS))+(0.995*DistanceABS)+7.1259;
		traject -> Vmax = (-0.0000002*(DistanceABS*DistanceABS*DistanceABS*DistanceABS))+(0.00007*(DistanceABS*DistanceABS*DistanceABS))-(0.0092*(DistanceABS*DistanceABS))+(0.8419*DistanceABS)+4.8492;
 80018b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80018c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	ee17 0a90 	vmov	r0, s15
 80018d0:	f7fe fde6 	bl	80004a0 <__aeabi_f2d>
 80018d4:	f60f 3378 	addw	r3, pc, #2936	; 0xb78
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe fe38 	bl	8000550 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4690      	mov	r8, r2
 80018e6:	4699      	mov	r9, r3
 80018e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ec:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80018f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f8:	ee17 0a90 	vmov	r0, s15
 80018fc:	f7fe fdd0 	bl	80004a0 <__aeabi_f2d>
 8001900:	f60f 3354 	addw	r3, pc, #2900	; 0xb54
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fe22 	bl	8000550 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4640      	mov	r0, r8
 8001912:	4649      	mov	r1, r9
 8001914:	f7fe fc66 	bl	80001e4 <__adddf3>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4690      	mov	r8, r2
 800191e:	4699      	mov	r9, r3
 8001920:	edd7 7a04 	vldr	s15, [r7, #16]
 8001924:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001928:	ee17 0a90 	vmov	r0, s15
 800192c:	f7fe fdb8 	bl	80004a0 <__aeabi_f2d>
 8001930:	f60f 332c 	addw	r3, pc, #2860	; 0xb2c
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe fe0a 	bl	8000550 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4640      	mov	r0, r8
 8001942:	4649      	mov	r1, r9
 8001944:	f7fe fc4c 	bl	80001e0 <__aeabi_dsub>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4690      	mov	r8, r2
 800194e:	4699      	mov	r9, r3
 8001950:	6938      	ldr	r0, [r7, #16]
 8001952:	f7fe fda5 	bl	80004a0 <__aeabi_f2d>
 8001956:	f60f 3310 	addw	r3, pc, #2832	; 0xb10
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fdf7 	bl	8000550 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4640      	mov	r0, r8
 8001968:	4649      	mov	r1, r9
 800196a:	f7fe fc3b 	bl	80001e4 <__adddf3>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f60f 23f8 	addw	r3, pc, #2808	; 0xaf8
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7fe fc31 	bl	80001e4 <__adddf3>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f7ff f813 	bl	80009b4 <__aeabi_d2f>
 800198e:	4602      	mov	r2, r0
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	609a      	str	r2, [r3, #8]
	}

	if(traject -> Vmax > Veloinput)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	edd3 7a02 	vldr	s15, [r3, #8]
 800199a:	ed97 7a00 	vldr	s14, [r7]
 800199e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a6:	d502      	bpl.n	80019ae <CoefficientAndTimeCalculation+0x1ae>
	{
		traject -> Vmax = Veloinput;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	609a      	str	r2, [r3, #8]
	}
	// RPM to deg/sec with Direction
	traject -> Vmax =  traject -> Vmax *gain;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	ed93 7a02 	vldr	s14, [r3, #8]
 80019b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80019b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	edc3 7a02 	vstr	s15, [r3, #8]
	traject -> Amax =  traject -> Amax *gain;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	ed93 7a00 	vldr	s14, [r3]
 80019c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	edc3 7a00 	vstr	s15, [r3]
	traject -> Jmax =  traject -> Jmax *gain;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80019dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80019e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	edc3 7a01 	vstr	s15, [r3, #4]

	// Calculate time
	traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (traject -> QRelative/traject -> Vmax);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	edd3 6a00 	vldr	s13, [r3]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80019f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	edd3 6a00 	vldr	s13, [r3]
 8001a06:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a1a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	traject -> T[0] = (traject -> Amax/traject -> Jmax);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	edd3 6a00 	vldr	s13, [r3]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	traject -> T[1] = (traject -> Vmax/traject -> Amax);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	ed93 7a00 	vldr	s14, [r3]
 8001a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	edd3 6a00 	vldr	s13, [r3]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	ed93 6a02 	vldr	s12, [r3, #8]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	edd3 6a00 	vldr	s13, [r3]
 8001a70:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	traject -> T[3] = traject -> T[6] - traject -> T[2];
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	traject -> T[4] = traject -> T[6] - traject -> T[1];
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	traject -> T[5] = traject -> T[6] - traject -> T[0];
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	traject -> A[0] = traject -> Jmax;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	60da      	str	r2, [r3, #12]
	traject -> A[1] = 0;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
	traject -> A[2] = -1.0 * traject -> Jmax;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fce3 	bl	80004a0 <__aeabi_f2d>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f7fe ff67 	bl	80009b4 <__aeabi_d2f>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eef1 7a67 	vneg.f32	s15, s15
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	edc3 7a05 	vstr	s15, [r3, #20]
	traject -> A[3] = 0;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
	traject -> A[4] = -1.0 * traject -> Jmax;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fccc 	bl	80004a0 <__aeabi_f2d>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7fe ff50 	bl	80009b4 <__aeabi_d2f>
 8001b14:	4603      	mov	r3, r0
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef1 7a67 	vneg.f32	s15, s15
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	edc3 7a07 	vstr	s15, [r3, #28]
	traject -> A[5] = 0;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]
	traject -> A[6] = traject -> Jmax;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24

	traject -> B[0] = 0;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
	traject -> B[1] = traject -> Amax;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
	traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	ed93 7a00 	vldr	s14, [r3]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001b56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	traject -> B[3] = 0;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	635a      	str	r2, [r3, #52]	; 0x34
	traject -> B[4] = traject -> Jmax * traject -> T[3];
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	traject -> B[5] = (-1.0 * traject ->Amax);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fc8a 	bl	80004a0 <__aeabi_f2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f7fe ff0e 	bl	80009b4 <__aeabi_d2f>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	ee07 3a90 	vmov	s15, r3
 8001b9e:	eef1 7a67 	vneg.f32	s15, s15
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fc77 	bl	80004a0 <__aeabi_f2d>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4614      	mov	r4, r2
 8001bb8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bcc:	ee17 0a90 	vmov	r0, s15
 8001bd0:	f7fe fc66 	bl	80004a0 <__aeabi_f2d>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4620      	mov	r0, r4
 8001bda:	4629      	mov	r1, r5
 8001bdc:	f7fe fb00 	bl	80001e0 <__aeabi_dsub>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7fe fee4 	bl	80009b4 <__aeabi_d2f>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40

	traject -> C[0] = 0;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001c36:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c4c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c54:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001c58:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001c68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c70:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c94:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c98:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001cb6:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	edd3 6a05 	vldr	s13, [r3, #20]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ccc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001cd8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ce8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001d36:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d4c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d54:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d58:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d70:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d94:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d98:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001da8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001db6:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	edd3 6a07 	vldr	s13, [r3, #28]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001dcc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001dd8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001de8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001df0:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	ed93 7a07 	vldr	s14, [r3, #28]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001e36:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	edd3 6a08 	vldr	s13, [r3, #32]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e4c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e54:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001e58:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e70:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e94:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e98:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001eb6:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001ecc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001ed8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001ee8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

	traject -> D[0] = 0;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	661a      	str	r2, [r3, #96]	; 0x60
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f26:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001f2a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f40:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f48:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f4c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001f6e:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	edd3 6a04 	vldr	s13, [r3, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f84:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001f8e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f96:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001f9a:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001fb0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001fb4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fb8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fc0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001fd0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	ed93 7a04 	vldr	s14, [r3, #16]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ff4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002006:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800200a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002020:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002024:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002028:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800202c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002030:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800204e:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	edd3 6a05 	vldr	s13, [r3, #20]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002064:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800206e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002076:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800207a:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002090:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002094:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002098:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800209c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80020b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 80020b8:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	ed93 7a05 	vldr	s14, [r3, #20]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80020d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80020de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80020ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002100:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002104:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002108:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800210c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002110:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002124:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800212e:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	edd3 6a06 	vldr	s13, [r3, #24]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002144:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800214e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002152:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002156:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800215a:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	edd3 5a21 	vldr	s11, [r3, #132]	; 0x84
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002170:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002174:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002178:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800217c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002180:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002190:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002194:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8002198:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	ed93 7a06 	vldr	s14, [r3, #24]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80021b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80021be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80021ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80021e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021e8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80021ec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800220e:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	edd3 6a07 	vldr	s13, [r3, #28]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002224:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800222e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002236:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800223a:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	edd3 5a22 	vldr	s11, [r3, #136]	; 0x88
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002250:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002254:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002258:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800225c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002260:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002270:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002274:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8002278:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	ed93 7a07 	vldr	s14, [r3, #28]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002294:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800229e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80022aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80022c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022c8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80022cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80022d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80022e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80022ee:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	edd3 6a08 	vldr	s13, [r3, #32]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002304:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800230e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002316:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 800231a:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002330:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002334:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002338:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800233c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002340:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002350:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002354:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8002358:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	ed93 7a08 	vldr	s14, [r3, #32]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002374:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800237e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002386:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800238a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80023a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023a8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80023ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80023c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80023ce:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80023e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80023ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f6:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80023fa:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002410:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002414:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002418:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800241c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002420:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	ed93 6a17 	vldr	s12, [r3, #92]	; 0x5c
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002430:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002434:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8002438:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
}
 8002442:	bf00      	nop
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800244c:	f3af 8000 	nop.w
 8002450:	9abcaf48 	.word	0x9abcaf48
 8002454:	be8ad7f2 	.word	0xbe8ad7f2
 8002458:	d7c6fbd2 	.word	0xd7c6fbd2
 800245c:	3f12599e 	.word	0x3f12599e
 8002460:	18fc5048 	.word	0x18fc5048
 8002464:	3f82d773 	.word	0x3f82d773
 8002468:	44d013a9 	.word	0x44d013a9
 800246c:	3feaf0d8 	.word	0x3feaf0d8
 8002470:	af4f0d84 	.word	0xaf4f0d84
 8002474:	40136594 	.word	0x40136594

08002478 <TrajectoryEvaluation>:


void TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime, uint64_t PredictTime){
 8002478:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	e9c7 2300 	strd	r2, r3, [r7]
	// Microsec to sec
	static float t = 0;
	static float tP = 0;
	t  = (CurrentTime - StartTime)/1000000.0;
 8002486:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800248a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800248e:	ebb0 0802 	subs.w	r8, r0, r2
 8002492:	eb61 0903 	sbc.w	r9, r1, r3
 8002496:	4640      	mov	r0, r8
 8002498:	4649      	mov	r1, r9
 800249a:	f7fe f823 	bl	80004e4 <__aeabi_ul2d>
 800249e:	a3c6      	add	r3, pc, #792	; (adr r3, 80027b8 <TrajectoryEvaluation+0x340>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fe f97e 	bl	80007a4 <__aeabi_ddiv>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7fe fa80 	bl	80009b4 <__aeabi_d2f>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4ac2      	ldr	r2, [pc, #776]	; (80027c0 <TrajectoryEvaluation+0x348>)
 80024b8:	6013      	str	r3, [r2, #0]
	tP = (PredictTime - StartTime)/1000000.0;
 80024ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80024be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024c2:	1a84      	subs	r4, r0, r2
 80024c4:	eb61 0503 	sbc.w	r5, r1, r3
 80024c8:	4620      	mov	r0, r4
 80024ca:	4629      	mov	r1, r5
 80024cc:	f7fe f80a 	bl	80004e4 <__aeabi_ul2d>
 80024d0:	a3b9      	add	r3, pc, #740	; (adr r3, 80027b8 <TrajectoryEvaluation+0x340>)
 80024d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d6:	f7fe f965 	bl	80007a4 <__aeabi_ddiv>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f7fe fa67 	bl	80009b4 <__aeabi_d2f>
 80024e6:	4603      	mov	r3, r0
 80024e8:	4ab6      	ldr	r2, [pc, #728]	; (80027c4 <TrajectoryEvaluation+0x34c>)
 80024ea:	6013      	str	r3, [r2, #0]

	if(t >= 0 && t < traject -> T[0])
 80024ec:	4bb4      	ldr	r3, [pc, #720]	; (80027c0 <TrajectoryEvaluation+0x348>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fa:	f2c0 80a9 	blt.w	8002650 <TrajectoryEvaluation+0x1d8>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002504:	4bae      	ldr	r3, [pc, #696]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002512:	f340 809d 	ble.w	8002650 <TrajectoryEvaluation+0x1d8>
	{
		traject -> QJ = traject -> A[0];
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[0]*t + traject -> B[0];
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	ed93 7a03 	vldr	s14, [r3, #12]
 8002526:	4ba6      	ldr	r3, [pc, #664]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002528:	edd3 7a00 	vldr	s15, [r3]
 800252c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	ed93 7a03 	vldr	s14, [r3, #12]
 8002546:	4b9e      	ldr	r3, [pc, #632]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002548:	edd3 6a00 	vldr	s13, [r3]
 800254c:	4b9c      	ldr	r3, [pc, #624]	; (80027c0 <TrajectoryEvaluation+0x348>)
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800255e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002568:	4b95      	ldr	r3, [pc, #596]	; (80027c0 <TrajectoryEvaluation+0x348>)
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002572:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800257c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[0]*(tP*tP)/2 + traject -> B[0]*tP + traject -> C[0];
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	ed93 7a03 	vldr	s14, [r3, #12]
 800258c:	4b8d      	ldr	r3, [pc, #564]	; (80027c4 <TrajectoryEvaluation+0x34c>)
 800258e:	edd3 6a00 	vldr	s13, [r3]
 8002592:	4b8c      	ldr	r3, [pc, #560]	; (80027c4 <TrajectoryEvaluation+0x34c>)
 8002594:	edd3 7a00 	vldr	s15, [r3]
 8002598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80025ae:	4b85      	ldr	r3, [pc, #532]	; (80027c4 <TrajectoryEvaluation+0x34c>)
 80025b0:	edd3 7a00 	vldr	s15, [r3]
 80025b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80025c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	edd3 6a03 	vldr	s13, [r3, #12]
 80025d8:	4b79      	ldr	r3, [pc, #484]	; (80027c0 <TrajectoryEvaluation+0x348>)
 80025da:	ed93 6a00 	vldr	s12, [r3]
 80025de:	4b78      	ldr	r3, [pc, #480]	; (80027c0 <TrajectoryEvaluation+0x348>)
 80025e0:	edd3 7a00 	vldr	s15, [r3]
 80025e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025e8:	4b75      	ldr	r3, [pc, #468]	; (80027c0 <TrajectoryEvaluation+0x348>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025f6:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80025fa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002608:	4b6d      	ldr	r3, [pc, #436]	; (80027c0 <TrajectoryEvaluation+0x348>)
 800260a:	ed93 6a00 	vldr	s12, [r3]
 800260e:	4b6c      	ldr	r3, [pc, #432]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002610:	edd3 7a00 	vldr	s15, [r3]
 8002614:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002618:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800261c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002620:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002624:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800262e:	4b64      	ldr	r3, [pc, #400]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002630:	edd3 7a00 	vldr	s15, [r3]
 8002634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002638:	ee37 7a27 	vadd.f32	s14, s14, s15
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 800264c:	f000 bc62 	b.w	8002f14 <TrajectoryEvaluation+0xa9c>
	}
	else if( t >= traject -> T[0] && t < traject -> T[1])
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8002656:	4b5a      	ldr	r3, [pc, #360]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002658:	edd3 7a00 	vldr	s15, [r3]
 800265c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002664:	f200 80b0 	bhi.w	80027c8 <TrajectoryEvaluation+0x350>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800266e:	4b54      	ldr	r3, [pc, #336]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002670:	edd3 7a00 	vldr	s15, [r3]
 8002674:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267c:	f340 80a4 	ble.w	80027c8 <TrajectoryEvaluation+0x350>
	{
		traject -> QJ = traject -> A[1];
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[1]*t + traject -> B[1];
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002690:	4b4b      	ldr	r3, [pc, #300]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80026a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	ed93 7a04 	vldr	s14, [r3, #16]
 80026b0:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <TrajectoryEvaluation+0x348>)
 80026b2:	edd3 6a00 	vldr	s13, [r3]
 80026b6:	4b42      	ldr	r3, [pc, #264]	; (80027c0 <TrajectoryEvaluation+0x348>)
 80026b8:	edd3 7a00 	vldr	s15, [r3]
 80026bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80026c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80026d2:	4b3b      	ldr	r3, [pc, #236]	; (80027c0 <TrajectoryEvaluation+0x348>)
 80026d4:	edd3 7a00 	vldr	s15, [r3]
 80026d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80026e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[1]*(tP*tP)/2 + traject -> B[1]*tP + traject -> C[1];
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	ed93 7a04 	vldr	s14, [r3, #16]
 80026f6:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <TrajectoryEvaluation+0x34c>)
 80026f8:	edd3 6a00 	vldr	s13, [r3]
 80026fc:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <TrajectoryEvaluation+0x34c>)
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800270e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002718:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <TrajectoryEvaluation+0x34c>)
 800271a:	edd3 7a00 	vldr	s15, [r3]
 800271e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002722:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800272c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	edd3 6a04 	vldr	s13, [r3, #16]
 8002742:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002744:	ed93 6a00 	vldr	s12, [r3]
 8002748:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <TrajectoryEvaluation+0x348>)
 800274a:	edd3 7a00 	vldr	s15, [r3]
 800274e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002754:	edd3 7a00 	vldr	s15, [r3]
 8002758:	ee66 7a27 	vmul.f32	s15, s12, s15
 800275c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002760:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002764:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002768:	ee37 7a27 	vadd.f32	s14, s14, s15
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <TrajectoryEvaluation+0x348>)
 8002774:	ed93 6a00 	vldr	s12, [r3]
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <TrajectoryEvaluation+0x348>)
 800277a:	edd3 7a00 	vldr	s15, [r3]
 800277e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002782:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002786:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800278a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800278e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <TrajectoryEvaluation+0x348>)
 800279a:	edd3 7a00 	vldr	s15, [r3]
 800279e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80027ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 80027b6:	e3ad      	b.n	8002f14 <TrajectoryEvaluation+0xa9c>
 80027b8:	00000000 	.word	0x00000000
 80027bc:	412e8480 	.word	0x412e8480
 80027c0:	200003e4 	.word	0x200003e4
 80027c4:	200003e8 	.word	0x200003e8
	}
	else if( t >= traject -> T[1] && t < traject -> T[2])
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80027ce:	4bb2      	ldr	r3, [pc, #712]	; (8002a98 <TrajectoryEvaluation+0x620>)
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027dc:	f200 80a8 	bhi.w	8002930 <TrajectoryEvaluation+0x4b8>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80027e6:	4bac      	ldr	r3, [pc, #688]	; (8002a98 <TrajectoryEvaluation+0x620>)
 80027e8:	edd3 7a00 	vldr	s15, [r3]
 80027ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f4:	f340 809c 	ble.w	8002930 <TrajectoryEvaluation+0x4b8>
	{
		traject -> QJ = traject -> A[2];
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[2]*t + traject -> B[2];
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	ed93 7a05 	vldr	s14, [r3, #20]
 8002808:	4ba3      	ldr	r3, [pc, #652]	; (8002a98 <TrajectoryEvaluation+0x620>)
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	ed93 7a05 	vldr	s14, [r3, #20]
 8002828:	4b9b      	ldr	r3, [pc, #620]	; (8002a98 <TrajectoryEvaluation+0x620>)
 800282a:	edd3 6a00 	vldr	s13, [r3]
 800282e:	4b9a      	ldr	r3, [pc, #616]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002840:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800284a:	4b93      	ldr	r3, [pc, #588]	; (8002a98 <TrajectoryEvaluation+0x620>)
 800284c:	edd3 7a00 	vldr	s15, [r3]
 8002850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002854:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800285e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[2]*(tP*tP)/2 + traject -> B[2]*tP + traject -> C[2];
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	ed93 7a05 	vldr	s14, [r3, #20]
 800286e:	4b8b      	ldr	r3, [pc, #556]	; (8002a9c <TrajectoryEvaluation+0x624>)
 8002870:	edd3 6a00 	vldr	s13, [r3]
 8002874:	4b89      	ldr	r3, [pc, #548]	; (8002a9c <TrajectoryEvaluation+0x624>)
 8002876:	edd3 7a00 	vldr	s15, [r3]
 800287a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800287e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002882:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002886:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002890:	4b82      	ldr	r3, [pc, #520]	; (8002a9c <TrajectoryEvaluation+0x624>)
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800289a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80028a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	edd3 6a05 	vldr	s13, [r3, #20]
 80028ba:	4b77      	ldr	r3, [pc, #476]	; (8002a98 <TrajectoryEvaluation+0x620>)
 80028bc:	ed93 6a00 	vldr	s12, [r3]
 80028c0:	4b75      	ldr	r3, [pc, #468]	; (8002a98 <TrajectoryEvaluation+0x620>)
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80028ca:	4b73      	ldr	r3, [pc, #460]	; (8002a98 <TrajectoryEvaluation+0x620>)
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028d8:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 80028dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80028ea:	4b6b      	ldr	r3, [pc, #428]	; (8002a98 <TrajectoryEvaluation+0x620>)
 80028ec:	ed93 6a00 	vldr	s12, [r3]
 80028f0:	4b69      	ldr	r3, [pc, #420]	; (8002a98 <TrajectoryEvaluation+0x620>)
 80028f2:	edd3 7a00 	vldr	s15, [r3]
 80028f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028fe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002902:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002906:	ee37 7a27 	vadd.f32	s14, s14, s15
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8002910:	4b61      	ldr	r3, [pc, #388]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800291a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 800292e:	e2f1      	b.n	8002f14 <TrajectoryEvaluation+0xa9c>
	}
	else if( t >= traject -> T[2] && t < traject -> T[3])
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8002936:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002944:	f200 80ac 	bhi.w	8002aa0 <TrajectoryEvaluation+0x628>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800294e:	4b52      	ldr	r3, [pc, #328]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295c:	f340 80a0 	ble.w	8002aa0 <TrajectoryEvaluation+0x628>
	{
		traject -> QJ = traject -> A[3];
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[3]*t + traject -> B[3];
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002970:	4b49      	ldr	r3, [pc, #292]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	ee27 7a27 	vmul.f32	s14, s14, s15
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002990:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002992:	edd3 6a00 	vldr	s13, [r3]
 8002996:	4b40      	ldr	r3, [pc, #256]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002998:	edd3 7a00 	vldr	s15, [r3]
 800299c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80029a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80029b2:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <TrajectoryEvaluation+0x620>)
 80029b4:	edd3 7a00 	vldr	s15, [r3]
 80029b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80029c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[3]*(tP*tP)/2 + traject -> B[3]*tP + traject -> C[3];
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	ed93 7a06 	vldr	s14, [r3, #24]
 80029d6:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <TrajectoryEvaluation+0x624>)
 80029d8:	edd3 6a00 	vldr	s13, [r3]
 80029dc:	4b2f      	ldr	r3, [pc, #188]	; (8002a9c <TrajectoryEvaluation+0x624>)
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80029ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80029f8:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <TrajectoryEvaluation+0x624>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	edd3 6a06 	vldr	s13, [r3, #24]
 8002a22:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002a24:	ed93 6a00 	vldr	s12, [r3]
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002a2a:	edd3 7a00 	vldr	s15, [r3]
 8002a2e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002a34:	edd3 7a00 	vldr	s15, [r3]
 8002a38:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a40:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002a44:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002a54:	ed93 6a00 	vldr	s12, [r3]
 8002a58:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002a5a:	edd3 7a00 	vldr	s15, [r3]
 8002a5e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a66:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002a6a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <TrajectoryEvaluation+0x620>)
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002a96:	e23d      	b.n	8002f14 <TrajectoryEvaluation+0xa9c>
 8002a98:	200003e4 	.word	0x200003e4
 8002a9c:	200003e8 	.word	0x200003e8
	}
	else if( t >= traject -> T[3] && t < traject -> T[4])
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002aa6:	4bb2      	ldr	r3, [pc, #712]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002aa8:	edd3 7a00 	vldr	s15, [r3]
 8002aac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab4:	f200 80a8 	bhi.w	8002c08 <TrajectoryEvaluation+0x790>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002abe:	4bac      	ldr	r3, [pc, #688]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002ac0:	edd3 7a00 	vldr	s15, [r3]
 8002ac4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002acc:	f340 809c 	ble.w	8002c08 <TrajectoryEvaluation+0x790>
	{
		traject -> QJ = traject -> A[4];
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	69da      	ldr	r2, [r3, #28]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[4]*t + traject -> B[4];
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ae0:	4ba3      	ldr	r3, [pc, #652]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002ae2:	edd3 7a00 	vldr	s15, [r3]
 8002ae6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b00:	4b9b      	ldr	r3, [pc, #620]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002b02:	edd3 6a00 	vldr	s13, [r3]
 8002b06:	4b9a      	ldr	r3, [pc, #616]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002b08:	edd3 7a00 	vldr	s15, [r3]
 8002b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002b22:	4b93      	ldr	r3, [pc, #588]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002b24:	edd3 7a00 	vldr	s15, [r3]
 8002b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[4]*(tP*tP)/2 + traject -> B[4]*tP + traject -> C[4];
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b46:	4b8b      	ldr	r3, [pc, #556]	; (8002d74 <TrajectoryEvaluation+0x8fc>)
 8002b48:	edd3 6a00 	vldr	s13, [r3]
 8002b4c:	4b89      	ldr	r3, [pc, #548]	; (8002d74 <TrajectoryEvaluation+0x8fc>)
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002b68:	4b82      	ldr	r3, [pc, #520]	; (8002d74 <TrajectoryEvaluation+0x8fc>)
 8002b6a:	edd3 7a00 	vldr	s15, [r3]
 8002b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	edd3 6a07 	vldr	s13, [r3, #28]
 8002b92:	4b77      	ldr	r3, [pc, #476]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002b94:	ed93 6a00 	vldr	s12, [r3]
 8002b98:	4b75      	ldr	r3, [pc, #468]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ba2:	4b73      	ldr	r3, [pc, #460]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bb0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002bb4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002bc2:	4b6b      	ldr	r3, [pc, #428]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002bc4:	ed93 6a00 	vldr	s12, [r3]
 8002bc8:	4b69      	ldr	r3, [pc, #420]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002bca:	edd3 7a00 	vldr	s15, [r3]
 8002bce:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bd2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bd6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002bda:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002be8:	4b61      	ldr	r3, [pc, #388]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002bea:	edd3 7a00 	vldr	s15, [r3]
 8002bee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002c06:	e185      	b.n	8002f14 <TrajectoryEvaluation+0xa9c>
	}
	else if( t >= traject -> T[4] && t < traject -> T[5])
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002c0e:	4b58      	ldr	r3, [pc, #352]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002c10:	edd3 7a00 	vldr	s15, [r3]
 8002c14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1c:	f200 80ac 	bhi.w	8002d78 <TrajectoryEvaluation+0x900>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8002c26:	4b52      	ldr	r3, [pc, #328]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002c28:	edd3 7a00 	vldr	s15, [r3]
 8002c2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c34:	f340 80a0 	ble.w	8002d78 <TrajectoryEvaluation+0x900>
	{
		traject -> QJ = traject -> A[5];
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a1a      	ldr	r2, [r3, #32]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[5]*t + traject -> B[5];
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	ed93 7a08 	vldr	s14, [r3, #32]
 8002c48:	4b49      	ldr	r3, [pc, #292]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	ed93 7a08 	vldr	s14, [r3, #32]
 8002c68:	4b41      	ldr	r3, [pc, #260]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002c6a:	edd3 6a00 	vldr	s13, [r3]
 8002c6e:	4b40      	ldr	r3, [pc, #256]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002c70:	edd3 7a00 	vldr	s15, [r3]
 8002c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002c80:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002c8a:	4b39      	ldr	r3, [pc, #228]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002c8c:	edd3 7a00 	vldr	s15, [r3]
 8002c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[5]*(tP*tP)/2 + traject -> B[5]*tP + traject -> C[5];
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	ed93 7a08 	vldr	s14, [r3, #32]
 8002cae:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <TrajectoryEvaluation+0x8fc>)
 8002cb0:	edd3 6a00 	vldr	s13, [r3]
 8002cb4:	4b2f      	ldr	r3, [pc, #188]	; (8002d74 <TrajectoryEvaluation+0x8fc>)
 8002cb6:	edd3 7a00 	vldr	s15, [r3]
 8002cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002cc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002cd0:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <TrajectoryEvaluation+0x8fc>)
 8002cd2:	edd3 7a00 	vldr	s15, [r3]
 8002cd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	edd3 6a08 	vldr	s13, [r3, #32]
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002cfc:	ed93 6a00 	vldr	s12, [r3]
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002d02:	edd3 7a00 	vldr	s15, [r3]
 8002d06:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d0a:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002d0c:	edd3 7a00 	vldr	s15, [r3]
 8002d10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d18:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002d1c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002d2a:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002d2c:	ed93 6a00 	vldr	s12, [r3]
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002d32:	edd3 7a00 	vldr	s15, [r3]
 8002d36:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d3a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d3e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002d42:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <TrajectoryEvaluation+0x8f8>)
 8002d52:	edd3 7a00 	vldr	s15, [r3]
 8002d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002d6e:	e0d1      	b.n	8002f14 <TrajectoryEvaluation+0xa9c>
 8002d70:	200003e4 	.word	0x200003e4
 8002d74:	200003e8 	.word	0x200003e8
	}
	else if( t >= traject -> T[5] && t < traject -> T[6])
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8002d7e:	4b68      	ldr	r3, [pc, #416]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002d80:	edd3 7a00 	vldr	s15, [r3]
 8002d84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8c:	f200 80a8 	bhi.w	8002ee0 <TrajectoryEvaluation+0xa68>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8002d96:	4b62      	ldr	r3, [pc, #392]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002d98:	edd3 7a00 	vldr	s15, [r3]
 8002d9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da4:	f340 809c 	ble.w	8002ee0 <TrajectoryEvaluation+0xa68>
	{
		traject -> QJ = traject -> A[6];
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = traject -> A[6]*t + traject -> B[6];
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002db8:	4b59      	ldr	r3, [pc, #356]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002dba:	edd3 7a00 	vldr	s15, [r3]
 8002dbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002dd8:	4b51      	ldr	r3, [pc, #324]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002dda:	edd3 6a00 	vldr	s13, [r3]
 8002dde:	4b50      	ldr	r3, [pc, #320]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002de0:	edd3 7a00 	vldr	s15, [r3]
 8002de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002df0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002dfa:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002dfc:	edd3 7a00 	vldr	s15, [r3]
 8002e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		traject -> QVP = traject -> A[6]*(tP*tP)/2 + traject -> B[6]*tP + traject -> C[6];
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002e1e:	4b41      	ldr	r3, [pc, #260]	; (8002f24 <TrajectoryEvaluation+0xaac>)
 8002e20:	edd3 6a00 	vldr	s13, [r3]
 8002e24:	4b3f      	ldr	r3, [pc, #252]	; (8002f24 <TrajectoryEvaluation+0xaac>)
 8002e26:	edd3 7a00 	vldr	s15, [r3]
 8002e2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e32:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002e40:	4b38      	ldr	r3, [pc, #224]	; (8002f24 <TrajectoryEvaluation+0xaac>)
 8002e42:	edd3 7a00 	vldr	s15, [r3]
 8002e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qin + traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002e6c:	ed93 6a00 	vldr	s12, [r3]
 8002e70:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002e72:	edd3 7a00 	vldr	s15, [r3]
 8002e76:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e7a:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e88:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8002e8c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002e9a:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002e9c:	ed93 6a00 	vldr	s12, [r3]
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002eaa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002eae:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002eb2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002eb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8002ec0:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <TrajectoryEvaluation+0xaa8>)
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002ede:	e019      	b.n	8002f14 <TrajectoryEvaluation+0xa9c>
	}
	else
	{
		traject -> QJ = 0;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QA = 0;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		traject -> QV = 0;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		traject -> QVP = 0;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		traject -> QX = traject -> Qfinal;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	}

	return 1.0;
 8002f14:	bf00      	nop
}
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f1e:	bf00      	nop
 8002f20:	200003e4 	.word	0x200003e4
 8002f24:	200003e8 	.word	0x200003e8

08002f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f2e:	f002 fa81 	bl	8005434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f32:	f000 f8a9 	bl	8003088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f36:	f000 fa8d 	bl	8003454 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f3a:	f000 fa63 	bl	8003404 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002f3e:	f000 fa35 	bl	80033ac <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002f42:	f000 f909 	bl	8003158 <MX_I2C1_Init>
  MX_TIM11_Init();
 8002f46:	f000 fa0d 	bl	8003364 <MX_TIM11_Init>
  MX_TIM1_Init();
 8002f4a:	f000 f933 	bl	80031b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002f4e:	f000 f9b5 	bl	80032bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_Init();
 8002f52:	f000 fde3 	bl	8003b1c <Ringbuf_Init>
  KalmanMatrixInit(&KalmanVar);
 8002f56:	483d      	ldr	r0, [pc, #244]	; (800304c <main+0x124>)
 8002f58:	f7fd fefe 	bl	8000d58 <KalmanMatrixInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	483c      	ldr	r0, [pc, #240]	; (8003050 <main+0x128>)
 8002f60:	f005 fef2 	bl	8008d48 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8002f64:	483b      	ldr	r0, [pc, #236]	; (8003054 <main+0x12c>)
 8002f66:	f005 fe3d 	bl	8008be4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002f6a:	213c      	movs	r1, #60	; 0x3c
 8002f6c:	483a      	ldr	r0, [pc, #232]	; (8003058 <main+0x130>)
 8002f6e:	f006 f841 	bl	8008ff4 <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 8002f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b38      	ldr	r3, [pc, #224]	; (800305c <main+0x134>)
 8002f7c:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 8002f7e:	4b37      	ldr	r3, [pc, #220]	; (800305c <main+0x134>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a36      	ldr	r2, [pc, #216]	; (800305c <main+0x134>)
 8002f84:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 8002f86:	4b35      	ldr	r3, [pc, #212]	; (800305c <main+0x134>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a35      	ldr	r2, [pc, #212]	; (8003060 <main+0x138>)
 8002f8c:	6013      	str	r3, [r2, #0]
  PIDAController_Init(&PidVelo);
 8002f8e:	4835      	ldr	r0, [pc, #212]	; (8003064 <main+0x13c>)
 8002f90:	f7fe f9ee 	bl	8001370 <PIDAController_Init>
  PIDAController_Init(&PidPos);
 8002f94:	4834      	ldr	r0, [pc, #208]	; (8003068 <main+0x140>)
 8002f96:	f7fe f9eb 	bl	8001370 <PIDAController_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timeElapsed[0] = Micros();
 8002f9a:	f001 ff6f 	bl	8004e7c <Micros>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4932      	ldr	r1, [pc, #200]	; (800306c <main+0x144>)
 8002fa4:	e9c1 2300 	strd	r2, r3, [r1]
	  timeElapsed[1] = HAL_GetTick();
 8002fa8:	f002 faaa 	bl	8005500 <HAL_GetTick>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2200      	movs	r2, #0
 8002fb0:	469a      	mov	sl, r3
 8002fb2:	4693      	mov	fp, r2
 8002fb4:	4b2d      	ldr	r3, [pc, #180]	; (800306c <main+0x144>)
 8002fb6:	e9c3 ab02 	strd	sl, fp, [r3, #8]
	  RobotstateManagement();
 8002fba:	f001 faf9 	bl	80045b0 <RobotstateManagement>
	  if(Micros() - ControlLoopTime >= 10000)
 8002fbe:	f001 ff5d 	bl	8004e7c <Micros>
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <main+0x148>)
 8002fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc8:	1a84      	subs	r4, r0, r2
 8002fca:	eb61 0503 	sbc.w	r5, r1, r3
 8002fce:	f242 7310 	movw	r3, #10000	; 0x2710
 8002fd2:	429c      	cmp	r4, r3
 8002fd4:	f175 0300 	sbcs.w	r3, r5, #0
 8002fd8:	d3df      	bcc.n	8002f9a <main+0x72>
	  {
		ControlLoopTime  = Micros();
 8002fda:	f001 ff4f 	bl	8004e7c <Micros>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4923      	ldr	r1, [pc, #140]	; (8003070 <main+0x148>)
 8002fe4:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopStartTime = Micros();
 8002fe8:	f001 ff48 	bl	8004e7c <Micros>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4920      	ldr	r1, [pc, #128]	; (8003074 <main+0x14c>)
 8002ff2:	e9c1 2300 	strd	r2, r3, [r1]
		EncoderRead();
 8002ff6:	f000 faf3 	bl	80035e0 <EncoderRead>
		KalmanFilterFunction(&KalmanVar,PositionDeg[0]);
 8002ffa:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <main+0x150>)
 8002ffc:	edd3 7a00 	vldr	s15, [r3]
 8003000:	eeb0 0a67 	vmov.f32	s0, s15
 8003004:	4811      	ldr	r0, [pc, #68]	; (800304c <main+0x124>)
 8003006:	f7fe f885 	bl	8001114 <KalmanFilterFunction>
		Robot.Position = PositionDeg[0];
 800300a:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <main+0x150>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1b      	ldr	r2, [pc, #108]	; (800307c <main+0x154>)
 8003010:	6013      	str	r3, [r2, #0]
		Robot.Velocity = KalmanVar.MatState_Data[1];
 8003012:	4b0e      	ldr	r3, [pc, #56]	; (800304c <main+0x124>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	4a18      	ldr	r2, [pc, #96]	; (800307c <main+0x154>)
 800301a:	6053      	str	r3, [r2, #4]
		ControllLoopAndErrorHandler();
 800301c:	f000 fc56 	bl	80038cc <ControllLoopAndErrorHandler>
		CheckLoopStopTime = Micros();
 8003020:	f001 ff2c 	bl	8004e7c <Micros>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4915      	ldr	r1, [pc, #84]	; (8003080 <main+0x158>)
 800302a:	e9c1 2300 	strd	r2, r3, [r1]
		CheckLoopDiffTime = CheckLoopStopTime - CheckLoopStartTime;
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <main+0x158>)
 8003030:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <main+0x14c>)
 8003036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303a:	ebb0 0802 	subs.w	r8, r0, r2
 800303e:	eb61 0903 	sbc.w	r9, r1, r3
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <main+0x15c>)
 8003044:	e9c3 8900 	strd	r8, r9, [r3]
	  timeElapsed[0] = Micros();
 8003048:	e7a7      	b.n	8002f9a <main+0x72>
 800304a:	bf00      	nop
 800304c:	20000034 	.word	0x20000034
 8003050:	20000440 	.word	0x20000440
 8003054:	200004d0 	.word	0x200004d0
 8003058:	20000488 	.word	0x20000488
 800305c:	20000720 	.word	0x20000720
 8003060:	2000072c 	.word	0x2000072c
 8003064:	20000740 	.word	0x20000740
 8003068:	20000774 	.word	0x20000774
 800306c:	200006c0 	.word	0x200006c0
 8003070:	200008b0 	.word	0x200008b0
 8003074:	20000880 	.word	0x20000880
 8003078:	20000730 	.word	0x20000730
 800307c:	2000061c 	.word	0x2000061c
 8003080:	20000888 	.word	0x20000888
 8003084:	20000890 	.word	0x20000890

08003088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b094      	sub	sp, #80	; 0x50
 800308c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800308e:	f107 0320 	add.w	r3, r7, #32
 8003092:	2230      	movs	r2, #48	; 0x30
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f008 fa58 	bl	800b54c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800309c:	f107 030c 	add.w	r3, r7, #12
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ac:	2300      	movs	r3, #0
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	4b27      	ldr	r3, [pc, #156]	; (8003150 <SystemClock_Config+0xc8>)
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	4a26      	ldr	r2, [pc, #152]	; (8003150 <SystemClock_Config+0xc8>)
 80030b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ba:	6413      	str	r3, [r2, #64]	; 0x40
 80030bc:	4b24      	ldr	r3, [pc, #144]	; (8003150 <SystemClock_Config+0xc8>)
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030c8:	2300      	movs	r3, #0
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	4b21      	ldr	r3, [pc, #132]	; (8003154 <SystemClock_Config+0xcc>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a20      	ldr	r2, [pc, #128]	; (8003154 <SystemClock_Config+0xcc>)
 80030d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	4b1e      	ldr	r3, [pc, #120]	; (8003154 <SystemClock_Config+0xcc>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030e4:	2302      	movs	r3, #2
 80030e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030e8:	2301      	movs	r3, #1
 80030ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030ec:	2310      	movs	r3, #16
 80030ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030f0:	2302      	movs	r3, #2
 80030f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030f4:	2300      	movs	r3, #0
 80030f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80030f8:	2308      	movs	r3, #8
 80030fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80030fc:	2364      	movs	r3, #100	; 0x64
 80030fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003100:	2302      	movs	r3, #2
 8003102:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003104:	2304      	movs	r3, #4
 8003106:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003108:	f107 0320 	add.w	r3, r7, #32
 800310c:	4618      	mov	r0, r3
 800310e:	f005 f881 	bl	8008214 <HAL_RCC_OscConfig>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003118:	f001 fec8 	bl	8004eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800311c:	230f      	movs	r3, #15
 800311e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003120:	2302      	movs	r3, #2
 8003122:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800312c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003132:	f107 030c 	add.w	r3, r7, #12
 8003136:	2103      	movs	r1, #3
 8003138:	4618      	mov	r0, r3
 800313a:	f005 fae3 	bl	8008704 <HAL_RCC_ClockConfig>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003144:	f001 feb2 	bl	8004eac <Error_Handler>
  }
}
 8003148:	bf00      	nop
 800314a:	3750      	adds	r7, #80	; 0x50
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40023800 	.word	0x40023800
 8003154:	40007000 	.word	0x40007000

08003158 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800315c:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <MX_I2C1_Init+0x50>)
 800315e:	4a13      	ldr	r2, [pc, #76]	; (80031ac <MX_I2C1_Init+0x54>)
 8003160:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003162:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <MX_I2C1_Init+0x50>)
 8003164:	4a12      	ldr	r2, [pc, #72]	; (80031b0 <MX_I2C1_Init+0x58>)
 8003166:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <MX_I2C1_Init+0x50>)
 800316a:	2200      	movs	r2, #0
 800316c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800316e:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <MX_I2C1_Init+0x50>)
 8003170:	2200      	movs	r2, #0
 8003172:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <MX_I2C1_Init+0x50>)
 8003176:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800317a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800317c:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <MX_I2C1_Init+0x50>)
 800317e:	2200      	movs	r2, #0
 8003180:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <MX_I2C1_Init+0x50>)
 8003184:	2200      	movs	r2, #0
 8003186:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003188:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <MX_I2C1_Init+0x50>)
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <MX_I2C1_Init+0x50>)
 8003190:	2200      	movs	r2, #0
 8003192:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003194:	4804      	ldr	r0, [pc, #16]	; (80031a8 <MX_I2C1_Init+0x50>)
 8003196:	f003 f8c9 	bl	800632c <HAL_I2C_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80031a0:	f001 fe84 	bl	8004eac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	200003ec 	.word	0x200003ec
 80031ac:	40005400 	.word	0x40005400
 80031b0:	00061a80 	.word	0x00061a80

080031b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b092      	sub	sp, #72	; 0x48
 80031b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	611a      	str	r2, [r3, #16]
 80031d4:	615a      	str	r2, [r3, #20]
 80031d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031d8:	1d3b      	adds	r3, r7, #4
 80031da:	2220      	movs	r2, #32
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f008 f9b4 	bl	800b54c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031e4:	4b33      	ldr	r3, [pc, #204]	; (80032b4 <MX_TIM1_Init+0x100>)
 80031e6:	4a34      	ldr	r2, [pc, #208]	; (80032b8 <MX_TIM1_Init+0x104>)
 80031e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80031ea:	4b32      	ldr	r3, [pc, #200]	; (80032b4 <MX_TIM1_Init+0x100>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031f0:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <MX_TIM1_Init+0x100>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80031f6:	4b2f      	ldr	r3, [pc, #188]	; (80032b4 <MX_TIM1_Init+0x100>)
 80031f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80031fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031fe:	4b2d      	ldr	r3, [pc, #180]	; (80032b4 <MX_TIM1_Init+0x100>)
 8003200:	2200      	movs	r2, #0
 8003202:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003204:	4b2b      	ldr	r3, [pc, #172]	; (80032b4 <MX_TIM1_Init+0x100>)
 8003206:	2200      	movs	r2, #0
 8003208:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800320a:	4b2a      	ldr	r3, [pc, #168]	; (80032b4 <MX_TIM1_Init+0x100>)
 800320c:	2200      	movs	r2, #0
 800320e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003210:	4828      	ldr	r0, [pc, #160]	; (80032b4 <MX_TIM1_Init+0x100>)
 8003212:	f005 fd49 	bl	8008ca8 <HAL_TIM_PWM_Init>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800321c:	f001 fe46 	bl	8004eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003220:	2300      	movs	r3, #0
 8003222:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003224:	2300      	movs	r3, #0
 8003226:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003228:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800322c:	4619      	mov	r1, r3
 800322e:	4821      	ldr	r0, [pc, #132]	; (80032b4 <MX_TIM1_Init+0x100>)
 8003230:	f006 fb92 	bl	8009958 <HAL_TIMEx_MasterConfigSynchronization>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800323a:	f001 fe37 	bl	8004eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800323e:	2360      	movs	r3, #96	; 0x60
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003246:	2300      	movs	r3, #0
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800324a:	2300      	movs	r3, #0
 800324c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800324e:	2300      	movs	r3, #0
 8003250:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003252:	2300      	movs	r3, #0
 8003254:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800325a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800325e:	2200      	movs	r2, #0
 8003260:	4619      	mov	r1, r3
 8003262:	4814      	ldr	r0, [pc, #80]	; (80032b4 <MX_TIM1_Init+0x100>)
 8003264:	f006 f85c 	bl	8009320 <HAL_TIM_PWM_ConfigChannel>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800326e:	f001 fe1d 	bl	8004eac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800328a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800328c:	2300      	movs	r3, #0
 800328e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003290:	1d3b      	adds	r3, r7, #4
 8003292:	4619      	mov	r1, r3
 8003294:	4807      	ldr	r0, [pc, #28]	; (80032b4 <MX_TIM1_Init+0x100>)
 8003296:	f006 fbcd 	bl	8009a34 <HAL_TIMEx_ConfigBreakDeadTime>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80032a0:	f001 fe04 	bl	8004eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80032a4:	4803      	ldr	r0, [pc, #12]	; (80032b4 <MX_TIM1_Init+0x100>)
 80032a6:	f001 ff1d 	bl	80050e4 <HAL_TIM_MspPostInit>

}
 80032aa:	bf00      	nop
 80032ac:	3748      	adds	r7, #72	; 0x48
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000440 	.word	0x20000440
 80032b8:	40010000 	.word	0x40010000

080032bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08c      	sub	sp, #48	; 0x30
 80032c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032c2:	f107 030c 	add.w	r3, r7, #12
 80032c6:	2224      	movs	r2, #36	; 0x24
 80032c8:	2100      	movs	r1, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f008 f93e 	bl	800b54c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d0:	1d3b      	adds	r3, r7, #4
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032d8:	4b21      	ldr	r3, [pc, #132]	; (8003360 <MX_TIM2_Init+0xa4>)
 80032da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80032e0:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <MX_TIM2_Init+0xa4>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032e6:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <MX_TIM2_Init+0xa4>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 80032ec:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <MX_TIM2_Init+0xa4>)
 80032ee:	f642 62df 	movw	r2, #11999	; 0x2edf
 80032f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032f4:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <MX_TIM2_Init+0xa4>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032fa:	4b19      	ldr	r3, [pc, #100]	; (8003360 <MX_TIM2_Init+0xa4>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003300:	2303      	movs	r3, #3
 8003302:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003304:	2300      	movs	r3, #0
 8003306:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003308:	2301      	movs	r3, #1
 800330a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003314:	2300      	movs	r3, #0
 8003316:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003318:	2301      	movs	r3, #1
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800331c:	2300      	movs	r3, #0
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003324:	f107 030c 	add.w	r3, r7, #12
 8003328:	4619      	mov	r1, r3
 800332a:	480d      	ldr	r0, [pc, #52]	; (8003360 <MX_TIM2_Init+0xa4>)
 800332c:	f005 fdbc 	bl	8008ea8 <HAL_TIM_Encoder_Init>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003336:	f001 fdb9 	bl	8004eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003342:	1d3b      	adds	r3, r7, #4
 8003344:	4619      	mov	r1, r3
 8003346:	4806      	ldr	r0, [pc, #24]	; (8003360 <MX_TIM2_Init+0xa4>)
 8003348:	f006 fb06 	bl	8009958 <HAL_TIMEx_MasterConfigSynchronization>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003352:	f001 fdab 	bl	8004eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003356:	bf00      	nop
 8003358:	3730      	adds	r7, #48	; 0x30
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000488 	.word	0x20000488

08003364 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003368:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <MX_TIM11_Init+0x40>)
 800336a:	4a0f      	ldr	r2, [pc, #60]	; (80033a8 <MX_TIM11_Init+0x44>)
 800336c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800336e:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <MX_TIM11_Init+0x40>)
 8003370:	2263      	movs	r2, #99	; 0x63
 8003372:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <MX_TIM11_Init+0x40>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <MX_TIM11_Init+0x40>)
 800337c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003380:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003382:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <MX_TIM11_Init+0x40>)
 8003384:	2200      	movs	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <MX_TIM11_Init+0x40>)
 800338a:	2200      	movs	r2, #0
 800338c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800338e:	4805      	ldr	r0, [pc, #20]	; (80033a4 <MX_TIM11_Init+0x40>)
 8003390:	f005 fbd8 	bl	8008b44 <HAL_TIM_Base_Init>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800339a:	f001 fd87 	bl	8004eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	200004d0 	.word	0x200004d0
 80033a8:	40014800 	.word	0x40014800

080033ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033b0:	4b12      	ldr	r3, [pc, #72]	; (80033fc <MX_USART2_UART_Init+0x50>)
 80033b2:	4a13      	ldr	r2, [pc, #76]	; (8003400 <MX_USART2_UART_Init+0x54>)
 80033b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <MX_USART2_UART_Init+0x50>)
 80033b8:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80033bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <MX_USART2_UART_Init+0x50>)
 80033c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033c4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033c6:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <MX_USART2_UART_Init+0x50>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <MX_USART2_UART_Init+0x50>)
 80033ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <MX_USART2_UART_Init+0x50>)
 80033d6:	220c      	movs	r2, #12
 80033d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <MX_USART2_UART_Init+0x50>)
 80033dc:	2200      	movs	r2, #0
 80033de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <MX_USART2_UART_Init+0x50>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033e6:	4805      	ldr	r0, [pc, #20]	; (80033fc <MX_USART2_UART_Init+0x50>)
 80033e8:	f006 fb8a 	bl	8009b00 <HAL_UART_Init>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80033f2:	f001 fd5b 	bl	8004eac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000518 	.word	0x20000518
 8003400:	40004400 	.word	0x40004400

08003404 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	607b      	str	r3, [r7, #4]
 800340e:	4b10      	ldr	r3, [pc, #64]	; (8003450 <MX_DMA_Init+0x4c>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	4a0f      	ldr	r2, [pc, #60]	; (8003450 <MX_DMA_Init+0x4c>)
 8003414:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003418:	6313      	str	r3, [r2, #48]	; 0x30
 800341a:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <MX_DMA_Init+0x4c>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	2100      	movs	r1, #0
 800342a:	2010      	movs	r0, #16
 800342c:	f002 f94f 	bl	80056ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003430:	2010      	movs	r0, #16
 8003432:	f002 f968 	bl	8005706 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003436:	2200      	movs	r2, #0
 8003438:	2100      	movs	r1, #0
 800343a:	2011      	movs	r0, #17
 800343c:	f002 f947 	bl	80056ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003440:	2011      	movs	r0, #17
 8003442:	f002 f960 	bl	8005706 <HAL_NVIC_EnableIRQ>

}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800

08003454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	; 0x28
 8003458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345a:	f107 0314 	add.w	r3, r7, #20
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	605a      	str	r2, [r3, #4]
 8003464:	609a      	str	r2, [r3, #8]
 8003466:	60da      	str	r2, [r3, #12]
 8003468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	4b4e      	ldr	r3, [pc, #312]	; (80035a8 <MX_GPIO_Init+0x154>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	4a4d      	ldr	r2, [pc, #308]	; (80035a8 <MX_GPIO_Init+0x154>)
 8003474:	f043 0304 	orr.w	r3, r3, #4
 8003478:	6313      	str	r3, [r2, #48]	; 0x30
 800347a:	4b4b      	ldr	r3, [pc, #300]	; (80035a8 <MX_GPIO_Init+0x154>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	4b47      	ldr	r3, [pc, #284]	; (80035a8 <MX_GPIO_Init+0x154>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	4a46      	ldr	r2, [pc, #280]	; (80035a8 <MX_GPIO_Init+0x154>)
 8003490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003494:	6313      	str	r3, [r2, #48]	; 0x30
 8003496:	4b44      	ldr	r3, [pc, #272]	; (80035a8 <MX_GPIO_Init+0x154>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	4b40      	ldr	r3, [pc, #256]	; (80035a8 <MX_GPIO_Init+0x154>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	4a3f      	ldr	r2, [pc, #252]	; (80035a8 <MX_GPIO_Init+0x154>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6313      	str	r3, [r2, #48]	; 0x30
 80034b2:	4b3d      	ldr	r3, [pc, #244]	; (80035a8 <MX_GPIO_Init+0x154>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <MX_GPIO_Init+0x154>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a38      	ldr	r2, [pc, #224]	; (80035a8 <MX_GPIO_Init+0x154>)
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b36      	ldr	r3, [pc, #216]	; (80035a8 <MX_GPIO_Init+0x154>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	607b      	str	r3, [r7, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 80034da:	2200      	movs	r2, #0
 80034dc:	f44f 7108 	mov.w	r1, #544	; 0x220
 80034e0:	4832      	ldr	r0, [pc, #200]	; (80035ac <MX_GPIO_Init+0x158>)
 80034e2:	f002 fed7 	bl	8006294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin, GPIO_PIN_RESET);
 80034e6:	2200      	movs	r2, #0
 80034e8:	f44f 6183 	mov.w	r1, #1048	; 0x418
 80034ec:	4830      	ldr	r0, [pc, #192]	; (80035b0 <MX_GPIO_Init+0x15c>)
 80034ee:	f002 fed1 	bl	8006294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80034f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80034fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003502:	f107 0314 	add.w	r3, r7, #20
 8003506:	4619      	mov	r1, r3
 8003508:	482a      	ldr	r0, [pc, #168]	; (80035b4 <MX_GPIO_Init+0x160>)
 800350a:	f002 fd27 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 800350e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003514:	2301      	movs	r3, #1
 8003516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351c:	2300      	movs	r3, #0
 800351e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003520:	f107 0314 	add.w	r3, r7, #20
 8003524:	4619      	mov	r1, r3
 8003526:	4821      	ldr	r0, [pc, #132]	; (80035ac <MX_GPIO_Init+0x158>)
 8003528:	f002 fd18 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_RedLamp_Pin Pin_YelLamp_Pin Pin_BlueLamp_Pin */
  GPIO_InitStruct.Pin = Pin_RedLamp_Pin|Pin_YelLamp_Pin|Pin_BlueLamp_Pin;
 800352c:	f44f 6383 	mov.w	r3, #1048	; 0x418
 8003530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003532:	2301      	movs	r3, #1
 8003534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353a:	2300      	movs	r3, #0
 800353c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800353e:	f107 0314 	add.w	r3, r7, #20
 8003542:	4619      	mov	r1, r3
 8003544:	481a      	ldr	r0, [pc, #104]	; (80035b0 <MX_GPIO_Init+0x15c>)
 8003546:	f002 fd09 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Proxi_Pin */
  GPIO_InitStruct.Pin = Pin_Proxi_Pin;
 800354a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800354e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003550:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Proxi_GPIO_Port, &GPIO_InitStruct);
 800355a:	f107 0314 	add.w	r3, r7, #20
 800355e:	4619      	mov	r1, r3
 8003560:	4812      	ldr	r0, [pc, #72]	; (80035ac <MX_GPIO_Init+0x158>)
 8003562:	f002 fcfb 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : Pin_Emer_Pin */
  GPIO_InitStruct.Pin = Pin_Emer_Pin;
 8003566:	2320      	movs	r3, #32
 8003568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800356a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800356e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003570:	2300      	movs	r3, #0
 8003572:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pin_Emer_GPIO_Port, &GPIO_InitStruct);
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	4619      	mov	r1, r3
 800357a:	480d      	ldr	r0, [pc, #52]	; (80035b0 <MX_GPIO_Init+0x15c>)
 800357c:	f002 fcee 	bl	8005f5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003580:	2200      	movs	r2, #0
 8003582:	2100      	movs	r1, #0
 8003584:	2017      	movs	r0, #23
 8003586:	f002 f8a2 	bl	80056ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800358a:	2017      	movs	r0, #23
 800358c:	f002 f8bb 	bl	8005706 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003590:	2200      	movs	r2, #0
 8003592:	2100      	movs	r1, #0
 8003594:	2028      	movs	r0, #40	; 0x28
 8003596:	f002 f89a 	bl	80056ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800359a:	2028      	movs	r0, #40	; 0x28
 800359c:	f002 f8b3 	bl	8005706 <HAL_NVIC_EnableIRQ>

}
 80035a0:	bf00      	nop
 80035a2:	3728      	adds	r7, #40	; 0x28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40020000 	.word	0x40020000
 80035b0:	40020400 	.word	0x40020400
 80035b4:	40020800 	.word	0x40020800

080035b8 <Int32Abs>:

/* USER CODE BEGIN 4 */
uint32_t Int32Abs(int32_t number)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
	if(number<0){
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	da02      	bge.n	80035cc <Int32Abs+0x14>
		return number*-1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	425b      	negs	r3, r3
 80035ca:	e000      	b.n	80035ce <Int32Abs+0x16>
	}else{
		return number;
 80035cc:	687b      	ldr	r3, [r7, #4]
	}
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	0000      	movs	r0, r0
 80035dc:	0000      	movs	r0, r0
	...

080035e0 <EncoderRead>:

void EncoderRead()
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 80035e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	461a      	mov	r2, r3
 80035ec:	4b32      	ldr	r3, [pc, #200]	; (80036b8 <EncoderRead+0xd8>)
 80035ee:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 80035f0:	4b31      	ldr	r3, [pc, #196]	; (80036b8 <EncoderRead+0xd8>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b30      	ldr	r3, [pc, #192]	; (80036b8 <EncoderRead+0xd8>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	1ad2      	subs	r2, r2, r3
 80035fa:	4b30      	ldr	r3, [pc, #192]	; (80036bc <EncoderRead+0xdc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	425b      	negs	r3, r3
 8003600:	429a      	cmp	r2, r3
 8003602:	da07      	bge.n	8003614 <EncoderRead+0x34>
		WrappingStep+=12000;
 8003604:	4b2e      	ldr	r3, [pc, #184]	; (80036c0 <EncoderRead+0xe0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 800360c:	3320      	adds	r3, #32
 800360e:	4a2c      	ldr	r2, [pc, #176]	; (80036c0 <EncoderRead+0xe0>)
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e00f      	b.n	8003634 <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 8003614:	4b28      	ldr	r3, [pc, #160]	; (80036b8 <EncoderRead+0xd8>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4b27      	ldr	r3, [pc, #156]	; (80036b8 <EncoderRead+0xd8>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	1ad2      	subs	r2, r2, r3
 800361e:	4b27      	ldr	r3, [pc, #156]	; (80036bc <EncoderRead+0xdc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	db06      	blt.n	8003634 <EncoderRead+0x54>
		WrappingStep-=12000;
 8003626:	4b26      	ldr	r3, [pc, #152]	; (80036c0 <EncoderRead+0xe0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 800362e:	3b20      	subs	r3, #32
 8003630:	4a23      	ldr	r2, [pc, #140]	; (80036c0 <EncoderRead+0xe0>)
 8003632:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 8003634:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <EncoderRead+0xd8>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b21      	ldr	r3, [pc, #132]	; (80036c0 <EncoderRead+0xe0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4413      	add	r3, r2
 800363e:	4a21      	ldr	r2, [pc, #132]	; (80036c4 <EncoderRead+0xe4>)
 8003640:	6013      	str	r3, [r2, #0]
	PositionDeg[0] = (PositionRaw/12000.0)*360.0;
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <EncoderRead+0xe4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fc ff18 	bl	800047c <__aeabi_i2d>
 800364c:	a318      	add	r3, pc, #96	; (adr r3, 80036b0 <EncoderRead+0xd0>)
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	f7fd f8a7 	bl	80007a4 <__aeabi_ddiv>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <EncoderRead+0xe8>)
 8003664:	f7fc ff74 	bl	8000550 <__aeabi_dmul>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	f7fd f9a0 	bl	80009b4 <__aeabi_d2f>
 8003674:	4603      	mov	r3, r0
 8003676:	4a15      	ldr	r2, [pc, #84]	; (80036cc <EncoderRead+0xec>)
 8003678:	6013      	str	r3, [r2, #0]
	VelocityDeg = ((PositionDeg[0] - PositionDeg[1])/dt);
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <EncoderRead+0xec>)
 800367c:	ed93 7a00 	vldr	s14, [r3]
 8003680:	4b12      	ldr	r3, [pc, #72]	; (80036cc <EncoderRead+0xec>)
 8003682:	edd3 7a01 	vldr	s15, [r3, #4]
 8003686:	ee37 7a67 	vsub.f32	s14, s14, s15
 800368a:	eddf 6a11 	vldr	s13, [pc, #68]	; 80036d0 <EncoderRead+0xf0>
 800368e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <EncoderRead+0xf4>)
 8003694:	edc3 7a00 	vstr	s15, [r3]
	EncoderRawData[1] = EncoderRawData[0];
 8003698:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <EncoderRead+0xd8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a06      	ldr	r2, [pc, #24]	; (80036b8 <EncoderRead+0xd8>)
 800369e:	6053      	str	r3, [r2, #4]
	PositionDeg[1] = PositionDeg[0];
 80036a0:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <EncoderRead+0xec>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a09      	ldr	r2, [pc, #36]	; (80036cc <EncoderRead+0xec>)
 80036a6:	6053      	str	r3, [r2, #4]
}
 80036a8:	bf00      	nop
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	f3af 8000 	nop.w
 80036b0:	00000000 	.word	0x00000000
 80036b4:	40c77000 	.word	0x40c77000
 80036b8:	20000720 	.word	0x20000720
 80036bc:	200003b4 	.word	0x200003b4
 80036c0:	20000728 	.word	0x20000728
 80036c4:	2000072c 	.word	0x2000072c
 80036c8:	40768000 	.word	0x40768000
 80036cc:	20000730 	.word	0x20000730
 80036d0:	3c23d70a 	.word	0x3c23d70a
 80036d4:	20000738 	.word	0x20000738

080036d8 <Drivemotor>:

void Drivemotor(int32_t PWM){
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
		if(PWM<=0 && PWM>=-PWM_MAX){
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	dc11      	bgt.n	800370a <Drivemotor+0x32>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a25      	ldr	r2, [pc, #148]	; (8003780 <Drivemotor+0xa8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	db0d      	blt.n	800370a <Drivemotor+0x32>
			htim1.Instance->CCR1=Int32Abs(PWM);
 80036ee:	4b25      	ldr	r3, [pc, #148]	; (8003784 <Drivemotor+0xac>)
 80036f0:	681c      	ldr	r4, [r3, #0]
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff ff60 	bl	80035b8 <Int32Abs>
 80036f8:	4603      	mov	r3, r0
 80036fa:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 80036fc:	2200      	movs	r2, #0
 80036fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003702:	4821      	ldr	r0, [pc, #132]	; (8003788 <Drivemotor+0xb0>)
 8003704:	f002 fdc6 	bl	8006294 <HAL_GPIO_WritePin>
 8003708:	e036      	b.n	8003778 <Drivemotor+0xa0>
		}else if (PWM<-PWM_MAX){
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a1c      	ldr	r2, [pc, #112]	; (8003780 <Drivemotor+0xa8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	da0b      	bge.n	800372a <Drivemotor+0x52>
			htim1.Instance->CCR1=PWM_MAX;
 8003712:	4b1c      	ldr	r3, [pc, #112]	; (8003784 <Drivemotor+0xac>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f242 7210 	movw	r2, #10000	; 0x2710
 800371a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 800371c:	2200      	movs	r2, #0
 800371e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003722:	4819      	ldr	r0, [pc, #100]	; (8003788 <Drivemotor+0xb0>)
 8003724:	f002 fdb6 	bl	8006294 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}else if(PWM>PWM_MAX){
			htim1.Instance->CCR1=PWM_MAX;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
		}
}
 8003728:	e026      	b.n	8003778 <Drivemotor+0xa0>
		}else if(PWM>=0 && PWM<=PWM_MAX){
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	db12      	blt.n	8003756 <Drivemotor+0x7e>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f242 7210 	movw	r2, #10000	; 0x2710
 8003736:	4293      	cmp	r3, r2
 8003738:	dc0d      	bgt.n	8003756 <Drivemotor+0x7e>
			htim1.Instance->CCR1=Int32Abs(PWM);
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <Drivemotor+0xac>)
 800373c:	681c      	ldr	r4, [r3, #0]
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff ff3a 	bl	80035b8 <Int32Abs>
 8003744:	4603      	mov	r3, r0
 8003746:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003748:	2201      	movs	r2, #1
 800374a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800374e:	480e      	ldr	r0, [pc, #56]	; (8003788 <Drivemotor+0xb0>)
 8003750:	f002 fda0 	bl	8006294 <HAL_GPIO_WritePin>
 8003754:	e010      	b.n	8003778 <Drivemotor+0xa0>
		}else if(PWM>PWM_MAX){
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f242 7210 	movw	r2, #10000	; 0x2710
 800375c:	4293      	cmp	r3, r2
 800375e:	dd0b      	ble.n	8003778 <Drivemotor+0xa0>
			htim1.Instance->CCR1=PWM_MAX;
 8003760:	4b08      	ldr	r3, [pc, #32]	; (8003784 <Drivemotor+0xac>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f242 7210 	movw	r2, #10000	; 0x2710
 8003768:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 800376a:	2201      	movs	r2, #1
 800376c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003770:	4805      	ldr	r0, [pc, #20]	; (8003788 <Drivemotor+0xb0>)
 8003772:	f002 fd8f 	bl	8006294 <HAL_GPIO_WritePin>
}
 8003776:	e7ff      	b.n	8003778 <Drivemotor+0xa0>
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	bd90      	pop	{r4, r7, pc}
 8003780:	ffffd8f0 	.word	0xffffd8f0
 8003784:	20000440 	.word	0x20000440
 8003788:	40020000 	.word	0x40020000
 800378c:	00000000 	.word	0x00000000

08003790 <InverseTFofMotor>:

float InverseTFofMotor(float Velo, float PredictVelo)
{
 8003790:	b5b0      	push	{r4, r5, r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	ed87 0a01 	vstr	s0, [r7, #4]
 800379a:	edc7 0a00 	vstr	s1, [r7]
	static float VeloLast = 0;
	static float Voltage = 0;
	static float VoltageLast = 0;
	static float Pwm = 0;
	Voltage = (PredictVelo - (1.298649403776808*Velo) + (0.413830007244888*VeloLast) - (0.492093238713741*VoltageLast))/0.660367603263632;
 800379e:	6838      	ldr	r0, [r7, #0]
 80037a0:	f7fc fe7e 	bl	80004a0 <__aeabi_f2d>
 80037a4:	4604      	mov	r4, r0
 80037a6:	460d      	mov	r5, r1
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7fc fe79 	bl	80004a0 <__aeabi_f2d>
 80037ae:	a345      	add	r3, pc, #276	; (adr r3, 80038c4 <InverseTFofMotor+0x134>)
 80037b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b4:	f7fc fecc 	bl	8000550 <__aeabi_dmul>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4620      	mov	r0, r4
 80037be:	4629      	mov	r1, r5
 80037c0:	f7fc fd0e 	bl	80001e0 <__aeabi_dsub>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4614      	mov	r4, r2
 80037ca:	461d      	mov	r5, r3
 80037cc:	4b38      	ldr	r3, [pc, #224]	; (80038b0 <InverseTFofMotor+0x120>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fc fe65 	bl	80004a0 <__aeabi_f2d>
 80037d6:	a32e      	add	r3, pc, #184	; (adr r3, 8003890 <InverseTFofMotor+0x100>)
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	f7fc feb8 	bl	8000550 <__aeabi_dmul>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4620      	mov	r0, r4
 80037e6:	4629      	mov	r1, r5
 80037e8:	f7fc fcfc 	bl	80001e4 <__adddf3>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4614      	mov	r4, r2
 80037f2:	461d      	mov	r5, r3
 80037f4:	4b2f      	ldr	r3, [pc, #188]	; (80038b4 <InverseTFofMotor+0x124>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fc fe51 	bl	80004a0 <__aeabi_f2d>
 80037fe:	a326      	add	r3, pc, #152	; (adr r3, 8003898 <InverseTFofMotor+0x108>)
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f7fc fea4 	bl	8000550 <__aeabi_dmul>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4620      	mov	r0, r4
 800380e:	4629      	mov	r1, r5
 8003810:	f7fc fce6 	bl	80001e0 <__aeabi_dsub>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4610      	mov	r0, r2
 800381a:	4619      	mov	r1, r3
 800381c:	a320      	add	r3, pc, #128	; (adr r3, 80038a0 <InverseTFofMotor+0x110>)
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	f7fc ffbf 	bl	80007a4 <__aeabi_ddiv>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4610      	mov	r0, r2
 800382c:	4619      	mov	r1, r3
 800382e:	f7fd f8c1 	bl	80009b4 <__aeabi_d2f>
 8003832:	4603      	mov	r3, r0
 8003834:	4a20      	ldr	r2, [pc, #128]	; (80038b8 <InverseTFofMotor+0x128>)
 8003836:	6013      	str	r3, [r2, #0]
	Pwm = (Voltage * 10000.0)/12.0;
 8003838:	4b1f      	ldr	r3, [pc, #124]	; (80038b8 <InverseTFofMotor+0x128>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f7fc fe2f 	bl	80004a0 <__aeabi_f2d>
 8003842:	a319      	add	r3, pc, #100	; (adr r3, 80038a8 <InverseTFofMotor+0x118>)
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	f7fc fe82 	bl	8000550 <__aeabi_dmul>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4610      	mov	r0, r2
 8003852:	4619      	mov	r1, r3
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	4b18      	ldr	r3, [pc, #96]	; (80038bc <InverseTFofMotor+0x12c>)
 800385a:	f7fc ffa3 	bl	80007a4 <__aeabi_ddiv>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4610      	mov	r0, r2
 8003864:	4619      	mov	r1, r3
 8003866:	f7fd f8a5 	bl	80009b4 <__aeabi_d2f>
 800386a:	4603      	mov	r3, r0
 800386c:	4a14      	ldr	r2, [pc, #80]	; (80038c0 <InverseTFofMotor+0x130>)
 800386e:	6013      	str	r3, [r2, #0]
	VoltageLast = Voltage;
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <InverseTFofMotor+0x128>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a0f      	ldr	r2, [pc, #60]	; (80038b4 <InverseTFofMotor+0x124>)
 8003876:	6013      	str	r3, [r2, #0]
	VeloLast = Velo;
 8003878:	4a0d      	ldr	r2, [pc, #52]	; (80038b0 <InverseTFofMotor+0x120>)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6013      	str	r3, [r2, #0]
	return Pwm;
 800387e:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <InverseTFofMotor+0x130>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	ee07 3a90 	vmov	s15, r3
}
 8003886:	eeb0 0a67 	vmov.f32	s0, s15
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bdb0      	pop	{r4, r5, r7, pc}
 8003890:	dace185d 	.word	0xdace185d
 8003894:	3fda7c30 	.word	0x3fda7c30
 8003898:	a3b6ed62 	.word	0xa3b6ed62
 800389c:	3fdf7e74 	.word	0x3fdf7e74
 80038a0:	3d6b5dd1 	.word	0x3d6b5dd1
 80038a4:	3fe521bb 	.word	0x3fe521bb
 80038a8:	00000000 	.word	0x00000000
 80038ac:	40c38800 	.word	0x40c38800
 80038b0:	200008c4 	.word	0x200008c4
 80038b4:	200008c8 	.word	0x200008c8
 80038b8:	200008cc 	.word	0x200008cc
 80038bc:	40280000 	.word	0x40280000
 80038c0:	200008d0 	.word	0x200008d0
 80038c4:	98e30f85 	.word	0x98e30f85
 80038c8:	3ff4c744 	.word	0x3ff4c744

080038cc <ControllLoopAndErrorHandler>:


void ControllLoopAndErrorHandler()
{
 80038cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af04      	add	r7, sp, #16
//	}
//	PIDAVelocityController_Update(&PidVelo, setpoint, KalmanVar.MatState_Data[1]);
//	invTFOutput = InverseTFofMotor(setpointLast,setpoint);
//	PWMCHECKER = PidVelo.ControllerOut + invTFOutput;
//	Drivemotor(PWMCHECKER);
	if (Robot.flagStartTime == 1)
 80038d4:	4b87      	ldr	r3, [pc, #540]	; (8003af4 <ControllLoopAndErrorHandler+0x228>)
 80038d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d10a      	bne.n	80038f4 <ControllLoopAndErrorHandler+0x28>
	{
		StartTime = Micros();
 80038de:	f001 facd 	bl	8004e7c <Micros>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4984      	ldr	r1, [pc, #528]	; (8003af8 <ControllLoopAndErrorHandler+0x22c>)
 80038e8:	e9c1 2300 	strd	r2, r3, [r1]
		Robot.flagStartTime = 0;
 80038ec:	4b81      	ldr	r3, [pc, #516]	; (8003af4 <ControllLoopAndErrorHandler+0x228>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	}
	CurrentTime = Micros();
 80038f4:	f001 fac2 	bl	8004e7c <Micros>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	497f      	ldr	r1, [pc, #508]	; (8003afc <ControllLoopAndErrorHandler+0x230>)
 80038fe:	e9c1 2300 	strd	r2, r3, [r1]
	PredictTime = CurrentTime + 10000;
 8003902:	4b7e      	ldr	r3, [pc, #504]	; (8003afc <ControllLoopAndErrorHandler+0x230>)
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	f242 7110 	movw	r1, #10000	; 0x2710
 800390c:	eb12 0801 	adds.w	r8, r2, r1
 8003910:	f143 0900 	adc.w	r9, r3, #0
 8003914:	4b7a      	ldr	r3, [pc, #488]	; (8003b00 <ControllLoopAndErrorHandler+0x234>)
 8003916:	e9c3 8900 	strd	r8, r9, [r3]
	TrajectoryEvaluation(&traject,StartTime,CurrentTime,PredictTime);
 800391a:	4b77      	ldr	r3, [pc, #476]	; (8003af8 <ControllLoopAndErrorHandler+0x22c>)
 800391c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003920:	4b76      	ldr	r3, [pc, #472]	; (8003afc <ControllLoopAndErrorHandler+0x230>)
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	4976      	ldr	r1, [pc, #472]	; (8003b00 <ControllLoopAndErrorHandler+0x234>)
 8003928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800392c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003930:	e9cd 2300 	strd	r2, r3, [sp]
 8003934:	4642      	mov	r2, r8
 8003936:	464b      	mov	r3, r9
 8003938:	4872      	ldr	r0, [pc, #456]	; (8003b04 <ControllLoopAndErrorHandler+0x238>)
 800393a:	f7fe fd9d 	bl	8002478 <TrajectoryEvaluation>
	if(Robot.MotorIsOn == 1)
 800393e:	4b6d      	ldr	r3, [pc, #436]	; (8003af4 <ControllLoopAndErrorHandler+0x228>)
 8003940:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003944:	2b01      	cmp	r3, #1
 8003946:	f040 80c3 	bne.w	8003ad0 <ControllLoopAndErrorHandler+0x204>
	{
		if (Robot.flagStartTime == 1)
 800394a:	4b6a      	ldr	r3, [pc, #424]	; (8003af4 <ControllLoopAndErrorHandler+0x228>)
 800394c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003950:	2b01      	cmp	r3, #1
 8003952:	d10a      	bne.n	800396a <ControllLoopAndErrorHandler+0x9e>
		{
			StartTime = Micros();
 8003954:	f001 fa92 	bl	8004e7c <Micros>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4966      	ldr	r1, [pc, #408]	; (8003af8 <ControllLoopAndErrorHandler+0x22c>)
 800395e:	e9c1 2300 	strd	r2, r3, [r1]
			Robot.flagStartTime = 0;
 8003962:	4b64      	ldr	r3, [pc, #400]	; (8003af4 <ControllLoopAndErrorHandler+0x228>)
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}
		CurrentTime = Micros();
 800396a:	f001 fa87 	bl	8004e7c <Micros>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4962      	ldr	r1, [pc, #392]	; (8003afc <ControllLoopAndErrorHandler+0x230>)
 8003974:	e9c1 2300 	strd	r2, r3, [r1]
		PredictTime = CurrentTime + 10000;
 8003978:	4b60      	ldr	r3, [pc, #384]	; (8003afc <ControllLoopAndErrorHandler+0x230>)
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	f242 7110 	movw	r1, #10000	; 0x2710
 8003982:	1854      	adds	r4, r2, r1
 8003984:	f143 0500 	adc.w	r5, r3, #0
 8003988:	4b5d      	ldr	r3, [pc, #372]	; (8003b00 <ControllLoopAndErrorHandler+0x234>)
 800398a:	e9c3 4500 	strd	r4, r5, [r3]
		TrajectoryEvaluation(&traject,StartTime,CurrentTime,PredictTime);
 800398e:	4b5a      	ldr	r3, [pc, #360]	; (8003af8 <ControllLoopAndErrorHandler+0x22c>)
 8003990:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003994:	4b59      	ldr	r3, [pc, #356]	; (8003afc <ControllLoopAndErrorHandler+0x230>)
 8003996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399a:	4959      	ldr	r1, [pc, #356]	; (8003b00 <ControllLoopAndErrorHandler+0x234>)
 800399c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039a4:	e9cd 2300 	strd	r2, r3, [sp]
 80039a8:	4622      	mov	r2, r4
 80039aa:	462b      	mov	r3, r5
 80039ac:	4855      	ldr	r0, [pc, #340]	; (8003b04 <ControllLoopAndErrorHandler+0x238>)
 80039ae:	f7fe fd63 	bl	8002478 <TrajectoryEvaluation>
		Robot.QX = traject.QX;
 80039b2:	4b54      	ldr	r3, [pc, #336]	; (8003b04 <ControllLoopAndErrorHandler+0x238>)
 80039b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039b8:	4a4e      	ldr	r2, [pc, #312]	; (8003af4 <ControllLoopAndErrorHandler+0x228>)
 80039ba:	6193      	str	r3, [r2, #24]
		Robot.QV = traject.QV;
 80039bc:	4b51      	ldr	r3, [pc, #324]	; (8003b04 <ControllLoopAndErrorHandler+0x238>)
 80039be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039c2:	4a4c      	ldr	r2, [pc, #304]	; (8003af4 <ControllLoopAndErrorHandler+0x228>)
 80039c4:	61d3      	str	r3, [r2, #28]
		if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0)
 80039c6:	4b4b      	ldr	r3, [pc, #300]	; (8003af4 <ControllLoopAndErrorHandler+0x228>)
 80039c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80039cc:	4b49      	ldr	r3, [pc, #292]	; (8003af4 <ControllLoopAndErrorHandler+0x228>)
 80039ce:	edd3 7a00 	vldr	s15, [r3]
 80039d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d6:	eeb0 0a67 	vmov.f32	s0, s15
 80039da:	f7fd feee 	bl	80017ba <AbsVal>
 80039de:	eef0 7a40 	vmov.f32	s15, s0
 80039e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80039e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ee:	d52a      	bpl.n	8003a46 <ControllLoopAndErrorHandler+0x17a>
 80039f0:	4b40      	ldr	r3, [pc, #256]	; (8003af4 <ControllLoopAndErrorHandler+0x228>)
 80039f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80039f6:	eeb0 0a67 	vmov.f32	s0, s15
 80039fa:	f7fd fede 	bl	80017ba <AbsVal>
 80039fe:	eef0 7a40 	vmov.f32	s15, s0
 8003a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0e:	d51a      	bpl.n	8003a46 <ControllLoopAndErrorHandler+0x17a>
		{
			PWMCHECKER = 0.0;
 8003a10:	4b3d      	ldr	r3, [pc, #244]	; (8003b08 <ControllLoopAndErrorHandler+0x23c>)
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
			Drivemotor(PWMCHECKER);
 8003a18:	4b3b      	ldr	r3, [pc, #236]	; (8003b08 <ControllLoopAndErrorHandler+0x23c>)
 8003a1a:	edd3 7a00 	vldr	s15, [r3]
 8003a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a22:	ee17 0a90 	vmov	r0, s15
 8003a26:	f7ff fe57 	bl	80036d8 <Drivemotor>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2108      	movs	r1, #8
 8003a2e:	4837      	ldr	r0, [pc, #220]	; (8003b0c <ControllLoopAndErrorHandler+0x240>)
 8003a30:	f002 fc30 	bl	8006294 <HAL_GPIO_WritePin>
			Robot.RunningFlag = 0;
 8003a34:	4b2f      	ldr	r3, [pc, #188]	; (8003af4 <ControllLoopAndErrorHandler+0x228>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			Robot.MotorIsOn = 0;
 8003a3c:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <ControllLoopAndErrorHandler+0x228>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	else
	{
		PWMCHECKER = 0.0;
		Drivemotor(PWMCHECKER);
	}
}
 8003a44:	e051      	b.n	8003aea <ControllLoopAndErrorHandler+0x21e>
			PIDAPositonController_Update(&PidPos, Robot.QX , Robot.Position);
 8003a46:	4b2b      	ldr	r3, [pc, #172]	; (8003af4 <ControllLoopAndErrorHandler+0x228>)
 8003a48:	edd3 7a06 	vldr	s15, [r3, #24]
 8003a4c:	4b29      	ldr	r3, [pc, #164]	; (8003af4 <ControllLoopAndErrorHandler+0x228>)
 8003a4e:	ed93 7a00 	vldr	s14, [r3]
 8003a52:	eef0 0a47 	vmov.f32	s1, s14
 8003a56:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5a:	482d      	ldr	r0, [pc, #180]	; (8003b10 <ControllLoopAndErrorHandler+0x244>)
 8003a5c:	f7fd fd96 	bl	800158c <PIDAPositonController_Update>
			PIDAVelocityController_Update(&PidVelo, Robot.QV + PidPos.ControllerOut, Robot.Velocity);
 8003a60:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <ControllLoopAndErrorHandler+0x228>)
 8003a62:	ed93 7a07 	vldr	s14, [r3, #28]
 8003a66:	4b2a      	ldr	r3, [pc, #168]	; (8003b10 <ControllLoopAndErrorHandler+0x244>)
 8003a68:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a70:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <ControllLoopAndErrorHandler+0x228>)
 8003a72:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a76:	eef0 0a47 	vmov.f32	s1, s14
 8003a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a7e:	4825      	ldr	r0, [pc, #148]	; (8003b14 <ControllLoopAndErrorHandler+0x248>)
 8003a80:	f7fd fca6 	bl	80013d0 <PIDAVelocityController_Update>
			invTFOutput = InverseTFofMotor(traject.QV,traject.QVP);
 8003a84:	4b1f      	ldr	r3, [pc, #124]	; (8003b04 <ControllLoopAndErrorHandler+0x238>)
 8003a86:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8003a8a:	4b1e      	ldr	r3, [pc, #120]	; (8003b04 <ControllLoopAndErrorHandler+0x238>)
 8003a8c:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8003a90:	eef0 0a47 	vmov.f32	s1, s14
 8003a94:	eeb0 0a67 	vmov.f32	s0, s15
 8003a98:	f7ff fe7a 	bl	8003790 <InverseTFofMotor>
 8003a9c:	eef0 7a40 	vmov.f32	s15, s0
 8003aa0:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <ControllLoopAndErrorHandler+0x24c>)
 8003aa2:	edc3 7a00 	vstr	s15, [r3]
			PWMCHECKER = PidVelo.ControllerOut + invTFOutput;
 8003aa6:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <ControllLoopAndErrorHandler+0x248>)
 8003aa8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003aac:	4b1a      	ldr	r3, [pc, #104]	; (8003b18 <ControllLoopAndErrorHandler+0x24c>)
 8003aae:	edd3 7a00 	vldr	s15, [r3]
 8003ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ab6:	4b14      	ldr	r3, [pc, #80]	; (8003b08 <ControllLoopAndErrorHandler+0x23c>)
 8003ab8:	edc3 7a00 	vstr	s15, [r3]
			Drivemotor(PWMCHECKER);
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <ControllLoopAndErrorHandler+0x23c>)
 8003abe:	edd3 7a00 	vldr	s15, [r3]
 8003ac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ac6:	ee17 0a90 	vmov	r0, s15
 8003aca:	f7ff fe05 	bl	80036d8 <Drivemotor>
}
 8003ace:	e00c      	b.n	8003aea <ControllLoopAndErrorHandler+0x21e>
		PWMCHECKER = 0.0;
 8003ad0:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <ControllLoopAndErrorHandler+0x23c>)
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
		Drivemotor(PWMCHECKER);
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <ControllLoopAndErrorHandler+0x23c>)
 8003ada:	edd3 7a00 	vldr	s15, [r3]
 8003ade:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ae2:	ee17 0a90 	vmov	r0, s15
 8003ae6:	f7ff fdf7 	bl	80036d8 <Drivemotor>
}
 8003aea:	bf00      	nop
 8003aec:	46bd      	mov	sp, r7
 8003aee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003af2:	bf00      	nop
 8003af4:	2000061c 	.word	0x2000061c
 8003af8:	20000868 	.word	0x20000868
 8003afc:	20000870 	.word	0x20000870
 8003b00:	20000878 	.word	0x20000878
 8003b04:	200007ac 	.word	0x200007ac
 8003b08:	200007a8 	.word	0x200007a8
 8003b0c:	40020400 	.word	0x40020400
 8003b10:	20000774 	.word	0x20000774
 8003b14:	20000740 	.word	0x20000740
 8003b18:	2000073c 	.word	0x2000073c

08003b1c <Ringbuf_Init>:

/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
	memset(RxBuf, '\0', RxBuf_SIZE);
 8003b20:	2214      	movs	r2, #20
 8003b22:	2100      	movs	r1, #0
 8003b24:	480e      	ldr	r0, [pc, #56]	; (8003b60 <Ringbuf_Init+0x44>)
 8003b26:	f007 fd11 	bl	800b54c <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 8003b2a:	2214      	movs	r2, #20
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	480d      	ldr	r0, [pc, #52]	; (8003b64 <Ringbuf_Init+0x48>)
 8003b30:	f007 fd0c 	bl	800b54c <memset>

	oldPos = 0;
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <Ringbuf_Init+0x4c>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <Ringbuf_Init+0x50>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	801a      	strh	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&UART, RxBuf, RxBuf_SIZE);
 8003b40:	2214      	movs	r2, #20
 8003b42:	4907      	ldr	r1, [pc, #28]	; (8003b60 <Ringbuf_Init+0x44>)
 8003b44:	480a      	ldr	r0, [pc, #40]	; (8003b70 <Ringbuf_Init+0x54>)
 8003b46:	f006 f8a7 	bl	8009c98 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <Ringbuf_Init+0x58>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <Ringbuf_Init+0x58>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0208 	bic.w	r2, r2, #8
 8003b58:	601a      	str	r2, [r3, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000654 	.word	0x20000654
 8003b64:	20000668 	.word	0x20000668
 8003b68:	20000686 	.word	0x20000686
 8003b6c:	20000688 	.word	0x20000688
 8003b70:	20000518 	.word	0x20000518
 8003b74:	2000055c 	.word	0x2000055c

08003b78 <checkSum>:
	oldPos = 0;
	newPos = 0;
}

void checkSum (uint8_t *buffertoCheckSum, uint16_t Size)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
	uint8_t sum = 0;
 8003b84:	2300      	movs	r3, #0
 8003b86:	73fb      	strb	r3, [r7, #15]
	modeByte = 0;
 8003b88:	4b52      	ldr	r3, [pc, #328]	; (8003cd4 <checkSum+0x15c>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
	switch(Size){
 8003b8e:	887b      	ldrh	r3, [r7, #2]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d84f      	bhi.n	8003c36 <checkSum+0xbe>
 8003b96:	a201      	add	r2, pc, #4	; (adr r2, 8003b9c <checkSum+0x24>)
 8003b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9c:	08003c8d 	.word	0x08003c8d
 8003ba0:	08003bad 	.word	0x08003bad
 8003ba4:	08003c8d 	.word	0x08003c8d
 8003ba8:	08003bd3 	.word	0x08003bd3
	case 1:
	case 3:
		break;
	case 2:
		if(!(checkAck(buffertoCheckSum, Size))) modeByte = sum = buffertoCheckSum[oldPos];
 8003bac:	887b      	ldrh	r3, [r7, #2]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f897 	bl	8003ce4 <checkAck>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d169      	bne.n	8003c90 <checkSum+0x118>
 8003bbc:	4b46      	ldr	r3, [pc, #280]	; (8003cd8 <checkSum+0x160>)
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	73fb      	strb	r3, [r7, #15]
 8003bca:	4a42      	ldr	r2, [pc, #264]	; (8003cd4 <checkSum+0x15c>)
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	7013      	strb	r3, [r2, #0]
		break;
 8003bd0:	e05e      	b.n	8003c90 <checkSum+0x118>
	case 4:
		if(checkAck(buffertoCheckSum, Size)) modeByte = sum = buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8003bd2:	887b      	ldrh	r3, [r7, #2]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f884 	bl	8003ce4 <checkAck>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <checkSum+0x80>
 8003be2:	4b3d      	ldr	r3, [pc, #244]	; (8003cd8 <checkSum+0x160>)
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	3302      	adds	r3, #2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	4413      	add	r3, r2
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	73fb      	strb	r3, [r7, #15]
 8003bf0:	4a38      	ldr	r2, [pc, #224]	; (8003cd4 <checkSum+0x15c>)
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	7013      	strb	r3, [r2, #0]
		else{
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
			modeByte = buffertoCheckSum[oldPos];
		}
		break;
 8003bf6:	e04c      	b.n	8003c92 <checkSum+0x11a>
			sum = buffertoCheckSum[oldPos] + buffertoCheckSum[oldPos+1 % MainBuf_SIZE] + buffertoCheckSum[oldPos+2 % MainBuf_SIZE];
 8003bf8:	4b37      	ldr	r3, [pc, #220]	; (8003cd8 <checkSum+0x160>)
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4413      	add	r3, r2
 8003c02:	781a      	ldrb	r2, [r3, #0]
 8003c04:	4b34      	ldr	r3, [pc, #208]	; (8003cd8 <checkSum+0x160>)
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	440b      	add	r3, r1
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	4413      	add	r3, r2
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	4b30      	ldr	r3, [pc, #192]	; (8003cd8 <checkSum+0x160>)
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	3302      	adds	r3, #2
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	440b      	add	r3, r1
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	4413      	add	r3, r2
 8003c22:	73fb      	strb	r3, [r7, #15]
			modeByte = buffertoCheckSum[oldPos];
 8003c24:	4b2c      	ldr	r3, [pc, #176]	; (8003cd8 <checkSum+0x160>)
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	4b28      	ldr	r3, [pc, #160]	; (8003cd4 <checkSum+0x15c>)
 8003c32:	701a      	strb	r2, [r3, #0]
		break;
 8003c34:	e02d      	b.n	8003c92 <checkSum+0x11a>
	default:
		modeByte = buffertoCheckSum[oldPos];
 8003c36:	4b28      	ldr	r3, [pc, #160]	; (8003cd8 <checkSum+0x160>)
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4413      	add	r3, r2
 8003c40:	781a      	ldrb	r2, [r3, #0]
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <checkSum+0x15c>)
 8003c44:	701a      	strb	r2, [r3, #0]
		for (int index = 0; index < Size-1; ++index)
 8003c46:	2300      	movs	r3, #0
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	e019      	b.n	8003c80 <checkSum+0x108>
		{
			sum = sum + buffertoCheckSum[oldPos+index % MainBuf_SIZE];
 8003c4c:	4b22      	ldr	r3, [pc, #136]	; (8003cd8 <checkSum+0x160>)
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	4b21      	ldr	r3, [pc, #132]	; (8003cdc <checkSum+0x164>)
 8003c56:	fb83 2301 	smull	r2, r3, r3, r1
 8003c5a:	10da      	asrs	r2, r3, #3
 8003c5c:	17cb      	asrs	r3, r1, #31
 8003c5e:	1ad2      	subs	r2, r2, r3
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	1aca      	subs	r2, r1, r3
 8003c6a:	1883      	adds	r3, r0, r2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4413      	add	r3, r2
 8003c72:	781a      	ldrb	r2, [r3, #0]
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	4413      	add	r3, r2
 8003c78:	73fb      	strb	r3, [r7, #15]
		for (int index = 0; index < Size-1; ++index)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	887b      	ldrh	r3, [r7, #2]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	dbe0      	blt.n	8003c4c <checkSum+0xd4>
 8003c8a:	e002      	b.n	8003c92 <checkSum+0x11a>
		break;
 8003c8c:	bf00      	nop
 8003c8e:	e000      	b.n	8003c92 <checkSum+0x11a>
		break;
 8003c90:	bf00      	nop
		}
	}

	if((uint8_t)buffertoCheckSum[oldPos+(Size-1) % MainBuf_SIZE] == (uint8_t)(~sum)) UARTstateManagement(MainBuf);
 8003c92:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <checkSum+0x160>)
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	887b      	ldrh	r3, [r7, #2]
 8003c9a:	1e59      	subs	r1, r3, #1
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <checkSum+0x164>)
 8003c9e:	fb83 2301 	smull	r2, r3, r3, r1
 8003ca2:	10da      	asrs	r2, r3, #3
 8003ca4:	17cb      	asrs	r3, r1, #31
 8003ca6:	1ad2      	subs	r2, r2, r3
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	1aca      	subs	r2, r1, r3
 8003cb2:	1883      	adds	r3, r0, r2
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4413      	add	r3, r2
 8003cba:	781a      	ldrb	r2, [r3, #0]
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d102      	bne.n	8003ccc <checkSum+0x154>
 8003cc6:	4806      	ldr	r0, [pc, #24]	; (8003ce0 <checkSum+0x168>)
 8003cc8:	f000 f89a 	bl	8003e00 <UARTstateManagement>
}
 8003ccc:	bf00      	nop
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	200006b0 	.word	0x200006b0
 8003cd8:	20000686 	.word	0x20000686
 8003cdc:	66666667 	.word	0x66666667
 8003ce0:	20000668 	.word	0x20000668

08003ce4 <checkAck>:

uint8_t checkAck (uint8_t *buffertoCheckAck, uint16_t Size)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	807b      	strh	r3, [r7, #2]
	if((buffertoCheckAck[oldPos] == 0b01011000) && (buffertoCheckAck[oldPos+1 % MainBuf_SIZE] == 0b01110101)) return 1;
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <checkAck+0x40>)
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b58      	cmp	r3, #88	; 0x58
 8003cfe:	d109      	bne.n	8003d14 <checkAck+0x30>
 8003d00:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <checkAck+0x40>)
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	3301      	adds	r3, #1
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	4413      	add	r3, r2
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b75      	cmp	r3, #117	; 0x75
 8003d0e:	d101      	bne.n	8003d14 <checkAck+0x30>
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <checkAck+0x32>
	else return 0;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000686 	.word	0x20000686

08003d28 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	807b      	strh	r3, [r7, #2]
        if (huart->Instance == USART2)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a28      	ldr	r2, [pc, #160]	; (8003ddc <HAL_UARTEx_RxEventCallback+0xb4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d14a      	bne.n	8003dd4 <HAL_UARTEx_RxEventCallback+0xac>
        {
                oldPos = newPos;
 8003d3e:	4b28      	ldr	r3, [pc, #160]	; (8003de0 <HAL_UARTEx_RxEventCallback+0xb8>)
 8003d40:	881a      	ldrh	r2, [r3, #0]
 8003d42:	4b28      	ldr	r3, [pc, #160]	; (8003de4 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003d44:	801a      	strh	r2, [r3, #0]
                dataSize = Size;
 8003d46:	4a28      	ldr	r2, [pc, #160]	; (8003de8 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003d48:	887b      	ldrh	r3, [r7, #2]
 8003d4a:	8013      	strh	r3, [r2, #0]
                if (oldPos+dataSize > MainBuf_SIZE)
 8003d4c:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	4413      	add	r3, r2
 8003d58:	2b14      	cmp	r3, #20
 8003d5a:	dd16      	ble.n	8003d8a <HAL_UARTEx_RxEventCallback+0x62>
                {
                        oldPos = 0;
 8003d5c:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	801a      	strh	r2, [r3, #0]
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8003d62:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	4b20      	ldr	r3, [pc, #128]	; (8003dec <HAL_UARTEx_RxEventCallback+0xc4>)
 8003d6a:	4413      	add	r3, r2
 8003d6c:	4a1e      	ldr	r2, [pc, #120]	; (8003de8 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003d6e:	8812      	ldrh	r2, [r2, #0]
 8003d70:	491f      	ldr	r1, [pc, #124]	; (8003df0 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003d72:	4618      	mov	r0, r3
 8003d74:	f007 fbdc 	bl	800b530 <memcpy>
                        newPos = dataSize+oldPos;
 8003d78:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003d7a:	881a      	ldrh	r2, [r3, #0]
 8003d7c:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	4413      	add	r3, r2
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	4b16      	ldr	r3, [pc, #88]	; (8003de0 <HAL_UARTEx_RxEventCallback+0xb8>)
 8003d86:	801a      	strh	r2, [r3, #0]
 8003d88:	e012      	b.n	8003db0 <HAL_UARTEx_RxEventCallback+0x88>
                }
                else
                {
                        memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)RxBuf, dataSize);
 8003d8a:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	4b16      	ldr	r3, [pc, #88]	; (8003dec <HAL_UARTEx_RxEventCallback+0xc4>)
 8003d92:	4413      	add	r3, r2
 8003d94:	4a14      	ldr	r2, [pc, #80]	; (8003de8 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003d96:	8812      	ldrh	r2, [r2, #0]
 8003d98:	4915      	ldr	r1, [pc, #84]	; (8003df0 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f007 fbc8 	bl	800b530 <memcpy>
                        newPos = dataSize+oldPos;
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003da2:	881a      	ldrh	r2, [r3, #0]
 8003da4:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	4413      	add	r3, r2
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <HAL_UARTEx_RxEventCallback+0xb8>)
 8003dae:	801a      	strh	r2, [r3, #0]
                }

                checkSum(MainBuf, Size);
 8003db0:	887b      	ldrh	r3, [r7, #2]
 8003db2:	4619      	mov	r1, r3
 8003db4:	480d      	ldr	r0, [pc, #52]	; (8003dec <HAL_UARTEx_RxEventCallback+0xc4>)
 8003db6:	f7ff fedf 	bl	8003b78 <checkSum>
                HAL_UARTEx_ReceiveToIdle_DMA(&UART, (uint8_t *) RxBuf, RxBuf_SIZE);
 8003dba:	2214      	movs	r2, #20
 8003dbc:	490c      	ldr	r1, [pc, #48]	; (8003df0 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003dbe:	480d      	ldr	r0, [pc, #52]	; (8003df4 <HAL_UARTEx_RxEventCallback+0xcc>)
 8003dc0:	f005 ff6a 	bl	8009c98 <HAL_UARTEx_ReceiveToIdle_DMA>
                __HAL_DMA_DISABLE_IT(&DMA, DMA_IT_HT);
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0208 	bic.w	r2, r2, #8
 8003dd2:	601a      	str	r2, [r3, #0]
        }
}
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40004400 	.word	0x40004400
 8003de0:	20000688 	.word	0x20000688
 8003de4:	20000686 	.word	0x20000686
 8003de8:	2000068a 	.word	0x2000068a
 8003dec:	20000668 	.word	0x20000668
 8003df0:	20000654 	.word	0x20000654
 8003df4:	20000518 	.word	0x20000518
 8003df8:	2000055c 	.word	0x2000055c
 8003dfc:	00000000 	.word	0x00000000

08003e00 <UARTstateManagement>:

void UARTstateManagement(uint8_t *Mainbuffer)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	switch (UARTState)
 8003e08:	4bad      	ldr	r3, [pc, #692]	; (80040c0 <UARTstateManagement+0x2c0>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d01d      	beq.n	8003e4c <UARTstateManagement+0x4c>
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	f300 839d 	bgt.w	8004550 <UARTstateManagement+0x750>
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 8397 	beq.w	800454a <UARTstateManagement+0x74a>
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d000      	beq.n	8003e22 <UARTstateManagement+0x22>
					homingFlag = 1;
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
					break;
				}
	}
}
 8003e20:	e396      	b.n	8004550 <UARTstateManagement+0x750>
			if(Mainbuffer[oldPos] == 0b10010010)
 8003e22:	4ba8      	ldr	r3, [pc, #672]	; (80040c4 <UARTstateManagement+0x2c4>)
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b92      	cmp	r3, #146	; 0x92
 8003e30:	f040 838d 	bne.w	800454e <UARTstateManagement+0x74e>
				modeNo = 2;
 8003e34:	4ba4      	ldr	r3, [pc, #656]	; (80040c8 <UARTstateManagement+0x2c8>)
 8003e36:	2202      	movs	r2, #2
 8003e38:	701a      	strb	r2, [r3, #0]
				UARTState = MCUConnect;
 8003e3a:	4ba1      	ldr	r3, [pc, #644]	; (80040c0 <UARTstateManagement+0x2c0>)
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003e40:	2202      	movs	r2, #2
 8003e42:	49a2      	ldr	r1, [pc, #648]	; (80040cc <UARTstateManagement+0x2cc>)
 8003e44:	48a2      	ldr	r0, [pc, #648]	; (80040d0 <UARTstateManagement+0x2d0>)
 8003e46:	f005 fea9 	bl	8009b9c <HAL_UART_Transmit_DMA>
			break;
 8003e4a:	e380      	b.n	800454e <UARTstateManagement+0x74e>
			stateSwitch = modeByte;
 8003e4c:	4ba1      	ldr	r3, [pc, #644]	; (80040d4 <UARTstateManagement+0x2d4>)
 8003e4e:	781a      	ldrb	r2, [r3, #0]
 8003e50:	4ba1      	ldr	r3, [pc, #644]	; (80040d8 <UARTstateManagement+0x2d8>)
 8003e52:	701a      	strb	r2, [r3, #0]
			switch (stateSwitch)
 8003e54:	4ba0      	ldr	r3, [pc, #640]	; (80040d8 <UARTstateManagement+0x2d8>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	3b91      	subs	r3, #145	; 0x91
 8003e5a:	2b0d      	cmp	r3, #13
 8003e5c:	f200 8378 	bhi.w	8004550 <UARTstateManagement+0x750>
 8003e60:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <UARTstateManagement+0x68>)
 8003e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e66:	bf00      	nop
 8003e68:	08003ea1 	.word	0x08003ea1
 8003e6c:	08003eb3 	.word	0x08003eb3
 8003e70:	08003ecb 	.word	0x08003ecb
 8003e74:	08003ee3 	.word	0x08003ee3
 8003e78:	08003f43 	.word	0x08003f43
 8003e7c:	08003fb1 	.word	0x08003fb1
 8003e80:	08003fe9 	.word	0x08003fe9
 8003e84:	080040fd 	.word	0x080040fd
 8003e88:	08004141 	.word	0x08004141
 8003e8c:	080041ed 	.word	0x080041ed
 8003e90:	080043dd 	.word	0x080043dd
 8003e94:	080044d9 	.word	0x080044d9
 8003e98:	08004509 	.word	0x08004509
 8003e9c:	08004521 	.word	0x08004521
					modeNo = 1;
 8003ea0:	4b89      	ldr	r3, [pc, #548]	; (80040c8 <UARTstateManagement+0x2c8>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	4988      	ldr	r1, [pc, #544]	; (80040cc <UARTstateManagement+0x2cc>)
 8003eaa:	4889      	ldr	r0, [pc, #548]	; (80040d0 <UARTstateManagement+0x2d0>)
 8003eac:	f005 fe76 	bl	8009b9c <HAL_UART_Transmit_DMA>
					break;
 8003eb0:	e34e      	b.n	8004550 <UARTstateManagement+0x750>
					modeNo = 2;
 8003eb2:	4b85      	ldr	r3, [pc, #532]	; (80040c8 <UARTstateManagement+0x2c8>)
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	701a      	strb	r2, [r3, #0]
					UARTState = MCUConnect;
 8003eb8:	4b81      	ldr	r3, [pc, #516]	; (80040c0 <UARTstateManagement+0x2c0>)
 8003eba:	2202      	movs	r2, #2
 8003ebc:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	4982      	ldr	r1, [pc, #520]	; (80040cc <UARTstateManagement+0x2cc>)
 8003ec2:	4883      	ldr	r0, [pc, #524]	; (80040d0 <UARTstateManagement+0x2d0>)
 8003ec4:	f005 fe6a 	bl	8009b9c <HAL_UART_Transmit_DMA>
					break;
 8003ec8:	e342      	b.n	8004550 <UARTstateManagement+0x750>
					modeNo = 3;
 8003eca:	4b7f      	ldr	r3, [pc, #508]	; (80040c8 <UARTstateManagement+0x2c8>)
 8003ecc:	2203      	movs	r2, #3
 8003ece:	701a      	strb	r2, [r3, #0]
					UARTState = MCUDisconnect;
 8003ed0:	4b7b      	ldr	r3, [pc, #492]	; (80040c0 <UARTstateManagement+0x2c0>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	497c      	ldr	r1, [pc, #496]	; (80040cc <UARTstateManagement+0x2cc>)
 8003eda:	487d      	ldr	r0, [pc, #500]	; (80040d0 <UARTstateManagement+0x2d0>)
 8003edc:	f005 fe5e 	bl	8009b9c <HAL_UART_Transmit_DMA>
					break;
 8003ee0:	e336      	b.n	8004550 <UARTstateManagement+0x750>
					modeNo = 4;
 8003ee2:	4b79      	ldr	r3, [pc, #484]	; (80040c8 <UARTstateManagement+0x2c8>)
 8003ee4:	2204      	movs	r2, #4
 8003ee6:	701a      	strb	r2, [r3, #0]
					uartVelo = (float)((Mainbuffer[oldPos + 2 % MainBuf_SIZE])/255.0)*10.0;
 8003ee8:	4b76      	ldr	r3, [pc, #472]	; (80040c4 <UARTstateManagement+0x2c4>)
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	3302      	adds	r3, #2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fc fac1 	bl	800047c <__aeabi_i2d>
 8003efa:	a36d      	add	r3, pc, #436	; (adr r3, 80040b0 <UARTstateManagement+0x2b0>)
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	f7fc fc50 	bl	80007a4 <__aeabi_ddiv>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	f7fc fd52 	bl	80009b4 <__aeabi_d2f>
 8003f10:	ee07 0a10 	vmov	s14, r0
 8003f14:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8003f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1c:	4b6f      	ldr	r3, [pc, #444]	; (80040dc <UARTstateManagement+0x2dc>)
 8003f1e:	edc3 7a00 	vstr	s15, [r3]
					Robot.QVMax = uartVelo*6.0;
 8003f22:	4b6e      	ldr	r3, [pc, #440]	; (80040dc <UARTstateManagement+0x2dc>)
 8003f24:	edd3 7a00 	vldr	s15, [r3]
 8003f28:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f30:	4b6b      	ldr	r3, [pc, #428]	; (80040e0 <UARTstateManagement+0x2e0>)
 8003f32:	edc3 7a08 	vstr	s15, [r3, #32]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003f36:	2202      	movs	r2, #2
 8003f38:	4964      	ldr	r1, [pc, #400]	; (80040cc <UARTstateManagement+0x2cc>)
 8003f3a:	4865      	ldr	r0, [pc, #404]	; (80040d0 <UARTstateManagement+0x2d0>)
 8003f3c:	f005 fe2e 	bl	8009b9c <HAL_UART_Transmit_DMA>
					break;
 8003f40:	e306      	b.n	8004550 <UARTstateManagement+0x750>
					modeNo = 5;
 8003f42:	4b61      	ldr	r3, [pc, #388]	; (80040c8 <UARTstateManagement+0x2c8>)
 8003f44:	2205      	movs	r2, #5
 8003f46:	701a      	strb	r2, [r3, #0]
					goalFlag = 1;
 8003f48:	4b66      	ldr	r3, [pc, #408]	; (80040e4 <UARTstateManagement+0x2e4>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	701a      	strb	r2, [r3, #0]
					goalAmount = 1;
 8003f4e:	4b66      	ldr	r3, [pc, #408]	; (80040e8 <UARTstateManagement+0x2e8>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	701a      	strb	r2, [r3, #0]
					uartPos = (float)((((Mainbuffer[oldPos + 1 % MainBuf_SIZE] << 8) | Mainbuffer[oldPos + 2 % MainBuf_SIZE])*360.0)/62800);
 8003f54:	4b5b      	ldr	r3, [pc, #364]	; (80040c4 <UARTstateManagement+0x2c4>)
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	4a58      	ldr	r2, [pc, #352]	; (80040c4 <UARTstateManagement+0x2c4>)
 8003f64:	8812      	ldrh	r2, [r2, #0]
 8003f66:	3202      	adds	r2, #2
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	440a      	add	r2, r1
 8003f6c:	7812      	ldrb	r2, [r2, #0]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fc fa83 	bl	800047c <__aeabi_i2d>
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	4b5c      	ldr	r3, [pc, #368]	; (80040ec <UARTstateManagement+0x2ec>)
 8003f7c:	f7fc fae8 	bl	8000550 <__aeabi_dmul>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	a34b      	add	r3, pc, #300	; (adr r3, 80040b8 <UARTstateManagement+0x2b8>)
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f7fc fc09 	bl	80007a4 <__aeabi_ddiv>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	f7fc fd0b 	bl	80009b4 <__aeabi_d2f>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4a53      	ldr	r2, [pc, #332]	; (80040f0 <UARTstateManagement+0x2f0>)
 8003fa2:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	4949      	ldr	r1, [pc, #292]	; (80040cc <UARTstateManagement+0x2cc>)
 8003fa8:	4849      	ldr	r0, [pc, #292]	; (80040d0 <UARTstateManagement+0x2d0>)
 8003faa:	f005 fdf7 	bl	8009b9c <HAL_UART_Transmit_DMA>
					break;
 8003fae:	e2cf      	b.n	8004550 <UARTstateManagement+0x750>
					modeNo = 6;
 8003fb0:	4b45      	ldr	r3, [pc, #276]	; (80040c8 <UARTstateManagement+0x2c8>)
 8003fb2:	2206      	movs	r2, #6
 8003fb4:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8003fb6:	4b4b      	ldr	r3, [pc, #300]	; (80040e4 <UARTstateManagement+0x2e4>)
 8003fb8:	2202      	movs	r2, #2
 8003fba:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8003fbc:	220f      	movs	r2, #15
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	484c      	ldr	r0, [pc, #304]	; (80040f4 <UARTstateManagement+0x2f4>)
 8003fc2:	f007 fac3 	bl	800b54c <memset>
					goalAmount = 1;
 8003fc6:	4b48      	ldr	r3, [pc, #288]	; (80040e8 <UARTstateManagement+0x2e8>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
					uartGoal[0] = Mainbuffer[oldPos + 2 % MainBuf_SIZE];
 8003fcc:	4b3d      	ldr	r3, [pc, #244]	; (80040c4 <UARTstateManagement+0x2c4>)
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	3302      	adds	r3, #2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	4b46      	ldr	r3, [pc, #280]	; (80040f4 <UARTstateManagement+0x2f4>)
 8003fda:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8003fdc:	2202      	movs	r2, #2
 8003fde:	493b      	ldr	r1, [pc, #236]	; (80040cc <UARTstateManagement+0x2cc>)
 8003fe0:	483b      	ldr	r0, [pc, #236]	; (80040d0 <UARTstateManagement+0x2d0>)
 8003fe2:	f005 fddb 	bl	8009b9c <HAL_UART_Transmit_DMA>
					break;
 8003fe6:	e2b3      	b.n	8004550 <UARTstateManagement+0x750>
					modeNo = 7;
 8003fe8:	4b37      	ldr	r3, [pc, #220]	; (80040c8 <UARTstateManagement+0x2c8>)
 8003fea:	2207      	movs	r2, #7
 8003fec:	701a      	strb	r2, [r3, #0]
					goalFlag = 2;
 8003fee:	4b3d      	ldr	r3, [pc, #244]	; (80040e4 <UARTstateManagement+0x2e4>)
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	701a      	strb	r2, [r3, #0]
					memset(uartGoal, '\0', 15);
 8003ff4:	220f      	movs	r2, #15
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	483e      	ldr	r0, [pc, #248]	; (80040f4 <UARTstateManagement+0x2f4>)
 8003ffa:	f007 faa7 	bl	800b54c <memset>
					goalAmount = Mainbuffer[oldPos + 1 % MainBuf_SIZE];
 8003ffe:	4b31      	ldr	r3, [pc, #196]	; (80040c4 <UARTstateManagement+0x2c4>)
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	3301      	adds	r3, #1
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	4413      	add	r3, r2
 8004008:	781a      	ldrb	r2, [r3, #0]
 800400a:	4b37      	ldr	r3, [pc, #220]	; (80040e8 <UARTstateManagement+0x2e8>)
 800400c:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	e03a      	b.n	800408a <UARTstateManagement+0x28a>
						uartGoal[0+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] & 15; // low 8 bit (last 4 bit)
 8004014:	4b2b      	ldr	r3, [pc, #172]	; (80040c4 <UARTstateManagement+0x2c4>)
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1c99      	adds	r1, r3, #2
 800401e:	4b36      	ldr	r3, [pc, #216]	; (80040f8 <UARTstateManagement+0x2f8>)
 8004020:	fb83 2301 	smull	r2, r3, r3, r1
 8004024:	10da      	asrs	r2, r3, #3
 8004026:	17cb      	asrs	r3, r1, #31
 8004028:	1ad2      	subs	r2, r2, r3
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	1aca      	subs	r2, r1, r3
 8004034:	1883      	adds	r3, r0, r2
 8004036:	461a      	mov	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4413      	add	r3, r2
 800403c:	781a      	ldrb	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	f002 020f 	and.w	r2, r2, #15
 8004046:	b2d1      	uxtb	r1, r2
 8004048:	4a2a      	ldr	r2, [pc, #168]	; (80040f4 <UARTstateManagement+0x2f4>)
 800404a:	54d1      	strb	r1, [r2, r3]
						uartGoal[1+(i*2)] = Mainbuffer[oldPos + (2+i) % MainBuf_SIZE] >> 4; // high 8 bit (first 4 bit)
 800404c:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <UARTstateManagement+0x2c4>)
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1c99      	adds	r1, r3, #2
 8004056:	4b28      	ldr	r3, [pc, #160]	; (80040f8 <UARTstateManagement+0x2f8>)
 8004058:	fb83 2301 	smull	r2, r3, r3, r1
 800405c:	10da      	asrs	r2, r3, #3
 800405e:	17cb      	asrs	r3, r1, #31
 8004060:	1ad2      	subs	r2, r2, r3
 8004062:	4613      	mov	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	1aca      	subs	r2, r1, r3
 800406c:	1883      	adds	r3, r0, r2
 800406e:	461a      	mov	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4413      	add	r3, r2
 8004074:	781a      	ldrb	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	3301      	adds	r3, #1
 800407c:	0912      	lsrs	r2, r2, #4
 800407e:	b2d1      	uxtb	r1, r2
 8004080:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <UARTstateManagement+0x2f4>)
 8004082:	54d1      	strb	r1, [r2, r3]
					for(int i = 0; i < ((goalAmount+1)/2); i++){
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3301      	adds	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <UARTstateManagement+0x2e8>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	3301      	adds	r3, #1
 8004090:	0fda      	lsrs	r2, r3, #31
 8004092:	4413      	add	r3, r2
 8004094:	105b      	asrs	r3, r3, #1
 8004096:	461a      	mov	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4293      	cmp	r3, r2
 800409c:	dbba      	blt.n	8004014 <UARTstateManagement+0x214>
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800409e:	2202      	movs	r2, #2
 80040a0:	490a      	ldr	r1, [pc, #40]	; (80040cc <UARTstateManagement+0x2cc>)
 80040a2:	480b      	ldr	r0, [pc, #44]	; (80040d0 <UARTstateManagement+0x2d0>)
 80040a4:	f005 fd7a 	bl	8009b9c <HAL_UART_Transmit_DMA>
					break;
 80040a8:	e252      	b.n	8004550 <UARTstateManagement+0x750>
 80040aa:	bf00      	nop
 80040ac:	f3af 8000 	nop.w
 80040b0:	00000000 	.word	0x00000000
 80040b4:	406fe000 	.word	0x406fe000
 80040b8:	00000000 	.word	0x00000000
 80040bc:	40eeaa00 	.word	0x40eeaa00
 80040c0:	20000650 	.word	0x20000650
 80040c4:	20000686 	.word	0x20000686
 80040c8:	200006af 	.word	0x200006af
 80040cc:	2000002c 	.word	0x2000002c
 80040d0:	20000518 	.word	0x20000518
 80040d4:	200006b0 	.word	0x200006b0
 80040d8:	20000685 	.word	0x20000685
 80040dc:	20000690 	.word	0x20000690
 80040e0:	2000061c 	.word	0x2000061c
 80040e4:	200006a9 	.word	0x200006a9
 80040e8:	200006a7 	.word	0x200006a7
 80040ec:	40768000 	.word	0x40768000
 80040f0:	20000694 	.word	0x20000694
 80040f4:	20000698 	.word	0x20000698
 80040f8:	66666667 	.word	0x66666667
					modeNo = 8;
 80040fc:	4b98      	ldr	r3, [pc, #608]	; (8004360 <UARTstateManagement+0x560>)
 80040fe:	2208      	movs	r2, #8
 8004100:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 0){
 8004102:	4b98      	ldr	r3, [pc, #608]	; (8004364 <UARTstateManagement+0x564>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d114      	bne.n	8004134 <UARTstateManagement+0x334>
					goingToGoalFlag = 0;
 800410a:	4b97      	ldr	r3, [pc, #604]	; (8004368 <UARTstateManagement+0x568>)
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]
					Robot.MotorIsOn = 1;
 8004110:	4b96      	ldr	r3, [pc, #600]	; (800436c <UARTstateManagement+0x56c>)
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					Robot.flagStartTime = 1;
 8004118:	4b94      	ldr	r3, [pc, #592]	; (800436c <UARTstateManagement+0x56c>)
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					Robot.RunningFlag = 1;
 8004120:	4b92      	ldr	r3, [pc, #584]	; (800436c <UARTstateManagement+0x56c>)
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					doingTaskFlag = 1;
 8004128:	4b8e      	ldr	r3, [pc, #568]	; (8004364 <UARTstateManagement+0x564>)
 800412a:	2201      	movs	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
					goalIDX = 0;
 800412e:	4b90      	ldr	r3, [pc, #576]	; (8004370 <UARTstateManagement+0x570>)
 8004130:	2200      	movs	r2, #0
 8004132:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004134:	2202      	movs	r2, #2
 8004136:	498f      	ldr	r1, [pc, #572]	; (8004374 <UARTstateManagement+0x574>)
 8004138:	488f      	ldr	r0, [pc, #572]	; (8004378 <UARTstateManagement+0x578>)
 800413a:	f005 fd2f 	bl	8009b9c <HAL_UART_Transmit_DMA>
					break;
 800413e:	e207      	b.n	8004550 <UARTstateManagement+0x750>
					modeNo = 9;
 8004140:	4b87      	ldr	r3, [pc, #540]	; (8004360 <UARTstateManagement+0x560>)
 8004142:	2209      	movs	r2, #9
 8004144:	701a      	strb	r2, [r3, #0]
					FlagAckFromUART = 0;
 8004146:	4b8d      	ldr	r3, [pc, #564]	; (800437c <UARTstateManagement+0x57c>)
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
					Robot.CurrentStation = 0;
 800414c:	4b87      	ldr	r3, [pc, #540]	; (800436c <UARTstateManagement+0x56c>)
 800414e:	2200      	movs	r2, #0
 8004150:	811a      	strh	r2, [r3, #8]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8004152:	4b84      	ldr	r3, [pc, #528]	; (8004364 <UARTstateManagement+0x564>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d004      	beq.n	8004164 <UARTstateManagement+0x364>
 800415a:	4b84      	ldr	r3, [pc, #528]	; (800436c <UARTstateManagement+0x56c>)
 800415c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004160:	2b01      	cmp	r3, #1
 8004162:	d11f      	bne.n	80041a4 <UARTstateManagement+0x3a4>
 8004164:	4b83      	ldr	r3, [pc, #524]	; (8004374 <UARTstateManagement+0x574>)
 8004166:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 8004168:	4b85      	ldr	r3, [pc, #532]	; (8004380 <UARTstateManagement+0x580>)
 800416a:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 153; // start-mode
 800416c:	4b84      	ldr	r3, [pc, #528]	; (8004380 <UARTstateManagement+0x580>)
 800416e:	2299      	movs	r2, #153	; 0x99
 8004170:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = Robot.CurrentStation; // set current goal
 8004172:	4b7e      	ldr	r3, [pc, #504]	; (800436c <UARTstateManagement+0x56c>)
 8004174:	891b      	ldrh	r3, [r3, #8]
 8004176:	b2da      	uxtb	r2, r3
 8004178:	4b81      	ldr	r3, [pc, #516]	; (8004380 <UARTstateManagement+0x580>)
 800417a:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 800417c:	4b80      	ldr	r3, [pc, #512]	; (8004380 <UARTstateManagement+0x580>)
 800417e:	789a      	ldrb	r2, [r3, #2]
 8004180:	4b7f      	ldr	r3, [pc, #508]	; (8004380 <UARTstateManagement+0x580>)
 8004182:	78db      	ldrb	r3, [r3, #3]
 8004184:	4413      	add	r3, r2
 8004186:	b2da      	uxtb	r2, r3
 8004188:	4b7d      	ldr	r3, [pc, #500]	; (8004380 <UARTstateManagement+0x580>)
 800418a:	791b      	ldrb	r3, [r3, #4]
 800418c:	4413      	add	r3, r2
 800418e:	b2db      	uxtb	r3, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	b2da      	uxtb	r2, r3
 8004194:	4b7a      	ldr	r3, [pc, #488]	; (8004380 <UARTstateManagement+0x580>)
 8004196:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8004198:	2206      	movs	r2, #6
 800419a:	4979      	ldr	r1, [pc, #484]	; (8004380 <UARTstateManagement+0x580>)
 800419c:	4876      	ldr	r0, [pc, #472]	; (8004378 <UARTstateManagement+0x578>)
 800419e:	f005 fcfd 	bl	8009b9c <HAL_UART_Transmit_DMA>
					break;
 80041a2:	e1d5      	b.n	8004550 <UARTstateManagement+0x750>
 80041a4:	4b77      	ldr	r3, [pc, #476]	; (8004384 <UARTstateManagement+0x584>)
 80041a6:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 80041a8:	4b75      	ldr	r3, [pc, #468]	; (8004380 <UARTstateManagement+0x580>)
 80041aa:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 80041ac:	4a76      	ldr	r2, [pc, #472]	; (8004388 <UARTstateManagement+0x588>)
 80041ae:	4b71      	ldr	r3, [pc, #452]	; (8004374 <UARTstateManagement+0x574>)
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 153; // start-mode
 80041b4:	4b72      	ldr	r3, [pc, #456]	; (8004380 <UARTstateManagement+0x580>)
 80041b6:	2299      	movs	r2, #153	; 0x99
 80041b8:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = Robot.CurrentStation; // set currentStation
 80041ba:	4b6c      	ldr	r3, [pc, #432]	; (800436c <UARTstateManagement+0x56c>)
 80041bc:	891b      	ldrh	r3, [r3, #8]
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	4b6f      	ldr	r3, [pc, #444]	; (8004380 <UARTstateManagement+0x580>)
 80041c2:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 80041c4:	4b6e      	ldr	r3, [pc, #440]	; (8004380 <UARTstateManagement+0x580>)
 80041c6:	791a      	ldrb	r2, [r3, #4]
 80041c8:	4b6d      	ldr	r3, [pc, #436]	; (8004380 <UARTstateManagement+0x580>)
 80041ca:	795b      	ldrb	r3, [r3, #5]
 80041cc:	4413      	add	r3, r2
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	4b6b      	ldr	r3, [pc, #428]	; (8004380 <UARTstateManagement+0x580>)
 80041d2:	799b      	ldrb	r3, [r3, #6]
 80041d4:	4413      	add	r3, r2
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	4b68      	ldr	r3, [pc, #416]	; (8004380 <UARTstateManagement+0x580>)
 80041de:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 80041e0:	2208      	movs	r2, #8
 80041e2:	4967      	ldr	r1, [pc, #412]	; (8004380 <UARTstateManagement+0x580>)
 80041e4:	4864      	ldr	r0, [pc, #400]	; (8004378 <UARTstateManagement+0x578>)
 80041e6:	f005 fcd9 	bl	8009b9c <HAL_UART_Transmit_DMA>
					break;
 80041ea:	e1b1      	b.n	8004550 <UARTstateManagement+0x750>
					modeNo = 10;
 80041ec:	4b5c      	ldr	r3, [pc, #368]	; (8004360 <UARTstateManagement+0x560>)
 80041ee:	220a      	movs	r2, #10
 80041f0:	701a      	strb	r2, [r3, #0]
					FlagAckFromUART = 0;
 80041f2:	4b62      	ldr	r3, [pc, #392]	; (800437c <UARTstateManagement+0x57c>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	701a      	strb	r2, [r3, #0]
					posData = (uint16_t)(((((Robot.Position)*10000.0)*M_PI)/180.0));
 80041f8:	4b5c      	ldr	r3, [pc, #368]	; (800436c <UARTstateManagement+0x56c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fc f94f 	bl	80004a0 <__aeabi_f2d>
 8004202:	a353      	add	r3, pc, #332	; (adr r3, 8004350 <UARTstateManagement+0x550>)
 8004204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004208:	f7fc f9a2 	bl	8000550 <__aeabi_dmul>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4610      	mov	r0, r2
 8004212:	4619      	mov	r1, r3
 8004214:	a350      	add	r3, pc, #320	; (adr r3, 8004358 <UARTstateManagement+0x558>)
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	f7fc f999 	bl	8000550 <__aeabi_dmul>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4610      	mov	r0, r2
 8004224:	4619      	mov	r1, r3
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	4b58      	ldr	r3, [pc, #352]	; (800438c <UARTstateManagement+0x58c>)
 800422c:	f7fc faba 	bl	80007a4 <__aeabi_ddiv>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4610      	mov	r0, r2
 8004236:	4619      	mov	r1, r3
 8004238:	f7fc fb9c 	bl	8000974 <__aeabi_d2uiz>
 800423c:	4603      	mov	r3, r0
 800423e:	b29a      	uxth	r2, r3
 8004240:	4b53      	ldr	r3, [pc, #332]	; (8004390 <UARTstateManagement+0x590>)
 8004242:	801a      	strh	r2, [r3, #0]
					if(endEffFlag == 0 && doingTaskFlag == 1){
 8004244:	4b53      	ldr	r3, [pc, #332]	; (8004394 <UARTstateManagement+0x594>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d12e      	bne.n	80042aa <UARTstateManagement+0x4aa>
 800424c:	4b45      	ldr	r3, [pc, #276]	; (8004364 <UARTstateManagement+0x564>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d12a      	bne.n	80042aa <UARTstateManagement+0x4aa>
						if(AbsVal(Robot.GoalPositon - Robot.Position) < 0.5 && AbsVal(Robot.Velocity) < 1.0){
 8004254:	4b45      	ldr	r3, [pc, #276]	; (800436c <UARTstateManagement+0x56c>)
 8004256:	ed93 7a03 	vldr	s14, [r3, #12]
 800425a:	4b44      	ldr	r3, [pc, #272]	; (800436c <UARTstateManagement+0x56c>)
 800425c:	edd3 7a00 	vldr	s15, [r3]
 8004260:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004264:	eeb0 0a67 	vmov.f32	s0, s15
 8004268:	f7fd faa7 	bl	80017ba <AbsVal>
 800426c:	eef0 7a40 	vmov.f32	s15, s0
 8004270:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800427c:	d515      	bpl.n	80042aa <UARTstateManagement+0x4aa>
 800427e:	4b3b      	ldr	r3, [pc, #236]	; (800436c <UARTstateManagement+0x56c>)
 8004280:	edd3 7a01 	vldr	s15, [r3, #4]
 8004284:	eeb0 0a67 	vmov.f32	s0, s15
 8004288:	f7fd fa97 	bl	80017ba <AbsVal>
 800428c:	eef0 7a40 	vmov.f32	s15, s0
 8004290:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800429c:	d505      	bpl.n	80042aa <UARTstateManagement+0x4aa>
							endEffFlag = 1;
 800429e:	4b3d      	ldr	r3, [pc, #244]	; (8004394 <UARTstateManagement+0x594>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	701a      	strb	r2, [r3, #0]
							goingToGoalFlag = 0;
 80042a4:	4b30      	ldr	r3, [pc, #192]	; (8004368 <UARTstateManagement+0x568>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 80042aa:	4b2e      	ldr	r3, [pc, #184]	; (8004364 <UARTstateManagement+0x564>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d004      	beq.n	80042bc <UARTstateManagement+0x4bc>
 80042b2:	4b2e      	ldr	r3, [pc, #184]	; (800436c <UARTstateManagement+0x56c>)
 80042b4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d126      	bne.n	800430a <UARTstateManagement+0x50a>
 80042bc:	4b2d      	ldr	r3, [pc, #180]	; (8004374 <UARTstateManagement+0x574>)
 80042be:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 80042c0:	4b2f      	ldr	r3, [pc, #188]	; (8004380 <UARTstateManagement+0x580>)
 80042c2:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 154; // start-mode
 80042c4:	4b2e      	ldr	r3, [pc, #184]	; (8004380 <UARTstateManagement+0x580>)
 80042c6:	229a      	movs	r2, #154	; 0x9a
 80042c8:	709a      	strb	r2, [r3, #2]
						TxBuf[3] = (posData) >> 8 ; // set high byte posData
 80042ca:	4b31      	ldr	r3, [pc, #196]	; (8004390 <UARTstateManagement+0x590>)
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	4b2a      	ldr	r3, [pc, #168]	; (8004380 <UARTstateManagement+0x580>)
 80042d6:	70da      	strb	r2, [r3, #3]
						TxBuf[4] = (posData) & 0xff; // set low byte posData
 80042d8:	4b2d      	ldr	r3, [pc, #180]	; (8004390 <UARTstateManagement+0x590>)
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	4b28      	ldr	r3, [pc, #160]	; (8004380 <UARTstateManagement+0x580>)
 80042e0:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (uint8_t)(~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 80042e2:	4b27      	ldr	r3, [pc, #156]	; (8004380 <UARTstateManagement+0x580>)
 80042e4:	789a      	ldrb	r2, [r3, #2]
 80042e6:	4b26      	ldr	r3, [pc, #152]	; (8004380 <UARTstateManagement+0x580>)
 80042e8:	78db      	ldrb	r3, [r3, #3]
 80042ea:	4413      	add	r3, r2
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4b24      	ldr	r3, [pc, #144]	; (8004380 <UARTstateManagement+0x580>)
 80042f0:	791b      	ldrb	r3, [r3, #4]
 80042f2:	4413      	add	r3, r2
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	4b21      	ldr	r3, [pc, #132]	; (8004380 <UARTstateManagement+0x580>)
 80042fc:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 80042fe:	2206      	movs	r2, #6
 8004300:	491f      	ldr	r1, [pc, #124]	; (8004380 <UARTstateManagement+0x580>)
 8004302:	481d      	ldr	r0, [pc, #116]	; (8004378 <UARTstateManagement+0x578>)
 8004304:	f005 fc4a 	bl	8009b9c <HAL_UART_Transmit_DMA>
					break;
 8004308:	e122      	b.n	8004550 <UARTstateManagement+0x750>
 800430a:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <UARTstateManagement+0x584>)
 800430c:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 800430e:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <UARTstateManagement+0x580>)
 8004310:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 8004312:	4a1d      	ldr	r2, [pc, #116]	; (8004388 <UARTstateManagement+0x588>)
 8004314:	4b17      	ldr	r3, [pc, #92]	; (8004374 <UARTstateManagement+0x574>)
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 154; // start-mode
 800431a:	4b19      	ldr	r3, [pc, #100]	; (8004380 <UARTstateManagement+0x580>)
 800431c:	229a      	movs	r2, #154	; 0x9a
 800431e:	711a      	strb	r2, [r3, #4]
						if(homingFlag == 1 && Robot.Position <= 0.5){
 8004320:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <UARTstateManagement+0x598>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d139      	bne.n	800439c <UARTstateManagement+0x59c>
 8004328:	4b10      	ldr	r3, [pc, #64]	; (800436c <UARTstateManagement+0x56c>)
 800432a:	edd3 7a00 	vldr	s15, [r3]
 800432e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433a:	d82f      	bhi.n	800439c <UARTstateManagement+0x59c>
							TxBuf[5] = 0; // set high byte posData
 800433c:	4b10      	ldr	r3, [pc, #64]	; (8004380 <UARTstateManagement+0x580>)
 800433e:	2200      	movs	r2, #0
 8004340:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = 0; // set low byte posData
 8004342:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <UARTstateManagement+0x580>)
 8004344:	2200      	movs	r2, #0
 8004346:	719a      	strb	r2, [r3, #6]
 8004348:	e034      	b.n	80043b4 <UARTstateManagement+0x5b4>
 800434a:	bf00      	nop
 800434c:	f3af 8000 	nop.w
 8004350:	00000000 	.word	0x00000000
 8004354:	40c38800 	.word	0x40c38800
 8004358:	54442d18 	.word	0x54442d18
 800435c:	400921fb 	.word	0x400921fb
 8004360:	200006af 	.word	0x200006af
 8004364:	200006ac 	.word	0x200006ac
 8004368:	200006ad 	.word	0x200006ad
 800436c:	2000061c 	.word	0x2000061c
 8004370:	200006a8 	.word	0x200006a8
 8004374:	2000002c 	.word	0x2000002c
 8004378:	20000518 	.word	0x20000518
 800437c:	20000684 	.word	0x20000684
 8004380:	2000067c 	.word	0x2000067c
 8004384:	20000030 	.word	0x20000030
 8004388:	2000067e 	.word	0x2000067e
 800438c:	40668000 	.word	0x40668000
 8004390:	2000068c 	.word	0x2000068c
 8004394:	200006aa 	.word	0x200006aa
 8004398:	200006ab 	.word	0x200006ab
							TxBuf[5] = (posData) >> 8 ; // set high byte posData
 800439c:	4b70      	ldr	r3, [pc, #448]	; (8004560 <UARTstateManagement+0x760>)
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	0a1b      	lsrs	r3, r3, #8
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	4b6f      	ldr	r3, [pc, #444]	; (8004564 <UARTstateManagement+0x764>)
 80043a8:	715a      	strb	r2, [r3, #5]
							TxBuf[6] = (posData) & 0xff; // set low byte posData
 80043aa:	4b6d      	ldr	r3, [pc, #436]	; (8004560 <UARTstateManagement+0x760>)
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	4b6c      	ldr	r3, [pc, #432]	; (8004564 <UARTstateManagement+0x764>)
 80043b2:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 80043b4:	4b6b      	ldr	r3, [pc, #428]	; (8004564 <UARTstateManagement+0x764>)
 80043b6:	791a      	ldrb	r2, [r3, #4]
 80043b8:	4b6a      	ldr	r3, [pc, #424]	; (8004564 <UARTstateManagement+0x764>)
 80043ba:	795b      	ldrb	r3, [r3, #5]
 80043bc:	4413      	add	r3, r2
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	4b68      	ldr	r3, [pc, #416]	; (8004564 <UARTstateManagement+0x764>)
 80043c2:	799b      	ldrb	r3, [r3, #6]
 80043c4:	4413      	add	r3, r2
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	4b65      	ldr	r3, [pc, #404]	; (8004564 <UARTstateManagement+0x764>)
 80043ce:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 80043d0:	2208      	movs	r2, #8
 80043d2:	4964      	ldr	r1, [pc, #400]	; (8004564 <UARTstateManagement+0x764>)
 80043d4:	4864      	ldr	r0, [pc, #400]	; (8004568 <UARTstateManagement+0x768>)
 80043d6:	f005 fbe1 	bl	8009b9c <HAL_UART_Transmit_DMA>
					break;
 80043da:	e0b9      	b.n	8004550 <UARTstateManagement+0x750>
					modeNo = 11;
 80043dc:	4b63      	ldr	r3, [pc, #396]	; (800456c <UARTstateManagement+0x76c>)
 80043de:	220b      	movs	r2, #11
 80043e0:	701a      	strb	r2, [r3, #0]
					FlagAckFromUART = 0;
 80043e2:	4b63      	ldr	r3, [pc, #396]	; (8004570 <UARTstateManagement+0x770>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	701a      	strb	r2, [r3, #0]
					veloData = (((AbsVal(Robot.Velocity)/6.0)*255.0)/10.0);
 80043e8:	4b62      	ldr	r3, [pc, #392]	; (8004574 <UARTstateManagement+0x774>)
 80043ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80043ee:	eeb0 0a67 	vmov.f32	s0, s15
 80043f2:	f7fd f9e2 	bl	80017ba <AbsVal>
 80043f6:	ee10 3a10 	vmov	r3, s0
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fc f850 	bl	80004a0 <__aeabi_f2d>
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	4b5c      	ldr	r3, [pc, #368]	; (8004578 <UARTstateManagement+0x778>)
 8004406:	f7fc f9cd 	bl	80007a4 <__aeabi_ddiv>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4610      	mov	r0, r2
 8004410:	4619      	mov	r1, r3
 8004412:	a351      	add	r3, pc, #324	; (adr r3, 8004558 <UARTstateManagement+0x758>)
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f7fc f89a 	bl	8000550 <__aeabi_dmul>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4610      	mov	r0, r2
 8004422:	4619      	mov	r1, r3
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	4b54      	ldr	r3, [pc, #336]	; (800457c <UARTstateManagement+0x77c>)
 800442a:	f7fc f9bb 	bl	80007a4 <__aeabi_ddiv>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4610      	mov	r0, r2
 8004434:	4619      	mov	r1, r3
 8004436:	f7fc fa9d 	bl	8000974 <__aeabi_d2uiz>
 800443a:	4603      	mov	r3, r0
 800443c:	b2da      	uxtb	r2, r3
 800443e:	4b50      	ldr	r3, [pc, #320]	; (8004580 <UARTstateManagement+0x780>)
 8004440:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 1 || Robot.RunningFlag == 1){
 8004442:	4b50      	ldr	r3, [pc, #320]	; (8004584 <UARTstateManagement+0x784>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d004      	beq.n	8004454 <UARTstateManagement+0x654>
 800444a:	4b4a      	ldr	r3, [pc, #296]	; (8004574 <UARTstateManagement+0x774>)
 800444c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004450:	2b01      	cmp	r3, #1
 8004452:	d11e      	bne.n	8004492 <UARTstateManagement+0x692>
 8004454:	4b4c      	ldr	r3, [pc, #304]	; (8004588 <UARTstateManagement+0x788>)
 8004456:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_1, 2);
 8004458:	4b42      	ldr	r3, [pc, #264]	; (8004564 <UARTstateManagement+0x764>)
 800445a:	801a      	strh	r2, [r3, #0]
						TxBuf[2] = 155;
 800445c:	4b41      	ldr	r3, [pc, #260]	; (8004564 <UARTstateManagement+0x764>)
 800445e:	229b      	movs	r2, #155	; 0x9b
 8004460:	709a      	strb	r2, [r3, #2]
						TxBuf[4] = veloData; // set low byte posData
 8004462:	4b47      	ldr	r3, [pc, #284]	; (8004580 <UARTstateManagement+0x780>)
 8004464:	781a      	ldrb	r2, [r3, #0]
 8004466:	4b3f      	ldr	r3, [pc, #252]	; (8004564 <UARTstateManagement+0x764>)
 8004468:	711a      	strb	r2, [r3, #4]
						TxBuf[5] = (~(TxBuf[2]+TxBuf[3]+TxBuf[4]));
 800446a:	4b3e      	ldr	r3, [pc, #248]	; (8004564 <UARTstateManagement+0x764>)
 800446c:	789a      	ldrb	r2, [r3, #2]
 800446e:	4b3d      	ldr	r3, [pc, #244]	; (8004564 <UARTstateManagement+0x764>)
 8004470:	78db      	ldrb	r3, [r3, #3]
 8004472:	4413      	add	r3, r2
 8004474:	b2da      	uxtb	r2, r3
 8004476:	4b3b      	ldr	r3, [pc, #236]	; (8004564 <UARTstateManagement+0x764>)
 8004478:	791b      	ldrb	r3, [r3, #4]
 800447a:	4413      	add	r3, r2
 800447c:	b2db      	uxtb	r3, r3
 800447e:	43db      	mvns	r3, r3
 8004480:	b2da      	uxtb	r2, r3
 8004482:	4b38      	ldr	r3, [pc, #224]	; (8004564 <UARTstateManagement+0x764>)
 8004484:	715a      	strb	r2, [r3, #5]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 6);
 8004486:	2206      	movs	r2, #6
 8004488:	4936      	ldr	r1, [pc, #216]	; (8004564 <UARTstateManagement+0x764>)
 800448a:	4837      	ldr	r0, [pc, #220]	; (8004568 <UARTstateManagement+0x768>)
 800448c:	f005 fb86 	bl	8009b9c <HAL_UART_Transmit_DMA>
					break;
 8004490:	e05e      	b.n	8004550 <UARTstateManagement+0x750>
 8004492:	4b3e      	ldr	r3, [pc, #248]	; (800458c <UARTstateManagement+0x78c>)
 8004494:	881a      	ldrh	r2, [r3, #0]
						memcpy(TxBuf, ACK_2, 2);
 8004496:	4b33      	ldr	r3, [pc, #204]	; (8004564 <UARTstateManagement+0x764>)
 8004498:	801a      	strh	r2, [r3, #0]
						memcpy(TxBuf+2, ACK_1, 2);
 800449a:	4a3d      	ldr	r2, [pc, #244]	; (8004590 <UARTstateManagement+0x790>)
 800449c:	4b3a      	ldr	r3, [pc, #232]	; (8004588 <UARTstateManagement+0x788>)
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	8013      	strh	r3, [r2, #0]
						TxBuf[4] = 155; // start-mode
 80044a2:	4b30      	ldr	r3, [pc, #192]	; (8004564 <UARTstateManagement+0x764>)
 80044a4:	229b      	movs	r2, #155	; 0x9b
 80044a6:	711a      	strb	r2, [r3, #4]
						TxBuf[6] = veloData; // set low byte posData
 80044a8:	4b35      	ldr	r3, [pc, #212]	; (8004580 <UARTstateManagement+0x780>)
 80044aa:	781a      	ldrb	r2, [r3, #0]
 80044ac:	4b2d      	ldr	r3, [pc, #180]	; (8004564 <UARTstateManagement+0x764>)
 80044ae:	719a      	strb	r2, [r3, #6]
						TxBuf[7] = (uint8_t)(~(TxBuf[4]+TxBuf[5]+TxBuf[6]));
 80044b0:	4b2c      	ldr	r3, [pc, #176]	; (8004564 <UARTstateManagement+0x764>)
 80044b2:	791a      	ldrb	r2, [r3, #4]
 80044b4:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <UARTstateManagement+0x764>)
 80044b6:	795b      	ldrb	r3, [r3, #5]
 80044b8:	4413      	add	r3, r2
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	4b29      	ldr	r3, [pc, #164]	; (8004564 <UARTstateManagement+0x764>)
 80044be:	799b      	ldrb	r3, [r3, #6]
 80044c0:	4413      	add	r3, r2
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	43db      	mvns	r3, r3
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	4b26      	ldr	r3, [pc, #152]	; (8004564 <UARTstateManagement+0x764>)
 80044ca:	71da      	strb	r2, [r3, #7]
						HAL_UART_Transmit_DMA(&UART, TxBuf, 8);
 80044cc:	2208      	movs	r2, #8
 80044ce:	4925      	ldr	r1, [pc, #148]	; (8004564 <UARTstateManagement+0x764>)
 80044d0:	4825      	ldr	r0, [pc, #148]	; (8004568 <UARTstateManagement+0x768>)
 80044d2:	f005 fb63 	bl	8009b9c <HAL_UART_Transmit_DMA>
					break;
 80044d6:	e03b      	b.n	8004550 <UARTstateManagement+0x750>
					modeNo = 12;
 80044d8:	4b24      	ldr	r3, [pc, #144]	; (800456c <UARTstateManagement+0x76c>)
 80044da:	220c      	movs	r2, #12
 80044dc:	701a      	strb	r2, [r3, #0]
					RobotState = EndEff;
 80044de:	4b2d      	ldr	r3, [pc, #180]	; (8004594 <UARTstateManagement+0x794>)
 80044e0:	2203      	movs	r2, #3
 80044e2:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 80044e4:	4b2c      	ldr	r3, [pc, #176]	; (8004598 <UARTstateManagement+0x798>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorReadFlag =  1;
 80044ea:	4b2c      	ldr	r3, [pc, #176]	; (800459c <UARTstateManagement+0x79c>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	701a      	strb	r2, [r3, #0]
					EndEffState = CheckBeforRun;
 80044f0:	4b2b      	ldr	r3, [pc, #172]	; (80045a0 <UARTstateManagement+0x7a0>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	701a      	strb	r2, [r3, #0]
					endEffFlag = 1;
 80044f6:	4b2b      	ldr	r3, [pc, #172]	; (80045a4 <UARTstateManagement+0x7a4>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 80044fc:	2202      	movs	r2, #2
 80044fe:	4922      	ldr	r1, [pc, #136]	; (8004588 <UARTstateManagement+0x788>)
 8004500:	4819      	ldr	r0, [pc, #100]	; (8004568 <UARTstateManagement+0x768>)
 8004502:	f005 fb4b 	bl	8009b9c <HAL_UART_Transmit_DMA>
					break;
 8004506:	e023      	b.n	8004550 <UARTstateManagement+0x750>
					modeNo = 13;
 8004508:	4b18      	ldr	r3, [pc, #96]	; (800456c <UARTstateManagement+0x76c>)
 800450a:	220d      	movs	r2, #13
 800450c:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 800450e:	4b25      	ldr	r3, [pc, #148]	; (80045a4 <UARTstateManagement+0x7a4>)
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 8004514:	2202      	movs	r2, #2
 8004516:	491c      	ldr	r1, [pc, #112]	; (8004588 <UARTstateManagement+0x788>)
 8004518:	4813      	ldr	r0, [pc, #76]	; (8004568 <UARTstateManagement+0x768>)
 800451a:	f005 fb3f 	bl	8009b9c <HAL_UART_Transmit_DMA>
					break;
 800451e:	e017      	b.n	8004550 <UARTstateManagement+0x750>
					modeNo = 14;
 8004520:	4b12      	ldr	r3, [pc, #72]	; (800456c <UARTstateManagement+0x76c>)
 8004522:	220e      	movs	r2, #14
 8004524:	701a      	strb	r2, [r3, #0]
					RobotRunToPositon(Robot.HomePositon,51.0);
 8004526:	4b13      	ldr	r3, [pc, #76]	; (8004574 <UARTstateManagement+0x774>)
 8004528:	edd3 7a05 	vldr	s15, [r3, #20]
 800452c:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80045a8 <UARTstateManagement+0x7a8>
 8004530:	eeb0 0a67 	vmov.f32	s0, s15
 8004534:	f000 fc3e 	bl	8004db4 <RobotRunToPositon>
					homingFlag = 1;
 8004538:	4b1c      	ldr	r3, [pc, #112]	; (80045ac <UARTstateManagement+0x7ac>)
 800453a:	2201      	movs	r2, #1
 800453c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&UART, ACK_1, 2);
 800453e:	2202      	movs	r2, #2
 8004540:	4911      	ldr	r1, [pc, #68]	; (8004588 <UARTstateManagement+0x788>)
 8004542:	4809      	ldr	r0, [pc, #36]	; (8004568 <UARTstateManagement+0x768>)
 8004544:	f005 fb2a 	bl	8009b9c <HAL_UART_Transmit_DMA>
					break;
 8004548:	e002      	b.n	8004550 <UARTstateManagement+0x750>
			break;
 800454a:	bf00      	nop
 800454c:	e000      	b.n	8004550 <UARTstateManagement+0x750>
			break;
 800454e:	bf00      	nop
}
 8004550:	bf00      	nop
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	00000000 	.word	0x00000000
 800455c:	406fe000 	.word	0x406fe000
 8004560:	2000068c 	.word	0x2000068c
 8004564:	2000067c 	.word	0x2000067c
 8004568:	20000518 	.word	0x20000518
 800456c:	200006af 	.word	0x200006af
 8004570:	20000684 	.word	0x20000684
 8004574:	2000061c 	.word	0x2000061c
 8004578:	40180000 	.word	0x40180000
 800457c:	40240000 	.word	0x40240000
 8004580:	2000068e 	.word	0x2000068e
 8004584:	200006ac 	.word	0x200006ac
 8004588:	2000002c 	.word	0x2000002c
 800458c:	20000030 	.word	0x20000030
 8004590:	2000067e 	.word	0x2000067e
 8004594:	20000651 	.word	0x20000651
 8004598:	200008b9 	.word	0x200008b9
 800459c:	200008b8 	.word	0x200008b8
 80045a0:	20000000 	.word	0x20000000
 80045a4:	200006aa 	.word	0x200006aa
 80045a8:	424c0000 	.word	0x424c0000
 80045ac:	200006ab 	.word	0x200006ab

080045b0 <RobotstateManagement>:

void RobotstateManagement()
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
	switch (RobotState)
 80045b4:	4b8e      	ldr	r3, [pc, #568]	; (80047f0 <RobotstateManagement+0x240>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	f200 8116 	bhi.w	80047ea <RobotstateManagement+0x23a>
 80045be:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <RobotstateManagement+0x14>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	080045d9 	.word	0x080045d9
 80045c8:	080045fb 	.word	0x080045fb
 80045cc:	080046d1 	.word	0x080046d1
 80045d0:	080047c9 	.word	0x080047c9
 80045d4:	080047cf 	.word	0x080047cf
	{
		case init:
			// Reset all Parameter
			Robotinit(&Robot);
 80045d8:	4886      	ldr	r0, [pc, #536]	; (80047f4 <RobotstateManagement+0x244>)
 80045da:	f7fd f8b5 	bl	8001748 <Robotinit>
			// Start Finding home Position
			Robot.flagSethome = 1;
 80045de:	4b85      	ldr	r3, [pc, #532]	; (80047f4 <RobotstateManagement+0x244>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			// Turn 360 Deg
			RobotRunToPositon(360.0,51.0);
 80045e6:	eddf 0a84 	vldr	s1, [pc, #528]	; 80047f8 <RobotstateManagement+0x248>
 80045ea:	ed9f 0a84 	vldr	s0, [pc, #528]	; 80047fc <RobotstateManagement+0x24c>
 80045ee:	f000 fbe1 	bl	8004db4 <RobotRunToPositon>
			// Goto next State
			RobotState = FindHome;
 80045f2:	4b7f      	ldr	r3, [pc, #508]	; (80047f0 <RobotstateManagement+0x240>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	701a      	strb	r2, [r3, #0]
			break;
 80045f8:	e0f7      	b.n	80047ea <RobotstateManagement+0x23a>
		case FindHome:
			if(Robot.RunningFlag == 0)
 80045fa:	4b7e      	ldr	r3, [pc, #504]	; (80047f4 <RobotstateManagement+0x244>)
 80045fc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004600:	2b00      	cmp	r3, #0
 8004602:	f040 80ef 	bne.w	80047e4 <RobotstateManagement+0x234>
			{
				if(Robot.flagSethome == 2)
 8004606:	4b7b      	ldr	r3, [pc, #492]	; (80047f4 <RobotstateManagement+0x244>)
 8004608:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800460c:	2b02      	cmp	r3, #2
 800460e:	d111      	bne.n	8004634 <RobotstateManagement+0x84>
				{
					RobotRunToPositon(Robot.HomePositon,51.0);
 8004610:	4b78      	ldr	r3, [pc, #480]	; (80047f4 <RobotstateManagement+0x244>)
 8004612:	edd3 7a05 	vldr	s15, [r3, #20]
 8004616:	eddf 0a78 	vldr	s1, [pc, #480]	; 80047f8 <RobotstateManagement+0x248>
 800461a:	eeb0 0a67 	vmov.f32	s0, s15
 800461e:	f000 fbc9 	bl	8004db4 <RobotRunToPositon>
					Robot.RunningFlag = 1;
 8004622:	4b74      	ldr	r3, [pc, #464]	; (80047f4 <RobotstateManagement+0x244>)
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
					Robot.flagSethome = 3;
 800462a:	4b72      	ldr	r3, [pc, #456]	; (80047f4 <RobotstateManagement+0x244>)
 800462c:	2203      	movs	r2, #3
 800462e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
					FlagAckFromUART = 1;
					UARTState = MCUConnect;
					RobotState = NormalOperation;
				}
			}
			break;
 8004632:	e0d7      	b.n	80047e4 <RobotstateManagement+0x234>
				else if(Robot.flagSethome == 3)
 8004634:	4b6f      	ldr	r3, [pc, #444]	; (80047f4 <RobotstateManagement+0x244>)
 8004636:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800463a:	2b03      	cmp	r3, #3
 800463c:	f040 80d2 	bne.w	80047e4 <RobotstateManagement+0x234>
					TIM_ResetCounter(TIM2);
 8004640:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004644:	f000 fbf0 	bl	8004e28 <TIM_ResetCounter>
					EncoderRawData[0] = 0;
 8004648:	4b6d      	ldr	r3, [pc, #436]	; (8004800 <RobotstateManagement+0x250>)
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
					EncoderRawData[1] = 0;
 800464e:	4b6c      	ldr	r3, [pc, #432]	; (8004800 <RobotstateManagement+0x250>)
 8004650:	2200      	movs	r2, #0
 8004652:	605a      	str	r2, [r3, #4]
					WrappingStep = 0;
 8004654:	4b6b      	ldr	r3, [pc, #428]	; (8004804 <RobotstateManagement+0x254>)
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
					CoefficientAndTimeCalculation(&traject,0.0,0.0,60);
 800465a:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8004808 <RobotstateManagement+0x258>
 800465e:	eddf 0a6b 	vldr	s1, [pc, #428]	; 800480c <RobotstateManagement+0x25c>
 8004662:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 800480c <RobotstateManagement+0x25c>
 8004666:	486a      	ldr	r0, [pc, #424]	; (8004810 <RobotstateManagement+0x260>)
 8004668:	f7fd f8ca 	bl	8001800 <CoefficientAndTimeCalculation>
					Robot.flagStartTime = 1;
 800466c:	4b61      	ldr	r3, [pc, #388]	; (80047f4 <RobotstateManagement+0x244>)
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					StartTime = 0;
 8004674:	4967      	ldr	r1, [pc, #412]	; (8004814 <RobotstateManagement+0x264>)
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	e9c1 2300 	strd	r2, r3, [r1]
					CurrentTime = 0;
 8004682:	4965      	ldr	r1, [pc, #404]	; (8004818 <RobotstateManagement+0x268>)
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	e9c1 2300 	strd	r2, r3, [r1]
					PositionDeg[0] = 0;
 8004690:	4b62      	ldr	r3, [pc, #392]	; (800481c <RobotstateManagement+0x26c>)
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
					PositionDeg[1] = 0;
 8004698:	4b60      	ldr	r3, [pc, #384]	; (800481c <RobotstateManagement+0x26c>)
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	605a      	str	r2, [r3, #4]
					KalmanMatrixReset(&KalmanVar, Pvar);
 80046a0:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8004820 <RobotstateManagement+0x270>
 80046a4:	485f      	ldr	r0, [pc, #380]	; (8004824 <RobotstateManagement+0x274>)
 80046a6:	f7fc fcbb 	bl	8001020 <KalmanMatrixReset>
					Robotinit(&Robot);
 80046aa:	4852      	ldr	r0, [pc, #328]	; (80047f4 <RobotstateManagement+0x244>)
 80046ac:	f7fd f84c 	bl	8001748 <Robotinit>
					PIDAController_Init(&PidVelo);
 80046b0:	485d      	ldr	r0, [pc, #372]	; (8004828 <RobotstateManagement+0x278>)
 80046b2:	f7fc fe5d 	bl	8001370 <PIDAController_Init>
					PIDAController_Init(&PidPos);
 80046b6:	485d      	ldr	r0, [pc, #372]	; (800482c <RobotstateManagement+0x27c>)
 80046b8:	f7fc fe5a 	bl	8001370 <PIDAController_Init>
					FlagAckFromUART = 1;
 80046bc:	4b5c      	ldr	r3, [pc, #368]	; (8004830 <RobotstateManagement+0x280>)
 80046be:	2201      	movs	r2, #1
 80046c0:	701a      	strb	r2, [r3, #0]
					UARTState = MCUConnect;
 80046c2:	4b5c      	ldr	r3, [pc, #368]	; (8004834 <RobotstateManagement+0x284>)
 80046c4:	2202      	movs	r2, #2
 80046c6:	701a      	strb	r2, [r3, #0]
					RobotState = NormalOperation;
 80046c8:	4b49      	ldr	r3, [pc, #292]	; (80047f0 <RobotstateManagement+0x240>)
 80046ca:	2202      	movs	r2, #2
 80046cc:	701a      	strb	r2, [r3, #0]
			break;
 80046ce:	e089      	b.n	80047e4 <RobotstateManagement+0x234>
		case NormalOperation:
			if(doingTaskFlag == 1 && Robot.RunningFlag == 1 && endEffFlag == 0){
 80046d0:	4b59      	ldr	r3, [pc, #356]	; (8004838 <RobotstateManagement+0x288>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d159      	bne.n	800478c <RobotstateManagement+0x1dc>
 80046d8:	4b46      	ldr	r3, [pc, #280]	; (80047f4 <RobotstateManagement+0x244>)
 80046da:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d154      	bne.n	800478c <RobotstateManagement+0x1dc>
 80046e2:	4b56      	ldr	r3, [pc, #344]	; (800483c <RobotstateManagement+0x28c>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d150      	bne.n	800478c <RobotstateManagement+0x1dc>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80046ea:	2201      	movs	r2, #1
 80046ec:	2108      	movs	r1, #8
 80046ee:	4854      	ldr	r0, [pc, #336]	; (8004840 <RobotstateManagement+0x290>)
 80046f0:	f001 fdd0 	bl	8006294 <HAL_GPIO_WritePin>
				if(goalFlag == 1 && goingToGoalFlag == 0){
 80046f4:	4b53      	ldr	r3, [pc, #332]	; (8004844 <RobotstateManagement+0x294>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d11d      	bne.n	8004738 <RobotstateManagement+0x188>
 80046fc:	4b52      	ldr	r3, [pc, #328]	; (8004848 <RobotstateManagement+0x298>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d119      	bne.n	8004738 <RobotstateManagement+0x188>
					goingToGoalFlag = 1;
 8004704:	4b50      	ldr	r3, [pc, #320]	; (8004848 <RobotstateManagement+0x298>)
 8004706:	2201      	movs	r2, #1
 8004708:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = uartPos;
 800470a:	4b50      	ldr	r3, [pc, #320]	; (800484c <RobotstateManagement+0x29c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a39      	ldr	r2, [pc, #228]	; (80047f4 <RobotstateManagement+0x244>)
 8004710:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 8004712:	4b38      	ldr	r3, [pc, #224]	; (80047f4 <RobotstateManagement+0x244>)
 8004714:	edd3 7a00 	vldr	s15, [r3]
 8004718:	4b36      	ldr	r3, [pc, #216]	; (80047f4 <RobotstateManagement+0x244>)
 800471a:	ed93 7a03 	vldr	s14, [r3, #12]
 800471e:	4b35      	ldr	r3, [pc, #212]	; (80047f4 <RobotstateManagement+0x244>)
 8004720:	edd3 6a08 	vldr	s13, [r3, #32]
 8004724:	eeb0 1a66 	vmov.f32	s2, s13
 8004728:	eef0 0a47 	vmov.f32	s1, s14
 800472c:	eeb0 0a67 	vmov.f32	s0, s15
 8004730:	4837      	ldr	r0, [pc, #220]	; (8004810 <RobotstateManagement+0x260>)
 8004732:	f7fd f865 	bl	8001800 <CoefficientAndTimeCalculation>
 8004736:	e029      	b.n	800478c <RobotstateManagement+0x1dc>
				}
				else if(goalFlag == 2 && goingToGoalFlag == 0){
 8004738:	4b42      	ldr	r3, [pc, #264]	; (8004844 <RobotstateManagement+0x294>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d125      	bne.n	800478c <RobotstateManagement+0x1dc>
 8004740:	4b41      	ldr	r3, [pc, #260]	; (8004848 <RobotstateManagement+0x298>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d121      	bne.n	800478c <RobotstateManagement+0x1dc>
					goingToGoalFlag = 1;
 8004748:	4b3f      	ldr	r3, [pc, #252]	; (8004848 <RobotstateManagement+0x298>)
 800474a:	2201      	movs	r2, #1
 800474c:	701a      	strb	r2, [r3, #0]
					Robot.GoalPositon = goalDeg[uartGoal[goalIDX]-1];
 800474e:	4b40      	ldr	r3, [pc, #256]	; (8004850 <RobotstateManagement+0x2a0>)
 8004750:	f993 3000 	ldrsb.w	r3, [r3]
 8004754:	461a      	mov	r2, r3
 8004756:	4b3f      	ldr	r3, [pc, #252]	; (8004854 <RobotstateManagement+0x2a4>)
 8004758:	5c9b      	ldrb	r3, [r3, r2]
 800475a:	3b01      	subs	r3, #1
 800475c:	4a3e      	ldr	r2, [pc, #248]	; (8004858 <RobotstateManagement+0x2a8>)
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a23      	ldr	r2, [pc, #140]	; (80047f4 <RobotstateManagement+0x244>)
 8004766:	60d3      	str	r3, [r2, #12]
					CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 8004768:	4b22      	ldr	r3, [pc, #136]	; (80047f4 <RobotstateManagement+0x244>)
 800476a:	edd3 7a00 	vldr	s15, [r3]
 800476e:	4b21      	ldr	r3, [pc, #132]	; (80047f4 <RobotstateManagement+0x244>)
 8004770:	ed93 7a03 	vldr	s14, [r3, #12]
 8004774:	4b1f      	ldr	r3, [pc, #124]	; (80047f4 <RobotstateManagement+0x244>)
 8004776:	edd3 6a08 	vldr	s13, [r3, #32]
 800477a:	eeb0 1a66 	vmov.f32	s2, s13
 800477e:	eef0 0a47 	vmov.f32	s1, s14
 8004782:	eeb0 0a67 	vmov.f32	s0, s15
 8004786:	4822      	ldr	r0, [pc, #136]	; (8004810 <RobotstateManagement+0x260>)
 8004788:	f7fd f83a 	bl	8001800 <CoefficientAndTimeCalculation>
				}
			}

			if(goingToGoalFlag == 0 && doingTaskFlag == 1 && Robot.RunningFlag == 0 && endEffFlag == 1){
 800478c:	4b2e      	ldr	r3, [pc, #184]	; (8004848 <RobotstateManagement+0x298>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d129      	bne.n	80047e8 <RobotstateManagement+0x238>
 8004794:	4b28      	ldr	r3, [pc, #160]	; (8004838 <RobotstateManagement+0x288>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d125      	bne.n	80047e8 <RobotstateManagement+0x238>
 800479c:	4b15      	ldr	r3, [pc, #84]	; (80047f4 <RobotstateManagement+0x244>)
 800479e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d120      	bne.n	80047e8 <RobotstateManagement+0x238>
 80047a6:	4b25      	ldr	r3, [pc, #148]	; (800483c <RobotstateManagement+0x28c>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d11c      	bne.n	80047e8 <RobotstateManagement+0x238>
				RobotState = EndEff;
 80047ae:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <RobotstateManagement+0x240>)
 80047b0:	2203      	movs	r2, #3
 80047b2:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 80047b4:	4b29      	ldr	r3, [pc, #164]	; (800485c <RobotstateManagement+0x2ac>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 80047ba:	4b29      	ldr	r3, [pc, #164]	; (8004860 <RobotstateManagement+0x2b0>)
 80047bc:	2201      	movs	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
				EndEffState = CheckBeforRun;
 80047c0:	4b28      	ldr	r3, [pc, #160]	; (8004864 <RobotstateManagement+0x2b4>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80047c6:	e00f      	b.n	80047e8 <RobotstateManagement+0x238>
		case EndEff:
			EndEffstateManagement();
 80047c8:	f000 f84e 	bl	8004868 <EndEffstateManagement>
			break;
 80047cc:	e00d      	b.n	80047ea <RobotstateManagement+0x23a>
		case Emergency:
			Robot.MotorIsOn = 0;
 80047ce:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <RobotstateManagement+0x244>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			PIDAController_Init(&PidVelo);
 80047d6:	4814      	ldr	r0, [pc, #80]	; (8004828 <RobotstateManagement+0x278>)
 80047d8:	f7fc fdca 	bl	8001370 <PIDAController_Init>
			PIDAController_Init(&PidPos);
 80047dc:	4813      	ldr	r0, [pc, #76]	; (800482c <RobotstateManagement+0x27c>)
 80047de:	f7fc fdc7 	bl	8001370 <PIDAController_Init>
			// Luv u pls pass
			break;
 80047e2:	e002      	b.n	80047ea <RobotstateManagement+0x23a>
			break;
 80047e4:	bf00      	nop
 80047e6:	e000      	b.n	80047ea <RobotstateManagement+0x23a>
			break;
 80047e8:	bf00      	nop
	}
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20000651 	.word	0x20000651
 80047f4:	2000061c 	.word	0x2000061c
 80047f8:	424c0000 	.word	0x424c0000
 80047fc:	43b40000 	.word	0x43b40000
 8004800:	20000720 	.word	0x20000720
 8004804:	20000728 	.word	0x20000728
 8004808:	42700000 	.word	0x42700000
 800480c:	00000000 	.word	0x00000000
 8004810:	200007ac 	.word	0x200007ac
 8004814:	20000868 	.word	0x20000868
 8004818:	20000870 	.word	0x20000870
 800481c:	20000730 	.word	0x20000730
 8004820:	447a0000 	.word	0x447a0000
 8004824:	20000034 	.word	0x20000034
 8004828:	20000740 	.word	0x20000740
 800482c:	20000774 	.word	0x20000774
 8004830:	20000684 	.word	0x20000684
 8004834:	20000650 	.word	0x20000650
 8004838:	200006ac 	.word	0x200006ac
 800483c:	200006aa 	.word	0x200006aa
 8004840:	40020400 	.word	0x40020400
 8004844:	200006a9 	.word	0x200006a9
 8004848:	200006ad 	.word	0x200006ad
 800484c:	20000694 	.word	0x20000694
 8004850:	200006a8 	.word	0x200006a8
 8004854:	20000698 	.word	0x20000698
 8004858:	20000004 	.word	0x20000004
 800485c:	200008b9 	.word	0x200008b9
 8004860:	200008b8 	.word	0x200008b8
 8004864:	20000000 	.word	0x20000000

08004868 <EndEffstateManagement>:

void EndEffstateManagement()
{
 8004868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800486c:	b086      	sub	sp, #24
 800486e:	af00      	add	r7, sp, #0
	switch (EndEffState)
 8004870:	4ba9      	ldr	r3, [pc, #676]	; (8004b18 <EndEffstateManagement+0x2b0>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b04      	cmp	r3, #4
 8004876:	f200 8149 	bhi.w	8004b0c <EndEffstateManagement+0x2a4>
 800487a:	a201      	add	r2, pc, #4	; (adr r2, 8004880 <EndEffstateManagement+0x18>)
 800487c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004880:	08004895 	.word	0x08004895
 8004884:	0800489d 	.word	0x0800489d
 8004888:	08004957 	.word	0x08004957
 800488c:	080049d5 	.word	0x080049d5
 8004890:	080049fd 	.word	0x080049fd
	{
		case idle:
			// Do not thing wait for command
			EndEffStatus = AwaitCommand;
 8004894:	4ba1      	ldr	r3, [pc, #644]	; (8004b1c <EndEffstateManagement+0x2b4>)
 8004896:	2203      	movs	r2, #3
 8004898:	701a      	strb	r2, [r3, #0]
//			I2CEndEffectorWriteFlag = 1;
			break;
 800489a:	e137      	b.n	8004b0c <EndEffstateManagement+0x2a4>
		case CheckBeforRun:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 800489c:	4ba0      	ldr	r3, [pc, #640]	; (8004b20 <EndEffstateManagement+0x2b8>)
 800489e:	2223      	movs	r2, #35	; 0x23
 80048a0:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 80048a2:	489f      	ldr	r0, [pc, #636]	; (8004b20 <EndEffstateManagement+0x2b8>)
 80048a4:	f000 f95c 	bl	8004b60 <I2CWriteFcn>
			check[0]++;
 80048a8:	4b9e      	ldr	r3, [pc, #632]	; (8004b24 <EndEffstateManagement+0x2bc>)
 80048aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ae:	1c51      	adds	r1, r2, #1
 80048b0:	6139      	str	r1, [r7, #16]
 80048b2:	f143 0300 	adc.w	r3, r3, #0
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	4b9a      	ldr	r3, [pc, #616]	; (8004b24 <EndEffstateManagement+0x2bc>)
 80048ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048be:	e9c3 1200 	strd	r1, r2, [r3]
			if(hi2c1.State == HAL_I2C_STATE_READY)
 80048c2:	4b99      	ldr	r3, [pc, #612]	; (8004b28 <EndEffstateManagement+0x2c0>)
 80048c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b20      	cmp	r3, #32
 80048cc:	f040 8117 	bne.w	8004afe <EndEffstateManagement+0x296>
			{
				I2CReadFcn(I2CRxDataBuffer);
 80048d0:	4896      	ldr	r0, [pc, #600]	; (8004b2c <EndEffstateManagement+0x2c4>)
 80048d2:	f000 f96b 	bl	8004bac <I2CReadFcn>
				check[1]++;
 80048d6:	4b93      	ldr	r3, [pc, #588]	; (8004b24 <EndEffstateManagement+0x2bc>)
 80048d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80048dc:	1c51      	adds	r1, r2, #1
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	f143 0300 	adc.w	r3, r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	4b8f      	ldr	r3, [pc, #572]	; (8004b24 <EndEffstateManagement+0x2bc>)
 80048e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80048ec:	e9c3 1202 	strd	r1, r2, [r3, #8]
				if(hi2c1.State == HAL_I2C_STATE_READY)
 80048f0:	4b8d      	ldr	r3, [pc, #564]	; (8004b28 <EndEffstateManagement+0x2c0>)
 80048f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	f040 8100 	bne.w	8004afe <EndEffstateManagement+0x296>
				{
					if(I2CRxDataBuffer[0] == 0x78)
 80048fe:	4b8b      	ldr	r3, [pc, #556]	; (8004b2c <EndEffstateManagement+0x2c4>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b78      	cmp	r3, #120	; 0x78
 8004904:	d119      	bne.n	800493a <EndEffstateManagement+0xd2>
					{
						check[2]++;
 8004906:	4b87      	ldr	r3, [pc, #540]	; (8004b24 <EndEffstateManagement+0x2bc>)
 8004908:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800490c:	1c51      	adds	r1, r2, #1
 800490e:	6039      	str	r1, [r7, #0]
 8004910:	f143 0300 	adc.w	r3, r3, #0
 8004914:	607b      	str	r3, [r7, #4]
 8004916:	4b83      	ldr	r3, [pc, #524]	; (8004b24 <EndEffstateManagement+0x2bc>)
 8004918:	e9d7 1200 	ldrd	r1, r2, [r7]
 800491c:	e9c3 1204 	strd	r1, r2, [r3, #16]
						EndEffState = OpenLaser;
 8004920:	4b7d      	ldr	r3, [pc, #500]	; (8004b18 <EndEffstateManagement+0x2b0>)
 8004922:	2202      	movs	r2, #2
 8004924:	701a      	strb	r2, [r3, #0]
						openLaserWriteFlag = 1;
 8004926:	4b82      	ldr	r3, [pc, #520]	; (8004b30 <EndEffstateManagement+0x2c8>)
 8004928:	2201      	movs	r2, #1
 800492a:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorWriteFlag = 1;
 800492c:	4b81      	ldr	r3, [pc, #516]	; (8004b34 <EndEffstateManagement+0x2cc>)
 800492e:	2201      	movs	r2, #1
 8004930:	701a      	strb	r2, [r3, #0]
						I2CEndEffectorReadFlag =  0;
 8004932:	4b81      	ldr	r3, [pc, #516]	; (8004b38 <EndEffstateManagement+0x2d0>)
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]
						EndEffState = idle;
					}
				}
			}

		break;
 8004938:	e0e1      	b.n	8004afe <EndEffstateManagement+0x296>
						check[3]++;
 800493a:	4b7a      	ldr	r3, [pc, #488]	; (8004b24 <EndEffstateManagement+0x2bc>)
 800493c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004940:	f112 0a01 	adds.w	sl, r2, #1
 8004944:	f143 0b00 	adc.w	fp, r3, #0
 8004948:	4b76      	ldr	r3, [pc, #472]	; (8004b24 <EndEffstateManagement+0x2bc>)
 800494a:	e9c3 ab06 	strd	sl, fp, [r3, #24]
						EndEffState = idle;
 800494e:	4b72      	ldr	r3, [pc, #456]	; (8004b18 <EndEffstateManagement+0x2b0>)
 8004950:	2200      	movs	r2, #0
 8004952:	701a      	strb	r2, [r3, #0]
		break;
 8004954:	e0d3      	b.n	8004afe <EndEffstateManagement+0x296>
		case OpenLaser:
			// Open Laser
			if(openLaserWriteFlag == 1){
 8004956:	4b76      	ldr	r3, [pc, #472]	; (8004b30 <EndEffstateManagement+0x2c8>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d11d      	bne.n	800499a <EndEffstateManagement+0x132>
				check[4]++;
 800495e:	4b71      	ldr	r3, [pc, #452]	; (8004b24 <EndEffstateManagement+0x2bc>)
 8004960:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004964:	1c50      	adds	r0, r2, #1
 8004966:	f143 0100 	adc.w	r1, r3, #0
 800496a:	4b6e      	ldr	r3, [pc, #440]	; (8004b24 <EndEffstateManagement+0x2bc>)
 800496c:	e9c3 0108 	strd	r0, r1, [r3, #32]
				I2CTxDataBuffer[0] = 0x45;
 8004970:	4b6b      	ldr	r3, [pc, #428]	; (8004b20 <EndEffstateManagement+0x2b8>)
 8004972:	2245      	movs	r2, #69	; 0x45
 8004974:	701a      	strb	r2, [r3, #0]
				I2CWriteFcn(I2CTxDataBuffer);
 8004976:	486a      	ldr	r0, [pc, #424]	; (8004b20 <EndEffstateManagement+0x2b8>)
 8004978:	f000 f8f2 	bl	8004b60 <I2CWriteFcn>
				openLaserWriteFlag = 0;
 800497c:	4b6c      	ldr	r3, [pc, #432]	; (8004b30 <EndEffstateManagement+0x2c8>)
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]
				endEffLoopTime = Micros();
 8004982:	f000 fa7b 	bl	8004e7c <Micros>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	496c      	ldr	r1, [pc, #432]	; (8004b3c <EndEffstateManagement+0x2d4>)
 800498c:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8004990:	2201      	movs	r2, #1
 8004992:	2110      	movs	r1, #16
 8004994:	486a      	ldr	r0, [pc, #424]	; (8004b40 <EndEffstateManagement+0x2d8>)
 8004996:	f001 fc7d 	bl	8006294 <HAL_GPIO_WritePin>
			}
			if(hi2c1.State == HAL_I2C_STATE_READY && Micros() - endEffLoopTime > 50000)
 800499a:	4b63      	ldr	r3, [pc, #396]	; (8004b28 <EndEffstateManagement+0x2c0>)
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	f040 80ad 	bne.w	8004b02 <EndEffstateManagement+0x29a>
 80049a8:	f000 fa68 	bl	8004e7c <Micros>
 80049ac:	4b63      	ldr	r3, [pc, #396]	; (8004b3c <EndEffstateManagement+0x2d4>)
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	1a84      	subs	r4, r0, r2
 80049b4:	eb61 0503 	sbc.w	r5, r1, r3
 80049b8:	f24c 3351 	movw	r3, #50001	; 0xc351
 80049bc:	429c      	cmp	r4, r3
 80049be:	f175 0300 	sbcs.w	r3, r5, #0
 80049c2:	f0c0 809e 	bcc.w	8004b02 <EndEffstateManagement+0x29a>
			{
				EndEffState = SetupReadStatus;
 80049c6:	4b54      	ldr	r3, [pc, #336]	; (8004b18 <EndEffstateManagement+0x2b0>)
 80049c8:	2203      	movs	r2, #3
 80049ca:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorWriteFlag = 1;
 80049cc:	4b59      	ldr	r3, [pc, #356]	; (8004b34 <EndEffstateManagement+0x2cc>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80049d2:	e096      	b.n	8004b02 <EndEffstateManagement+0x29a>
		case SetupReadStatus:
			// Set up Read
			I2CTxDataBuffer[0] = 0x23;
 80049d4:	4b52      	ldr	r3, [pc, #328]	; (8004b20 <EndEffstateManagement+0x2b8>)
 80049d6:	2223      	movs	r2, #35	; 0x23
 80049d8:	701a      	strb	r2, [r3, #0]
			I2CWriteFcn(I2CTxDataBuffer);
 80049da:	4851      	ldr	r0, [pc, #324]	; (8004b20 <EndEffstateManagement+0x2b8>)
 80049dc:	f000 f8c0 	bl	8004b60 <I2CWriteFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 80049e0:	4b51      	ldr	r3, [pc, #324]	; (8004b28 <EndEffstateManagement+0x2c0>)
 80049e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	f040 808c 	bne.w	8004b06 <EndEffstateManagement+0x29e>
			{
				EndEffState = ReadStatus;
 80049ee:	4b4a      	ldr	r3, [pc, #296]	; (8004b18 <EndEffstateManagement+0x2b0>)
 80049f0:	2204      	movs	r2, #4
 80049f2:	701a      	strb	r2, [r3, #0]
				I2CEndEffectorReadFlag =  1;
 80049f4:	4b50      	ldr	r3, [pc, #320]	; (8004b38 <EndEffstateManagement+0x2d0>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80049fa:	e084      	b.n	8004b06 <EndEffstateManagement+0x29e>
		case ReadStatus:
			I2CReadFcn(I2CRxDataBuffer);
 80049fc:	484b      	ldr	r0, [pc, #300]	; (8004b2c <EndEffstateManagement+0x2c4>)
 80049fe:	f000 f8d5 	bl	8004bac <I2CReadFcn>
			if(hi2c1.State == HAL_I2C_STATE_READY)
 8004a02:	4b49      	ldr	r3, [pc, #292]	; (8004b28 <EndEffstateManagement+0x2c0>)
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	d17d      	bne.n	8004b0a <EndEffstateManagement+0x2a2>
			{
				I2CEndEffectorReadFlag =  1;
 8004a0e:	4b4a      	ldr	r3, [pc, #296]	; (8004b38 <EndEffstateManagement+0x2d0>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	701a      	strb	r2, [r3, #0]
				if(I2CRxDataBuffer[0] == 0x78)
 8004a14:	4b45      	ldr	r3, [pc, #276]	; (8004b2c <EndEffstateManagement+0x2c4>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b78      	cmp	r3, #120	; 0x78
 8004a1a:	d146      	bne.n	8004aaa <EndEffstateManagement+0x242>
				{
					check[5]++;
 8004a1c:	4b41      	ldr	r3, [pc, #260]	; (8004b24 <EndEffstateManagement+0x2bc>)
 8004a1e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004a22:	f112 0801 	adds.w	r8, r2, #1
 8004a26:	f143 0900 	adc.w	r9, r3, #0
 8004a2a:	4b3e      	ldr	r3, [pc, #248]	; (8004b24 <EndEffstateManagement+0x2bc>)
 8004a2c:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8004a30:	2200      	movs	r2, #0
 8004a32:	2110      	movs	r1, #16
 8004a34:	4842      	ldr	r0, [pc, #264]	; (8004b40 <EndEffstateManagement+0x2d8>)
 8004a36:	f001 fc2d 	bl	8006294 <HAL_GPIO_WritePin>
					EndEffState = idle;
 8004a3a:	4b37      	ldr	r3, [pc, #220]	; (8004b18 <EndEffstateManagement+0x2b0>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	701a      	strb	r2, [r3, #0]
					EndEffStatus = AwaitCommand;
 8004a40:	4b36      	ldr	r3, [pc, #216]	; (8004b1c <EndEffstateManagement+0x2b4>)
 8004a42:	2203      	movs	r2, #3
 8004a44:	701a      	strb	r2, [r3, #0]
					RobotState = NormalOperation;
 8004a46:	4b3f      	ldr	r3, [pc, #252]	; (8004b44 <EndEffstateManagement+0x2dc>)
 8004a48:	2202      	movs	r2, #2
 8004a4a:	701a      	strb	r2, [r3, #0]
					endEffFlag = 0;
 8004a4c:	4b3e      	ldr	r3, [pc, #248]	; (8004b48 <EndEffstateManagement+0x2e0>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
					if(doingTaskFlag == 1){
 8004a52:	4b3e      	ldr	r3, [pc, #248]	; (8004b4c <EndEffstateManagement+0x2e4>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d157      	bne.n	8004b0a <EndEffstateManagement+0x2a2>
						goalIDX++;
 8004a5a:	4b3d      	ldr	r3, [pc, #244]	; (8004b50 <EndEffstateManagement+0x2e8>)
 8004a5c:	f993 3000 	ldrsb.w	r3, [r3]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	3301      	adds	r3, #1
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	b25a      	sxtb	r2, r3
 8004a68:	4b39      	ldr	r3, [pc, #228]	; (8004b50 <EndEffstateManagement+0x2e8>)
 8004a6a:	701a      	strb	r2, [r3, #0]
						if(goalIDX > goalAmount-1){
 8004a6c:	4b39      	ldr	r3, [pc, #228]	; (8004b54 <EndEffstateManagement+0x2ec>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	4b37      	ldr	r3, [pc, #220]	; (8004b50 <EndEffstateManagement+0x2e8>)
 8004a74:	f993 3000 	ldrsb.w	r3, [r3]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	dc09      	bgt.n	8004a90 <EndEffstateManagement+0x228>
							goalIDX = 0;
 8004a7c:	4b34      	ldr	r3, [pc, #208]	; (8004b50 <EndEffstateManagement+0x2e8>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	701a      	strb	r2, [r3, #0]
							goalFlag = 0;
 8004a82:	4b35      	ldr	r3, [pc, #212]	; (8004b58 <EndEffstateManagement+0x2f0>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
							doingTaskFlag = 0;
 8004a88:	4b30      	ldr	r3, [pc, #192]	; (8004b4c <EndEffstateManagement+0x2e4>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	701a      	strb	r2, [r3, #0]
					EndEffStatus = Closing;
					EndEffState = SetupReadStatus;
					I2CEndEffectorWriteFlag = 1;
				}
			}
			break;
 8004a8e:	e03c      	b.n	8004b0a <EndEffstateManagement+0x2a2>
							Robot.MotorIsOn = 1;
 8004a90:	4b32      	ldr	r3, [pc, #200]	; (8004b5c <EndEffstateManagement+0x2f4>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							Robot.RunningFlag = 1;
 8004a98:	4b30      	ldr	r3, [pc, #192]	; (8004b5c <EndEffstateManagement+0x2f4>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							Robot.flagStartTime = 1;
 8004aa0:	4b2e      	ldr	r3, [pc, #184]	; (8004b5c <EndEffstateManagement+0x2f4>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			break;
 8004aa8:	e02f      	b.n	8004b0a <EndEffstateManagement+0x2a2>
				else if(I2CRxDataBuffer[0] == 0x12)
 8004aaa:	4b20      	ldr	r3, [pc, #128]	; (8004b2c <EndEffstateManagement+0x2c4>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b12      	cmp	r3, #18
 8004ab0:	d109      	bne.n	8004ac6 <EndEffstateManagement+0x25e>
					EndEffStatus = Opening;
 8004ab2:	4b1a      	ldr	r3, [pc, #104]	; (8004b1c <EndEffstateManagement+0x2b4>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004ab8:	4b17      	ldr	r3, [pc, #92]	; (8004b18 <EndEffstateManagement+0x2b0>)
 8004aba:	2203      	movs	r2, #3
 8004abc:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004abe:	4b1d      	ldr	r3, [pc, #116]	; (8004b34 <EndEffstateManagement+0x2cc>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	701a      	strb	r2, [r3, #0]
			break;
 8004ac4:	e021      	b.n	8004b0a <EndEffstateManagement+0x2a2>
				else if(I2CRxDataBuffer[0] == 0x34)
 8004ac6:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <EndEffstateManagement+0x2c4>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b34      	cmp	r3, #52	; 0x34
 8004acc:	d109      	bne.n	8004ae2 <EndEffstateManagement+0x27a>
					EndEffStatus = Working;
 8004ace:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <EndEffstateManagement+0x2b4>)
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004ad4:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <EndEffstateManagement+0x2b0>)
 8004ad6:	2203      	movs	r2, #3
 8004ad8:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004ada:	4b16      	ldr	r3, [pc, #88]	; (8004b34 <EndEffstateManagement+0x2cc>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	701a      	strb	r2, [r3, #0]
			break;
 8004ae0:	e013      	b.n	8004b0a <EndEffstateManagement+0x2a2>
				else if(I2CRxDataBuffer[0] == 0x56)
 8004ae2:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <EndEffstateManagement+0x2c4>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b56      	cmp	r3, #86	; 0x56
 8004ae8:	d10f      	bne.n	8004b0a <EndEffstateManagement+0x2a2>
					EndEffStatus = Closing;
 8004aea:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <EndEffstateManagement+0x2b4>)
 8004aec:	2201      	movs	r2, #1
 8004aee:	701a      	strb	r2, [r3, #0]
					EndEffState = SetupReadStatus;
 8004af0:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <EndEffstateManagement+0x2b0>)
 8004af2:	2203      	movs	r2, #3
 8004af4:	701a      	strb	r2, [r3, #0]
					I2CEndEffectorWriteFlag = 1;
 8004af6:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <EndEffstateManagement+0x2cc>)
 8004af8:	2201      	movs	r2, #1
 8004afa:	701a      	strb	r2, [r3, #0]
			break;
 8004afc:	e005      	b.n	8004b0a <EndEffstateManagement+0x2a2>
		break;
 8004afe:	bf00      	nop
 8004b00:	e004      	b.n	8004b0c <EndEffstateManagement+0x2a4>
			break;
 8004b02:	bf00      	nop
 8004b04:	e002      	b.n	8004b0c <EndEffstateManagement+0x2a4>
			break;
 8004b06:	bf00      	nop
 8004b08:	e000      	b.n	8004b0c <EndEffstateManagement+0x2a4>
			break;
 8004b0a:	bf00      	nop
	}
}
 8004b0c:	bf00      	nop
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b16:	bf00      	nop
 8004b18:	20000000 	.word	0x20000000
 8004b1c:	20000001 	.word	0x20000001
 8004b20:	200008c0 	.word	0x200008c0
 8004b24:	200006d0 	.word	0x200006d0
 8004b28:	200003ec 	.word	0x200003ec
 8004b2c:	200008bc 	.word	0x200008bc
 8004b30:	200006ae 	.word	0x200006ae
 8004b34:	200008b9 	.word	0x200008b9
 8004b38:	200008b8 	.word	0x200008b8
 8004b3c:	200008a8 	.word	0x200008a8
 8004b40:	40020400 	.word	0x40020400
 8004b44:	20000651 	.word	0x20000651
 8004b48:	200006aa 	.word	0x200006aa
 8004b4c:	200006ac 	.word	0x200006ac
 8004b50:	200006a8 	.word	0x200006a8
 8004b54:	200006a7 	.word	0x200006a7
 8004b58:	200006a9 	.word	0x200006a9
 8004b5c:	2000061c 	.word	0x2000061c

08004b60 <I2CWriteFcn>:

void I2CWriteFcn(uint8_t *Wdata) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorWriteFlag == 1  && hi2c1.State == HAL_I2C_STATE_READY) {
 8004b68:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <I2CWriteFcn+0x40>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d112      	bne.n	8004b96 <I2CWriteFcn+0x36>
 8004b70:	4b0c      	ldr	r3, [pc, #48]	; (8004ba4 <I2CWriteFcn+0x44>)
 8004b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d10c      	bne.n	8004b96 <I2CWriteFcn+0x36>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	781a      	ldrb	r2, [r3, #0]
		static uint8_t data[EndEffRxBuf_SIZE];
		memcpy ((uint8_t *)data, (uint8_t *)Wdata, EndEffRxBuf_SIZE);
 8004b80:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <I2CWriteFcn+0x48>)
 8004b82:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, Endeff_ADDR, data, I2CTxDataLen);
 8004b84:	2301      	movs	r3, #1
 8004b86:	4a08      	ldr	r2, [pc, #32]	; (8004ba8 <I2CWriteFcn+0x48>)
 8004b88:	2146      	movs	r1, #70	; 0x46
 8004b8a:	4806      	ldr	r0, [pc, #24]	; (8004ba4 <I2CWriteFcn+0x44>)
 8004b8c:	f001 fd12 	bl	80065b4 <HAL_I2C_Master_Transmit_IT>
		I2CEndEffectorWriteFlag = 0;
 8004b90:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <I2CWriteFcn+0x40>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	701a      	strb	r2, [r3, #0]
	}
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	200008b9 	.word	0x200008b9
 8004ba4:	200003ec 	.word	0x200003ec
 8004ba8:	200008d4 	.word	0x200008d4

08004bac <I2CReadFcn>:
void I2CReadFcn(uint8_t *Rdata) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	if (I2CEndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY) {
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <I2CReadFcn+0x38>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d10e      	bne.n	8004bda <I2CReadFcn+0x2e>
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <I2CReadFcn+0x3c>)
 8004bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d108      	bne.n	8004bda <I2CReadFcn+0x2e>
		HAL_I2C_Master_Receive_IT(&hi2c1, Endeff_ADDR, Rdata, I2CRxDataLen);
 8004bc8:	2301      	movs	r3, #1
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	2146      	movs	r1, #70	; 0x46
 8004bce:	4806      	ldr	r0, [pc, #24]	; (8004be8 <I2CReadFcn+0x3c>)
 8004bd0:	f001 fd96 	bl	8006700 <HAL_I2C_Master_Receive_IT>
		I2CEndEffectorReadFlag =  0;
 8004bd4:	4b03      	ldr	r3, [pc, #12]	; (8004be4 <I2CReadFcn+0x38>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
	}
}
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	200008b8 	.word	0x200008b8
 8004be8:	200003ec 	.word	0x200003ec

08004bec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	81fb      	strh	r3, [r7, #14]
	if(GPIO_Pin == GPIO_PIN_13)
 8004bf8:	89fb      	ldrh	r3, [r7, #14]
 8004bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bfe:	d103      	bne.n	8004c08 <HAL_GPIO_EXTI_Callback+0x1c>
	{
//		I2CEndEffectorWriteFlag = 1;
//		I2CEndEffectorReadFlag =  1;
//		EndEffState = CheckBeforRun;
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8004c00:	2108      	movs	r1, #8
 8004c02:	4860      	ldr	r0, [pc, #384]	; (8004d84 <HAL_GPIO_EXTI_Callback+0x198>)
 8004c04:	f001 fb5f 	bl	80062c6 <HAL_GPIO_TogglePin>
	}
	if(GPIO_Pin == GPIO_PIN_10)
 8004c08:	89fb      	ldrh	r3, [r7, #14]
 8004c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0e:	d13e      	bne.n	8004c8e <HAL_GPIO_EXTI_Callback+0xa2>
	{
		// Proxi Sensor
		if(Robot.flagSethome == 1)
 8004c10:	4b5d      	ldr	r3, [pc, #372]	; (8004d88 <HAL_GPIO_EXTI_Callback+0x19c>)
 8004c12:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d139      	bne.n	8004c8e <HAL_GPIO_EXTI_Callback+0xa2>
		{
			homePoint[homeFF] = PositionDeg[0];
 8004c1a:	4b5c      	ldr	r3, [pc, #368]	; (8004d8c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	4b5b      	ldr	r3, [pc, #364]	; (8004d90 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	495b      	ldr	r1, [pc, #364]	; (8004d94 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8004c26:	0083      	lsls	r3, r0, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	601a      	str	r2, [r3, #0]
			homeFF++;
 8004c2c:	4b57      	ldr	r3, [pc, #348]	; (8004d8c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	3301      	adds	r3, #1
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	4b55      	ldr	r3, [pc, #340]	; (8004d8c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8004c36:	701a      	strb	r2, [r3, #0]
			if(homeFF == 2)
 8004c38:	4b54      	ldr	r3, [pc, #336]	; (8004d8c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d126      	bne.n	8004c8e <HAL_GPIO_EXTI_Callback+0xa2>
			{
				if(homePoint[1]-homePoint[0] > 180.0)
 8004c40:	4b54      	ldr	r3, [pc, #336]	; (8004d94 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8004c42:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c46:	4b53      	ldr	r3, [pc, #332]	; (8004d94 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8004c48:	edd3 7a00 	vldr	s15, [r3]
 8004c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c50:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8004d98 <HAL_GPIO_EXTI_Callback+0x1ac>
 8004c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5c:	dd04      	ble.n	8004c68 <HAL_GPIO_EXTI_Callback+0x7c>
				{
					Robot.HomePositon =  0;
 8004c5e:	4b4a      	ldr	r3, [pc, #296]	; (8004d88 <HAL_GPIO_EXTI_Callback+0x19c>)
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	615a      	str	r2, [r3, #20]
 8004c66:	e00e      	b.n	8004c86 <HAL_GPIO_EXTI_Callback+0x9a>
				}
				else
				{
					Robot.HomePositon = (homePoint[0]+homePoint[1])/2.0;
 8004c68:	4b4a      	ldr	r3, [pc, #296]	; (8004d94 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8004c6a:	ed93 7a00 	vldr	s14, [r3]
 8004c6e:	4b49      	ldr	r3, [pc, #292]	; (8004d94 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8004c70:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c78:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004c7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c80:	4b41      	ldr	r3, [pc, #260]	; (8004d88 <HAL_GPIO_EXTI_Callback+0x19c>)
 8004c82:	edc3 7a05 	vstr	s15, [r3, #20]
				}
				Robot.flagSethome = 2;
 8004c86:	4b40      	ldr	r3, [pc, #256]	; (8004d88 <HAL_GPIO_EXTI_Callback+0x19c>)
 8004c88:	2202      	movs	r2, #2
 8004c8a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
//		else{
//			EmertimeoutFlag = 0;
//			check[9]++;
//		}
//	}
	if(GPIO_Pin == GPIO_PIN_5)
 8004c8e:	89fb      	ldrh	r3, [r7, #14]
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d171      	bne.n	8004d78 <HAL_GPIO_EXTI_Callback+0x18c>
	{
		if(EmertimeoutFlag == 0)
 8004c94:	4b41      	ldr	r3, [pc, #260]	; (8004d9c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d102      	bne.n	8004ca2 <HAL_GPIO_EXTI_Callback+0xb6>
		{
			EmertimeoutFlag = 1;
 8004c9c:	4b3f      	ldr	r3, [pc, #252]	; (8004d9c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	701a      	strb	r2, [r3, #0]
		}

		if(Micros() - EmergencycalloutTime > 10000 && EmertimeoutFlag == 1)
 8004ca2:	f000 f8eb 	bl	8004e7c <Micros>
 8004ca6:	4b3e      	ldr	r3, [pc, #248]	; (8004da0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	1a84      	subs	r4, r0, r2
 8004cae:	eb61 0503 	sbc.w	r5, r1, r3
 8004cb2:	f242 7311 	movw	r3, #10001	; 0x2711
 8004cb6:	429c      	cmp	r4, r3
 8004cb8:	f175 0300 	sbcs.w	r3, r5, #0
 8004cbc:	d35c      	bcc.n	8004d78 <HAL_GPIO_EXTI_Callback+0x18c>
 8004cbe:	4b37      	ldr	r3, [pc, #220]	; (8004d9c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d158      	bne.n	8004d78 <HAL_GPIO_EXTI_Callback+0x18c>
		{
			check[6]++;
 8004cc6:	4b37      	ldr	r3, [pc, #220]	; (8004da4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8004cc8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004ccc:	1c51      	adds	r1, r2, #1
 8004cce:	6039      	str	r1, [r7, #0]
 8004cd0:	f143 0300 	adc.w	r3, r3, #0
 8004cd4:	607b      	str	r3, [r7, #4]
 8004cd6:	4b33      	ldr	r3, [pc, #204]	; (8004da4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8004cd8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004cdc:	e9c3 120c 	strd	r1, r2, [r3, #48]	; 0x30
			EmergencycalloutTime = Micros();
 8004ce0:	f000 f8cc 	bl	8004e7c <Micros>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	492d      	ldr	r1, [pc, #180]	; (8004da0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8004cea:	e9c1 2300 	strd	r2, r3, [r1]
			EmertimeoutFlag = 0;
 8004cee:	4b2b      	ldr	r3, [pc, #172]	; (8004d9c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	701a      	strb	r2, [r3, #0]
			//Docode
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET)
 8004cf4:	2120      	movs	r1, #32
 8004cf6:	4823      	ldr	r0, [pc, #140]	; (8004d84 <HAL_GPIO_EXTI_Callback+0x198>)
 8004cf8:	f001 fab4 	bl	8006264 <HAL_GPIO_ReadPin>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d127      	bne.n	8004d52 <HAL_GPIO_EXTI_Callback+0x166>
			{
				check[7]++;
 8004d02:	4b28      	ldr	r3, [pc, #160]	; (8004da4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8004d04:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004d08:	f112 0a01 	adds.w	sl, r2, #1
 8004d0c:	f143 0b00 	adc.w	fp, r3, #0
 8004d10:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8004d12:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
				RobotState = NormalOperation;
 8004d16:	4b24      	ldr	r3, [pc, #144]	; (8004da8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8004d18:	2202      	movs	r2, #2
 8004d1a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d22:	4818      	ldr	r0, [pc, #96]	; (8004d84 <HAL_GPIO_EXTI_Callback+0x198>)
 8004d24:	f001 fab6 	bl	8006294 <HAL_GPIO_WritePin>
				if(doingTaskFlag == 1 && goingToGoalFlag == 1)
 8004d28:	4b20      	ldr	r3, [pc, #128]	; (8004dac <HAL_GPIO_EXTI_Callback+0x1c0>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d123      	bne.n	8004d78 <HAL_GPIO_EXTI_Callback+0x18c>
 8004d30:	4b1f      	ldr	r3, [pc, #124]	; (8004db0 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d11f      	bne.n	8004d78 <HAL_GPIO_EXTI_Callback+0x18c>
				{
					RobotRunToPositon(Robot.GoalPositon,Robot.QVMax);
 8004d38:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <HAL_GPIO_EXTI_Callback+0x19c>)
 8004d3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d3e:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <HAL_GPIO_EXTI_Callback+0x19c>)
 8004d40:	ed93 7a08 	vldr	s14, [r3, #32]
 8004d44:	eef0 0a47 	vmov.f32	s1, s14
 8004d48:	eeb0 0a67 	vmov.f32	s0, s15
 8004d4c:	f000 f832 	bl	8004db4 <RobotRunToPositon>
				RobotState = Emergency;
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
			}
		}
	}
}
 8004d50:	e012      	b.n	8004d78 <HAL_GPIO_EXTI_Callback+0x18c>
				check[8]++;
 8004d52:	4b14      	ldr	r3, [pc, #80]	; (8004da4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8004d54:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004d58:	f112 0801 	adds.w	r8, r2, #1
 8004d5c:	f143 0900 	adc.w	r9, r3, #0
 8004d60:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8004d62:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
				RobotState = Emergency;
 8004d66:	4b10      	ldr	r3, [pc, #64]	; (8004da8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8004d68:	2204      	movs	r2, #4
 8004d6a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d72:	4804      	ldr	r0, [pc, #16]	; (8004d84 <HAL_GPIO_EXTI_Callback+0x198>)
 8004d74:	f001 fa8e 	bl	8006294 <HAL_GPIO_WritePin>
}
 8004d78:	bf00      	nop
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d82:	bf00      	nop
 8004d84:	40020400 	.word	0x40020400
 8004d88:	2000061c 	.word	0x2000061c
 8004d8c:	20000644 	.word	0x20000644
 8004d90:	20000730 	.word	0x20000730
 8004d94:	20000648 	.word	0x20000648
 8004d98:	43340000 	.word	0x43340000
 8004d9c:	200008a0 	.word	0x200008a0
 8004da0:	20000898 	.word	0x20000898
 8004da4:	200006d0 	.word	0x200006d0
 8004da8:	20000651 	.word	0x20000651
 8004dac:	200006ac 	.word	0x200006ac
 8004db0:	200006ad 	.word	0x200006ad

08004db4 <RobotRunToPositon>:
void RobotRunToPositon(float Destination , float VeloInput)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	ed87 0a01 	vstr	s0, [r7, #4]
 8004dbe:	edc7 0a00 	vstr	s1, [r7]
	Robot.GoalPositon = Destination;
 8004dc2:	4a16      	ldr	r2, [pc, #88]	; (8004e1c <RobotRunToPositon+0x68>)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	60d3      	str	r3, [r2, #12]
	Robot.QVMax = VeloInput;
 8004dc8:	4a14      	ldr	r2, [pc, #80]	; (8004e1c <RobotRunToPositon+0x68>)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6213      	str	r3, [r2, #32]
	CoefficientAndTimeCalculation(&traject,Robot.Position,Robot.GoalPositon,Robot.QVMax);
 8004dce:	4b13      	ldr	r3, [pc, #76]	; (8004e1c <RobotRunToPositon+0x68>)
 8004dd0:	edd3 7a00 	vldr	s15, [r3]
 8004dd4:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <RobotRunToPositon+0x68>)
 8004dd6:	ed93 7a03 	vldr	s14, [r3, #12]
 8004dda:	4b10      	ldr	r3, [pc, #64]	; (8004e1c <RobotRunToPositon+0x68>)
 8004ddc:	edd3 6a08 	vldr	s13, [r3, #32]
 8004de0:	eeb0 1a66 	vmov.f32	s2, s13
 8004de4:	eef0 0a47 	vmov.f32	s1, s14
 8004de8:	eeb0 0a67 	vmov.f32	s0, s15
 8004dec:	480c      	ldr	r0, [pc, #48]	; (8004e20 <RobotRunToPositon+0x6c>)
 8004dee:	f7fc fd07 	bl	8001800 <CoefficientAndTimeCalculation>
	// Start Trajectory Evaluator
	Robot.MotorIsOn = 1;
 8004df2:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <RobotRunToPositon+0x68>)
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Robot.flagStartTime = 1;
 8004dfa:	4b08      	ldr	r3, [pc, #32]	; (8004e1c <RobotRunToPositon+0x68>)
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	Robot.RunningFlag = 1;
 8004e02:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <RobotRunToPositon+0x68>)
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	2108      	movs	r1, #8
 8004e0e:	4805      	ldr	r0, [pc, #20]	; (8004e24 <RobotRunToPositon+0x70>)
 8004e10:	f001 fa40 	bl	8006294 <HAL_GPIO_WritePin>
}
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	2000061c 	.word	0x2000061c
 8004e20:	200007ac 	.word	0x200007ac
 8004e24:	40020400 	.word	0x40020400

08004e28 <TIM_ResetCounter>:

void TIM_ResetCounter(TIM_TypeDef* TIMx)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Reset the Counter Register value */
  TIMx->CNT = 0;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
	...

08004e44 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004e44:	b4b0      	push	{r4, r5, r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a09      	ldr	r2, [pc, #36]	; (8004e74 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d10a      	bne.n	8004e6a <HAL_TIM_PeriodElapsedCallback+0x26>
		_micro += 65535;
 8004e54:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e5e:	1854      	adds	r4, r2, r1
 8004e60:	f143 0500 	adc.w	r5, r3, #0
 8004e64:	4b04      	ldr	r3, [pc, #16]	; (8004e78 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004e66:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bcb0      	pop	{r4, r5, r7}
 8004e72:	4770      	bx	lr
 8004e74:	200004d0 	.word	0x200004d0
 8004e78:	200006b8 	.word	0x200006b8

08004e7c <Micros>:

uint64_t Micros(){
 8004e7c:	b4b0      	push	{r4, r5, r7}
 8004e7e:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8004e80:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <Micros+0x28>)
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	2200      	movs	r2, #0
 8004e86:	4618      	mov	r0, r3
 8004e88:	4611      	mov	r1, r2
 8004e8a:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <Micros+0x2c>)
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	1884      	adds	r4, r0, r2
 8004e92:	eb41 0503 	adc.w	r5, r1, r3
 8004e96:	4622      	mov	r2, r4
 8004e98:	462b      	mov	r3, r5
}
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bcb0      	pop	{r4, r5, r7}
 8004ea2:	4770      	bx	lr
 8004ea4:	40014800 	.word	0x40014800
 8004ea8:	200006b8 	.word	0x200006b8

08004eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004eb0:	b672      	cpsid	i
}
 8004eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004eb4:	e7fe      	b.n	8004eb4 <Error_Handler+0x8>
	...

08004eb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	4b10      	ldr	r3, [pc, #64]	; (8004f04 <HAL_MspInit+0x4c>)
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec6:	4a0f      	ldr	r2, [pc, #60]	; (8004f04 <HAL_MspInit+0x4c>)
 8004ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ece:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <HAL_MspInit+0x4c>)
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed6:	607b      	str	r3, [r7, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004eda:	2300      	movs	r3, #0
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <HAL_MspInit+0x4c>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	4a08      	ldr	r2, [pc, #32]	; (8004f04 <HAL_MspInit+0x4c>)
 8004ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eea:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <HAL_MspInit+0x4c>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004ef6:	2007      	movs	r0, #7
 8004ef8:	f000 fbde 	bl	80056b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004efc:	bf00      	nop
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40023800 	.word	0x40023800

08004f08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	; 0x28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f10:	f107 0314 	add.w	r3, r7, #20
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	609a      	str	r2, [r3, #8]
 8004f1c:	60da      	str	r2, [r3, #12]
 8004f1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a21      	ldr	r2, [pc, #132]	; (8004fac <HAL_I2C_MspInit+0xa4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d13c      	bne.n	8004fa4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	4b20      	ldr	r3, [pc, #128]	; (8004fb0 <HAL_I2C_MspInit+0xa8>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	4a1f      	ldr	r2, [pc, #124]	; (8004fb0 <HAL_I2C_MspInit+0xa8>)
 8004f34:	f043 0302 	orr.w	r3, r3, #2
 8004f38:	6313      	str	r3, [r2, #48]	; 0x30
 8004f3a:	4b1d      	ldr	r3, [pc, #116]	; (8004fb0 <HAL_I2C_MspInit+0xa8>)
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004f46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f4c:	2312      	movs	r3, #18
 8004f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f54:	2303      	movs	r3, #3
 8004f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f58:	2304      	movs	r3, #4
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f5c:	f107 0314 	add.w	r3, r7, #20
 8004f60:	4619      	mov	r1, r3
 8004f62:	4814      	ldr	r0, [pc, #80]	; (8004fb4 <HAL_I2C_MspInit+0xac>)
 8004f64:	f000 fffa 	bl	8005f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <HAL_I2C_MspInit+0xa8>)
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	4a0f      	ldr	r2, [pc, #60]	; (8004fb0 <HAL_I2C_MspInit+0xa8>)
 8004f72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f76:	6413      	str	r3, [r2, #64]	; 0x40
 8004f78:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <HAL_I2C_MspInit+0xa8>)
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004f84:	2200      	movs	r2, #0
 8004f86:	2100      	movs	r1, #0
 8004f88:	201f      	movs	r0, #31
 8004f8a:	f000 fba0 	bl	80056ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004f8e:	201f      	movs	r0, #31
 8004f90:	f000 fbb9 	bl	8005706 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004f94:	2200      	movs	r2, #0
 8004f96:	2100      	movs	r1, #0
 8004f98:	2020      	movs	r0, #32
 8004f9a:	f000 fb98 	bl	80056ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004f9e:	2020      	movs	r0, #32
 8004fa0:	f000 fbb1 	bl	8005706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004fa4:	bf00      	nop
 8004fa6:	3728      	adds	r7, #40	; 0x28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40005400 	.word	0x40005400
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	40020400 	.word	0x40020400

08004fb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a0e      	ldr	r2, [pc, #56]	; (8005000 <HAL_TIM_PWM_MspInit+0x48>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d115      	bne.n	8004ff6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <HAL_TIM_PWM_MspInit+0x4c>)
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	4a0c      	ldr	r2, [pc, #48]	; (8005004 <HAL_TIM_PWM_MspInit+0x4c>)
 8004fd4:	f043 0301 	orr.w	r3, r3, #1
 8004fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8004fda:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <HAL_TIM_PWM_MspInit+0x4c>)
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2100      	movs	r1, #0
 8004fea:	201a      	movs	r0, #26
 8004fec:	f000 fb6f 	bl	80056ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004ff0:	201a      	movs	r0, #26
 8004ff2:	f000 fb88 	bl	8005706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004ff6:	bf00      	nop
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40010000 	.word	0x40010000
 8005004:	40023800 	.word	0x40023800

08005008 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08a      	sub	sp, #40	; 0x28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005010:	f107 0314 	add.w	r3, r7, #20
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	605a      	str	r2, [r3, #4]
 800501a:	609a      	str	r2, [r3, #8]
 800501c:	60da      	str	r2, [r3, #12]
 800501e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005028:	d12b      	bne.n	8005082 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800502a:	2300      	movs	r3, #0
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	4b17      	ldr	r3, [pc, #92]	; (800508c <HAL_TIM_Encoder_MspInit+0x84>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	4a16      	ldr	r2, [pc, #88]	; (800508c <HAL_TIM_Encoder_MspInit+0x84>)
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	6413      	str	r3, [r2, #64]	; 0x40
 800503a:	4b14      	ldr	r3, [pc, #80]	; (800508c <HAL_TIM_Encoder_MspInit+0x84>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	4b10      	ldr	r3, [pc, #64]	; (800508c <HAL_TIM_Encoder_MspInit+0x84>)
 800504c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504e:	4a0f      	ldr	r2, [pc, #60]	; (800508c <HAL_TIM_Encoder_MspInit+0x84>)
 8005050:	f043 0301 	orr.w	r3, r3, #1
 8005054:	6313      	str	r3, [r2, #48]	; 0x30
 8005056:	4b0d      	ldr	r3, [pc, #52]	; (800508c <HAL_TIM_Encoder_MspInit+0x84>)
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005062:	2303      	movs	r3, #3
 8005064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005066:	2302      	movs	r3, #2
 8005068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506a:	2300      	movs	r3, #0
 800506c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800506e:	2300      	movs	r3, #0
 8005070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005072:	2301      	movs	r3, #1
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005076:	f107 0314 	add.w	r3, r7, #20
 800507a:	4619      	mov	r1, r3
 800507c:	4804      	ldr	r0, [pc, #16]	; (8005090 <HAL_TIM_Encoder_MspInit+0x88>)
 800507e:	f000 ff6d 	bl	8005f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005082:	bf00      	nop
 8005084:	3728      	adds	r7, #40	; 0x28
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800
 8005090:	40020000 	.word	0x40020000

08005094 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a0e      	ldr	r2, [pc, #56]	; (80050dc <HAL_TIM_Base_MspInit+0x48>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d115      	bne.n	80050d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	4b0d      	ldr	r3, [pc, #52]	; (80050e0 <HAL_TIM_Base_MspInit+0x4c>)
 80050ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ae:	4a0c      	ldr	r2, [pc, #48]	; (80050e0 <HAL_TIM_Base_MspInit+0x4c>)
 80050b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050b4:	6453      	str	r3, [r2, #68]	; 0x44
 80050b6:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <HAL_TIM_Base_MspInit+0x4c>)
 80050b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80050c2:	2200      	movs	r2, #0
 80050c4:	2100      	movs	r1, #0
 80050c6:	201a      	movs	r0, #26
 80050c8:	f000 fb01 	bl	80056ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80050cc:	201a      	movs	r0, #26
 80050ce:	f000 fb1a 	bl	8005706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80050d2:	bf00      	nop
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40014800 	.word	0x40014800
 80050e0:	40023800 	.word	0x40023800

080050e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ec:	f107 030c 	add.w	r3, r7, #12
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	609a      	str	r2, [r3, #8]
 80050f8:	60da      	str	r2, [r3, #12]
 80050fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a12      	ldr	r2, [pc, #72]	; (800514c <HAL_TIM_MspPostInit+0x68>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d11e      	bne.n	8005144 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	4b11      	ldr	r3, [pc, #68]	; (8005150 <HAL_TIM_MspPostInit+0x6c>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	4a10      	ldr	r2, [pc, #64]	; (8005150 <HAL_TIM_MspPostInit+0x6c>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	6313      	str	r3, [r2, #48]	; 0x30
 8005116:	4b0e      	ldr	r3, [pc, #56]	; (8005150 <HAL_TIM_MspPostInit+0x6c>)
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	60bb      	str	r3, [r7, #8]
 8005120:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005126:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005128:	2302      	movs	r3, #2
 800512a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005130:	2300      	movs	r3, #0
 8005132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005134:	2301      	movs	r3, #1
 8005136:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005138:	f107 030c 	add.w	r3, r7, #12
 800513c:	4619      	mov	r1, r3
 800513e:	4805      	ldr	r0, [pc, #20]	; (8005154 <HAL_TIM_MspPostInit+0x70>)
 8005140:	f000 ff0c 	bl	8005f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005144:	bf00      	nop
 8005146:	3720      	adds	r7, #32
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40010000 	.word	0x40010000
 8005150:	40023800 	.word	0x40023800
 8005154:	40020000 	.word	0x40020000

08005158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	; 0x28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005160:	f107 0314 	add.w	r3, r7, #20
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	605a      	str	r2, [r3, #4]
 800516a:	609a      	str	r2, [r3, #8]
 800516c:	60da      	str	r2, [r3, #12]
 800516e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a4b      	ldr	r2, [pc, #300]	; (80052a4 <HAL_UART_MspInit+0x14c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	f040 8090 	bne.w	800529c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800517c:	2300      	movs	r3, #0
 800517e:	613b      	str	r3, [r7, #16]
 8005180:	4b49      	ldr	r3, [pc, #292]	; (80052a8 <HAL_UART_MspInit+0x150>)
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	4a48      	ldr	r2, [pc, #288]	; (80052a8 <HAL_UART_MspInit+0x150>)
 8005186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800518a:	6413      	str	r3, [r2, #64]	; 0x40
 800518c:	4b46      	ldr	r3, [pc, #280]	; (80052a8 <HAL_UART_MspInit+0x150>)
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005194:	613b      	str	r3, [r7, #16]
 8005196:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	4b42      	ldr	r3, [pc, #264]	; (80052a8 <HAL_UART_MspInit+0x150>)
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	4a41      	ldr	r2, [pc, #260]	; (80052a8 <HAL_UART_MspInit+0x150>)
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	6313      	str	r3, [r2, #48]	; 0x30
 80051a8:	4b3f      	ldr	r3, [pc, #252]	; (80052a8 <HAL_UART_MspInit+0x150>)
 80051aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80051b4:	230c      	movs	r3, #12
 80051b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b8:	2302      	movs	r3, #2
 80051ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051c0:	2303      	movs	r3, #3
 80051c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80051c4:	2307      	movs	r3, #7
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051c8:	f107 0314 	add.w	r3, r7, #20
 80051cc:	4619      	mov	r1, r3
 80051ce:	4837      	ldr	r0, [pc, #220]	; (80052ac <HAL_UART_MspInit+0x154>)
 80051d0:	f000 fec4 	bl	8005f5c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80051d4:	4b36      	ldr	r3, [pc, #216]	; (80052b0 <HAL_UART_MspInit+0x158>)
 80051d6:	4a37      	ldr	r2, [pc, #220]	; (80052b4 <HAL_UART_MspInit+0x15c>)
 80051d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80051da:	4b35      	ldr	r3, [pc, #212]	; (80052b0 <HAL_UART_MspInit+0x158>)
 80051dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051e2:	4b33      	ldr	r3, [pc, #204]	; (80052b0 <HAL_UART_MspInit+0x158>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051e8:	4b31      	ldr	r3, [pc, #196]	; (80052b0 <HAL_UART_MspInit+0x158>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051ee:	4b30      	ldr	r3, [pc, #192]	; (80052b0 <HAL_UART_MspInit+0x158>)
 80051f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051f6:	4b2e      	ldr	r3, [pc, #184]	; (80052b0 <HAL_UART_MspInit+0x158>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051fc:	4b2c      	ldr	r3, [pc, #176]	; (80052b0 <HAL_UART_MspInit+0x158>)
 80051fe:	2200      	movs	r2, #0
 8005200:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005202:	4b2b      	ldr	r3, [pc, #172]	; (80052b0 <HAL_UART_MspInit+0x158>)
 8005204:	2200      	movs	r2, #0
 8005206:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005208:	4b29      	ldr	r3, [pc, #164]	; (80052b0 <HAL_UART_MspInit+0x158>)
 800520a:	2200      	movs	r2, #0
 800520c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800520e:	4b28      	ldr	r3, [pc, #160]	; (80052b0 <HAL_UART_MspInit+0x158>)
 8005210:	2200      	movs	r2, #0
 8005212:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005214:	4826      	ldr	r0, [pc, #152]	; (80052b0 <HAL_UART_MspInit+0x158>)
 8005216:	f000 fa91 	bl	800573c <HAL_DMA_Init>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005220:	f7ff fe44 	bl	8004eac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a22      	ldr	r2, [pc, #136]	; (80052b0 <HAL_UART_MspInit+0x158>)
 8005228:	639a      	str	r2, [r3, #56]	; 0x38
 800522a:	4a21      	ldr	r2, [pc, #132]	; (80052b0 <HAL_UART_MspInit+0x158>)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005230:	4b21      	ldr	r3, [pc, #132]	; (80052b8 <HAL_UART_MspInit+0x160>)
 8005232:	4a22      	ldr	r2, [pc, #136]	; (80052bc <HAL_UART_MspInit+0x164>)
 8005234:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005236:	4b20      	ldr	r3, [pc, #128]	; (80052b8 <HAL_UART_MspInit+0x160>)
 8005238:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800523c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800523e:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <HAL_UART_MspInit+0x160>)
 8005240:	2240      	movs	r2, #64	; 0x40
 8005242:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005244:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <HAL_UART_MspInit+0x160>)
 8005246:	2200      	movs	r2, #0
 8005248:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800524a:	4b1b      	ldr	r3, [pc, #108]	; (80052b8 <HAL_UART_MspInit+0x160>)
 800524c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005250:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005252:	4b19      	ldr	r3, [pc, #100]	; (80052b8 <HAL_UART_MspInit+0x160>)
 8005254:	2200      	movs	r2, #0
 8005256:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005258:	4b17      	ldr	r3, [pc, #92]	; (80052b8 <HAL_UART_MspInit+0x160>)
 800525a:	2200      	movs	r2, #0
 800525c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800525e:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <HAL_UART_MspInit+0x160>)
 8005260:	2200      	movs	r2, #0
 8005262:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005264:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <HAL_UART_MspInit+0x160>)
 8005266:	2200      	movs	r2, #0
 8005268:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <HAL_UART_MspInit+0x160>)
 800526c:	2200      	movs	r2, #0
 800526e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005270:	4811      	ldr	r0, [pc, #68]	; (80052b8 <HAL_UART_MspInit+0x160>)
 8005272:	f000 fa63 	bl	800573c <HAL_DMA_Init>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800527c:	f7ff fe16 	bl	8004eac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a0d      	ldr	r2, [pc, #52]	; (80052b8 <HAL_UART_MspInit+0x160>)
 8005284:	635a      	str	r2, [r3, #52]	; 0x34
 8005286:	4a0c      	ldr	r2, [pc, #48]	; (80052b8 <HAL_UART_MspInit+0x160>)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800528c:	2200      	movs	r2, #0
 800528e:	2100      	movs	r1, #0
 8005290:	2026      	movs	r0, #38	; 0x26
 8005292:	f000 fa1c 	bl	80056ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005296:	2026      	movs	r0, #38	; 0x26
 8005298:	f000 fa35 	bl	8005706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800529c:	bf00      	nop
 800529e:	3728      	adds	r7, #40	; 0x28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40004400 	.word	0x40004400
 80052a8:	40023800 	.word	0x40023800
 80052ac:	40020000 	.word	0x40020000
 80052b0:	2000055c 	.word	0x2000055c
 80052b4:	40026088 	.word	0x40026088
 80052b8:	200005bc 	.word	0x200005bc
 80052bc:	400260a0 	.word	0x400260a0

080052c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052c4:	e7fe      	b.n	80052c4 <NMI_Handler+0x4>

080052c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052c6:	b480      	push	{r7}
 80052c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052ca:	e7fe      	b.n	80052ca <HardFault_Handler+0x4>

080052cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052d0:	e7fe      	b.n	80052d0 <MemManage_Handler+0x4>

080052d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052d2:	b480      	push	{r7}
 80052d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052d6:	e7fe      	b.n	80052d6 <BusFault_Handler+0x4>

080052d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052dc:	e7fe      	b.n	80052dc <UsageFault_Handler+0x4>

080052de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052de:	b480      	push	{r7}
 80052e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052e2:	bf00      	nop
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052f0:	bf00      	nop
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80052fa:	b480      	push	{r7}
 80052fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80052fe:	bf00      	nop
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800530c:	f000 f8e4 	bl	80054d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005310:	bf00      	nop
 8005312:	bd80      	pop	{r7, pc}

08005314 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005318:	4802      	ldr	r0, [pc, #8]	; (8005324 <DMA1_Stream5_IRQHandler+0x10>)
 800531a:	f000 fba7 	bl	8005a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800531e:	bf00      	nop
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	2000055c 	.word	0x2000055c

08005328 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800532c:	4802      	ldr	r0, [pc, #8]	; (8005338 <DMA1_Stream6_IRQHandler+0x10>)
 800532e:	f000 fb9d 	bl	8005a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005332:	bf00      	nop
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	200005bc 	.word	0x200005bc

0800533c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Emer_Pin);
 8005340:	2020      	movs	r0, #32
 8005342:	f000 ffdb 	bl	80062fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005346:	bf00      	nop
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005350:	4803      	ldr	r0, [pc, #12]	; (8005360 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8005352:	f003 fedd 	bl	8009110 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8005356:	4803      	ldr	r0, [pc, #12]	; (8005364 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8005358:	f003 feda 	bl	8009110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800535c:	bf00      	nop
 800535e:	bd80      	pop	{r7, pc}
 8005360:	20000440 	.word	0x20000440
 8005364:	200004d0 	.word	0x200004d0

08005368 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800536c:	4802      	ldr	r0, [pc, #8]	; (8005378 <I2C1_EV_IRQHandler+0x10>)
 800536e:	f001 fa75 	bl	800685c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005372:	bf00      	nop
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	200003ec 	.word	0x200003ec

0800537c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005380:	4802      	ldr	r0, [pc, #8]	; (800538c <I2C1_ER_IRQHandler+0x10>)
 8005382:	f001 fbdc 	bl	8006b3e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005386:	bf00      	nop
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	200003ec 	.word	0x200003ec

08005390 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005394:	4802      	ldr	r0, [pc, #8]	; (80053a0 <USART2_IRQHandler+0x10>)
 8005396:	f004 fce5 	bl	8009d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800539a:	bf00      	nop
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000518 	.word	0x20000518

080053a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pin_Proxi_Pin);
 80053a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80053ac:	f000 ffa6 	bl	80062fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80053b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80053b4:	f000 ffa2 	bl	80062fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80053b8:	bf00      	nop
 80053ba:	bd80      	pop	{r7, pc}

080053bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053c0:	4b06      	ldr	r3, [pc, #24]	; (80053dc <SystemInit+0x20>)
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c6:	4a05      	ldr	r2, [pc, #20]	; (80053dc <SystemInit+0x20>)
 80053c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053d0:	bf00      	nop
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	e000ed00 	.word	0xe000ed00

080053e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80053e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005418 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80053e4:	480d      	ldr	r0, [pc, #52]	; (800541c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80053e6:	490e      	ldr	r1, [pc, #56]	; (8005420 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80053e8:	4a0e      	ldr	r2, [pc, #56]	; (8005424 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80053ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053ec:	e002      	b.n	80053f4 <LoopCopyDataInit>

080053ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053f2:	3304      	adds	r3, #4

080053f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053f8:	d3f9      	bcc.n	80053ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053fa:	4a0b      	ldr	r2, [pc, #44]	; (8005428 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80053fc:	4c0b      	ldr	r4, [pc, #44]	; (800542c <LoopFillZerobss+0x26>)
  movs r3, #0
 80053fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005400:	e001      	b.n	8005406 <LoopFillZerobss>

08005402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005404:	3204      	adds	r2, #4

08005406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005408:	d3fb      	bcc.n	8005402 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800540a:	f7ff ffd7 	bl	80053bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800540e:	f006 f86b 	bl	800b4e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005412:	f7fd fd89 	bl	8002f28 <main>
  bx  lr    
 8005416:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005418:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800541c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005420:	200003c4 	.word	0x200003c4
  ldr r2, =_sidata
 8005424:	0800b5a4 	.word	0x0800b5a4
  ldr r2, =_sbss
 8005428:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 800542c:	200008dc 	.word	0x200008dc

08005430 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005430:	e7fe      	b.n	8005430 <ADC_IRQHandler>
	...

08005434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005438:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <HAL_Init+0x40>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a0d      	ldr	r2, [pc, #52]	; (8005474 <HAL_Init+0x40>)
 800543e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005442:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005444:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <HAL_Init+0x40>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a0a      	ldr	r2, [pc, #40]	; (8005474 <HAL_Init+0x40>)
 800544a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800544e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005450:	4b08      	ldr	r3, [pc, #32]	; (8005474 <HAL_Init+0x40>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a07      	ldr	r2, [pc, #28]	; (8005474 <HAL_Init+0x40>)
 8005456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800545a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800545c:	2003      	movs	r0, #3
 800545e:	f000 f92b 	bl	80056b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005462:	2000      	movs	r0, #0
 8005464:	f000 f808 	bl	8005478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005468:	f7ff fd26 	bl	8004eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40023c00 	.word	0x40023c00

08005478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005480:	4b12      	ldr	r3, [pc, #72]	; (80054cc <HAL_InitTick+0x54>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	4b12      	ldr	r3, [pc, #72]	; (80054d0 <HAL_InitTick+0x58>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	4619      	mov	r1, r3
 800548a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800548e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005492:	fbb2 f3f3 	udiv	r3, r2, r3
 8005496:	4618      	mov	r0, r3
 8005498:	f000 f943 	bl	8005722 <HAL_SYSTICK_Config>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e00e      	b.n	80054c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b0f      	cmp	r3, #15
 80054aa:	d80a      	bhi.n	80054c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054ac:	2200      	movs	r2, #0
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295
 80054b4:	f000 f90b 	bl	80056ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054b8:	4a06      	ldr	r2, [pc, #24]	; (80054d4 <HAL_InitTick+0x5c>)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	e000      	b.n	80054c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	200003b8 	.word	0x200003b8
 80054d0:	200003c0 	.word	0x200003c0
 80054d4:	200003bc 	.word	0x200003bc

080054d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054dc:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <HAL_IncTick+0x20>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	461a      	mov	r2, r3
 80054e2:	4b06      	ldr	r3, [pc, #24]	; (80054fc <HAL_IncTick+0x24>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4413      	add	r3, r2
 80054e8:	4a04      	ldr	r2, [pc, #16]	; (80054fc <HAL_IncTick+0x24>)
 80054ea:	6013      	str	r3, [r2, #0]
}
 80054ec:	bf00      	nop
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	200003c0 	.word	0x200003c0
 80054fc:	200008d8 	.word	0x200008d8

08005500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  return uwTick;
 8005504:	4b03      	ldr	r3, [pc, #12]	; (8005514 <HAL_GetTick+0x14>)
 8005506:	681b      	ldr	r3, [r3, #0]
}
 8005508:	4618      	mov	r0, r3
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	200008d8 	.word	0x200008d8

08005518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005528:	4b0c      	ldr	r3, [pc, #48]	; (800555c <__NVIC_SetPriorityGrouping+0x44>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005534:	4013      	ands	r3, r2
 8005536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800554a:	4a04      	ldr	r2, [pc, #16]	; (800555c <__NVIC_SetPriorityGrouping+0x44>)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	60d3      	str	r3, [r2, #12]
}
 8005550:	bf00      	nop
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	e000ed00 	.word	0xe000ed00

08005560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005564:	4b04      	ldr	r3, [pc, #16]	; (8005578 <__NVIC_GetPriorityGrouping+0x18>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	0a1b      	lsrs	r3, r3, #8
 800556a:	f003 0307 	and.w	r3, r3, #7
}
 800556e:	4618      	mov	r0, r3
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	e000ed00 	.word	0xe000ed00

0800557c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558a:	2b00      	cmp	r3, #0
 800558c:	db0b      	blt.n	80055a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	f003 021f 	and.w	r2, r3, #31
 8005594:	4907      	ldr	r1, [pc, #28]	; (80055b4 <__NVIC_EnableIRQ+0x38>)
 8005596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	2001      	movs	r0, #1
 800559e:	fa00 f202 	lsl.w	r2, r0, r2
 80055a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	e000e100 	.word	0xe000e100

080055b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	4603      	mov	r3, r0
 80055c0:	6039      	str	r1, [r7, #0]
 80055c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	db0a      	blt.n	80055e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	490c      	ldr	r1, [pc, #48]	; (8005604 <__NVIC_SetPriority+0x4c>)
 80055d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d6:	0112      	lsls	r2, r2, #4
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	440b      	add	r3, r1
 80055dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055e0:	e00a      	b.n	80055f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	4908      	ldr	r1, [pc, #32]	; (8005608 <__NVIC_SetPriority+0x50>)
 80055e8:	79fb      	ldrb	r3, [r7, #7]
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	3b04      	subs	r3, #4
 80055f0:	0112      	lsls	r2, r2, #4
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	440b      	add	r3, r1
 80055f6:	761a      	strb	r2, [r3, #24]
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	e000e100 	.word	0xe000e100
 8005608:	e000ed00 	.word	0xe000ed00

0800560c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800560c:	b480      	push	{r7}
 800560e:	b089      	sub	sp, #36	; 0x24
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f1c3 0307 	rsb	r3, r3, #7
 8005626:	2b04      	cmp	r3, #4
 8005628:	bf28      	it	cs
 800562a:	2304      	movcs	r3, #4
 800562c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	3304      	adds	r3, #4
 8005632:	2b06      	cmp	r3, #6
 8005634:	d902      	bls.n	800563c <NVIC_EncodePriority+0x30>
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	3b03      	subs	r3, #3
 800563a:	e000      	b.n	800563e <NVIC_EncodePriority+0x32>
 800563c:	2300      	movs	r3, #0
 800563e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005640:	f04f 32ff 	mov.w	r2, #4294967295
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	43da      	mvns	r2, r3
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	401a      	ands	r2, r3
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005654:	f04f 31ff 	mov.w	r1, #4294967295
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	fa01 f303 	lsl.w	r3, r1, r3
 800565e:	43d9      	mvns	r1, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005664:	4313      	orrs	r3, r2
         );
}
 8005666:	4618      	mov	r0, r3
 8005668:	3724      	adds	r7, #36	; 0x24
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3b01      	subs	r3, #1
 8005680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005684:	d301      	bcc.n	800568a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005686:	2301      	movs	r3, #1
 8005688:	e00f      	b.n	80056aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800568a:	4a0a      	ldr	r2, [pc, #40]	; (80056b4 <SysTick_Config+0x40>)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3b01      	subs	r3, #1
 8005690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005692:	210f      	movs	r1, #15
 8005694:	f04f 30ff 	mov.w	r0, #4294967295
 8005698:	f7ff ff8e 	bl	80055b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800569c:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <SysTick_Config+0x40>)
 800569e:	2200      	movs	r2, #0
 80056a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056a2:	4b04      	ldr	r3, [pc, #16]	; (80056b4 <SysTick_Config+0x40>)
 80056a4:	2207      	movs	r2, #7
 80056a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	e000e010 	.word	0xe000e010

080056b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff ff29 	bl	8005518 <__NVIC_SetPriorityGrouping>
}
 80056c6:	bf00      	nop
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b086      	sub	sp, #24
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	4603      	mov	r3, r0
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	607a      	str	r2, [r7, #4]
 80056da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056dc:	2300      	movs	r3, #0
 80056de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056e0:	f7ff ff3e 	bl	8005560 <__NVIC_GetPriorityGrouping>
 80056e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	6978      	ldr	r0, [r7, #20]
 80056ec:	f7ff ff8e 	bl	800560c <NVIC_EncodePriority>
 80056f0:	4602      	mov	r2, r0
 80056f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056f6:	4611      	mov	r1, r2
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff ff5d 	bl	80055b8 <__NVIC_SetPriority>
}
 80056fe:	bf00      	nop
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	4603      	mov	r3, r0
 800570e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff ff31 	bl	800557c <__NVIC_EnableIRQ>
}
 800571a:	bf00      	nop
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b082      	sub	sp, #8
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7ff ffa2 	bl	8005674 <SysTick_Config>
 8005730:	4603      	mov	r3, r0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005748:	f7ff feda 	bl	8005500 <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e099      	b.n	800588c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0201 	bic.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005778:	e00f      	b.n	800579a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800577a:	f7ff fec1 	bl	8005500 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b05      	cmp	r3, #5
 8005786:	d908      	bls.n	800579a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2203      	movs	r2, #3
 8005792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e078      	b.n	800588c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e8      	bne.n	800577a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	4b38      	ldr	r3, [pc, #224]	; (8005894 <HAL_DMA_Init+0x158>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	d107      	bne.n	8005804 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	4313      	orrs	r3, r2
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f023 0307 	bic.w	r3, r3, #7
 800581a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2b04      	cmp	r3, #4
 800582c:	d117      	bne.n	800585e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00e      	beq.n	800585e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fb0f 	bl	8005e64 <DMA_CheckFifoParam>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2240      	movs	r2, #64	; 0x40
 8005850:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800585a:	2301      	movs	r3, #1
 800585c:	e016      	b.n	800588c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fac6 	bl	8005df8 <DMA_CalcBaseAndBitshift>
 800586c:	4603      	mov	r3, r0
 800586e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005874:	223f      	movs	r2, #63	; 0x3f
 8005876:	409a      	lsls	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	f010803f 	.word	0xf010803f

08005898 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <HAL_DMA_Start_IT+0x26>
 80058ba:	2302      	movs	r3, #2
 80058bc:	e040      	b.n	8005940 <HAL_DMA_Start_IT+0xa8>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d12f      	bne.n	8005932 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 fa58 	bl	8005d9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f0:	223f      	movs	r2, #63	; 0x3f
 80058f2:	409a      	lsls	r2, r3
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0216 	orr.w	r2, r2, #22
 8005906:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d007      	beq.n	8005920 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0208 	orr.w	r2, r2, #8
 800591e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0201 	orr.w	r2, r2, #1
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	e005      	b.n	800593e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800593a:	2302      	movs	r3, #2
 800593c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800593e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005954:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005956:	f7ff fdd3 	bl	8005500 <HAL_GetTick>
 800595a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d008      	beq.n	800597a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2280      	movs	r2, #128	; 0x80
 800596c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e052      	b.n	8005a20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0216 	bic.w	r2, r2, #22
 8005988:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695a      	ldr	r2, [r3, #20]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005998:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d103      	bne.n	80059aa <HAL_DMA_Abort+0x62>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d007      	beq.n	80059ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0208 	bic.w	r2, r2, #8
 80059b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0201 	bic.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059ca:	e013      	b.n	80059f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059cc:	f7ff fd98 	bl	8005500 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b05      	cmp	r3, #5
 80059d8:	d90c      	bls.n	80059f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2203      	movs	r2, #3
 80059e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e015      	b.n	8005a20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e4      	bne.n	80059cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a06:	223f      	movs	r2, #63	; 0x3f
 8005a08:	409a      	lsls	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d004      	beq.n	8005a46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2280      	movs	r2, #128	; 0x80
 8005a40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e00c      	b.n	8005a60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2205      	movs	r2, #5
 8005a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0201 	bic.w	r2, r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a78:	4b8e      	ldr	r3, [pc, #568]	; (8005cb4 <HAL_DMA_IRQHandler+0x248>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a8e      	ldr	r2, [pc, #568]	; (8005cb8 <HAL_DMA_IRQHandler+0x24c>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	0a9b      	lsrs	r3, r3, #10
 8005a84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a96:	2208      	movs	r2, #8
 8005a98:	409a      	lsls	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d01a      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d013      	beq.n	8005ad8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0204 	bic.w	r2, r2, #4
 8005abe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	409a      	lsls	r2, r3
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad0:	f043 0201 	orr.w	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005adc:	2201      	movs	r2, #1
 8005ade:	409a      	lsls	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d012      	beq.n	8005b0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00b      	beq.n	8005b0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afa:	2201      	movs	r2, #1
 8005afc:	409a      	lsls	r2, r3
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b06:	f043 0202 	orr.w	r2, r3, #2
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b12:	2204      	movs	r2, #4
 8005b14:	409a      	lsls	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d012      	beq.n	8005b44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00b      	beq.n	8005b44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b30:	2204      	movs	r2, #4
 8005b32:	409a      	lsls	r2, r3
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3c:	f043 0204 	orr.w	r2, r3, #4
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b48:	2210      	movs	r2, #16
 8005b4a:	409a      	lsls	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d043      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d03c      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b66:	2210      	movs	r2, #16
 8005b68:	409a      	lsls	r2, r3
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d018      	beq.n	8005bae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d108      	bne.n	8005b9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d024      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	4798      	blx	r3
 8005b9a:	e01f      	b.n	8005bdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01b      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	4798      	blx	r3
 8005bac:	e016      	b.n	8005bdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d107      	bne.n	8005bcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0208 	bic.w	r2, r2, #8
 8005bca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be0:	2220      	movs	r2, #32
 8005be2:	409a      	lsls	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4013      	ands	r3, r2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 808f 	beq.w	8005d0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8087 	beq.w	8005d0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c02:	2220      	movs	r2, #32
 8005c04:	409a      	lsls	r2, r3
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b05      	cmp	r3, #5
 8005c14:	d136      	bne.n	8005c84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0216 	bic.w	r2, r2, #22
 8005c24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695a      	ldr	r2, [r3, #20]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d103      	bne.n	8005c46 <HAL_DMA_IRQHandler+0x1da>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d007      	beq.n	8005c56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0208 	bic.w	r2, r2, #8
 8005c54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c5a:	223f      	movs	r2, #63	; 0x3f
 8005c5c:	409a      	lsls	r2, r3
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d07e      	beq.n	8005d78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	4798      	blx	r3
        }
        return;
 8005c82:	e079      	b.n	8005d78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d01d      	beq.n	8005cce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10d      	bne.n	8005cbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d031      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	4798      	blx	r3
 8005cb0:	e02c      	b.n	8005d0c <HAL_DMA_IRQHandler+0x2a0>
 8005cb2:	bf00      	nop
 8005cb4:	200003b8 	.word	0x200003b8
 8005cb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d023      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	4798      	blx	r3
 8005ccc:	e01e      	b.n	8005d0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10f      	bne.n	8005cfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0210 	bic.w	r2, r2, #16
 8005cea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d032      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d022      	beq.n	8005d66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2205      	movs	r2, #5
 8005d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0201 	bic.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	60bb      	str	r3, [r7, #8]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d307      	bcc.n	8005d54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1f2      	bne.n	8005d38 <HAL_DMA_IRQHandler+0x2cc>
 8005d52:	e000      	b.n	8005d56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005d54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d005      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	4798      	blx	r3
 8005d76:	e000      	b.n	8005d7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005d78:	bf00      	nop
    }
  }
}
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d8e:	b2db      	uxtb	r3, r3
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005db8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d108      	bne.n	8005ddc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005dda:	e007      	b.n	8005dec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	60da      	str	r2, [r3, #12]
}
 8005dec:	bf00      	nop
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	3b10      	subs	r3, #16
 8005e08:	4a14      	ldr	r2, [pc, #80]	; (8005e5c <DMA_CalcBaseAndBitshift+0x64>)
 8005e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0e:	091b      	lsrs	r3, r3, #4
 8005e10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e12:	4a13      	ldr	r2, [pc, #76]	; (8005e60 <DMA_CalcBaseAndBitshift+0x68>)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4413      	add	r3, r2
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d909      	bls.n	8005e3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e2e:	f023 0303 	bic.w	r3, r3, #3
 8005e32:	1d1a      	adds	r2, r3, #4
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	659a      	str	r2, [r3, #88]	; 0x58
 8005e38:	e007      	b.n	8005e4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e42:	f023 0303 	bic.w	r3, r3, #3
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	aaaaaaab 	.word	0xaaaaaaab
 8005e60:	0800b58c 	.word	0x0800b58c

08005e64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d11f      	bne.n	8005ebe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d856      	bhi.n	8005f32 <DMA_CheckFifoParam+0xce>
 8005e84:	a201      	add	r2, pc, #4	; (adr r2, 8005e8c <DMA_CheckFifoParam+0x28>)
 8005e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8a:	bf00      	nop
 8005e8c:	08005e9d 	.word	0x08005e9d
 8005e90:	08005eaf 	.word	0x08005eaf
 8005e94:	08005e9d 	.word	0x08005e9d
 8005e98:	08005f33 	.word	0x08005f33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d046      	beq.n	8005f36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eac:	e043      	b.n	8005f36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005eb6:	d140      	bne.n	8005f3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ebc:	e03d      	b.n	8005f3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec6:	d121      	bne.n	8005f0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d837      	bhi.n	8005f3e <DMA_CheckFifoParam+0xda>
 8005ece:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <DMA_CheckFifoParam+0x70>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005ee5 	.word	0x08005ee5
 8005ed8:	08005eeb 	.word	0x08005eeb
 8005edc:	08005ee5 	.word	0x08005ee5
 8005ee0:	08005efd 	.word	0x08005efd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ee8:	e030      	b.n	8005f4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d025      	beq.n	8005f42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005efa:	e022      	b.n	8005f42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f04:	d11f      	bne.n	8005f46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005f0a:	e01c      	b.n	8005f46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d903      	bls.n	8005f1a <DMA_CheckFifoParam+0xb6>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d003      	beq.n	8005f20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005f18:	e018      	b.n	8005f4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f1e:	e015      	b.n	8005f4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00e      	beq.n	8005f4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f30:	e00b      	b.n	8005f4a <DMA_CheckFifoParam+0xe6>
      break;
 8005f32:	bf00      	nop
 8005f34:	e00a      	b.n	8005f4c <DMA_CheckFifoParam+0xe8>
      break;
 8005f36:	bf00      	nop
 8005f38:	e008      	b.n	8005f4c <DMA_CheckFifoParam+0xe8>
      break;
 8005f3a:	bf00      	nop
 8005f3c:	e006      	b.n	8005f4c <DMA_CheckFifoParam+0xe8>
      break;
 8005f3e:	bf00      	nop
 8005f40:	e004      	b.n	8005f4c <DMA_CheckFifoParam+0xe8>
      break;
 8005f42:	bf00      	nop
 8005f44:	e002      	b.n	8005f4c <DMA_CheckFifoParam+0xe8>
      break;   
 8005f46:	bf00      	nop
 8005f48:	e000      	b.n	8005f4c <DMA_CheckFifoParam+0xe8>
      break;
 8005f4a:	bf00      	nop
    }
  } 
  
  return status; 
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop

08005f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b089      	sub	sp, #36	; 0x24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f72:	2300      	movs	r3, #0
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	e159      	b.n	800622c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f78:	2201      	movs	r2, #1
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	f040 8148 	bne.w	8006226 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f003 0303 	and.w	r3, r3, #3
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d005      	beq.n	8005fae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d130      	bne.n	8006010 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	2203      	movs	r2, #3
 8005fba:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fec:	43db      	mvns	r3, r3
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	091b      	lsrs	r3, r3, #4
 8005ffa:	f003 0201 	and.w	r2, r3, #1
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	4313      	orrs	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	2b03      	cmp	r3, #3
 800601a:	d017      	beq.n	800604c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	2203      	movs	r2, #3
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	43db      	mvns	r3, r3
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	4013      	ands	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	fa02 f303 	lsl.w	r3, r2, r3
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	4313      	orrs	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f003 0303 	and.w	r3, r3, #3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d123      	bne.n	80060a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	08da      	lsrs	r2, r3, #3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3208      	adds	r2, #8
 8006060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006064:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	220f      	movs	r2, #15
 8006070:	fa02 f303 	lsl.w	r3, r2, r3
 8006074:	43db      	mvns	r3, r3
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	4013      	ands	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	fa02 f303 	lsl.w	r3, r2, r3
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	4313      	orrs	r3, r2
 8006090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	08da      	lsrs	r2, r3, #3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3208      	adds	r2, #8
 800609a:	69b9      	ldr	r1, [r7, #24]
 800609c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	2203      	movs	r2, #3
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	43db      	mvns	r3, r3
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	4013      	ands	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f003 0203 	and.w	r2, r3, #3
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 80a2 	beq.w	8006226 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	4b57      	ldr	r3, [pc, #348]	; (8006244 <HAL_GPIO_Init+0x2e8>)
 80060e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ea:	4a56      	ldr	r2, [pc, #344]	; (8006244 <HAL_GPIO_Init+0x2e8>)
 80060ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060f0:	6453      	str	r3, [r2, #68]	; 0x44
 80060f2:	4b54      	ldr	r3, [pc, #336]	; (8006244 <HAL_GPIO_Init+0x2e8>)
 80060f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060fe:	4a52      	ldr	r2, [pc, #328]	; (8006248 <HAL_GPIO_Init+0x2ec>)
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	089b      	lsrs	r3, r3, #2
 8006104:	3302      	adds	r3, #2
 8006106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800610a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	220f      	movs	r2, #15
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	43db      	mvns	r3, r3
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	4013      	ands	r3, r2
 8006120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a49      	ldr	r2, [pc, #292]	; (800624c <HAL_GPIO_Init+0x2f0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d019      	beq.n	800615e <HAL_GPIO_Init+0x202>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a48      	ldr	r2, [pc, #288]	; (8006250 <HAL_GPIO_Init+0x2f4>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d013      	beq.n	800615a <HAL_GPIO_Init+0x1fe>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a47      	ldr	r2, [pc, #284]	; (8006254 <HAL_GPIO_Init+0x2f8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00d      	beq.n	8006156 <HAL_GPIO_Init+0x1fa>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a46      	ldr	r2, [pc, #280]	; (8006258 <HAL_GPIO_Init+0x2fc>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d007      	beq.n	8006152 <HAL_GPIO_Init+0x1f6>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a45      	ldr	r2, [pc, #276]	; (800625c <HAL_GPIO_Init+0x300>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d101      	bne.n	800614e <HAL_GPIO_Init+0x1f2>
 800614a:	2304      	movs	r3, #4
 800614c:	e008      	b.n	8006160 <HAL_GPIO_Init+0x204>
 800614e:	2307      	movs	r3, #7
 8006150:	e006      	b.n	8006160 <HAL_GPIO_Init+0x204>
 8006152:	2303      	movs	r3, #3
 8006154:	e004      	b.n	8006160 <HAL_GPIO_Init+0x204>
 8006156:	2302      	movs	r3, #2
 8006158:	e002      	b.n	8006160 <HAL_GPIO_Init+0x204>
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <HAL_GPIO_Init+0x204>
 800615e:	2300      	movs	r3, #0
 8006160:	69fa      	ldr	r2, [r7, #28]
 8006162:	f002 0203 	and.w	r2, r2, #3
 8006166:	0092      	lsls	r2, r2, #2
 8006168:	4093      	lsls	r3, r2
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	4313      	orrs	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006170:	4935      	ldr	r1, [pc, #212]	; (8006248 <HAL_GPIO_Init+0x2ec>)
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	089b      	lsrs	r3, r3, #2
 8006176:	3302      	adds	r3, #2
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800617e:	4b38      	ldr	r3, [pc, #224]	; (8006260 <HAL_GPIO_Init+0x304>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	43db      	mvns	r3, r3
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	4013      	ands	r3, r2
 800618c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80061a2:	4a2f      	ldr	r2, [pc, #188]	; (8006260 <HAL_GPIO_Init+0x304>)
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061a8:	4b2d      	ldr	r3, [pc, #180]	; (8006260 <HAL_GPIO_Init+0x304>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	43db      	mvns	r3, r3
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	4013      	ands	r3, r2
 80061b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d003      	beq.n	80061cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061cc:	4a24      	ldr	r2, [pc, #144]	; (8006260 <HAL_GPIO_Init+0x304>)
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061d2:	4b23      	ldr	r3, [pc, #140]	; (8006260 <HAL_GPIO_Init+0x304>)
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	43db      	mvns	r3, r3
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	4013      	ands	r3, r2
 80061e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061f6:	4a1a      	ldr	r2, [pc, #104]	; (8006260 <HAL_GPIO_Init+0x304>)
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061fc:	4b18      	ldr	r3, [pc, #96]	; (8006260 <HAL_GPIO_Init+0x304>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	43db      	mvns	r3, r3
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	4013      	ands	r3, r2
 800620a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	4313      	orrs	r3, r2
 800621e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006220:	4a0f      	ldr	r2, [pc, #60]	; (8006260 <HAL_GPIO_Init+0x304>)
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	3301      	adds	r3, #1
 800622a:	61fb      	str	r3, [r7, #28]
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	2b0f      	cmp	r3, #15
 8006230:	f67f aea2 	bls.w	8005f78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop
 8006238:	3724      	adds	r7, #36	; 0x24
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40023800 	.word	0x40023800
 8006248:	40013800 	.word	0x40013800
 800624c:	40020000 	.word	0x40020000
 8006250:	40020400 	.word	0x40020400
 8006254:	40020800 	.word	0x40020800
 8006258:	40020c00 	.word	0x40020c00
 800625c:	40021000 	.word	0x40021000
 8006260:	40013c00 	.word	0x40013c00

08006264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	460b      	mov	r3, r1
 800626e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	887b      	ldrh	r3, [r7, #2]
 8006276:	4013      	ands	r3, r2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800627c:	2301      	movs	r3, #1
 800627e:	73fb      	strb	r3, [r7, #15]
 8006280:	e001      	b.n	8006286 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006286:	7bfb      	ldrb	r3, [r7, #15]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	807b      	strh	r3, [r7, #2]
 80062a0:	4613      	mov	r3, r2
 80062a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062a4:	787b      	ldrb	r3, [r7, #1]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062aa:	887a      	ldrh	r2, [r7, #2]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062b0:	e003      	b.n	80062ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062b2:	887b      	ldrh	r3, [r7, #2]
 80062b4:	041a      	lsls	r2, r3, #16
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	619a      	str	r2, [r3, #24]
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b085      	sub	sp, #20
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	460b      	mov	r3, r1
 80062d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80062d8:	887a      	ldrh	r2, [r7, #2]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4013      	ands	r3, r2
 80062de:	041a      	lsls	r2, r3, #16
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	43d9      	mvns	r1, r3
 80062e4:	887b      	ldrh	r3, [r7, #2]
 80062e6:	400b      	ands	r3, r1
 80062e8:	431a      	orrs	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	619a      	str	r2, [r3, #24]
}
 80062ee:	bf00      	nop
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
	...

080062fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	4603      	mov	r3, r0
 8006304:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006306:	4b08      	ldr	r3, [pc, #32]	; (8006328 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006308:	695a      	ldr	r2, [r3, #20]
 800630a:	88fb      	ldrh	r3, [r7, #6]
 800630c:	4013      	ands	r3, r2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d006      	beq.n	8006320 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006312:	4a05      	ldr	r2, [pc, #20]	; (8006328 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006314:	88fb      	ldrh	r3, [r7, #6]
 8006316:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	4618      	mov	r0, r3
 800631c:	f7fe fc66 	bl	8004bec <HAL_GPIO_EXTI_Callback>
  }
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	40013c00 	.word	0x40013c00

0800632c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e12b      	b.n	8006596 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d106      	bne.n	8006358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7fe fdd8 	bl	8004f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2224      	movs	r2, #36	; 0x24
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0201 	bic.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800637e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800638e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006390:	f002 fbb0 	bl	8008af4 <HAL_RCC_GetPCLK1Freq>
 8006394:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	4a81      	ldr	r2, [pc, #516]	; (80065a0 <HAL_I2C_Init+0x274>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d807      	bhi.n	80063b0 <HAL_I2C_Init+0x84>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4a80      	ldr	r2, [pc, #512]	; (80065a4 <HAL_I2C_Init+0x278>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	bf94      	ite	ls
 80063a8:	2301      	movls	r3, #1
 80063aa:	2300      	movhi	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	e006      	b.n	80063be <HAL_I2C_Init+0x92>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4a7d      	ldr	r2, [pc, #500]	; (80065a8 <HAL_I2C_Init+0x27c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	bf94      	ite	ls
 80063b8:	2301      	movls	r3, #1
 80063ba:	2300      	movhi	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e0e7      	b.n	8006596 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4a78      	ldr	r2, [pc, #480]	; (80065ac <HAL_I2C_Init+0x280>)
 80063ca:	fba2 2303 	umull	r2, r3, r2, r3
 80063ce:	0c9b      	lsrs	r3, r3, #18
 80063d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	4a6a      	ldr	r2, [pc, #424]	; (80065a0 <HAL_I2C_Init+0x274>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d802      	bhi.n	8006400 <HAL_I2C_Init+0xd4>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	3301      	adds	r3, #1
 80063fe:	e009      	b.n	8006414 <HAL_I2C_Init+0xe8>
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006406:	fb02 f303 	mul.w	r3, r2, r3
 800640a:	4a69      	ldr	r2, [pc, #420]	; (80065b0 <HAL_I2C_Init+0x284>)
 800640c:	fba2 2303 	umull	r2, r3, r2, r3
 8006410:	099b      	lsrs	r3, r3, #6
 8006412:	3301      	adds	r3, #1
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6812      	ldr	r2, [r2, #0]
 8006418:	430b      	orrs	r3, r1
 800641a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006426:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	495c      	ldr	r1, [pc, #368]	; (80065a0 <HAL_I2C_Init+0x274>)
 8006430:	428b      	cmp	r3, r1
 8006432:	d819      	bhi.n	8006468 <HAL_I2C_Init+0x13c>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	1e59      	subs	r1, r3, #1
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006442:	1c59      	adds	r1, r3, #1
 8006444:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006448:	400b      	ands	r3, r1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <HAL_I2C_Init+0x138>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	1e59      	subs	r1, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	fbb1 f3f3 	udiv	r3, r1, r3
 800645c:	3301      	adds	r3, #1
 800645e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006462:	e051      	b.n	8006508 <HAL_I2C_Init+0x1dc>
 8006464:	2304      	movs	r3, #4
 8006466:	e04f      	b.n	8006508 <HAL_I2C_Init+0x1dc>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d111      	bne.n	8006494 <HAL_I2C_Init+0x168>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	1e58      	subs	r0, r3, #1
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6859      	ldr	r1, [r3, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	440b      	add	r3, r1
 800647e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006482:	3301      	adds	r3, #1
 8006484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006488:	2b00      	cmp	r3, #0
 800648a:	bf0c      	ite	eq
 800648c:	2301      	moveq	r3, #1
 800648e:	2300      	movne	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	e012      	b.n	80064ba <HAL_I2C_Init+0x18e>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	1e58      	subs	r0, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6859      	ldr	r1, [r3, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	440b      	add	r3, r1
 80064a2:	0099      	lsls	r1, r3, #2
 80064a4:	440b      	add	r3, r1
 80064a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80064aa:	3301      	adds	r3, #1
 80064ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	bf0c      	ite	eq
 80064b4:	2301      	moveq	r3, #1
 80064b6:	2300      	movne	r3, #0
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <HAL_I2C_Init+0x196>
 80064be:	2301      	movs	r3, #1
 80064c0:	e022      	b.n	8006508 <HAL_I2C_Init+0x1dc>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10e      	bne.n	80064e8 <HAL_I2C_Init+0x1bc>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	1e58      	subs	r0, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6859      	ldr	r1, [r3, #4]
 80064d2:	460b      	mov	r3, r1
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	440b      	add	r3, r1
 80064d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80064dc:	3301      	adds	r3, #1
 80064de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e6:	e00f      	b.n	8006508 <HAL_I2C_Init+0x1dc>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	1e58      	subs	r0, r3, #1
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6859      	ldr	r1, [r3, #4]
 80064f0:	460b      	mov	r3, r1
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	440b      	add	r3, r1
 80064f6:	0099      	lsls	r1, r3, #2
 80064f8:	440b      	add	r3, r1
 80064fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80064fe:	3301      	adds	r3, #1
 8006500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	6809      	ldr	r1, [r1, #0]
 800650c:	4313      	orrs	r3, r2
 800650e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69da      	ldr	r2, [r3, #28]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006536:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6911      	ldr	r1, [r2, #16]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	68d2      	ldr	r2, [r2, #12]
 8006542:	4311      	orrs	r1, r2
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6812      	ldr	r2, [r2, #0]
 8006548:	430b      	orrs	r3, r1
 800654a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	695a      	ldr	r2, [r3, #20]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0201 	orr.w	r2, r2, #1
 8006576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	000186a0 	.word	0x000186a0
 80065a4:	001e847f 	.word	0x001e847f
 80065a8:	003d08ff 	.word	0x003d08ff
 80065ac:	431bde83 	.word	0x431bde83
 80065b0:	10624dd3 	.word	0x10624dd3

080065b4 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	607a      	str	r2, [r7, #4]
 80065be:	461a      	mov	r2, r3
 80065c0:	460b      	mov	r3, r1
 80065c2:	817b      	strh	r3, [r7, #10]
 80065c4:	4613      	mov	r3, r2
 80065c6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b20      	cmp	r3, #32
 80065d6:	f040 8085 	bne.w	80066e4 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80065da:	4b46      	ldr	r3, [pc, #280]	; (80066f4 <HAL_I2C_Master_Transmit_IT+0x140>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	08db      	lsrs	r3, r3, #3
 80065e0:	4a45      	ldr	r2, [pc, #276]	; (80066f8 <HAL_I2C_Master_Transmit_IT+0x144>)
 80065e2:	fba2 2303 	umull	r2, r3, r2, r3
 80065e6:	0a1a      	lsrs	r2, r3, #8
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	009a      	lsls	r2, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d116      	bne.n	800662e <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2220      	movs	r2, #32
 800660a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	f043 0220 	orr.w	r2, r3, #32
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e05b      	b.n	80066e6 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b02      	cmp	r3, #2
 800663a:	d0db      	beq.n	80065f4 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_I2C_Master_Transmit_IT+0x96>
 8006646:	2302      	movs	r3, #2
 8006648:	e04d      	b.n	80066e6 <HAL_I2C_Master_Transmit_IT+0x132>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b01      	cmp	r3, #1
 800665e:	d007      	beq.n	8006670 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800667e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2221      	movs	r2, #33	; 0x21
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2210      	movs	r2, #16
 800668c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	893a      	ldrh	r2, [r7, #8]
 80066a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4a13      	ldr	r2, [pc, #76]	; (80066fc <HAL_I2C_Master_Transmit_IT+0x148>)
 80066b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80066b2:	897a      	ldrh	r2, [r7, #10]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80066ce:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066de:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	e000      	b.n	80066e6 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80066e4:	2302      	movs	r3, #2
  }
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	200003b8 	.word	0x200003b8
 80066f8:	14f8b589 	.word	0x14f8b589
 80066fc:	ffff0000 	.word	0xffff0000

08006700 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	607a      	str	r2, [r7, #4]
 800670a:	461a      	mov	r2, r3
 800670c:	460b      	mov	r3, r1
 800670e:	817b      	strh	r3, [r7, #10]
 8006710:	4613      	mov	r3, r2
 8006712:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b20      	cmp	r3, #32
 8006722:	f040 808d 	bne.w	8006840 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006726:	4b4a      	ldr	r3, [pc, #296]	; (8006850 <HAL_I2C_Master_Receive_IT+0x150>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	08db      	lsrs	r3, r3, #3
 800672c:	4a49      	ldr	r2, [pc, #292]	; (8006854 <HAL_I2C_Master_Receive_IT+0x154>)
 800672e:	fba2 2303 	umull	r2, r3, r2, r3
 8006732:	0a1a      	lsrs	r2, r3, #8
 8006734:	4613      	mov	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	009a      	lsls	r2, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	3b01      	subs	r3, #1
 8006744:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d116      	bne.n	800677a <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	f043 0220 	orr.w	r2, r3, #32
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e063      	b.n	8006842 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b02      	cmp	r3, #2
 8006786:	d0db      	beq.n	8006740 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800678e:	2b01      	cmp	r3, #1
 8006790:	d101      	bne.n	8006796 <HAL_I2C_Master_Receive_IT+0x96>
 8006792:	2302      	movs	r3, #2
 8006794:	e055      	b.n	8006842 <HAL_I2C_Master_Receive_IT+0x142>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d007      	beq.n	80067bc <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 0201 	orr.w	r2, r2, #1
 80067ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2222      	movs	r2, #34	; 0x22
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2210      	movs	r2, #16
 80067d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	893a      	ldrh	r2, [r7, #8]
 80067ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4a17      	ldr	r2, [pc, #92]	; (8006858 <HAL_I2C_Master_Receive_IT+0x158>)
 80067fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80067fe:	897a      	ldrh	r2, [r7, #10]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800681a:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800682a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800683a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	e000      	b.n	8006842 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8006840:	2302      	movs	r3, #2
  }
}
 8006842:	4618      	mov	r0, r3
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	200003b8 	.word	0x200003b8
 8006854:	14f8b589 	.word	0x14f8b589
 8006858:	ffff0000 	.word	0xffff0000

0800685c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006864:	2300      	movs	r3, #0
 8006866:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800687c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006884:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	2b10      	cmp	r3, #16
 800688a:	d003      	beq.n	8006894 <HAL_I2C_EV_IRQHandler+0x38>
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	2b40      	cmp	r3, #64	; 0x40
 8006890:	f040 80c1 	bne.w	8006a16 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10d      	bne.n	80068ca <HAL_I2C_EV_IRQHandler+0x6e>
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80068b4:	d003      	beq.n	80068be <HAL_I2C_EV_IRQHandler+0x62>
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80068bc:	d101      	bne.n	80068c2 <HAL_I2C_EV_IRQHandler+0x66>
 80068be:	2301      	movs	r3, #1
 80068c0:	e000      	b.n	80068c4 <HAL_I2C_EV_IRQHandler+0x68>
 80068c2:	2300      	movs	r3, #0
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	f000 8132 	beq.w	8006b2e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00c      	beq.n	80068ee <HAL_I2C_EV_IRQHandler+0x92>
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	0a5b      	lsrs	r3, r3, #9
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d006      	beq.n	80068ee <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 fc7b 	bl	80081dc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fd83 	bl	80073f2 <I2C_Master_SB>
 80068ec:	e092      	b.n	8006a14 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	08db      	lsrs	r3, r3, #3
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d009      	beq.n	800690e <HAL_I2C_EV_IRQHandler+0xb2>
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	0a5b      	lsrs	r3, r3, #9
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fdf9 	bl	80074fe <I2C_Master_ADD10>
 800690c:	e082      	b.n	8006a14 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	085b      	lsrs	r3, r3, #1
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <HAL_I2C_EV_IRQHandler+0xd2>
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	0a5b      	lsrs	r3, r3, #9
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fe13 	bl	8007552 <I2C_Master_ADDR>
 800692c:	e072      	b.n	8006a14 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	089b      	lsrs	r3, r3, #2
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d03b      	beq.n	80069b2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006948:	f000 80f3 	beq.w	8006b32 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	09db      	lsrs	r3, r3, #7
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00f      	beq.n	8006978 <HAL_I2C_EV_IRQHandler+0x11c>
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	0a9b      	lsrs	r3, r3, #10
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b00      	cmp	r3, #0
 8006962:	d009      	beq.n	8006978 <HAL_I2C_EV_IRQHandler+0x11c>
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	089b      	lsrs	r3, r3, #2
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d103      	bne.n	8006978 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f9f3 	bl	8006d5c <I2C_MasterTransmit_TXE>
 8006976:	e04d      	b.n	8006a14 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	089b      	lsrs	r3, r3, #2
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 80d6 	beq.w	8006b32 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	0a5b      	lsrs	r3, r3, #9
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 80cf 	beq.w	8006b32 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006994:	7bbb      	ldrb	r3, [r7, #14]
 8006996:	2b21      	cmp	r3, #33	; 0x21
 8006998:	d103      	bne.n	80069a2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fa7a 	bl	8006e94 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069a0:	e0c7      	b.n	8006b32 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	2b40      	cmp	r3, #64	; 0x40
 80069a6:	f040 80c4 	bne.w	8006b32 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fae8 	bl	8006f80 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069b0:	e0bf      	b.n	8006b32 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c0:	f000 80b7 	beq.w	8006b32 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	099b      	lsrs	r3, r3, #6
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00f      	beq.n	80069f0 <HAL_I2C_EV_IRQHandler+0x194>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	0a9b      	lsrs	r3, r3, #10
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d009      	beq.n	80069f0 <HAL_I2C_EV_IRQHandler+0x194>
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	089b      	lsrs	r3, r3, #2
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d103      	bne.n	80069f0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fb5d 	bl	80070a8 <I2C_MasterReceive_RXNE>
 80069ee:	e011      	b.n	8006a14 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	089b      	lsrs	r3, r3, #2
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 809a 	beq.w	8006b32 <HAL_I2C_EV_IRQHandler+0x2d6>
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	0a5b      	lsrs	r3, r3, #9
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 8093 	beq.w	8006b32 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fc06 	bl	800721e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a12:	e08e      	b.n	8006b32 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006a14:	e08d      	b.n	8006b32 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	61fb      	str	r3, [r7, #28]
 8006a26:	e007      	b.n	8006a38 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	085b      	lsrs	r3, r3, #1
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d012      	beq.n	8006a6a <HAL_I2C_EV_IRQHandler+0x20e>
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	0a5b      	lsrs	r3, r3, #9
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00c      	beq.n	8006a6a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006a60:	69b9      	ldr	r1, [r7, #24]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 ffc4 	bl	80079f0 <I2C_Slave_ADDR>
 8006a68:	e066      	b.n	8006b38 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	091b      	lsrs	r3, r3, #4
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d009      	beq.n	8006a8a <HAL_I2C_EV_IRQHandler+0x22e>
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	0a5b      	lsrs	r3, r3, #9
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fffe 	bl	8007a84 <I2C_Slave_STOPF>
 8006a88:	e056      	b.n	8006b38 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006a8a:	7bbb      	ldrb	r3, [r7, #14]
 8006a8c:	2b21      	cmp	r3, #33	; 0x21
 8006a8e:	d002      	beq.n	8006a96 <HAL_I2C_EV_IRQHandler+0x23a>
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	2b29      	cmp	r3, #41	; 0x29
 8006a94:	d125      	bne.n	8006ae2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	09db      	lsrs	r3, r3, #7
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00f      	beq.n	8006ac2 <HAL_I2C_EV_IRQHandler+0x266>
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	0a9b      	lsrs	r3, r3, #10
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d009      	beq.n	8006ac2 <HAL_I2C_EV_IRQHandler+0x266>
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	089b      	lsrs	r3, r3, #2
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d103      	bne.n	8006ac2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 feda 	bl	8007874 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ac0:	e039      	b.n	8006b36 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	089b      	lsrs	r3, r3, #2
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d033      	beq.n	8006b36 <HAL_I2C_EV_IRQHandler+0x2da>
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	0a5b      	lsrs	r3, r3, #9
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d02d      	beq.n	8006b36 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 ff07 	bl	80078ee <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ae0:	e029      	b.n	8006b36 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	099b      	lsrs	r3, r3, #6
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00f      	beq.n	8006b0e <HAL_I2C_EV_IRQHandler+0x2b2>
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	0a9b      	lsrs	r3, r3, #10
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d009      	beq.n	8006b0e <HAL_I2C_EV_IRQHandler+0x2b2>
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	089b      	lsrs	r3, r3, #2
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d103      	bne.n	8006b0e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 ff12 	bl	8007930 <I2C_SlaveReceive_RXNE>
 8006b0c:	e014      	b.n	8006b38 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	089b      	lsrs	r3, r3, #2
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00e      	beq.n	8006b38 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	0a5b      	lsrs	r3, r3, #9
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d008      	beq.n	8006b38 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 ff40 	bl	80079ac <I2C_SlaveReceive_BTF>
 8006b2c:	e004      	b.n	8006b38 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006b2e:	bf00      	nop
 8006b30:	e002      	b.n	8006b38 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b32:	bf00      	nop
 8006b34:	e000      	b.n	8006b38 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b36:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006b38:	3720      	adds	r7, #32
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b08a      	sub	sp, #40	; 0x28
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b60:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	0a1b      	lsrs	r3, r3, #8
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00e      	beq.n	8006b8c <HAL_I2C_ER_IRQHandler+0x4e>
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	0a1b      	lsrs	r3, r3, #8
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d008      	beq.n	8006b8c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	f043 0301 	orr.w	r3, r3, #1
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b8a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	0a5b      	lsrs	r3, r3, #9
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00e      	beq.n	8006bb6 <HAL_I2C_ER_IRQHandler+0x78>
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	0a1b      	lsrs	r3, r3, #8
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d008      	beq.n	8006bb6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	f043 0302 	orr.w	r3, r3, #2
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006bb4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	0a9b      	lsrs	r3, r3, #10
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d03f      	beq.n	8006c42 <HAL_I2C_ER_IRQHandler+0x104>
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	0a1b      	lsrs	r3, r3, #8
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d039      	beq.n	8006c42 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006bce:	7efb      	ldrb	r3, [r7, #27]
 8006bd0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006be8:	7ebb      	ldrb	r3, [r7, #26]
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d112      	bne.n	8006c14 <HAL_I2C_ER_IRQHandler+0xd6>
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10f      	bne.n	8006c14 <HAL_I2C_ER_IRQHandler+0xd6>
 8006bf4:	7cfb      	ldrb	r3, [r7, #19]
 8006bf6:	2b21      	cmp	r3, #33	; 0x21
 8006bf8:	d008      	beq.n	8006c0c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006bfa:	7cfb      	ldrb	r3, [r7, #19]
 8006bfc:	2b29      	cmp	r3, #41	; 0x29
 8006bfe:	d005      	beq.n	8006c0c <HAL_I2C_ER_IRQHandler+0xce>
 8006c00:	7cfb      	ldrb	r3, [r7, #19]
 8006c02:	2b28      	cmp	r3, #40	; 0x28
 8006c04:	d106      	bne.n	8006c14 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b21      	cmp	r3, #33	; 0x21
 8006c0a:	d103      	bne.n	8006c14 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 f869 	bl	8007ce4 <I2C_Slave_AF>
 8006c12:	e016      	b.n	8006c42 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c1c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	f043 0304 	orr.w	r3, r3, #4
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006c26:	7efb      	ldrb	r3, [r7, #27]
 8006c28:	2b10      	cmp	r3, #16
 8006c2a:	d002      	beq.n	8006c32 <HAL_I2C_ER_IRQHandler+0xf4>
 8006c2c:	7efb      	ldrb	r3, [r7, #27]
 8006c2e:	2b40      	cmp	r3, #64	; 0x40
 8006c30:	d107      	bne.n	8006c42 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c40:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	0adb      	lsrs	r3, r3, #11
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00e      	beq.n	8006c6c <HAL_I2C_ER_IRQHandler+0x12e>
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	0a1b      	lsrs	r3, r3, #8
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d008      	beq.n	8006c6c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	f043 0308 	orr.w	r3, r3, #8
 8006c60:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006c6a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d008      	beq.n	8006c84 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 f8a0 	bl	8007dc4 <I2C_ITError>
  }
}
 8006c84:	bf00      	nop
 8006c86:	3728      	adds	r7, #40	; 0x28
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d150      	bne.n	8006e24 <I2C_MasterTransmit_TXE+0xc8>
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	2b21      	cmp	r3, #33	; 0x21
 8006d86:	d14d      	bne.n	8006e24 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b08      	cmp	r3, #8
 8006d8c:	d01d      	beq.n	8006dca <I2C_MasterTransmit_TXE+0x6e>
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	d01a      	beq.n	8006dca <I2C_MasterTransmit_TXE+0x6e>
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d9a:	d016      	beq.n	8006dca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006daa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2211      	movs	r2, #17
 8006db0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7ff ff62 	bl	8006c8c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006dc8:	e060      	b.n	8006e8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006dd8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006de8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b40      	cmp	r3, #64	; 0x40
 8006e02:	d107      	bne.n	8006e14 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff ff7d 	bl	8006d0c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e12:	e03b      	b.n	8006e8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff ff35 	bl	8006c8c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e22:	e033      	b.n	8006e8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	2b21      	cmp	r3, #33	; 0x21
 8006e28:	d005      	beq.n	8006e36 <I2C_MasterTransmit_TXE+0xda>
 8006e2a:	7bbb      	ldrb	r3, [r7, #14]
 8006e2c:	2b40      	cmp	r3, #64	; 0x40
 8006e2e:	d12d      	bne.n	8006e8c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	2b22      	cmp	r3, #34	; 0x22
 8006e34:	d12a      	bne.n	8006e8c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d108      	bne.n	8006e52 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e4e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006e50:	e01c      	b.n	8006e8c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b40      	cmp	r3, #64	; 0x40
 8006e5c:	d103      	bne.n	8006e66 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f88e 	bl	8006f80 <I2C_MemoryTransmit_TXE_BTF>
}
 8006e64:	e012      	b.n	8006e8c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	781a      	ldrb	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	1c5a      	adds	r2, r3, #1
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	3b01      	subs	r3, #1
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006e8a:	e7ff      	b.n	8006e8c <I2C_MasterTransmit_TXE+0x130>
 8006e8c:	bf00      	nop
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b21      	cmp	r3, #33	; 0x21
 8006eac:	d164      	bne.n	8006f78 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d012      	beq.n	8006ede <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	781a      	ldrb	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006edc:	e04c      	b.n	8006f78 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d01d      	beq.n	8006f20 <I2C_MasterTransmit_BTF+0x8c>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b20      	cmp	r3, #32
 8006ee8:	d01a      	beq.n	8006f20 <I2C_MasterTransmit_BTF+0x8c>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ef0:	d016      	beq.n	8006f20 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f00:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2211      	movs	r2, #17
 8006f06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff feb7 	bl	8006c8c <HAL_I2C_MasterTxCpltCallback>
}
 8006f1e:	e02b      	b.n	8006f78 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f2e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f3e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b40      	cmp	r3, #64	; 0x40
 8006f58:	d107      	bne.n	8006f6a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff fed2 	bl	8006d0c <HAL_I2C_MemTxCpltCallback>
}
 8006f68:	e006      	b.n	8006f78 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff fe8a 	bl	8006c8c <HAL_I2C_MasterTxCpltCallback>
}
 8006f78:	bf00      	nop
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d11d      	bne.n	8006fd4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d10b      	bne.n	8006fb8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb0:	1c9a      	adds	r2, r3, #2
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006fb6:	e073      	b.n	80070a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	121b      	asrs	r3, r3, #8
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006fd2:	e065      	b.n	80070a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d10b      	bne.n	8006ff4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006ff2:	e055      	b.n	80070a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d151      	bne.n	80070a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	2b22      	cmp	r3, #34	; 0x22
 8007000:	d10d      	bne.n	800701e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007010:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800701c:	e040      	b.n	80070a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d015      	beq.n	8007054 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	2b21      	cmp	r3, #33	; 0x21
 800702c:	d112      	bne.n	8007054 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	781a      	ldrb	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007048:	b29b      	uxth	r3, r3
 800704a:	3b01      	subs	r3, #1
 800704c:	b29a      	uxth	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007052:	e025      	b.n	80070a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007058:	b29b      	uxth	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d120      	bne.n	80070a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	2b21      	cmp	r3, #33	; 0x21
 8007062:	d11d      	bne.n	80070a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007072:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007082:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2220      	movs	r2, #32
 800708e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7ff fe36 	bl	8006d0c <HAL_I2C_MemTxCpltCallback>
}
 80070a0:	bf00      	nop
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b22      	cmp	r3, #34	; 0x22
 80070ba:	f040 80ac 	bne.w	8007216 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d921      	bls.n	8007110 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	691a      	ldr	r2, [r3, #16]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	3b01      	subs	r3, #1
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	f040 808c 	bne.w	8007216 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800710c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800710e:	e082      	b.n	8007216 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	2b02      	cmp	r3, #2
 8007116:	d075      	beq.n	8007204 <I2C_MasterReceive_RXNE+0x15c>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d002      	beq.n	8007124 <I2C_MasterReceive_RXNE+0x7c>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d16f      	bne.n	8007204 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 f827 	bl	8008178 <I2C_WaitOnSTOPRequestThroughIT>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d142      	bne.n	80071b6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800713e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800714e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	691a      	ldr	r2, [r3, #16]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800716c:	b29b      	uxth	r3, r3
 800716e:	3b01      	subs	r3, #1
 8007170:	b29a      	uxth	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2220      	movs	r2, #32
 800717a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b40      	cmp	r3, #64	; 0x40
 8007188:	d10a      	bne.n	80071a0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff fdc1 	bl	8006d20 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800719e:	e03a      	b.n	8007216 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2212      	movs	r2, #18
 80071ac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7ff fd76 	bl	8006ca0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80071b4:	e02f      	b.n	8007216 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071c4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	691a      	ldr	r2, [r3, #16]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	b2d2      	uxtb	r2, r2
 80071d2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	3b01      	subs	r3, #1
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f7ff fd99 	bl	8006d34 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007202:	e008      	b.n	8007216 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007212:	605a      	str	r2, [r3, #4]
}
 8007214:	e7ff      	b.n	8007216 <I2C_MasterReceive_RXNE+0x16e>
 8007216:	bf00      	nop
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b084      	sub	sp, #16
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b04      	cmp	r3, #4
 8007234:	d11b      	bne.n	800726e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007244:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691a      	ldr	r2, [r3, #16]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	b2d2      	uxtb	r2, r2
 8007252:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007262:	b29b      	uxth	r3, r3
 8007264:	3b01      	subs	r3, #1
 8007266:	b29a      	uxth	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800726c:	e0bd      	b.n	80073ea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007272:	b29b      	uxth	r3, r3
 8007274:	2b03      	cmp	r3, #3
 8007276:	d129      	bne.n	80072cc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007286:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b04      	cmp	r3, #4
 800728c:	d00a      	beq.n	80072a4 <I2C_MasterReceive_BTF+0x86>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b02      	cmp	r3, #2
 8007292:	d007      	beq.n	80072a4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072a2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691a      	ldr	r2, [r3, #16]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80072ca:	e08e      	b.n	80073ea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d176      	bne.n	80073c4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d002      	beq.n	80072e2 <I2C_MasterReceive_BTF+0xc4>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b10      	cmp	r3, #16
 80072e0:	d108      	bne.n	80072f4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	e019      	b.n	8007328 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	d002      	beq.n	8007300 <I2C_MasterReceive_BTF+0xe2>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d108      	bne.n	8007312 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	e00a      	b.n	8007328 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2b10      	cmp	r3, #16
 8007316:	d007      	beq.n	8007328 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007326:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691a      	ldr	r2, [r3, #16]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007344:	b29b      	uxth	r3, r3
 8007346:	3b01      	subs	r3, #1
 8007348:	b29a      	uxth	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	691a      	ldr	r2, [r3, #16]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	b2d2      	uxtb	r2, r2
 800735a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736a:	b29b      	uxth	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007382:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2220      	movs	r2, #32
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b40      	cmp	r3, #64	; 0x40
 8007396:	d10a      	bne.n	80073ae <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7ff fcba 	bl	8006d20 <HAL_I2C_MemRxCpltCallback>
}
 80073ac:	e01d      	b.n	80073ea <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2212      	movs	r2, #18
 80073ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7ff fc6f 	bl	8006ca0 <HAL_I2C_MasterRxCpltCallback>
}
 80073c2:	e012      	b.n	80073ea <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	691a      	ldr	r2, [r3, #16]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	b2d2      	uxtb	r2, r2
 80073d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	1c5a      	adds	r2, r3, #1
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80073ea:	bf00      	nop
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b40      	cmp	r3, #64	; 0x40
 8007404:	d117      	bne.n	8007436 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007412:	b2db      	uxtb	r3, r3
 8007414:	461a      	mov	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800741e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007420:	e067      	b.n	80074f2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007426:	b2db      	uxtb	r3, r3
 8007428:	f043 0301 	orr.w	r3, r3, #1
 800742c:	b2da      	uxtb	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	611a      	str	r2, [r3, #16]
}
 8007434:	e05d      	b.n	80074f2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800743e:	d133      	bne.n	80074a8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b21      	cmp	r3, #33	; 0x21
 800744a:	d109      	bne.n	8007460 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007450:	b2db      	uxtb	r3, r3
 8007452:	461a      	mov	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800745c:	611a      	str	r2, [r3, #16]
 800745e:	e008      	b.n	8007472 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007464:	b2db      	uxtb	r3, r3
 8007466:	f043 0301 	orr.w	r3, r3, #1
 800746a:	b2da      	uxtb	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007476:	2b00      	cmp	r3, #0
 8007478:	d004      	beq.n	8007484 <I2C_Master_SB+0x92>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800747e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007480:	2b00      	cmp	r3, #0
 8007482:	d108      	bne.n	8007496 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	2b00      	cmp	r3, #0
 800748a:	d032      	beq.n	80074f2 <I2C_Master_SB+0x100>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d02d      	beq.n	80074f2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074a4:	605a      	str	r2, [r3, #4]
}
 80074a6:	e024      	b.n	80074f2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10e      	bne.n	80074ce <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	11db      	asrs	r3, r3, #7
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	f003 0306 	and.w	r3, r3, #6
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	f063 030f 	orn	r3, r3, #15
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	611a      	str	r2, [r3, #16]
}
 80074cc:	e011      	b.n	80074f2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d10d      	bne.n	80074f2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074da:	b29b      	uxth	r3, r3
 80074dc:	11db      	asrs	r3, r3, #7
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	f003 0306 	and.w	r3, r3, #6
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	f063 030e 	orn	r3, r3, #14
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	611a      	str	r2, [r3, #16]
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750a:	b2da      	uxtb	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007516:	2b00      	cmp	r3, #0
 8007518:	d004      	beq.n	8007524 <I2C_Master_ADD10+0x26>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007520:	2b00      	cmp	r3, #0
 8007522:	d108      	bne.n	8007536 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00c      	beq.n	8007546 <I2C_Master_ADD10+0x48>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007532:	2b00      	cmp	r3, #0
 8007534:	d007      	beq.n	8007546 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007544:	605a      	str	r2, [r3, #4]
  }
}
 8007546:	bf00      	nop
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007552:	b480      	push	{r7}
 8007554:	b091      	sub	sp, #68	; 0x44
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007560:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b22      	cmp	r3, #34	; 0x22
 800757a:	f040 8169 	bne.w	8007850 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10f      	bne.n	80075a6 <I2C_Master_ADDR+0x54>
 8007586:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800758a:	2b40      	cmp	r3, #64	; 0x40
 800758c:	d10b      	bne.n	80075a6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800758e:	2300      	movs	r3, #0
 8007590:	633b      	str	r3, [r7, #48]	; 0x30
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	633b      	str	r3, [r7, #48]	; 0x30
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	633b      	str	r3, [r7, #48]	; 0x30
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	e160      	b.n	8007868 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d11d      	bne.n	80075ea <I2C_Master_ADDR+0x98>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80075b6:	d118      	bne.n	80075ea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075b8:	2300      	movs	r3, #0
 80075ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075dc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	651a      	str	r2, [r3, #80]	; 0x50
 80075e8:	e13e      	b.n	8007868 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d113      	bne.n	800761c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075f4:	2300      	movs	r3, #0
 80075f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	62bb      	str	r3, [r7, #40]	; 0x28
 8007608:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	e115      	b.n	8007848 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007620:	b29b      	uxth	r3, r3
 8007622:	2b01      	cmp	r3, #1
 8007624:	f040 808a 	bne.w	800773c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800762e:	d137      	bne.n	80076a0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800763e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800764a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800764e:	d113      	bne.n	8007678 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800765e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007660:	2300      	movs	r3, #0
 8007662:	627b      	str	r3, [r7, #36]	; 0x24
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	e0e7      	b.n	8007848 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007678:	2300      	movs	r3, #0
 800767a:	623b      	str	r3, [r7, #32]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	623b      	str	r3, [r7, #32]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	623b      	str	r3, [r7, #32]
 800768c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	e0d3      	b.n	8007848 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80076a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	d02e      	beq.n	8007704 <I2C_Master_ADDR+0x1b2>
 80076a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a8:	2b20      	cmp	r3, #32
 80076aa:	d02b      	beq.n	8007704 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80076ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ae:	2b12      	cmp	r3, #18
 80076b0:	d102      	bne.n	80076b8 <I2C_Master_ADDR+0x166>
 80076b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d125      	bne.n	8007704 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80076b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	d00e      	beq.n	80076dc <I2C_Master_ADDR+0x18a>
 80076be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d00b      	beq.n	80076dc <I2C_Master_ADDR+0x18a>
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	2b10      	cmp	r3, #16
 80076c8:	d008      	beq.n	80076dc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	e007      	b.n	80076ec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076ea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ec:	2300      	movs	r3, #0
 80076ee:	61fb      	str	r3, [r7, #28]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	61fb      	str	r3, [r7, #28]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	61fb      	str	r3, [r7, #28]
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	e0a1      	b.n	8007848 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007712:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007714:	2300      	movs	r3, #0
 8007716:	61bb      	str	r3, [r7, #24]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	61bb      	str	r3, [r7, #24]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	61bb      	str	r3, [r7, #24]
 8007728:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e085      	b.n	8007848 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007740:	b29b      	uxth	r3, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d14d      	bne.n	80077e2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	2b04      	cmp	r3, #4
 800774a:	d016      	beq.n	800777a <I2C_Master_ADDR+0x228>
 800774c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774e:	2b02      	cmp	r3, #2
 8007750:	d013      	beq.n	800777a <I2C_Master_ADDR+0x228>
 8007752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007754:	2b10      	cmp	r3, #16
 8007756:	d010      	beq.n	800777a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007766:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	e007      	b.n	800778a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007788:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007798:	d117      	bne.n	80077ca <I2C_Master_ADDR+0x278>
 800779a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077a0:	d00b      	beq.n	80077ba <I2C_Master_ADDR+0x268>
 80077a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d008      	beq.n	80077ba <I2C_Master_ADDR+0x268>
 80077a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077aa:	2b08      	cmp	r3, #8
 80077ac:	d005      	beq.n	80077ba <I2C_Master_ADDR+0x268>
 80077ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	d002      	beq.n	80077ba <I2C_Master_ADDR+0x268>
 80077b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d107      	bne.n	80077ca <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ca:	2300      	movs	r3, #0
 80077cc:	617b      	str	r3, [r7, #20]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	617b      	str	r3, [r7, #20]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	617b      	str	r3, [r7, #20]
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	e032      	b.n	8007848 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077f0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007800:	d117      	bne.n	8007832 <I2C_Master_ADDR+0x2e0>
 8007802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007804:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007808:	d00b      	beq.n	8007822 <I2C_Master_ADDR+0x2d0>
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	2b01      	cmp	r3, #1
 800780e:	d008      	beq.n	8007822 <I2C_Master_ADDR+0x2d0>
 8007810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007812:	2b08      	cmp	r3, #8
 8007814:	d005      	beq.n	8007822 <I2C_Master_ADDR+0x2d0>
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	2b10      	cmp	r3, #16
 800781a:	d002      	beq.n	8007822 <I2C_Master_ADDR+0x2d0>
 800781c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781e:	2b20      	cmp	r3, #32
 8007820:	d107      	bne.n	8007832 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007830:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007832:	2300      	movs	r3, #0
 8007834:	613b      	str	r3, [r7, #16]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	613b      	str	r3, [r7, #16]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	613b      	str	r3, [r7, #16]
 8007846:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800784e:	e00b      	b.n	8007868 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007850:	2300      	movs	r3, #0
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	68fb      	ldr	r3, [r7, #12]
}
 8007866:	e7ff      	b.n	8007868 <I2C_Master_ADDR+0x316>
 8007868:	bf00      	nop
 800786a:	3744      	adds	r7, #68	; 0x44
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007882:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007888:	b29b      	uxth	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d02b      	beq.n	80078e6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007892:	781a      	ldrb	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d114      	bne.n	80078e6 <I2C_SlaveTransmit_TXE+0x72>
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	2b29      	cmp	r3, #41	; 0x29
 80078c0:	d111      	bne.n	80078e6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078d0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2221      	movs	r2, #33	; 0x21
 80078d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2228      	movs	r2, #40	; 0x28
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7ff f9e7 	bl	8006cb4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80078e6:	bf00      	nop
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b083      	sub	sp, #12
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d011      	beq.n	8007924 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007904:	781a      	ldrb	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800791a:	b29b      	uxth	r3, r3
 800791c:	3b01      	subs	r3, #1
 800791e:	b29a      	uxth	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800793e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d02c      	beq.n	80079a4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	691a      	ldr	r2, [r3, #16]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007966:	b29b      	uxth	r3, r3
 8007968:	3b01      	subs	r3, #1
 800796a:	b29a      	uxth	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007974:	b29b      	uxth	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d114      	bne.n	80079a4 <I2C_SlaveReceive_RXNE+0x74>
 800797a:	7bfb      	ldrb	r3, [r7, #15]
 800797c:	2b2a      	cmp	r3, #42	; 0x2a
 800797e:	d111      	bne.n	80079a4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800798e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2222      	movs	r2, #34	; 0x22
 8007994:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2228      	movs	r2, #40	; 0x28
 800799a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7ff f992 	bl	8006cc8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80079a4:	bf00      	nop
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d012      	beq.n	80079e4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	691a      	ldr	r2, [r3, #16]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	b2d2      	uxtb	r2, r2
 80079ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	b29a      	uxth	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80079fa:	2300      	movs	r3, #0
 80079fc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a0a:	2b28      	cmp	r3, #40	; 0x28
 8007a0c:	d127      	bne.n	8007a5e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a1c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	089b      	lsrs	r3, r3, #2
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	09db      	lsrs	r3, r3, #7
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d103      	bne.n	8007a42 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	81bb      	strh	r3, [r7, #12]
 8007a40:	e002      	b.n	8007a48 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007a50:	89ba      	ldrh	r2, [r7, #12]
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7ff f940 	bl	8006cdc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007a5c:	e00e      	b.n	8007a7c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60bb      	str	r3, [r7, #8]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	60bb      	str	r3, [r7, #8]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	60bb      	str	r3, [r7, #8]
 8007a72:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007a7c:	bf00      	nop
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a92:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007aa2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	60bb      	str	r3, [r7, #8]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	60bb      	str	r3, [r7, #8]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f042 0201 	orr.w	r2, r2, #1
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ad0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ae0:	d172      	bne.n	8007bc8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
 8007ae4:	2b22      	cmp	r3, #34	; 0x22
 8007ae6:	d002      	beq.n	8007aee <I2C_Slave_STOPF+0x6a>
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	2b2a      	cmp	r3, #42	; 0x2a
 8007aec:	d135      	bne.n	8007b5a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d005      	beq.n	8007b12 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0a:	f043 0204 	orr.w	r2, r3, #4
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe f92a 	bl	8005d80 <HAL_DMA_GetState>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d049      	beq.n	8007bc6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b36:	4a69      	ldr	r2, [pc, #420]	; (8007cdc <I2C_Slave_STOPF+0x258>)
 8007b38:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fd ff72 	bl	8005a28 <HAL_DMA_Abort_IT>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d03d      	beq.n	8007bc6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b54:	4610      	mov	r0, r2
 8007b56:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b58:	e035      	b.n	8007bc6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d005      	beq.n	8007b7e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	f043 0204 	orr.w	r2, r3, #4
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fe f8f4 	bl	8005d80 <HAL_DMA_GetState>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d014      	beq.n	8007bc8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba2:	4a4e      	ldr	r2, [pc, #312]	; (8007cdc <I2C_Slave_STOPF+0x258>)
 8007ba4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fd ff3c 	bl	8005a28 <HAL_DMA_Abort_IT>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d008      	beq.n	8007bc8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	4798      	blx	r3
 8007bc4:	e000      	b.n	8007bc8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bc6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d03e      	beq.n	8007c50 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	695b      	ldr	r3, [r3, #20]
 8007bd8:	f003 0304 	and.w	r3, r3, #4
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	d112      	bne.n	8007c06 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691a      	ldr	r2, [r3, #16]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bea:	b2d2      	uxtb	r2, r2
 8007bec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	1c5a      	adds	r2, r3, #1
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c10:	2b40      	cmp	r3, #64	; 0x40
 8007c12:	d112      	bne.n	8007c3a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	691a      	ldr	r2, [r3, #16]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1e:	b2d2      	uxtb	r2, r2
 8007c20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	3b01      	subs	r3, #1
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d005      	beq.n	8007c50 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c48:	f043 0204 	orr.w	r2, r3, #4
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f8b3 	bl	8007dc4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007c5e:	e039      	b.n	8007cd4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007c60:	7bfb      	ldrb	r3, [r7, #15]
 8007c62:	2b2a      	cmp	r3, #42	; 0x2a
 8007c64:	d109      	bne.n	8007c7a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2228      	movs	r2, #40	; 0x28
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7ff f827 	bl	8006cc8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b28      	cmp	r3, #40	; 0x28
 8007c84:	d111      	bne.n	8007caa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a15      	ldr	r2, [pc, #84]	; (8007ce0 <I2C_Slave_STOPF+0x25c>)
 8007c8a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2220      	movs	r2, #32
 8007c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7ff f828 	bl	8006cf8 <HAL_I2C_ListenCpltCallback>
}
 8007ca8:	e014      	b.n	8007cd4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cae:	2b22      	cmp	r3, #34	; 0x22
 8007cb0:	d002      	beq.n	8007cb8 <I2C_Slave_STOPF+0x234>
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
 8007cb4:	2b22      	cmp	r3, #34	; 0x22
 8007cb6:	d10d      	bne.n	8007cd4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7fe fffa 	bl	8006cc8 <HAL_I2C_SlaveRxCpltCallback>
}
 8007cd4:	bf00      	nop
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	08008029 	.word	0x08008029
 8007ce0:	ffff0000 	.word	0xffff0000

08007ce4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b08      	cmp	r3, #8
 8007cfe:	d002      	beq.n	8007d06 <I2C_Slave_AF+0x22>
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2b20      	cmp	r3, #32
 8007d04:	d129      	bne.n	8007d5a <I2C_Slave_AF+0x76>
 8007d06:	7bfb      	ldrb	r3, [r7, #15]
 8007d08:	2b28      	cmp	r3, #40	; 0x28
 8007d0a:	d126      	bne.n	8007d5a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a2c      	ldr	r2, [pc, #176]	; (8007dc0 <I2C_Slave_AF+0xdc>)
 8007d10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d20:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d2a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d3a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7fe ffd0 	bl	8006cf8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007d58:	e02e      	b.n	8007db8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
 8007d5c:	2b21      	cmp	r3, #33	; 0x21
 8007d5e:	d126      	bne.n	8007dae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a17      	ldr	r2, [pc, #92]	; (8007dc0 <I2C_Slave_AF+0xdc>)
 8007d64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2221      	movs	r2, #33	; 0x21
 8007d6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d8a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d94:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007da4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7fe ff84 	bl	8006cb4 <HAL_I2C_SlaveTxCpltCallback>
}
 8007dac:	e004      	b.n	8007db8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007db6:	615a      	str	r2, [r3, #20]
}
 8007db8:	bf00      	nop
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	ffff0000 	.word	0xffff0000

08007dc4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dda:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007ddc:	7bbb      	ldrb	r3, [r7, #14]
 8007dde:	2b10      	cmp	r3, #16
 8007de0:	d002      	beq.n	8007de8 <I2C_ITError+0x24>
 8007de2:	7bbb      	ldrb	r3, [r7, #14]
 8007de4:	2b40      	cmp	r3, #64	; 0x40
 8007de6:	d10a      	bne.n	8007dfe <I2C_ITError+0x3a>
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
 8007dea:	2b22      	cmp	r3, #34	; 0x22
 8007dec:	d107      	bne.n	8007dfe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dfc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007e04:	2b28      	cmp	r3, #40	; 0x28
 8007e06:	d107      	bne.n	8007e18 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2228      	movs	r2, #40	; 0x28
 8007e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e16:	e015      	b.n	8007e44 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e26:	d00a      	beq.n	8007e3e <I2C_ITError+0x7a>
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
 8007e2a:	2b60      	cmp	r3, #96	; 0x60
 8007e2c:	d007      	beq.n	8007e3e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e52:	d162      	bne.n	8007f1a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e62:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d020      	beq.n	8007eb4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e76:	4a6a      	ldr	r2, [pc, #424]	; (8008020 <I2C_ITError+0x25c>)
 8007e78:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fd fdd2 	bl	8005a28 <HAL_DMA_Abort_IT>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 8089 	beq.w	8007f9e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0201 	bic.w	r2, r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007eae:	4610      	mov	r0, r2
 8007eb0:	4798      	blx	r3
 8007eb2:	e074      	b.n	8007f9e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb8:	4a59      	ldr	r2, [pc, #356]	; (8008020 <I2C_ITError+0x25c>)
 8007eba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fd fdb1 	bl	8005a28 <HAL_DMA_Abort_IT>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d068      	beq.n	8007f9e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed6:	2b40      	cmp	r3, #64	; 0x40
 8007ed8:	d10b      	bne.n	8007ef2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	691a      	ldr	r2, [r3, #16]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	b2d2      	uxtb	r2, r2
 8007ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f022 0201 	bic.w	r2, r2, #1
 8007f00:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2220      	movs	r2, #32
 8007f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f14:	4610      	mov	r0, r2
 8007f16:	4798      	blx	r3
 8007f18:	e041      	b.n	8007f9e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b60      	cmp	r3, #96	; 0x60
 8007f24:	d125      	bne.n	8007f72 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3e:	2b40      	cmp	r3, #64	; 0x40
 8007f40:	d10b      	bne.n	8007f5a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	b2d2      	uxtb	r2, r2
 8007f4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 0201 	bic.w	r2, r2, #1
 8007f68:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7fe feec 	bl	8006d48 <HAL_I2C_AbortCpltCallback>
 8007f70:	e015      	b.n	8007f9e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	695b      	ldr	r3, [r3, #20]
 8007f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f7c:	2b40      	cmp	r3, #64	; 0x40
 8007f7e:	d10b      	bne.n	8007f98 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	691a      	ldr	r2, [r3, #16]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8a:	b2d2      	uxtb	r2, r2
 8007f8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f92:	1c5a      	adds	r2, r3, #1
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7fe fecb 	bl	8006d34 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10e      	bne.n	8007fcc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d109      	bne.n	8007fcc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d104      	bne.n	8007fcc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d007      	beq.n	8007fdc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007fda:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe8:	f003 0304 	and.w	r3, r3, #4
 8007fec:	2b04      	cmp	r3, #4
 8007fee:	d113      	bne.n	8008018 <I2C_ITError+0x254>
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
 8007ff2:	2b28      	cmp	r3, #40	; 0x28
 8007ff4:	d110      	bne.n	8008018 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a0a      	ldr	r2, [pc, #40]	; (8008024 <I2C_ITError+0x260>)
 8007ffa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2220      	movs	r2, #32
 8008006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7fe fe70 	bl	8006cf8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008018:	bf00      	nop
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	08008029 	.word	0x08008029
 8008024:	ffff0000 	.word	0xffff0000

08008028 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008030:	2300      	movs	r3, #0
 8008032:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008038:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008040:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008042:	4b4b      	ldr	r3, [pc, #300]	; (8008170 <I2C_DMAAbort+0x148>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	08db      	lsrs	r3, r3, #3
 8008048:	4a4a      	ldr	r2, [pc, #296]	; (8008174 <I2C_DMAAbort+0x14c>)
 800804a:	fba2 2303 	umull	r2, r3, r2, r3
 800804e:	0a1a      	lsrs	r2, r3, #8
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	00da      	lsls	r2, r3, #3
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d106      	bne.n	8008070 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	f043 0220 	orr.w	r2, r3, #32
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800806e:	e00a      	b.n	8008086 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3b01      	subs	r3, #1
 8008074:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008084:	d0ea      	beq.n	800805c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008092:	2200      	movs	r2, #0
 8008094:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a2:	2200      	movs	r2, #0
 80080a4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080b4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2200      	movs	r2, #0
 80080ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c8:	2200      	movs	r2, #0
 80080ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d8:	2200      	movs	r2, #0
 80080da:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f022 0201 	bic.w	r2, r2, #1
 80080ea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b60      	cmp	r3, #96	; 0x60
 80080f6:	d10e      	bne.n	8008116 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2220      	movs	r2, #32
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2200      	movs	r2, #0
 800810c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800810e:	6978      	ldr	r0, [r7, #20]
 8008110:	f7fe fe1a 	bl	8006d48 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008114:	e027      	b.n	8008166 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008116:	7cfb      	ldrb	r3, [r7, #19]
 8008118:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800811c:	2b28      	cmp	r3, #40	; 0x28
 800811e:	d117      	bne.n	8008150 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f042 0201 	orr.w	r2, r2, #1
 800812e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800813e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2200      	movs	r2, #0
 8008144:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2228      	movs	r2, #40	; 0x28
 800814a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800814e:	e007      	b.n	8008160 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2220      	movs	r2, #32
 8008154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008160:	6978      	ldr	r0, [r7, #20]
 8008162:	f7fe fde7 	bl	8006d34 <HAL_I2C_ErrorCallback>
}
 8008166:	bf00      	nop
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	200003b8 	.word	0x200003b8
 8008174:	14f8b589 	.word	0x14f8b589

08008178 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008184:	4b13      	ldr	r3, [pc, #76]	; (80081d4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	08db      	lsrs	r3, r3, #3
 800818a:	4a13      	ldr	r2, [pc, #76]	; (80081d8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800818c:	fba2 2303 	umull	r2, r3, r2, r3
 8008190:	0a1a      	lsrs	r2, r3, #8
 8008192:	4613      	mov	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3b01      	subs	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d107      	bne.n	80081b6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081aa:	f043 0220 	orr.w	r2, r3, #32
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e008      	b.n	80081c8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c4:	d0e9      	beq.n	800819a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	200003b8 	.word	0x200003b8
 80081d8:	14f8b589 	.word	0x14f8b589

080081dc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80081ec:	d103      	bne.n	80081f6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80081f4:	e007      	b.n	8008206 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80081fe:	d102      	bne.n	8008206 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2208      	movs	r2, #8
 8008204:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
	...

08008214 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e267      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d075      	beq.n	800831e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008232:	4b88      	ldr	r3, [pc, #544]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f003 030c 	and.w	r3, r3, #12
 800823a:	2b04      	cmp	r3, #4
 800823c:	d00c      	beq.n	8008258 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800823e:	4b85      	ldr	r3, [pc, #532]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008246:	2b08      	cmp	r3, #8
 8008248:	d112      	bne.n	8008270 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800824a:	4b82      	ldr	r3, [pc, #520]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008256:	d10b      	bne.n	8008270 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008258:	4b7e      	ldr	r3, [pc, #504]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d05b      	beq.n	800831c <HAL_RCC_OscConfig+0x108>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d157      	bne.n	800831c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	e242      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008278:	d106      	bne.n	8008288 <HAL_RCC_OscConfig+0x74>
 800827a:	4b76      	ldr	r3, [pc, #472]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a75      	ldr	r2, [pc, #468]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 8008280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008284:	6013      	str	r3, [r2, #0]
 8008286:	e01d      	b.n	80082c4 <HAL_RCC_OscConfig+0xb0>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008290:	d10c      	bne.n	80082ac <HAL_RCC_OscConfig+0x98>
 8008292:	4b70      	ldr	r3, [pc, #448]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a6f      	ldr	r2, [pc, #444]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 8008298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800829c:	6013      	str	r3, [r2, #0]
 800829e:	4b6d      	ldr	r3, [pc, #436]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a6c      	ldr	r2, [pc, #432]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 80082a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	e00b      	b.n	80082c4 <HAL_RCC_OscConfig+0xb0>
 80082ac:	4b69      	ldr	r3, [pc, #420]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a68      	ldr	r2, [pc, #416]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 80082b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	4b66      	ldr	r3, [pc, #408]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a65      	ldr	r2, [pc, #404]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 80082be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d013      	beq.n	80082f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082cc:	f7fd f918 	bl	8005500 <HAL_GetTick>
 80082d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082d2:	e008      	b.n	80082e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082d4:	f7fd f914 	bl	8005500 <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	2b64      	cmp	r3, #100	; 0x64
 80082e0:	d901      	bls.n	80082e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e207      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082e6:	4b5b      	ldr	r3, [pc, #364]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0f0      	beq.n	80082d4 <HAL_RCC_OscConfig+0xc0>
 80082f2:	e014      	b.n	800831e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082f4:	f7fd f904 	bl	8005500 <HAL_GetTick>
 80082f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082fa:	e008      	b.n	800830e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082fc:	f7fd f900 	bl	8005500 <HAL_GetTick>
 8008300:	4602      	mov	r2, r0
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	2b64      	cmp	r3, #100	; 0x64
 8008308:	d901      	bls.n	800830e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e1f3      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800830e:	4b51      	ldr	r3, [pc, #324]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1f0      	bne.n	80082fc <HAL_RCC_OscConfig+0xe8>
 800831a:	e000      	b.n	800831e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800831c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	2b00      	cmp	r3, #0
 8008328:	d063      	beq.n	80083f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800832a:	4b4a      	ldr	r3, [pc, #296]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 030c 	and.w	r3, r3, #12
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00b      	beq.n	800834e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008336:	4b47      	ldr	r3, [pc, #284]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800833e:	2b08      	cmp	r3, #8
 8008340:	d11c      	bne.n	800837c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008342:	4b44      	ldr	r3, [pc, #272]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d116      	bne.n	800837c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800834e:	4b41      	ldr	r3, [pc, #260]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	2b00      	cmp	r3, #0
 8008358:	d005      	beq.n	8008366 <HAL_RCC_OscConfig+0x152>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d001      	beq.n	8008366 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e1c7      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008366:	4b3b      	ldr	r3, [pc, #236]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	00db      	lsls	r3, r3, #3
 8008374:	4937      	ldr	r1, [pc, #220]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 8008376:	4313      	orrs	r3, r2
 8008378:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800837a:	e03a      	b.n	80083f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d020      	beq.n	80083c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008384:	4b34      	ldr	r3, [pc, #208]	; (8008458 <HAL_RCC_OscConfig+0x244>)
 8008386:	2201      	movs	r2, #1
 8008388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800838a:	f7fd f8b9 	bl	8005500 <HAL_GetTick>
 800838e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008390:	e008      	b.n	80083a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008392:	f7fd f8b5 	bl	8005500 <HAL_GetTick>
 8008396:	4602      	mov	r2, r0
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	2b02      	cmp	r3, #2
 800839e:	d901      	bls.n	80083a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e1a8      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083a4:	4b2b      	ldr	r3, [pc, #172]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0302 	and.w	r3, r3, #2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d0f0      	beq.n	8008392 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083b0:	4b28      	ldr	r3, [pc, #160]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	00db      	lsls	r3, r3, #3
 80083be:	4925      	ldr	r1, [pc, #148]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	600b      	str	r3, [r1, #0]
 80083c4:	e015      	b.n	80083f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80083c6:	4b24      	ldr	r3, [pc, #144]	; (8008458 <HAL_RCC_OscConfig+0x244>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083cc:	f7fd f898 	bl	8005500 <HAL_GetTick>
 80083d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083d2:	e008      	b.n	80083e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083d4:	f7fd f894 	bl	8005500 <HAL_GetTick>
 80083d8:	4602      	mov	r2, r0
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d901      	bls.n	80083e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e187      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083e6:	4b1b      	ldr	r3, [pc, #108]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1f0      	bne.n	80083d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0308 	and.w	r3, r3, #8
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d036      	beq.n	800846c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d016      	beq.n	8008434 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008406:	4b15      	ldr	r3, [pc, #84]	; (800845c <HAL_RCC_OscConfig+0x248>)
 8008408:	2201      	movs	r2, #1
 800840a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800840c:	f7fd f878 	bl	8005500 <HAL_GetTick>
 8008410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008412:	e008      	b.n	8008426 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008414:	f7fd f874 	bl	8005500 <HAL_GetTick>
 8008418:	4602      	mov	r2, r0
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	2b02      	cmp	r3, #2
 8008420:	d901      	bls.n	8008426 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e167      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008426:	4b0b      	ldr	r3, [pc, #44]	; (8008454 <HAL_RCC_OscConfig+0x240>)
 8008428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	2b00      	cmp	r3, #0
 8008430:	d0f0      	beq.n	8008414 <HAL_RCC_OscConfig+0x200>
 8008432:	e01b      	b.n	800846c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008434:	4b09      	ldr	r3, [pc, #36]	; (800845c <HAL_RCC_OscConfig+0x248>)
 8008436:	2200      	movs	r2, #0
 8008438:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800843a:	f7fd f861 	bl	8005500 <HAL_GetTick>
 800843e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008440:	e00e      	b.n	8008460 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008442:	f7fd f85d 	bl	8005500 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	2b02      	cmp	r3, #2
 800844e:	d907      	bls.n	8008460 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e150      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e2>
 8008454:	40023800 	.word	0x40023800
 8008458:	42470000 	.word	0x42470000
 800845c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008460:	4b88      	ldr	r3, [pc, #544]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 8008462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008464:	f003 0302 	and.w	r3, r3, #2
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1ea      	bne.n	8008442 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 8097 	beq.w	80085a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800847a:	2300      	movs	r3, #0
 800847c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800847e:	4b81      	ldr	r3, [pc, #516]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 8008480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10f      	bne.n	80084aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800848a:	2300      	movs	r3, #0
 800848c:	60bb      	str	r3, [r7, #8]
 800848e:	4b7d      	ldr	r3, [pc, #500]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 8008490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008492:	4a7c      	ldr	r2, [pc, #496]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 8008494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008498:	6413      	str	r3, [r2, #64]	; 0x40
 800849a:	4b7a      	ldr	r3, [pc, #488]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 800849c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084a2:	60bb      	str	r3, [r7, #8]
 80084a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084a6:	2301      	movs	r3, #1
 80084a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084aa:	4b77      	ldr	r3, [pc, #476]	; (8008688 <HAL_RCC_OscConfig+0x474>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d118      	bne.n	80084e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084b6:	4b74      	ldr	r3, [pc, #464]	; (8008688 <HAL_RCC_OscConfig+0x474>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a73      	ldr	r2, [pc, #460]	; (8008688 <HAL_RCC_OscConfig+0x474>)
 80084bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084c2:	f7fd f81d 	bl	8005500 <HAL_GetTick>
 80084c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084c8:	e008      	b.n	80084dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084ca:	f7fd f819 	bl	8005500 <HAL_GetTick>
 80084ce:	4602      	mov	r2, r0
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d901      	bls.n	80084dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80084d8:	2303      	movs	r3, #3
 80084da:	e10c      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084dc:	4b6a      	ldr	r3, [pc, #424]	; (8008688 <HAL_RCC_OscConfig+0x474>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d0f0      	beq.n	80084ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d106      	bne.n	80084fe <HAL_RCC_OscConfig+0x2ea>
 80084f0:	4b64      	ldr	r3, [pc, #400]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 80084f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f4:	4a63      	ldr	r2, [pc, #396]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 80084f6:	f043 0301 	orr.w	r3, r3, #1
 80084fa:	6713      	str	r3, [r2, #112]	; 0x70
 80084fc:	e01c      	b.n	8008538 <HAL_RCC_OscConfig+0x324>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	2b05      	cmp	r3, #5
 8008504:	d10c      	bne.n	8008520 <HAL_RCC_OscConfig+0x30c>
 8008506:	4b5f      	ldr	r3, [pc, #380]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 8008508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800850a:	4a5e      	ldr	r2, [pc, #376]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 800850c:	f043 0304 	orr.w	r3, r3, #4
 8008510:	6713      	str	r3, [r2, #112]	; 0x70
 8008512:	4b5c      	ldr	r3, [pc, #368]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 8008514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008516:	4a5b      	ldr	r2, [pc, #364]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 8008518:	f043 0301 	orr.w	r3, r3, #1
 800851c:	6713      	str	r3, [r2, #112]	; 0x70
 800851e:	e00b      	b.n	8008538 <HAL_RCC_OscConfig+0x324>
 8008520:	4b58      	ldr	r3, [pc, #352]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 8008522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008524:	4a57      	ldr	r2, [pc, #348]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 8008526:	f023 0301 	bic.w	r3, r3, #1
 800852a:	6713      	str	r3, [r2, #112]	; 0x70
 800852c:	4b55      	ldr	r3, [pc, #340]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 800852e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008530:	4a54      	ldr	r2, [pc, #336]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 8008532:	f023 0304 	bic.w	r3, r3, #4
 8008536:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d015      	beq.n	800856c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008540:	f7fc ffde 	bl	8005500 <HAL_GetTick>
 8008544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008546:	e00a      	b.n	800855e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008548:	f7fc ffda 	bl	8005500 <HAL_GetTick>
 800854c:	4602      	mov	r2, r0
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	f241 3288 	movw	r2, #5000	; 0x1388
 8008556:	4293      	cmp	r3, r2
 8008558:	d901      	bls.n	800855e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e0cb      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800855e:	4b49      	ldr	r3, [pc, #292]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 8008560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008562:	f003 0302 	and.w	r3, r3, #2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d0ee      	beq.n	8008548 <HAL_RCC_OscConfig+0x334>
 800856a:	e014      	b.n	8008596 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800856c:	f7fc ffc8 	bl	8005500 <HAL_GetTick>
 8008570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008572:	e00a      	b.n	800858a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008574:	f7fc ffc4 	bl	8005500 <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008582:	4293      	cmp	r3, r2
 8008584:	d901      	bls.n	800858a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e0b5      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800858a:	4b3e      	ldr	r3, [pc, #248]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 800858c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800858e:	f003 0302 	and.w	r3, r3, #2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1ee      	bne.n	8008574 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008596:	7dfb      	ldrb	r3, [r7, #23]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d105      	bne.n	80085a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800859c:	4b39      	ldr	r3, [pc, #228]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 800859e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a0:	4a38      	ldr	r2, [pc, #224]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 80085a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 80a1 	beq.w	80086f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80085b2:	4b34      	ldr	r3, [pc, #208]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f003 030c 	and.w	r3, r3, #12
 80085ba:	2b08      	cmp	r3, #8
 80085bc:	d05c      	beq.n	8008678 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d141      	bne.n	800864a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085c6:	4b31      	ldr	r3, [pc, #196]	; (800868c <HAL_RCC_OscConfig+0x478>)
 80085c8:	2200      	movs	r2, #0
 80085ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085cc:	f7fc ff98 	bl	8005500 <HAL_GetTick>
 80085d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085d2:	e008      	b.n	80085e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085d4:	f7fc ff94 	bl	8005500 <HAL_GetTick>
 80085d8:	4602      	mov	r2, r0
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d901      	bls.n	80085e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e087      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085e6:	4b27      	ldr	r3, [pc, #156]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1f0      	bne.n	80085d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	69da      	ldr	r2, [r3, #28]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	431a      	orrs	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008600:	019b      	lsls	r3, r3, #6
 8008602:	431a      	orrs	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008608:	085b      	lsrs	r3, r3, #1
 800860a:	3b01      	subs	r3, #1
 800860c:	041b      	lsls	r3, r3, #16
 800860e:	431a      	orrs	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008614:	061b      	lsls	r3, r3, #24
 8008616:	491b      	ldr	r1, [pc, #108]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 8008618:	4313      	orrs	r3, r2
 800861a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800861c:	4b1b      	ldr	r3, [pc, #108]	; (800868c <HAL_RCC_OscConfig+0x478>)
 800861e:	2201      	movs	r2, #1
 8008620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008622:	f7fc ff6d 	bl	8005500 <HAL_GetTick>
 8008626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008628:	e008      	b.n	800863c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800862a:	f7fc ff69 	bl	8005500 <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	2b02      	cmp	r3, #2
 8008636:	d901      	bls.n	800863c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e05c      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800863c:	4b11      	ldr	r3, [pc, #68]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0f0      	beq.n	800862a <HAL_RCC_OscConfig+0x416>
 8008648:	e054      	b.n	80086f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800864a:	4b10      	ldr	r3, [pc, #64]	; (800868c <HAL_RCC_OscConfig+0x478>)
 800864c:	2200      	movs	r2, #0
 800864e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008650:	f7fc ff56 	bl	8005500 <HAL_GetTick>
 8008654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008656:	e008      	b.n	800866a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008658:	f7fc ff52 	bl	8005500 <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d901      	bls.n	800866a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e045      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800866a:	4b06      	ldr	r3, [pc, #24]	; (8008684 <HAL_RCC_OscConfig+0x470>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1f0      	bne.n	8008658 <HAL_RCC_OscConfig+0x444>
 8008676:	e03d      	b.n	80086f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d107      	bne.n	8008690 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e038      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e2>
 8008684:	40023800 	.word	0x40023800
 8008688:	40007000 	.word	0x40007000
 800868c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008690:	4b1b      	ldr	r3, [pc, #108]	; (8008700 <HAL_RCC_OscConfig+0x4ec>)
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d028      	beq.n	80086f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d121      	bne.n	80086f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d11a      	bne.n	80086f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80086c0:	4013      	ands	r3, r2
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80086c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d111      	bne.n	80086f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d6:	085b      	lsrs	r3, r3, #1
 80086d8:	3b01      	subs	r3, #1
 80086da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80086dc:	429a      	cmp	r2, r3
 80086de:	d107      	bne.n	80086f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d001      	beq.n	80086f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e000      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	40023800 	.word	0x40023800

08008704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e0cc      	b.n	80088b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008718:	4b68      	ldr	r3, [pc, #416]	; (80088bc <HAL_RCC_ClockConfig+0x1b8>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0307 	and.w	r3, r3, #7
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	429a      	cmp	r2, r3
 8008724:	d90c      	bls.n	8008740 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008726:	4b65      	ldr	r3, [pc, #404]	; (80088bc <HAL_RCC_ClockConfig+0x1b8>)
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	b2d2      	uxtb	r2, r2
 800872c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800872e:	4b63      	ldr	r3, [pc, #396]	; (80088bc <HAL_RCC_ClockConfig+0x1b8>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0307 	and.w	r3, r3, #7
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	429a      	cmp	r2, r3
 800873a:	d001      	beq.n	8008740 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e0b8      	b.n	80088b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0302 	and.w	r3, r3, #2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d020      	beq.n	800878e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0304 	and.w	r3, r3, #4
 8008754:	2b00      	cmp	r3, #0
 8008756:	d005      	beq.n	8008764 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008758:	4b59      	ldr	r3, [pc, #356]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	4a58      	ldr	r2, [pc, #352]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 800875e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008762:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0308 	and.w	r3, r3, #8
 800876c:	2b00      	cmp	r3, #0
 800876e:	d005      	beq.n	800877c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008770:	4b53      	ldr	r3, [pc, #332]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	4a52      	ldr	r2, [pc, #328]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800877a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800877c:	4b50      	ldr	r3, [pc, #320]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	494d      	ldr	r1, [pc, #308]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 800878a:	4313      	orrs	r3, r2
 800878c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	d044      	beq.n	8008824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d107      	bne.n	80087b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087a2:	4b47      	ldr	r3, [pc, #284]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d119      	bne.n	80087e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e07f      	b.n	80088b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d003      	beq.n	80087c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d107      	bne.n	80087d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087c2:	4b3f      	ldr	r3, [pc, #252]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d109      	bne.n	80087e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e06f      	b.n	80088b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087d2:	4b3b      	ldr	r3, [pc, #236]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e067      	b.n	80088b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087e2:	4b37      	ldr	r3, [pc, #220]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f023 0203 	bic.w	r2, r3, #3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	4934      	ldr	r1, [pc, #208]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80087f4:	f7fc fe84 	bl	8005500 <HAL_GetTick>
 80087f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087fa:	e00a      	b.n	8008812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087fc:	f7fc fe80 	bl	8005500 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	f241 3288 	movw	r2, #5000	; 0x1388
 800880a:	4293      	cmp	r3, r2
 800880c:	d901      	bls.n	8008812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e04f      	b.n	80088b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008812:	4b2b      	ldr	r3, [pc, #172]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f003 020c 	and.w	r2, r3, #12
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	429a      	cmp	r2, r3
 8008822:	d1eb      	bne.n	80087fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008824:	4b25      	ldr	r3, [pc, #148]	; (80088bc <HAL_RCC_ClockConfig+0x1b8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0307 	and.w	r3, r3, #7
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d20c      	bcs.n	800884c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008832:	4b22      	ldr	r3, [pc, #136]	; (80088bc <HAL_RCC_ClockConfig+0x1b8>)
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	b2d2      	uxtb	r2, r2
 8008838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800883a:	4b20      	ldr	r3, [pc, #128]	; (80088bc <HAL_RCC_ClockConfig+0x1b8>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0307 	and.w	r3, r3, #7
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	429a      	cmp	r2, r3
 8008846:	d001      	beq.n	800884c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e032      	b.n	80088b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	2b00      	cmp	r3, #0
 8008856:	d008      	beq.n	800886a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008858:	4b19      	ldr	r3, [pc, #100]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	4916      	ldr	r1, [pc, #88]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008866:	4313      	orrs	r3, r2
 8008868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0308 	and.w	r3, r3, #8
 8008872:	2b00      	cmp	r3, #0
 8008874:	d009      	beq.n	800888a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008876:	4b12      	ldr	r3, [pc, #72]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	00db      	lsls	r3, r3, #3
 8008884:	490e      	ldr	r1, [pc, #56]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008886:	4313      	orrs	r3, r2
 8008888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800888a:	f000 f821 	bl	80088d0 <HAL_RCC_GetSysClockFreq>
 800888e:	4602      	mov	r2, r0
 8008890:	4b0b      	ldr	r3, [pc, #44]	; (80088c0 <HAL_RCC_ClockConfig+0x1bc>)
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	091b      	lsrs	r3, r3, #4
 8008896:	f003 030f 	and.w	r3, r3, #15
 800889a:	490a      	ldr	r1, [pc, #40]	; (80088c4 <HAL_RCC_ClockConfig+0x1c0>)
 800889c:	5ccb      	ldrb	r3, [r1, r3]
 800889e:	fa22 f303 	lsr.w	r3, r2, r3
 80088a2:	4a09      	ldr	r2, [pc, #36]	; (80088c8 <HAL_RCC_ClockConfig+0x1c4>)
 80088a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80088a6:	4b09      	ldr	r3, [pc, #36]	; (80088cc <HAL_RCC_ClockConfig+0x1c8>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fc fde4 	bl	8005478 <HAL_InitTick>

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	40023c00 	.word	0x40023c00
 80088c0:	40023800 	.word	0x40023800
 80088c4:	0800b574 	.word	0x0800b574
 80088c8:	200003b8 	.word	0x200003b8
 80088cc:	200003bc 	.word	0x200003bc

080088d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088d4:	b094      	sub	sp, #80	; 0x50
 80088d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80088d8:	2300      	movs	r3, #0
 80088da:	647b      	str	r3, [r7, #68]	; 0x44
 80088dc:	2300      	movs	r3, #0
 80088de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088e0:	2300      	movs	r3, #0
 80088e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088e8:	4b79      	ldr	r3, [pc, #484]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f003 030c 	and.w	r3, r3, #12
 80088f0:	2b08      	cmp	r3, #8
 80088f2:	d00d      	beq.n	8008910 <HAL_RCC_GetSysClockFreq+0x40>
 80088f4:	2b08      	cmp	r3, #8
 80088f6:	f200 80e1 	bhi.w	8008abc <HAL_RCC_GetSysClockFreq+0x1ec>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d002      	beq.n	8008904 <HAL_RCC_GetSysClockFreq+0x34>
 80088fe:	2b04      	cmp	r3, #4
 8008900:	d003      	beq.n	800890a <HAL_RCC_GetSysClockFreq+0x3a>
 8008902:	e0db      	b.n	8008abc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008904:	4b73      	ldr	r3, [pc, #460]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008906:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008908:	e0db      	b.n	8008ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800890a:	4b73      	ldr	r3, [pc, #460]	; (8008ad8 <HAL_RCC_GetSysClockFreq+0x208>)
 800890c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800890e:	e0d8      	b.n	8008ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008910:	4b6f      	ldr	r3, [pc, #444]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008918:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800891a:	4b6d      	ldr	r3, [pc, #436]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d063      	beq.n	80089ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008926:	4b6a      	ldr	r3, [pc, #424]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	099b      	lsrs	r3, r3, #6
 800892c:	2200      	movs	r2, #0
 800892e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008930:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008938:	633b      	str	r3, [r7, #48]	; 0x30
 800893a:	2300      	movs	r3, #0
 800893c:	637b      	str	r3, [r7, #52]	; 0x34
 800893e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008942:	4622      	mov	r2, r4
 8008944:	462b      	mov	r3, r5
 8008946:	f04f 0000 	mov.w	r0, #0
 800894a:	f04f 0100 	mov.w	r1, #0
 800894e:	0159      	lsls	r1, r3, #5
 8008950:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008954:	0150      	lsls	r0, r2, #5
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	4621      	mov	r1, r4
 800895c:	1a51      	subs	r1, r2, r1
 800895e:	6139      	str	r1, [r7, #16]
 8008960:	4629      	mov	r1, r5
 8008962:	eb63 0301 	sbc.w	r3, r3, r1
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	f04f 0200 	mov.w	r2, #0
 800896c:	f04f 0300 	mov.w	r3, #0
 8008970:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008974:	4659      	mov	r1, fp
 8008976:	018b      	lsls	r3, r1, #6
 8008978:	4651      	mov	r1, sl
 800897a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800897e:	4651      	mov	r1, sl
 8008980:	018a      	lsls	r2, r1, #6
 8008982:	4651      	mov	r1, sl
 8008984:	ebb2 0801 	subs.w	r8, r2, r1
 8008988:	4659      	mov	r1, fp
 800898a:	eb63 0901 	sbc.w	r9, r3, r1
 800898e:	f04f 0200 	mov.w	r2, #0
 8008992:	f04f 0300 	mov.w	r3, #0
 8008996:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800899a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800899e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80089a2:	4690      	mov	r8, r2
 80089a4:	4699      	mov	r9, r3
 80089a6:	4623      	mov	r3, r4
 80089a8:	eb18 0303 	adds.w	r3, r8, r3
 80089ac:	60bb      	str	r3, [r7, #8]
 80089ae:	462b      	mov	r3, r5
 80089b0:	eb49 0303 	adc.w	r3, r9, r3
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	f04f 0200 	mov.w	r2, #0
 80089ba:	f04f 0300 	mov.w	r3, #0
 80089be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80089c2:	4629      	mov	r1, r5
 80089c4:	024b      	lsls	r3, r1, #9
 80089c6:	4621      	mov	r1, r4
 80089c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80089cc:	4621      	mov	r1, r4
 80089ce:	024a      	lsls	r2, r1, #9
 80089d0:	4610      	mov	r0, r2
 80089d2:	4619      	mov	r1, r3
 80089d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089d6:	2200      	movs	r2, #0
 80089d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80089da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089e0:	f7f8 f838 	bl	8000a54 <__aeabi_uldivmod>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	4613      	mov	r3, r2
 80089ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089ec:	e058      	b.n	8008aa0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089ee:	4b38      	ldr	r3, [pc, #224]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	099b      	lsrs	r3, r3, #6
 80089f4:	2200      	movs	r2, #0
 80089f6:	4618      	mov	r0, r3
 80089f8:	4611      	mov	r1, r2
 80089fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80089fe:	623b      	str	r3, [r7, #32]
 8008a00:	2300      	movs	r3, #0
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24
 8008a04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008a08:	4642      	mov	r2, r8
 8008a0a:	464b      	mov	r3, r9
 8008a0c:	f04f 0000 	mov.w	r0, #0
 8008a10:	f04f 0100 	mov.w	r1, #0
 8008a14:	0159      	lsls	r1, r3, #5
 8008a16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a1a:	0150      	lsls	r0, r2, #5
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4641      	mov	r1, r8
 8008a22:	ebb2 0a01 	subs.w	sl, r2, r1
 8008a26:	4649      	mov	r1, r9
 8008a28:	eb63 0b01 	sbc.w	fp, r3, r1
 8008a2c:	f04f 0200 	mov.w	r2, #0
 8008a30:	f04f 0300 	mov.w	r3, #0
 8008a34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008a38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008a3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008a40:	ebb2 040a 	subs.w	r4, r2, sl
 8008a44:	eb63 050b 	sbc.w	r5, r3, fp
 8008a48:	f04f 0200 	mov.w	r2, #0
 8008a4c:	f04f 0300 	mov.w	r3, #0
 8008a50:	00eb      	lsls	r3, r5, #3
 8008a52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a56:	00e2      	lsls	r2, r4, #3
 8008a58:	4614      	mov	r4, r2
 8008a5a:	461d      	mov	r5, r3
 8008a5c:	4643      	mov	r3, r8
 8008a5e:	18e3      	adds	r3, r4, r3
 8008a60:	603b      	str	r3, [r7, #0]
 8008a62:	464b      	mov	r3, r9
 8008a64:	eb45 0303 	adc.w	r3, r5, r3
 8008a68:	607b      	str	r3, [r7, #4]
 8008a6a:	f04f 0200 	mov.w	r2, #0
 8008a6e:	f04f 0300 	mov.w	r3, #0
 8008a72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008a76:	4629      	mov	r1, r5
 8008a78:	028b      	lsls	r3, r1, #10
 8008a7a:	4621      	mov	r1, r4
 8008a7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008a80:	4621      	mov	r1, r4
 8008a82:	028a      	lsls	r2, r1, #10
 8008a84:	4610      	mov	r0, r2
 8008a86:	4619      	mov	r1, r3
 8008a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	61bb      	str	r3, [r7, #24]
 8008a8e:	61fa      	str	r2, [r7, #28]
 8008a90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a94:	f7f7 ffde 	bl	8000a54 <__aeabi_uldivmod>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008aa0:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	0c1b      	lsrs	r3, r3, #16
 8008aa6:	f003 0303 	and.w	r3, r3, #3
 8008aaa:	3301      	adds	r3, #1
 8008aac:	005b      	lsls	r3, r3, #1
 8008aae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008ab0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008aba:	e002      	b.n	8008ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008abc:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008abe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3750      	adds	r7, #80	; 0x50
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ace:	bf00      	nop
 8008ad0:	40023800 	.word	0x40023800
 8008ad4:	00f42400 	.word	0x00f42400
 8008ad8:	007a1200 	.word	0x007a1200

08008adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008adc:	b480      	push	{r7}
 8008ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ae0:	4b03      	ldr	r3, [pc, #12]	; (8008af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	200003b8 	.word	0x200003b8

08008af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008af8:	f7ff fff0 	bl	8008adc <HAL_RCC_GetHCLKFreq>
 8008afc:	4602      	mov	r2, r0
 8008afe:	4b05      	ldr	r3, [pc, #20]	; (8008b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	0a9b      	lsrs	r3, r3, #10
 8008b04:	f003 0307 	and.w	r3, r3, #7
 8008b08:	4903      	ldr	r1, [pc, #12]	; (8008b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b0a:	5ccb      	ldrb	r3, [r1, r3]
 8008b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	40023800 	.word	0x40023800
 8008b18:	0800b584 	.word	0x0800b584

08008b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008b20:	f7ff ffdc 	bl	8008adc <HAL_RCC_GetHCLKFreq>
 8008b24:	4602      	mov	r2, r0
 8008b26:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	0b5b      	lsrs	r3, r3, #13
 8008b2c:	f003 0307 	and.w	r3, r3, #7
 8008b30:	4903      	ldr	r1, [pc, #12]	; (8008b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b32:	5ccb      	ldrb	r3, [r1, r3]
 8008b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	40023800 	.word	0x40023800
 8008b40:	0800b584 	.word	0x0800b584

08008b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e041      	b.n	8008bda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d106      	bne.n	8008b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7fc fa92 	bl	8005094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2202      	movs	r2, #2
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	4619      	mov	r1, r3
 8008b82:	4610      	mov	r0, r2
 8008b84:	f000 fcb6 	bl	80094f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d001      	beq.n	8008bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e044      	b.n	8008c86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68da      	ldr	r2, [r3, #12]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f042 0201 	orr.w	r2, r2, #1
 8008c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a1e      	ldr	r2, [pc, #120]	; (8008c94 <HAL_TIM_Base_Start_IT+0xb0>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d018      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x6c>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c26:	d013      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x6c>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a1a      	ldr	r2, [pc, #104]	; (8008c98 <HAL_TIM_Base_Start_IT+0xb4>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d00e      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x6c>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a19      	ldr	r2, [pc, #100]	; (8008c9c <HAL_TIM_Base_Start_IT+0xb8>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d009      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x6c>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a17      	ldr	r2, [pc, #92]	; (8008ca0 <HAL_TIM_Base_Start_IT+0xbc>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d004      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x6c>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a16      	ldr	r2, [pc, #88]	; (8008ca4 <HAL_TIM_Base_Start_IT+0xc0>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d111      	bne.n	8008c74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f003 0307 	and.w	r3, r3, #7
 8008c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b06      	cmp	r3, #6
 8008c60:	d010      	beq.n	8008c84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f042 0201 	orr.w	r2, r2, #1
 8008c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c72:	e007      	b.n	8008c84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f042 0201 	orr.w	r2, r2, #1
 8008c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	40010000 	.word	0x40010000
 8008c98:	40000400 	.word	0x40000400
 8008c9c:	40000800 	.word	0x40000800
 8008ca0:	40000c00 	.word	0x40000c00
 8008ca4:	40014000 	.word	0x40014000

08008ca8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e041      	b.n	8008d3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d106      	bne.n	8008cd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7fc f972 	bl	8004fb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	f000 fc04 	bl	80094f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d109      	bne.n	8008d6c <HAL_TIM_PWM_Start+0x24>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	bf14      	ite	ne
 8008d64:	2301      	movne	r3, #1
 8008d66:	2300      	moveq	r3, #0
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	e022      	b.n	8008db2 <HAL_TIM_PWM_Start+0x6a>
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d109      	bne.n	8008d86 <HAL_TIM_PWM_Start+0x3e>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	bf14      	ite	ne
 8008d7e:	2301      	movne	r3, #1
 8008d80:	2300      	moveq	r3, #0
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	e015      	b.n	8008db2 <HAL_TIM_PWM_Start+0x6a>
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b08      	cmp	r3, #8
 8008d8a:	d109      	bne.n	8008da0 <HAL_TIM_PWM_Start+0x58>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	bf14      	ite	ne
 8008d98:	2301      	movne	r3, #1
 8008d9a:	2300      	moveq	r3, #0
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	e008      	b.n	8008db2 <HAL_TIM_PWM_Start+0x6a>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	bf14      	ite	ne
 8008dac:	2301      	movne	r3, #1
 8008dae:	2300      	moveq	r3, #0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e068      	b.n	8008e8c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d104      	bne.n	8008dca <HAL_TIM_PWM_Start+0x82>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dc8:	e013      	b.n	8008df2 <HAL_TIM_PWM_Start+0xaa>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2b04      	cmp	r3, #4
 8008dce:	d104      	bne.n	8008dda <HAL_TIM_PWM_Start+0x92>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dd8:	e00b      	b.n	8008df2 <HAL_TIM_PWM_Start+0xaa>
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b08      	cmp	r3, #8
 8008dde:	d104      	bne.n	8008dea <HAL_TIM_PWM_Start+0xa2>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2202      	movs	r2, #2
 8008de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008de8:	e003      	b.n	8008df2 <HAL_TIM_PWM_Start+0xaa>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2202      	movs	r2, #2
 8008dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2201      	movs	r2, #1
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fd86 	bl	800990c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a23      	ldr	r2, [pc, #140]	; (8008e94 <HAL_TIM_PWM_Start+0x14c>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d107      	bne.n	8008e1a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a1d      	ldr	r2, [pc, #116]	; (8008e94 <HAL_TIM_PWM_Start+0x14c>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d018      	beq.n	8008e56 <HAL_TIM_PWM_Start+0x10e>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e2c:	d013      	beq.n	8008e56 <HAL_TIM_PWM_Start+0x10e>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a19      	ldr	r2, [pc, #100]	; (8008e98 <HAL_TIM_PWM_Start+0x150>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d00e      	beq.n	8008e56 <HAL_TIM_PWM_Start+0x10e>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a17      	ldr	r2, [pc, #92]	; (8008e9c <HAL_TIM_PWM_Start+0x154>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d009      	beq.n	8008e56 <HAL_TIM_PWM_Start+0x10e>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a16      	ldr	r2, [pc, #88]	; (8008ea0 <HAL_TIM_PWM_Start+0x158>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d004      	beq.n	8008e56 <HAL_TIM_PWM_Start+0x10e>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a14      	ldr	r2, [pc, #80]	; (8008ea4 <HAL_TIM_PWM_Start+0x15c>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d111      	bne.n	8008e7a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	f003 0307 	and.w	r3, r3, #7
 8008e60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b06      	cmp	r3, #6
 8008e66:	d010      	beq.n	8008e8a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f042 0201 	orr.w	r2, r2, #1
 8008e76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e78:	e007      	b.n	8008e8a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f042 0201 	orr.w	r2, r2, #1
 8008e88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	40010000 	.word	0x40010000
 8008e98:	40000400 	.word	0x40000400
 8008e9c:	40000800 	.word	0x40000800
 8008ea0:	40000c00 	.word	0x40000c00
 8008ea4:	40014000 	.word	0x40014000

08008ea8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e097      	b.n	8008fec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d106      	bne.n	8008ed6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7fc f899 	bl	8005008 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2202      	movs	r2, #2
 8008eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	6812      	ldr	r2, [r2, #0]
 8008ee8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008eec:	f023 0307 	bic.w	r3, r3, #7
 8008ef0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	3304      	adds	r3, #4
 8008efa:	4619      	mov	r1, r3
 8008efc:	4610      	mov	r0, r2
 8008efe:	f000 faf9 	bl	80094f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f2a:	f023 0303 	bic.w	r3, r3, #3
 8008f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	689a      	ldr	r2, [r3, #8]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	021b      	lsls	r3, r3, #8
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008f48:	f023 030c 	bic.w	r3, r3, #12
 8008f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	68da      	ldr	r2, [r3, #12]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	69db      	ldr	r3, [r3, #28]
 8008f62:	021b      	lsls	r3, r3, #8
 8008f64:	4313      	orrs	r3, r2
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	011a      	lsls	r2, r3, #4
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	031b      	lsls	r3, r3, #12
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008f86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008f8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	011b      	lsls	r3, r3, #4
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3718      	adds	r7, #24
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009004:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800900c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009014:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800901c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d110      	bne.n	8009046 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d102      	bne.n	8009030 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800902a:	7b7b      	ldrb	r3, [r7, #13]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d001      	beq.n	8009034 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e069      	b.n	8009108 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2202      	movs	r2, #2
 8009038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2202      	movs	r2, #2
 8009040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009044:	e031      	b.n	80090aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	2b04      	cmp	r3, #4
 800904a:	d110      	bne.n	800906e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800904c:	7bbb      	ldrb	r3, [r7, #14]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d102      	bne.n	8009058 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009052:	7b3b      	ldrb	r3, [r7, #12]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d001      	beq.n	800905c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e055      	b.n	8009108 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2202      	movs	r2, #2
 8009068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800906c:	e01d      	b.n	80090aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d108      	bne.n	8009086 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009074:	7bbb      	ldrb	r3, [r7, #14]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d105      	bne.n	8009086 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800907a:	7b7b      	ldrb	r3, [r7, #13]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d102      	bne.n	8009086 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009080:	7b3b      	ldrb	r3, [r7, #12]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d001      	beq.n	800908a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e03e      	b.n	8009108 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2202      	movs	r2, #2
 800908e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2202      	movs	r2, #2
 8009096:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2202      	movs	r2, #2
 800909e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2202      	movs	r2, #2
 80090a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d003      	beq.n	80090b8 <HAL_TIM_Encoder_Start+0xc4>
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	2b04      	cmp	r3, #4
 80090b4:	d008      	beq.n	80090c8 <HAL_TIM_Encoder_Start+0xd4>
 80090b6:	e00f      	b.n	80090d8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2201      	movs	r2, #1
 80090be:	2100      	movs	r1, #0
 80090c0:	4618      	mov	r0, r3
 80090c2:	f000 fc23 	bl	800990c <TIM_CCxChannelCmd>
      break;
 80090c6:	e016      	b.n	80090f6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2201      	movs	r2, #1
 80090ce:	2104      	movs	r1, #4
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 fc1b 	bl	800990c <TIM_CCxChannelCmd>
      break;
 80090d6:	e00e      	b.n	80090f6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2201      	movs	r2, #1
 80090de:	2100      	movs	r1, #0
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 fc13 	bl	800990c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2201      	movs	r2, #1
 80090ec:	2104      	movs	r1, #4
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 fc0c 	bl	800990c <TIM_CCxChannelCmd>
      break;
 80090f4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f042 0201 	orr.w	r2, r2, #1
 8009104:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	f003 0302 	and.w	r3, r3, #2
 8009122:	2b02      	cmp	r3, #2
 8009124:	d122      	bne.n	800916c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	f003 0302 	and.w	r3, r3, #2
 8009130:	2b02      	cmp	r3, #2
 8009132:	d11b      	bne.n	800916c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f06f 0202 	mvn.w	r2, #2
 800913c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	f003 0303 	and.w	r3, r3, #3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d003      	beq.n	800915a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f9b0 	bl	80094b8 <HAL_TIM_IC_CaptureCallback>
 8009158:	e005      	b.n	8009166 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f9a2 	bl	80094a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f9b3 	bl	80094cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	f003 0304 	and.w	r3, r3, #4
 8009176:	2b04      	cmp	r3, #4
 8009178:	d122      	bne.n	80091c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b04      	cmp	r3, #4
 8009186:	d11b      	bne.n	80091c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f06f 0204 	mvn.w	r2, #4
 8009190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2202      	movs	r2, #2
 8009196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d003      	beq.n	80091ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f986 	bl	80094b8 <HAL_TIM_IC_CaptureCallback>
 80091ac:	e005      	b.n	80091ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f978 	bl	80094a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f989 	bl	80094cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	f003 0308 	and.w	r3, r3, #8
 80091ca:	2b08      	cmp	r3, #8
 80091cc:	d122      	bne.n	8009214 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	f003 0308 	and.w	r3, r3, #8
 80091d8:	2b08      	cmp	r3, #8
 80091da:	d11b      	bne.n	8009214 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f06f 0208 	mvn.w	r2, #8
 80091e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2204      	movs	r2, #4
 80091ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	69db      	ldr	r3, [r3, #28]
 80091f2:	f003 0303 	and.w	r3, r3, #3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f95c 	bl	80094b8 <HAL_TIM_IC_CaptureCallback>
 8009200:	e005      	b.n	800920e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f94e 	bl	80094a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f95f 	bl	80094cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	f003 0310 	and.w	r3, r3, #16
 800921e:	2b10      	cmp	r3, #16
 8009220:	d122      	bne.n	8009268 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	f003 0310 	and.w	r3, r3, #16
 800922c:	2b10      	cmp	r3, #16
 800922e:	d11b      	bne.n	8009268 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f06f 0210 	mvn.w	r2, #16
 8009238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2208      	movs	r2, #8
 800923e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	69db      	ldr	r3, [r3, #28]
 8009246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800924a:	2b00      	cmp	r3, #0
 800924c:	d003      	beq.n	8009256 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f932 	bl	80094b8 <HAL_TIM_IC_CaptureCallback>
 8009254:	e005      	b.n	8009262 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f924 	bl	80094a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f935 	bl	80094cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	f003 0301 	and.w	r3, r3, #1
 8009272:	2b01      	cmp	r3, #1
 8009274:	d10e      	bne.n	8009294 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	f003 0301 	and.w	r3, r3, #1
 8009280:	2b01      	cmp	r3, #1
 8009282:	d107      	bne.n	8009294 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f06f 0201 	mvn.w	r2, #1
 800928c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f7fb fdd8 	bl	8004e44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800929e:	2b80      	cmp	r3, #128	; 0x80
 80092a0:	d10e      	bne.n	80092c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ac:	2b80      	cmp	r3, #128	; 0x80
 80092ae:	d107      	bne.n	80092c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fc16 	bl	8009aec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ca:	2b40      	cmp	r3, #64	; 0x40
 80092cc:	d10e      	bne.n	80092ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d8:	2b40      	cmp	r3, #64	; 0x40
 80092da:	d107      	bne.n	80092ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f8fa 	bl	80094e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	f003 0320 	and.w	r3, r3, #32
 80092f6:	2b20      	cmp	r3, #32
 80092f8:	d10e      	bne.n	8009318 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f003 0320 	and.w	r3, r3, #32
 8009304:	2b20      	cmp	r3, #32
 8009306:	d107      	bne.n	8009318 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f06f 0220 	mvn.w	r2, #32
 8009310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fbe0 	bl	8009ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009318:	bf00      	nop
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009336:	2b01      	cmp	r3, #1
 8009338:	d101      	bne.n	800933e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800933a:	2302      	movs	r3, #2
 800933c:	e0ae      	b.n	800949c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b0c      	cmp	r3, #12
 800934a:	f200 809f 	bhi.w	800948c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800934e:	a201      	add	r2, pc, #4	; (adr r2, 8009354 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	08009389 	.word	0x08009389
 8009358:	0800948d 	.word	0x0800948d
 800935c:	0800948d 	.word	0x0800948d
 8009360:	0800948d 	.word	0x0800948d
 8009364:	080093c9 	.word	0x080093c9
 8009368:	0800948d 	.word	0x0800948d
 800936c:	0800948d 	.word	0x0800948d
 8009370:	0800948d 	.word	0x0800948d
 8009374:	0800940b 	.word	0x0800940b
 8009378:	0800948d 	.word	0x0800948d
 800937c:	0800948d 	.word	0x0800948d
 8009380:	0800948d 	.word	0x0800948d
 8009384:	0800944b 	.word	0x0800944b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68b9      	ldr	r1, [r7, #8]
 800938e:	4618      	mov	r0, r3
 8009390:	f000 f930 	bl	80095f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	699a      	ldr	r2, [r3, #24]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f042 0208 	orr.w	r2, r2, #8
 80093a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	699a      	ldr	r2, [r3, #24]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f022 0204 	bic.w	r2, r2, #4
 80093b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6999      	ldr	r1, [r3, #24]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	691a      	ldr	r2, [r3, #16]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	430a      	orrs	r2, r1
 80093c4:	619a      	str	r2, [r3, #24]
      break;
 80093c6:	e064      	b.n	8009492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68b9      	ldr	r1, [r7, #8]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 f976 	bl	80096c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	699a      	ldr	r2, [r3, #24]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	699a      	ldr	r2, [r3, #24]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6999      	ldr	r1, [r3, #24]
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	021a      	lsls	r2, r3, #8
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	430a      	orrs	r2, r1
 8009406:	619a      	str	r2, [r3, #24]
      break;
 8009408:	e043      	b.n	8009492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68b9      	ldr	r1, [r7, #8]
 8009410:	4618      	mov	r0, r3
 8009412:	f000 f9c1 	bl	8009798 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	69da      	ldr	r2, [r3, #28]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f042 0208 	orr.w	r2, r2, #8
 8009424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69da      	ldr	r2, [r3, #28]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f022 0204 	bic.w	r2, r2, #4
 8009434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69d9      	ldr	r1, [r3, #28]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	691a      	ldr	r2, [r3, #16]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	430a      	orrs	r2, r1
 8009446:	61da      	str	r2, [r3, #28]
      break;
 8009448:	e023      	b.n	8009492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68b9      	ldr	r1, [r7, #8]
 8009450:	4618      	mov	r0, r3
 8009452:	f000 fa0b 	bl	800986c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	69da      	ldr	r2, [r3, #28]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	69da      	ldr	r2, [r3, #28]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	69d9      	ldr	r1, [r3, #28]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	021a      	lsls	r2, r3, #8
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	430a      	orrs	r2, r1
 8009488:	61da      	str	r2, [r3, #28]
      break;
 800948a:	e002      	b.n	8009492 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	75fb      	strb	r3, [r7, #23]
      break;
 8009490:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800949a:	7dfb      	ldrb	r3, [r7, #23]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3718      	adds	r7, #24
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a34      	ldr	r2, [pc, #208]	; (80095d8 <TIM_Base_SetConfig+0xe4>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d00f      	beq.n	800952c <TIM_Base_SetConfig+0x38>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009512:	d00b      	beq.n	800952c <TIM_Base_SetConfig+0x38>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a31      	ldr	r2, [pc, #196]	; (80095dc <TIM_Base_SetConfig+0xe8>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d007      	beq.n	800952c <TIM_Base_SetConfig+0x38>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a30      	ldr	r2, [pc, #192]	; (80095e0 <TIM_Base_SetConfig+0xec>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d003      	beq.n	800952c <TIM_Base_SetConfig+0x38>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a2f      	ldr	r2, [pc, #188]	; (80095e4 <TIM_Base_SetConfig+0xf0>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d108      	bne.n	800953e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	4313      	orrs	r3, r2
 800953c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a25      	ldr	r2, [pc, #148]	; (80095d8 <TIM_Base_SetConfig+0xe4>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d01b      	beq.n	800957e <TIM_Base_SetConfig+0x8a>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800954c:	d017      	beq.n	800957e <TIM_Base_SetConfig+0x8a>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a22      	ldr	r2, [pc, #136]	; (80095dc <TIM_Base_SetConfig+0xe8>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d013      	beq.n	800957e <TIM_Base_SetConfig+0x8a>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a21      	ldr	r2, [pc, #132]	; (80095e0 <TIM_Base_SetConfig+0xec>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d00f      	beq.n	800957e <TIM_Base_SetConfig+0x8a>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a20      	ldr	r2, [pc, #128]	; (80095e4 <TIM_Base_SetConfig+0xf0>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d00b      	beq.n	800957e <TIM_Base_SetConfig+0x8a>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a1f      	ldr	r2, [pc, #124]	; (80095e8 <TIM_Base_SetConfig+0xf4>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d007      	beq.n	800957e <TIM_Base_SetConfig+0x8a>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a1e      	ldr	r2, [pc, #120]	; (80095ec <TIM_Base_SetConfig+0xf8>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d003      	beq.n	800957e <TIM_Base_SetConfig+0x8a>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a1d      	ldr	r2, [pc, #116]	; (80095f0 <TIM_Base_SetConfig+0xfc>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d108      	bne.n	8009590 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	4313      	orrs	r3, r2
 800958e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	4313      	orrs	r3, r2
 800959c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	689a      	ldr	r2, [r3, #8]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a08      	ldr	r2, [pc, #32]	; (80095d8 <TIM_Base_SetConfig+0xe4>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d103      	bne.n	80095c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	691a      	ldr	r2, [r3, #16]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	615a      	str	r2, [r3, #20]
}
 80095ca:	bf00      	nop
 80095cc:	3714      	adds	r7, #20
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	40010000 	.word	0x40010000
 80095dc:	40000400 	.word	0x40000400
 80095e0:	40000800 	.word	0x40000800
 80095e4:	40000c00 	.word	0x40000c00
 80095e8:	40014000 	.word	0x40014000
 80095ec:	40014400 	.word	0x40014400
 80095f0:	40014800 	.word	0x40014800

080095f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	f023 0201 	bic.w	r2, r3, #1
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f023 0303 	bic.w	r3, r3, #3
 800962a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	4313      	orrs	r3, r2
 8009634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f023 0302 	bic.w	r3, r3, #2
 800963c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	4313      	orrs	r3, r2
 8009646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a1c      	ldr	r2, [pc, #112]	; (80096bc <TIM_OC1_SetConfig+0xc8>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d10c      	bne.n	800966a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f023 0308 	bic.w	r3, r3, #8
 8009656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	697a      	ldr	r2, [r7, #20]
 800965e:	4313      	orrs	r3, r2
 8009660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f023 0304 	bic.w	r3, r3, #4
 8009668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a13      	ldr	r2, [pc, #76]	; (80096bc <TIM_OC1_SetConfig+0xc8>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d111      	bne.n	8009696 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	4313      	orrs	r3, r2
 800968a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	4313      	orrs	r3, r2
 8009694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	685a      	ldr	r2, [r3, #4]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	697a      	ldr	r2, [r7, #20]
 80096ae:	621a      	str	r2, [r3, #32]
}
 80096b0:	bf00      	nop
 80096b2:	371c      	adds	r7, #28
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	40010000 	.word	0x40010000

080096c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	f023 0210 	bic.w	r2, r3, #16
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	021b      	lsls	r3, r3, #8
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	4313      	orrs	r3, r2
 8009702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	f023 0320 	bic.w	r3, r3, #32
 800970a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	011b      	lsls	r3, r3, #4
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	4313      	orrs	r3, r2
 8009716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a1e      	ldr	r2, [pc, #120]	; (8009794 <TIM_OC2_SetConfig+0xd4>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d10d      	bne.n	800973c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	011b      	lsls	r3, r3, #4
 800972e:	697a      	ldr	r2, [r7, #20]
 8009730:	4313      	orrs	r3, r2
 8009732:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800973a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a15      	ldr	r2, [pc, #84]	; (8009794 <TIM_OC2_SetConfig+0xd4>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d113      	bne.n	800976c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800974a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009752:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	4313      	orrs	r3, r2
 800975e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	4313      	orrs	r3, r2
 800976a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	621a      	str	r2, [r3, #32]
}
 8009786:	bf00      	nop
 8009788:	371c      	adds	r7, #28
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	40010000 	.word	0x40010000

08009798 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009798:	b480      	push	{r7}
 800979a:	b087      	sub	sp, #28
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	69db      	ldr	r3, [r3, #28]
 80097be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f023 0303 	bic.w	r3, r3, #3
 80097ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	021b      	lsls	r3, r3, #8
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a1d      	ldr	r2, [pc, #116]	; (8009868 <TIM_OC3_SetConfig+0xd0>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d10d      	bne.n	8009812 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	021b      	lsls	r3, r3, #8
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	4313      	orrs	r3, r2
 8009808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a14      	ldr	r2, [pc, #80]	; (8009868 <TIM_OC3_SetConfig+0xd0>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d113      	bne.n	8009842 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	011b      	lsls	r3, r3, #4
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	4313      	orrs	r3, r2
 8009834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	011b      	lsls	r3, r3, #4
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	4313      	orrs	r3, r2
 8009840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	685a      	ldr	r2, [r3, #4]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	621a      	str	r2, [r3, #32]
}
 800985c:	bf00      	nop
 800985e:	371c      	adds	r7, #28
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	40010000 	.word	0x40010000

0800986c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800986c:	b480      	push	{r7}
 800986e:	b087      	sub	sp, #28
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	69db      	ldr	r3, [r3, #28]
 8009892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800989a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	021b      	lsls	r3, r3, #8
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	031b      	lsls	r3, r3, #12
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a10      	ldr	r2, [pc, #64]	; (8009908 <TIM_OC4_SetConfig+0x9c>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d109      	bne.n	80098e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	695b      	ldr	r3, [r3, #20]
 80098d8:	019b      	lsls	r3, r3, #6
 80098da:	697a      	ldr	r2, [r7, #20]
 80098dc:	4313      	orrs	r3, r2
 80098de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	697a      	ldr	r2, [r7, #20]
 80098e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	621a      	str	r2, [r3, #32]
}
 80098fa:	bf00      	nop
 80098fc:	371c      	adds	r7, #28
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	40010000 	.word	0x40010000

0800990c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800990c:	b480      	push	{r7}
 800990e:	b087      	sub	sp, #28
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	f003 031f 	and.w	r3, r3, #31
 800991e:	2201      	movs	r2, #1
 8009920:	fa02 f303 	lsl.w	r3, r2, r3
 8009924:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6a1a      	ldr	r2, [r3, #32]
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	43db      	mvns	r3, r3
 800992e:	401a      	ands	r2, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6a1a      	ldr	r2, [r3, #32]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f003 031f 	and.w	r3, r3, #31
 800993e:	6879      	ldr	r1, [r7, #4]
 8009940:	fa01 f303 	lsl.w	r3, r1, r3
 8009944:	431a      	orrs	r2, r3
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	621a      	str	r2, [r3, #32]
}
 800994a:	bf00      	nop
 800994c:	371c      	adds	r7, #28
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
	...

08009958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009968:	2b01      	cmp	r3, #1
 800996a:	d101      	bne.n	8009970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800996c:	2302      	movs	r3, #2
 800996e:	e050      	b.n	8009a12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	4313      	orrs	r3, r2
 80099a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a1c      	ldr	r2, [pc, #112]	; (8009a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d018      	beq.n	80099e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099bc:	d013      	beq.n	80099e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a18      	ldr	r2, [pc, #96]	; (8009a24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d00e      	beq.n	80099e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a16      	ldr	r2, [pc, #88]	; (8009a28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d009      	beq.n	80099e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a15      	ldr	r2, [pc, #84]	; (8009a2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d004      	beq.n	80099e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a13      	ldr	r2, [pc, #76]	; (8009a30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d10c      	bne.n	8009a00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	40010000 	.word	0x40010000
 8009a24:	40000400 	.word	0x40000400
 8009a28:	40000800 	.word	0x40000800
 8009a2c:	40000c00 	.word	0x40000c00
 8009a30:	40014000 	.word	0x40014000

08009a34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d101      	bne.n	8009a50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	e03d      	b.n	8009acc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	69db      	ldr	r3, [r3, #28]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3714      	adds	r7, #20
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d101      	bne.n	8009b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e03f      	b.n	8009b92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d106      	bne.n	8009b2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7fb fb16 	bl	8005158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2224      	movs	r2, #36	; 0x24
 8009b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68da      	ldr	r2, [r3, #12]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 ff81 	bl	800aa4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	691a      	ldr	r2, [r3, #16]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	695a      	ldr	r2, [r3, #20]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68da      	ldr	r2, [r3, #12]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2220      	movs	r2, #32
 8009b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2220      	movs	r2, #32
 8009b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
	...

08009b9c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08c      	sub	sp, #48	; 0x30
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b20      	cmp	r3, #32
 8009bb4:	d165      	bne.n	8009c82 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d002      	beq.n	8009bc2 <HAL_UART_Transmit_DMA+0x26>
 8009bbc:	88fb      	ldrh	r3, [r7, #6]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d101      	bne.n	8009bc6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e05e      	b.n	8009c84 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d101      	bne.n	8009bd4 <HAL_UART_Transmit_DMA+0x38>
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	e057      	b.n	8009c84 <HAL_UART_Transmit_DMA+0xe8>
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	88fa      	ldrh	r2, [r7, #6]
 8009be6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	88fa      	ldrh	r2, [r7, #6]
 8009bec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2221      	movs	r2, #33	; 0x21
 8009bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c00:	4a22      	ldr	r2, [pc, #136]	; (8009c8c <HAL_UART_Transmit_DMA+0xf0>)
 8009c02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c08:	4a21      	ldr	r2, [pc, #132]	; (8009c90 <HAL_UART_Transmit_DMA+0xf4>)
 8009c0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c10:	4a20      	ldr	r2, [pc, #128]	; (8009c94 <HAL_UART_Transmit_DMA+0xf8>)
 8009c12:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c18:	2200      	movs	r2, #0
 8009c1a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009c1c:	f107 0308 	add.w	r3, r7, #8
 8009c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c28:	6819      	ldr	r1, [r3, #0]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	461a      	mov	r2, r3
 8009c32:	88fb      	ldrh	r3, [r7, #6]
 8009c34:	f7fb fe30 	bl	8005898 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c40:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	3314      	adds	r3, #20
 8009c50:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	e853 3f00 	ldrex	r3, [r3]
 8009c58:	617b      	str	r3, [r7, #20]
   return(result);
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3314      	adds	r3, #20
 8009c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c6a:	627a      	str	r2, [r7, #36]	; 0x24
 8009c6c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6e:	6a39      	ldr	r1, [r7, #32]
 8009c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c72:	e841 2300 	strex	r3, r2, [r1]
 8009c76:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1e5      	bne.n	8009c4a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	e000      	b.n	8009c84 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009c82:	2302      	movs	r3, #2
  }
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3730      	adds	r7, #48	; 0x30
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	0800a2e5 	.word	0x0800a2e5
 8009c90:	0800a37f 	.word	0x0800a37f
 8009c94:	0800a4f7 	.word	0x0800a4f7

08009c98 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b08c      	sub	sp, #48	; 0x30
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b20      	cmp	r3, #32
 8009cb0:	d152      	bne.n	8009d58 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009cb8:	88fb      	ldrh	r3, [r7, #6]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d101      	bne.n	8009cc2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e04b      	b.n	8009d5a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d101      	bne.n	8009cd0 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009ccc:	2302      	movs	r3, #2
 8009cce:	e044      	b.n	8009d5a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009cde:	88fb      	ldrh	r3, [r7, #6]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	68b9      	ldr	r1, [r7, #8]
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 fc51 	bl	800a58c <UART_Start_Receive_DMA>
 8009cea:	4603      	mov	r3, r0
 8009cec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009cf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d12c      	bne.n	8009d52 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d125      	bne.n	8009d4c <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d00:	2300      	movs	r3, #0
 8009d02:	613b      	str	r3, [r7, #16]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	613b      	str	r3, [r7, #16]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	613b      	str	r3, [r7, #16]
 8009d14:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	330c      	adds	r3, #12
 8009d1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	e853 3f00 	ldrex	r3, [r3]
 8009d24:	617b      	str	r3, [r7, #20]
   return(result);
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	f043 0310 	orr.w	r3, r3, #16
 8009d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	330c      	adds	r3, #12
 8009d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d36:	627a      	str	r2, [r7, #36]	; 0x24
 8009d38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3a:	6a39      	ldr	r1, [r7, #32]
 8009d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3e:	e841 2300 	strex	r3, r2, [r1]
 8009d42:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1e5      	bne.n	8009d16 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8009d4a:	e002      	b.n	8009d52 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d56:	e000      	b.n	8009d5a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8009d58:	2302      	movs	r3, #2
  }
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3730      	adds	r7, #48	; 0x30
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
	...

08009d64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b0ba      	sub	sp, #232	; 0xe8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	695b      	ldr	r3, [r3, #20]
 8009d86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009d90:	2300      	movs	r3, #0
 8009d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d9a:	f003 030f 	and.w	r3, r3, #15
 8009d9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009da2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10f      	bne.n	8009dca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dae:	f003 0320 	and.w	r3, r3, #32
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d009      	beq.n	8009dca <HAL_UART_IRQHandler+0x66>
 8009db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dba:	f003 0320 	and.w	r3, r3, #32
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d003      	beq.n	8009dca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 fd87 	bl	800a8d6 <UART_Receive_IT>
      return;
 8009dc8:	e256      	b.n	800a278 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009dca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 80de 	beq.w	8009f90 <HAL_UART_IRQHandler+0x22c>
 8009dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dd8:	f003 0301 	and.w	r3, r3, #1
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d106      	bne.n	8009dee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009de4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 80d1 	beq.w	8009f90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00b      	beq.n	8009e12 <HAL_UART_IRQHandler+0xae>
 8009dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d005      	beq.n	8009e12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0a:	f043 0201 	orr.w	r2, r3, #1
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e16:	f003 0304 	and.w	r3, r3, #4
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00b      	beq.n	8009e36 <HAL_UART_IRQHandler+0xd2>
 8009e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d005      	beq.n	8009e36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2e:	f043 0202 	orr.w	r2, r3, #2
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e3a:	f003 0302 	and.w	r3, r3, #2
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00b      	beq.n	8009e5a <HAL_UART_IRQHandler+0xf6>
 8009e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e46:	f003 0301 	and.w	r3, r3, #1
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d005      	beq.n	8009e5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e52:	f043 0204 	orr.w	r2, r3, #4
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e5e:	f003 0308 	and.w	r3, r3, #8
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d011      	beq.n	8009e8a <HAL_UART_IRQHandler+0x126>
 8009e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e6a:	f003 0320 	and.w	r3, r3, #32
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d105      	bne.n	8009e7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e76:	f003 0301 	and.w	r3, r3, #1
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d005      	beq.n	8009e8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e82:	f043 0208 	orr.w	r2, r3, #8
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f000 81ed 	beq.w	800a26e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e98:	f003 0320 	and.w	r3, r3, #32
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d008      	beq.n	8009eb2 <HAL_UART_IRQHandler+0x14e>
 8009ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ea4:	f003 0320 	and.w	r3, r3, #32
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d002      	beq.n	8009eb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fd12 	bl	800a8d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	695b      	ldr	r3, [r3, #20]
 8009eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ebc:	2b40      	cmp	r3, #64	; 0x40
 8009ebe:	bf0c      	ite	eq
 8009ec0:	2301      	moveq	r3, #1
 8009ec2:	2300      	movne	r3, #0
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ece:	f003 0308 	and.w	r3, r3, #8
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d103      	bne.n	8009ede <HAL_UART_IRQHandler+0x17a>
 8009ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d04f      	beq.n	8009f7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 fc1a 	bl	800a718 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eee:	2b40      	cmp	r3, #64	; 0x40
 8009ef0:	d141      	bne.n	8009f76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3314      	adds	r3, #20
 8009ef8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f00:	e853 3f00 	ldrex	r3, [r3]
 8009f04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3314      	adds	r3, #20
 8009f1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f2e:	e841 2300 	strex	r3, r2, [r1]
 8009f32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1d9      	bne.n	8009ef2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d013      	beq.n	8009f6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4a:	4a7d      	ldr	r2, [pc, #500]	; (800a140 <HAL_UART_IRQHandler+0x3dc>)
 8009f4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fb fd68 	bl	8005a28 <HAL_DMA_Abort_IT>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d016      	beq.n	8009f8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f68:	4610      	mov	r0, r2
 8009f6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f6c:	e00e      	b.n	8009f8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f9ae 	bl	800a2d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f74:	e00a      	b.n	8009f8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 f9aa 	bl	800a2d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f7c:	e006      	b.n	8009f8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 f9a6 	bl	800a2d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009f8a:	e170      	b.n	800a26e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f8c:	bf00      	nop
    return;
 8009f8e:	e16e      	b.n	800a26e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	f040 814a 	bne.w	800a22e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f9e:	f003 0310 	and.w	r3, r3, #16
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f000 8143 	beq.w	800a22e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fac:	f003 0310 	and.w	r3, r3, #16
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 813c 	beq.w	800a22e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	60bb      	str	r3, [r7, #8]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	60bb      	str	r3, [r7, #8]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	60bb      	str	r3, [r7, #8]
 8009fca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	695b      	ldr	r3, [r3, #20]
 8009fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd6:	2b40      	cmp	r3, #64	; 0x40
 8009fd8:	f040 80b4 	bne.w	800a144 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fe8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f000 8140 	beq.w	800a272 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	f080 8139 	bcs.w	800a272 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a006:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a012:	f000 8088 	beq.w	800a126 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	330c      	adds	r3, #12
 800a01c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a020:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a024:	e853 3f00 	ldrex	r3, [r3]
 800a028:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a02c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a034:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	330c      	adds	r3, #12
 800a03e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a042:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a04e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a052:	e841 2300 	strex	r3, r2, [r1]
 800a056:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a05a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1d9      	bne.n	800a016 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	3314      	adds	r3, #20
 800a068:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a06c:	e853 3f00 	ldrex	r3, [r3]
 800a070:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a074:	f023 0301 	bic.w	r3, r3, #1
 800a078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3314      	adds	r3, #20
 800a082:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a086:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a08a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a08e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a092:	e841 2300 	strex	r3, r2, [r1]
 800a096:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1e1      	bne.n	800a062 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3314      	adds	r3, #20
 800a0a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0a8:	e853 3f00 	ldrex	r3, [r3]
 800a0ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3314      	adds	r3, #20
 800a0be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a0c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a0c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a0c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a0ca:	e841 2300 	strex	r3, r2, [r1]
 800a0ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a0d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d1e3      	bne.n	800a09e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2220      	movs	r2, #32
 800a0da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	330c      	adds	r3, #12
 800a0ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ee:	e853 3f00 	ldrex	r3, [r3]
 800a0f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0f6:	f023 0310 	bic.w	r3, r3, #16
 800a0fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	330c      	adds	r3, #12
 800a104:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a108:	65ba      	str	r2, [r7, #88]	; 0x58
 800a10a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a10e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a110:	e841 2300 	strex	r3, r2, [r1]
 800a114:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1e3      	bne.n	800a0e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a120:	4618      	mov	r0, r3
 800a122:	f7fb fc11 	bl	8005948 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a12e:	b29b      	uxth	r3, r3
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	b29b      	uxth	r3, r3
 800a134:	4619      	mov	r1, r3
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7f9 fdf6 	bl	8003d28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a13c:	e099      	b.n	800a272 <HAL_UART_IRQHandler+0x50e>
 800a13e:	bf00      	nop
 800a140:	0800a7df 	.word	0x0800a7df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a158:	b29b      	uxth	r3, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f000 808b 	beq.w	800a276 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a160:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a164:	2b00      	cmp	r3, #0
 800a166:	f000 8086 	beq.w	800a276 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	330c      	adds	r3, #12
 800a170:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a174:	e853 3f00 	ldrex	r3, [r3]
 800a178:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a17c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a180:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	330c      	adds	r3, #12
 800a18a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a18e:	647a      	str	r2, [r7, #68]	; 0x44
 800a190:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a192:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a194:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a196:	e841 2300 	strex	r3, r2, [r1]
 800a19a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1e3      	bne.n	800a16a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3314      	adds	r3, #20
 800a1a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ac:	e853 3f00 	ldrex	r3, [r3]
 800a1b0:	623b      	str	r3, [r7, #32]
   return(result);
 800a1b2:	6a3b      	ldr	r3, [r7, #32]
 800a1b4:	f023 0301 	bic.w	r3, r3, #1
 800a1b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3314      	adds	r3, #20
 800a1c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a1c6:	633a      	str	r2, [r7, #48]	; 0x30
 800a1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ce:	e841 2300 	strex	r3, r2, [r1]
 800a1d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1e3      	bne.n	800a1a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2220      	movs	r2, #32
 800a1de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	330c      	adds	r3, #12
 800a1ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	e853 3f00 	ldrex	r3, [r3]
 800a1f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f023 0310 	bic.w	r3, r3, #16
 800a1fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	330c      	adds	r3, #12
 800a208:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a20c:	61fa      	str	r2, [r7, #28]
 800a20e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a210:	69b9      	ldr	r1, [r7, #24]
 800a212:	69fa      	ldr	r2, [r7, #28]
 800a214:	e841 2300 	strex	r3, r2, [r1]
 800a218:	617b      	str	r3, [r7, #20]
   return(result);
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1e3      	bne.n	800a1e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a220:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a224:	4619      	mov	r1, r3
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7f9 fd7e 	bl	8003d28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a22c:	e023      	b.n	800a276 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a236:	2b00      	cmp	r3, #0
 800a238:	d009      	beq.n	800a24e <HAL_UART_IRQHandler+0x4ea>
 800a23a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a242:	2b00      	cmp	r3, #0
 800a244:	d003      	beq.n	800a24e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fadd 	bl	800a806 <UART_Transmit_IT>
    return;
 800a24c:	e014      	b.n	800a278 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a24e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00e      	beq.n	800a278 <HAL_UART_IRQHandler+0x514>
 800a25a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a25e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a262:	2b00      	cmp	r3, #0
 800a264:	d008      	beq.n	800a278 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fb1d 	bl	800a8a6 <UART_EndTransmit_IT>
    return;
 800a26c:	e004      	b.n	800a278 <HAL_UART_IRQHandler+0x514>
    return;
 800a26e:	bf00      	nop
 800a270:	e002      	b.n	800a278 <HAL_UART_IRQHandler+0x514>
      return;
 800a272:	bf00      	nop
 800a274:	e000      	b.n	800a278 <HAL_UART_IRQHandler+0x514>
      return;
 800a276:	bf00      	nop
  }
}
 800a278:	37e8      	adds	r7, #232	; 0xe8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop

0800a280 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a288:	bf00      	nop
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a29c:	bf00      	nop
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a2c4:	bf00      	nop
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b090      	sub	sp, #64	; 0x40
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d137      	bne.n	800a370 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a302:	2200      	movs	r2, #0
 800a304:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	3314      	adds	r3, #20
 800a30c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a310:	e853 3f00 	ldrex	r3, [r3]
 800a314:	623b      	str	r3, [r7, #32]
   return(result);
 800a316:	6a3b      	ldr	r3, [r7, #32]
 800a318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a31c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	3314      	adds	r3, #20
 800a324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a326:	633a      	str	r2, [r7, #48]	; 0x30
 800a328:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a32e:	e841 2300 	strex	r3, r2, [r1]
 800a332:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1e5      	bne.n	800a306 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	330c      	adds	r3, #12
 800a340:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	e853 3f00 	ldrex	r3, [r3]
 800a348:	60fb      	str	r3, [r7, #12]
   return(result);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a350:	637b      	str	r3, [r7, #52]	; 0x34
 800a352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	330c      	adds	r3, #12
 800a358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a35a:	61fa      	str	r2, [r7, #28]
 800a35c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35e:	69b9      	ldr	r1, [r7, #24]
 800a360:	69fa      	ldr	r2, [r7, #28]
 800a362:	e841 2300 	strex	r3, r2, [r1]
 800a366:	617b      	str	r3, [r7, #20]
   return(result);
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1e5      	bne.n	800a33a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a36e:	e002      	b.n	800a376 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a370:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a372:	f7ff ff85 	bl	800a280 <HAL_UART_TxCpltCallback>
}
 800a376:	bf00      	nop
 800a378:	3740      	adds	r7, #64	; 0x40
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b084      	sub	sp, #16
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f7ff ff81 	bl	800a294 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a392:	bf00      	nop
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b09c      	sub	sp, #112	; 0x70
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d172      	bne.n	800a49c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a3b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	330c      	adds	r3, #12
 800a3c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c6:	e853 3f00 	ldrex	r3, [r3]
 800a3ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a3cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	330c      	adds	r3, #12
 800a3da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a3dc:	65ba      	str	r2, [r7, #88]	; 0x58
 800a3de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a3e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3e4:	e841 2300 	strex	r3, r2, [r1]
 800a3e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a3ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1e5      	bne.n	800a3bc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	3314      	adds	r3, #20
 800a3f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	e853 3f00 	ldrex	r3, [r3]
 800a3fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a402:	f023 0301 	bic.w	r3, r3, #1
 800a406:	667b      	str	r3, [r7, #100]	; 0x64
 800a408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	3314      	adds	r3, #20
 800a40e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a410:	647a      	str	r2, [r7, #68]	; 0x44
 800a412:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a414:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a418:	e841 2300 	strex	r3, r2, [r1]
 800a41c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a41e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a420:	2b00      	cmp	r3, #0
 800a422:	d1e5      	bne.n	800a3f0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	3314      	adds	r3, #20
 800a42a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42e:	e853 3f00 	ldrex	r3, [r3]
 800a432:	623b      	str	r3, [r7, #32]
   return(result);
 800a434:	6a3b      	ldr	r3, [r7, #32]
 800a436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a43a:	663b      	str	r3, [r7, #96]	; 0x60
 800a43c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	3314      	adds	r3, #20
 800a442:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a444:	633a      	str	r2, [r7, #48]	; 0x30
 800a446:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a448:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a44a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a44c:	e841 2300 	strex	r3, r2, [r1]
 800a450:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1e5      	bne.n	800a424 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a45a:	2220      	movs	r2, #32
 800a45c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a464:	2b01      	cmp	r3, #1
 800a466:	d119      	bne.n	800a49c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	330c      	adds	r3, #12
 800a46e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	e853 3f00 	ldrex	r3, [r3]
 800a476:	60fb      	str	r3, [r7, #12]
   return(result);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f023 0310 	bic.w	r3, r3, #16
 800a47e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	330c      	adds	r3, #12
 800a486:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a488:	61fa      	str	r2, [r7, #28]
 800a48a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48c:	69b9      	ldr	r1, [r7, #24]
 800a48e:	69fa      	ldr	r2, [r7, #28]
 800a490:	e841 2300 	strex	r3, r2, [r1]
 800a494:	617b      	str	r3, [r7, #20]
   return(result);
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1e5      	bne.n	800a468 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a49c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d106      	bne.n	800a4b2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a4ac:	f7f9 fc3c 	bl	8003d28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4b0:	e002      	b.n	800a4b8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a4b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a4b4:	f7ff fef8 	bl	800a2a8 <HAL_UART_RxCpltCallback>
}
 800a4b8:	bf00      	nop
 800a4ba:	3770      	adds	r7, #112	; 0x70
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4cc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d108      	bne.n	800a4e8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a4da:	085b      	lsrs	r3, r3, #1
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	4619      	mov	r1, r3
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f7f9 fc21 	bl	8003d28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4e6:	e002      	b.n	800a4ee <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f7ff fee7 	bl	800a2bc <HAL_UART_RxHalfCpltCallback>
}
 800a4ee:	bf00      	nop
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a4fe:	2300      	movs	r3, #0
 800a500:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a506:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a512:	2b80      	cmp	r3, #128	; 0x80
 800a514:	bf0c      	ite	eq
 800a516:	2301      	moveq	r3, #1
 800a518:	2300      	movne	r3, #0
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b21      	cmp	r3, #33	; 0x21
 800a528:	d108      	bne.n	800a53c <UART_DMAError+0x46>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d005      	beq.n	800a53c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	2200      	movs	r2, #0
 800a534:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a536:	68b8      	ldr	r0, [r7, #8]
 800a538:	f000 f8c6 	bl	800a6c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a546:	2b40      	cmp	r3, #64	; 0x40
 800a548:	bf0c      	ite	eq
 800a54a:	2301      	moveq	r3, #1
 800a54c:	2300      	movne	r3, #0
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	2b22      	cmp	r3, #34	; 0x22
 800a55c:	d108      	bne.n	800a570 <UART_DMAError+0x7a>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d005      	beq.n	800a570 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2200      	movs	r2, #0
 800a568:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a56a:	68b8      	ldr	r0, [r7, #8]
 800a56c:	f000 f8d4 	bl	800a718 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a574:	f043 0210 	orr.w	r2, r3, #16
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a57c:	68b8      	ldr	r0, [r7, #8]
 800a57e:	f7ff fea7 	bl	800a2d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a582:	bf00      	nop
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
	...

0800a58c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b098      	sub	sp, #96	; 0x60
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	4613      	mov	r3, r2
 800a598:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	88fa      	ldrh	r2, [r7, #6]
 800a5a4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2222      	movs	r2, #34	; 0x22
 800a5b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b8:	4a40      	ldr	r2, [pc, #256]	; (800a6bc <UART_Start_Receive_DMA+0x130>)
 800a5ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c0:	4a3f      	ldr	r2, [pc, #252]	; (800a6c0 <UART_Start_Receive_DMA+0x134>)
 800a5c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c8:	4a3e      	ldr	r2, [pc, #248]	; (800a6c4 <UART_Start_Receive_DMA+0x138>)
 800a5ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a5d4:	f107 0308 	add.w	r3, r7, #8
 800a5d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	88fb      	ldrh	r3, [r7, #6]
 800a5ec:	f7fb f954 	bl	8005898 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	613b      	str	r3, [r7, #16]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	613b      	str	r3, [r7, #16]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	613b      	str	r3, [r7, #16]
 800a604:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d019      	beq.n	800a64a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	330c      	adds	r3, #12
 800a61c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a620:	e853 3f00 	ldrex	r3, [r3]
 800a624:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a62c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	330c      	adds	r3, #12
 800a634:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a636:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a638:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a63c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a63e:	e841 2300 	strex	r3, r2, [r1]
 800a642:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1e5      	bne.n	800a616 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	3314      	adds	r3, #20
 800a650:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a654:	e853 3f00 	ldrex	r3, [r3]
 800a658:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65c:	f043 0301 	orr.w	r3, r3, #1
 800a660:	657b      	str	r3, [r7, #84]	; 0x54
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	3314      	adds	r3, #20
 800a668:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a66a:	63ba      	str	r2, [r7, #56]	; 0x38
 800a66c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a672:	e841 2300 	strex	r3, r2, [r1]
 800a676:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d1e5      	bne.n	800a64a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	3314      	adds	r3, #20
 800a684:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	e853 3f00 	ldrex	r3, [r3]
 800a68c:	617b      	str	r3, [r7, #20]
   return(result);
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a694:	653b      	str	r3, [r7, #80]	; 0x50
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	3314      	adds	r3, #20
 800a69c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a69e:	627a      	str	r2, [r7, #36]	; 0x24
 800a6a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a2:	6a39      	ldr	r1, [r7, #32]
 800a6a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6a6:	e841 2300 	strex	r3, r2, [r1]
 800a6aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1e5      	bne.n	800a67e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3760      	adds	r7, #96	; 0x60
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	0800a39b 	.word	0x0800a39b
 800a6c0:	0800a4c1 	.word	0x0800a4c1
 800a6c4:	0800a4f7 	.word	0x0800a4f7

0800a6c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b089      	sub	sp, #36	; 0x24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	330c      	adds	r3, #12
 800a6d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	e853 3f00 	ldrex	r3, [r3]
 800a6de:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a6e6:	61fb      	str	r3, [r7, #28]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	330c      	adds	r3, #12
 800a6ee:	69fa      	ldr	r2, [r7, #28]
 800a6f0:	61ba      	str	r2, [r7, #24]
 800a6f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f4:	6979      	ldr	r1, [r7, #20]
 800a6f6:	69ba      	ldr	r2, [r7, #24]
 800a6f8:	e841 2300 	strex	r3, r2, [r1]
 800a6fc:	613b      	str	r3, [r7, #16]
   return(result);
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1e5      	bne.n	800a6d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2220      	movs	r2, #32
 800a708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a70c:	bf00      	nop
 800a70e:	3724      	adds	r7, #36	; 0x24
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a718:	b480      	push	{r7}
 800a71a:	b095      	sub	sp, #84	; 0x54
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	330c      	adds	r3, #12
 800a726:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a72a:	e853 3f00 	ldrex	r3, [r3]
 800a72e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a732:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a736:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	330c      	adds	r3, #12
 800a73e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a740:	643a      	str	r2, [r7, #64]	; 0x40
 800a742:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a744:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a746:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a748:	e841 2300 	strex	r3, r2, [r1]
 800a74c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a750:	2b00      	cmp	r3, #0
 800a752:	d1e5      	bne.n	800a720 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	3314      	adds	r3, #20
 800a75a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75c:	6a3b      	ldr	r3, [r7, #32]
 800a75e:	e853 3f00 	ldrex	r3, [r3]
 800a762:	61fb      	str	r3, [r7, #28]
   return(result);
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	f023 0301 	bic.w	r3, r3, #1
 800a76a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	3314      	adds	r3, #20
 800a772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a774:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a776:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a77a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a77c:	e841 2300 	strex	r3, r2, [r1]
 800a780:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a784:	2b00      	cmp	r3, #0
 800a786:	d1e5      	bne.n	800a754 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d119      	bne.n	800a7c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	330c      	adds	r3, #12
 800a796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	e853 3f00 	ldrex	r3, [r3]
 800a79e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	f023 0310 	bic.w	r3, r3, #16
 800a7a6:	647b      	str	r3, [r7, #68]	; 0x44
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	330c      	adds	r3, #12
 800a7ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7b0:	61ba      	str	r2, [r7, #24]
 800a7b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b4:	6979      	ldr	r1, [r7, #20]
 800a7b6:	69ba      	ldr	r2, [r7, #24]
 800a7b8:	e841 2300 	strex	r3, r2, [r1]
 800a7bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1e5      	bne.n	800a790 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a7d2:	bf00      	nop
 800a7d4:	3754      	adds	r7, #84	; 0x54
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b084      	sub	sp, #16
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f7ff fd69 	bl	800a2d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7fe:	bf00      	nop
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a806:	b480      	push	{r7}
 800a808:	b085      	sub	sp, #20
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b21      	cmp	r3, #33	; 0x21
 800a818:	d13e      	bne.n	800a898 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a822:	d114      	bne.n	800a84e <UART_Transmit_IT+0x48>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d110      	bne.n	800a84e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a1b      	ldr	r3, [r3, #32]
 800a830:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	881b      	ldrh	r3, [r3, #0]
 800a836:	461a      	mov	r2, r3
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a840:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a1b      	ldr	r3, [r3, #32]
 800a846:	1c9a      	adds	r2, r3, #2
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	621a      	str	r2, [r3, #32]
 800a84c:	e008      	b.n	800a860 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	1c59      	adds	r1, r3, #1
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	6211      	str	r1, [r2, #32]
 800a858:	781a      	ldrb	r2, [r3, #0]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a864:	b29b      	uxth	r3, r3
 800a866:	3b01      	subs	r3, #1
 800a868:	b29b      	uxth	r3, r3
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	4619      	mov	r1, r3
 800a86e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10f      	bne.n	800a894 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68da      	ldr	r2, [r3, #12]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a882:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	68da      	ldr	r2, [r3, #12]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a892:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	e000      	b.n	800a89a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a898:	2302      	movs	r3, #2
  }
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3714      	adds	r7, #20
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68da      	ldr	r2, [r3, #12]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2220      	movs	r2, #32
 800a8c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f7ff fcda 	bl	800a280 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b08c      	sub	sp, #48	; 0x30
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	2b22      	cmp	r3, #34	; 0x22
 800a8e8:	f040 80ab 	bne.w	800aa42 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8f4:	d117      	bne.n	800a926 <UART_Receive_IT+0x50>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d113      	bne.n	800a926 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a8fe:	2300      	movs	r3, #0
 800a900:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a906:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	b29b      	uxth	r3, r3
 800a910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a914:	b29a      	uxth	r2, r3
 800a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a918:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a91e:	1c9a      	adds	r2, r3, #2
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	629a      	str	r2, [r3, #40]	; 0x28
 800a924:	e026      	b.n	800a974 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a92a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a92c:	2300      	movs	r3, #0
 800a92e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a938:	d007      	beq.n	800a94a <UART_Receive_IT+0x74>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10a      	bne.n	800a958 <UART_Receive_IT+0x82>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d106      	bne.n	800a958 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	b2da      	uxtb	r2, r3
 800a952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a954:	701a      	strb	r2, [r3, #0]
 800a956:	e008      	b.n	800a96a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a964:	b2da      	uxtb	r2, r3
 800a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a968:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a96e:	1c5a      	adds	r2, r3, #1
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a978:	b29b      	uxth	r3, r3
 800a97a:	3b01      	subs	r3, #1
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	4619      	mov	r1, r3
 800a982:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a984:	2b00      	cmp	r3, #0
 800a986:	d15a      	bne.n	800aa3e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68da      	ldr	r2, [r3, #12]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f022 0220 	bic.w	r2, r2, #32
 800a996:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68da      	ldr	r2, [r3, #12]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a9a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	695a      	ldr	r2, [r3, #20]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f022 0201 	bic.w	r2, r2, #1
 800a9b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2220      	movs	r2, #32
 800a9bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d135      	bne.n	800aa34 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	330c      	adds	r3, #12
 800a9d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	e853 3f00 	ldrex	r3, [r3]
 800a9dc:	613b      	str	r3, [r7, #16]
   return(result);
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	f023 0310 	bic.w	r3, r3, #16
 800a9e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	330c      	adds	r3, #12
 800a9ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ee:	623a      	str	r2, [r7, #32]
 800a9f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f2:	69f9      	ldr	r1, [r7, #28]
 800a9f4:	6a3a      	ldr	r2, [r7, #32]
 800a9f6:	e841 2300 	strex	r3, r2, [r1]
 800a9fa:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1e5      	bne.n	800a9ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f003 0310 	and.w	r3, r3, #16
 800aa0c:	2b10      	cmp	r3, #16
 800aa0e:	d10a      	bne.n	800aa26 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa10:	2300      	movs	r3, #0
 800aa12:	60fb      	str	r3, [r7, #12]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	60fb      	str	r3, [r7, #12]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	60fb      	str	r3, [r7, #12]
 800aa24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7f9 f97b 	bl	8003d28 <HAL_UARTEx_RxEventCallback>
 800aa32:	e002      	b.n	800aa3a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7ff fc37 	bl	800a2a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	e002      	b.n	800aa44 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	e000      	b.n	800aa44 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800aa42:	2302      	movs	r3, #2
  }
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3730      	adds	r7, #48	; 0x30
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa50:	b0c0      	sub	sp, #256	; 0x100
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aa64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa68:	68d9      	ldr	r1, [r3, #12]
 800aa6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	ea40 0301 	orr.w	r3, r0, r1
 800aa74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aa76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa7a:	689a      	ldr	r2, [r3, #8]
 800aa7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa80:	691b      	ldr	r3, [r3, #16]
 800aa82:	431a      	orrs	r2, r3
 800aa84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa88:	695b      	ldr	r3, [r3, #20]
 800aa8a:	431a      	orrs	r2, r3
 800aa8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa90:	69db      	ldr	r3, [r3, #28]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aa98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aaa4:	f021 010c 	bic.w	r1, r1, #12
 800aaa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aab2:	430b      	orrs	r3, r1
 800aab4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	695b      	ldr	r3, [r3, #20]
 800aabe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aac6:	6999      	ldr	r1, [r3, #24]
 800aac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	ea40 0301 	orr.w	r3, r0, r1
 800aad2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	4b8f      	ldr	r3, [pc, #572]	; (800ad18 <UART_SetConfig+0x2cc>)
 800aadc:	429a      	cmp	r2, r3
 800aade:	d005      	beq.n	800aaec <UART_SetConfig+0xa0>
 800aae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	4b8d      	ldr	r3, [pc, #564]	; (800ad1c <UART_SetConfig+0x2d0>)
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d104      	bne.n	800aaf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aaec:	f7fe f816 	bl	8008b1c <HAL_RCC_GetPCLK2Freq>
 800aaf0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800aaf4:	e003      	b.n	800aafe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aaf6:	f7fd fffd 	bl	8008af4 <HAL_RCC_GetPCLK1Freq>
 800aafa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aafe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab02:	69db      	ldr	r3, [r3, #28]
 800ab04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab08:	f040 810c 	bne.w	800ad24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ab0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab10:	2200      	movs	r2, #0
 800ab12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ab16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ab1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ab1e:	4622      	mov	r2, r4
 800ab20:	462b      	mov	r3, r5
 800ab22:	1891      	adds	r1, r2, r2
 800ab24:	65b9      	str	r1, [r7, #88]	; 0x58
 800ab26:	415b      	adcs	r3, r3
 800ab28:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ab2e:	4621      	mov	r1, r4
 800ab30:	eb12 0801 	adds.w	r8, r2, r1
 800ab34:	4629      	mov	r1, r5
 800ab36:	eb43 0901 	adc.w	r9, r3, r1
 800ab3a:	f04f 0200 	mov.w	r2, #0
 800ab3e:	f04f 0300 	mov.w	r3, #0
 800ab42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ab46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ab4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ab4e:	4690      	mov	r8, r2
 800ab50:	4699      	mov	r9, r3
 800ab52:	4623      	mov	r3, r4
 800ab54:	eb18 0303 	adds.w	r3, r8, r3
 800ab58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab5c:	462b      	mov	r3, r5
 800ab5e:	eb49 0303 	adc.w	r3, r9, r3
 800ab62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ab66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ab72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ab76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	18db      	adds	r3, r3, r3
 800ab7e:	653b      	str	r3, [r7, #80]	; 0x50
 800ab80:	4613      	mov	r3, r2
 800ab82:	eb42 0303 	adc.w	r3, r2, r3
 800ab86:	657b      	str	r3, [r7, #84]	; 0x54
 800ab88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ab8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ab90:	f7f5 ff60 	bl	8000a54 <__aeabi_uldivmod>
 800ab94:	4602      	mov	r2, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	4b61      	ldr	r3, [pc, #388]	; (800ad20 <UART_SetConfig+0x2d4>)
 800ab9a:	fba3 2302 	umull	r2, r3, r3, r2
 800ab9e:	095b      	lsrs	r3, r3, #5
 800aba0:	011c      	lsls	r4, r3, #4
 800aba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aba6:	2200      	movs	r2, #0
 800aba8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800abac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800abb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800abb4:	4642      	mov	r2, r8
 800abb6:	464b      	mov	r3, r9
 800abb8:	1891      	adds	r1, r2, r2
 800abba:	64b9      	str	r1, [r7, #72]	; 0x48
 800abbc:	415b      	adcs	r3, r3
 800abbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800abc4:	4641      	mov	r1, r8
 800abc6:	eb12 0a01 	adds.w	sl, r2, r1
 800abca:	4649      	mov	r1, r9
 800abcc:	eb43 0b01 	adc.w	fp, r3, r1
 800abd0:	f04f 0200 	mov.w	r2, #0
 800abd4:	f04f 0300 	mov.w	r3, #0
 800abd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800abdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800abe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800abe4:	4692      	mov	sl, r2
 800abe6:	469b      	mov	fp, r3
 800abe8:	4643      	mov	r3, r8
 800abea:	eb1a 0303 	adds.w	r3, sl, r3
 800abee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800abf2:	464b      	mov	r3, r9
 800abf4:	eb4b 0303 	adc.w	r3, fp, r3
 800abf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800abfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ac0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ac10:	460b      	mov	r3, r1
 800ac12:	18db      	adds	r3, r3, r3
 800ac14:	643b      	str	r3, [r7, #64]	; 0x40
 800ac16:	4613      	mov	r3, r2
 800ac18:	eb42 0303 	adc.w	r3, r2, r3
 800ac1c:	647b      	str	r3, [r7, #68]	; 0x44
 800ac1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ac22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ac26:	f7f5 ff15 	bl	8000a54 <__aeabi_uldivmod>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4611      	mov	r1, r2
 800ac30:	4b3b      	ldr	r3, [pc, #236]	; (800ad20 <UART_SetConfig+0x2d4>)
 800ac32:	fba3 2301 	umull	r2, r3, r3, r1
 800ac36:	095b      	lsrs	r3, r3, #5
 800ac38:	2264      	movs	r2, #100	; 0x64
 800ac3a:	fb02 f303 	mul.w	r3, r2, r3
 800ac3e:	1acb      	subs	r3, r1, r3
 800ac40:	00db      	lsls	r3, r3, #3
 800ac42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ac46:	4b36      	ldr	r3, [pc, #216]	; (800ad20 <UART_SetConfig+0x2d4>)
 800ac48:	fba3 2302 	umull	r2, r3, r3, r2
 800ac4c:	095b      	lsrs	r3, r3, #5
 800ac4e:	005b      	lsls	r3, r3, #1
 800ac50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ac54:	441c      	add	r4, r3
 800ac56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ac64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ac68:	4642      	mov	r2, r8
 800ac6a:	464b      	mov	r3, r9
 800ac6c:	1891      	adds	r1, r2, r2
 800ac6e:	63b9      	str	r1, [r7, #56]	; 0x38
 800ac70:	415b      	adcs	r3, r3
 800ac72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ac78:	4641      	mov	r1, r8
 800ac7a:	1851      	adds	r1, r2, r1
 800ac7c:	6339      	str	r1, [r7, #48]	; 0x30
 800ac7e:	4649      	mov	r1, r9
 800ac80:	414b      	adcs	r3, r1
 800ac82:	637b      	str	r3, [r7, #52]	; 0x34
 800ac84:	f04f 0200 	mov.w	r2, #0
 800ac88:	f04f 0300 	mov.w	r3, #0
 800ac8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ac90:	4659      	mov	r1, fp
 800ac92:	00cb      	lsls	r3, r1, #3
 800ac94:	4651      	mov	r1, sl
 800ac96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac9a:	4651      	mov	r1, sl
 800ac9c:	00ca      	lsls	r2, r1, #3
 800ac9e:	4610      	mov	r0, r2
 800aca0:	4619      	mov	r1, r3
 800aca2:	4603      	mov	r3, r0
 800aca4:	4642      	mov	r2, r8
 800aca6:	189b      	adds	r3, r3, r2
 800aca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800acac:	464b      	mov	r3, r9
 800acae:	460a      	mov	r2, r1
 800acb0:	eb42 0303 	adc.w	r3, r2, r3
 800acb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800acb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800acc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800acc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800accc:	460b      	mov	r3, r1
 800acce:	18db      	adds	r3, r3, r3
 800acd0:	62bb      	str	r3, [r7, #40]	; 0x28
 800acd2:	4613      	mov	r3, r2
 800acd4:	eb42 0303 	adc.w	r3, r2, r3
 800acd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800acde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ace2:	f7f5 feb7 	bl	8000a54 <__aeabi_uldivmod>
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	4b0d      	ldr	r3, [pc, #52]	; (800ad20 <UART_SetConfig+0x2d4>)
 800acec:	fba3 1302 	umull	r1, r3, r3, r2
 800acf0:	095b      	lsrs	r3, r3, #5
 800acf2:	2164      	movs	r1, #100	; 0x64
 800acf4:	fb01 f303 	mul.w	r3, r1, r3
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	00db      	lsls	r3, r3, #3
 800acfc:	3332      	adds	r3, #50	; 0x32
 800acfe:	4a08      	ldr	r2, [pc, #32]	; (800ad20 <UART_SetConfig+0x2d4>)
 800ad00:	fba2 2303 	umull	r2, r3, r2, r3
 800ad04:	095b      	lsrs	r3, r3, #5
 800ad06:	f003 0207 	and.w	r2, r3, #7
 800ad0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4422      	add	r2, r4
 800ad12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ad14:	e105      	b.n	800af22 <UART_SetConfig+0x4d6>
 800ad16:	bf00      	nop
 800ad18:	40011000 	.word	0x40011000
 800ad1c:	40011400 	.word	0x40011400
 800ad20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ad2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ad32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ad36:	4642      	mov	r2, r8
 800ad38:	464b      	mov	r3, r9
 800ad3a:	1891      	adds	r1, r2, r2
 800ad3c:	6239      	str	r1, [r7, #32]
 800ad3e:	415b      	adcs	r3, r3
 800ad40:	627b      	str	r3, [r7, #36]	; 0x24
 800ad42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ad46:	4641      	mov	r1, r8
 800ad48:	1854      	adds	r4, r2, r1
 800ad4a:	4649      	mov	r1, r9
 800ad4c:	eb43 0501 	adc.w	r5, r3, r1
 800ad50:	f04f 0200 	mov.w	r2, #0
 800ad54:	f04f 0300 	mov.w	r3, #0
 800ad58:	00eb      	lsls	r3, r5, #3
 800ad5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad5e:	00e2      	lsls	r2, r4, #3
 800ad60:	4614      	mov	r4, r2
 800ad62:	461d      	mov	r5, r3
 800ad64:	4643      	mov	r3, r8
 800ad66:	18e3      	adds	r3, r4, r3
 800ad68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ad6c:	464b      	mov	r3, r9
 800ad6e:	eb45 0303 	adc.w	r3, r5, r3
 800ad72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ad76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ad82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ad86:	f04f 0200 	mov.w	r2, #0
 800ad8a:	f04f 0300 	mov.w	r3, #0
 800ad8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ad92:	4629      	mov	r1, r5
 800ad94:	008b      	lsls	r3, r1, #2
 800ad96:	4621      	mov	r1, r4
 800ad98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	008a      	lsls	r2, r1, #2
 800ada0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ada4:	f7f5 fe56 	bl	8000a54 <__aeabi_uldivmod>
 800ada8:	4602      	mov	r2, r0
 800adaa:	460b      	mov	r3, r1
 800adac:	4b60      	ldr	r3, [pc, #384]	; (800af30 <UART_SetConfig+0x4e4>)
 800adae:	fba3 2302 	umull	r2, r3, r3, r2
 800adb2:	095b      	lsrs	r3, r3, #5
 800adb4:	011c      	lsls	r4, r3, #4
 800adb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adba:	2200      	movs	r2, #0
 800adbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800adc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800adc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800adc8:	4642      	mov	r2, r8
 800adca:	464b      	mov	r3, r9
 800adcc:	1891      	adds	r1, r2, r2
 800adce:	61b9      	str	r1, [r7, #24]
 800add0:	415b      	adcs	r3, r3
 800add2:	61fb      	str	r3, [r7, #28]
 800add4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800add8:	4641      	mov	r1, r8
 800adda:	1851      	adds	r1, r2, r1
 800addc:	6139      	str	r1, [r7, #16]
 800adde:	4649      	mov	r1, r9
 800ade0:	414b      	adcs	r3, r1
 800ade2:	617b      	str	r3, [r7, #20]
 800ade4:	f04f 0200 	mov.w	r2, #0
 800ade8:	f04f 0300 	mov.w	r3, #0
 800adec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800adf0:	4659      	mov	r1, fp
 800adf2:	00cb      	lsls	r3, r1, #3
 800adf4:	4651      	mov	r1, sl
 800adf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800adfa:	4651      	mov	r1, sl
 800adfc:	00ca      	lsls	r2, r1, #3
 800adfe:	4610      	mov	r0, r2
 800ae00:	4619      	mov	r1, r3
 800ae02:	4603      	mov	r3, r0
 800ae04:	4642      	mov	r2, r8
 800ae06:	189b      	adds	r3, r3, r2
 800ae08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ae0c:	464b      	mov	r3, r9
 800ae0e:	460a      	mov	r2, r1
 800ae10:	eb42 0303 	adc.w	r3, r2, r3
 800ae14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	67bb      	str	r3, [r7, #120]	; 0x78
 800ae22:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ae24:	f04f 0200 	mov.w	r2, #0
 800ae28:	f04f 0300 	mov.w	r3, #0
 800ae2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ae30:	4649      	mov	r1, r9
 800ae32:	008b      	lsls	r3, r1, #2
 800ae34:	4641      	mov	r1, r8
 800ae36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae3a:	4641      	mov	r1, r8
 800ae3c:	008a      	lsls	r2, r1, #2
 800ae3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ae42:	f7f5 fe07 	bl	8000a54 <__aeabi_uldivmod>
 800ae46:	4602      	mov	r2, r0
 800ae48:	460b      	mov	r3, r1
 800ae4a:	4b39      	ldr	r3, [pc, #228]	; (800af30 <UART_SetConfig+0x4e4>)
 800ae4c:	fba3 1302 	umull	r1, r3, r3, r2
 800ae50:	095b      	lsrs	r3, r3, #5
 800ae52:	2164      	movs	r1, #100	; 0x64
 800ae54:	fb01 f303 	mul.w	r3, r1, r3
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	011b      	lsls	r3, r3, #4
 800ae5c:	3332      	adds	r3, #50	; 0x32
 800ae5e:	4a34      	ldr	r2, [pc, #208]	; (800af30 <UART_SetConfig+0x4e4>)
 800ae60:	fba2 2303 	umull	r2, r3, r2, r3
 800ae64:	095b      	lsrs	r3, r3, #5
 800ae66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae6a:	441c      	add	r4, r3
 800ae6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae70:	2200      	movs	r2, #0
 800ae72:	673b      	str	r3, [r7, #112]	; 0x70
 800ae74:	677a      	str	r2, [r7, #116]	; 0x74
 800ae76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ae7a:	4642      	mov	r2, r8
 800ae7c:	464b      	mov	r3, r9
 800ae7e:	1891      	adds	r1, r2, r2
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	415b      	adcs	r3, r3
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae8a:	4641      	mov	r1, r8
 800ae8c:	1851      	adds	r1, r2, r1
 800ae8e:	6039      	str	r1, [r7, #0]
 800ae90:	4649      	mov	r1, r9
 800ae92:	414b      	adcs	r3, r1
 800ae94:	607b      	str	r3, [r7, #4]
 800ae96:	f04f 0200 	mov.w	r2, #0
 800ae9a:	f04f 0300 	mov.w	r3, #0
 800ae9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aea2:	4659      	mov	r1, fp
 800aea4:	00cb      	lsls	r3, r1, #3
 800aea6:	4651      	mov	r1, sl
 800aea8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aeac:	4651      	mov	r1, sl
 800aeae:	00ca      	lsls	r2, r1, #3
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	4642      	mov	r2, r8
 800aeb8:	189b      	adds	r3, r3, r2
 800aeba:	66bb      	str	r3, [r7, #104]	; 0x68
 800aebc:	464b      	mov	r3, r9
 800aebe:	460a      	mov	r2, r1
 800aec0:	eb42 0303 	adc.w	r3, r2, r3
 800aec4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	663b      	str	r3, [r7, #96]	; 0x60
 800aed0:	667a      	str	r2, [r7, #100]	; 0x64
 800aed2:	f04f 0200 	mov.w	r2, #0
 800aed6:	f04f 0300 	mov.w	r3, #0
 800aeda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800aede:	4649      	mov	r1, r9
 800aee0:	008b      	lsls	r3, r1, #2
 800aee2:	4641      	mov	r1, r8
 800aee4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aee8:	4641      	mov	r1, r8
 800aeea:	008a      	lsls	r2, r1, #2
 800aeec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aef0:	f7f5 fdb0 	bl	8000a54 <__aeabi_uldivmod>
 800aef4:	4602      	mov	r2, r0
 800aef6:	460b      	mov	r3, r1
 800aef8:	4b0d      	ldr	r3, [pc, #52]	; (800af30 <UART_SetConfig+0x4e4>)
 800aefa:	fba3 1302 	umull	r1, r3, r3, r2
 800aefe:	095b      	lsrs	r3, r3, #5
 800af00:	2164      	movs	r1, #100	; 0x64
 800af02:	fb01 f303 	mul.w	r3, r1, r3
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	011b      	lsls	r3, r3, #4
 800af0a:	3332      	adds	r3, #50	; 0x32
 800af0c:	4a08      	ldr	r2, [pc, #32]	; (800af30 <UART_SetConfig+0x4e4>)
 800af0e:	fba2 2303 	umull	r2, r3, r2, r3
 800af12:	095b      	lsrs	r3, r3, #5
 800af14:	f003 020f 	and.w	r2, r3, #15
 800af18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4422      	add	r2, r4
 800af20:	609a      	str	r2, [r3, #8]
}
 800af22:	bf00      	nop
 800af24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800af28:	46bd      	mov	sp, r7
 800af2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af2e:	bf00      	nop
 800af30:	51eb851f 	.word	0x51eb851f

0800af34 <arm_mat_trans_f32>:
 800af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	8802      	ldrh	r2, [r0, #0]
 800af3a:	884b      	ldrh	r3, [r1, #2]
 800af3c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800af40:	684f      	ldr	r7, [r1, #4]
 800af42:	8840      	ldrh	r0, [r0, #2]
 800af44:	4293      	cmp	r3, r2
 800af46:	b083      	sub	sp, #12
 800af48:	d14c      	bne.n	800afe4 <arm_mat_trans_f32+0xb0>
 800af4a:	f8b1 e000 	ldrh.w	lr, [r1]
 800af4e:	4586      	cmp	lr, r0
 800af50:	d148      	bne.n	800afe4 <arm_mat_trans_f32+0xb0>
 800af52:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800af56:	009c      	lsls	r4, r3, #2
 800af58:	f00e 0e03 	and.w	lr, lr, #3
 800af5c:	fb08 f904 	mul.w	r9, r8, r4
 800af60:	ea4f 028e 	mov.w	r2, lr, lsl #2
 800af64:	011d      	lsls	r5, r3, #4
 800af66:	00db      	lsls	r3, r3, #3
 800af68:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800af6c:	eb07 0a04 	add.w	sl, r7, r4
 800af70:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800af74:	9201      	str	r2, [sp, #4]
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	463b      	mov	r3, r7
 800af7a:	f1b8 0f00 	cmp.w	r8, #0
 800af7e:	d01d      	beq.n	800afbc <arm_mat_trans_f32+0x88>
 800af80:	9900      	ldr	r1, [sp, #0]
 800af82:	f10c 0210 	add.w	r2, ip, #16
 800af86:	4439      	add	r1, r7
 800af88:	4640      	mov	r0, r8
 800af8a:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800af8e:	601e      	str	r6, [r3, #0]
 800af90:	ed52 7a03 	vldr	s15, [r2, #-12]
 800af94:	191e      	adds	r6, r3, r4
 800af96:	edc6 7a00 	vstr	s15, [r6]
 800af9a:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800af9e:	600e      	str	r6, [r1, #0]
 800afa0:	ed52 7a01 	vldr	s15, [r2, #-4]
 800afa4:	190e      	adds	r6, r1, r4
 800afa6:	3801      	subs	r0, #1
 800afa8:	442b      	add	r3, r5
 800afaa:	f102 0210 	add.w	r2, r2, #16
 800afae:	edc6 7a00 	vstr	s15, [r6]
 800afb2:	4429      	add	r1, r5
 800afb4:	d1e9      	bne.n	800af8a <arm_mat_trans_f32+0x56>
 800afb6:	44dc      	add	ip, fp
 800afb8:	eb09 0307 	add.w	r3, r9, r7
 800afbc:	f1be 0f00 	cmp.w	lr, #0
 800afc0:	d009      	beq.n	800afd6 <arm_mat_trans_f32+0xa2>
 800afc2:	4672      	mov	r2, lr
 800afc4:	4661      	mov	r1, ip
 800afc6:	f851 0b04 	ldr.w	r0, [r1], #4
 800afca:	6018      	str	r0, [r3, #0]
 800afcc:	3a01      	subs	r2, #1
 800afce:	4423      	add	r3, r4
 800afd0:	d1f9      	bne.n	800afc6 <arm_mat_trans_f32+0x92>
 800afd2:	9b01      	ldr	r3, [sp, #4]
 800afd4:	449c      	add	ip, r3
 800afd6:	3704      	adds	r7, #4
 800afd8:	4557      	cmp	r7, sl
 800afda:	d1cd      	bne.n	800af78 <arm_mat_trans_f32+0x44>
 800afdc:	2000      	movs	r0, #0
 800afde:	b003      	add	sp, #12
 800afe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe4:	f06f 0002 	mvn.w	r0, #2
 800afe8:	e7f9      	b.n	800afde <arm_mat_trans_f32+0xaa>
 800afea:	bf00      	nop

0800afec <arm_mat_sub_f32>:
 800afec:	b4f0      	push	{r4, r5, r6, r7}
 800afee:	e9d1 4700 	ldrd	r4, r7, [r1]
 800aff2:	6803      	ldr	r3, [r0, #0]
 800aff4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800aff8:	6856      	ldr	r6, [r2, #4]
 800affa:	42a3      	cmp	r3, r4
 800affc:	d15d      	bne.n	800b0ba <arm_mat_sub_f32+0xce>
 800affe:	6812      	ldr	r2, [r2, #0]
 800b000:	4293      	cmp	r3, r2
 800b002:	d15a      	bne.n	800b0ba <arm_mat_sub_f32+0xce>
 800b004:	8803      	ldrh	r3, [r0, #0]
 800b006:	8844      	ldrh	r4, [r0, #2]
 800b008:	fb04 f403 	mul.w	r4, r4, r3
 800b00c:	08a5      	lsrs	r5, r4, #2
 800b00e:	d032      	beq.n	800b076 <arm_mat_sub_f32+0x8a>
 800b010:	f10c 0110 	add.w	r1, ip, #16
 800b014:	f107 0210 	add.w	r2, r7, #16
 800b018:	f106 0310 	add.w	r3, r6, #16
 800b01c:	4628      	mov	r0, r5
 800b01e:	ed12 7a04 	vldr	s14, [r2, #-16]
 800b022:	ed51 7a04 	vldr	s15, [r1, #-16]
 800b026:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b02a:	3801      	subs	r0, #1
 800b02c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b030:	ed12 7a03 	vldr	s14, [r2, #-12]
 800b034:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b038:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b03c:	f101 0110 	add.w	r1, r1, #16
 800b040:	ed43 7a03 	vstr	s15, [r3, #-12]
 800b044:	ed12 7a02 	vldr	s14, [r2, #-8]
 800b048:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800b04c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b050:	f102 0210 	add.w	r2, r2, #16
 800b054:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b058:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800b05c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800b060:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b064:	f103 0310 	add.w	r3, r3, #16
 800b068:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800b06c:	d1d7      	bne.n	800b01e <arm_mat_sub_f32+0x32>
 800b06e:	012b      	lsls	r3, r5, #4
 800b070:	449c      	add	ip, r3
 800b072:	441f      	add	r7, r3
 800b074:	441e      	add	r6, r3
 800b076:	f014 0403 	ands.w	r4, r4, #3
 800b07a:	d01b      	beq.n	800b0b4 <arm_mat_sub_f32+0xc8>
 800b07c:	eddc 7a00 	vldr	s15, [ip]
 800b080:	ed97 7a00 	vldr	s14, [r7]
 800b084:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b088:	3c01      	subs	r4, #1
 800b08a:	edc6 7a00 	vstr	s15, [r6]
 800b08e:	d011      	beq.n	800b0b4 <arm_mat_sub_f32+0xc8>
 800b090:	eddc 7a01 	vldr	s15, [ip, #4]
 800b094:	ed97 7a01 	vldr	s14, [r7, #4]
 800b098:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b09c:	2c01      	cmp	r4, #1
 800b09e:	edc6 7a01 	vstr	s15, [r6, #4]
 800b0a2:	d007      	beq.n	800b0b4 <arm_mat_sub_f32+0xc8>
 800b0a4:	eddc 7a02 	vldr	s15, [ip, #8]
 800b0a8:	ed97 7a02 	vldr	s14, [r7, #8]
 800b0ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b0b0:	edc6 7a02 	vstr	s15, [r6, #8]
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	bcf0      	pop	{r4, r5, r6, r7}
 800b0b8:	4770      	bx	lr
 800b0ba:	f06f 0002 	mvn.w	r0, #2
 800b0be:	e7fa      	b.n	800b0b6 <arm_mat_sub_f32+0xca>

0800b0c0 <arm_mat_mult_f32>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	8845      	ldrh	r5, [r0, #2]
 800b0c6:	880b      	ldrh	r3, [r1, #0]
 800b0c8:	8806      	ldrh	r6, [r0, #0]
 800b0ca:	6847      	ldr	r7, [r0, #4]
 800b0cc:	6854      	ldr	r4, [r2, #4]
 800b0ce:	6848      	ldr	r0, [r1, #4]
 800b0d0:	b08b      	sub	sp, #44	; 0x2c
 800b0d2:	42ab      	cmp	r3, r5
 800b0d4:	9109      	str	r1, [sp, #36]	; 0x24
 800b0d6:	9604      	str	r6, [sp, #16]
 800b0d8:	8849      	ldrh	r1, [r1, #2]
 800b0da:	f040 808a 	bne.w	800b1f2 <arm_mat_mult_f32+0x132>
 800b0de:	8815      	ldrh	r5, [r2, #0]
 800b0e0:	42b5      	cmp	r5, r6
 800b0e2:	f040 8086 	bne.w	800b1f2 <arm_mat_mult_f32+0x132>
 800b0e6:	8852      	ldrh	r2, [r2, #2]
 800b0e8:	428a      	cmp	r2, r1
 800b0ea:	f040 8082 	bne.w	800b1f2 <arm_mat_mult_f32+0x132>
 800b0ee:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800b0f2:	1d01      	adds	r1, r0, #4
 800b0f4:	0116      	lsls	r6, r2, #4
 800b0f6:	9108      	str	r1, [sp, #32]
 800b0f8:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800b0fc:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800b100:	9101      	str	r1, [sp, #4]
 800b102:	fb06 f108 	mul.w	r1, r6, r8
 800b106:	0095      	lsls	r5, r2, #2
 800b108:	9103      	str	r1, [sp, #12]
 800b10a:	00d2      	lsls	r2, r2, #3
 800b10c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800b110:	f003 0903 	and.w	r9, r3, #3
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	f107 0b10 	add.w	fp, r7, #16
 800b11a:	eb04 0a05 	add.w	sl, r4, r5
 800b11e:	9107      	str	r1, [sp, #28]
 800b120:	9202      	str	r2, [sp, #8]
 800b122:	9306      	str	r3, [sp, #24]
 800b124:	f1ab 0310 	sub.w	r3, fp, #16
 800b128:	9305      	str	r3, [sp, #20]
 800b12a:	9b07      	ldr	r3, [sp, #28]
 800b12c:	f8dd e020 	ldr.w	lr, [sp, #32]
 800b130:	eb03 0c0a 	add.w	ip, r3, sl
 800b134:	eddf 7a31 	vldr	s15, [pc, #196]	; 800b1fc <arm_mat_mult_f32+0x13c>
 800b138:	f1b8 0f00 	cmp.w	r8, #0
 800b13c:	d053      	beq.n	800b1e6 <arm_mat_mult_f32+0x126>
 800b13e:	9b02      	ldr	r3, [sp, #8]
 800b140:	4644      	mov	r4, r8
 800b142:	18c1      	adds	r1, r0, r3
 800b144:	4602      	mov	r2, r0
 800b146:	465b      	mov	r3, fp
 800b148:	ed92 6a00 	vldr	s12, [r2]
 800b14c:	ed13 7a04 	vldr	s14, [r3, #-16]
 800b150:	ed53 4a03 	vldr	s9, [r3, #-12]
 800b154:	ed53 6a02 	vldr	s13, [r3, #-8]
 800b158:	ed91 5a00 	vldr	s10, [r1]
 800b15c:	ed53 5a01 	vldr	s11, [r3, #-4]
 800b160:	1957      	adds	r7, r2, r5
 800b162:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b166:	ed97 6a00 	vldr	s12, [r7]
 800b16a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b16e:	ee26 6a24 	vmul.f32	s12, s12, s9
 800b172:	194f      	adds	r7, r1, r5
 800b174:	ee36 6a27 	vadd.f32	s12, s12, s15
 800b178:	ee26 7a85 	vmul.f32	s14, s13, s10
 800b17c:	edd7 7a00 	vldr	s15, [r7]
 800b180:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b184:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b188:	3c01      	subs	r4, #1
 800b18a:	4432      	add	r2, r6
 800b18c:	4431      	add	r1, r6
 800b18e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b192:	f103 0310 	add.w	r3, r3, #16
 800b196:	d1d7      	bne.n	800b148 <arm_mat_mult_f32+0x88>
 800b198:	9b03      	ldr	r3, [sp, #12]
 800b19a:	9a01      	ldr	r2, [sp, #4]
 800b19c:	4418      	add	r0, r3
 800b19e:	f1b9 0f00 	cmp.w	r9, #0
 800b1a2:	d00b      	beq.n	800b1bc <arm_mat_mult_f32+0xfc>
 800b1a4:	464b      	mov	r3, r9
 800b1a6:	edd0 6a00 	vldr	s13, [r0]
 800b1aa:	ecb2 7a01 	vldmia	r2!, {s14}
 800b1ae:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	4428      	add	r0, r5
 800b1b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b1ba:	d1f4      	bne.n	800b1a6 <arm_mat_mult_f32+0xe6>
 800b1bc:	ecec 7a01 	vstmia	ip!, {s15}
 800b1c0:	45d4      	cmp	ip, sl
 800b1c2:	4670      	mov	r0, lr
 800b1c4:	f10e 0e04 	add.w	lr, lr, #4
 800b1c8:	d1b4      	bne.n	800b134 <arm_mat_mult_f32+0x74>
 800b1ca:	9a01      	ldr	r2, [sp, #4]
 800b1cc:	9b06      	ldr	r3, [sp, #24]
 800b1ce:	4611      	mov	r1, r2
 800b1d0:	4419      	add	r1, r3
 800b1d2:	449b      	add	fp, r3
 800b1d4:	9b04      	ldr	r3, [sp, #16]
 800b1d6:	9101      	str	r1, [sp, #4]
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	44aa      	add	sl, r5
 800b1dc:	9304      	str	r3, [sp, #16]
 800b1de:	d004      	beq.n	800b1ea <arm_mat_mult_f32+0x12a>
 800b1e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1e2:	6858      	ldr	r0, [r3, #4]
 800b1e4:	e79e      	b.n	800b124 <arm_mat_mult_f32+0x64>
 800b1e6:	9a05      	ldr	r2, [sp, #20]
 800b1e8:	e7d9      	b.n	800b19e <arm_mat_mult_f32+0xde>
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	b00b      	add	sp, #44	; 0x2c
 800b1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f2:	f06f 0002 	mvn.w	r0, #2
 800b1f6:	b00b      	add	sp, #44	; 0x2c
 800b1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1fc:	00000000 	.word	0x00000000

0800b200 <arm_mat_inverse_f32>:
 800b200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b204:	8843      	ldrh	r3, [r0, #2]
 800b206:	8804      	ldrh	r4, [r0, #0]
 800b208:	684e      	ldr	r6, [r1, #4]
 800b20a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800b20e:	b087      	sub	sp, #28
 800b210:	429c      	cmp	r4, r3
 800b212:	9301      	str	r3, [sp, #4]
 800b214:	9603      	str	r6, [sp, #12]
 800b216:	f040 80ea 	bne.w	800b3ee <arm_mat_inverse_f32+0x1ee>
 800b21a:	880a      	ldrh	r2, [r1, #0]
 800b21c:	884b      	ldrh	r3, [r1, #2]
 800b21e:	4293      	cmp	r3, r2
 800b220:	f040 80e5 	bne.w	800b3ee <arm_mat_inverse_f32+0x1ee>
 800b224:	429c      	cmp	r4, r3
 800b226:	f040 80e2 	bne.w	800b3ee <arm_mat_inverse_f32+0x1ee>
 800b22a:	9005      	str	r0, [sp, #20]
 800b22c:	b30c      	cbz	r4, 800b272 <arm_mat_inverse_f32+0x72>
 800b22e:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800b232:	1e67      	subs	r7, r4, #1
 800b234:	f846 bb04 	str.w	fp, [r6], #4
 800b238:	d01b      	beq.n	800b272 <arm_mat_inverse_f32+0x72>
 800b23a:	f04f 0801 	mov.w	r8, #1
 800b23e:	00ba      	lsls	r2, r7, #2
 800b240:	eb06 0a02 	add.w	sl, r6, r2
 800b244:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800b248:	4630      	mov	r0, r6
 800b24a:	2100      	movs	r1, #0
 800b24c:	f000 f97e 	bl	800b54c <memset>
 800b250:	eb0a 0605 	add.w	r6, sl, r5
 800b254:	462a      	mov	r2, r5
 800b256:	2100      	movs	r1, #0
 800b258:	4650      	mov	r0, sl
 800b25a:	f1b8 0f00 	cmp.w	r8, #0
 800b25e:	f000 80cb 	beq.w	800b3f8 <arm_mat_inverse_f32+0x1f8>
 800b262:	f000 f973 	bl	800b54c <memset>
 800b266:	3f01      	subs	r7, #1
 800b268:	f108 0801 	add.w	r8, r8, #1
 800b26c:	f846 bb04 	str.w	fp, [r6], #4
 800b270:	d1e5      	bne.n	800b23e <arm_mat_inverse_f32+0x3e>
 800b272:	9b01      	ldr	r3, [sp, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 80b5 	beq.w	800b3e4 <arm_mat_inverse_f32+0x1e4>
 800b27a:	009d      	lsls	r5, r3, #2
 800b27c:	eb09 0205 	add.w	r2, r9, r5
 800b280:	46cc      	mov	ip, r9
 800b282:	9202      	str	r2, [sp, #8]
 800b284:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b288:	1d2a      	adds	r2, r5, #4
 800b28a:	9204      	str	r2, [sp, #16]
 800b28c:	462f      	mov	r7, r5
 800b28e:	469e      	mov	lr, r3
 800b290:	2600      	movs	r6, #0
 800b292:	9b02      	ldr	r3, [sp, #8]
 800b294:	eddc 6a00 	vldr	s13, [ip]
 800b298:	42b4      	cmp	r4, r6
 800b29a:	eba3 0b07 	sub.w	fp, r3, r7
 800b29e:	f000 80a1 	beq.w	800b3e4 <arm_mat_inverse_f32+0x1e4>
 800b2a2:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800b408 <arm_mat_inverse_f32+0x208>
 800b2a6:	4632      	mov	r2, r6
 800b2a8:	4663      	mov	r3, ip
 800b2aa:	e00b      	b.n	800b2c4 <arm_mat_inverse_f32+0xc4>
 800b2ac:	eef4 7a47 	vcmp.f32	s15, s14
 800b2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2b4:	f102 0201 	add.w	r2, r2, #1
 800b2b8:	bfc8      	it	gt
 800b2ba:	eeb0 7a67 	vmovgt.f32	s14, s15
 800b2be:	42a2      	cmp	r2, r4
 800b2c0:	442b      	add	r3, r5
 800b2c2:	d014      	beq.n	800b2ee <arm_mat_inverse_f32+0xee>
 800b2c4:	edd3 7a00 	vldr	s15, [r3]
 800b2c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2d0:	eeb1 6a67 	vneg.f32	s12, s15
 800b2d4:	dcea      	bgt.n	800b2ac <arm_mat_inverse_f32+0xac>
 800b2d6:	eeb4 6a47 	vcmp.f32	s12, s14
 800b2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2de:	f102 0201 	add.w	r2, r2, #1
 800b2e2:	bfc8      	it	gt
 800b2e4:	eeb0 7a46 	vmovgt.f32	s14, s12
 800b2e8:	42a2      	cmp	r2, r4
 800b2ea:	442b      	add	r3, r5
 800b2ec:	d1ea      	bne.n	800b2c4 <arm_mat_inverse_f32+0xc4>
 800b2ee:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2f6:	d075      	beq.n	800b3e4 <arm_mat_inverse_f32+0x1e4>
 800b2f8:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b300:	d070      	beq.n	800b3e4 <arm_mat_inverse_f32+0x1e4>
 800b302:	4672      	mov	r2, lr
 800b304:	4663      	mov	r3, ip
 800b306:	ed93 7a00 	vldr	s14, [r3]
 800b30a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b30e:	3a01      	subs	r2, #1
 800b310:	ece3 7a01 	vstmia	r3!, {s15}
 800b314:	d1f7      	bne.n	800b306 <arm_mat_inverse_f32+0x106>
 800b316:	9901      	ldr	r1, [sp, #4]
 800b318:	464b      	mov	r3, r9
 800b31a:	ed93 7a00 	vldr	s14, [r3]
 800b31e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b322:	3901      	subs	r1, #1
 800b324:	ece3 7a01 	vstmia	r3!, {s15}
 800b328:	d1f7      	bne.n	800b31a <arm_mat_inverse_f32+0x11a>
 800b32a:	9803      	ldr	r0, [sp, #12]
 800b32c:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800b330:	42b1      	cmp	r1, r6
 800b332:	d039      	beq.n	800b3a8 <arm_mat_inverse_f32+0x1a8>
 800b334:	eddb 6a00 	vldr	s13, [fp]
 800b338:	465a      	mov	r2, fp
 800b33a:	4673      	mov	r3, lr
 800b33c:	46e2      	mov	sl, ip
 800b33e:	ecba 7a01 	vldmia	sl!, {s14}
 800b342:	edd2 7a00 	vldr	s15, [r2]
 800b346:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b34a:	3b01      	subs	r3, #1
 800b34c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b350:	ece2 7a01 	vstmia	r2!, {s15}
 800b354:	d1f3      	bne.n	800b33e <arm_mat_inverse_f32+0x13e>
 800b356:	9b01      	ldr	r3, [sp, #4]
 800b358:	44bb      	add	fp, r7
 800b35a:	4602      	mov	r2, r0
 800b35c:	46ca      	mov	sl, r9
 800b35e:	ecba 7a01 	vldmia	sl!, {s14}
 800b362:	edd2 7a00 	vldr	s15, [r2]
 800b366:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b36a:	3b01      	subs	r3, #1
 800b36c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b370:	ece2 7a01 	vstmia	r2!, {s15}
 800b374:	d1f3      	bne.n	800b35e <arm_mat_inverse_f32+0x15e>
 800b376:	4428      	add	r0, r5
 800b378:	3101      	adds	r1, #1
 800b37a:	428c      	cmp	r4, r1
 800b37c:	44c3      	add	fp, r8
 800b37e:	d1d7      	bne.n	800b330 <arm_mat_inverse_f32+0x130>
 800b380:	9b04      	ldr	r3, [sp, #16]
 800b382:	f1be 0e01 	subs.w	lr, lr, #1
 800b386:	f106 0601 	add.w	r6, r6, #1
 800b38a:	449c      	add	ip, r3
 800b38c:	f1a7 0704 	sub.w	r7, r7, #4
 800b390:	44a9      	add	r9, r5
 800b392:	f47f af7e 	bne.w	800b292 <arm_mat_inverse_f32+0x92>
 800b396:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b39e:	d006      	beq.n	800b3ae <arm_mat_inverse_f32+0x1ae>
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	b007      	add	sp, #28
 800b3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a8:	44bb      	add	fp, r7
 800b3aa:	4428      	add	r0, r5
 800b3ac:	e7e4      	b.n	800b378 <arm_mat_inverse_f32+0x178>
 800b3ae:	9b05      	ldr	r3, [sp, #20]
 800b3b0:	9a01      	ldr	r2, [sp, #4]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	edd3 7a00 	vldr	s15, [r3]
 800b3b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b3bc:	fb02 f204 	mul.w	r2, r2, r4
 800b3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3c4:	4614      	mov	r4, r2
 800b3c6:	bf08      	it	eq
 800b3c8:	3304      	addeq	r3, #4
 800b3ca:	d007      	beq.n	800b3dc <arm_mat_inverse_f32+0x1dc>
 800b3cc:	e7e8      	b.n	800b3a0 <arm_mat_inverse_f32+0x1a0>
 800b3ce:	ecf3 7a01 	vldmia	r3!, {s15}
 800b3d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3da:	d1e1      	bne.n	800b3a0 <arm_mat_inverse_f32+0x1a0>
 800b3dc:	f10e 0e01 	add.w	lr, lr, #1
 800b3e0:	4574      	cmp	r4, lr
 800b3e2:	d1f4      	bne.n	800b3ce <arm_mat_inverse_f32+0x1ce>
 800b3e4:	f06f 0004 	mvn.w	r0, #4
 800b3e8:	b007      	add	sp, #28
 800b3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ee:	f06f 0002 	mvn.w	r0, #2
 800b3f2:	b007      	add	sp, #28
 800b3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f8:	4656      	mov	r6, sl
 800b3fa:	3f01      	subs	r7, #1
 800b3fc:	f846 bb04 	str.w	fp, [r6], #4
 800b400:	f47f af1b 	bne.w	800b23a <arm_mat_inverse_f32+0x3a>
 800b404:	e735      	b.n	800b272 <arm_mat_inverse_f32+0x72>
 800b406:	bf00      	nop
 800b408:	00000000 	.word	0x00000000

0800b40c <arm_mat_init_f32>:
 800b40c:	8001      	strh	r1, [r0, #0]
 800b40e:	8042      	strh	r2, [r0, #2]
 800b410:	6043      	str	r3, [r0, #4]
 800b412:	4770      	bx	lr

0800b414 <arm_mat_add_f32>:
 800b414:	b4f0      	push	{r4, r5, r6, r7}
 800b416:	e9d1 4700 	ldrd	r4, r7, [r1]
 800b41a:	6803      	ldr	r3, [r0, #0]
 800b41c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b420:	6856      	ldr	r6, [r2, #4]
 800b422:	42a3      	cmp	r3, r4
 800b424:	d15d      	bne.n	800b4e2 <arm_mat_add_f32+0xce>
 800b426:	6812      	ldr	r2, [r2, #0]
 800b428:	4293      	cmp	r3, r2
 800b42a:	d15a      	bne.n	800b4e2 <arm_mat_add_f32+0xce>
 800b42c:	8803      	ldrh	r3, [r0, #0]
 800b42e:	8844      	ldrh	r4, [r0, #2]
 800b430:	fb04 f403 	mul.w	r4, r4, r3
 800b434:	08a5      	lsrs	r5, r4, #2
 800b436:	d032      	beq.n	800b49e <arm_mat_add_f32+0x8a>
 800b438:	f10c 0110 	add.w	r1, ip, #16
 800b43c:	f107 0210 	add.w	r2, r7, #16
 800b440:	f106 0310 	add.w	r3, r6, #16
 800b444:	4628      	mov	r0, r5
 800b446:	ed12 7a04 	vldr	s14, [r2, #-16]
 800b44a:	ed51 7a04 	vldr	s15, [r1, #-16]
 800b44e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b452:	3801      	subs	r0, #1
 800b454:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b458:	ed12 7a03 	vldr	s14, [r2, #-12]
 800b45c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b460:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b464:	f101 0110 	add.w	r1, r1, #16
 800b468:	ed43 7a03 	vstr	s15, [r3, #-12]
 800b46c:	ed12 7a02 	vldr	s14, [r2, #-8]
 800b470:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 800b474:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b478:	f102 0210 	add.w	r2, r2, #16
 800b47c:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b480:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800b484:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800b488:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b48c:	f103 0310 	add.w	r3, r3, #16
 800b490:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 800b494:	d1d7      	bne.n	800b446 <arm_mat_add_f32+0x32>
 800b496:	012b      	lsls	r3, r5, #4
 800b498:	449c      	add	ip, r3
 800b49a:	441f      	add	r7, r3
 800b49c:	441e      	add	r6, r3
 800b49e:	f014 0403 	ands.w	r4, r4, #3
 800b4a2:	d01b      	beq.n	800b4dc <arm_mat_add_f32+0xc8>
 800b4a4:	edd7 7a00 	vldr	s15, [r7]
 800b4a8:	ed9c 7a00 	vldr	s14, [ip]
 800b4ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b4b0:	3c01      	subs	r4, #1
 800b4b2:	edc6 7a00 	vstr	s15, [r6]
 800b4b6:	d011      	beq.n	800b4dc <arm_mat_add_f32+0xc8>
 800b4b8:	eddc 7a01 	vldr	s15, [ip, #4]
 800b4bc:	ed97 7a01 	vldr	s14, [r7, #4]
 800b4c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b4c4:	2c01      	cmp	r4, #1
 800b4c6:	edc6 7a01 	vstr	s15, [r6, #4]
 800b4ca:	d007      	beq.n	800b4dc <arm_mat_add_f32+0xc8>
 800b4cc:	eddc 7a02 	vldr	s15, [ip, #8]
 800b4d0:	ed97 7a02 	vldr	s14, [r7, #8]
 800b4d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b4d8:	edc6 7a02 	vstr	s15, [r6, #8]
 800b4dc:	2000      	movs	r0, #0
 800b4de:	bcf0      	pop	{r4, r5, r6, r7}
 800b4e0:	4770      	bx	lr
 800b4e2:	f06f 0002 	mvn.w	r0, #2
 800b4e6:	e7fa      	b.n	800b4de <arm_mat_add_f32+0xca>

0800b4e8 <__libc_init_array>:
 800b4e8:	b570      	push	{r4, r5, r6, lr}
 800b4ea:	4d0d      	ldr	r5, [pc, #52]	; (800b520 <__libc_init_array+0x38>)
 800b4ec:	4c0d      	ldr	r4, [pc, #52]	; (800b524 <__libc_init_array+0x3c>)
 800b4ee:	1b64      	subs	r4, r4, r5
 800b4f0:	10a4      	asrs	r4, r4, #2
 800b4f2:	2600      	movs	r6, #0
 800b4f4:	42a6      	cmp	r6, r4
 800b4f6:	d109      	bne.n	800b50c <__libc_init_array+0x24>
 800b4f8:	4d0b      	ldr	r5, [pc, #44]	; (800b528 <__libc_init_array+0x40>)
 800b4fa:	4c0c      	ldr	r4, [pc, #48]	; (800b52c <__libc_init_array+0x44>)
 800b4fc:	f000 f82e 	bl	800b55c <_init>
 800b500:	1b64      	subs	r4, r4, r5
 800b502:	10a4      	asrs	r4, r4, #2
 800b504:	2600      	movs	r6, #0
 800b506:	42a6      	cmp	r6, r4
 800b508:	d105      	bne.n	800b516 <__libc_init_array+0x2e>
 800b50a:	bd70      	pop	{r4, r5, r6, pc}
 800b50c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b510:	4798      	blx	r3
 800b512:	3601      	adds	r6, #1
 800b514:	e7ee      	b.n	800b4f4 <__libc_init_array+0xc>
 800b516:	f855 3b04 	ldr.w	r3, [r5], #4
 800b51a:	4798      	blx	r3
 800b51c:	3601      	adds	r6, #1
 800b51e:	e7f2      	b.n	800b506 <__libc_init_array+0x1e>
 800b520:	0800b59c 	.word	0x0800b59c
 800b524:	0800b59c 	.word	0x0800b59c
 800b528:	0800b59c 	.word	0x0800b59c
 800b52c:	0800b5a0 	.word	0x0800b5a0

0800b530 <memcpy>:
 800b530:	440a      	add	r2, r1
 800b532:	4291      	cmp	r1, r2
 800b534:	f100 33ff 	add.w	r3, r0, #4294967295
 800b538:	d100      	bne.n	800b53c <memcpy+0xc>
 800b53a:	4770      	bx	lr
 800b53c:	b510      	push	{r4, lr}
 800b53e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b542:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b546:	4291      	cmp	r1, r2
 800b548:	d1f9      	bne.n	800b53e <memcpy+0xe>
 800b54a:	bd10      	pop	{r4, pc}

0800b54c <memset>:
 800b54c:	4402      	add	r2, r0
 800b54e:	4603      	mov	r3, r0
 800b550:	4293      	cmp	r3, r2
 800b552:	d100      	bne.n	800b556 <memset+0xa>
 800b554:	4770      	bx	lr
 800b556:	f803 1b01 	strb.w	r1, [r3], #1
 800b55a:	e7f9      	b.n	800b550 <memset+0x4>

0800b55c <_init>:
 800b55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b55e:	bf00      	nop
 800b560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b562:	bc08      	pop	{r3}
 800b564:	469e      	mov	lr, r3
 800b566:	4770      	bx	lr

0800b568 <_fini>:
 800b568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56a:	bf00      	nop
 800b56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b56e:	bc08      	pop	{r3}
 800b570:	469e      	mov	lr, r3
 800b572:	4770      	bx	lr
